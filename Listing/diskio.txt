; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\diskio.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\diskio.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F4xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX --omf_browse=..\output\diskio.crf ..\drive\diskio.c]
                          THUMB

                          AREA ||i.disk_initialize||, CODE, READONLY, ALIGN=1

                  disk_initialize PROC
;;;39     //初始化磁盘
;;;40     DSTATUS disk_initialize (
000000  b510              PUSH     {r4,lr}
;;;41     	BYTE pdrv				/* Physical drive nmuber (0..) */
;;;42     )
;;;43     {
;;;44     	u8 res=0;	    
;;;45     	switch(pdrv)
000002  2802              CMP      r0,#2
000004  d001              BEQ      |L1.10|
;;;46     	{
;;;47     		case USB_DISK://外部flash
;;;48     	  		if(USBH_UDISK_Status())return 0;	//U盘连接成功,则返回1.否则返回0		  
;;;49     			else return 1;	 
;;;50     		default:
;;;51     			res=1; 
;;;52     	}		 
;;;53     	if(res)return  STA_NOINIT;
000006  2001              MOVS     r0,#1
;;;54     	else return 0; //初始化成功
;;;55     }  
000008  bd10              POP      {r4,pc}
                  |L1.10|
00000a  f7fffffe          BL       USBH_UDISK_Status
00000e  b108              CBZ      r0,|L1.20|
000010  2000              MOVS     r0,#0                 ;48
000012  bd10              POP      {r4,pc}
                  |L1.20|
000014  2001              MOVS     r0,#1                 ;49
000016  bd10              POP      {r4,pc}
;;;56     
                          ENDP


                          AREA ||i.disk_ioctl||, CODE, READONLY, ALIGN=2

                  disk_ioctl PROC
;;;126    #if _USE_IOCTL
;;;127    DRESULT disk_ioctl (
000000  f44f7300          MOV      r3,#0x200
;;;128    	BYTE pdrv,		/* Physical drive nmuber (0..) */
;;;129    	BYTE cmd,		/* Control code */
;;;130    	void *buff		/* Buffer to send/receive control data */
;;;131    )
;;;132    {
;;;133    	DRESULT res;						  			     
;;;134    	if(pdrv==SD_CARD)//SD卡
000004  2800              CMP      r0,#0
000006  d005              BEQ      |L2.20|
;;;135    	{
;;;136    	    switch(cmd)
;;;137    	    {
;;;138    		    case CTRL_SYNC:
;;;139    				res = RES_OK; 
;;;140    		        break;	 
;;;141    		    case GET_SECTOR_SIZE:
;;;142    				*(DWORD*)buff = 512; 
;;;143    		        res = RES_OK;
;;;144    		        break;	 
;;;145    		    default:
;;;146    		        res = RES_PARERR;
;;;147    		        break;
;;;148    	    }
;;;149    	}else if(pdrv==EX_FLASH)	//外部FLASH  
000008  2801              CMP      r0,#1
00000a  d00d              BEQ      |L2.40|
;;;150    	{
;;;151    	    switch(cmd)
;;;152    	    {
;;;153    		    case CTRL_SYNC:
;;;154    				res = RES_OK; 
;;;155    		        break;	 
;;;156    		    case GET_SECTOR_SIZE:
;;;157    		        *(WORD*)buff = FLASH_SECTOR_SIZE;
;;;158    		        res = RES_OK;
;;;159    		        break;	 
;;;160    		    case GET_BLOCK_SIZE:
;;;161    		        *(WORD*)buff = FLASH_BLOCK_SIZE;
;;;162    		        res = RES_OK;
;;;163    		        break;	 
;;;164    		    case GET_SECTOR_COUNT:
;;;165    		        *(DWORD*)buff = FLASH_SECTOR_COUNT;
;;;166    		        res = RES_OK;
;;;167    		        break;
;;;168    		    default:
;;;169    		        res = RES_PARERR;
;;;170    		        break;
;;;171    	    }
;;;172    	}else if(pdrv==USB_DISK)	//U盘
00000c  2802              CMP      r0,#2
00000e  d022              BEQ      |L2.86|
;;;173    	{
;;;174    	    switch(cmd)
;;;175    	    {
;;;176    		    case CTRL_SYNC:
;;;177    				res = RES_OK; 
;;;178    		        break;	 
;;;179    		    case GET_SECTOR_SIZE:
;;;180    		        *(WORD*)buff=512;
;;;181    		        res = RES_OK;
;;;182    		        break;	 
;;;183    		    case GET_BLOCK_SIZE:
;;;184    		        *(WORD*)buff=512;
;;;185    		        res = RES_OK;
;;;186    		        break;	 
;;;187    		    case GET_SECTOR_COUNT:
;;;188    		        *(DWORD*)buff=USBH_MSC_Param.MSCapacity;
;;;189    		        res = RES_OK;
;;;190    		        break;
;;;191    		    default:
;;;192    		        res = RES_PARERR;
;;;193    		        break;
;;;194    	    }		
;;;195    	}else res=RES_ERROR;//其他的不支持
000010  2001              MOVS     r0,#1
;;;196        return res;
;;;197    }
000012  4770              BX       lr
                  |L2.20|
000014  b119              CBZ      r1,|L2.30|
000016  2902              CMP      r1,#2                 ;136
000018  d003              BEQ      |L2.34|
00001a  2004              MOVS     r0,#4                 ;146
00001c  4770              BX       lr
                  |L2.30|
00001e  2000              MOVS     r0,#0                 ;139
000020  4770              BX       lr
                  |L2.34|
000022  6013              STR      r3,[r2,#0]            ;142
000024  2000              MOVS     r0,#0                 ;143
000026  4770              BX       lr
                  |L2.40|
000028  b139              CBZ      r1,|L2.58|
00002a  2901              CMP      r1,#1                 ;151
00002c  d00e              BEQ      |L2.76|
00002e  2902              CMP      r1,#2                 ;151
000030  d005              BEQ      |L2.62|
000032  2903              CMP      r1,#3                 ;151
000034  d006              BEQ      |L2.68|
000036  2004              MOVS     r0,#4                 ;169
000038  4770              BX       lr
                  |L2.58|
00003a  2000              MOVS     r0,#0                 ;154
00003c  4770              BX       lr
                  |L2.62|
00003e  8013              STRH     r3,[r2,#0]            ;157
000040  2000              MOVS     r0,#0                 ;158
000042  4770              BX       lr
                  |L2.68|
000044  2008              MOVS     r0,#8                 ;161
000046  8010              STRH     r0,[r2,#0]            ;161
000048  2000              MOVS     r0,#0                 ;162
00004a  4770              BX       lr
                  |L2.76|
00004c  480d              LDR      r0,|L2.132|
00004e  8800              LDRH     r0,[r0,#0]            ;165  ; FLASH_SECTOR_COUNT
000050  6010              STR      r0,[r2,#0]            ;165
000052  2000              MOVS     r0,#0                 ;166
000054  4770              BX       lr
                  |L2.86|
000056  b139              CBZ      r1,|L2.104|
000058  2901              CMP      r1,#1                 ;174
00005a  d00d              BEQ      |L2.120|
00005c  2902              CMP      r1,#2                 ;174
00005e  d005              BEQ      |L2.108|
000060  2903              CMP      r1,#3                 ;174
000062  d006              BEQ      |L2.114|
000064  2004              MOVS     r0,#4                 ;192
000066  4770              BX       lr
                  |L2.104|
000068  2000              MOVS     r0,#0                 ;177
00006a  4770              BX       lr
                  |L2.108|
00006c  8013              STRH     r3,[r2,#0]            ;180
00006e  2000              MOVS     r0,#0                 ;181
000070  4770              BX       lr
                  |L2.114|
000072  8013              STRH     r3,[r2,#0]            ;184
000074  2000              MOVS     r0,#0                 ;185
000076  4770              BX       lr
                  |L2.120|
000078  4803              LDR      r0,|L2.136|
00007a  6800              LDR      r0,[r0,#0]            ;188  ; USBH_MSC_Param
00007c  6010              STR      r0,[r2,#0]            ;188
00007e  2000              MOVS     r0,#0                 ;189
000080  4770              BX       lr
;;;198    #endif
                          ENDP

000082  0000              DCW      0x0000
                  |L2.132|
                          DCD      ||.data||
                  |L2.136|
                          DCD      USBH_MSC_Param

                          AREA ||i.disk_read||, CODE, READONLY, ALIGN=1

                  disk_read PROC
;;;69     //count:需要读取的扇区数
;;;70     DRESULT disk_read (
000000  b510              PUSH     {r4,lr}
;;;71     	BYTE pdrv,		/* Physical drive nmuber (0..) */
;;;72     	BYTE *buff,		/* Data buffer to store read data */
;;;73     	DWORD sector,	/* Sector address (LBA) */
;;;74     	UINT count		/* Number of sectors to read (1..128) */
;;;75     )
;;;76     {
000002  460c              MOV      r4,r1
000004  4611              MOV      r1,r2
000006  461a              MOV      r2,r3
;;;77     	u8 res=0; 
;;;78         if (!count)return RES_PARERR;//count不能等于0，否则返回参数错误		 	 
000008  2a00              CMP      r2,#0
00000a  d005              BEQ      |L3.24|
;;;79     	switch(pdrv)
00000c  2802              CMP      r0,#2
00000e  d005              BEQ      |L3.28|
;;;80     	{
;;;81     		case USB_DISK://U盘 
;;;82     			res=USBH_UDISK_Read(buff,sector,count);	  
;;;83     			break;
;;;84     		default:
;;;85     			res=1; 
000010  2001              MOVS     r0,#1
                  |L3.18|
;;;86     	}
;;;87        //处理返回值，将SPI_SD_driver.c的返回值转成ff.c的返回值
;;;88         if(res==0x00)return RES_OK;	 
000012  b138              CBZ      r0,|L3.36|
;;;89         else return RES_ERROR;	   
000014  2001              MOVS     r0,#1
;;;90     }
000016  bd10              POP      {r4,pc}
                  |L3.24|
000018  2004              MOVS     r0,#4                 ;78
00001a  bd10              POP      {r4,pc}
                  |L3.28|
00001c  4620              MOV      r0,r4                 ;82
00001e  f7fffffe          BL       USBH_UDISK_Read
000022  e7f6              B        |L3.18|
                  |L3.36|
000024  2000              MOVS     r0,#0                 ;88
000026  bd10              POP      {r4,pc}
;;;91     
                          ENDP


                          AREA ||i.disk_status||, CODE, READONLY, ALIGN=1

                  disk_status PROC
;;;57     //获得磁盘状态
;;;58     DSTATUS disk_status (
000000  2000              MOVS     r0,#0
;;;59     	BYTE pdrv		/* Physical drive nmuber (0..) */
;;;60     )
;;;61     { 
;;;62     	return 0;
;;;63     } 
000002  4770              BX       lr
;;;64     
                          ENDP


                          AREA ||i.disk_write||, CODE, READONLY, ALIGN=1

                  disk_write PROC
;;;97     #if _USE_WRITE
;;;98     DRESULT disk_write (
000000  b510              PUSH     {r4,lr}
;;;99     	BYTE pdrv,			/* Physical drive nmuber (0..) */
;;;100    	const BYTE *buff,	/* Data to be written */
;;;101    	DWORD sector,		/* Sector address (LBA) */
;;;102    	UINT count			/* Number of sectors to write (1..128) */
;;;103    )
;;;104    {
000002  460c              MOV      r4,r1
000004  4611              MOV      r1,r2
000006  461a              MOV      r2,r3
;;;105    	u8 res=0;  
;;;106        if (!count)return RES_PARERR;//count不能等于0，否则返回参数错误		 	 
000008  2a00              CMP      r2,#0
00000a  d005              BEQ      |L5.24|
;;;107    	switch(pdrv)
00000c  2802              CMP      r0,#2
00000e  d005              BEQ      |L5.28|
;;;108    	{
;;;109    		case USB_DISK://U盘
;;;110    			res=USBH_UDISK_Write((u8*)buff,sector,count); 
;;;111    			break;
;;;112    		default:
;;;113    			res=1; 
000010  2001              MOVS     r0,#1
                  |L5.18|
;;;114    	}
;;;115        //处理返回值，将SPI_SD_driver.c的返回值转成ff.c的返回值
;;;116        if(res == 0x00)return RES_OK;	 
000012  b138              CBZ      r0,|L5.36|
;;;117        else return RES_ERROR;	
000014  2001              MOVS     r0,#1
;;;118    }
000016  bd10              POP      {r4,pc}
                  |L5.24|
000018  2004              MOVS     r0,#4                 ;106
00001a  bd10              POP      {r4,pc}
                  |L5.28|
00001c  4620              MOV      r0,r4                 ;110
00001e  f7fffffe          BL       USBH_UDISK_Write
000022  e7f6              B        |L5.18|
                  |L5.36|
000024  2000              MOVS     r0,#0                 ;116
000026  bd10              POP      {r4,pc}
;;;119    #endif
                          ENDP


                          AREA ||i.get_fattime||, CODE, READONLY, ALIGN=1

                  get_fattime PROC
;;;202    //15-11: Hour(0-23), 10-5: Minute(0-59), 4-0: Second(0-29 *2) */                                                                                                                                                                                                                                                
;;;203    DWORD get_fattime (void)
000000  2000              MOVS     r0,#0
;;;204    {				 
;;;205    	return 0;
;;;206    }			 
000002  4770              BX       lr
;;;207    //动态分配内存
                          ENDP


                          AREA ||.data||, DATA, ALIGN=1

                  FLASH_SECTOR_COUNT
000000  6000              DCW      0x6000

;*** Start embedded assembler ***

#line 1 "..\\drive\\diskio.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_diskio_c_e3159e14____REV16|
#line 129 "d:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_diskio_c_e3159e14____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_diskio_c_e3159e14____REVSH|
#line 144
|__asm___8_diskio_c_e3159e14____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
