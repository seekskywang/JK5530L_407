; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\exfuns.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\exfuns.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F4xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX --omf_browse=..\output\exfuns.crf ..\FATFS\exfuns\exfuns.c]
                          THUMB

                          AREA ||i.char_upper||, CODE, READONLY, ALIGN=1

                  char_upper PROC
;;;59     //将小写字母转为大写字母,如果是数字,则保持不变.
;;;60     u8 char_upper(u8 c)
000000  2841              CMP      r0,#0x41
;;;61     {
000002  d303              BCC      |L1.12|
;;;62     	if(c<'A')return c;//数字,保持不变.
;;;63     	if(c>='a')return c-0x20;//变为大写.
000004  2861              CMP      r0,#0x61
000006  d301              BCC      |L1.12|
000008  3820              SUBS     r0,r0,#0x20
00000a  b2c0              UXTB     r0,r0
                  |L1.12|
;;;64     	else return c;//大写,保持不变
;;;65     }	      
00000c  4770              BX       lr
;;;66     //报告文件的类型
                          ENDP


                          AREA ||i.exf_getfree||, CODE, READONLY, ALIGN=1

                  exf_getfree PROC
;;;112    //返回值:0,正常.其他,错误代码
;;;113    u8 exf_getfree(u8 *drv,u32 *total,u32 *free)
000000  b57c              PUSH     {r2-r6,lr}
;;;114    {
000002  460d              MOV      r5,r1
000004  4616              MOV      r6,r2
;;;115    	FATFS *fs1;
;;;116    	u8 res;
;;;117        u32 fre_clust=0, fre_sect=0, tot_sect=0;
000006  2100              MOVS     r1,#0
000008  9100              STR      r1,[sp,#0]
;;;118        //得到磁盘信息及空闲簇数量
;;;119        res =(u32)f_getfree((const TCHAR*)drv, (DWORD*)&fre_clust, &fs1);
00000a  aa01              ADD      r2,sp,#4
00000c  4669              MOV      r1,sp
00000e  f7fffffe          BL       f_getfree
;;;120        if(res==0)
000012  2800              CMP      r0,#0
000014  d10a              BNE      |L2.44|
;;;121    	{											   
;;;122    	    tot_sect=(fs1->n_fatent-2)*fs1->csize;	//得到总扇区数
000016  9b01              LDR      r3,[sp,#4]
000018  695c              LDR      r4,[r3,#0x14]
00001a  789b              LDRB     r3,[r3,#2]
00001c  1ea4              SUBS     r4,r4,#2
00001e  435c              MULS     r4,r3,r4
;;;123    	    fre_sect=fre_clust*fs1->csize;			//得到空闲扇区数	   
000020  9900              LDR      r1,[sp,#0]
000022  434b              MULS     r3,r1,r3
;;;124    #if _MAX_SS!=512				  				//扇区大小不是512字节,则转换为512字节
;;;125    		tot_sect*=fs1->ssize/512;
;;;126    		fre_sect*=fs1->ssize/512;
;;;127    #endif	  
;;;128    		*total=tot_sect>>1;	//单位为KB
000024  0861              LSRS     r1,r4,#1
000026  6029              STR      r1,[r5,#0]
;;;129    		*free=fre_sect>>1;	//单位为KB 
000028  0859              LSRS     r1,r3,#1
00002a  6031              STR      r1,[r6,#0]
                  |L2.44|
;;;130     	}
;;;131    	return res;
;;;132    }	
00002c  bd7c              POP      {r2-r6,pc}
;;;133    
                          ENDP


                          AREA ||i.exfuns_init||, CODE, READONLY, ALIGN=2

                  exfuns_init PROC
;;;43     //1,失败
;;;44     u8 exfuns_init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;45     {
;;;46     	u8 i;
;;;47     	for(i=0;i<_VOLUMES;i++)
000002  2400              MOVS     r4,#0
;;;48     	{
;;;49     		fs[i]=(FATFS*)mymalloc(SRAMIN,sizeof(FATFS));	//为磁盘i工作区申请内存	
000004  4d15              LDR      r5,|L3.92|
000006  f44f760c          MOV      r6,#0x230
                  |L3.10|
00000a  4631              MOV      r1,r6
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       mymalloc
000012  f8450024          STR      r0,[r5,r4,LSL #2]
;;;50     		if(!fs[i])break;
000016  b118              CBZ      r0,|L3.32|
000018  1c64              ADDS     r4,r4,#1              ;47
00001a  b2e4              UXTB     r4,r4                 ;47
00001c  2c03              CMP      r4,#3                 ;47
00001e  d3f4              BCC      |L3.10|
                  |L3.32|
;;;51     	}
;;;52     	file=(FIL*)mymalloc(SRAMIN,sizeof(FIL));		//为file申请内存
000020  f44f760a          MOV      r6,#0x228
000024  4631              MOV      r1,r6
000026  2000              MOVS     r0,#0
000028  f7fffffe          BL       mymalloc
00002c  4d0c              LDR      r5,|L3.96|
00002e  6028              STR      r0,[r5,#0]  ; file
;;;53     	ftemp=(FIL*)mymalloc(SRAMIN,sizeof(FIL));		//为ftemp申请内存
000030  4631              MOV      r1,r6
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       mymalloc
000038  6068              STR      r0,[r5,#4]  ; ftemp
;;;54     	fatbuf=(u8*)mymalloc(SRAMIN,512);				//为fatbuf申请内存
00003a  f44f7100          MOV      r1,#0x200
00003e  2000              MOVS     r0,#0
000040  f7fffffe          BL       mymalloc
000044  60a8              STR      r0,[r5,#8]  ; fatbuf
;;;55     	if(i==_VOLUMES&&file&&ftemp&&fatbuf)return 0;  //申请有一个失败,即失败.
000046  2c03              CMP      r4,#3
000048  d106              BNE      |L3.88|
00004a  6829              LDR      r1,[r5,#0]  ; file
00004c  b121              CBZ      r1,|L3.88|
00004e  6869              LDR      r1,[r5,#4]  ; ftemp
000050  b111              CBZ      r1,|L3.88|
000052  b108              CBZ      r0,|L3.88|
000054  2000              MOVS     r0,#0
;;;56     	else return 1;	
;;;57     }
000056  bd70              POP      {r4-r6,pc}
                  |L3.88|
000058  2001              MOVS     r0,#1                 ;56
00005a  bd70              POP      {r4-r6,pc}
;;;58     
                          ENDP

                  |L3.92|
                          DCD      ||.bss||
                  |L3.96|
                          DCD      ||.data||

                          AREA ||i.f_typetell||, CODE, READONLY, ALIGN=2

                  f_typetell PROC
;;;69     //		 其他,高四位表示所属大类,低四位表示所属小类.
;;;70     u8 f_typetell(u8 *fname)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;71     {
;;;72     	u8 tbuf[5];
;;;73     	u8 *attr='\0';//后缀名
000004  2100              MOVS     r1,#0
;;;74     	u8 i=0,j;
000006  2200              MOVS     r2,#0
                  |L4.8|
;;;75     	while(i<250)
;;;76     	{
;;;77     		i++;
000008  1c52              ADDS     r2,r2,#1
00000a  b2d2              UXTB     r2,r2
;;;78     		if(*fname=='\0')break;//偏移到了最后了.
00000c  7803              LDRB     r3,[r0,#0]
00000e  b113              CBZ      r3,|L4.22|
;;;79     		fname++;
000010  1c40              ADDS     r0,r0,#1
000012  2afa              CMP      r2,#0xfa              ;75
000014  d3f8              BCC      |L4.8|
                  |L4.22|
;;;80     	}
;;;81     	if(i==250)return 0XFF;//错误的字符串.
000016  2afa              CMP      r2,#0xfa
000018  d02d              BEQ      |L4.118|
;;;82      	for(i=0;i<5;i++)//得到后缀名
00001a  2200              MOVS     r2,#0
                  |L4.28|
;;;83     	{
;;;84     		fname--;
00001c  1e40              SUBS     r0,r0,#1
;;;85     		if(*fname=='.')
00001e  7803              LDRB     r3,[r0,#0]
000020  2b2e              CMP      r3,#0x2e
000022  d02a              BEQ      |L4.122|
000024  1c52              ADDS     r2,r2,#1              ;82
000026  b2d2              UXTB     r2,r2                 ;82
000028  2a05              CMP      r2,#5                 ;82
00002a  d3f7              BCC      |L4.28|
                  |L4.44|
;;;86     		{
;;;87     			fname++;
;;;88     			attr=fname;
;;;89     			break;
;;;90     		}
;;;91       	}
;;;92     	strcpy((char *)tbuf,(const char*)attr);//copy
00002c  4668              MOV      r0,sp
00002e  f7fffffe          BL       strcpy
;;;93      	for(i=0;i<4;i++)tbuf[i]=char_upper(tbuf[i]);//全部变为大写 
000032  2100              MOVS     r1,#0
000034  466a              MOV      r2,sp                 ;72
                  |L4.54|
000036  5c50              LDRB     r0,[r2,r1]
000038  f7fffffe          BL       char_upper
00003c  5450              STRB     r0,[r2,r1]
00003e  1c49              ADDS     r1,r1,#1
000040  b2c9              UXTB     r1,r1
000042  2904              CMP      r1,#4
000044  d3f7              BCC      |L4.54|
;;;94     	for(i=0;i<FILE_MAX_TYPE_NUM;i++)	//大类对比
000046  2500              MOVS     r5,#0
;;;95     	{
;;;96     		for(j=0;j<FILE_MAX_SUBT_NUM;j++)//子类对比
;;;97     		{
;;;98     			if(*FILE_TYPE_TBL[i][j]==0)break;//此组已经没有可对比的成员了.
000048  4f0f              LDR      r7,|L4.136|
                  |L4.74|
00004a  2400              MOVS     r4,#0                 ;96
00004c  eb071605          ADD      r6,r7,r5,LSL #4
                  |L4.80|
000050  f8560024          LDR      r0,[r6,r4,LSL #2]
000054  7801              LDRB     r1,[r0,#0]
000056  b139              CBZ      r1,|L4.104|
;;;99     			if(strcmp((const char *)FILE_TYPE_TBL[i][j],(const char *)tbuf)==0)//找到了
000058  4669              MOV      r1,sp
00005a  f7fffffe          BL       strcmp
00005e  b178              CBZ      r0,|L4.128|
000060  1c64              ADDS     r4,r4,#1              ;96
000062  b2e4              UXTB     r4,r4                 ;96
000064  2c04              CMP      r4,#4                 ;96
000066  d3f3              BCC      |L4.80|
                  |L4.104|
000068  1c6d              ADDS     r5,r5,#1              ;94
00006a  b2ed              UXTB     r5,r5                 ;94
00006c  2d07              CMP      r5,#7                 ;94
00006e  d3ec              BCC      |L4.74|
;;;100    			{
;;;101    				return (i<<4)|j;
;;;102    			}
;;;103    		}
;;;104    	}
;;;105    	return 0XFF;//没找到		 			   
000070  20ff              MOVS     r0,#0xff
                  |L4.114|
;;;106    }	 
000072  e8bd81fc          POP      {r2-r8,pc}
                  |L4.118|
000076  20ff              MOVS     r0,#0xff              ;81
000078  e7fb              B        |L4.114|
                  |L4.122|
00007a  1c40              ADDS     r0,r0,#1              ;87
00007c  4601              MOV      r1,r0                 ;88
00007e  e7d5              B        |L4.44|
                  |L4.128|
000080  ea441005          ORR      r0,r4,r5,LSL #4       ;101
000084  b2c0              UXTB     r0,r0                 ;101
000086  e7f4              B        |L4.114|
;;;107    
                          ENDP

                  |L4.136|
                          DCD      ||.constdata||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ||fs||
                          %        12

                          AREA ||area_number.7||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.bss||
                  fileinfo
                          %        32

                          AREA ||area_number.8||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.bss||
                  ||dir||
                          %        36

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  FILE_TYPE_TBL
                          DCD      ||.conststring||
                          %        12
                          DCD      ||.conststring||+0x4
                          %        12
                          DCD      ||.conststring||+0x8
                          %        12
                          DCD      ||.conststring||+0xc
                          DCD      ||.conststring||+0x10
                          DCD      ||.conststring||+0x12
                          DCD      0x00000000
                          DCD      ||.conststring||+0x14
                          DCD      ||.conststring||+0x18
                          DCD      ||.conststring||+0x1c
                          DCD      ||.conststring||+0x20
                          DCD      ||.conststring||+0x25
                          DCD      ||.conststring||+0x29
                          DCD      ||.conststring||+0x2d
                          DCD      ||.conststring||+0x32
                          DCD      ||.conststring||+0x36
                          %        12

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  42494e00          DCB      "BIN",0
000004  4c524300          DCB      "LRC",0
000008  4e455300          DCB      "NES",0
00000c  54585400          DCB      "TXT",0
000010  4300              DCB      "C",0
000012  4800              DCB      "H",0
000014  57415600          DCB      "WAV",0
000018  4d503300          DCB      "MP3",0
00001c  41504500          DCB      "APE",0
000020  464c4143          DCB      "FLAC",0
000024  00      
000025  424d5000          DCB      "BMP",0
000029  4a504700          DCB      "JPG",0
00002d  4a504547          DCB      "JPEG",0
000031  00      
000032  47494600          DCB      "GIF",0
000036  41564900          DCB      "AVI",0

                          AREA ||.data||, DATA, ALIGN=2

                  file
                          DCD      0x00000000
                  ftemp
                          DCD      0x00000000
                  fatbuf
                          DCD      0x00000000

                          AREA ||area_number.13||, DATA, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.data||
                  ||br||
                          DCD      0x00000000

                          AREA ||area_number.14||, DATA, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.data||
                  ||bw||
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\FATFS\\exfuns\\exfuns.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_exfuns_c_08be7bcc____REV16|
#line 129 "d:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_exfuns_c_08be7bcc____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_exfuns_c_08be7bcc____REVSH|
#line 144
|__asm___8_exfuns_c_08be7bcc____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
