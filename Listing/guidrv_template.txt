; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\guidrv_template.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\guidrv_template.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=537 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\guidrv_template.crf --no_multibyte_chars ..\STemWinLibrary522\Config\GUIDRV_Template.c]
                          THUMB

                          AREA ||i._DrawBitLine16BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine16BPP PROC
;;;591    */
;;;592    static void _DrawBitLine16BPP(GUI_DEVICE * pDevice, int x, int y, U16 const GUI_UNI_PTR * p, int xsize) {
000000  b5f0              PUSH     {r4-r7,lr}
;;;593    //   for (;xsize > 0; xsize--, x++, p++) {
;;;594    //     _SetPixelIndex(pDevice, x, y, *p);
;;;595    //   }
;;;596        LCD_PIXELINDEX ColorIndex;
;;;597        
;;;598        ColorIndex = LCD__GetColorIndex();
000002  4818              LDR      r0,|L1.100|
;;;599        *(__IO u16 *) (Bank1_LCD_C) = 0x2a;
000004  f04f45c0          MOV      r5,#0x60000000
000008  9c05              LDR      r4,[sp,#0x14]         ;598
00000a  6806              LDR      r6,[r0,#0]  ; GUI_pContext
00000c  202a              MOVS     r0,#0x2a
00000e  8028              STRH     r0,[r5,#0]
;;;600        *(__IO u16 *) (Bank1_LCD_D) = (x>>8)&0xff;
000010  4815              LDR      r0,|L1.104|
000012  f3c12707          UBFX     r7,r1,#8,#8
000016  8007              STRH     r7,[r0,#0]
;;;601        *(__IO u16 *) (Bank1_LCD_D) = x & 0xff;
000018  b2c9              UXTB     r1,r1
00001a  8001              STRH     r1,[r0,#0]
;;;602        *(__IO u16 *) (Bank1_LCD_D) = (480>>8)&0xff;
00001c  2101              MOVS     r1,#1
00001e  8001              STRH     r1,[r0,#0]
;;;603        *(__IO u16 *) (Bank1_LCD_D) = 480 & 0xff;
000020  27e0              MOVS     r7,#0xe0
000022  8007              STRH     r7,[r0,#0]
;;;604        
;;;605        *(__IO u16 *) (Bank1_LCD_C) = 0x2b;
000024  272b              MOVS     r7,#0x2b
000026  802f              STRH     r7,[r5,#0]
;;;606        *(__IO u16 *) (Bank1_LCD_D) = (y>>8)&0xff;
000028  f3c22707          UBFX     r7,r2,#8,#8
00002c  8007              STRH     r7,[r0,#0]
;;;607        *(__IO u16 *) (Bank1_LCD_D) = y & 0xff;
00002e  b2d2              UXTB     r2,r2
000030  8002              STRH     r2,[r0,#0]
;;;608        *(__IO u16 *) (Bank1_LCD_D) = (272>>8)&0xff;
000032  8001              STRH     r1,[r0,#0]
;;;609        *(__IO u16 *) (Bank1_LCD_D) = 272 & 0xff;
000034  2110              MOVS     r1,#0x10
000036  8001              STRH     r1,[r0,#0]
;;;610    
;;;611        *(__IO u16 *) (Bank1_LCD_C) = 0x2c;
000038  212c              MOVS     r1,#0x2c
00003a  8029              STRH     r1,[r5,#0]
;;;612        
;;;613        if ((GUI_pContext->DrawMode & LCD_DRAWMODE_TRANS)==0)
00003c  7c31              LDRB     r1,[r6,#0x10]
00003e  0789              LSLS     r1,r1,#30
000040  d504              BPL      |L1.76|
000042  e00b              B        |L1.92|
                  |L1.68|
;;;614        {
;;;615    
;;;616            for( ; xsize>0; xsize--,x++,p++)
;;;617                *(__IO u16 *) (Bank1_LCD_D) = *p;
000044  f8331b02          LDRH     r1,[r3],#2
000048  8001              STRH     r1,[r0,#0]
00004a  1e64              SUBS     r4,r4,#1
                  |L1.76|
00004c  2c00              CMP      r4,#0                 ;616
00004e  dcf9              BGT      |L1.68|
;;;618        }
;;;619        else
;;;620        {
;;;621            for (; xsize > 0; xsize--, x++, p++)
;;;622            {
;;;623                ColorIndex = *p;
;;;624                if (ColorIndex)
;;;625                {
;;;626                   *(__IO u16 *) (Bank1_LCD_D) = ColorIndex;
;;;627                }
;;;628            }
;;;629        }
;;;630    }
000050  bdf0              POP      {r4-r7,pc}
                  |L1.82|
000052  8819              LDRH     r1,[r3,#0]            ;623
000054  b101              CBZ      r1,|L1.88|
000056  8001              STRH     r1,[r0,#0]            ;626
                  |L1.88|
000058  1c9b              ADDS     r3,r3,#2              ;626
00005a  1e64              SUBS     r4,r4,#1              ;626
                  |L1.92|
00005c  2c00              CMP      r4,#0                 ;621
00005e  dcf8              BGT      |L1.82|
000060  bdf0              POP      {r4-r7,pc}
;;;631    
                          ENDP

000062  0000              DCW      0x0000
                  |L1.100|
                          DCD      GUI_pContext
                  |L1.104|
                          DCD      0x60020000

                          AREA ||i._DrawBitLine1BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine1BPP PROC
;;;361    */
;;;362    static void _DrawBitLine1BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
000000  e92d5fff          PUSH     {r0-r12,lr}
000004  4683              MOV      r11,r0
000006  e9dd700f          LDRD     r7,r0,[sp,#0x3c]
;;;363      LCD_PIXELINDEX IndexMask, Index0, Index1, Pixel;
;;;364    
;;;365      Index0 = *(pTrans + 0);
00000a  9c0e              LDR      r4,[sp,#0x38]
;;;366      Index1 = *(pTrans + 1);
;;;367      x += Diff;
;;;368      switch (GUI_pContext->DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
00000c  e9d0a900          LDRD     r10,r9,[r0,#0]
000010  482d              LDR      r0,|L2.200|
000012  190d              ADDS     r5,r1,r4              ;367
000014  461e              MOV      r6,r3                 ;362
000016  6800              LDR      r0,[r0,#0]  ; GUI_pContext
;;;369      case 0:
;;;370        do {
;;;371          _SetPixelIndex(pDevice, x++, y, (*p & (0x80 >> Diff)) ? Index1 : Index0);
000018  f04f0880          MOV      r8,#0x80
00001c  7c00              LDRB     r0,[r0,#0x10]         ;368
00001e  f0100003          ANDS     r0,r0,#3              ;368
000022  d020              BEQ      |L2.102|
000024  2801              CMP      r0,#1                 ;368
000026  d003              BEQ      |L2.48|
000028  2802              CMP      r0,#2                 ;368
00002a  d033              BEQ      |L2.148|
00002c  2803              CMP      r0,#3                 ;368
00002e  d12f              BNE      |L2.144|
                  |L2.48|
;;;372          if (++Diff == 8) {
;;;373            Diff = 0;
;;;374            p++;
;;;375          }
;;;376        } while (--xsize);
;;;377        break;
;;;378      case LCD_DRAWMODE_TRANS:
;;;379        do {
;;;380          if (*p & (0x80 >> Diff))
;;;381            _SetPixelIndex(pDevice, x, y, Index1);
;;;382          x++;
;;;383          if (++Diff == 8) {
;;;384            Diff = 0;
;;;385            p++;
;;;386          }
;;;387        } while (--xsize);
;;;388        break;
;;;389      case LCD_DRAWMODE_XOR | LCD_DRAWMODE_TRANS:
;;;390      case LCD_DRAWMODE_XOR:
;;;391        IndexMask = pDevice->pColorConvAPI->pfGetIndexMask();
000030  f8db0010          LDR      r0,[r11,#0x10]
000034  6880              LDR      r0,[r0,#8]
000036  4780              BLX      r0
000038  4681              MOV      r9,r0
                  |L2.58|
;;;392        do {
;;;393          if (*p & (0x80 >> Diff)) {
00003a  7831              LDRB     r1,[r6,#0]
00003c  fa28f004          LSR      r0,r8,r4
000040  4201              TST      r1,r0
000042  d00b              BEQ      |L2.92|
;;;394            Pixel = _GetPixelIndex(pDevice, x, y);
000044  4629              MOV      r1,r5
000046  4658              MOV      r0,r11
000048  9a02              LDR      r2,[sp,#8]
00004a  f7fffffe          BL       _GetPixelIndex
;;;395            _SetPixelIndex(pDevice, x, y, Pixel ^ IndexMask);
00004e  ea800309          EOR      r3,r0,r9
000052  4629              MOV      r1,r5
000054  4658              MOV      r0,r11
000056  9a02              LDR      r2,[sp,#8]
000058  f7fffffe          BL       _SetPixelIndex
                  |L2.92|
00005c  1c64              ADDS     r4,r4,#1
00005e  1c6d              ADDS     r5,r5,#1
;;;396          }
;;;397          x++;
;;;398          if (++Diff == 8) {
000060  2c08              CMP      r4,#8
000062  d02b              BEQ      |L2.188|
000064  e02c              B        |L2.192|
                  |L2.102|
000066  7831              LDRB     r1,[r6,#0]            ;371
000068  fa28f004          LSR      r0,r8,r4              ;371
00006c  4201              TST      r1,r0                 ;371
00006e  d001              BEQ      |L2.116|
000070  464b              MOV      r3,r9                 ;371
000072  e000              B        |L2.118|
                  |L2.116|
000074  4653              MOV      r3,r10                ;371
                  |L2.118|
000076  4629              MOV      r1,r5                 ;371
000078  1c6d              ADDS     r5,r5,#1              ;371
00007a  4658              MOV      r0,r11                ;371
00007c  9a02              LDR      r2,[sp,#8]            ;371
00007e  f7fffffe          BL       _SetPixelIndex
000082  1c64              ADDS     r4,r4,#1              ;371
000084  2c08              CMP      r4,#8                 ;372
000086  d101              BNE      |L2.140|
000088  2400              MOVS     r4,#0                 ;373
00008a  1c76              ADDS     r6,r6,#1              ;373
                  |L2.140|
00008c  1e7f              SUBS     r7,r7,#1              ;373
00008e  d1ea              BNE      |L2.102|
                  |L2.144|
;;;399            Diff = 0;
;;;400            p++;
;;;401          }
;;;402        } while (--xsize);
;;;403        break;
;;;404      }
;;;405    }
000090  e8bd9fff          POP      {r0-r12,pc}
                  |L2.148|
000094  7831              LDRB     r1,[r6,#0]            ;380
000096  fa28f004          LSR      r0,r8,r4              ;380
00009a  4201              TST      r1,r0                 ;380
00009c  d005              BEQ      |L2.170|
00009e  464b              MOV      r3,r9                 ;381
0000a0  4629              MOV      r1,r5                 ;381
0000a2  4658              MOV      r0,r11                ;381
0000a4  9a02              LDR      r2,[sp,#8]            ;381
0000a6  f7fffffe          BL       _SetPixelIndex
                  |L2.170|
0000aa  1c64              ADDS     r4,r4,#1              ;381
0000ac  1c6d              ADDS     r5,r5,#1              ;381
0000ae  2c08              CMP      r4,#8                 ;383
0000b0  d101              BNE      |L2.182|
0000b2  2400              MOVS     r4,#0                 ;384
0000b4  1c76              ADDS     r6,r6,#1              ;384
                  |L2.182|
0000b6  1e7f              SUBS     r7,r7,#1              ;384
0000b8  d1ec              BNE      |L2.148|
0000ba  e7e9              B        |L2.144|
                  |L2.188|
0000bc  2400              MOVS     r4,#0                 ;399
0000be  1c76              ADDS     r6,r6,#1              ;399
                  |L2.192|
0000c0  1e7f              SUBS     r7,r7,#1              ;399
0000c2  d1ba              BNE      |L2.58|
0000c4  e7e4              B        |L2.144|
;;;406    
                          ENDP

0000c6  0000              DCW      0x0000
                  |L2.200|
                          DCD      GUI_pContext

                          AREA ||i._DrawBitLine2BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine2BPP PROC
;;;410    */
;;;411    static void  _DrawBitLine2BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;412      LCD_PIXELINDEX Pixels, PixelIndex;
;;;413      int CurrentPixel, Shift, Index;
;;;414    
;;;415      Pixels = *p;
;;;416      CurrentPixel = Diff;
;;;417      x += Diff;
;;;418      switch (GUI_pContext->DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000004  4842              LDR      r0,|L3.272|
000006  4693              MOV      r11,r2                ;411
000008  aa0e              ADD      r2,sp,#0x38           ;411
00000a  6800              LDR      r0,[r0,#0]  ; GUI_pContext
00000c  e8920290          LDM      r2,{r4,r7,r9}         ;411
000010  7c00              LDRB     r0,[r0,#0x10]
000012  190d              ADDS     r5,r1,r4              ;417
000014  781e              LDRB     r6,[r3,#0]            ;415
000016  f0100103          ANDS     r1,r0,#3
00001a  4698              MOV      r8,r3                 ;411
;;;419      case 0:
;;;420        if (pTrans) {
;;;421          do {
;;;422            Shift = (3 - CurrentPixel) << 1;
;;;423            Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
00001c  f04f00c0          MOV      r0,#0xc0
000020  d01c              BEQ      |L3.92|
000022  2902              CMP      r1,#2                 ;418
000024  d137              BNE      |L3.150|
;;;424            PixelIndex = *(pTrans + Index);
;;;425            _SetPixelIndex(pDevice, x++, y, PixelIndex);
;;;426            if (++CurrentPixel == 4) {
;;;427              CurrentPixel = 0;
;;;428              Pixels = *(++p);
;;;429            }
;;;430          } while (--xsize);
;;;431        } else {
;;;432          do {
;;;433            Shift = (3 - CurrentPixel) << 1;
;;;434            Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
;;;435            _SetPixelIndex(pDevice, x++, y, Index);
;;;436            if (++CurrentPixel == 4) {
;;;437              CurrentPixel = 0;
;;;438              Pixels = *(++p);
;;;439            }
;;;440          } while (--xsize);
;;;441        }
;;;442        break;
;;;443      case LCD_DRAWMODE_TRANS:
;;;444        if (pTrans) {
000026  ea5f0109          MOVS     r1,r9
00002a  d055              BEQ      |L3.216|
00002c  ea4f0a00          MOV.W    r10,r0                ;423
                  |L3.48|
;;;445          do {
;;;446            Shift = (3 - CurrentPixel) << 1;
000030  f1c40003          RSB      r0,r4,#3
000034  0041              LSLS     r1,r0,#1
;;;447            Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
000036  f1c10206          RSB      r2,r1,#6
00003a  fa2af002          LSR      r0,r10,r2
00003e  4030              ANDS     r0,r0,r6
000040  40c8              LSRS     r0,r0,r1
;;;448            if (Index) {
000042  d006              BEQ      |L3.82|
;;;449              PixelIndex = *(pTrans + Index);
000044  f8593020          LDR      r3,[r9,r0,LSL #2]
;;;450              _SetPixelIndex(pDevice, x, y, PixelIndex);
000048  465a              MOV      r2,r11
00004a  4629              MOV      r1,r5
00004c  9800              LDR      r0,[sp,#0]
00004e  f7fffffe          BL       _SetPixelIndex
                  |L3.82|
000052  1c64              ADDS     r4,r4,#1
000054  1c6d              ADDS     r5,r5,#1
;;;451            }
;;;452            x++;
;;;453            if (++CurrentPixel == 4) {
000056  2c04              CMP      r4,#4
000058  d038              BEQ      |L3.204|
00005a  e03a              B        |L3.210|
                  |L3.92|
00005c  ea5f0109          MOVS     r1,r9                 ;420
000060  d01b              BEQ      |L3.154|
000062  4682              MOV      r10,r0                ;423
                  |L3.100|
000064  f1c40003          RSB      r0,r4,#3              ;422
000068  0041              LSLS     r1,r0,#1              ;422
00006a  f1c10206          RSB      r2,r1,#6              ;423
00006e  fa2af002          LSR      r0,r10,r2             ;423
000072  4030              ANDS     r0,r0,r6              ;423
000074  40c8              LSRS     r0,r0,r1              ;423
000076  4629              MOV      r1,r5                 ;425
000078  f8593020          LDR      r3,[r9,r0,LSL #2]     ;424
00007c  1c6d              ADDS     r5,r5,#1              ;425
00007e  465a              MOV      r2,r11                ;425
000080  9800              LDR      r0,[sp,#0]            ;425
000082  f7fffffe          BL       _SetPixelIndex
000086  1c64              ADDS     r4,r4,#1              ;425
000088  2c04              CMP      r4,#4                 ;426
00008a  d102              BNE      |L3.146|
00008c  f8186f01          LDRB     r6,[r8,#1]!           ;428
000090  2400              MOVS     r4,#0                 ;427
                  |L3.146|
000092  1e7f              SUBS     r7,r7,#1              ;428
000094  d1e6              BNE      |L3.100|
                  |L3.150|
;;;454              CurrentPixel = 0;
;;;455              Pixels = *(++p);
;;;456            }
;;;457          } while (--xsize);
;;;458        } else {
;;;459          do {
;;;460            Shift = (3 - CurrentPixel) << 1;
;;;461            Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
;;;462            if (Index) {
;;;463              _SetPixelIndex(pDevice, x, y, Index);
;;;464            }
;;;465            x++;
;;;466            if (++CurrentPixel == 4) {
;;;467              CurrentPixel = 0;
;;;468              Pixels = *(++p);
;;;469            }
;;;470          } while (--xsize);
;;;471        }
;;;472        break;
;;;473      }
;;;474    }
000096  e8bd9fff          POP      {r0-r12,pc}
                  |L3.154|
00009a  4681              MOV      r9,r0                 ;423
                  |L3.156|
00009c  f1c40003          RSB      r0,r4,#3              ;433
0000a0  0040              LSLS     r0,r0,#1              ;433
0000a2  f1c00106          RSB      r1,r0,#6              ;434
0000a6  fa29f301          LSR      r3,r9,r1              ;434
0000aa  4033              ANDS     r3,r3,r6              ;434
0000ac  40c3              LSRS     r3,r3,r0              ;434
0000ae  4629              MOV      r1,r5                 ;435
0000b0  1c6d              ADDS     r5,r5,#1              ;435
0000b2  465a              MOV      r2,r11                ;435
0000b4  9800              LDR      r0,[sp,#0]            ;435
0000b6  f7fffffe          BL       _SetPixelIndex
0000ba  1c64              ADDS     r4,r4,#1              ;435
0000bc  2c04              CMP      r4,#4                 ;436
0000be  d102              BNE      |L3.198|
0000c0  f8186f01          LDRB     r6,[r8,#1]!           ;438
0000c4  2400              MOVS     r4,#0                 ;437
                  |L3.198|
0000c6  1e7f              SUBS     r7,r7,#1              ;438
0000c8  d1e8              BNE      |L3.156|
0000ca  e7e4              B        |L3.150|
                  |L3.204|
0000cc  f8186f01          LDRB     r6,[r8,#1]!           ;455
0000d0  2400              MOVS     r4,#0                 ;454
                  |L3.210|
0000d2  1e7f              SUBS     r7,r7,#1              ;455
0000d4  d1ac              BNE      |L3.48|
0000d6  e7de              B        |L3.150|
                  |L3.216|
0000d8  ea4f0900          MOV.W    r9,r0                 ;423
                  |L3.220|
0000dc  f1c40003          RSB      r0,r4,#3              ;460
0000e0  0040              LSLS     r0,r0,#1              ;460
0000e2  f1c00106          RSB      r1,r0,#6              ;461
0000e6  fa29f301          LSR      r3,r9,r1              ;461
0000ea  4033              ANDS     r3,r3,r6              ;461
0000ec  40c3              LSRS     r3,r3,r0              ;461
0000ee  d004              BEQ      |L3.250|
0000f0  465a              MOV      r2,r11                ;463
0000f2  4629              MOV      r1,r5                 ;463
0000f4  9800              LDR      r0,[sp,#0]            ;463
0000f6  f7fffffe          BL       _SetPixelIndex
                  |L3.250|
0000fa  1c64              ADDS     r4,r4,#1              ;463
0000fc  1c6d              ADDS     r5,r5,#1              ;463
0000fe  2c04              CMP      r4,#4                 ;466
000100  d102              BNE      |L3.264|
000102  f8186f01          LDRB     r6,[r8,#1]!           ;468
000106  2400              MOVS     r4,#0                 ;467
                  |L3.264|
000108  1e7f              SUBS     r7,r7,#1              ;468
00010a  d1e7              BNE      |L3.220|
00010c  e7c3              B        |L3.150|
;;;475    
                          ENDP

00010e  0000              DCW      0x0000
                  |L3.272|
                          DCD      GUI_pContext

                          AREA ||i._DrawBitLine4BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine4BPP PROC
;;;479    */
;;;480    static void  _DrawBitLine4BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;481      LCD_PIXELINDEX Pixels, PixelIndex;
;;;482      int CurrentPixel, Shift, Index;
;;;483    
;;;484      Pixels = *p;
;;;485      CurrentPixel = Diff;
;;;486      x += Diff;
;;;487      switch (GUI_pContext->DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000004  4842              LDR      r0,|L4.272|
000006  4693              MOV      r11,r2                ;480
000008  aa0e              ADD      r2,sp,#0x38           ;480
00000a  6800              LDR      r0,[r0,#0]  ; GUI_pContext
00000c  e8920290          LDM      r2,{r4,r7,r9}         ;480
000010  7c00              LDRB     r0,[r0,#0x10]
000012  190d              ADDS     r5,r1,r4              ;486
000014  781e              LDRB     r6,[r3,#0]            ;484
000016  f0100103          ANDS     r1,r0,#3
00001a  4698              MOV      r8,r3                 ;480
;;;488      case 0:
;;;489        if (pTrans) {
;;;490          do {
;;;491            Shift = (1 - CurrentPixel) << 2;
;;;492            Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
00001c  f04f00f0          MOV      r0,#0xf0
000020  d01c              BEQ      |L4.92|
000022  2902              CMP      r1,#2                 ;487
000024  d137              BNE      |L4.150|
;;;493            PixelIndex = *(pTrans + Index);
;;;494            _SetPixelIndex(pDevice, x++, y, PixelIndex);
;;;495            if (++CurrentPixel == 2) {
;;;496              CurrentPixel = 0;
;;;497              Pixels = *(++p);
;;;498            }
;;;499          } while (--xsize);
;;;500        } else {
;;;501          do {
;;;502            Shift = (1 - CurrentPixel) << 2;
;;;503            Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
;;;504            _SetPixelIndex(pDevice, x++, y, Index);
;;;505            if (++CurrentPixel == 2) {
;;;506              CurrentPixel = 0;
;;;507              Pixels = *(++p);
;;;508            }
;;;509          } while (--xsize);
;;;510        }
;;;511        break;
;;;512      case LCD_DRAWMODE_TRANS:
;;;513        if (pTrans) {
000026  ea5f0109          MOVS     r1,r9
00002a  d055              BEQ      |L4.216|
00002c  ea4f0a00          MOV.W    r10,r0                ;492
                  |L4.48|
;;;514          do {
;;;515            Shift = (1 - CurrentPixel) << 2;
000030  f1c40001          RSB      r0,r4,#1
000034  0081              LSLS     r1,r0,#2
;;;516            Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
000036  f1c10204          RSB      r2,r1,#4
00003a  fa2af002          LSR      r0,r10,r2
00003e  4030              ANDS     r0,r0,r6
000040  40c8              LSRS     r0,r0,r1
;;;517            if (Index) {
000042  d006              BEQ      |L4.82|
;;;518              PixelIndex = *(pTrans + Index);
000044  f8593020          LDR      r3,[r9,r0,LSL #2]
;;;519              _SetPixelIndex(pDevice, x, y, PixelIndex);
000048  465a              MOV      r2,r11
00004a  4629              MOV      r1,r5
00004c  9800              LDR      r0,[sp,#0]
00004e  f7fffffe          BL       _SetPixelIndex
                  |L4.82|
000052  1c64              ADDS     r4,r4,#1
000054  1c6d              ADDS     r5,r5,#1
;;;520            }
;;;521            x++;
;;;522            if (++CurrentPixel == 2) {
000056  2c02              CMP      r4,#2
000058  d038              BEQ      |L4.204|
00005a  e03a              B        |L4.210|
                  |L4.92|
00005c  ea5f0109          MOVS     r1,r9                 ;489
000060  d01b              BEQ      |L4.154|
000062  4682              MOV      r10,r0                ;492
                  |L4.100|
000064  f1c40001          RSB      r0,r4,#1              ;491
000068  0081              LSLS     r1,r0,#2              ;491
00006a  f1c10204          RSB      r2,r1,#4              ;492
00006e  fa2af002          LSR      r0,r10,r2             ;492
000072  4030              ANDS     r0,r0,r6              ;492
000074  40c8              LSRS     r0,r0,r1              ;492
000076  4629              MOV      r1,r5                 ;494
000078  f8593020          LDR      r3,[r9,r0,LSL #2]     ;493
00007c  1c6d              ADDS     r5,r5,#1              ;494
00007e  465a              MOV      r2,r11                ;494
000080  9800              LDR      r0,[sp,#0]            ;494
000082  f7fffffe          BL       _SetPixelIndex
000086  1c64              ADDS     r4,r4,#1              ;494
000088  2c02              CMP      r4,#2                 ;495
00008a  d102              BNE      |L4.146|
00008c  f8186f01          LDRB     r6,[r8,#1]!           ;497
000090  2400              MOVS     r4,#0                 ;496
                  |L4.146|
000092  1e7f              SUBS     r7,r7,#1              ;497
000094  d1e6              BNE      |L4.100|
                  |L4.150|
;;;523              CurrentPixel = 0;
;;;524              Pixels = *(++p);
;;;525            }
;;;526          } while (--xsize);
;;;527        } else {
;;;528          do {
;;;529            Shift = (1 - CurrentPixel) << 2;
;;;530            Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
;;;531            if (Index) {
;;;532              _SetPixelIndex(pDevice, x, y, Index);
;;;533            }
;;;534            x++;
;;;535            if (++CurrentPixel == 2) {
;;;536              CurrentPixel = 0;
;;;537              Pixels = *(++p);
;;;538            }
;;;539          } while (--xsize);
;;;540        }
;;;541        break;
;;;542      }
;;;543    }
000096  e8bd9fff          POP      {r0-r12,pc}
                  |L4.154|
00009a  4681              MOV      r9,r0                 ;492
                  |L4.156|
00009c  f1c40001          RSB      r0,r4,#1              ;502
0000a0  0080              LSLS     r0,r0,#2              ;502
0000a2  f1c00104          RSB      r1,r0,#4              ;503
0000a6  fa29f301          LSR      r3,r9,r1              ;503
0000aa  4033              ANDS     r3,r3,r6              ;503
0000ac  40c3              LSRS     r3,r3,r0              ;503
0000ae  4629              MOV      r1,r5                 ;504
0000b0  1c6d              ADDS     r5,r5,#1              ;504
0000b2  465a              MOV      r2,r11                ;504
0000b4  9800              LDR      r0,[sp,#0]            ;504
0000b6  f7fffffe          BL       _SetPixelIndex
0000ba  1c64              ADDS     r4,r4,#1              ;504
0000bc  2c02              CMP      r4,#2                 ;505
0000be  d102              BNE      |L4.198|
0000c0  f8186f01          LDRB     r6,[r8,#1]!           ;507
0000c4  2400              MOVS     r4,#0                 ;506
                  |L4.198|
0000c6  1e7f              SUBS     r7,r7,#1              ;507
0000c8  d1e8              BNE      |L4.156|
0000ca  e7e4              B        |L4.150|
                  |L4.204|
0000cc  f8186f01          LDRB     r6,[r8,#1]!           ;524
0000d0  2400              MOVS     r4,#0                 ;523
                  |L4.210|
0000d2  1e7f              SUBS     r7,r7,#1              ;524
0000d4  d1ac              BNE      |L4.48|
0000d6  e7de              B        |L4.150|
                  |L4.216|
0000d8  ea4f0900          MOV.W    r9,r0                 ;492
                  |L4.220|
0000dc  f1c40001          RSB      r0,r4,#1              ;529
0000e0  0080              LSLS     r0,r0,#2              ;529
0000e2  f1c00104          RSB      r1,r0,#4              ;530
0000e6  fa29f301          LSR      r3,r9,r1              ;530
0000ea  4033              ANDS     r3,r3,r6              ;530
0000ec  40c3              LSRS     r3,r3,r0              ;530
0000ee  d004              BEQ      |L4.250|
0000f0  465a              MOV      r2,r11                ;532
0000f2  4629              MOV      r1,r5                 ;532
0000f4  9800              LDR      r0,[sp,#0]            ;532
0000f6  f7fffffe          BL       _SetPixelIndex
                  |L4.250|
0000fa  1c64              ADDS     r4,r4,#1              ;532
0000fc  1c6d              ADDS     r5,r5,#1              ;532
0000fe  2c02              CMP      r4,#2                 ;535
000100  d102              BNE      |L4.264|
000102  f8186f01          LDRB     r6,[r8,#1]!           ;537
000106  2400              MOVS     r4,#0                 ;536
                  |L4.264|
000108  1e7f              SUBS     r7,r7,#1              ;537
00010a  d1e7              BNE      |L4.220|
00010c  e7c3              B        |L4.150|
;;;544    
                          ENDP

00010e  0000              DCW      0x0000
                  |L4.272|
                          DCD      GUI_pContext

                          AREA ||i._DrawBitLine8BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine8BPP PROC
;;;548    */
;;;549    static void  _DrawBitLine8BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int xsize, const LCD_PIXELINDEX * pTrans) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4681              MOV      r9,r0
;;;550      LCD_PIXELINDEX Pixel;
;;;551    
;;;552      switch (GUI_pContext->DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000006  4824              LDR      r0,|L5.152|
000008  e9dd5708          LDRD     r5,r7,[sp,#0x20]      ;549
00000c  6800              LDR      r0,[r0,#0]  ; GUI_pContext
00000e  461c              MOV      r4,r3                 ;549
000010  4690              MOV      r8,r2                 ;549
000012  7c00              LDRB     r0,[r0,#0x10]
000014  460e              MOV      r6,r1                 ;549
000016  f0100003          ANDS     r0,r0,#3
00001a  d003              BEQ      |L5.36|
00001c  2802              CMP      r0,#2
00001e  d110              BNE      |L5.66|
;;;553      case 0:
;;;554        if (pTrans) {
;;;555          for (; xsize > 0; xsize--, x++, p++) {
;;;556            Pixel = *p;
;;;557            _SetPixelIndex(pDevice, x, y, *(pTrans + Pixel));
;;;558          }
;;;559        } else {
;;;560          for (; xsize > 0; xsize--, x++, p++) {
;;;561            _SetPixelIndex(pDevice, x, y, *p);
;;;562          }
;;;563        }
;;;564        break;
;;;565      case LCD_DRAWMODE_TRANS:
;;;566        if (pTrans) {
000020  bb4f              CBNZ     r7,|L5.118|
000022  e035              B        |L5.144|
                  |L5.36|
000024  b95f              CBNZ     r7,|L5.62|
000026  e017              B        |L5.88|
                  |L5.40|
000028  7820              LDRB     r0,[r4,#0]            ;556
00002a  4642              MOV      r2,r8                 ;557
00002c  4631              MOV      r1,r6                 ;557
00002e  f8573020          LDR      r3,[r7,r0,LSL #2]     ;557
000032  4648              MOV      r0,r9                 ;557
000034  f7fffffe          BL       _SetPixelIndex
000038  1c64              ADDS     r4,r4,#1              ;557
00003a  1e6d              SUBS     r5,r5,#1              ;557
00003c  1c76              ADDS     r6,r6,#1              ;557
                  |L5.62|
00003e  2d00              CMP      r5,#0                 ;555
000040  dcf2              BGT      |L5.40|
                  |L5.66|
;;;567          for (; xsize > 0; xsize--, x++, p++) {
;;;568            Pixel = *p;
;;;569            if (Pixel) {
;;;570              _SetPixelIndex(pDevice, x, y, *(pTrans + Pixel));
;;;571            }
;;;572          }
;;;573        } else {
;;;574          for (; xsize > 0; xsize--, x++, p++) {
;;;575            Pixel = *p;
;;;576            if (Pixel) {
;;;577              _SetPixelIndex(pDevice, x, y, Pixel);
;;;578            }
;;;579          }
;;;580        }
;;;581        break;
;;;582      }
;;;583    }
000042  e8bd87f0          POP      {r4-r10,pc}
                  |L5.70|
000046  7823              LDRB     r3,[r4,#0]            ;561
000048  4642              MOV      r2,r8                 ;561
00004a  4631              MOV      r1,r6                 ;561
00004c  4648              MOV      r0,r9                 ;561
00004e  f7fffffe          BL       _SetPixelIndex
000052  1c64              ADDS     r4,r4,#1              ;561
000054  1e6d              SUBS     r5,r5,#1              ;561
000056  1c76              ADDS     r6,r6,#1              ;561
                  |L5.88|
000058  2d00              CMP      r5,#0                 ;560
00005a  dcf4              BGT      |L5.70|
00005c  e7f1              B        |L5.66|
                  |L5.94|
00005e  7820              LDRB     r0,[r4,#0]            ;568
000060  b130              CBZ      r0,|L5.112|
000062  f8573020          LDR      r3,[r7,r0,LSL #2]     ;570
000066  4642              MOV      r2,r8                 ;570
000068  4631              MOV      r1,r6                 ;570
00006a  4648              MOV      r0,r9                 ;570
00006c  f7fffffe          BL       _SetPixelIndex
                  |L5.112|
000070  1c64              ADDS     r4,r4,#1              ;570
000072  1e6d              SUBS     r5,r5,#1              ;570
000074  1c76              ADDS     r6,r6,#1              ;570
                  |L5.118|
000076  2d00              CMP      r5,#0                 ;567
000078  dcf1              BGT      |L5.94|
00007a  e7e2              B        |L5.66|
                  |L5.124|
00007c  7823              LDRB     r3,[r4,#0]            ;575
00007e  b123              CBZ      r3,|L5.138|
000080  4642              MOV      r2,r8                 ;577
000082  4631              MOV      r1,r6                 ;577
000084  4648              MOV      r0,r9                 ;577
000086  f7fffffe          BL       _SetPixelIndex
                  |L5.138|
00008a  1c64              ADDS     r4,r4,#1              ;577
00008c  1e6d              SUBS     r5,r5,#1              ;577
00008e  1c76              ADDS     r6,r6,#1              ;577
                  |L5.144|
000090  2d00              CMP      r5,#0                 ;574
000092  dcf3              BGT      |L5.124|
000094  e7d5              B        |L5.66|
;;;584    /*********************************************************************
                          ENDP

000096  0000              DCW      0x0000
                  |L5.152|
                          DCD      GUI_pContext

                          AREA ||i._DrawBitmap||, CODE, READONLY, ALIGN=2

                  _DrawBitmap PROC
;;;650    */
;;;651    static void _DrawBitmap(GUI_DEVICE * pDevice, int x0, int y0,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;652                           int xSize, int ySize,
;;;653                           int BitsPerPixel, 
;;;654                           int BytesPerLine,
;;;655                           const U8 GUI_UNI_PTR * pData, int Diff,
;;;656                           const LCD_PIXELINDEX * pTrans) {
000004  b083              SUB      sp,sp,#0xc
000006  461d              MOV      r5,r3
000008  e9dd6010          LDRD     r6,r0,[sp,#0x40]
00000c  e9dd9412          LDRD     r9,r4,[sp,#0x48]
000010  e9ddba14          LDRD     r11,r10,[sp,#0x50]
000014  4690              MOV      r8,r2
;;;657      int i;
;;;658    
;;;659      switch (BitsPerPixel) {
000016  2808              CMP      r0,#8
000018  d044              BEQ      |L6.164|
00001a  dc07              BGT      |L6.44|
00001c  2801              CMP      r0,#1
00001e  d00b              BEQ      |L6.56|
000020  2802              CMP      r0,#2
000022  d01d              BEQ      |L6.96|
000024  2804              CMP      r0,#4
000026  d118              BNE      |L6.90|
;;;660      case 1:
;;;661        for (i = 0; i < ySize; i++) {
;;;662          _DrawBitLine1BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
;;;663          pData += BytesPerLine;
;;;664        }
;;;665        break;
;;;666      case 2:
;;;667        for (i = 0; i < ySize; i++) {
;;;668          _DrawBitLine2BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
;;;669          pData += BytesPerLine;
;;;670        }
;;;671        break;
;;;672      case 4:
;;;673        for (i = 0; i < ySize; i++) {
000028  2700              MOVS     r7,#0
00002a  e038              B        |L6.158|
                  |L6.44|
00002c  2810              CMP      r0,#0x10              ;659
00002e  d049              BEQ      |L6.196|
000030  2820              CMP      r0,#0x20              ;659
000032  d112              BNE      |L6.90|
;;;674          _DrawBitLine4BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
;;;675          pData += BytesPerLine;
;;;676        }
;;;677        break;
;;;678      case 8:
;;;679        for (i = 0; i < ySize; i++) {
;;;680          _DrawBitLine8BPP(pDevice, x0, i + y0, pData, xSize, pTrans);
;;;681          pData += BytesPerLine;
;;;682        }
;;;683        break;
;;;684      //
;;;685      // Only required for 16bpp color depth of target. Should be removed otherwise.
;;;686      //
;;;687      case 16:
;;;688        for (i = 0; i < ySize; i++) {
;;;689          _DrawBitLine16BPP(pDevice, x0, i + y0, (const U16 *)pData, xSize);
;;;690          pData += BytesPerLine;
;;;691        }
;;;692        break;
;;;693      //
;;;694      // Only required for 32bpp color depth of target. Should be removed otherwise.
;;;695      //
;;;696      case 32:
;;;697        for (i = 0; i < ySize; i++) {
000034  2000              MOVS     r0,#0
000036  e071              B        |L6.284|
                  |L6.56|
000038  2700              MOVS     r7,#0                 ;661
00003a  e00c              B        |L6.86|
                  |L6.60|
00003c  f8cdb000          STR      r11,[sp,#0]           ;662
000040  e9cd5a01          STRD     r5,r10,[sp,#4]        ;662
000044  e9dd0103          LDRD     r0,r1,[sp,#0xc]       ;662
000048  eb070208          ADD      r2,r7,r8              ;662
00004c  4623              MOV      r3,r4                 ;662
00004e  f7fffffe          BL       _DrawBitLine1BPP
000052  444c              ADD      r4,r4,r9              ;663
000054  1c7f              ADDS     r7,r7,#1              ;663
                  |L6.86|
000056  42b7              CMP      r7,r6                 ;661
000058  dbf0              BLT      |L6.60|
                  |L6.90|
;;;698          _DrawBitLine32BPP(pDevice, x0, i + y0, (const U32 *)pData, xSize);
;;;699          pData += BytesPerLine;
;;;700        }
;;;701        break;
;;;702      }
;;;703    }
00005a  b007              ADD      sp,sp,#0x1c
00005c  e8bd8ff0          POP      {r4-r11,pc}
                  |L6.96|
000060  2700              MOVS     r7,#0                 ;667
000062  e00c              B        |L6.126|
                  |L6.100|
000064  f8cdb000          STR      r11,[sp,#0]           ;668
000068  e9cd5a01          STRD     r5,r10,[sp,#4]        ;668
00006c  e9dd0103          LDRD     r0,r1,[sp,#0xc]       ;668
000070  eb070208          ADD      r2,r7,r8              ;668
000074  4623              MOV      r3,r4                 ;668
000076  f7fffffe          BL       _DrawBitLine2BPP
00007a  444c              ADD      r4,r4,r9              ;669
00007c  1c7f              ADDS     r7,r7,#1              ;669
                  |L6.126|
00007e  42b7              CMP      r7,r6                 ;667
000080  dbf0              BLT      |L6.100|
000082  e7ea              B        |L6.90|
                  |L6.132|
000084  f8cdb000          STR      r11,[sp,#0]           ;674
000088  e9cd5a01          STRD     r5,r10,[sp,#4]        ;674
00008c  e9dd0103          LDRD     r0,r1,[sp,#0xc]       ;674
000090  eb070208          ADD      r2,r7,r8              ;674
000094  4623              MOV      r3,r4                 ;674
000096  f7fffffe          BL       _DrawBitLine4BPP
00009a  444c              ADD      r4,r4,r9              ;675
00009c  1c7f              ADDS     r7,r7,#1              ;675
                  |L6.158|
00009e  42b7              CMP      r7,r6                 ;673
0000a0  dbf0              BLT      |L6.132|
0000a2  e7da              B        |L6.90|
                  |L6.164|
0000a4  2700              MOVS     r7,#0                 ;679
0000a6  e00a              B        |L6.190|
                  |L6.168|
0000a8  e9cd5a00          STRD     r5,r10,[sp,#0]        ;680
0000ac  e9dd0103          LDRD     r0,r1,[sp,#0xc]       ;680
0000b0  eb070208          ADD      r2,r7,r8              ;680
0000b4  4623              MOV      r3,r4                 ;680
0000b6  f7fffffe          BL       _DrawBitLine8BPP
0000ba  444c              ADD      r4,r4,r9              ;681
0000bc  1c7f              ADDS     r7,r7,#1              ;681
                  |L6.190|
0000be  42b7              CMP      r7,r6                 ;679
0000c0  dbf2              BLT      |L6.168|
0000c2  e7ca              B        |L6.90|
                  |L6.196|
0000c4  2700              MOVS     r7,#0                 ;688
0000c6  e009              B        |L6.220|
                  |L6.200|
0000c8  9500              STR      r5,[sp,#0]            ;689
0000ca  e9dd0103          LDRD     r0,r1,[sp,#0xc]       ;689
0000ce  eb070208          ADD      r2,r7,r8              ;689
0000d2  4623              MOV      r3,r4                 ;689
0000d4  f7fffffe          BL       _DrawBitLine16BPP
0000d8  444c              ADD      r4,r4,r9              ;690
0000da  1c7f              ADDS     r7,r7,#1              ;690
                  |L6.220|
0000dc  42b7              CMP      r7,r6                 ;688
0000de  dbf3              BLT      |L6.200|
0000e0  e7bb              B        |L6.90|
                  |L6.226|
0000e2  9803              LDR      r0,[sp,#0xc]          ;698
0000e4  9002              STR      r0,[sp,#8]            ;698
0000e6  9804              LDR      r0,[sp,#0x10]         ;698
0000e8  9000              STR      r0,[sp,#0]            ;698
0000ea  eb0b0008          ADD      r0,r11,r8             ;698
0000ee  46a2              MOV      r10,r4                ;698
0000f0  462f              MOV      r7,r5                 ;698
0000f2  9001              STR      r0,[sp,#4]            ;698
0000f4  e00d              B        |L6.274|
0000f6  bf00              NOP                            ;698
                  |L6.248|
0000f8  e9dd2001          LDRD     r2,r0,[sp,#4]         ;698
0000fc  f8da3000          LDR      r3,[r10,#0]           ;698
000100  9900              LDR      r1,[sp,#0]            ;698
000102  f7fffffe          BL       _SetPixelIndex
000106  9800              LDR      r0,[sp,#0]            ;698
000108  f10a0a04          ADD      r10,r10,#4            ;698
00010c  1c40              ADDS     r0,r0,#1              ;698
00010e  1e7f              SUBS     r7,r7,#1              ;698
000110  9000              STR      r0,[sp,#0]            ;698
                  |L6.274|
000112  2f00              CMP      r7,#0                 ;698
000114  dcf0              BGT      |L6.248|
000116  444c              ADD      r4,r4,r9              ;699
000118  f10b0001          ADD      r0,r11,#1             ;697
                  |L6.284|
00011c  4683              MOV      r11,r0                ;697
00011e  42b0              CMP      r0,r6                 ;697
000120  dbdf              BLT      |L6.226|
000122  e79a              B        |L6.90|
;;;704    
                          ENDP


                          AREA ||i._DrawHLine||, CODE, READONLY, ALIGN=2

                  _DrawHLine PROC
;;;262    */
;;;263    static void _DrawHLine  (GUI_DEVICE * pDevice, int x0, int y,  int x1) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4680              MOV      r8,r0
;;;264      int xPhys, yPhys, lphys; //idx;
;;;265      LCD_PIXELINDEX ColorIndex;
;;;266      if (GUI_pContext->DrawMode & LCD_DRAWMODE_XOR) {
000006  4810              LDR      r0,|L7.72|
000008  460c              MOV      r4,r1                 ;263
00000a  461d              MOV      r5,r3                 ;263
00000c  6800              LDR      r0,[r0,#0]  ; GUI_pContext
00000e  4617              MOV      r7,r2                 ;263
000010  7c01              LDRB     r1,[r0,#0x10]
000012  07c9              LSLS     r1,r1,#31
000014  d106              BNE      |L7.36|
000016  e009              B        |L7.44|
                  |L7.24|
;;;267        for (; x0 <= x1; x0++) {
;;;268          _XorPixel(pDevice, x0, y);
000018  463a              MOV      r2,r7
00001a  4621              MOV      r1,r4
00001c  4640              MOV      r0,r8
00001e  f7fffffe          BL       _XorPixel
000022  1c64              ADDS     r4,r4,#1
                  |L7.36|
000024  42ac              CMP      r4,r5                 ;267
000026  ddf7              BLE      |L7.24|
                  |L7.40|
;;;269        }
;;;270      } else {
;;;271       
;;;272        ColorIndex = LCD__GetColorIndex();
;;;273    #ifdef USE_OPTIMIZED_DRAW   
;;;274    // #if LCD_SWAP_XY | LCD_MIRROR_X| LCD_MIRROR_Y
;;;275    #if 1
;;;276       xPhys = LOG2PHYS_X(x0, y);
;;;277       yPhys = LOG2PHYS_Y(x0, y); 
;;;278       lphys = (x1 - x0);
;;;279      #else
;;;280        #define xPhys x0
;;;281        #define yPhys y
;;;282        #define lphys x1
;;;283      #endif
;;;284        {
;;;285            *(__IO u16 *) (Bank1_LCD_C) = 0x2a;
;;;286            *(__IO u16 *) (Bank1_LCD_D) = (xPhys>>8)&0xff;
;;;287            *(__IO u16 *) (Bank1_LCD_D) = xPhys & 0xff;
;;;288            *(__IO u16 *) (Bank1_LCD_D) = (480>>8)&0xff;
;;;289            *(__IO u16 *) (Bank1_LCD_D) = 480 & 0xff;
;;;290        
;;;291            *(__IO u16 *) (Bank1_LCD_C) = 0x2b;
;;;292            *(__IO u16 *) (Bank1_LCD_D) = (yPhys>>8)&0xff;
;;;293            *(__IO u16 *) (Bank1_LCD_D) = yPhys & 0xff;
;;;294            *(__IO u16 *) (Bank1_LCD_D) = (yPhys>>8)&0xff;
;;;295            *(__IO u16 *) (Bank1_LCD_D) = yPhys & 0xff;
;;;296    
;;;297            *(__IO u16 *) (Bank1_LCD_C) = 0x2c;
;;;298            for (; xPhys <= lphys; xPhys++)
;;;299            {
;;;300                *(__IO u16 *) (Bank1_LCD_D) = ColorIndex ;
;;;301            }  
;;;302        }
;;;303    //     for (idx =0 ; idx <= lphys ; idx++) 
;;;304    //     {
;;;305    // 	  //
;;;306    //       // Write into hardware ... Adapt to your system
;;;307    // 	  //
;;;308    // 	  
;;;309    // 	  //Example : _SetPixel(ColorIndex)
;;;310    //     }
;;;311    #else
;;;312        for (; x0 <= x1; x0++) {
;;;313          _SetPixelIndex(pDevice, x0, y, ColorIndex);
;;;314        } 
;;;315    #endif
;;;316      }
;;;317    }
000028  e8bd81f0          POP      {r4-r8,pc}
                  |L7.44|
00002c  6bc0              LDR      r0,[r0,#0x3c]         ;272
00002e  6806              LDR      r6,[r0,#0]            ;312
000030  e006              B        |L7.64|
                  |L7.50|
000032  4633              MOV      r3,r6                 ;313
000034  463a              MOV      r2,r7                 ;313
000036  4621              MOV      r1,r4                 ;313
000038  4640              MOV      r0,r8                 ;313
00003a  f7fffffe          BL       _SetPixelIndex
00003e  1c64              ADDS     r4,r4,#1              ;313
                  |L7.64|
000040  42ac              CMP      r4,r5                 ;312
000042  ddf6              BLE      |L7.50|
000044  e7f0              B        |L7.40|
;;;318    
                          ENDP

000046  0000              DCW      0x0000
                  |L7.72|
                          DCD      GUI_pContext

                          AREA ||i._DrawVLine||, CODE, READONLY, ALIGN=2

                  _DrawVLine PROC
;;;322    */
;;;323    static void _DrawVLine  (GUI_DEVICE * pDevice, int x, int y0,  int y1) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
;;;324      LCD_PIXELINDEX ColorIndex;
;;;325    
;;;326      if (GUI_pContext->DrawMode & LCD_DRAWMODE_XOR) {
000006  481b              LDR      r0,|L8.116|
000008  460e              MOV      r6,r1                 ;323
00000a  461d              MOV      r5,r3                 ;323
00000c  6800              LDR      r0,[r0,#0]  ; GUI_pContext
00000e  4614              MOV      r4,r2                 ;323
000010  7c01              LDRB     r1,[r0,#0x10]
000012  07c9              LSLS     r1,r1,#31
000014  d106              BNE      |L8.36|
000016  e009              B        |L8.44|
                  |L8.24|
;;;327        for (; y0 <= y1; y0++) {
;;;328          _XorPixel(pDevice, x, y0);
000018  4622              MOV      r2,r4
00001a  4631              MOV      r1,r6
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       _XorPixel
000022  1c64              ADDS     r4,r4,#1
                  |L8.36|
000024  42ac              CMP      r4,r5                 ;327
000026  ddf7              BLE      |L8.24|
                  |L8.40|
;;;329        }
;;;330      } else {
;;;331         ColorIndex = LCD__GetColorIndex();
;;;332    //     for (; y0 <= y1; y0++) {
;;;333    //       _SetPixelIndex(pDevice, x, y0, ColorIndex);
;;;334    //     }
;;;335          {
;;;336            *(__IO u16 *) (Bank1_LCD_C) = 0x2a;
;;;337            *(__IO u16 *) (Bank1_LCD_D) = (x>>8)&0xff;
;;;338            *(__IO u16 *) (Bank1_LCD_D) = x & 0xff;
;;;339            *(__IO u16 *) (Bank1_LCD_D) = (x>>8)&0xff;
;;;340            *(__IO u16 *) (Bank1_LCD_D) = x & 0xff;
;;;341        
;;;342            *(__IO u16 *) (Bank1_LCD_C) = 0x2b;
;;;343            *(__IO u16 *) (Bank1_LCD_D) = (y0>>8)&0xff;
;;;344            *(__IO u16 *) (Bank1_LCD_D) = y0 & 0xff;
;;;345            *(__IO u16 *) (Bank1_LCD_D) = (y1>>8)&0xff;
;;;346            *(__IO u16 *) (Bank1_LCD_D) = y1 & 0xff;
;;;347    
;;;348            *(__IO u16 *) (Bank1_LCD_C) = 0x2c;
;;;349            for (; y0 <= y1; y0++)
;;;350            {
;;;351                *(__IO u16 *) (Bank1_LCD_D) = ColorIndex ;
;;;352            }
;;;353        }
;;;354      }
;;;355    }
000028  e8bd81f0          POP      {r4-r8,pc}
                  |L8.44|
00002c  6bc0              LDR      r0,[r0,#0x3c]         ;331
00002e  f04f41c0          MOV      r1,#0x60000000        ;336
000032  8802              LDRH     r2,[r0,#0]            ;331
000034  202a              MOVS     r0,#0x2a              ;336
000036  8008              STRH     r0,[r1,#0]            ;336
000038  480f              LDR      r0,|L8.120|
00003a  f3c62307          UBFX     r3,r6,#8,#8           ;337
00003e  8003              STRH     r3,[r0,#0]            ;337
000040  b2f6              UXTB     r6,r6                 ;338
000042  8006              STRH     r6,[r0,#0]            ;338
000044  8003              STRH     r3,[r0,#0]            ;339
000046  8006              STRH     r6,[r0,#0]            ;340
000048  232b              MOVS     r3,#0x2b              ;342
00004a  800b              STRH     r3,[r1,#0]            ;342
00004c  f3c42307          UBFX     r3,r4,#8,#8           ;343
000050  8003              STRH     r3,[r0,#0]            ;343
000052  b2e3              UXTB     r3,r4                 ;344
000054  8003              STRH     r3,[r0,#0]            ;344
000056  f3c52307          UBFX     r3,r5,#8,#8           ;345
00005a  8003              STRH     r3,[r0,#0]            ;345
00005c  b2eb              UXTB     r3,r5                 ;346
00005e  8003              STRH     r3,[r0,#0]            ;346
000060  232c              MOVS     r3,#0x2c              ;348
000062  800b              STRH     r3,[r1,#0]            ;348
000064  b291              UXTH     r1,r2                 ;351
000066  e001              B        |L8.108|
                  |L8.104|
000068  8001              STRH     r1,[r0,#0]            ;351
00006a  1c64              ADDS     r4,r4,#1              ;351
                  |L8.108|
00006c  42ac              CMP      r4,r5                 ;349
00006e  ddfb              BLE      |L8.104|
000070  e7da              B        |L8.40|
;;;356    
                          ENDP

000072  0000              DCW      0x0000
                  |L8.116|
                          DCD      GUI_pContext
                  |L8.120|
                          DCD      0x60020000

                          AREA ||i._FillRect||, CODE, READONLY, ALIGN=2

                  _FillRect PROC
;;;226    */
;;;227    static void _FillRect(GUI_DEVICE * pDevice, int x0, int y0, int x1, int y1) {
000000  b5f0              PUSH     {r4-r7,lr}
;;;228    
;;;229    //   for (; y0 <= y1; y0++) 
;;;230    //   {
;;;231    //     _DrawHLine(pDevice, x0, y0, x1);
;;;232    //   }
;;;233        u32 cnt;
;;;234        LCD_PIXELINDEX ColorIndex;
;;;235        
;;;236        ColorIndex = LCD__GetColorIndex();
000002  4817              LDR      r0,|L9.96|
000004  9d05              LDR      r5,[sp,#0x14]
;;;237        cnt = (y1-y0+1)*(x1-x0+1);
;;;238        
;;;239        *(__IO u16 *) (Bank1_LCD_C) = 0x2a;
000006  f04f46c0          MOV      r6,#0x60000000
00000a  6800              LDR      r0,[r0,#0]            ;236  ; GUI_pContext
00000c  1aac              SUBS     r4,r5,r2              ;237
00000e  6bc0              LDR      r0,[r0,#0x3c]         ;236
000010  8807              LDRH     r7,[r0,#0]            ;236
000012  1a58              SUBS     r0,r3,r1              ;237
000014  1c40              ADDS     r0,r0,#1              ;237
000016  1c64              ADDS     r4,r4,#1              ;237
000018  4344              MULS     r4,r0,r4              ;237
00001a  202a              MOVS     r0,#0x2a
00001c  8030              STRH     r0,[r6,#0]
;;;240        *(__IO u16 *) (Bank1_LCD_D) = (x0>>8)&0xff;
00001e  4811              LDR      r0,|L9.100|
000020  f3c12c07          UBFX     r12,r1,#8,#8
000024  f8a0c000          STRH     r12,[r0,#0]
;;;241        *(__IO u16 *) (Bank1_LCD_D) = x0 & 0xff;
000028  b2c9              UXTB     r1,r1
00002a  8001              STRH     r1,[r0,#0]
;;;242        *(__IO u16 *) (Bank1_LCD_D) = (x1>>8)&0xff;
00002c  f3c32107          UBFX     r1,r3,#8,#8
000030  8001              STRH     r1,[r0,#0]
;;;243        *(__IO u16 *) (Bank1_LCD_D) = x1 & 0xff;
000032  b2d9              UXTB     r1,r3
000034  8001              STRH     r1,[r0,#0]
;;;244        
;;;245        *(__IO u16 *) (Bank1_LCD_C) = 0x2b;
000036  212b              MOVS     r1,#0x2b
000038  8031              STRH     r1,[r6,#0]
;;;246        *(__IO u16 *) (Bank1_LCD_D) = (y0>>8)&0xff;
00003a  f3c22107          UBFX     r1,r2,#8,#8
00003e  8001              STRH     r1,[r0,#0]
;;;247        *(__IO u16 *) (Bank1_LCD_D) = y0 & 0xff;
000040  b2d1              UXTB     r1,r2
000042  8001              STRH     r1,[r0,#0]
;;;248        *(__IO u16 *) (Bank1_LCD_D) = (y1>>8)&0xff;
000044  f3c52107          UBFX     r1,r5,#8,#8
000048  8001              STRH     r1,[r0,#0]
;;;249        *(__IO u16 *) (Bank1_LCD_D) = y1 & 0xff;
00004a  b2e9              UXTB     r1,r5
00004c  8001              STRH     r1,[r0,#0]
;;;250    
;;;251        *(__IO u16 *) (Bank1_LCD_C) = 0x2c;
00004e  212c              MOVS     r1,#0x2c
000050  8031              STRH     r1,[r6,#0]
;;;252        while ( cnt-- )
;;;253        {
;;;254            *(__IO u16 *) (Bank1_LCD_D) = ColorIndex;
000052  b2b9              UXTH     r1,r7
000054  e000              B        |L9.88|
                  |L9.86|
000056  8001              STRH     r1,[r0,#0]
                  |L9.88|
000058  1e64              SUBS     r4,r4,#1
00005a  d2fc              BCS      |L9.86|
;;;255        }
;;;256    
;;;257    }
00005c  bdf0              POP      {r4-r7,pc}
;;;258    
                          ENDP

00005e  0000              DCW      0x0000
                  |L9.96|
                          DCD      GUI_pContext
                  |L9.100|
                          DCD      0x60020000

                          AREA ||i._GetDevData||, CODE, READONLY, ALIGN=2

                  _GetDevData PROC
;;;764    */
;;;765    static void * _GetDevData(GUI_DEVICE * pDevice, int Index) {
000000  2901              CMP      r1,#1
000002  d001              BEQ      |L10.8|
;;;766      GUI_USE_PARA(pDevice);
;;;767      #if GUI_SUPPORT_MEMDEV
;;;768        switch (Index) {
;;;769        case LCD_DEVDATA_MEMDEV:
;;;770          return (void *)&GUI_MEMDEV_DEVICE_16; // TBD: Has to be adapted to the right memory device depending on the used color depth!
;;;771        }
;;;772      #else
;;;773        GUI_USE_PARA(Index);
;;;774      #endif
;;;775      return NULL;
000004  2000              MOVS     r0,#0
;;;776    }
000006  4770              BX       lr
                  |L10.8|
000008  4800              LDR      r0,|L10.12|
00000a  4770              BX       lr
;;;777    
                          ENDP

                  |L10.12|
                          DCD      GUI_MEMDEV_DEVICE_16

                          AREA ||i._GetDevFunc||, CODE, READONLY, ALIGN=2

                  _GetDevFunc PROC
;;;905    */
;;;906    static void (* _GetDevFunc(GUI_DEVICE ** ppDevice, int Index))(void) {
000000  3909              SUBS     r1,r1,#9
;;;907      GUI_USE_PARA(ppDevice);
;;;908      switch (Index) {
000002  2908              CMP      r1,#8
000004  d213              BCS      |L11.46|
000006  e8dff001          TBB      [pc,r1]
00000a  0406              DCB      0x04,0x06
00000c  080a120c          DCB      0x08,0x0a,0x12,0x0c
000010  0e10              DCB      0x0e,0x10
;;;909      case LCD_DEVFUNC_SET_VRAM_ADDR:
;;;910        return (void (*)(void))_SetVRAMAddr;
000012  4808              LDR      r0,|L11.52|
;;;911      case LCD_DEVFUNC_SET_VSIZE:
;;;912        return (void (*)(void))_SetVSize;
;;;913      case LCD_DEVFUNC_SET_SIZE:
;;;914        return (void (*)(void))_SetSize;
;;;915      case LCD_DEVFUNC_INIT:
;;;916        return (void (*)(void))_Init;
;;;917      case LCD_DEVFUNC_ON:
;;;918        return (void (*)(void))_On;
;;;919      case LCD_DEVFUNC_OFF:
;;;920        return (void (*)(void))_Off;
;;;921      case LCD_DEVFUNC_SETLUTENTRY:
;;;922        return (void (*)(void))_SetLUTEntry;
;;;923      }
;;;924      return NULL;
;;;925    }
000014  4770              BX       lr
000016  4808              LDR      r0,|L11.56|
000018  4770              BX       lr
00001a  4808              LDR      r0,|L11.60|
00001c  4770              BX       lr
00001e  4808              LDR      r0,|L11.64|
000020  4770              BX       lr
000022  4808              LDR      r0,|L11.68|
000024  4770              BX       lr
000026  4808              LDR      r0,|L11.72|
000028  4770              BX       lr
00002a  4808              LDR      r0,|L11.76|
00002c  4770              BX       lr
                  |L11.46|
00002e  2000              MOVS     r0,#0                 ;924
000030  4770              BX       lr
;;;926    
                          ENDP

000032  0000              DCW      0x0000
                  |L11.52|
                          DCD      _SetVRAMAddr
                  |L11.56|
                          DCD      _SetVSize
                  |L11.60|
                          DCD      _SetSize
                  |L11.64|
                          DCD      _Init
                  |L11.68|
                          DCD      _On
                  |L11.72|
                          DCD      _Off
                  |L11.76|
                          DCD      _SetLUTEntry

                          AREA ||i._GetDevProp||, CODE, READONLY, ALIGN=1

                  _GetDevProp PROC
;;;729    */
;;;730    static I32 _GetDevProp(GUI_DEVICE * pDevice, int Index) {
000000  6880              LDR      r0,[r0,#8]
;;;731      DRIVER_CONTEXT_TEMPLATE * pContext;
;;;732    
;;;733      pContext = (DRIVER_CONTEXT_TEMPLATE *)pDevice->u.pContext;
;;;734      switch (Index) {
000002  290f              CMP      r1,#0xf
000004  d217              BCS      |L12.54|
000006  e8dff001          TBB      [pc,r1]
00000a  1608              DCB      0x16,0x08
00000c  0a0c0e16          DCB      0x0a,0x0c,0x0e,0x16
000010  16161014          DCB      0x16,0x16,0x10,0x14
000014  12121414          DCB      0x12,0x12,0x14,0x14
000018  1400              DCB      0x14,0x00
;;;735      case LCD_DEVCAP_XSIZE:
;;;736        return pContext->xSize;
00001a  6840              LDR      r0,[r0,#4]
;;;737      case LCD_DEVCAP_YSIZE:
;;;738        return pContext->ySize;
;;;739      case LCD_DEVCAP_VXSIZE:
;;;740        return pContext->vxSize;
;;;741      case LCD_DEVCAP_VYSIZE:
;;;742        return pContext->vySize;
;;;743      case LCD_DEVCAP_BITSPERPIXEL:
;;;744        return pContext->BitsPerPixel;
;;;745      case LCD_DEVCAP_NUMCOLORS:
;;;746        return 0;
;;;747      case LCD_DEVCAP_XMAG:
;;;748        return 1;
;;;749      case LCD_DEVCAP_YMAG:
;;;750        return 1;
;;;751      case LCD_DEVCAP_MIRROR_X:
;;;752        return 0;
;;;753      case LCD_DEVCAP_MIRROR_Y:
;;;754        return 0;
;;;755      case LCD_DEVCAP_SWAP_XY:
;;;756        return 0;
;;;757      }
;;;758      return -1;
;;;759    }
00001c  4770              BX       lr
00001e  6880              LDR      r0,[r0,#8]            ;738
000020  4770              BX       lr
000022  68c0              LDR      r0,[r0,#0xc]          ;740
000024  4770              BX       lr
000026  6900              LDR      r0,[r0,#0x10]         ;742
000028  4770              BX       lr
00002a  6980              LDR      r0,[r0,#0x18]         ;744
00002c  4770              BX       lr
00002e  2001              MOVS     r0,#1                 ;750
000030  4770              BX       lr
000032  2000              MOVS     r0,#0                 ;756
000034  4770              BX       lr
                  |L12.54|
000036  f04f30ff          MOV      r0,#0xffffffff        ;758
00003a  4770              BX       lr
;;;760    
                          ENDP


                          AREA ||i._GetPixelIndex||, CODE, READONLY, ALIGN=1

                  _GetPixelIndex PROC
;;;177    */
;;;178    static unsigned int _GetPixelIndex(GUI_DEVICE * pDevice, int x, int y) {
000000  4608              MOV      r0,r1
;;;179      unsigned int PixelIndex;
;;;180        //
;;;181        // Convert logical into physical coordinates (Dep. on LCDConf.h)
;;;182        //
;;;183        #if (LCD_MIRROR_X == 1) || (LCD_MIRROR_Y == 1) || (LCD_SWAP_XY == 1)
;;;184          int xPhys, yPhys;
;;;185    
;;;186          xPhys = LOG2PHYS_X(x, y);
;;;187          yPhys = LOG2PHYS_Y(x, y);
;;;188        #else
;;;189          #define xPhys x
;;;190          #define yPhys y
;;;191        #endif
;;;192        GUI_USE_PARA(pDevice);
;;;193        GUI_USE_PARA(x);
;;;194        GUI_USE_PARA(y);
;;;195        {
;;;196          //
;;;197          // Write into hardware ... Adapt to your system
;;;198          //
;;;199          // TBD by customer...
;;;200          //
;;;201    			PixelIndex = LCD_GetPoint(xPhys, yPhys);
000002  b291              UXTH     r1,r2
000004  b280              UXTH     r0,r0
000006  f7ffbffe          B.W      LCD_GetPoint
;;;202        }
;;;203        #if (LCD_MIRROR_X == 0) && (LCD_MIRROR_Y == 0) && (LCD_SWAP_XY == 0)
;;;204          #undef xPhys
;;;205          #undef yPhys
;;;206        #endif
;;;207      return PixelIndex;
;;;208    }
;;;209    
                          ENDP


                          AREA ||i._GetRect||, CODE, READONLY, ALIGN=1

                  _GetRect PROC
;;;781    */
;;;782    static void _GetRect(GUI_DEVICE * pDevice, LCD_RECT * pRect) {
000000  6880              LDR      r0,[r0,#8]
;;;783      DRIVER_CONTEXT_TEMPLATE * pContext;
;;;784    
;;;785      pContext = (DRIVER_CONTEXT_TEMPLATE *)pDevice->u.pContext;
;;;786      pRect->x0 = 0;
000002  2200              MOVS     r2,#0
000004  800a              STRH     r2,[r1,#0]
;;;787      pRect->y0 = 0;
000006  804a              STRH     r2,[r1,#2]
;;;788      pRect->x1 = pContext->vxSize - 1;
000008  8982              LDRH     r2,[r0,#0xc]
00000a  1e52              SUBS     r2,r2,#1
00000c  808a              STRH     r2,[r1,#4]
;;;789      pRect->y1 = pContext->vySize - 1;
00000e  8a00              LDRH     r0,[r0,#0x10]
000010  1e40              SUBS     r0,r0,#1
000012  80c8              STRH     r0,[r1,#6]
;;;790    }
000014  4770              BX       lr
;;;791    
                          ENDP


                          AREA ||i._Init||, CODE, READONLY, ALIGN=1

                  _Init PROC
;;;865    */
;;;866    static int  _Init(GUI_DEVICE * pDevice) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;867      int r;
;;;868    
;;;869      r = _InitOnce(pDevice);
000004  f7fffffe          BL       _InitOnce
000008  4604              MOV      r4,r0
;;;870      r |= LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_INITCONTROLLER, NULL);
00000a  2200              MOVS     r2,#0
00000c  2101              MOVS     r1,#1
00000e  69a8              LDR      r0,[r5,#0x18]
000010  f7fffffe          BL       LCD_X_DisplayDriver
000014  4320              ORRS     r0,r0,r4
;;;871      return r;
;;;872    }
000016  bd70              POP      {r4-r6,pc}
;;;873    
                          ENDP


                          AREA ||i._InitOnce||, CODE, READONLY, ALIGN=1

                  _InitOnce PROC
;;;714    */
;;;715    static int _InitOnce(GUI_DEVICE * pDevice) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;716      DRIVER_CONTEXT_TEMPLATE * pContext;
;;;717    
;;;718      if (pDevice->u.pContext == NULL) {
000004  6880              LDR      r0,[r0,#8]
000006  b960              CBNZ     r0,|L16.34|
;;;719        pDevice->u.pContext = GUI_ALLOC_GetFixedBlock(sizeof(DRIVER_CONTEXT_TEMPLATE));
000008  201c              MOVS     r0,#0x1c
00000a  f7fffffe          BL       GUI_ALLOC_GetFixedBlock
;;;720        pContext = (DRIVER_CONTEXT_TEMPLATE *)pDevice->u.pContext;
00000e  4605              MOV      r5,r0
;;;721        pContext->BitsPerPixel = LCD__GetBPP(pDevice->pColorConvAPI->pfGetIndexMask());
000010  60a0              STR      r0,[r4,#8]
000012  6920              LDR      r0,[r4,#0x10]
000014  6880              LDR      r0,[r0,#8]
000016  4780              BLX      r0
000018  f7fffffe          BL       LCD__GetBPP
;;;722      }
;;;723      return pDevice->u.pContext ? 0 : 1;
00001c  61a8              STR      r0,[r5,#0x18]
00001e  68a0              LDR      r0,[r4,#8]            ;721
000020  b108              CBZ      r0,|L16.38|
                  |L16.34|
000022  2000              MOVS     r0,#0
;;;724    }
000024  bd70              POP      {r4-r6,pc}
                  |L16.38|
000026  2001              MOVS     r0,#1                 ;723
000028  bd70              POP      {r4-r6,pc}
;;;725    
                          ENDP


                          AREA ||i._Off||, CODE, READONLY, ALIGN=1

                  _Off PROC
;;;885    */
;;;886    static void _Off (GUI_DEVICE * pDevice) {
000000  2200              MOVS     r2,#0
;;;887      LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_OFF, NULL);
000002  6980              LDR      r0,[r0,#0x18]
000004  2106              MOVS     r1,#6
000006  f7ffbffe          B.W      LCD_X_DisplayDriver
;;;888    }
;;;889    
                          ENDP


                          AREA ||i._On||, CODE, READONLY, ALIGN=1

                  _On PROC
;;;877    */
;;;878    static void _On (GUI_DEVICE * pDevice) {
000000  2200              MOVS     r2,#0
;;;879      LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_ON, NULL);
000002  6980              LDR      r0,[r0,#0x18]
000004  2105              MOVS     r1,#5
000006  f7ffbffe          B.W      LCD_X_DisplayDriver
;;;880    }
;;;881    
                          ENDP


                          AREA ||i._SetLUTEntry||, CODE, READONLY, ALIGN=1

                  _SetLUTEntry PROC
;;;893    */
;;;894    static void _SetLUTEntry(GUI_DEVICE * pDevice, U8 Pos, LCD_COLOR Color) {
000000  b51c              PUSH     {r2-r4,lr}
;;;895      LCD_X_SETLUTENTRY_INFO Data = {0};
000002  2300              MOVS     r3,#0
;;;896    
;;;897      Data.Pos   = Pos;
000004  9301              STR      r3,[sp,#4]
000006  f88d1004          STRB     r1,[sp,#4]
;;;898      Data.Color = Color;
;;;899      LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETLUTENTRY, (void *)&Data);
00000a  9200              STR      r2,[sp,#0]
00000c  6980              LDR      r0,[r0,#0x18]
00000e  466a              MOV      r2,sp
000010  2104              MOVS     r1,#4
000012  f7fffffe          BL       LCD_X_DisplayDriver
;;;900    }
000016  bd1c              POP      {r2-r4,pc}
;;;901    
                          ENDP


                          AREA ||i._SetOrg||, CODE, READONLY, ALIGN=1

                  _SetOrg PROC
;;;795    */
;;;796    static void _SetOrg(GUI_DEVICE * pDevice, int x, int y) {
000000  b51c              PUSH     {r2-r4,lr}
000002  e9cd1200          STRD     r1,r2,[sp,#0]
;;;797      LCD_X_SETORG_INFO Data = {0};
;;;798    
;;;799      Data.xPos = x;
;;;800      Data.yPos = y;
;;;801      LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETORG, (void *)&Data);
000006  6980              LDR      r0,[r0,#0x18]
000008  466a              MOV      r2,sp
00000a  2103              MOVS     r1,#3
00000c  f7fffffe          BL       LCD_X_DisplayDriver
;;;802    }
000010  bd1c              POP      {r2-r4,pc}
;;;803    
                          ENDP


                          AREA ||i._SetPixelIndex||, CODE, READONLY, ALIGN=1

                  _SetPixelIndex PROC
;;;137    */
;;;138    static void _SetPixelIndex(GUI_DEVICE * pDevice, int x, int y, int PixelIndex) {
000000  b430              PUSH     {r4,r5}
000002  4610              MOV      r0,r2
000004  460c              MOV      r4,r1
;;;139        //
;;;140        // Convert logical into physical coordinates (Dep. on LCDConf.h)
;;;141        //
;;;142        #if (LCD_MIRROR_X == 1) || (LCD_MIRROR_Y == 1) || (LCD_SWAP_XY == 1)
;;;143          int xPhys, yPhys;
;;;144    
;;;145          xPhys = LOG2PHYS_X(x, y);
;;;146          yPhys = LOG2PHYS_Y(x, y);
;;;147        #else
;;;148          #define xPhys x
;;;149          #define yPhys y
;;;150        #endif
;;;151        GUI_USE_PARA(pDevice);
;;;152        GUI_USE_PARA(x);
;;;153        GUI_USE_PARA(y);
;;;154        GUI_USE_PARA(PixelIndex);
;;;155        {
;;;156          //
;;;157          // Write into hardware ... Adapt to your system
;;;158          //
;;;159          // TBD by customer...
;;;160          //
;;;161    			LCD_SetPoint(xPhys, yPhys, PixelIndex);
000006  b281              UXTH     r1,r0
000008  b2a0              UXTH     r0,r4
00000a  bc30              POP      {r4,r5}
00000c  b29a              UXTH     r2,r3
00000e  f7ffbffe          B.W      LCD_SetPoint
;;;162        }
;;;163        #if (LCD_MIRROR_X == 0) && (LCD_MIRROR_Y == 0) && (LCD_SWAP_XY == 0)
;;;164          #undef xPhys
;;;165          #undef yPhys
;;;166        #endif
;;;167    }
;;;168    
                          ENDP


                          AREA ||i._SetSize||, CODE, READONLY, ALIGN=1

                  _SetSize PROC
;;;846    */
;;;847    static void _SetSize(GUI_DEVICE * pDevice, int xSize, int ySize) {
000000  b57c              PUSH     {r2-r6,lr}
000002  4606              MOV      r6,r0
;;;848      DRIVER_CONTEXT_TEMPLATE * pContext;
;;;849      LCD_X_SETSIZE_INFO Data = {0};
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;850    
;;;851      _InitOnce(pDevice);
000008  9001              STR      r0,[sp,#4]
00000a  4615              MOV      r5,r2                 ;847
00000c  460c              MOV      r4,r1                 ;847
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       _InitOnce
;;;852      if (pDevice->u.pContext) {
000014  68b3              LDR      r3,[r6,#8]
000016  2b00              CMP      r3,#0
000018  d00c              BEQ      |L22.52|
;;;853        pContext = (DRIVER_CONTEXT_TEMPLATE *)pDevice->u.pContext;
;;;854        pContext->vxSizePhys = (pContext->vxSizePhys == 0) ? xSize : pContext->vxSizePhys;
00001a  6958              LDR      r0,[r3,#0x14]
00001c  b900              CBNZ     r0,|L22.32|
00001e  4620              MOV      r0,r4
                  |L22.32|
000020  6158              STR      r0,[r3,#0x14]
000022  e9c34501          STRD     r4,r5,[r3,#4]
000026  e9cd4500          STRD     r4,r5,[sp,#0]
;;;855        pContext->xSize = xSize;
;;;856        pContext->ySize = ySize;
;;;857        Data.xSize = xSize;
;;;858        Data.ySize = ySize;
;;;859        LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETSIZE, (void *)&Data);
00002a  466a              MOV      r2,sp
00002c  2107              MOVS     r1,#7
00002e  69b0              LDR      r0,[r6,#0x18]
000030  f7fffffe          BL       LCD_X_DisplayDriver
                  |L22.52|
;;;860      }
;;;861    }
000034  bd7c              POP      {r2-r6,pc}
;;;862    /*********************************************************************
                          ENDP


                          AREA ||i._SetVRAMAddr||, CODE, READONLY, ALIGN=1

                  _SetVRAMAddr PROC
;;;813    */
;;;814    static void _SetVRAMAddr(GUI_DEVICE * pDevice, void * pVRAM) {
000000  b538              PUSH     {r3-r5,lr}
000002  4605              MOV      r5,r0
;;;815      DRIVER_CONTEXT_TEMPLATE * pContext;
;;;816      LCD_X_SETVRAMADDR_INFO Data = {0};
000004  2000              MOVS     r0,#0
;;;817    
;;;818      _InitOnce(pDevice);
000006  9000              STR      r0,[sp,#0]
000008  460c              MOV      r4,r1                 ;814
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       _InitOnce
;;;819      if (pDevice->u.pContext) {
000010  68aa              LDR      r2,[r5,#8]
000012  2a00              CMP      r2,#0
000014  d006              BEQ      |L23.36|
;;;820        pContext = (DRIVER_CONTEXT_TEMPLATE *)pDevice->u.pContext;
;;;821        pContext->VRAMAddr = (U32)pVRAM;
;;;822        Data.pVRAM = pVRAM;
000016  6014              STR      r4,[r2,#0]
;;;823        LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETVRAMADDR, (void *)&Data);
000018  9400              STR      r4,[sp,#0]
00001a  466a              MOV      r2,sp
00001c  2102              MOVS     r1,#2
00001e  69a8              LDR      r0,[r5,#0x18]
000020  f7fffffe          BL       LCD_X_DisplayDriver
                  |L23.36|
;;;824      }
;;;825    }
000024  bd38              POP      {r3-r5,pc}
;;;826    
                          ENDP


                          AREA ||i._SetVSize||, CODE, READONLY, ALIGN=1

                  _SetVSize PROC
;;;830    */
;;;831    static void _SetVSize(GUI_DEVICE * pDevice, int xSize, int ySize) {
000000  b570              PUSH     {r4-r6,lr}
000002  4615              MOV      r5,r2
000004  460c              MOV      r4,r1
000006  4606              MOV      r6,r0
;;;832      DRIVER_CONTEXT_TEMPLATE * pContext;
;;;833    
;;;834      _InitOnce(pDevice);
000008  f7fffffe          BL       _InitOnce
;;;835      if (pDevice->u.pContext) {
00000c  68b0              LDR      r0,[r6,#8]
00000e  2800              CMP      r0,#0
000010  d002              BEQ      |L24.24|
000012  e9c04503          STRD     r4,r5,[r0,#0xc]
;;;836        pContext = (DRIVER_CONTEXT_TEMPLATE *)pDevice->u.pContext;
;;;837        pContext->vxSize = xSize;
;;;838        pContext->vySize = ySize;
;;;839        pContext->vxSizePhys = xSize;
000016  6144              STR      r4,[r0,#0x14]
                  |L24.24|
;;;840      }
;;;841    }
000018  bd70              POP      {r4-r6,pc}
;;;842    
                          ENDP


                          AREA ||i._XorPixel||, CODE, READONLY, ALIGN=1

                  _XorPixel PROC
;;;213    */
;;;214    static void _XorPixel(GUI_DEVICE * pDevice, int x, int y) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4615              MOV      r5,r2
000006  460e              MOV      r6,r1
000008  4604              MOV      r4,r0
;;;215      LCD_PIXELINDEX PixelIndex;
;;;216      LCD_PIXELINDEX IndexMask;
;;;217    
;;;218      PixelIndex = _GetPixelIndex(pDevice, x, y);
00000a  f7fffffe          BL       _GetPixelIndex
00000e  4607              MOV      r7,r0
;;;219      IndexMask  = pDevice->pColorConvAPI->pfGetIndexMask();
000010  6920              LDR      r0,[r4,#0x10]
000012  6880              LDR      r0,[r0,#8]
000014  4780              BLX      r0
;;;220      _SetPixelIndex(pDevice, x, y, PixelIndex ^ IndexMask);
000016  ea870300          EOR      r3,r7,r0
00001a  462a              MOV      r2,r5
00001c  4631              MOV      r1,r6
00001e  4620              MOV      r0,r4
000020  e8bd41f0          POP      {r4-r8,lr}
000024  f7ffbffe          B.W      _SetPixelIndex
;;;221    }
;;;222    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  GUIDRV_Template_API
                          DCD      0x00000000
                          DCD      _DrawBitmap
                          DCD      _DrawHLine
                          DCD      _DrawVLine
                          DCD      _FillRect
                          DCD      _GetPixelIndex
                          DCD      _SetPixelIndex
                          DCD      _XorPixel
                          DCD      _SetOrg
                          DCD      _GetDevFunc
                          DCD      _GetDevProp
                          DCD      _GetDevData
                          DCD      _GetRect

;*** Start embedded assembler ***

#line 1 "..\\STemWinLibrary522\\Config\\GUIDRV_Template.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_GUIDRV_Template_c_4a54813b____REV16|
#line 129 "E:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___17_GUIDRV_Template_c_4a54813b____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_GUIDRV_Template_c_4a54813b____REVSH|
#line 144
|__asm___17_GUIDRV_Template_c_4a54813b____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
