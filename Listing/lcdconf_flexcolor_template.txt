; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\lcdconf_flexcolor_template.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\lcdconf_flexcolor_template.d --cpu=Cortex-M4.fp.sp --apcs=interwork --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=537 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\lcdconf_flexcolor_template.crf --no_multibyte_chars ..\STemWinLibrary522\Config\LCDConf_FlexColor_Template.c]
                          THUMB

                          AREA ||i.LCD_X_Config||, CODE, READONLY, ALIGN=2

                  LCD_X_Config PROC
;;;167    */
;;;168    void LCD_X_Config(void) {
000000  b570              PUSH     {r4-r6,lr}
000002  b0a0              SUB      sp,sp,#0x80
;;;169      GUI_DEVICE * pDevice;
;;;170      CONFIG_FLEXCOLOR Config = {0};
000004  2114              MOVS     r1,#0x14
000006  a81a              ADD      r0,sp,#0x68
000008  f7fffffe          BL       __aeabi_memclr4
;;;171      GUI_PORT_API PortAPI = {0};
00000c  2168              MOVS     r1,#0x68
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       __aeabi_memclr4
;;;172      //
;;;173      // Set display driver and color conversion
;;;174      //
;;;175      pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_M565 , 0, 0);
000014  2300              MOVS     r3,#0
000016  461a              MOV      r2,r3
000018  4914              LDR      r1,|L1.108|
00001a  4815              LDR      r0,|L1.112|
00001c  f7fffffe          BL       GUI_DEVICE_CreateAndLink
000020  4604              MOV      r4,r0
;;;176    	 //GUI_DEVICE_CreateAndLink(GUIDRV_TEMPLATE, GUICC_565, 0, 0);//自定义驱动使用
;;;177      //
;;;178      // Display driver configuration, required for Lin-driver
;;;179      //
;;;180      LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
000022  f44f7588          MOV      r5,#0x110
000026  f44f76f0          MOV      r6,#0x1e0
00002a  462a              MOV      r2,r5
00002c  4631              MOV      r1,r6
00002e  2000              MOVS     r0,#0
000030  f7fffffe          BL       LCD_SetSizeEx
;;;181      LCD_SetVSizeEx(0, VXSIZE_PHYS, VYSIZE_PHYS);
000034  462a              MOV      r2,r5
000036  4631              MOV      r1,r6
000038  2000              MOVS     r0,#0
00003a  f7fffffe          BL       LCD_SetVSizeEx
;;;182      //
;;;183      // Orientation
;;;184      //
;;;185      Config.Orientation =  GUI_MIRROR_X |GUI_MIRROR_Y;
00003e  2103              MOVS     r1,#3
;;;186      GUIDRV_FlexColor_Config(pDevice, &Config);
000040  911c              STR      r1,[sp,#0x70]
000042  a91a              ADD      r1,sp,#0x68
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       GUIDRV_FlexColor_Config
;;;187      //
;;;188      // Set controller and operation mode
;;;189      //
;;;190      PortAPI.pfWrite16_A0  = LcdWriteReg;
00004a  490a              LDR      r1,|L1.116|
;;;191      PortAPI.pfWrite16_A1  = LcdWriteData;
;;;192      PortAPI.pfWriteM16_A1 = LcdWriteDataMultiple;
00004c  480b              LDR      r0,|L1.124|
00004e  9108              STR      r1,[sp,#0x20]         ;191
;;;193      PortAPI.pfReadM16_A1  = LcdReadDataMultiple;
000050  900b              STR      r0,[sp,#0x2c]
000052  4909              LDR      r1,|L1.120|
000054  480a              LDR      r0,|L1.128|
000056  9109              STR      r1,[sp,#0x24]
;;;194      GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66720, GUIDRV_FLEXCOLOR_M16C0B16);
000058  900f              STR      r0,[sp,#0x3c]
00005a  4b0a              LDR      r3,|L1.132|
00005c  4a0a              LDR      r2,|L1.136|
00005e  4669              MOV      r1,sp
000060  4620              MOV      r0,r4
000062  f7fffffe          BL       GUIDRV_FlexColor_SetFunc
;;;195    }
000066  b020              ADD      sp,sp,#0x80
000068  bd70              POP      {r4-r6,pc}
;;;196    
                          ENDP

00006a  0000              DCW      0x0000
                  |L1.108|
                          DCD      LCD_API_ColorConv_M565
                  |L1.112|
                          DCD      GUIDRV_FlexColor_API
                  |L1.116|
                          DCD      LcdWriteReg
                  |L1.120|
                          DCD      LcdWriteData
                  |L1.124|
                          DCD      LcdWriteDataMultiple
                  |L1.128|
                          DCD      LcdReadDataMultiple
                  |L1.132|
                          DCD      GUIDRV_FlexColor_SetMode16bppC0B16
                  |L1.136|
                          DCD      GUIDRV_FlexColor_SetFunc66720

                          AREA ||i.LCD_X_DisplayDriver||, CODE, READONLY, ALIGN=1

                  LCD_X_DisplayDriver PROC
;;;217    */
;;;218    int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
000000  2901              CMP      r1,#1
000002  d002              BEQ      |L2.10|
;;;219      int r;
;;;220      (void) LayerIndex;
;;;221      (void) pData;
;;;222      
;;;223      switch (Cmd) {
;;;224      case LCD_X_INITCONTROLLER: {
;;;225        //
;;;226        // Called during the initialization process in order to set up the
;;;227        // display controller and put it into operation. If the display
;;;228        // controller is not initialized by any external routine this needs
;;;229        // to be adapted by the customer...
;;;230        //
;;;231        // ...
;;;232    		//LCD_Initializtion();
;;;233        return 0;
;;;234      }
;;;235      default:
;;;236        r = -1;
000004  f04f30ff          MOV      r0,#0xffffffff
;;;237      }
;;;238      return r;
;;;239    }
000008  4770              BX       lr
                  |L2.10|
00000a  2000              MOVS     r0,#0                 ;233
00000c  4770              BX       lr
;;;240    
                          ENDP


                          AREA ||i.LcdReadDataMultiple||, CODE, READONLY, ALIGN=1

                  LcdReadDataMultiple PROC
;;;145    */
;;;146    static void LcdReadDataMultiple(U16 * pData, int NumItems) {
000000  b570              PUSH     {r4-r6,lr}
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;147      while (NumItems--) {
;;;148        // ... TBD by user
;;;149    		* pData++=sLCD_Read_Data();
000006  e003              B        |L3.16|
                  |L3.8|
000008  f7fffffe          BL       sLCD_Read_Data
00000c  f8240b02          STRH     r0,[r4],#2
                  |L3.16|
000010  1e6d              SUBS     r5,r5,#1
000012  d2f9              BCS      |L3.8|
;;;150      }
;;;151    }
000014  bd70              POP      {r4-r6,pc}
;;;152    
                          ENDP


                          AREA ||i.LcdWriteData||, CODE, READONLY, ALIGN=1

                  LcdWriteData PROC
;;;119    */
;;;120    static void LcdWriteData(U16 Data) {
000000  f7ffbffe          B.W      sLCD_WR_Data
;;;121      // ... TBD by user
;;;122     sLCD_WR_Data(Data);
;;;123    }
;;;124    
                          ENDP


                          AREA ||i.LcdWriteDataMultiple||, CODE, READONLY, ALIGN=1

                  LcdWriteDataMultiple PROC
;;;131    */
;;;132    static void LcdWriteDataMultiple(U16 * pData, int NumItems) {
000000  b570              PUSH     {r4-r6,lr}
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;133      while (NumItems--) {
;;;134        // ... TBD by user
;;;135    		sLCD_WR_Data(* pData++);
000006  e003              B        |L5.16|
                  |L5.8|
000008  f8340b02          LDRH     r0,[r4],#2
00000c  f7fffffe          BL       sLCD_WR_Data
                  |L5.16|
000010  1e6d              SUBS     r5,r5,#1
000012  d2f9              BCS      |L5.8|
;;;136      }
;;;137    }
000014  bd70              POP      {r4-r6,pc}
;;;138    
                          ENDP


                          AREA ||i.LcdWriteReg||, CODE, READONLY, ALIGN=1

                  LcdWriteReg PROC
;;;107    */
;;;108    static void LcdWriteReg(U16 Data) {
000000  f7ffbffe          B.W      sLCD_WR_REG
;;;109      // ... TBD by user
;;;110    	sLCD_WR_REG(Data);
;;;111    }
;;;112    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\STemWinLibrary522\\Config\\LCDConf_FlexColor_Template.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___28_LCDConf_FlexColor_Template_c_0a169049____REV16|
#line 129 "E:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___28_LCDConf_FlexColor_Template_c_0a169049____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___28_LCDConf_FlexColor_Template_c_0a169049____REVSH|
#line 144
|__asm___28_LCDConf_FlexColor_Template_c_0a169049____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
