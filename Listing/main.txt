; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\main.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\main.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=538 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\main.crf --no_multibyte_chars ..\User\main.c]
                          THUMB

                          AREA ||i.Ds18b20Check||, CODE, READONLY, ALIGN=2

                  Ds18b20Check PROC
;;;138    //返回0:存在
;;;139    u8 Ds18b20Check(void) 	   
000000  b570              PUSH     {r4-r6,lr}
;;;140    {   
;;;141        u8 retry=0;
000002  2400              MOVS     r4,#0
;;;142        DS18B20_IN();//SET PA0 INPUT	 
000004  f7fffffe          BL       DS18B20_IN
;;;143        while (DS18B20_DQ_IN&&retry<200)
000008  f44f6580          MOV      r5,#0x400
00000c  4e12              LDR      r6,|L1.88|
00000e  e004              B        |L1.26|
                  |L1.16|
000010  1c64              ADDS     r4,r4,#1
;;;144        {
;;;145            retry++;
000012  b2e4              UXTB     r4,r4
;;;146            Delay_usS(3);
000014  2003              MOVS     r0,#3
000016  f7fffffe          BL       Delay_usS
                  |L1.26|
00001a  4629              MOV      r1,r5                 ;143
00001c  4630              MOV      r0,r6                 ;143
00001e  f7fffffe          BL       GPIO_ReadInputDataBit
000022  b110              CBZ      r0,|L1.42|
000024  2cc8              CMP      r4,#0xc8              ;143
000026  d3f3              BCC      |L1.16|
000028  e00f              B        |L1.74|
                  |L1.42|
;;;147        };	 
;;;148        if(retry>=200)
00002a  2cc8              CMP      r4,#0xc8
00002c  d20d              BCS      |L1.74|
;;;149    		return 1;
;;;150        else 
;;;151    		retry=0;
00002e  2400              MOVS     r4,#0
000030  e004              B        |L1.60|
                  |L1.50|
000032  1c64              ADDS     r4,r4,#1
;;;152        while (!DS18B20_DQ_IN&&retry<240)
;;;153        {
;;;154            retry++;
000034  b2e4              UXTB     r4,r4
;;;155            Delay_usS(3);
000036  2003              MOVS     r0,#3
000038  f7fffffe          BL       Delay_usS
                  |L1.60|
00003c  4629              MOV      r1,r5                 ;152
00003e  4630              MOV      r0,r6                 ;152
000040  f7fffffe          BL       GPIO_ReadInputDataBit
000044  b118              CBZ      r0,|L1.78|
;;;156        };
;;;157        if(retry>=240)
000046  2cf0              CMP      r4,#0xf0
000048  d304              BCC      |L1.84|
                  |L1.74|
;;;158    		return 1;	    
00004a  2001              MOVS     r0,#1
;;;159        return 0;
;;;160    }
00004c  bd70              POP      {r4-r6,pc}
                  |L1.78|
00004e  2cf0              CMP      r4,#0xf0              ;152
000050  d3ef              BCC      |L1.50|
000052  e7fa              B        |L1.74|
                  |L1.84|
000054  2000              MOVS     r0,#0                 ;159
000056  bd70              POP      {r4-r6,pc}
;;;161    
                          ENDP

                  |L1.88|
                          DCD      0x40020400

                          AREA ||i.Ds18b20GetTemp||, CODE, READONLY, ALIGN=2

                  Ds18b20GetTemp PROC
;;;254    //返回值：温度值 （-550~1250） 
;;;255    short Ds18b20GetTemp(void)
000000  b570              PUSH     {r4-r6,lr}
;;;256    {
;;;257        u8 temp;
;;;258        u8 TL,TH;
;;;259        short tem;
;;;260        Ds18b20Start ();                    // ds1820 start convert
000002  f7fffffe          BL       Ds18b20Start
;;;261        Ds18b20Rst();
000006  f7fffffe          BL       Ds18b20Rst
;;;262        Ds18b20Check();	 
00000a  f7fffffe          BL       Ds18b20Check
;;;263        Ds18b20WriteByte(0xcc);// skip rom
00000e  20cc              MOVS     r0,#0xcc
000010  f7fffffe          BL       Ds18b20WriteByte
;;;264        Ds18b20WriteByte(0xbe);// convert	    
000014  20be              MOVS     r0,#0xbe
000016  f7fffffe          BL       Ds18b20WriteByte
;;;265        TL=Ds18b20ReadByte(); // LSB   
00001a  f7fffffe          BL       Ds18b20ReadByte
00001e  4604              MOV      r4,r0
;;;266        TH=Ds18b20ReadByte(); // MSB  
000020  f7fffffe          BL       Ds18b20ReadByte
;;;267        
;;;268        if(TH>7)
000024  2807              CMP      r0,#7
000026  d905              BLS      |L2.52|
;;;269        {
;;;270            TH=~TH;
000028  43c0              MVNS     r0,r0
;;;271            TL=~TL; 
00002a  43e1              MVNS     r1,r4
00002c  b2c0              UXTB     r0,r0                 ;270
00002e  b2cc              UXTB     r4,r1
;;;272            temp=0;//温度为负  
000030  2500              MOVS     r5,#0
000032  e000              B        |L2.54|
                  |L2.52|
;;;273        }else temp=1;//温度为正	  	  
000034  2501              MOVS     r5,#1
                  |L2.54|
;;;274        tem=TH; //获得高八位
;;;275        tem<<=8;    
;;;276        tem+=TL;//获得底八位
000036  eb042000          ADD      r0,r4,r0,LSL #8
00003a  b200              SXTH     r0,r0
;;;277        tem=(short)((float)tem*0.625);//转换     
00003c  f7fffffe          BL       __aeabi_i2d
000040  ed9f1b06          VLDR     d1,|L2.92|
000044  ec532b11          VMOV     r2,r3,d1
000048  f7fffffe          BL       __aeabi_dmul
00004c  f7fffffe          BL       __aeabi_d2iz
000050  b200              SXTH     r0,r0
;;;278        if(temp)return tem; //返回温度值
000052  2d00              CMP      r5,#0
000054  d101              BNE      |L2.90|
;;;279        else return -tem;    
000056  4240              RSBS     r0,r0,#0
000058  b200              SXTH     r0,r0
                  |L2.90|
;;;280    } 
00005a  bd70              POP      {r4-r6,pc}
;;;281    
                          ENDP

                  |L2.92|
00005c  00000000          DCFD     0x3fe4000000000000 ; 0.625
000060  3fe40000

                          AREA ||i.Ds18b20Init||, CODE, READONLY, ALIGN=2

                  Ds18b20Init PROC
;;;164    //返回0:存在    	 
;;;165    u8 Ds18b20Init(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;166    {
;;;167        GPIO_InitTypeDef  GPIO_InitStructure;
;;;168        
;;;169       GPIO_InitStructure.GPIO_Speed =GPIO_Speed_50MHz;
000002  2002              MOVS     r0,#2
000004  f88d0005          STRB     r0,[sp,#5]
;;;170    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
000008  2001              MOVS     r0,#1
00000a  f88d0004          STRB     r0,[sp,#4]
;;;171    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00000e  2000              MOVS     r0,#0
;;;172    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;//DS18B20
;;;173    	GPIO_Init(GPIOB, &GPIO_InitStructure);//
000010  4d09              LDR      r5,|L3.56|
000012  f88d0006          STRB     r0,[sp,#6]            ;171
000016  f44f6480          MOV      r4,#0x400             ;172
00001a  4669              MOV      r1,sp
00001c  4628              MOV      r0,r5
00001e  9400              STR      r4,[sp,#0]
000020  f7fffffe          BL       GPIO_Init
;;;174        
;;;175        GPIO_SetBits(GPIOB,GPIO_Pin_10);    //输出1
000024  4621              MOV      r1,r4
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       GPIO_SetBits
;;;176        
;;;177        Ds18b20Rst();
00002c  f7fffffe          BL       Ds18b20Rst
;;;178        
;;;179        return Ds18b20Check();
000030  f7fffffe          BL       Ds18b20Check
;;;180    }  
000034  bd7c              POP      {r2-r6,pc}
;;;181    
                          ENDP

000036  0000              DCW      0x0000
                  |L3.56|
                          DCD      0x40020400

                          AREA ||i.Ds18b20ReadBit||, CODE, READONLY, ALIGN=2

                  Ds18b20ReadBit PROC
;;;183    //返回值：1/0
;;;184    u8 Ds18b20ReadBit(void) 			 // read one bit
000000  b570              PUSH     {r4-r6,lr}
;;;185    {
;;;186        u8 data;
;;;187        DS18B20_OUT();//SET PA0 OUTPUT
000002  f7fffffe          BL       DS18B20_OUT
;;;188        DS18B20_DQ_OUT_0; 
000006  4d10              LDR      r5,|L4.72|
000008  f44f6480          MOV      r4,#0x400
00000c  4621              MOV      r1,r4
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       GPIO_ResetBits
;;;189        Delay_usS(5);
000014  2005              MOVS     r0,#5
000016  f7fffffe          BL       Delay_usS
;;;190        DS18B20_DQ_OUT_1; 
00001a  4621              MOV      r1,r4
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       GPIO_SetBits
;;;191        DS18B20_IN();//SET PA0 INPUT
000022  f7fffffe          BL       DS18B20_IN
;;;192        Delay_usS(30);
000026  201e              MOVS     r0,#0x1e
000028  f7fffffe          BL       Delay_usS
;;;193        if(DS18B20_DQ_IN)
00002c  4621              MOV      r1,r4
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       GPIO_ReadInputDataBit
000034  b108              CBZ      r0,|L4.58|
;;;194    		data=1;
000036  2401              MOVS     r4,#1
000038  e000              B        |L4.60|
                  |L4.58|
;;;195        else 
;;;196    		data=0;	 
00003a  2400              MOVS     r4,#0
                  |L4.60|
;;;197        Delay_usS(125);           
00003c  207d              MOVS     r0,#0x7d
00003e  f7fffffe          BL       Delay_usS
;;;198        return data;
000042  4620              MOV      r0,r4
;;;199    }
000044  bd70              POP      {r4-r6,pc}
;;;200    
                          ENDP

000046  0000              DCW      0x0000
                  |L4.72|
                          DCD      0x40020400

                          AREA ||i.Ds18b20ReadByte||, CODE, READONLY, ALIGN=2

                  Ds18b20ReadByte PROC
;;;202    //返回值：读到的数据
;;;203    u8 Ds18b20ReadByte(void)    // read one byte
000000  b570              PUSH     {r4-r6,lr}
;;;204    {        
;;;205        u8 i,j,dat;
;;;206        dat=0;
000002  2500              MOVS     r5,#0
;;;207        for (i=1;i<=8;i++) 
000004  f05f0401          MOVS.W   r4,#1
                  |L5.8|
;;;208        {
;;;209            j=Ds18b20ReadBit();
000008  f7fffffe          BL       Ds18b20ReadBit
;;;210            dat=(j<<7)|(dat>>1);
00000c  01c0              LSLS     r0,r0,#7
00000e  1c64              ADDS     r4,r4,#1
000010  ea400055          ORR      r0,r0,r5,LSR #1
000014  b2e4              UXTB     r4,r4                 ;207
000016  b2c5              UXTB     r5,r0
000018  2c08              CMP      r4,#8                 ;207
00001a  d9f5              BLS      |L5.8|
;;;211        }						    
;;;212        return dat;
00001c  4628              MOV      r0,r5
;;;213    }
00001e  bd70              POP      {r4-r6,pc}
;;;214    
                          ENDP


                          AREA ||i.Ds18b20Rst||, CODE, READONLY, ALIGN=2

                  Ds18b20Rst PROC
;;;126    //复位DS18B20
;;;127    void Ds18b20Rst(void)	   
000000  b570              PUSH     {r4-r6,lr}
;;;128    {                 
;;;129        DS18B20_OUT(); //SET PA0 OUTPUT
000002  f7fffffe          BL       DS18B20_OUT
;;;130        DS18B20_DQ_OUT_0; //拉低DQ
000006  4d0a              LDR      r5,|L6.48|
000008  f44f6480          MOV      r4,#0x400
00000c  4621              MOV      r1,r4
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       GPIO_ResetBits
;;;131        Delay_usS(1250);    //拉低750us
000014  f24040e2          MOV      r0,#0x4e2
000018  f7fffffe          BL       Delay_usS
;;;132        DS18B20_DQ_OUT_1; //DQ=1 
00001c  4621              MOV      r1,r4
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       GPIO_SetBits
;;;133        Delay_usS(38);     //15US
000024  e8bd4070          POP      {r4-r6,lr}
000028  2026              MOVS     r0,#0x26
00002a  f7ffbffe          B.W      Delay_usS
;;;134    }
;;;135    
                          ENDP

00002e  0000              DCW      0x0000
                  |L6.48|
                          DCD      0x40020400

                          AREA ||i.Ds18b20Start||, CODE, READONLY, ALIGN=1

                  Ds18b20Start PROC
;;;243    
;;;244    void Ds18b20Start(void)// ds1820 start convert
000000  b510              PUSH     {r4,lr}
;;;245    {   						               
;;;246        Ds18b20Rst();	   
000002  f7fffffe          BL       Ds18b20Rst
;;;247        Ds18b20Check();	 
000006  f7fffffe          BL       Ds18b20Check
;;;248        Ds18b20WriteByte(0xcc);// skip rom
00000a  20cc              MOVS     r0,#0xcc
00000c  f7fffffe          BL       Ds18b20WriteByte
;;;249        Ds18b20WriteByte(0x44);// convert
000010  e8bd4010          POP      {r4,lr}
000014  2044              MOVS     r0,#0x44
000016  f7ffbffe          B.W      Ds18b20WriteByte
;;;250    } 
;;;251    
                          ENDP


                          AREA ||i.Ds18b20WriteByte||, CODE, READONLY, ALIGN=2

                  Ds18b20WriteByte PROC
;;;216    //dat：要写入的字节
;;;217    void Ds18b20WriteByte(u8 dat)     
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;218    {             
000004  4605              MOV      r5,r0
;;;219        u8 j;
;;;220        u8 testb;
;;;221        DS18B20_OUT();//SET PA0 OUTPUT;
000006  f7fffffe          BL       DS18B20_OUT
;;;222        for (j=1;j<=8;j++) 
00000a  2401              MOVS     r4,#1
;;;223        {
;;;224            testb=dat&0x01;
;;;225            dat=dat>>1;
;;;226            if (testb) 
;;;227            {
;;;228                DS18B20_DQ_OUT_0;// Write 1
00000c  4f12              LDR      r7,|L8.88|
00000e  02a6              LSLS     r6,r4,#10
                  |L8.16|
000010  f0150f01          TST      r5,#1                 ;224
000014  ea4f0555          LSR      r5,r5,#1              ;225
;;;229                Delay_usS(5);                            
;;;230                DS18B20_DQ_OUT_1;
;;;231                Delay_usS(150);             
;;;232            }
;;;233            else 
;;;234            {
;;;235                DS18B20_DQ_OUT_0;// Write 0
000018  4631              MOV      r1,r6
00001a  4638              MOV      r0,r7
00001c  d00a              BEQ      |L8.52|
00001e  f7fffffe          BL       GPIO_ResetBits
000022  2005              MOVS     r0,#5                 ;229
000024  f7fffffe          BL       Delay_usS
000028  4631              MOV      r1,r6                 ;230
00002a  4638              MOV      r0,r7                 ;230
00002c  f7fffffe          BL       GPIO_SetBits
000030  2096              MOVS     r0,#0x96              ;231
000032  e009              B        |L8.72|
                  |L8.52|
000034  f7fffffe          BL       GPIO_ResetBits
;;;236                Delay_usS(150);             
000038  2096              MOVS     r0,#0x96
00003a  f7fffffe          BL       Delay_usS
;;;237                DS18B20_DQ_OUT_1;
00003e  4631              MOV      r1,r6
000040  4638              MOV      r0,r7
000042  f7fffffe          BL       GPIO_SetBits
;;;238                Delay_usS(5);                          
000046  2005              MOVS     r0,#5
                  |L8.72|
000048  f7fffffe          BL       Delay_usS
00004c  1c64              ADDS     r4,r4,#1
00004e  b2e4              UXTB     r4,r4                 ;222
000050  2c08              CMP      r4,#8                 ;222
000052  d9dd              BLS      |L8.16|
;;;239            }
;;;240        }
;;;241    }
000054  e8bd81f0          POP      {r4-r8,pc}
;;;242    
                          ENDP

                  |L8.88|
                          DCD      0x40020400

                          AREA ||i.JumpBoot||, CODE, READONLY, ALIGN=2

                  JumpBoot PROC
;;;295    
;;;296    void JumpBoot(u8 flag)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;297    {
;;;298      	void (*pUserApp)(void);
;;;299      uint32_t JumpAddress;
;;;300    	if(flag==55)
000004  2837              CMP      r0,#0x37
000006  d17d              BNE      |L9.260|
;;;301      {		
;;;302    	__asm("CPSID  I");
;;;303            
;;;304    		JumpAddress = *(volatile uint32_t*) (0x08000000+4);
000008  f04f6500          MOV      r5,#0x8000000
00000c  b672              CPSID    i                     ;302
00000e  686c              LDR      r4,[r5,#4]
;;;305    		pUserApp = (void (*)(void)) JumpAddress;
;;;306    		TIM_Cmd(TIM1, DISABLE);	
000010  4e5c              LDR      r6,|L9.388|
000012  2100              MOVS     r1,#0
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       TIM_Cmd
;;;307    		TIM_DeInit(TIM1);
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       TIM_DeInit
;;;308    		TIM_ITConfig(TIM1,TIM_IT_Update,DISABLE);
000020  2200              MOVS     r2,#0
000022  2101              MOVS     r1,#1
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       TIM_ITConfig
;;;309    		TIM_Cmd(TIM2, DISABLE);	
00002a  00ee              LSLS     r6,r5,#3
00002c  2100              MOVS     r1,#0
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       TIM_Cmd
;;;310    		TIM_DeInit(TIM2);
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       TIM_DeInit
;;;311    		TIM_ITConfig(TIM2,TIM_IT_Update,DISABLE);
00003a  2200              MOVS     r2,#0
00003c  2101              MOVS     r1,#1
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       TIM_ITConfig
;;;312    		TIM_Cmd(TIM3, DISABLE);	
000044  4e50              LDR      r6,|L9.392|
000046  2100              MOVS     r1,#0
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       TIM_Cmd
;;;313    		TIM_DeInit(TIM3);
00004e  4630              MOV      r0,r6
000050  f7fffffe          BL       TIM_DeInit
;;;314    		TIM_ITConfig(TIM3,TIM_IT_Update,DISABLE);
000054  2200              MOVS     r2,#0
000056  2101              MOVS     r1,#1
000058  4630              MOV      r0,r6
00005a  f7fffffe          BL       TIM_ITConfig
;;;315    		TIM_Cmd(TIM4,DISABLE);
00005e  4e4b              LDR      r6,|L9.396|
000060  2100              MOVS     r1,#0
000062  4630              MOV      r0,r6
000064  f7fffffe          BL       TIM_Cmd
;;;316    		TIM_DeInit(TIM4);
000068  4630              MOV      r0,r6
00006a  f7fffffe          BL       TIM_DeInit
;;;317    		TIM_ITConfig(TIM4,TIM_IT_Update,DISABLE);
00006e  2200              MOVS     r2,#0
000070  2101              MOVS     r1,#1
000072  4630              MOV      r0,r6
000074  f7fffffe          BL       TIM_ITConfig
;;;318    	    TIM_Cmd(TIM5,DISABLE);
000078  4e45              LDR      r6,|L9.400|
00007a  2100              MOVS     r1,#0
00007c  4630              MOV      r0,r6
00007e  f7fffffe          BL       TIM_Cmd
;;;319    		TIM_DeInit(TIM5);
000082  4630              MOV      r0,r6
000084  f7fffffe          BL       TIM_DeInit
;;;320    		TIM_ITConfig(TIM5,TIM_IT_Update,DISABLE);
000088  2200              MOVS     r2,#0
00008a  2101              MOVS     r1,#1
00008c  4630              MOV      r0,r6
00008e  f7fffffe          BL       TIM_ITConfig
;;;321    		TIM_Cmd(TIM6, DISABLE);	
000092  4e40              LDR      r6,|L9.404|
000094  2100              MOVS     r1,#0
000096  4630              MOV      r0,r6
000098  f7fffffe          BL       TIM_Cmd
;;;322    	    TIM_DeInit(TIM6);
00009c  4630              MOV      r0,r6
00009e  f7fffffe          BL       TIM_DeInit
;;;323    		TIM_ITConfig(TIM6,TIM_IT_Update,DISABLE);
0000a2  2200              MOVS     r2,#0
0000a4  2101              MOVS     r1,#1
0000a6  4630              MOV      r0,r6
0000a8  f7fffffe          BL       TIM_ITConfig
;;;324    		USART_DeInit(USART1);
0000ac  4e3a              LDR      r6,|L9.408|
0000ae  4630              MOV      r0,r6
0000b0  f7fffffe          BL       USART_DeInit
;;;325    		USART_ITConfig(USART1, USART_IT_RXNE, DISABLE);		
0000b4  f2405725          MOV      r7,#0x525
0000b8  2200              MOVS     r2,#0
0000ba  4639              MOV      r1,r7
0000bc  4630              MOV      r0,r6
0000be  f7fffffe          BL       USART_ITConfig
;;;326    		USART_Cmd(USART1,DISABLE);
0000c2  2100              MOVS     r1,#0
0000c4  4630              MOV      r0,r6
0000c6  f7fffffe          BL       USART_Cmd
;;;327    		USART_DeInit(USART2);
0000ca  4e34              LDR      r6,|L9.412|
0000cc  4630              MOV      r0,r6
0000ce  f7fffffe          BL       USART_DeInit
;;;328    		USART_ITConfig(USART2, USART_IT_RXNE, DISABLE);		
0000d2  2200              MOVS     r2,#0
0000d4  4639              MOV      r1,r7
0000d6  4630              MOV      r0,r6
0000d8  f7fffffe          BL       USART_ITConfig
;;;329    		USART_Cmd(USART2,DISABLE);
0000dc  2100              MOVS     r1,#0
0000de  4630              MOV      r0,r6
0000e0  f7fffffe          BL       USART_Cmd
;;;330    	    USART_DeInit(USART3);
0000e4  4e2e              LDR      r6,|L9.416|
0000e6  4630              MOV      r0,r6
0000e8  f7fffffe          BL       USART_DeInit
;;;331    		USART_ITConfig(USART3, USART_IT_RXNE, DISABLE);		
0000ec  2200              MOVS     r2,#0
0000ee  4639              MOV      r1,r7
0000f0  4630              MOV      r0,r6
0000f2  f7fffffe          BL       USART_ITConfig
;;;332    		USART_Cmd(USART3,DISABLE);
0000f6  2100              MOVS     r1,#0
0000f8  4630              MOV      r0,r6
0000fa  f7fffffe          BL       USART_Cmd
;;;333    		RCC_DeInit();
0000fe  f7fffffe          BL       RCC_DeInit
;;;334    		RCC_RTCCLKCmd(DISABLE);
000102  e000              B        |L9.262|
                  |L9.260|
000104  e03b              B        |L9.382|
                  |L9.262|
000106  2000              MOVS     r0,#0
000108  f7fffffe          BL       RCC_RTCCLKCmd
;;;335    		EXTI_DeInit();
00010c  f7fffffe          BL       EXTI_DeInit
;;;336    		SysTick->CTRL = 0;
000110  f04f20e0          MOV      r0,#0xe000e000
000114  2600              MOVS     r6,#0
000116  6106              STR      r6,[r0,#0x10]
;;;337    		RTC_DeInit();
000118  f7fffffe          BL       RTC_DeInit
;;;338    		RTC_ITConfig(RTC_IT_WUT,DISABLE);//关闭WAKE UP 定时器中断
00011c  2100              MOVS     r1,#0
00011e  1368              ASRS     r0,r5,#13
000120  f7fffffe          BL       RTC_ITConfig
;;;339    		RTC_WakeUpCmd( DISABLE);//关闭WAKE UP 定时器　
000124  2000              MOVS     r0,#0
000126  f7fffffe          BL       RTC_WakeUpCmd
;;;340    		__disable_irq();
00012a  b672              CPSID    i
;;;341    		NVIC_DisableIRQ(OTG_FS_IRQn);
00012c  2043              MOVS     r0,#0x43
00012e  f7fffffe          BL       NVIC_DisableIRQ
;;;342    		NVIC_DisableIRQ(OTG_FS_WKUP_IRQn);
000132  202a              MOVS     r0,#0x2a
000134  f7fffffe          BL       NVIC_DisableIRQ
;;;343    		NVIC_DisableIRQ(OTG_HS_IRQn);
000138  204d              MOVS     r0,#0x4d
00013a  f7fffffe          BL       NVIC_DisableIRQ
;;;344    		NVIC_DisableIRQ(OTG_HS_WKUP_IRQn);
00013e  204c              MOVS     r0,#0x4c
000140  f7fffffe          BL       NVIC_DisableIRQ
;;;345    		ADC_DeInit();
000144  f7fffffe          BL       ADC_DeInit
;;;346    		DMA_Cmd(DMA2_Stream0, DISABLE);
000148  4f16              LDR      r7,|L9.420|
00014a  2100              MOVS     r1,#0
00014c  4638              MOV      r0,r7
00014e  f7fffffe          BL       DMA_Cmd
;;;347    		DMA_ITConfig(DMA2_Stream0,DMA_IT_TC,DISABLE);
000152  2200              MOVS     r2,#0
000154  2110              MOVS     r1,#0x10
000156  4638              MOV      r0,r7
000158  f7fffffe          BL       DMA_ITConfig
;;;348    		ADC_DMACmd(ADC1, DISABLE);  //使能DMA
00015c  2100              MOVS     r1,#0
00015e  4812              LDR      r0,|L9.424|
000160  f7fffffe          BL       ADC_DMACmd
;;;349    		__ASM volatile ("cpsid i");
000164  b672              CPSID    i
;;;350    		/* Initialize user application's Stack Pointer */
;;;351    		__set_PSP(*(volatile uint32_t*) 0x08000000);
000166  6828              LDR      r0,[r5,#0]
000168  f3808809          MSR      PSP,r0
00016c  f3868814          MSR      CONTROL,r6
;;;352    		__set_CONTROL(0);
;;;353    		__set_MSP(*(volatile uint32_t*) 0x08000000);
000170  6828              LDR      r0,[r5,#0]
000172  f3808808          MSR      MSP,r0
;;;354    		
;;;355            
;;;356    		
;;;357    //		NVIC_SystemReset();
;;;358    		pUserApp();
000176  46a4              MOV      r12,r4
000178  e8bd41f0          POP      {r4-r8,lr}
00017c  4760              BX       r12
                  |L9.382|
;;;359    	}
;;;360    }
00017e  e8bd81f0          POP      {r4-r8,pc}
;;;361    
                          ENDP

000182  0000              DCW      0x0000
                  |L9.388|
                          DCD      0x40010000
                  |L9.392|
                          DCD      0x40000400
                  |L9.396|
                          DCD      0x40000800
                  |L9.400|
                          DCD      0x40000c00
                  |L9.404|
                          DCD      0x40001000
                  |L9.408|
                          DCD      0x40011000
                  |L9.412|
                          DCD      0x40004400
                  |L9.416|
                          DCD      0x40004800
                  |L9.420|
                          DCD      0x40026410
                  |L9.424|
                          DCD      0x40012000

                          AREA ||i.NVIC_DisableIRQ||, CODE, READONLY, ALIGN=1

                  NVIC_DisableIRQ PROC
;;;1479    */
;;;1480   __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
000000  f000021f          AND      r2,r0,#0x1f
;;;1481   {
;;;1482     NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  0940              LSRS     r0,r0,#5
00000a  0080              LSLS     r0,r0,#2
00000c  f10020e0          ADD      r0,r0,#0xe000e000
000010  f8c01180          STR      r1,[r0,#0x180]
;;;1483   }
000014  4770              BX       lr
;;;1484   
                          ENDP


                          AREA ||i.Off_GPOI_ResetSet||, CODE, READONLY, ALIGN=2

                  Off_GPOI_ResetSet PROC
;;;282    //关闭所有 -- 使用的
;;;283    void Off_GPOI_ResetSet(){
000000  b510              PUSH     {r4,lr}
;;;284    	
;;;285    	POWER_RECHARGE = 0;						
000002  4c06              LDR      r4,|L11.28|
000004  2000              MOVS     r0,#0
000006  7060              STRB     r0,[r4,#1]
;;;286    	C_DISCHARGE = 0;							
000008  70a0              STRB     r0,[r4,#2]
;;;287    	OnOff_GPOI_ResetSet( 0,	POWER_RECHARGE );
00000a  7861              LDRB     r1,[r4,#1]  ; POWER_RECHARGE
00000c  f7fffffe          BL       OnOff_GPOI_ResetSet
;;;288    	OnOff_GPOI_ResetSet( 2, C_DISCHARGE );
000010  78a1              LDRB     r1,[r4,#2]  ; C_DISCHARGE
000012  e8bd4010          POP      {r4,lr}
000016  2002              MOVS     r0,#2
000018  f7ffbffe          B.W      OnOff_GPOI_ResetSet
;;;289    }
;;;290    
                          ENDP

                  |L11.28|
                          DCD      ||area_number.25||

                          AREA ||i.OnOff_GPOI_ResetSet||, CODE, READONLY, ALIGN=2

                  OnOff_GPOI_ResetSet PROC
;;;64     //根据页面
;;;65     void OnOff_GPOI_ResetSet( vu8 _type, vu8 _value ){
000000  b403              PUSH     {r0,r1}
;;;66     	
;;;67     	switch( _type ){
000002  f89d0000          LDRB     r0,[sp,#0]
000006  2800              CMP      r0,#0                 ;65
000008  d019              BEQ      |L12.62|
00000a  2802              CMP      r0,#2
00000c  d117              BNE      |L12.62|
;;;68     		
;;;69     //		case 1024:   
;;;70     //			if( _value == 0 ){
;;;71     //					
;;;72     //				flag_Load_CC = 1;//CC模式
;;;73     //				GPIO_ResetBits(GPIOC,GPIO_Pin_12);   //CC		
;;;74     //			}
;;;75     //			else if( _value == 1 ){
;;;76     //					
;;;77     //				flag_Load_CC=0;//CV模式
;;;78     //				GPIO_SetBits(GPIOC,GPIO_Pin_12);   //CV
;;;79     //			}
;;;80     //		break;
;;;81     		
;;;82     		case 2:  //电子负载ON/OFF
;;;83     			if( _value == 0 ){
00000e  f89d3004          LDRB     r3,[sp,#4]
;;;84     				
;;;85     				Flag_Swtich_ON = 0;
000012  490c              LDR      r1,|L12.68|
;;;86     				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
000014  480c              LDR      r0,|L12.72|
000016  680a              LDR      r2,[r1,#0]            ;83
000018  b153              CBZ      r3,|L12.48|
;;;87     			}
;;;88     			else if( _value == 1 ){
00001a  f89d3004          LDRB     r3,[sp,#4]
00001e  2b01              CMP      r3,#1
000020  d10d              BNE      |L12.62|
;;;89     				
;;;90     				Flag_Swtich_ON = 1;
000022  f0420240          ORR      r2,r2,#0x40
;;;91     				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
000026  600a              STR      r2,[r1,#0]  ; flagA
000028  2180              MOVS     r1,#0x80
00002a  b002              ADD      sp,sp,#8
00002c  f7ffbffe          B.W      GPIO_ResetBits
                  |L12.48|
000030  f0220240          BIC      r2,r2,#0x40           ;85
000034  600a              STR      r2,[r1,#0]            ;86  ; flagA
000036  2180              MOVS     r1,#0x80              ;86
000038  b002              ADD      sp,sp,#8              ;86
00003a  f7ffbffe          B.W      GPIO_SetBits
                  |L12.62|
;;;92     			}
;;;93     		break;
;;;94     		
;;;95     		case 0:  //稳压电源ON/OFF
;;;96     		
;;;97     //			if( _value == 0 ){
;;;98     //				
;;;99     //				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出+
;;;100    //				Para.CSET_Voltage = 0;
;;;101    //				Para.CSET_Current = 0;
;;;102    //				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;103    //			}
;;;104    //			else if( _value == 1 ){
;;;105    //				
;;;106    //				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;107    //				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;108    //			}
;;;109    		break;
;;;110    		
;;;111    	}
;;;112    	
;;;113    }
00003e  b002              ADD      sp,sp,#8
000040  4770              BX       lr
;;;114    
                          ENDP

000042  0000              DCW      0x0000
                  |L12.68|
                          DCD      ||area_number.25||+0x8
                  |L12.72|
                          DCD      0x40020800

                          AREA ||i.PLimit||, CODE, READONLY, ALIGN=1

                  PLimit PROC
;;;290    
;;;291    void PLimit(void)
000000  4770              BX       lr
;;;292    {
;;;293    	
;;;294    }
;;;295    
                          ENDP


                          AREA ||i.SetPowerHandle||, CODE, READONLY, ALIGN=2

                  SetPowerHandle PROC
;;;361    
;;;362    void SetPowerHandle(void)
000000  b510              PUSH     {r4,lr}
;;;363    {
;;;364    	if(sendwait == 3)
000002  4c11              LDR      r4,|L14.72|
000004  7820              LDRB     r0,[r4,#0]  ; sendwait
000006  2803              CMP      r0,#3
000008  d101              BNE      |L14.14|
;;;365    	{
;;;366    		SetPowerModeS();
00000a  f7fffffe          BL       SetPowerModeS
                  |L14.14|
;;;367    	}
;;;368    	if(sendwait == 2)
00000e  7820              LDRB     r0,[r4,#0]  ; sendwait
000010  2802              CMP      r0,#2
000012  d101              BNE      |L14.24|
;;;369    	{
;;;370    		SetPowerModeC();
000014  f7fffffe          BL       SetPowerModeC
                  |L14.24|
;;;371    	}
;;;372    	if(sendwait == 1)
000018  7820              LDRB     r0,[r4,#0]  ; sendwait
00001a  2801              CMP      r0,#1
00001c  d101              BNE      |L14.34|
;;;373    	{
;;;374    		SetPowerModeV();
00001e  f7fffffe          BL       SetPowerModeV
                  |L14.34|
;;;375    	}
;;;376    	if(listsend == 3)
000022  4c0a              LDR      r4,|L14.76|
000024  7820              LDRB     r0,[r4,#0]  ; listsend
000026  2803              CMP      r0,#3
000028  d101              BNE      |L14.46|
;;;377    	{
;;;378    		SetListPS();
00002a  f7fffffe          BL       SetListPS
                  |L14.46|
;;;379    	}
;;;380    	if(listsend == 2)
00002e  7820              LDRB     r0,[r4,#0]  ; listsend
000030  2802              CMP      r0,#2
000032  d101              BNE      |L14.56|
;;;381    	{
;;;382    		SetListPC();
000034  f7fffffe          BL       SetListPC
                  |L14.56|
;;;383    	}
;;;384    	if(listsend == 1)
000038  7820              LDRB     r0,[r4,#0]  ; listsend
00003a  2801              CMP      r0,#1
00003c  d103              BNE      |L14.70|
;;;385    	{
;;;386    		SetListPV();
00003e  e8bd4010          POP      {r4,lr}
000042  f7ffbffe          B.W      SetListPV
                  |L14.70|
;;;387    	}
;;;388    }
000046  bd10              POP      {r4,pc}
;;;389    
                          ENDP

                  |L14.72|
                          DCD      sendwait
                  |L14.76|
                          DCD      listsend

                          AREA ||i.delay||, CODE, READONLY, ALIGN=1

                  delay PROC
;;;114    
;;;115    void delay(vu32 i)
000000  b501              PUSH     {r0,lr}
                  |L15.2|
;;;116    {
;;;117    	do
;;;118    	{
;;;119    	__NOP();				/*????,??????,??????,?????intrins.h?,????????????.h??*/
000002  bf00              NOP      
;;;120    	__NOP();
000004  bf00              NOP      
;;;121    	__NOP();
000006  bf00              NOP      
;;;122    	i--;
000008  9800              LDR      r0,[sp,#0]
00000a  1e40              SUBS     r0,r0,#1
;;;123    	}while(i*28);
00000c  9000              STR      r0,[sp,#0]
00000e  ebc000c0          RSB      r0,r0,r0,LSL #3
000012  0080              LSLS     r0,r0,#2
000014  d1f5              BNE      |L15.2|
;;;124    }
000016  bd08              POP      {r3,pc}
;;;125    
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;389    
;;;390    int main(void)
000000  f44f3100          MOV      r1,#0x20000
;;;391    {
;;;392    		u8 i;
;;;393    	 int t=0;
;;;394    	u8 ret;
;;;395    	u16 len;	
;;;396    	u8 datatemp[30];
;;;397    	u8 len1 =0;
;;;398    		
;;;399     	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x20000);
000004  0288              LSLS     r0,r1,#10
000006  f7fffffe          BL       NVIC_SetVectorTable
;;;400    	__enable_irq();
00000a  b662              CPSIE    i
;;;401    	
;;;402    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_CRC, ENABLE);//开启CRC时钟，STEMWIN授权使用
00000c  2101              MOVS     r1,#1
00000e  0308              LSLS     r0,r1,#12
000010  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;403    	RCC_Configuration();
000014  f7fffffe          BL       RCC_Configuration
;;;404    	SysTick_Init();
000018  f7fffffe          BL       SysTick_Init
;;;405    	GPIO_Conf();
00001c  f7fffffe          BL       GPIO_Conf
;;;406    
;;;407        abc_time = 0;
000020  485a              LDR      r0,|L16.396|
000022  f04f0800          MOV      r8,#0
000026  4644              MOV      r4,r8
000028  f8c08000          STR      r8,[r0,#0]  ; abc_time
;;;408        ms_time = 0;
00002c  4858              LDR      r0,|L16.400|
00002e  f8c08000          STR      r8,[r0,#0]  ; ms_time
;;;409    
;;;410    	TIM1_PWM_Config();
000032  f7fffffe          BL       TIM1_PWM_Config
;;;411    	TIM4_PWM_Config();
000036  f7fffffe          BL       TIM4_PWM_Config
;;;412    	TIM3_Int_Init(10-1,8400-1);
00003a  f24205cf          MOV      r5,#0x20cf
00003e  4629              MOV      r1,r5
000040  2009              MOVS     r0,#9
000042  f7fffffe          BL       TIM3_Int_Init
;;;413    //	TIM3_Int_Init(1,8400-1);
;;;414    	TIM5_Int_Init(90-1,8400-1);
000046  4629              MOV      r1,r5
000048  2059              MOVS     r0,#0x59
00004a  f7fffffe          BL       TIM5_Int_Init
;;;415    	TIM6_Config();
00004e  f7fffffe          BL       TIM6_Config
;;;416    	ADC1_DMA_Init();
000052  f7fffffe          BL       ADC1_DMA_Init
;;;417    	USART_Configuration();
000056  f7fffffe          BL       USART_Configuration
;;;418    	USART2_Configuration();
00005a  f7fffffe          BL       USART2_Configuration
;;;419    	USART3_Configuration();
00005e  f7fffffe          BL       USART3_Configuration
;;;420    	i2c_CfgGpio();//24C01引脚初始化
000062  f7fffffe          BL       i2c_CfgGpio
;;;421    	TM1650_GPIO_INT();		/*TM1650引脚初始化 */
000066  f7fffffe          BL       TM1650_GPIO_INT
;;;422    	AD5541_GPIOCoing();//DAC初始化
00006a  f7fffffe          BL       AD5541_GPIOCoing
;;;423    	AD7689_InitializeSPI1();//AD7689初始化
00006e  f7fffffe          BL       AD7689_InitializeSPI1
;;;424    //	LCD_Initializtion();//液晶屏初始化
;;;425    	//EEPROM_READ_Coeff();//读取校准参数
;;;426    	RCONT_SW = 0;
000072  4d48              LDR      r5,|L16.404|
000074  626c              STR      r4,[r5,#0x24]  ; Run_Control
;;;427    	Read_Flash_Bytes();
000076  f7fffffe          BL       Read_Flash_Bytes
;;;428    	Read_Boot_Flag();
00007a  f7fffffe          BL       Read_Boot_Flag
;;;429    	Off_GPOI_ResetSet();
00007e  f7fffffe          BL       Off_GPOI_ResetSet
;;;430    	LOAD_MODE = 0;//负载CC模式
000082  61ac              STR      r4,[r5,#0x18]  ; Run_Control
;;;431    	LOAD_V_SW = 0;
000084  61ec              STR      r4,[r5,#0x1c]  ; Run_Control
;;;432    	LOAD_I_SW = 0;
000086  622c              STR      r4,[r5,#0x20]  ; Run_Control
;;;433    	Flag_Swtich_ON = 0;
000088  f8dfa10c          LDR      r10,|L16.408|
;;;434    	flag_CC_MODE = 1;
00008c  f10a0008          ADD      r0,r10,#8
000090  f8da1000          LDR      r1,[r10,#0]           ;433  ; flagA
000094  f0210140          BIC      r1,r1,#0x40           ;433
000098  f8ca1000          STR      r1,[r10,#0]  ; flagA
00009c  6801              LDR      r1,[r0,#0]  ; flagE
00009e  f0410180          ORR      r1,r1,#0x80
;;;435    	Temperature = Ds18b20Init();
0000a2  6001              STR      r1,[r0,#0]  ; flagE
0000a4  f7fffffe          BL       Ds18b20Init
0000a8  f1aa0408          SUB      r4,r10,#8
;;;436    	while(1)
;;;437    	{
;;;438    		if(tempflag == 20)
;;;439    		{
;;;440    			tempflag = 0;
;;;441    			Temperature = Ds18b20GetTemp();
;;;442    		}else{
;;;443    			tempflag ++;
;;;444    		}
;;;445    		if(readpowflag > 200 && sendwait == 0 && listsend == 0/* && mainswitch == 1*/)
;;;446    		{
;;;447    			ReadPowData();
;;;448    			readpowflag = 0;
;;;449    		}
;;;450    		if(setpowflag > 100/* && sendwait == 0 && listsend == 0*//* && mainswitch == 1*/)
;;;451    		{
;;;452    			SetPowerHandle();
;;;453    			setpowflag = 0;
;;;454    		}
;;;455    //		PLimit();//功率限制保护
;;;456    		if(USART_RX_STA&0x8000)	   //判断是否接收完数据
;;;457    		{					   
;;;458    
;;;459    //			len1=USART_RX_STA&0x3f;
;;;460    			len1=USART_RX_CNT;
;;;461    			len = SerialRemoteHandleL(len1,USART_RX_BUF);
;;;462    			len1 =0;
;;;463    			for(t=0;t<len;t++)								  //通过长度进行循环
;;;464    			{
;;;465    				USART_SendData(USART2, USART_RX_BUF[t]);      //将数组采集好的数据 一次向串口1发送
0000ac  f8df90ec          LDR      r9,|L16.412|
0000b0  4f3b              LDR      r7,|L16.416|
0000b2  80e0              STRH     r0,[r4,#6]            ;435
                  |L16.180|
0000b4  7920              LDRB     r0,[r4,#4]            ;438  ; tempflag
0000b6  2814              CMP      r0,#0x14              ;438
0000b8  d008              BEQ      |L16.204|
0000ba  1c40              ADDS     r0,r0,#1              ;438
0000bc  7120              STRB     r0,[r4,#4]            ;443
                  |L16.190|
0000be  6960              LDR      r0,[r4,#0x14]         ;445  ; readpowflag
0000c0  28c8              CMP      r0,#0xc8              ;445
0000c2  d910              BLS      |L16.230|
0000c4  4837              LDR      r0,|L16.420|
0000c6  7800              LDRB     r0,[r0,#0]            ;445  ; sendwait
0000c8  b130              CBZ      r0,|L16.216|
0000ca  e00c              B        |L16.230|
                  |L16.204|
0000cc  f8848004          STRB     r8,[r4,#4]            ;440
0000d0  f7fffffe          BL       Ds18b20GetTemp
0000d4  80e0              STRH     r0,[r4,#6]            ;441
0000d6  e7f2              B        |L16.190|
                  |L16.216|
0000d8  4833              LDR      r0,|L16.424|
0000da  7800              LDRB     r0,[r0,#0]            ;445  ; listsend
0000dc  b918              CBNZ     r0,|L16.230|
0000de  f7fffffe          BL       ReadPowData
0000e2  f8c48014          STR      r8,[r4,#0x14]         ;448  ; readpowflag
                  |L16.230|
0000e6  69a0              LDR      r0,[r4,#0x18]         ;450  ; setpowflag
0000e8  2864              CMP      r0,#0x64              ;450
0000ea  d903              BLS      |L16.244|
0000ec  f7fffffe          BL       SetPowerHandle
0000f0  f8c48018          STR      r8,[r4,#0x18]         ;453  ; setpowflag
                  |L16.244|
0000f4  8838              LDRH     r0,[r7,#0]            ;456  ; USART_RX_STA
0000f6  0400              LSLS     r0,r0,#16             ;456
0000f8  d51e              BPL      |L16.312|
0000fa  482c              LDR      r0,|L16.428|
0000fc  492c              LDR      r1,|L16.432|
0000fe  7800              LDRB     r0,[r0,#0]            ;460  ; USART_RX_CNT
000100  f7fffffe          BL       SerialRemoteHandleL
000104  4606              MOV      r6,r0                 ;461
000106  2500              MOVS     r5,#0                 ;463
000108  f8dfb0a4          LDR      r11,|L16.432|
00010c  e00c              B        |L16.296|
00010e  bf00              NOP      
                  |L16.272|
000110  f81b1005          LDRB     r1,[r11,r5]
000114  4648              MOV      r0,r9
000116  f7fffffe          BL       USART_SendData
                  |L16.282|
;;;466    				while(USART_GetFlagStatus(USART2,USART_FLAG_TC)!=SET);//等待发送结束
00011a  2140              MOVS     r1,#0x40
00011c  4648              MOV      r0,r9
00011e  f7fffffe          BL       USART_GetFlagStatus
000122  2801              CMP      r0,#1
000124  d1f9              BNE      |L16.282|
000126  1c6d              ADDS     r5,r5,#1
                  |L16.296|
000128  42b5              CMP      r5,r6                 ;463
00012a  dbf1              BLT      |L16.272|
;;;467    			}
;;;468    			memset(USART_RX_BUF,0,USART_REC_LEN);
00012c  21c8              MOVS     r1,#0xc8
00012e  4820              LDR      r0,|L16.432|
000130  f7fffffe          BL       __aeabi_memclr
;;;469    			
;;;470    			USART_RX_STA=0;			  //清零 虚拟寄存器		  为一下次采集做准备
000134  f8a78000          STRH     r8,[r7,#0]
                  |L16.312|
;;;471    		}
;;;472    		if(jumpflag == 1)
000138  7820              LDRB     r0,[r4,#0]  ; jumpflag
00013a  2801              CMP      r0,#1
00013c  d102              BNE      |L16.324|
;;;473    		{
;;;474    			JumpBoot(55);
00013e  2037              MOVS     r0,#0x37
000140  f7fffffe          BL       JumpBoot
                  |L16.324|
;;;475    		}
;;;476    		if(USART3_Recive_flg == 1)
000144  481b              LDR      r0,|L16.436|
000146  7800              LDRB     r0,[r0,#0]  ; USART3_Recive_flg
000148  2801              CMP      r0,#1
00014a  d101              BNE      |L16.336|
;;;477    		{
;;;478    			USART3HANDLE();
00014c  f7fffffe          BL       USART3HANDLE
                  |L16.336|
;;;479    		}
;;;480    //		TIM_SetCompare3(TIM4,Contr_Voltage);//稳压电源电流DAC
;;;481    //		TIM_SetCompare4(TIM4,Contr_Current);//稳压电源电压DAC
;;;482    		AD5541_Send(Contr_Laod);//加载DAC值
000150  4819              LDR      r0,|L16.440|
000152  8800              LDRH     r0,[r0,#0]  ; Contr_Laod
000154  f7fffffe          BL       AD5541_Send
;;;483    		MODE_CONT();//电压电流档位切换
000158  f7fffffe          BL       MODE_CONT
;;;484    		if(Flag_DAC_OFF==0 && calflag == 0)
00015c  480e              LDR      r0,|L16.408|
00015e  1d00              ADDS     r0,r0,#4
000160  7800              LDRB     r0,[r0,#0]  ; flagB
000162  0700              LSLS     r0,r0,#28
000164  d403              BMI      |L16.366|
000166  78e0              LDRB     r0,[r4,#3]  ; calflag
000168  b908              CBNZ     r0,|L16.366|
;;;485    		{
;;;486    			Transformation_ADC();
00016a  f7fffffe          BL       Transformation_ADC
                  |L16.366|
;;;487    		}
;;;488    		if(Flag_ADC_Full==1)
00016e  f8da1000          LDR      r1,[r10,#0]  ; flagA
000172  078a              LSLS     r2,r1,#30
000174  d505              BPL      |L16.386|
;;;489    		{
;;;490    			Flag_ADC_Full=0;
000176  f0210102          BIC      r1,r1,#2
;;;491    			ADC_CH_Scan();//ADC滤波
00017a  f8ca1000          STR      r1,[r10,#0]  ; flagA
00017e  f7fffffe          BL       ADC_CH_Scan
                  |L16.386|
;;;492    		}
;;;493    		AD7689_Scan_CH();//读取AD7689各通道AD值
000182  f7fffffe          BL       AD7689_Scan_CH
;;;494    		Temp_Comapre();//风扇控制
000186  f7fffffe          BL       Temp_Comapre
00018a  e793              B        |L16.180|
;;;495    	}
;;;496    	//IWDG_Inte();
;;;497    //	MainTask();
;;;498    }
;;;499    
                          ENDP

                  |L16.396|
                          DCD      abc_time
                  |L16.400|
                          DCD      ms_time
                  |L16.404|
                          DCD      Run_Control
                  |L16.408|
                          DCD      ||area_number.25||+0x8
                  |L16.412|
                          DCD      0x40004400
                  |L16.416|
                          DCD      USART_RX_STA
                  |L16.420|
                          DCD      sendwait
                  |L16.424|
                          DCD      listsend
                  |L16.428|
                          DCD      USART_RX_CNT
                  |L16.432|
                          DCD      USART_RX_BUF
                  |L16.436|
                          DCD      USART3_Recive_flg
                  |L16.440|
                          DCD      Contr_Laod

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  CLists
                          %        144

                          AREA ||area_number.19||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.bss||
                  CalPara
                          %        184

                          AREA ||area_number.20||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.bss||
                  Para
                          %        176

                          AREA ||.data||, DATA, ALIGN=0

                  trig_flag_state
000000  00                DCB      0x00

                          AREA ||area_number.23||, DATA, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.data||
                  max_discahrgeNum
000000  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.24||, DATA, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.data||
                  old_I
000000  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.25||, DATA, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.data||
                  jumpflag
000000  00                DCB      0x00
                  POWER_RECHARGE
000001  00                DCB      0x00
                  C_DISCHARGE
000002  00                DCB      0x00
                  calflag
000003  00                DCB      0x00
                  tempflag
000004  0000              DCB      0x00,0x00
                  Temperature
000006  0000              DCW      0x0000
                  flagA
                          DCD      0x00000000
                  flagB
                          DCD      0x00000000
                  flagE
                          DCD      0x00000000
                  readpowflag
                          DCD      0x00000000
                  setpowflag
                          DCD      0x00000000

                          AREA ||area_number.26||, DATA, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.data||
                  flagC
                          DCD      0x00000000

                          AREA ||area_number.27||, DATA, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.data||
                  flagD
                          DCD      0x00000000

                          AREA ||area_number.28||, DATA, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.data||
                  flagF
                          DCD      0x00000000

                          AREA ||area_number.29||, DATA, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.data||
                  flagG
                          DCD      0x00000000

                          AREA ||area_number.30||, DATA, ALIGN=0

                          EXPORTAS ||area_number.30||, ||.data||
                  bootflag
000000  00                DCB      0x00

                          AREA ||area_number.31||, DATA, ALIGN=2

                          EXPORTAS ||area_number.31||, ||.data||
                  DISS_Voltage
                          DCD      0x00000000

                          AREA ||area_number.32||, DATA, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.data||
                  DISS_POW_Voltage
                          DCD      0x00000000

                          AREA ||area_number.33||, DATA, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.data||
                  DISS_Current
                          DCD      0x00000000

                          AREA ||area_number.34||, DATA, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.data||
                  DISS_POW_Current
                          DCD      0x00000000

                          AREA ||area_number.35||, DATA, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.data||
                  DISS_R
                          DCD      0x00000000

                          AREA ||area_number.36||, DATA, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.data||
                  CDC_CsumMah
                          DCD      0x00000000

                          AREA ||area_number.37||, DATA, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.data||
                  CDC_DCsumMah
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\User\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_c28ffc1e____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_c28ffc1e____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_c28ffc1e____REVSH|
#line 144
|__asm___6_main_c_c28ffc1e____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
