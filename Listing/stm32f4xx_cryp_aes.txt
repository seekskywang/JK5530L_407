; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\stm32f4xx_cryp_aes.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\stm32f4xx_cryp_aes.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=537 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\stm32f4xx_cryp_aes.crf --no_multibyte_chars ..\Libraries\FWlib\src\stm32f4xx_cryp_aes.c]
                          THUMB

                          AREA ||i.CRYP_AES_CBC||, CODE, READONLY, ALIGN=2

                  CRYP_AES_CBC PROC
;;;293      */
;;;294    ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;295                             uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
;;;296                             uint8_t *Output)
;;;297    {
000004  b093              SUB      sp,sp,#0x4c
;;;298      CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;299      CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;300      CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
;;;301      __IO uint32_t counter = 0;
000006  2700              MOVS     r7,#0
000008  e9dda021          LDRD     r10,r0,[sp,#0x84]     ;297
00000c  f8dd8080          LDR      r8,[sp,#0x80]
;;;302      uint32_t busystatus = 0;
;;;303      ErrorStatus status = SUCCESS;
;;;304      uint32_t keyaddr    = (uint32_t)Key;
;;;305      uint32_t inputaddr  = (uint32_t)Input;
;;;306      uint32_t outputaddr = (uint32_t)Output;
000010  4681              MOV      r9,r0
000012  469b              MOV      r11,r3                ;297
000014  460d              MOV      r5,r1                 ;297
000016  2601              MOVS     r6,#1                 ;303
000018  4614              MOV      r4,r2                 ;304
;;;307      uint32_t ivaddr = (uint32_t)InitVectors;
;;;308      uint32_t i = 0;
;;;309    
;;;310      /* Crypto structures initialisation*/
;;;311      CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
00001a  a803              ADD      r0,sp,#0xc
00001c  9702              STR      r7,[sp,#8]
00001e  f7fffffe          BL       CRYP_KeyStructInit
;;;312    
;;;313      switch(Keysize)
000022  4658              MOV      r0,r11
000024  f1bb0f80          CMP      r11,#0x80
000028  d01d              BEQ      |L1.102|
00002a  0231              LSLS     r1,r6,#8
00002c  28c0              CMP      r0,#0xc0
00002e  d026              BEQ      |L1.126|
000030  458b              CMP      r11,r1
000032  d137              BNE      |L1.164|
;;;314      {
;;;315        case 128:
;;;316        AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
;;;317        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;318        keyaddr+=4;
;;;319        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;320        keyaddr+=4;
;;;321        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;322        keyaddr+=4;
;;;323        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;324        break;
;;;325        case 192:
;;;326        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
;;;327        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
;;;328        keyaddr+=4;
;;;329        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
;;;330        keyaddr+=4;
;;;331        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;332        keyaddr+=4;
;;;333        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;334        keyaddr+=4;
;;;335        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;336        keyaddr+=4;
;;;337        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;338        break;
;;;339        case 256:
;;;340        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
000034  0048              LSLS     r0,r1,#1
;;;341        AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
000036  900e              STR      r0,[sp,#0x38]
000038  6820              LDR      r0,[r4,#0]
00003a  ba00              REV      r0,r0
;;;342        keyaddr+=4;
;;;343        AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
00003c  9003              STR      r0,[sp,#0xc]
00003e  6860              LDR      r0,[r4,#4]
000040  ba00              REV      r0,r0
;;;344        keyaddr+=4;
;;;345        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000042  9004              STR      r0,[sp,#0x10]
000044  68a0              LDR      r0,[r4,#8]
000046  ba00              REV      r0,r0
;;;346        keyaddr+=4;
;;;347        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000048  9005              STR      r0,[sp,#0x14]
00004a  68e0              LDR      r0,[r4,#0xc]
00004c  ba00              REV      r0,r0
;;;348        keyaddr+=4;
;;;349        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
00004e  9006              STR      r0,[sp,#0x18]
000050  6920              LDR      r0,[r4,#0x10]
000052  ba00              REV      r0,r0
;;;350        keyaddr+=4;
;;;351        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000054  9007              STR      r0,[sp,#0x1c]
000056  6960              LDR      r0,[r4,#0x14]
000058  ba00              REV      r0,r0
;;;352        keyaddr+=4;
;;;353        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
00005a  9008              STR      r0,[sp,#0x20]
00005c  69a0              LDR      r0,[r4,#0x18]
00005e  ba00              REV      r0,r0
;;;354        keyaddr+=4;
;;;355        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000060  9009              STR      r0,[sp,#0x24]
;;;356        break;
000062  69e0              LDR      r0,[r4,#0x1c]
000064  e01c              B        |L1.160|
                  |L1.102|
000066  970e              STR      r7,[sp,#0x38]         ;317
000068  6820              LDR      r0,[r4,#0]            ;317
00006a  ba00              REV      r0,r0                 ;317
00006c  9007              STR      r0,[sp,#0x1c]         ;319
00006e  6860              LDR      r0,[r4,#4]            ;319
000070  ba00              REV      r0,r0                 ;319
000072  9008              STR      r0,[sp,#0x20]         ;321
000074  68a0              LDR      r0,[r4,#8]            ;321
000076  ba00              REV      r0,r0                 ;321
000078  9009              STR      r0,[sp,#0x24]         ;323
00007a  68e0              LDR      r0,[r4,#0xc]          ;324
00007c  e010              B        |L1.160|
                  |L1.126|
00007e  910e              STR      r1,[sp,#0x38]         ;327
000080  6820              LDR      r0,[r4,#0]            ;327
000082  ba00              REV      r0,r0                 ;327
000084  9005              STR      r0,[sp,#0x14]         ;329
000086  6860              LDR      r0,[r4,#4]            ;329
000088  ba00              REV      r0,r0                 ;329
00008a  9006              STR      r0,[sp,#0x18]         ;331
00008c  68a0              LDR      r0,[r4,#8]            ;331
00008e  ba00              REV      r0,r0                 ;331
000090  9007              STR      r0,[sp,#0x1c]         ;333
000092  68e0              LDR      r0,[r4,#0xc]          ;333
000094  ba00              REV      r0,r0                 ;333
000096  9008              STR      r0,[sp,#0x20]         ;335
000098  6920              LDR      r0,[r4,#0x10]         ;335
00009a  ba00              REV      r0,r0                 ;335
00009c  9009              STR      r0,[sp,#0x24]         ;337
00009e  6960              LDR      r0,[r4,#0x14]         ;337
                  |L1.160|
0000a0  ba00              REV      r0,r0                 ;323
0000a2  900a              STR      r0,[sp,#0x28]         ;323
                  |L1.164|
;;;357        default:
;;;358        break;
;;;359      }
;;;360    
;;;361      /* CRYP Initialization Vectors */
;;;362      AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
0000a4  6828              LDR      r0,[r5,#0]
0000a6  ba00              REV      r0,r0
;;;363      ivaddr+=4;
;;;364      AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
0000a8  900f              STR      r0,[sp,#0x3c]
0000aa  6868              LDR      r0,[r5,#4]
0000ac  ba00              REV      r0,r0
;;;365      ivaddr+=4;
;;;366      AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
0000ae  9010              STR      r0,[sp,#0x40]
0000b0  68a8              LDR      r0,[r5,#8]
0000b2  ba00              REV      r0,r0
;;;367      ivaddr+=4;
;;;368      AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
0000b4  9011              STR      r0,[sp,#0x44]
0000b6  68e8              LDR      r0,[r5,#0xc]
;;;369    
;;;370    
;;;371      /*------------------ AES Decryption ------------------*/
;;;372      if(Mode == MODE_DECRYPT) /* AES decryption */
;;;373      {
;;;374        /* Flush IN/OUT FIFOs */
;;;375        CRYP_FIFOFlush();
;;;376    
;;;377        /* Crypto Init for Key preparation for decryption process */
;;;378        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
;;;379        AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
;;;380        AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
;;;381    
;;;382        CRYP_Init(&AES_CRYP_InitStructure);
;;;383    
;;;384        /* Key Initialisation */
;;;385        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
;;;386    
;;;387        /* Enable Crypto processor */
;;;388        CRYP_Cmd(ENABLE);
;;;389    
;;;390        /* wait until the Busy flag is RESET */
;;;391        do
;;;392        {
;;;393          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;394          counter++;
;;;395        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
0000b8  f44f3580          MOV      r5,#0x10000
0000bc  ba00              REV      r0,r0                 ;368
0000be  9012              STR      r0,[sp,#0x48]         ;372
0000c0  9813              LDR      r0,[sp,#0x4c]         ;372
0000c2  b1c0              CBZ      r0,|L1.246|
;;;396    
;;;397        if (busystatus != RESET)
;;;398       {
;;;399           status = ERROR;
;;;400        }
;;;401        else
;;;402        {
;;;403          /* Crypto Init for decryption process */  
;;;404          AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
;;;405        }
;;;406      }
;;;407      /*------------------ AES Encryption ------------------*/
;;;408      else /* AES encryption */
;;;409      {
;;;410        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
0000c4  a803              ADD      r0,sp,#0xc
0000c6  f7fffffe          BL       CRYP_KeyInit
;;;411    
;;;412        /* Crypto Init for Encryption process */
;;;413        AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
0000ca  970b              STR      r7,[sp,#0x2c]
                  |L1.204|
;;;414      }
;;;415      AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
0000cc  2028              MOVS     r0,#0x28
;;;416      AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
0000ce  900c              STR      r0,[sp,#0x30]
0000d0  2080              MOVS     r0,#0x80
;;;417      CRYP_Init(&AES_CRYP_InitStructure);
0000d2  900d              STR      r0,[sp,#0x34]
0000d4  a80b              ADD      r0,sp,#0x2c
0000d6  f7fffffe          BL       CRYP_Init
;;;418    
;;;419      /* CRYP Initialization Vectors */
;;;420      CRYP_IVInit(&AES_CRYP_IVInitStructure);
0000da  a80f              ADD      r0,sp,#0x3c
0000dc  f7fffffe          BL       CRYP_IVInit
;;;421    
;;;422      /* Flush IN/OUT FIFOs */
;;;423      CRYP_FIFOFlush();
0000e0  f7fffffe          BL       CRYP_FIFOFlush
;;;424    
;;;425      /* Enable Crypto processor */
;;;426      CRYP_Cmd(ENABLE);
0000e4  2001              MOVS     r0,#1
0000e6  f7fffffe          BL       CRYP_Cmd
;;;427    
;;;428      if(CRYP_GetCmdStatus() == DISABLE)
0000ea  f7fffffe          BL       CRYP_GetCmdStatus
0000ee  2800              CMP      r0,#0
0000f0  d05c              BEQ      |L1.428|
;;;429      {
;;;430        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;431           the CRYP peripheral (please check the device sales type. */
;;;432        return(ERROR);
;;;433      }
;;;434      
;;;435      for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
0000f2  2400              MOVS     r4,#0
0000f4  e052              B        |L1.412|
                  |L1.246|
0000f6  f7fffffe          BL       CRYP_FIFOFlush
0000fa  2404              MOVS     r4,#4                 ;378
0000fc  2038              MOVS     r0,#0x38              ;379
0000fe  970d              STR      r7,[sp,#0x34]         ;380
000100  e9cd400b          STRD     r4,r0,[sp,#0x2c]      ;380
000104  a80b              ADD      r0,sp,#0x2c           ;382
000106  f7fffffe          BL       CRYP_Init
00010a  a803              ADD      r0,sp,#0xc            ;385
00010c  f7fffffe          BL       CRYP_KeyInit
000110  2001              MOVS     r0,#1                 ;388
000112  f7fffffe          BL       CRYP_Cmd
                  |L1.278|
000116  2010              MOVS     r0,#0x10              ;393
000118  f7fffffe          BL       CRYP_GetFlagStatus
00011c  9902              LDR      r1,[sp,#8]            ;394
00011e  1c49              ADDS     r1,r1,#1              ;394
000120  9102              STR      r1,[sp,#8]            ;395
000122  42a9              CMP      r1,r5                 ;395
000124  d002              BEQ      |L1.300|
000126  2800              CMP      r0,#0                 ;395
000128  d1f5              BNE      |L1.278|
00012a  e002              B        |L1.306|
                  |L1.300|
00012c  b108              CBZ      r0,|L1.306|
00012e  2600              MOVS     r6,#0                 ;399
000130  e7cc              B        |L1.204|
                  |L1.306|
000132  940b              STR      r4,[sp,#0x2c]         ;404
000134  e7ca              B        |L1.204|
;;;436      {
;;;437    
;;;438        /* Write the Input block in the IN FIFO */
;;;439        CRYP_DataIn(*(uint32_t*)(inputaddr));
000136  bf00              NOP      
                  |L1.312|
000138  f8d80000          LDR      r0,[r8,#0]
00013c  f7fffffe          BL       CRYP_DataIn
;;;440        inputaddr+=4;
;;;441        CRYP_DataIn(*(uint32_t*)(inputaddr));
000140  f8580f04          LDR      r0,[r8,#4]!
000144  f7fffffe          BL       CRYP_DataIn
;;;442        inputaddr+=4;
;;;443        CRYP_DataIn(*(uint32_t*)(inputaddr));
000148  f8580f04          LDR      r0,[r8,#4]!
00014c  f7fffffe          BL       CRYP_DataIn
;;;444        inputaddr+=4;
;;;445        CRYP_DataIn(*(uint32_t*)(inputaddr));
000150  f8580f04          LDR      r0,[r8,#4]!
000154  f7fffffe          BL       CRYP_DataIn
;;;446        inputaddr+=4;
000158  f1080804          ADD      r8,r8,#4
;;;447        /* Wait until the complete message has been processed */
;;;448        counter = 0;
00015c  9702              STR      r7,[sp,#8]
                  |L1.350|
;;;449        do
;;;450        {
;;;451          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
00015e  2010              MOVS     r0,#0x10
000160  f7fffffe          BL       CRYP_GetFlagStatus
;;;452          counter++;
000164  9902              LDR      r1,[sp,#8]
000166  1c49              ADDS     r1,r1,#1
;;;453        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
000168  9102              STR      r1,[sp,#8]
00016a  42a9              CMP      r1,r5
00016c  d002              BEQ      |L1.372|
00016e  2800              CMP      r0,#0
000170  d1f5              BNE      |L1.350|
000172  e002              B        |L1.378|
                  |L1.372|
;;;454    
;;;455        if (busystatus != RESET)
000174  b108              CBZ      r0,|L1.378|
;;;456       {
;;;457           status = ERROR;
000176  2600              MOVS     r6,#0
000178  e00f              B        |L1.410|
                  |L1.378|
;;;458        }
;;;459        else
;;;460        {
;;;461    
;;;462          /* Read the Output block from the Output FIFO */
;;;463          *(uint32_t*)(outputaddr) = CRYP_DataOut();
00017a  f7fffffe          BL       CRYP_DataOut
00017e  f8490b04          STR      r0,[r9],#4
;;;464          outputaddr+=4;
;;;465          *(uint32_t*)(outputaddr) = CRYP_DataOut();
000182  f7fffffe          BL       CRYP_DataOut
000186  f8490b04          STR      r0,[r9],#4
;;;466          outputaddr+=4;
;;;467          *(uint32_t*)(outputaddr) = CRYP_DataOut();
00018a  f7fffffe          BL       CRYP_DataOut
00018e  f8490b04          STR      r0,[r9],#4
;;;468          outputaddr+=4;
;;;469          *(uint32_t*)(outputaddr) = CRYP_DataOut();
000192  f7fffffe          BL       CRYP_DataOut
000196  f8490b04          STR      r0,[r9],#4
                  |L1.410|
00019a  3410              ADDS     r4,r4,#0x10
                  |L1.412|
00019c  4554              CMP      r4,r10                ;435
00019e  d201              BCS      |L1.420|
0001a0  2e00              CMP      r6,#0                 ;435
0001a2  d1c9              BNE      |L1.312|
                  |L1.420|
;;;470          outputaddr+=4;
;;;471        }
;;;472      }
;;;473    
;;;474      /* Disable Crypto */
;;;475      CRYP_Cmd(DISABLE);
0001a4  2000              MOVS     r0,#0
0001a6  f7fffffe          BL       CRYP_Cmd
;;;476    
;;;477      return status;
0001aa  4630              MOV      r0,r6
                  |L1.428|
;;;478    }
0001ac  b017              ADD      sp,sp,#0x5c
0001ae  e8bd8ff0          POP      {r4-r11,pc}
;;;479    
                          ENDP


                          AREA ||i.CRYP_AES_CCM||, CODE, READONLY, ALIGN=2

                  CRYP_AES_CCM PROC
;;;1134     */
;;;1135   ErrorStatus CRYP_AES_CCM(uint8_t Mode, 
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;1136                            uint8_t* Nonce, uint32_t NonceSize,
;;;1137                            uint8_t *Key, uint16_t Keysize,
;;;1138                            uint8_t *Input, uint32_t ILength,
;;;1139                            uint8_t *Header, uint32_t HLength, uint8_t *HBuffer,
;;;1140                            uint8_t *Output,
;;;1141                            uint8_t *AuthTAG, uint32_t TAGSize)
;;;1142   {
000004  b0a7              SUB      sp,sp,#0x9c
;;;1143     CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;1144     CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;1145     CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
;;;1146     __IO uint32_t counter = 0;
000006  f04f0e00          MOV      lr,#0
00000a  e9dd6038          LDRD     r6,r0,[sp,#0xe0]      ;1142
00000e  e9dd7536          LDRD     r7,r5,[sp,#0xd8]      ;1142
;;;1147     uint32_t busystatus = 0;
;;;1148     ErrorStatus status = SUCCESS;
;;;1149     uint32_t keyaddr    = (uint32_t)Key;
000012  461c              MOV      r4,r3
;;;1150     uint32_t inputaddr  = (uint32_t)Input;
;;;1151     uint32_t outputaddr = (uint32_t)Output;
;;;1152     uint32_t headeraddr = (uint32_t)Header;
;;;1153     uint32_t tagaddr = (uint32_t)AuthTAG;
000014  9b3b              LDR      r3,[sp,#0xec]
000016  f8cde004          STR      lr,[sp,#4]
00001a  f8ddb0f0          LDR      r11,[sp,#0xf0]        ;1146
;;;1154     uint32_t headersize = HLength;
;;;1155     uint32_t loopcounter = 0;
00001e  9302              STR      r3,[sp,#8]
;;;1156     uint32_t bufferidx = 0;
;;;1157     uint8_t blockb0[16] = {0};/* Block B0 */
000020  f8cde018          STR      lr,[sp,#0x18]
000024  f8dda0e8          LDR      r10,[sp,#0xe8]        ;1146
000028  f8dd80d4          LDR      r8,[sp,#0xd4]         ;1146
00002c  f8cde010          STR      lr,[sp,#0x10]
000030  f8cde014          STR      lr,[sp,#0x14]
;;;1158     uint8_t ctr[16] = {0}; /* Counter */
;;;1159     uint32_t temptag[4] = {0}; /* temporary TAG (MAC) */
000034  f8cde02c          STR      lr,[sp,#0x2c]
000038  4671              MOV      r1,lr                 ;1146
00003a  f8cde01c          STR      lr,[sp,#0x1c]         ;1158
00003e  f8cde020          STR      lr,[sp,#0x20]         ;1158
000042  f8cde024          STR      lr,[sp,#0x24]         ;1158
000046  f8cde028          STR      lr,[sp,#0x28]         ;1158
00004a  f8cde068          STR      lr,[sp,#0x68]
00004e  e9cde11b          STRD     lr,r1,[sp,#0x6c]
;;;1160     uint32_t ctraddr = (uint32_t)ctr;
000052  911d              STR      r1,[sp,#0x74]
000054  a908              ADD      r1,sp,#0x20
000056  f04f0901          MOV      r9,#1                 ;1148
00005a  4673              MOV      r3,lr                 ;1155
00005c  9110              STR      r1,[sp,#0x40]         ;1142
00005e  b3a6              CBZ      r6,|L2.202|
;;;1161     uint32_t b0addr = (uint32_t)blockb0;
;;;1162     
;;;1163     /************************ Formatting the header block ***********************/
;;;1164     if(headersize != 0)
;;;1165     {
;;;1166       /* Check that the associated data (or header) length is lower than 2^16 - 2^8 = 65536 - 256 = 65280 */
;;;1167       if(headersize < 65280)
;;;1168       {
;;;1169         HBuffer[bufferidx++] = (uint8_t) ((headersize >> 8) & 0xFF);
;;;1170         HBuffer[bufferidx++] = (uint8_t) ((headersize) & 0xFF);
000060  f0060cff          AND      r12,r6,#0xff
000064  f5b64f7f          CMP      r6,#0xff00            ;1167
000068  d206              BCS      |L2.120|
00006a  0a31              LSRS     r1,r6,#8              ;1169
00006c  7001              STRB     r1,[r0,#0]            ;1169
00006e  2102              MOVS     r1,#2
000070  f880c001          STRB     r12,[r0,#1]
000074  1cb6              ADDS     r6,r6,#2
;;;1171         headersize += 2;
000076  e015              B        |L2.164|
                  |L2.120|
;;;1172       }
;;;1173       else
;;;1174       {
;;;1175         /* header is encoded as 0xff || 0xfe || [headersize]32, i.e., six octets */
;;;1176         HBuffer[bufferidx++] = 0xFF;
000078  21ff              MOVS     r1,#0xff
00007a  7001              STRB     r1,[r0,#0]
;;;1177         HBuffer[bufferidx++] = 0xFE;
00007c  21fe              MOVS     r1,#0xfe
00007e  7041              STRB     r1,[r0,#1]
;;;1178         HBuffer[bufferidx++] = headersize & 0xff000000;
000080  f880e002          STRB     lr,[r0,#2]
;;;1179         HBuffer[bufferidx++] = headersize & 0x00ff0000;
000084  f880e003          STRB     lr,[r0,#3]
;;;1180         HBuffer[bufferidx++] = headersize & 0x0000ff00;
000088  f880e004          STRB     lr,[r0,#4]
;;;1181         HBuffer[bufferidx++] = headersize & 0x000000ff;
00008c  2106              MOVS     r1,#6
00008e  f880c005          STRB     r12,[r0,#5]
000092  1db6              ADDS     r6,r6,#6
;;;1182         headersize += 6;
000094  e006              B        |L2.164|
;;;1183       }
;;;1184       /* Copy the header buffer in internal buffer "HBuffer" */
;;;1185       for(loopcounter = 0; loopcounter < headersize; loopcounter++)
;;;1186       {
;;;1187         HBuffer[bufferidx++] = Header[loopcounter];
000096  bf00              NOP      
                  |L2.152|
000098  f815c003          LDRB     r12,[r5,r3]
00009c  f800c001          STRB     r12,[r0,r1]
0000a0  1c49              ADDS     r1,r1,#1
0000a2  1c5b              ADDS     r3,r3,#1
                  |L2.164|
0000a4  42b3              CMP      r3,r6                 ;1185
0000a6  d3f7              BCC      |L2.152|
;;;1188       }
;;;1189       /* Check if the header size is modulo 16 */
;;;1190       if ((headersize % 16) != 0)
0000a8  0731              LSLS     r1,r6,#28
0000aa  d009              BEQ      |L2.192|
0000ac  4631              MOV      r1,r6                 ;1154
;;;1191       {
;;;1192         /* Padd the header buffer with 0s till the HBuffer length is modulo 16 */
;;;1193         for(loopcounter = headersize; loopcounter <= ((headersize/16) + 1) * 16; loopcounter++)
0000ae  0933              LSRS     r3,r6,#4
0000b0  011e              LSLS     r6,r3,#4
0000b2  4673              MOV      r3,lr
0000b4  3610              ADDS     r6,r6,#0x10
0000b6  e001              B        |L2.188|
                  |L2.184|
;;;1194         {
;;;1195           HBuffer[loopcounter] = 0;
0000b8  5443              STRB     r3,[r0,r1]
0000ba  1c49              ADDS     r1,r1,#1
                  |L2.188|
0000bc  428e              CMP      r6,r1                 ;1193
0000be  d2fb              BCS      |L2.184|
                  |L2.192|
;;;1196         }
;;;1197         /* Set the header size to modulo 16 */
;;;1198         headersize = ((headersize/16) + 1) * 16;
;;;1199       }
;;;1200       /* set the pointer headeraddr to HBuffer */
;;;1201       headeraddr = (uint32_t)HBuffer;
0000c0  4605              MOV      r5,r0
0000c2  b116              CBZ      r6,|L2.202|
;;;1202     }
;;;1203     /************************* Formatting the block B0 **************************/
;;;1204     if(headersize != 0)
;;;1205     {
;;;1206       blockb0[0] = 0x40;
0000c4  2040              MOVS     r0,#0x40
0000c6  f88d0010          STRB     r0,[sp,#0x10]
                  |L2.202|
;;;1207     }
;;;1208     /* Flags byte */
;;;1209     blockb0[0] |= 0u | (((( (uint8_t) TAGSize - 2) / 2) & 0x07 ) << 3 ) | ( ( (uint8_t) (15 - NonceSize) - 1) & 0x07);
0000ca  f00b00ff          AND      r0,r11,#0xff
0000ce  1e80              SUBS     r0,r0,#2
0000d0  eb0070d0          ADD      r0,r0,r0,LSR #31
0000d4  f3c00042          UBFX     r0,r0,#1,#3
0000d8  f1c2010e          RSB      r1,r2,#0xe
0000dc  f36001df          BFI      r1,r0,#3,#29
0000e0  f89d0010          LDRB     r0,[sp,#0x10]
0000e4  4301              ORRS     r1,r1,r0
0000e6  f88d1010          STRB     r1,[sp,#0x10]
;;;1210     
;;;1211     for (loopcounter = 0; loopcounter < NonceSize; loopcounter++)
0000ea  2000              MOVS     r0,#0
0000ec  a904              ADD      r1,sp,#0x10           ;1157
0000ee  e006              B        |L2.254|
                  |L2.240|
;;;1212     {
;;;1213       blockb0[loopcounter+1] = Nonce[loopcounter];
0000f0  9b28              LDR      r3,[sp,#0xa0]
0000f2  eb010c00          ADD      r12,r1,r0
0000f6  5c1b              LDRB     r3,[r3,r0]
0000f8  f88c3001          STRB     r3,[r12,#1]
0000fc  1c40              ADDS     r0,r0,#1
                  |L2.254|
0000fe  4290              CMP      r0,r2                 ;1211
000100  d3f6              BCC      |L2.240|
000102  e005              B        |L2.272|
                  |L2.260|
;;;1214     }
;;;1215     for ( ; loopcounter < 13; loopcounter++)
;;;1216     {
;;;1217       blockb0[loopcounter+1] = 0;
000104  2300              MOVS     r3,#0
000106  eb010c00          ADD      r12,r1,r0
00010a  1c40              ADDS     r0,r0,#1
00010c  f88c3001          STRB     r3,[r12,#1]
                  |L2.272|
000110  280d              CMP      r0,#0xd               ;1215
000112  d3f7              BCC      |L2.260|
;;;1218     }
;;;1219     
;;;1220     blockb0[14] = ((ILength >> 8) & 0xFF);
000114  0a38              LSRS     r0,r7,#8
000116  f88d001e          STRB     r0,[sp,#0x1e]
;;;1221     blockb0[15] = (ILength & 0xFF);
;;;1222     
;;;1223     /************************* Formatting the initial counter *******************/
;;;1224     /* Byte 0:
;;;1225        Bits 7 and 6 are reserved and shall be set to 0
;;;1226        Bits 3, 4, and 5 shall also be set to 0, to ensure that all the counter blocks
;;;1227        are distinct from B0
;;;1228        Bits 0, 1, and 2 contain the same encoding of q as in B0
;;;1229     */
;;;1230     ctr[0] = blockb0[0] & 0x07;
00011a  f89d0010          LDRB     r0,[sp,#0x10]
00011e  f88d701f          STRB     r7,[sp,#0x1f]         ;1221
000122  f0000007          AND      r0,r0,#7
000126  f88d0020          STRB     r0,[sp,#0x20]
;;;1231     /* byte 1 to NonceSize is the IV (Nonce) */
;;;1232     for(loopcounter = 1; loopcounter < NonceSize + 1; loopcounter++)
00012a  2001              MOVS     r0,#1
00012c  ab08              ADD      r3,sp,#0x20           ;1158
00012e  1c52              ADDS     r2,r2,#1              ;1158
000130  e005              B        |L2.318|
;;;1233     {
;;;1234       ctr[loopcounter] = blockb0[loopcounter];
000132  bf00              NOP      
                  |L2.308|
000134  f811c000          LDRB     r12,[r1,r0]
000138  f803c000          STRB     r12,[r3,r0]
00013c  1c40              ADDS     r0,r0,#1
                  |L2.318|
00013e  4290              CMP      r0,r2                 ;1232
000140  d3f8              BCC      |L2.308|
;;;1235     }
;;;1236     /* Set the LSB to 1 */
;;;1237     ctr[15] |= 0x01;
000142  f89d002f          LDRB     r0,[sp,#0x2f]
000146  f0400001          ORR      r0,r0,#1
00014a  f88d002f          STRB     r0,[sp,#0x2f]
;;;1238     
;;;1239     /* Crypto structures initialisation*/
;;;1240     CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
00014e  a812              ADD      r0,sp,#0x48
000150  f7fffffe          BL       CRYP_KeyStructInit
;;;1241     
;;;1242     switch(Keysize)
000154  9834              LDR      r0,[sp,#0xd0]
000156  2880              CMP      r0,#0x80
000158  d01e              BEQ      |L2.408|
00015a  f44f7180          MOV      r1,#0x100
00015e  28c0              CMP      r0,#0xc0
000160  d027              BEQ      |L2.434|
000162  4288              CMP      r0,r1
000164  d138              BNE      |L2.472|
;;;1243     {
;;;1244       case 128:
;;;1245       AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
;;;1246       AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;1247       keyaddr+=4;
;;;1248       AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;1249       keyaddr+=4;
;;;1250       AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;1251       keyaddr+=4;
;;;1252       AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;1253       break;
;;;1254       case 192:
;;;1255       AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
;;;1256       AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
;;;1257       keyaddr+=4;
;;;1258       AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
;;;1259       keyaddr+=4;
;;;1260       AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;1261       keyaddr+=4;
;;;1262       AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;1263       keyaddr+=4;
;;;1264       AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;1265       keyaddr+=4;
;;;1266       AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;1267       break;
;;;1268       case 256:
;;;1269       AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
000166  0040              LSLS     r0,r0,#1
;;;1270       AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
000168  9021              STR      r0,[sp,#0x84]
00016a  6820              LDR      r0,[r4,#0]
00016c  ba00              REV      r0,r0
;;;1271       keyaddr+=4;
;;;1272       AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
00016e  9012              STR      r0,[sp,#0x48]
000170  6860              LDR      r0,[r4,#4]
000172  ba00              REV      r0,r0
;;;1273       keyaddr+=4;
;;;1274       AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000174  9013              STR      r0,[sp,#0x4c]
000176  68a0              LDR      r0,[r4,#8]
000178  ba00              REV      r0,r0
;;;1275       keyaddr+=4;
;;;1276       AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
00017a  9014              STR      r0,[sp,#0x50]
00017c  68e0              LDR      r0,[r4,#0xc]
00017e  ba00              REV      r0,r0
;;;1277       keyaddr+=4;
;;;1278       AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000180  9015              STR      r0,[sp,#0x54]
000182  6920              LDR      r0,[r4,#0x10]
000184  ba00              REV      r0,r0
;;;1279       keyaddr+=4;
;;;1280       AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000186  9016              STR      r0,[sp,#0x58]
000188  6960              LDR      r0,[r4,#0x14]
00018a  ba00              REV      r0,r0
;;;1281       keyaddr+=4;
;;;1282       AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
00018c  9017              STR      r0,[sp,#0x5c]
00018e  69a0              LDR      r0,[r4,#0x18]
000190  ba00              REV      r0,r0
;;;1283       keyaddr+=4;
;;;1284       AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000192  9018              STR      r0,[sp,#0x60]
;;;1285       break;
000194  69e0              LDR      r0,[r4,#0x1c]
000196  e01d              B        |L2.468|
                  |L2.408|
000198  2000              MOVS     r0,#0                 ;1245
00019a  9021              STR      r0,[sp,#0x84]         ;1246
00019c  6820              LDR      r0,[r4,#0]            ;1246
00019e  ba00              REV      r0,r0                 ;1246
0001a0  9016              STR      r0,[sp,#0x58]         ;1248
0001a2  6860              LDR      r0,[r4,#4]            ;1248
0001a4  ba00              REV      r0,r0                 ;1248
0001a6  9017              STR      r0,[sp,#0x5c]         ;1250
0001a8  68a0              LDR      r0,[r4,#8]            ;1250
0001aa  ba00              REV      r0,r0                 ;1250
0001ac  9018              STR      r0,[sp,#0x60]         ;1252
0001ae  68e0              LDR      r0,[r4,#0xc]          ;1253
0001b0  e010              B        |L2.468|
                  |L2.434|
0001b2  9121              STR      r1,[sp,#0x84]         ;1256
0001b4  6820              LDR      r0,[r4,#0]            ;1256
0001b6  ba00              REV      r0,r0                 ;1256
0001b8  9014              STR      r0,[sp,#0x50]         ;1258
0001ba  6860              LDR      r0,[r4,#4]            ;1258
0001bc  ba00              REV      r0,r0                 ;1258
0001be  9015              STR      r0,[sp,#0x54]         ;1260
0001c0  68a0              LDR      r0,[r4,#8]            ;1260
0001c2  ba00              REV      r0,r0                 ;1260
0001c4  9016              STR      r0,[sp,#0x58]         ;1262
0001c6  68e0              LDR      r0,[r4,#0xc]          ;1262
0001c8  ba00              REV      r0,r0                 ;1262
0001ca  9017              STR      r0,[sp,#0x5c]         ;1264
0001cc  6920              LDR      r0,[r4,#0x10]         ;1264
0001ce  ba00              REV      r0,r0                 ;1264
0001d0  9018              STR      r0,[sp,#0x60]         ;1266
0001d2  6960              LDR      r0,[r4,#0x14]         ;1266
                  |L2.468|
0001d4  ba00              REV      r0,r0                 ;1252
0001d6  9019              STR      r0,[sp,#0x64]         ;1252
                  |L2.472|
;;;1286       default:
;;;1287       break;
;;;1288     }
;;;1289     
;;;1290     /* CRYP Initialization Vectors */
;;;1291     AES_CRYP_IVInitStructure.CRYP_IV0Left = (__REV(*(uint32_t*)(ctraddr)));
0001d8  9808              LDR      r0,[sp,#0x20]
;;;1292     ctraddr+=4;
;;;1293     AES_CRYP_IVInitStructure.CRYP_IV0Right= (__REV(*(uint32_t*)(ctraddr)));
;;;1294     ctraddr+=4;
;;;1295     AES_CRYP_IVInitStructure.CRYP_IV1Left = (__REV(*(uint32_t*)(ctraddr)));
;;;1296     ctraddr+=4;
;;;1297     AES_CRYP_IVInitStructure.CRYP_IV1Right= (__REV(*(uint32_t*)(ctraddr)));
;;;1298     
;;;1299     /*------------------ AES Encryption ------------------*/
;;;1300     if(Mode == MODE_ENCRYPT) /* AES encryption */
;;;1301     {
;;;1302       /* Flush IN/OUT FIFOs */
;;;1303       CRYP_FIFOFlush();
;;;1304       
;;;1305       /* Key Initialisation */
;;;1306       CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
;;;1307       
;;;1308       /* CRYP Initialization Vectors */
;;;1309       CRYP_IVInit(&AES_CRYP_IVInitStructure);
;;;1310       
;;;1311       /* Crypto Init for Key preparation for decryption process */
;;;1312       AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
;;;1313       AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
0001da  f04f1408          MOV      r4,#0x80008
0001de  ba00              REV      r0,r0                 ;1291
0001e0  9022              STR      r0,[sp,#0x88]         ;1292
0001e2  9810              LDR      r0,[sp,#0x40]         ;1293
0001e4  6841              LDR      r1,[r0,#4]            ;1293
0001e6  ba09              REV      r1,r1                 ;1293
0001e8  9123              STR      r1,[sp,#0x8c]         ;1295
0001ea  6881              LDR      r1,[r0,#8]            ;1295
0001ec  ba09              REV      r1,r1                 ;1295
0001ee  9124              STR      r1,[sp,#0x90]         ;1297
0001f0  68c0              LDR      r0,[r0,#0xc]          ;1297
0001f2  ba00              REV      r0,r0                 ;1297
0001f4  9025              STR      r0,[sp,#0x94]         ;1300
0001f6  9827              LDR      r0,[sp,#0x9c]         ;1300
0001f8  2801              CMP      r0,#1                 ;1300
0001fa  d034              BEQ      |L2.614|
;;;1314       AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
;;;1315       CRYP_Init(&AES_CRYP_InitStructure);
;;;1316       
;;;1317       /***************************** Init phase *********************************/
;;;1318       /* Select init phase */
;;;1319       CRYP_PhaseConfig(CRYP_Phase_Init);
;;;1320       
;;;1321       b0addr = (uint32_t)blockb0;
;;;1322       /* Write the blockb0 block in the IN FIFO */
;;;1323       CRYP_DataIn((*(uint32_t*)(b0addr)));
;;;1324       b0addr+=4;
;;;1325       CRYP_DataIn((*(uint32_t*)(b0addr)));
;;;1326       b0addr+=4;
;;;1327       CRYP_DataIn((*(uint32_t*)(b0addr)));
;;;1328       b0addr+=4;
;;;1329       CRYP_DataIn((*(uint32_t*)(b0addr)));
;;;1330       
;;;1331       /* Enable Crypto processor */
;;;1332       CRYP_Cmd(ENABLE);
;;;1333       
;;;1334       /* Wait for CRYPEN bit to be 0 */
;;;1335       while(CRYP_GetCmdStatus() == ENABLE)
;;;1336       {
;;;1337       }
;;;1338       /***************************** header phase *******************************/
;;;1339       if(headersize != 0)
;;;1340       {
;;;1341         /* Select header phase */
;;;1342         CRYP_PhaseConfig(CRYP_Phase_Header);
;;;1343         
;;;1344         /* Enable Crypto processor */
;;;1345         CRYP_Cmd(ENABLE);
;;;1346         
;;;1347         if(CRYP_GetCmdStatus() == DISABLE)
;;;1348         {
;;;1349            /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1350               the CRYP peripheral (please check the device sales type. */
;;;1351            return(ERROR);
;;;1352         }
;;;1353         
;;;1354         for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
;;;1355         {
;;;1356           /* Wait until the IFEM flag is reset */
;;;1357           while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
;;;1358           {
;;;1359           }
;;;1360           
;;;1361           /* Write the Input block in the IN FIFO */
;;;1362           CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;1363           headeraddr+=4;
;;;1364           CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;1365           headeraddr+=4;
;;;1366           CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;1367           headeraddr+=4;
;;;1368           CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;1369           headeraddr+=4;
;;;1370         }
;;;1371         
;;;1372         /* Wait until the complete message has been processed */
;;;1373         counter = 0;
;;;1374         do
;;;1375         {
;;;1376           busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;1377           counter++;
;;;1378         }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;1379   
;;;1380         if (busystatus != RESET)
;;;1381         {
;;;1382           status = ERROR;
;;;1383         }
;;;1384       }
;;;1385       
;;;1386       /**************************** payload phase *******************************/
;;;1387       if(ILength != 0)
;;;1388       {
;;;1389         /* Select payload phase */
;;;1390         CRYP_PhaseConfig(CRYP_Phase_Payload);
;;;1391         
;;;1392         /* Enable Crypto processor */
;;;1393         CRYP_Cmd(ENABLE);
;;;1394         
;;;1395         if(CRYP_GetCmdStatus() == DISABLE)
;;;1396         {
;;;1397           /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1398              the CRYP peripheral (please check the device sales type. */
;;;1399           return(ERROR);
;;;1400         }
;;;1401         
;;;1402         for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
;;;1403         {
;;;1404           /* Wait until the IFEM flag is reset */
;;;1405           while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
;;;1406           {
;;;1407           }
;;;1408           
;;;1409           /* Write the Input block in the IN FIFO */
;;;1410           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1411           inputaddr+=4;
;;;1412           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1413           inputaddr+=4;
;;;1414           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1415           inputaddr+=4;
;;;1416           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1417           inputaddr+=4;
;;;1418           
;;;1419           /* Wait until the complete message has been processed */
;;;1420           counter = 0;
;;;1421           do
;;;1422           {
;;;1423             busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;1424             counter++;
;;;1425           }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;1426   
;;;1427           if (busystatus != RESET)
;;;1428           {
;;;1429             status = ERROR;
;;;1430           }
;;;1431           else
;;;1432           {
;;;1433             /* Wait until the OFNE flag is reset */
;;;1434             while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
;;;1435             {
;;;1436             }
;;;1437             
;;;1438             /* Read the Output block from the Output FIFO */
;;;1439             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1440             outputaddr+=4;
;;;1441             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1442             outputaddr+=4;
;;;1443             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1444             outputaddr+=4;
;;;1445             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1446             outputaddr+=4;
;;;1447           }
;;;1448         }
;;;1449       }
;;;1450       
;;;1451       /***************************** final phase ********************************/
;;;1452       /* Select final phase */
;;;1453       CRYP_PhaseConfig(CRYP_Phase_Final);
;;;1454       
;;;1455       /* Enable Crypto processor */
;;;1456       CRYP_Cmd(ENABLE);
;;;1457       
;;;1458       if(CRYP_GetCmdStatus() == DISABLE)
;;;1459       {
;;;1460         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1461            the CRYP peripheral (please check the device sales type. */
;;;1462         return(ERROR);
;;;1463       }
;;;1464       
;;;1465       ctraddr = (uint32_t)ctr;
;;;1466       /* Write the counter block in the IN FIFO */
;;;1467       CRYP_DataIn(*(uint32_t*)(ctraddr));
;;;1468       ctraddr+=4;
;;;1469       CRYP_DataIn(*(uint32_t*)(ctraddr));
;;;1470       ctraddr+=4;
;;;1471       CRYP_DataIn(*(uint32_t*)(ctraddr));
;;;1472       ctraddr+=4;
;;;1473       /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
;;;1474       CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
;;;1475       
;;;1476       /* Wait until the OFNE flag is reset */
;;;1477       while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
;;;1478       {
;;;1479       }
;;;1480       
;;;1481       /* Read the Auth TAG in the IN FIFO */
;;;1482       temptag[0] = CRYP_DataOut();
;;;1483       temptag[1] = CRYP_DataOut();
;;;1484       temptag[2] = CRYP_DataOut();
;;;1485       temptag[3] = CRYP_DataOut();
;;;1486     }
;;;1487     /*------------------ AES Decryption ------------------*/
;;;1488     else /* AES decryption */
;;;1489     {
;;;1490       /* Flush IN/OUT FIFOs */
;;;1491       CRYP_FIFOFlush();
0001fc  f7fffffe          BL       CRYP_FIFOFlush
;;;1492       
;;;1493       /* Key Initialisation */
;;;1494       CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
000200  a812              ADD      r0,sp,#0x48
000202  f7fffffe          BL       CRYP_KeyInit
;;;1495       
;;;1496       /* CRYP Initialization Vectors */
;;;1497       CRYP_IVInit(&AES_CRYP_IVInitStructure);
000206  a822              ADD      r0,sp,#0x88
000208  f7fffffe          BL       CRYP_IVInit
;;;1498       
;;;1499       /* Crypto Init for Key preparation for decryption process */
;;;1500       AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
00020c  2004              MOVS     r0,#4
00020e  e9cd041e          STRD     r0,r4,[sp,#0x78]
;;;1501       AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
;;;1502       AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000212  2080              MOVS     r0,#0x80
;;;1503       CRYP_Init(&AES_CRYP_InitStructure);
000214  9020              STR      r0,[sp,#0x80]
000216  a81e              ADD      r0,sp,#0x78
000218  f7fffffe          BL       CRYP_Init
;;;1504       
;;;1505       /***************************** Init phase *********************************/
;;;1506       /* Select init phase */
;;;1507       CRYP_PhaseConfig(CRYP_Phase_Init);
00021c  2000              MOVS     r0,#0
00021e  f7fffffe          BL       CRYP_PhaseConfig
;;;1508       
;;;1509       b0addr = (uint32_t)blockb0;
;;;1510       /* Write the blockb0 block in the IN FIFO */
;;;1511       CRYP_DataIn((*(uint32_t*)(b0addr)));
000222  9804              LDR      r0,[sp,#0x10]
000224  f7fffffe          BL       CRYP_DataIn
;;;1512       b0addr+=4;
;;;1513       CRYP_DataIn((*(uint32_t*)(b0addr)));
000228  9805              LDR      r0,[sp,#0x14]
00022a  f7fffffe          BL       CRYP_DataIn
;;;1514       b0addr+=4;
;;;1515       CRYP_DataIn((*(uint32_t*)(b0addr)));
00022e  9806              LDR      r0,[sp,#0x18]
000230  f7fffffe          BL       CRYP_DataIn
;;;1516       b0addr+=4;
;;;1517       CRYP_DataIn((*(uint32_t*)(b0addr)));
000234  9807              LDR      r0,[sp,#0x1c]
000236  f7fffffe          BL       CRYP_DataIn
;;;1518       
;;;1519       /* Enable Crypto processor */
;;;1520       CRYP_Cmd(ENABLE);
00023a  2001              MOVS     r0,#1
00023c  f7fffffe          BL       CRYP_Cmd
                  |L2.576|
;;;1521       
;;;1522       /* Wait for CRYPEN bit to be 0 */
;;;1523       while(CRYP_GetCmdStatus() == ENABLE)
000240  f7fffffe          BL       CRYP_GetCmdStatus
000244  2801              CMP      r0,#1
000246  d0fb              BEQ      |L2.576|
;;;1524       {
;;;1525       }
;;;1526       
;;;1527       /***************************** header phase *******************************/
;;;1528       if(headersize != 0)
000248  2e00              CMP      r6,#0
00024a  d079              BEQ      |L2.832|
;;;1529       {
;;;1530         /* Select header phase */
;;;1531         CRYP_PhaseConfig(CRYP_Phase_Header);
00024c  f44f3080          MOV      r0,#0x10000
000250  f7fffffe          BL       CRYP_PhaseConfig
;;;1532         
;;;1533         /* Enable Crypto processor */
;;;1534         CRYP_Cmd(ENABLE);
000254  2001              MOVS     r0,#1
000256  f7fffffe          BL       CRYP_Cmd
;;;1535         
;;;1536         if(CRYP_GetCmdStatus() == DISABLE)
00025a  f7fffffe          BL       CRYP_GetCmdStatus
00025e  2800              CMP      r0,#0
000260  d06f              BEQ      |L2.834|
;;;1537         {
;;;1538           /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1539              the CRYP peripheral (please check the device sales type. */
;;;1540           return(ERROR);
;;;1541         }
;;;1542         
;;;1543         for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
000262  2400              MOVS     r4,#0
000264  e0ec              B        |L2.1088|
                  |L2.614|
000266  f7fffffe          BL       CRYP_FIFOFlush
00026a  a812              ADD      r0,sp,#0x48           ;1306
00026c  f7fffffe          BL       CRYP_KeyInit
000270  a822              ADD      r0,sp,#0x88           ;1309
000272  f7fffffe          BL       CRYP_IVInit
000276  2000              MOVS     r0,#0                 ;1312
000278  e9cd041e          STRD     r0,r4,[sp,#0x78]      ;1312
00027c  2080              MOVS     r0,#0x80              ;1314
00027e  9020              STR      r0,[sp,#0x80]         ;1315
000280  a81e              ADD      r0,sp,#0x78           ;1315
000282  f7fffffe          BL       CRYP_Init
000286  2000              MOVS     r0,#0                 ;1319
000288  f7fffffe          BL       CRYP_PhaseConfig
00028c  9804              LDR      r0,[sp,#0x10]         ;1323
00028e  f7fffffe          BL       CRYP_DataIn
000292  9805              LDR      r0,[sp,#0x14]         ;1325
000294  f7fffffe          BL       CRYP_DataIn
000298  9806              LDR      r0,[sp,#0x18]         ;1327
00029a  f7fffffe          BL       CRYP_DataIn
00029e  9807              LDR      r0,[sp,#0x1c]         ;1329
0002a0  f7fffffe          BL       CRYP_DataIn
0002a4  2001              MOVS     r0,#1                 ;1332
0002a6  f7fffffe          BL       CRYP_Cmd
0002aa  bf00              NOP                            ;1335
                  |L2.684|
0002ac  f7fffffe          BL       CRYP_GetCmdStatus
0002b0  2801              CMP      r0,#1                 ;1335
0002b2  d0fb              BEQ      |L2.684|
0002b4  b396              CBZ      r6,|L2.796|
0002b6  f44f3080          MOV      r0,#0x10000           ;1342
0002ba  f7fffffe          BL       CRYP_PhaseConfig
0002be  2001              MOVS     r0,#1                 ;1345
0002c0  f7fffffe          BL       CRYP_Cmd
0002c4  f7fffffe          BL       CRYP_GetCmdStatus
0002c8  2800              CMP      r0,#0                 ;1347
0002ca  d03a              BEQ      |L2.834|
0002cc  2400              MOVS     r4,#0                 ;1354
0002ce  e015              B        |L2.764|
                  |L2.720|
0002d0  2001              MOVS     r0,#1                 ;1357
0002d2  f7fffffe          BL       CRYP_GetFlagStatus
0002d6  2800              CMP      r0,#0                 ;1357
0002d8  d0fa              BEQ      |L2.720|
0002da  6828              LDR      r0,[r5,#0]            ;1362
0002dc  f7fffffe          BL       CRYP_DataIn
0002e0  f8550f04          LDR      r0,[r5,#4]!           ;1364
0002e4  f7fffffe          BL       CRYP_DataIn
0002e8  f8550f04          LDR      r0,[r5,#4]!           ;1366
0002ec  f7fffffe          BL       CRYP_DataIn
0002f0  f8550f04          LDR      r0,[r5,#4]!           ;1368
0002f4  f7fffffe          BL       CRYP_DataIn
0002f8  3410              ADDS     r4,r4,#0x10           ;1368
0002fa  1d2d              ADDS     r5,r5,#4              ;1368
                  |L2.764|
0002fc  42b4              CMP      r4,r6                 ;1354
0002fe  d3e7              BCC      |L2.720|
000300  2000              MOVS     r0,#0                 ;1373
000302  f44f3480          MOV      r4,#0x10000           ;1342
000306  9001              STR      r0,[sp,#4]            ;1342
                  |L2.776|
000308  2010              MOVS     r0,#0x10              ;1376
00030a  f7fffffe          BL       CRYP_GetFlagStatus
00030e  9901              LDR      r1,[sp,#4]            ;1377
000310  1c49              ADDS     r1,r1,#1              ;1377
000312  9101              STR      r1,[sp,#4]            ;1378
000314  42a1              CMP      r1,r4                 ;1378
000316  d002              BEQ      |L2.798|
000318  2800              CMP      r0,#0                 ;1378
00031a  d1f5              BNE      |L2.776|
                  |L2.796|
00031c  e002              B        |L2.804|
                  |L2.798|
00031e  b108              CBZ      r0,|L2.804|
000320  f04f0900          MOV      r9,#0                 ;1382
                  |L2.804|
000324  b3b7              CBZ      r7,|L2.916|
000326  f44f3000          MOV      r0,#0x20000           ;1390
00032a  f7fffffe          BL       CRYP_PhaseConfig
00032e  2001              MOVS     r0,#1                 ;1393
000330  f7fffffe          BL       CRYP_Cmd
000334  f7fffffe          BL       CRYP_GetCmdStatus
000338  2800              CMP      r0,#0                 ;1395
00033a  d002              BEQ      |L2.834|
00033c  2500              MOVS     r5,#0                 ;1402
00033e  e045              B        |L2.972|
                  |L2.832|
000340  e092              B        |L2.1128|
                  |L2.834|
000342  e0c8              B        |L2.1238|
                  |L2.836|
000344  2001              MOVS     r0,#1                 ;1405
000346  f7fffffe          BL       CRYP_GetFlagStatus
00034a  2800              CMP      r0,#0                 ;1405
00034c  d0fa              BEQ      |L2.836|
00034e  f8d80000          LDR      r0,[r8,#0]            ;1410
000352  f7fffffe          BL       CRYP_DataIn
000356  f1080404          ADD      r4,r8,#4              ;1411
00035a  f8d80004          LDR      r0,[r8,#4]            ;1412
00035e  f7fffffe          BL       CRYP_DataIn
000362  f8540f04          LDR      r0,[r4,#4]!           ;1414
000366  f7fffffe          BL       CRYP_DataIn
00036a  f8540f04          LDR      r0,[r4,#4]!           ;1416
00036e  f7fffffe          BL       CRYP_DataIn
000372  f1040804          ADD      r8,r4,#4              ;1416
000376  2000              MOVS     r0,#0                 ;1420
000378  f44f3480          MOV      r4,#0x10000           ;1342
00037c  9001              STR      r0,[sp,#4]            ;1342
                  |L2.894|
00037e  2010              MOVS     r0,#0x10              ;1423
000380  f7fffffe          BL       CRYP_GetFlagStatus
000384  9901              LDR      r1,[sp,#4]            ;1424
000386  1c49              ADDS     r1,r1,#1              ;1424
000388  9101              STR      r1,[sp,#4]            ;1425
00038a  42a1              CMP      r1,r4                 ;1425
00038c  d003              BEQ      |L2.918|
00038e  2800              CMP      r0,#0                 ;1425
000390  d1f5              BNE      |L2.894|
000392  e004              B        |L2.926|
                  |L2.916|
000394  e01f              B        |L2.982|
                  |L2.918|
000396  b110              CBZ      r0,|L2.926|
000398  f04f0900          MOV      r9,#0                 ;1429
00039c  e015              B        |L2.970|
                  |L2.926|
00039e  2004              MOVS     r0,#4                 ;1434
0003a0  f7fffffe          BL       CRYP_GetFlagStatus
0003a4  2800              CMP      r0,#0                 ;1434
0003a6  d0fa              BEQ      |L2.926|
0003a8  f7fffffe          BL       CRYP_DataOut
0003ac  f10a0404          ADD      r4,r10,#4             ;1440
0003b0  f8ca0000          STR      r0,[r10,#0]           ;1441
0003b4  f7fffffe          BL       CRYP_DataOut
0003b8  6020              STR      r0,[r4,#0]            ;1443
0003ba  f7fffffe          BL       CRYP_DataOut
0003be  6060              STR      r0,[r4,#4]            ;1445
0003c0  f7fffffe          BL       CRYP_DataOut
0003c4  f1040a0c          ADD      r10,r4,#0xc           ;1445
0003c8  60a0              STR      r0,[r4,#8]            ;1445
                  |L2.970|
0003ca  3510              ADDS     r5,r5,#0x10           ;1445
                  |L2.972|
0003cc  42bd              CMP      r5,r7                 ;1402
0003ce  d202              BCS      |L2.982|
0003d0  f1b90f00          CMP      r9,#0                 ;1402
0003d4  d1b6              BNE      |L2.836|
                  |L2.982|
0003d6  f44f3040          MOV      r0,#0x30000           ;1453
0003da  f7fffffe          BL       CRYP_PhaseConfig
0003de  2001              MOVS     r0,#1                 ;1456
0003e0  f7fffffe          BL       CRYP_Cmd
0003e4  f7fffffe          BL       CRYP_GetCmdStatus
0003e8  2800              CMP      r0,#0                 ;1458
0003ea  d074              BEQ      |L2.1238|
0003ec  9808              LDR      r0,[sp,#0x20]         ;1467
0003ee  f7fffffe          BL       CRYP_DataIn
0003f2  9809              LDR      r0,[sp,#0x24]         ;1469
0003f4  f7fffffe          BL       CRYP_DataIn
0003f8  980a              LDR      r0,[sp,#0x28]         ;1471
0003fa  f7fffffe          BL       CRYP_DataIn
0003fe  980b              LDR      r0,[sp,#0x2c]         ;1474
000400  f0207080          BIC      r0,r0,#0x1000000      ;1474
000404  f7fffffe          BL       CRYP_DataIn
                  |L2.1032|
000408  2004              MOVS     r0,#4                 ;1477
00040a  f7fffffe          BL       CRYP_GetFlagStatus
00040e  2800              CMP      r0,#0                 ;1477
000410  d0fa              BEQ      |L2.1032|
000412  e09f              B        |L2.1364|
                  |L2.1044|
;;;1544         {
;;;1545           /* Wait until the IFEM flag is reset */
;;;1546           while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
000414  2001              MOVS     r0,#1
000416  f7fffffe          BL       CRYP_GetFlagStatus
00041a  2800              CMP      r0,#0
00041c  d0fa              BEQ      |L2.1044|
;;;1547           {
;;;1548           }
;;;1549           
;;;1550           /* Write the Input block in the IN FIFO */
;;;1551           CRYP_DataIn(*(uint32_t*)(headeraddr));
00041e  6828              LDR      r0,[r5,#0]
000420  f7fffffe          BL       CRYP_DataIn
;;;1552           headeraddr+=4;
;;;1553           CRYP_DataIn(*(uint32_t*)(headeraddr));
000424  f8550f04          LDR      r0,[r5,#4]!
000428  f7fffffe          BL       CRYP_DataIn
;;;1554           headeraddr+=4;
;;;1555           CRYP_DataIn(*(uint32_t*)(headeraddr));
00042c  f8550f04          LDR      r0,[r5,#4]!
000430  f7fffffe          BL       CRYP_DataIn
;;;1556           headeraddr+=4;
;;;1557           CRYP_DataIn(*(uint32_t*)(headeraddr));
000434  f8550f04          LDR      r0,[r5,#4]!
000438  f7fffffe          BL       CRYP_DataIn
00043c  3410              ADDS     r4,r4,#0x10
00043e  1d2d              ADDS     r5,r5,#4
                  |L2.1088|
000440  42b4              CMP      r4,r6                 ;1543
000442  d3e7              BCC      |L2.1044|
;;;1558           headeraddr+=4;
;;;1559         }
;;;1560         
;;;1561         /* Wait until the complete message has been processed */
;;;1562         counter = 0;
000444  2000              MOVS     r0,#0
000446  f44f3480          MOV      r4,#0x10000           ;1342
00044a  9001              STR      r0,[sp,#4]            ;1342
                  |L2.1100|
;;;1563         do
;;;1564         {
;;;1565           busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
00044c  2010              MOVS     r0,#0x10
00044e  f7fffffe          BL       CRYP_GetFlagStatus
;;;1566           counter++;
000452  9901              LDR      r1,[sp,#4]
000454  1c49              ADDS     r1,r1,#1
;;;1567         }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
000456  9101              STR      r1,[sp,#4]
000458  42a1              CMP      r1,r4
00045a  d002              BEQ      |L2.1122|
00045c  2800              CMP      r0,#0
00045e  d1f5              BNE      |L2.1100|
000460  e002              B        |L2.1128|
                  |L2.1122|
;;;1568   
;;;1569         if (busystatus != RESET)
000462  b108              CBZ      r0,|L2.1128|
;;;1570         {
;;;1571           status = ERROR;
000464  f04f0900          MOV      r9,#0
                  |L2.1128|
;;;1572         }
;;;1573       }
;;;1574       
;;;1575       /**************************** payload phase *******************************/
;;;1576       if(ILength != 0)
000468  b3a7              CBZ      r7,|L2.1236|
;;;1577       {
;;;1578         /* Select payload phase */
;;;1579         CRYP_PhaseConfig(CRYP_Phase_Payload);
00046a  f44f3000          MOV      r0,#0x20000
00046e  f7fffffe          BL       CRYP_PhaseConfig
;;;1580   
;;;1581         /* Enable Crypto processor */
;;;1582         CRYP_Cmd(ENABLE);
000472  2001              MOVS     r0,#1
000474  f7fffffe          BL       CRYP_Cmd
;;;1583         
;;;1584         if(CRYP_GetCmdStatus() == DISABLE)
000478  f7fffffe          BL       CRYP_GetCmdStatus
00047c  2800              CMP      r0,#0
00047e  d02a              BEQ      |L2.1238|
;;;1585         {
;;;1586           /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1587              the CRYP peripheral (please check the device sales type. */
;;;1588           return(ERROR);
;;;1589         }
;;;1590         
;;;1591         for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
000480  2400              MOVS     r4,#0
000482  e044              B        |L2.1294|
                  |L2.1156|
;;;1592         {
;;;1593           /* Wait until the IFEM flag is reset */
;;;1594           while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
000484  2001              MOVS     r0,#1
000486  f7fffffe          BL       CRYP_GetFlagStatus
00048a  2800              CMP      r0,#0
00048c  d0fa              BEQ      |L2.1156|
;;;1595           {
;;;1596           }
;;;1597           
;;;1598           /* Write the Input block in the IN FIFO */
;;;1599           CRYP_DataIn(*(uint32_t*)(inputaddr));
00048e  f8d80000          LDR      r0,[r8,#0]
000492  f7fffffe          BL       CRYP_DataIn
;;;1600           inputaddr+=4;
000496  f1080504          ADD      r5,r8,#4
;;;1601           CRYP_DataIn(*(uint32_t*)(inputaddr));
00049a  f8d80004          LDR      r0,[r8,#4]
00049e  f7fffffe          BL       CRYP_DataIn
;;;1602           inputaddr+=4;
;;;1603           CRYP_DataIn(*(uint32_t*)(inputaddr));
0004a2  f8550f04          LDR      r0,[r5,#4]!
0004a6  f7fffffe          BL       CRYP_DataIn
;;;1604           inputaddr+=4;
;;;1605           CRYP_DataIn(*(uint32_t*)(inputaddr));
0004aa  f8550f04          LDR      r0,[r5,#4]!
0004ae  f7fffffe          BL       CRYP_DataIn
0004b2  f1050804          ADD      r8,r5,#4
;;;1606           inputaddr+=4;
;;;1607           
;;;1608           /* Wait until the complete message has been processed */
;;;1609           counter = 0;
0004b6  2000              MOVS     r0,#0
0004b8  f44f3580          MOV      r5,#0x10000           ;1342
0004bc  9001              STR      r0,[sp,#4]            ;1342
                  |L2.1214|
;;;1610           do
;;;1611           {
;;;1612             busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
0004be  2010              MOVS     r0,#0x10
0004c0  f7fffffe          BL       CRYP_GetFlagStatus
;;;1613             counter++;
0004c4  9901              LDR      r1,[sp,#4]
0004c6  1c49              ADDS     r1,r1,#1
;;;1614           }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
0004c8  9101              STR      r1,[sp,#4]
0004ca  42a9              CMP      r1,r5
0004cc  d004              BEQ      |L2.1240|
0004ce  2800              CMP      r0,#0
0004d0  d1f5              BNE      |L2.1214|
0004d2  e005              B        |L2.1248|
                  |L2.1236|
0004d4  e020              B        |L2.1304|
                  |L2.1238|
0004d6  e056              B        |L2.1414|
                  |L2.1240|
;;;1615   
;;;1616           if (busystatus != RESET)
0004d8  b110              CBZ      r0,|L2.1248|
;;;1617           {
;;;1618             status = ERROR;
0004da  f04f0900          MOV      r9,#0
0004de  e015              B        |L2.1292|
                  |L2.1248|
;;;1619           }
;;;1620           else
;;;1621           {
;;;1622             /* Wait until the OFNE flag is reset */
;;;1623             while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
0004e0  2004              MOVS     r0,#4
0004e2  f7fffffe          BL       CRYP_GetFlagStatus
0004e6  2800              CMP      r0,#0
0004e8  d0fa              BEQ      |L2.1248|
;;;1624             {
;;;1625             }
;;;1626             
;;;1627             /* Read the Output block from the Output FIFO */
;;;1628             *(uint32_t*)(outputaddr) = CRYP_DataOut();
0004ea  f7fffffe          BL       CRYP_DataOut
;;;1629             outputaddr+=4;
0004ee  f10a0504          ADD      r5,r10,#4
;;;1630             *(uint32_t*)(outputaddr) = CRYP_DataOut();
0004f2  f8ca0000          STR      r0,[r10,#0]
0004f6  f7fffffe          BL       CRYP_DataOut
;;;1631             outputaddr+=4;
;;;1632             *(uint32_t*)(outputaddr) = CRYP_DataOut();
0004fa  6028              STR      r0,[r5,#0]
0004fc  f7fffffe          BL       CRYP_DataOut
;;;1633             outputaddr+=4;
;;;1634             *(uint32_t*)(outputaddr) = CRYP_DataOut();
000500  6068              STR      r0,[r5,#4]
000502  f7fffffe          BL       CRYP_DataOut
000506  f1050a0c          ADD      r10,r5,#0xc
00050a  60a8              STR      r0,[r5,#8]
                  |L2.1292|
00050c  3410              ADDS     r4,r4,#0x10
                  |L2.1294|
00050e  42bc              CMP      r4,r7                 ;1591
000510  d202              BCS      |L2.1304|
000512  f1b90f00          CMP      r9,#0                 ;1591
000516  d1b5              BNE      |L2.1156|
                  |L2.1304|
;;;1635             outputaddr+=4;
;;;1636           }
;;;1637         }
;;;1638       }
;;;1639       
;;;1640       /***************************** final phase ********************************/
;;;1641       /* Select final phase */
;;;1642       CRYP_PhaseConfig(CRYP_Phase_Final);
000518  f44f3040          MOV      r0,#0x30000
00051c  f7fffffe          BL       CRYP_PhaseConfig
;;;1643       
;;;1644       /* Enable Crypto processor */
;;;1645       CRYP_Cmd(ENABLE);
000520  2001              MOVS     r0,#1
000522  f7fffffe          BL       CRYP_Cmd
;;;1646       
;;;1647       if(CRYP_GetCmdStatus() == DISABLE)
000526  f7fffffe          BL       CRYP_GetCmdStatus
00052a  2800              CMP      r0,#0
00052c  d02b              BEQ      |L2.1414|
;;;1648       {
;;;1649         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1650            the CRYP peripheral (please check the device sales type. */
;;;1651         return(ERROR);
;;;1652       }
;;;1653       
;;;1654       ctraddr = (uint32_t)ctr;
;;;1655       /* Write the counter block in the IN FIFO */
;;;1656       CRYP_DataIn(*(uint32_t*)(ctraddr));
00052e  9808              LDR      r0,[sp,#0x20]
000530  f7fffffe          BL       CRYP_DataIn
;;;1657       ctraddr+=4;
;;;1658       CRYP_DataIn(*(uint32_t*)(ctraddr));
000534  9809              LDR      r0,[sp,#0x24]
000536  f7fffffe          BL       CRYP_DataIn
;;;1659       ctraddr+=4;
;;;1660       CRYP_DataIn(*(uint32_t*)(ctraddr));
00053a  980a              LDR      r0,[sp,#0x28]
00053c  f7fffffe          BL       CRYP_DataIn
;;;1661       ctraddr+=4;
;;;1662       /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
;;;1663       CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
000540  980b              LDR      r0,[sp,#0x2c]
000542  f0207080          BIC      r0,r0,#0x1000000
000546  f7fffffe          BL       CRYP_DataIn
                  |L2.1354|
;;;1664       
;;;1665       /* Wait until the OFNE flag is reset */
;;;1666       while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
00054a  2004              MOVS     r0,#4
00054c  f7fffffe          BL       CRYP_GetFlagStatus
000550  2800              CMP      r0,#0
000552  d0fa              BEQ      |L2.1354|
                  |L2.1364|
;;;1667       {
;;;1668       }
;;;1669       
;;;1670       /* Read the Authentaication TAG (MAC) in the IN FIFO */
;;;1671       temptag[0] = CRYP_DataOut();
000554  f7fffffe          BL       CRYP_DataOut
;;;1672       temptag[1] = CRYP_DataOut();
000558  901a              STR      r0,[sp,#0x68]
00055a  f7fffffe          BL       CRYP_DataOut
;;;1673       temptag[2] = CRYP_DataOut();
00055e  901b              STR      r0,[sp,#0x6c]
000560  f7fffffe          BL       CRYP_DataOut
;;;1674       temptag[3] = CRYP_DataOut();
000564  901c              STR      r0,[sp,#0x70]
000566  f7fffffe          BL       CRYP_DataOut
;;;1675     }
;;;1676     
;;;1677     /* Copy temporary authentication TAG in user TAG buffer */
;;;1678     for(loopcounter = 0; (loopcounter < TAGSize); loopcounter++)
00056a  901d              STR      r0,[sp,#0x74]
00056c  2000              MOVS     r0,#0
00056e  a91a              ADD      r1,sp,#0x68           ;1159
000570  e003              B        |L2.1402|
                  |L2.1394|
;;;1679     {
;;;1680       /* Set the authentication TAG buffer */
;;;1681       *((uint8_t*)tagaddr+loopcounter) = *((uint8_t*)temptag+loopcounter);
000572  9a02              LDR      r2,[sp,#8]
000574  5c0b              LDRB     r3,[r1,r0]
000576  5413              STRB     r3,[r2,r0]
000578  1c40              ADDS     r0,r0,#1
                  |L2.1402|
00057a  4558              CMP      r0,r11                ;1678
00057c  d3f9              BCC      |L2.1394|
;;;1682     }
;;;1683     
;;;1684     /* Disable Crypto */
;;;1685     CRYP_Cmd(DISABLE);
00057e  2000              MOVS     r0,#0
000580  f7fffffe          BL       CRYP_Cmd
;;;1686   
;;;1687     return status;
000584  4648              MOV      r0,r9
                  |L2.1414|
;;;1688   }
000586  b02b              ADD      sp,sp,#0xac
000588  e8bd8ff0          POP      {r4-r11,pc}
;;;1689   
                          ENDP


                          AREA ||i.CRYP_AES_CTR||, CODE, READONLY, ALIGN=1

                  CRYP_AES_CTR PROC
;;;495      */
;;;496    ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;497                             uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
;;;498                             uint8_t *Output)
;;;499    {
000004  b097              SUB      sp,sp,#0x5c
;;;500      CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;501      CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;502      CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
;;;503      __IO uint32_t counter = 0;
000006  f04f0a00          MOV      r10,#0
00000a  e9dd5924          LDRD     r5,r9,[sp,#0x90]      ;499
00000e  9e26              LDR      r6,[sp,#0x98]
;;;504      uint32_t busystatus = 0;
;;;505      ErrorStatus status = SUCCESS;
000010  f04f0b01          MOV      r11,#1
;;;506      uint32_t keyaddr    = (uint32_t)Key;
000014  4614              MOV      r4,r2
;;;507      uint32_t inputaddr  = (uint32_t)Input;
;;;508      uint32_t outputaddr = (uint32_t)Output;
;;;509      uint32_t ivaddr     = (uint32_t)InitVectors;
000016  4688              MOV      r8,r1
;;;510      uint32_t i = 0;
000018  4657              MOV      r7,r10
;;;511    
;;;512      /* Crypto structures initialisation*/
;;;513      CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
00001a  a803              ADD      r0,sp,#0xc
00001c  f8cda008          STR      r10,[sp,#8]
000020  f7fffffe          BL       CRYP_KeyStructInit
;;;514    
;;;515      switch(Keysize)
000024  981a              LDR      r0,[sp,#0x68]
000026  2880              CMP      r0,#0x80
000028  d01e              BEQ      |L3.104|
00002a  f44f7180          MOV      r1,#0x100
00002e  28c0              CMP      r0,#0xc0
000030  d027              BEQ      |L3.130|
000032  4288              CMP      r0,r1
000034  d138              BNE      |L3.168|
;;;516      {
;;;517        case 128:
;;;518        AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
;;;519        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;520        keyaddr+=4;
;;;521        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;522        keyaddr+=4;
;;;523        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;524        keyaddr+=4;
;;;525        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;526        break;
;;;527        case 192:
;;;528        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
;;;529        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
;;;530        keyaddr+=4;
;;;531        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
;;;532        keyaddr+=4;
;;;533        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;534        keyaddr+=4;
;;;535        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;536        keyaddr+=4;
;;;537        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;538        keyaddr+=4;
;;;539        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;540        break;
;;;541        case 256:
;;;542        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
000036  0040              LSLS     r0,r0,#1
;;;543        AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
000038  9011              STR      r0,[sp,#0x44]
00003a  6820              LDR      r0,[r4,#0]
00003c  ba00              REV      r0,r0
;;;544        keyaddr+=4;
;;;545        AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
00003e  9003              STR      r0,[sp,#0xc]
000040  6860              LDR      r0,[r4,#4]
000042  ba00              REV      r0,r0
;;;546        keyaddr+=4;
;;;547        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000044  9004              STR      r0,[sp,#0x10]
000046  68a0              LDR      r0,[r4,#8]
000048  ba00              REV      r0,r0
;;;548        keyaddr+=4;
;;;549        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
00004a  9005              STR      r0,[sp,#0x14]
00004c  68e0              LDR      r0,[r4,#0xc]
00004e  ba00              REV      r0,r0
;;;550        keyaddr+=4;
;;;551        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000050  9006              STR      r0,[sp,#0x18]
000052  6920              LDR      r0,[r4,#0x10]
000054  ba00              REV      r0,r0
;;;552        keyaddr+=4;
;;;553        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000056  9007              STR      r0,[sp,#0x1c]
000058  6960              LDR      r0,[r4,#0x14]
00005a  ba00              REV      r0,r0
;;;554        keyaddr+=4;
;;;555        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
00005c  9008              STR      r0,[sp,#0x20]
00005e  69a0              LDR      r0,[r4,#0x18]
000060  ba00              REV      r0,r0
;;;556        keyaddr+=4;
;;;557        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000062  9009              STR      r0,[sp,#0x24]
;;;558        break;
000064  69e0              LDR      r0,[r4,#0x1c]
000066  e01d              B        |L3.164|
                  |L3.104|
000068  f8cda044          STR      r10,[sp,#0x44]        ;519
00006c  6820              LDR      r0,[r4,#0]            ;519
00006e  ba00              REV      r0,r0                 ;519
000070  9007              STR      r0,[sp,#0x1c]         ;521
000072  6860              LDR      r0,[r4,#4]            ;521
000074  ba00              REV      r0,r0                 ;521
000076  9008              STR      r0,[sp,#0x20]         ;523
000078  68a0              LDR      r0,[r4,#8]            ;523
00007a  ba00              REV      r0,r0                 ;523
00007c  9009              STR      r0,[sp,#0x24]         ;525
00007e  68e0              LDR      r0,[r4,#0xc]          ;526
000080  e010              B        |L3.164|
                  |L3.130|
000082  9111              STR      r1,[sp,#0x44]         ;529
000084  6820              LDR      r0,[r4,#0]            ;529
000086  ba00              REV      r0,r0                 ;529
000088  9005              STR      r0,[sp,#0x14]         ;531
00008a  6860              LDR      r0,[r4,#4]            ;531
00008c  ba00              REV      r0,r0                 ;531
00008e  9006              STR      r0,[sp,#0x18]         ;533
000090  68a0              LDR      r0,[r4,#8]            ;533
000092  ba00              REV      r0,r0                 ;533
000094  9007              STR      r0,[sp,#0x1c]         ;535
000096  68e0              LDR      r0,[r4,#0xc]          ;535
000098  ba00              REV      r0,r0                 ;535
00009a  9008              STR      r0,[sp,#0x20]         ;537
00009c  6920              LDR      r0,[r4,#0x10]         ;537
00009e  ba00              REV      r0,r0                 ;537
0000a0  9009              STR      r0,[sp,#0x24]         ;539
0000a2  6960              LDR      r0,[r4,#0x14]         ;539
                  |L3.164|
0000a4  ba00              REV      r0,r0                 ;525
0000a6  900a              STR      r0,[sp,#0x28]         ;525
                  |L3.168|
;;;559        default:
;;;560        break;
;;;561      }
;;;562      /* CRYP Initialization Vectors */
;;;563      AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
0000a8  f8d80000          LDR      r0,[r8,#0]
0000ac  ba00              REV      r0,r0
;;;564      ivaddr+=4;
;;;565      AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
0000ae  9012              STR      r0,[sp,#0x48]
0000b0  f8d81004          LDR      r1,[r8,#4]
0000b4  ba09              REV      r1,r1
;;;566      ivaddr+=4;
;;;567      AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
0000b6  9113              STR      r1,[sp,#0x4c]
0000b8  f8d81008          LDR      r1,[r8,#8]
0000bc  ba09              REV      r1,r1
;;;568      ivaddr+=4;
;;;569      AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
0000be  9114              STR      r1,[sp,#0x50]
0000c0  f8d8000c          LDR      r0,[r8,#0xc]
0000c4  ba00              REV      r0,r0
;;;570    
;;;571      /* Key Initialisation */
;;;572      CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
0000c6  9015              STR      r0,[sp,#0x54]
0000c8  a803              ADD      r0,sp,#0xc
0000ca  f7fffffe          BL       CRYP_KeyInit
;;;573    
;;;574      /*------------------ AES Decryption ------------------*/
;;;575      if(Mode == MODE_DECRYPT) /* AES decryption */
0000ce  9817              LDR      r0,[sp,#0x5c]
0000d0  b1d0              CBZ      r0,|L3.264|
;;;576      {
;;;577        /* Crypto Init for decryption process */
;;;578        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
;;;579      }
;;;580      /*------------------ AES Encryption ------------------*/
;;;581      else /* AES encryption */
;;;582      {
;;;583        /* Crypto Init for Encryption process */
;;;584        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
0000d2  f8cda038          STR      r10,[sp,#0x38]
                  |L3.214|
;;;585      }
;;;586      AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
0000d6  2030              MOVS     r0,#0x30
;;;587      AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
0000d8  900f              STR      r0,[sp,#0x3c]
0000da  2080              MOVS     r0,#0x80
;;;588      CRYP_Init(&AES_CRYP_InitStructure);
0000dc  9010              STR      r0,[sp,#0x40]
0000de  a80e              ADD      r0,sp,#0x38
0000e0  f7fffffe          BL       CRYP_Init
;;;589    
;;;590      /* CRYP Initialization Vectors */
;;;591      CRYP_IVInit(&AES_CRYP_IVInitStructure);
0000e4  a812              ADD      r0,sp,#0x48
0000e6  f7fffffe          BL       CRYP_IVInit
;;;592    
;;;593      /* Flush IN/OUT FIFOs */
;;;594      CRYP_FIFOFlush();
0000ea  f7fffffe          BL       CRYP_FIFOFlush
;;;595    
;;;596      /* Enable Crypto processor */
;;;597      CRYP_Cmd(ENABLE);
0000ee  2001              MOVS     r0,#1
0000f0  f7fffffe          BL       CRYP_Cmd
;;;598    
;;;599      if(CRYP_GetCmdStatus() == DISABLE)
0000f4  f7fffffe          BL       CRYP_GetCmdStatus
0000f8  2800              CMP      r0,#0
0000fa  d040              BEQ      |L3.382|
;;;600      {
;;;601        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;602           the CRYP peripheral (please check the device sales type. */
;;;603        return(ERROR);
;;;604      }
;;;605      
;;;606      for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
0000fc  f1b90f00          CMP      r9,#0
000100  d939              BLS      |L3.374|
;;;607      {
;;;608    
;;;609        /* Write the Input block in the IN FIFO */
;;;610        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;611        inputaddr+=4;
;;;612        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;613        inputaddr+=4;
;;;614        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;615        inputaddr+=4;
;;;616        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;617        inputaddr+=4;
;;;618        /* Wait until the complete message has been processed */
;;;619        counter = 0;
;;;620        do
;;;621        {
;;;622          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;623          counter++;
;;;624        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
000102  f44f3480          MOV      r4,#0x10000
000106  e002              B        |L3.270|
                  |L3.264|
000108  2004              MOVS     r0,#4                 ;578
00010a  900e              STR      r0,[sp,#0x38]         ;578
00010c  e7e3              B        |L3.214|
                  |L3.270|
00010e  6828              LDR      r0,[r5,#0]            ;610
000110  f7fffffe          BL       CRYP_DataIn
000114  f8550f04          LDR      r0,[r5,#4]!           ;612
000118  f7fffffe          BL       CRYP_DataIn
00011c  f8550f04          LDR      r0,[r5,#4]!           ;614
000120  f7fffffe          BL       CRYP_DataIn
000124  f8550f04          LDR      r0,[r5,#4]!           ;616
000128  f7fffffe          BL       CRYP_DataIn
00012c  1d2d              ADDS     r5,r5,#4              ;619
00012e  f8cda008          STR      r10,[sp,#8]           ;619
                  |L3.306|
000132  2010              MOVS     r0,#0x10              ;622
000134  f7fffffe          BL       CRYP_GetFlagStatus
000138  9902              LDR      r1,[sp,#8]            ;623
00013a  1c49              ADDS     r1,r1,#1              ;623
00013c  9102              STR      r1,[sp,#8]
00013e  42a1              CMP      r1,r4
000140  d002              BEQ      |L3.328|
000142  2800              CMP      r0,#0
000144  d1f5              BNE      |L3.306|
000146  e003              B        |L3.336|
                  |L3.328|
;;;625    
;;;626        if (busystatus != RESET)
000148  b110              CBZ      r0,|L3.336|
;;;627       {
;;;628           status = ERROR;
00014a  f04f0b00          MOV      r11,#0
00014e  e00c              B        |L3.362|
                  |L3.336|
;;;629        }
;;;630        else
;;;631        {
;;;632    
;;;633          /* Read the Output block from the Output FIFO */
;;;634          *(uint32_t*)(outputaddr) = CRYP_DataOut();
000150  f7fffffe          BL       CRYP_DataOut
;;;635          outputaddr+=4;
;;;636          *(uint32_t*)(outputaddr) = CRYP_DataOut();
000154  6030              STR      r0,[r6,#0]
000156  f7fffffe          BL       CRYP_DataOut
;;;637          outputaddr+=4;
;;;638          *(uint32_t*)(outputaddr) = CRYP_DataOut();
00015a  6070              STR      r0,[r6,#4]
00015c  f7fffffe          BL       CRYP_DataOut
;;;639          outputaddr+=4;
;;;640          *(uint32_t*)(outputaddr) = CRYP_DataOut();
000160  60b0              STR      r0,[r6,#8]
000162  f7fffffe          BL       CRYP_DataOut
000166  60f0              STR      r0,[r6,#0xc]
000168  3610              ADDS     r6,r6,#0x10
                  |L3.362|
00016a  3710              ADDS     r7,r7,#0x10
00016c  454f              CMP      r7,r9                 ;606
00016e  d202              BCS      |L3.374|
000170  f1bb0f00          CMP      r11,#0                ;606
000174  d1cb              BNE      |L3.270|
                  |L3.374|
;;;641          outputaddr+=4;
;;;642        }
;;;643      }
;;;644      /* Disable Crypto */
;;;645      CRYP_Cmd(DISABLE);
000176  2000              MOVS     r0,#0
000178  f7fffffe          BL       CRYP_Cmd
;;;646    
;;;647      return status;
00017c  4658              MOV      r0,r11
                  |L3.382|
;;;648    }
00017e  b01b              ADD      sp,sp,#0x6c
000180  e8bd8ff0          POP      {r4-r11,pc}
;;;649    
                          ENDP


                          AREA ||i.CRYP_AES_ECB||, CODE, READONLY, ALIGN=1

                  CRYP_AES_ECB PROC
;;;105      */
;;;106    ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;107                             uint8_t* Input, uint32_t Ilength, uint8_t* Output)
;;;108    {
000004  b08f              SUB      sp,sp,#0x3c
000006  4683              MOV      r11,r0
000008  e9dd9018          LDRD     r9,r0,[sp,#0x60]
;;;109      CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;110      CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;111      __IO uint32_t counter = 0;
00000c  2700              MOVS     r7,#0
;;;112      uint32_t busystatus = 0;
;;;113      ErrorStatus status = SUCCESS;
;;;114      uint32_t keyaddr    = (uint32_t)Key;
;;;115      uint32_t inputaddr  = (uint32_t)Input;
;;;116      uint32_t outputaddr = (uint32_t)Output;
00000e  4680              MOV      r8,r0
000010  4692              MOV      r10,r2                ;108
000012  2601              MOVS     r6,#1                 ;113
000014  460c              MOV      r4,r1                 ;114
000016  461d              MOV      r5,r3                 ;115
;;;117      uint32_t i = 0;
;;;118    
;;;119      /* Crypto structures initialisation*/
;;;120      CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
000018  a803              ADD      r0,sp,#0xc
00001a  9702              STR      r7,[sp,#8]
00001c  f7fffffe          BL       CRYP_KeyStructInit
;;;121    
;;;122      switch(Keysize)
000020  4651              MOV      r1,r10
000022  f1ba0f80          CMP      r10,#0x80
000026  d01d              BEQ      |L4.100|
000028  0230              LSLS     r0,r6,#8
00002a  29c0              CMP      r1,#0xc0
00002c  d026              BEQ      |L4.124|
00002e  4582              CMP      r10,r0
000030  d137              BNE      |L4.162|
;;;123      {
;;;124        case 128:
;;;125        AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
;;;126        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;127        keyaddr+=4;
;;;128        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;129        keyaddr+=4;
;;;130        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;131        keyaddr+=4;
;;;132        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;133        break;
;;;134        case 192:
;;;135        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
;;;136        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
;;;137        keyaddr+=4;
;;;138        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
;;;139        keyaddr+=4;
;;;140        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;141        keyaddr+=4;
;;;142        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;143        keyaddr+=4;
;;;144        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;145        keyaddr+=4;
;;;146        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;147        break;
;;;148        case 256:
;;;149        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
000032  0040              LSLS     r0,r0,#1
;;;150        AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
000034  900e              STR      r0,[sp,#0x38]
000036  6820              LDR      r0,[r4,#0]
000038  ba00              REV      r0,r0
;;;151        keyaddr+=4;
;;;152        AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
00003a  9003              STR      r0,[sp,#0xc]
00003c  6860              LDR      r0,[r4,#4]
00003e  ba00              REV      r0,r0
;;;153        keyaddr+=4;
;;;154        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000040  9004              STR      r0,[sp,#0x10]
000042  68a0              LDR      r0,[r4,#8]
000044  ba00              REV      r0,r0
;;;155        keyaddr+=4;
;;;156        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000046  9005              STR      r0,[sp,#0x14]
000048  68e0              LDR      r0,[r4,#0xc]
00004a  ba00              REV      r0,r0
;;;157        keyaddr+=4;
;;;158        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
00004c  9006              STR      r0,[sp,#0x18]
00004e  6920              LDR      r0,[r4,#0x10]
000050  ba00              REV      r0,r0
;;;159        keyaddr+=4;
;;;160        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000052  9007              STR      r0,[sp,#0x1c]
000054  6960              LDR      r0,[r4,#0x14]
000056  ba00              REV      r0,r0
;;;161        keyaddr+=4;
;;;162        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000058  9008              STR      r0,[sp,#0x20]
00005a  69a0              LDR      r0,[r4,#0x18]
00005c  ba00              REV      r0,r0
;;;163        keyaddr+=4;
;;;164        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
00005e  9009              STR      r0,[sp,#0x24]
;;;165        break;
000060  69e0              LDR      r0,[r4,#0x1c]
000062  e01c              B        |L4.158|
                  |L4.100|
000064  970e              STR      r7,[sp,#0x38]         ;126
000066  6820              LDR      r0,[r4,#0]            ;126
000068  ba00              REV      r0,r0                 ;126
00006a  9007              STR      r0,[sp,#0x1c]         ;128
00006c  6860              LDR      r0,[r4,#4]            ;128
00006e  ba00              REV      r0,r0                 ;128
000070  9008              STR      r0,[sp,#0x20]         ;130
000072  68a0              LDR      r0,[r4,#8]            ;130
000074  ba00              REV      r0,r0                 ;130
000076  9009              STR      r0,[sp,#0x24]         ;132
000078  68e0              LDR      r0,[r4,#0xc]          ;133
00007a  e010              B        |L4.158|
                  |L4.124|
00007c  900e              STR      r0,[sp,#0x38]         ;136
00007e  6820              LDR      r0,[r4,#0]            ;136
000080  ba00              REV      r0,r0                 ;136
000082  9005              STR      r0,[sp,#0x14]         ;138
000084  6860              LDR      r0,[r4,#4]            ;138
000086  ba00              REV      r0,r0                 ;138
000088  9006              STR      r0,[sp,#0x18]         ;140
00008a  68a0              LDR      r0,[r4,#8]            ;140
00008c  ba00              REV      r0,r0                 ;140
00008e  9007              STR      r0,[sp,#0x1c]         ;142
000090  68e0              LDR      r0,[r4,#0xc]          ;142
000092  ba00              REV      r0,r0                 ;142
000094  9008              STR      r0,[sp,#0x20]         ;144
000096  6920              LDR      r0,[r4,#0x10]         ;144
000098  ba00              REV      r0,r0                 ;144
00009a  9009              STR      r0,[sp,#0x24]         ;146
00009c  6960              LDR      r0,[r4,#0x14]         ;146
                  |L4.158|
00009e  ba00              REV      r0,r0                 ;132
0000a0  900a              STR      r0,[sp,#0x28]         ;132
                  |L4.162|
;;;166        default:
;;;167        break;
;;;168      }
;;;169    
;;;170      /*------------------ AES Decryption ------------------*/
;;;171      if(Mode == MODE_DECRYPT) /* AES decryption */
;;;172      {
;;;173        /* Flush IN/OUT FIFOs */
;;;174        CRYP_FIFOFlush();
;;;175    
;;;176        /* Crypto Init for Key preparation for decryption process */
;;;177        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
;;;178        AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
;;;179        AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
;;;180        CRYP_Init(&AES_CRYP_InitStructure);
;;;181    
;;;182        /* Key Initialisation */
;;;183        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
;;;184    
;;;185        /* Enable Crypto processor */
;;;186        CRYP_Cmd(ENABLE);
;;;187    
;;;188        /* wait until the Busy flag is RESET */
;;;189        do
;;;190        {
;;;191          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;192          counter++;
;;;193        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
0000a2  f44f3a80          MOV      r10,#0x10000
0000a6  f1bb0f00          CMP      r11,#0                ;171
0000aa  d015              BEQ      |L4.216|
;;;194    
;;;195        if (busystatus != RESET)
;;;196       {
;;;197           status = ERROR;
;;;198        }
;;;199        else
;;;200        {
;;;201          /* Crypto Init for decryption process */  
;;;202          AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
;;;203        }
;;;204      }
;;;205      /*------------------ AES Encryption ------------------*/
;;;206      else /* AES encryption */
;;;207      {
;;;208    
;;;209        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
0000ac  a803              ADD      r0,sp,#0xc
0000ae  f7fffffe          BL       CRYP_KeyInit
;;;210    
;;;211        /* Crypto Init for Encryption process */
;;;212        AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
0000b2  970b              STR      r7,[sp,#0x2c]
                  |L4.180|
;;;213      }
;;;214    
;;;215      AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
0000b4  2020              MOVS     r0,#0x20
;;;216      AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
0000b6  900c              STR      r0,[sp,#0x30]
0000b8  2080              MOVS     r0,#0x80
;;;217      CRYP_Init(&AES_CRYP_InitStructure);
0000ba  900d              STR      r0,[sp,#0x34]
0000bc  a80b              ADD      r0,sp,#0x2c
0000be  f7fffffe          BL       CRYP_Init
;;;218    
;;;219      /* Flush IN/OUT FIFOs */
;;;220      CRYP_FIFOFlush();
0000c2  f7fffffe          BL       CRYP_FIFOFlush
;;;221    
;;;222      /* Enable Crypto processor */
;;;223      CRYP_Cmd(ENABLE);
0000c6  2001              MOVS     r0,#1
0000c8  f7fffffe          BL       CRYP_Cmd
;;;224    
;;;225      if(CRYP_GetCmdStatus() == DISABLE)
0000cc  f7fffffe          BL       CRYP_GetCmdStatus
0000d0  2800              CMP      r0,#0
0000d2  d05a              BEQ      |L4.394|
;;;226      {
;;;227        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;228           the CRYP peripheral (please check the device sales type. */
;;;229        return(ERROR);
;;;230      }
;;;231      
;;;232      for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
0000d4  2400              MOVS     r4,#0
0000d6  e050              B        |L4.378|
                  |L4.216|
0000d8  f7fffffe          BL       CRYP_FIFOFlush
0000dc  2404              MOVS     r4,#4                 ;177
0000de  2038              MOVS     r0,#0x38              ;178
0000e0  970d              STR      r7,[sp,#0x34]         ;179
0000e2  e9cd400b          STRD     r4,r0,[sp,#0x2c]      ;179
0000e6  a80b              ADD      r0,sp,#0x2c           ;180
0000e8  f7fffffe          BL       CRYP_Init
0000ec  a803              ADD      r0,sp,#0xc            ;183
0000ee  f7fffffe          BL       CRYP_KeyInit
0000f2  2001              MOVS     r0,#1                 ;186
0000f4  f7fffffe          BL       CRYP_Cmd
                  |L4.248|
0000f8  2010              MOVS     r0,#0x10              ;191
0000fa  f7fffffe          BL       CRYP_GetFlagStatus
0000fe  9902              LDR      r1,[sp,#8]            ;192
000100  1c49              ADDS     r1,r1,#1              ;192
000102  9102              STR      r1,[sp,#8]            ;193
000104  4551              CMP      r1,r10                ;193
000106  d002              BEQ      |L4.270|
000108  2800              CMP      r0,#0                 ;193
00010a  d1f5              BNE      |L4.248|
00010c  e002              B        |L4.276|
                  |L4.270|
00010e  b108              CBZ      r0,|L4.276|
000110  2600              MOVS     r6,#0                 ;197
000112  e7cf              B        |L4.180|
                  |L4.276|
000114  940b              STR      r4,[sp,#0x2c]         ;202
000116  e7cd              B        |L4.180|
                  |L4.280|
;;;233      {
;;;234    
;;;235        /* Write the Input block in the IN FIFO */
;;;236        CRYP_DataIn(*(uint32_t*)(inputaddr));
000118  6828              LDR      r0,[r5,#0]
00011a  f7fffffe          BL       CRYP_DataIn
;;;237        inputaddr+=4;
;;;238        CRYP_DataIn(*(uint32_t*)(inputaddr));
00011e  f8550f04          LDR      r0,[r5,#4]!
000122  f7fffffe          BL       CRYP_DataIn
;;;239        inputaddr+=4;
;;;240        CRYP_DataIn(*(uint32_t*)(inputaddr));
000126  f8550f04          LDR      r0,[r5,#4]!
00012a  f7fffffe          BL       CRYP_DataIn
;;;241        inputaddr+=4;
;;;242        CRYP_DataIn(*(uint32_t*)(inputaddr));
00012e  f8550f04          LDR      r0,[r5,#4]!
000132  f7fffffe          BL       CRYP_DataIn
;;;243        inputaddr+=4;
;;;244    
;;;245        /* Wait until the complete message has been processed */
;;;246        counter = 0;
000136  1d2d              ADDS     r5,r5,#4
000138  9702              STR      r7,[sp,#8]
                  |L4.314|
;;;247        do
;;;248        {
;;;249          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
00013a  2010              MOVS     r0,#0x10
00013c  f7fffffe          BL       CRYP_GetFlagStatus
000140  4601              MOV      r1,r0
;;;250          counter++;
000142  9802              LDR      r0,[sp,#8]
000144  1c40              ADDS     r0,r0,#1
;;;251        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
000146  9002              STR      r0,[sp,#8]
000148  4550              CMP      r0,r10
00014a  d002              BEQ      |L4.338|
00014c  2900              CMP      r1,#0
00014e  d1f4              BNE      |L4.314|
000150  e002              B        |L4.344|
                  |L4.338|
;;;252    
;;;253        if (busystatus != RESET)
000152  b109              CBZ      r1,|L4.344|
;;;254       {
;;;255           status = ERROR;
000154  2600              MOVS     r6,#0
000156  e00f              B        |L4.376|
                  |L4.344|
;;;256        }
;;;257        else
;;;258        {
;;;259    
;;;260          /* Read the Output block from the Output FIFO */
;;;261          *(uint32_t*)(outputaddr) = CRYP_DataOut();
000158  f7fffffe          BL       CRYP_DataOut
00015c  f8480b04          STR      r0,[r8],#4
;;;262          outputaddr+=4;
;;;263          *(uint32_t*)(outputaddr) = CRYP_DataOut();
000160  f7fffffe          BL       CRYP_DataOut
000164  f8480b04          STR      r0,[r8],#4
;;;264          outputaddr+=4;
;;;265          *(uint32_t*)(outputaddr) = CRYP_DataOut();
000168  f7fffffe          BL       CRYP_DataOut
00016c  f8480b04          STR      r0,[r8],#4
;;;266          outputaddr+=4;
;;;267          *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
000170  f7fffffe          BL       CRYP_DataOut
000174  f8480b04          STR      r0,[r8],#4
                  |L4.376|
000178  3410              ADDS     r4,r4,#0x10
                  |L4.378|
00017a  454c              CMP      r4,r9                 ;232
00017c  d201              BCS      |L4.386|
00017e  2e00              CMP      r6,#0                 ;232
000180  d1ca              BNE      |L4.280|
                  |L4.386|
;;;268          outputaddr+=4;
;;;269        }
;;;270      }
;;;271    
;;;272      /* Disable Crypto */
;;;273      CRYP_Cmd(DISABLE);
000182  2000              MOVS     r0,#0
000184  f7fffffe          BL       CRYP_Cmd
;;;274    
;;;275      return status; 
000188  4630              MOV      r0,r6
                  |L4.394|
;;;276    }
00018a  b00f              ADD      sp,sp,#0x3c
00018c  e8bd8ff0          POP      {r4-r11,pc}
;;;277    
                          ENDP


                          AREA ||i.CRYP_AES_GCM||, CODE, READONLY, ALIGN=2

                  CRYP_AES_GCM PROC
;;;669      */
;;;670    ErrorStatus CRYP_AES_GCM(uint8_t Mode, uint8_t InitVectors[16],
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;671                             uint8_t *Key, uint16_t Keysize,
;;;672                             uint8_t *Input, uint32_t ILength,
;;;673                             uint8_t *Header, uint32_t HLength,
;;;674                             uint8_t *Output, uint8_t *AuthTAG)
;;;675    {
000004  b09b              SUB      sp,sp,#0x6c
;;;676      CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;677      CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;678      CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
;;;679      __IO uint32_t counter = 0;
000006  2000              MOVS     r0,#0
000008  e9dd632b          LDRD     r6,r3,[sp,#0xac]      ;675
00000c  e9dd7529          LDRD     r7,r5,[sp,#0xa4]      ;675
;;;680      uint32_t busystatus = 0;
;;;681      ErrorStatus status = SUCCESS;
;;;682      uint32_t keyaddr    = (uint32_t)Key;
;;;683      uint32_t inputaddr  = (uint32_t)Input;
;;;684      uint32_t outputaddr = (uint32_t)Output;
;;;685      uint32_t ivaddr     = (uint32_t)InitVectors;
000010  9111              STR      r1,[sp,#0x44]
000012  00f1              LSLS     r1,r6,#3
000014  f8dd90a0          LDR      r9,[sp,#0xa0]         ;679
;;;686      uint32_t headeraddr = (uint32_t)Header;
;;;687      uint32_t tagaddr = (uint32_t)AuthTAG;
;;;688      uint64_t headerlength = HLength * 8;/* header length in bits */
000018  910e              STR      r1,[sp,#0x38]
00001a  9000              STR      r0,[sp,#0]            ;685
00001c  00f9              LSLS     r1,r7,#3
;;;689      uint64_t inputlength = ILength * 8;/* input length in bits */
00001e  4683              MOV      r11,r0
000020  f04f0801          MOV      r8,#1                 ;681
000024  4614              MOV      r4,r2                 ;682
000026  469a              MOV      r10,r3                ;684
;;;690      uint32_t loopcounter = 0;
;;;691    
;;;692      /* Crypto structures initialisation*/
;;;693      CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
000028  a804              ADD      r0,sp,#0x10
00002a  910c              STR      r1,[sp,#0x30]
00002c  f7fffffe          BL       CRYP_KeyStructInit
;;;694    
;;;695      switch(Keysize)
000030  981e              LDR      r0,[sp,#0x78]
000032  2880              CMP      r0,#0x80
000034  d01e              BEQ      |L5.116|
000036  f44f7180          MOV      r1,#0x100
00003a  28c0              CMP      r0,#0xc0
00003c  d027              BEQ      |L5.142|
00003e  4288              CMP      r0,r1
000040  d138              BNE      |L5.180|
;;;696      {
;;;697        case 128:
;;;698        AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
;;;699        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;700        keyaddr+=4;
;;;701        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;702        keyaddr+=4;
;;;703        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;704        keyaddr+=4;
;;;705        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;706        break;
;;;707        case 192:
;;;708        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
;;;709        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
;;;710        keyaddr+=4;
;;;711        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
;;;712        keyaddr+=4;
;;;713        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;714        keyaddr+=4;
;;;715        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;716        keyaddr+=4;
;;;717        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;718        keyaddr+=4;
;;;719        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;720        break;
;;;721        case 256:
;;;722        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
000042  0040              LSLS     r0,r0,#1
;;;723        AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
000044  9015              STR      r0,[sp,#0x54]
000046  6820              LDR      r0,[r4,#0]
000048  ba00              REV      r0,r0
;;;724        keyaddr+=4;
;;;725        AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
00004a  9004              STR      r0,[sp,#0x10]
00004c  6860              LDR      r0,[r4,#4]
00004e  ba00              REV      r0,r0
;;;726        keyaddr+=4;
;;;727        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000050  9005              STR      r0,[sp,#0x14]
000052  68a0              LDR      r0,[r4,#8]
000054  ba00              REV      r0,r0
;;;728        keyaddr+=4;
;;;729        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000056  9006              STR      r0,[sp,#0x18]
000058  68e0              LDR      r0,[r4,#0xc]
00005a  ba00              REV      r0,r0
;;;730        keyaddr+=4;
;;;731        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
00005c  9007              STR      r0,[sp,#0x1c]
00005e  6920              LDR      r0,[r4,#0x10]
000060  ba00              REV      r0,r0
;;;732        keyaddr+=4;
;;;733        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000062  9008              STR      r0,[sp,#0x20]
000064  6960              LDR      r0,[r4,#0x14]
000066  ba00              REV      r0,r0
;;;734        keyaddr+=4;
;;;735        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000068  9009              STR      r0,[sp,#0x24]
00006a  69a0              LDR      r0,[r4,#0x18]
00006c  ba00              REV      r0,r0
;;;736        keyaddr+=4;
;;;737        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
00006e  900a              STR      r0,[sp,#0x28]
;;;738        break;
000070  69e0              LDR      r0,[r4,#0x1c]
000072  e01d              B        |L5.176|
                  |L5.116|
000074  f8cdb054          STR      r11,[sp,#0x54]        ;699
000078  6820              LDR      r0,[r4,#0]            ;699
00007a  ba00              REV      r0,r0                 ;699
00007c  9008              STR      r0,[sp,#0x20]         ;701
00007e  6860              LDR      r0,[r4,#4]            ;701
000080  ba00              REV      r0,r0                 ;701
000082  9009              STR      r0,[sp,#0x24]         ;703
000084  68a0              LDR      r0,[r4,#8]            ;703
000086  ba00              REV      r0,r0                 ;703
000088  900a              STR      r0,[sp,#0x28]         ;705
00008a  68e0              LDR      r0,[r4,#0xc]          ;706
00008c  e010              B        |L5.176|
                  |L5.142|
00008e  9115              STR      r1,[sp,#0x54]         ;709
000090  6820              LDR      r0,[r4,#0]            ;709
000092  ba00              REV      r0,r0                 ;709
000094  9006              STR      r0,[sp,#0x18]         ;711
000096  6860              LDR      r0,[r4,#4]            ;711
000098  ba00              REV      r0,r0                 ;711
00009a  9007              STR      r0,[sp,#0x1c]         ;713
00009c  68a0              LDR      r0,[r4,#8]            ;713
00009e  ba00              REV      r0,r0                 ;713
0000a0  9008              STR      r0,[sp,#0x20]         ;715
0000a2  68e0              LDR      r0,[r4,#0xc]          ;715
0000a4  ba00              REV      r0,r0                 ;715
0000a6  9009              STR      r0,[sp,#0x24]         ;717
0000a8  6920              LDR      r0,[r4,#0x10]         ;717
0000aa  ba00              REV      r0,r0                 ;717
0000ac  900a              STR      r0,[sp,#0x28]         ;719
0000ae  6960              LDR      r0,[r4,#0x14]         ;719
                  |L5.176|
0000b0  ba00              REV      r0,r0                 ;705
0000b2  900b              STR      r0,[sp,#0x2c]         ;705
                  |L5.180|
;;;739        default:
;;;740        break;
;;;741      }
;;;742      
;;;743      /* CRYP Initialization Vectors */
;;;744      AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
0000b4  9811              LDR      r0,[sp,#0x44]
;;;745      ivaddr+=4;
;;;746      AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
;;;747      ivaddr+=4;
;;;748      AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
;;;749      ivaddr+=4;
;;;750      AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
;;;751      
;;;752      /*------------------ AES Encryption ------------------*/
;;;753      if(Mode == MODE_ENCRYPT) /* AES encryption */
;;;754      {
;;;755        /* Flush IN/OUT FIFOs */
;;;756        CRYP_FIFOFlush();
;;;757        
;;;758        /* Key Initialisation */
;;;759        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
;;;760        
;;;761        /* CRYP Initialization Vectors */
;;;762        CRYP_IVInit(&AES_CRYP_IVInitStructure);
;;;763        
;;;764        /* Crypto Init for Key preparation for decryption process */
;;;765        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
;;;766        AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
0000b6  f44f2400          MOV      r4,#0x80000
0000ba  6800              LDR      r0,[r0,#0]            ;744
0000bc  ba00              REV      r0,r0                 ;744
0000be  9016              STR      r0,[sp,#0x58]         ;745
0000c0  9811              LDR      r0,[sp,#0x44]         ;746
0000c2  6841              LDR      r1,[r0,#4]            ;746
0000c4  ba09              REV      r1,r1                 ;746
0000c6  9117              STR      r1,[sp,#0x5c]         ;748
0000c8  6881              LDR      r1,[r0,#8]            ;748
0000ca  ba09              REV      r1,r1                 ;748
0000cc  9118              STR      r1,[sp,#0x60]         ;750
0000ce  68c0              LDR      r0,[r0,#0xc]          ;750
0000d0  ba00              REV      r0,r0                 ;750
0000d2  9019              STR      r0,[sp,#0x64]         ;753
0000d4  981b              LDR      r0,[sp,#0x6c]         ;753
0000d6  2801              CMP      r0,#1                 ;753
0000d8  d029              BEQ      |L5.302|
;;;767        AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
;;;768        CRYP_Init(&AES_CRYP_InitStructure);
;;;769        
;;;770        /***************************** Init phase *********************************/
;;;771        /* Select init phase */
;;;772        CRYP_PhaseConfig(CRYP_Phase_Init);
;;;773        
;;;774        /* Enable Crypto processor */
;;;775        CRYP_Cmd(ENABLE);
;;;776        
;;;777        /* Wait for CRYPEN bit to be 0 */
;;;778        while(CRYP_GetCmdStatus() == ENABLE)
;;;779        {
;;;780        }
;;;781        
;;;782        /***************************** header phase *******************************/
;;;783        if(HLength != 0)
;;;784        {
;;;785          /* Select header phase */
;;;786          CRYP_PhaseConfig(CRYP_Phase_Header);
;;;787          
;;;788          /* Enable Crypto processor */
;;;789          CRYP_Cmd(ENABLE);
;;;790          
;;;791          if(CRYP_GetCmdStatus() == DISABLE)
;;;792          {
;;;793             /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;794                the CRYP peripheral (please check the device sales type. */
;;;795             return(ERROR);
;;;796          }
;;;797          
;;;798          for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
;;;799          {
;;;800            /* Wait until the IFEM flag is reset */
;;;801            while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
;;;802            {
;;;803            }
;;;804            
;;;805            /* Write the Input block in the IN FIFO */
;;;806            CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;807            headeraddr+=4;
;;;808            CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;809            headeraddr+=4;
;;;810            CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;811            headeraddr+=4;
;;;812            CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;813            headeraddr+=4;
;;;814          }
;;;815          
;;;816          /* Wait until the complete message has been processed */
;;;817          counter = 0;
;;;818          do
;;;819          {
;;;820            busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;821            counter++;
;;;822          }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;823    
;;;824          if (busystatus != RESET)
;;;825          {
;;;826            status = ERROR;
;;;827          }
;;;828        }
;;;829        
;;;830        /**************************** payload phase *******************************/
;;;831        if(ILength != 0)
;;;832        {
;;;833          /* Select payload phase */
;;;834          CRYP_PhaseConfig(CRYP_Phase_Payload);
;;;835          
;;;836          /* Enable Crypto processor */
;;;837          CRYP_Cmd(ENABLE);
;;;838          
;;;839          if(CRYP_GetCmdStatus() == DISABLE)
;;;840          {
;;;841            /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;842               the CRYP peripheral (please check the device sales type. */
;;;843            return(ERROR);
;;;844          }
;;;845          
;;;846          for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
;;;847          {
;;;848            /* Wait until the IFEM flag is reset */
;;;849            while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
;;;850            {
;;;851            }
;;;852            /* Write the Input block in the IN FIFO */
;;;853            CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;854            inputaddr+=4;
;;;855            CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;856            inputaddr+=4;
;;;857            CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;858            inputaddr+=4;
;;;859            CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;860            inputaddr+=4;
;;;861            
;;;862            /* Wait until the complete message has been processed */
;;;863            counter = 0;
;;;864            do
;;;865            {
;;;866              busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;867              counter++;
;;;868            }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;869    
;;;870            if (busystatus != RESET)
;;;871            {
;;;872              status = ERROR;
;;;873            }
;;;874            else
;;;875            {
;;;876              /* Wait until the OFNE flag is reset */
;;;877              while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
;;;878              {
;;;879              }
;;;880              
;;;881              /* Read the Output block from the Output FIFO */
;;;882              *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;883              outputaddr+=4;
;;;884              *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;885              outputaddr+=4;
;;;886              *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;887              outputaddr+=4;
;;;888              *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;889              outputaddr+=4;
;;;890            }
;;;891          }
;;;892        }
;;;893        
;;;894        /***************************** final phase ********************************/
;;;895        /* Select final phase */
;;;896        CRYP_PhaseConfig(CRYP_Phase_Final);
;;;897        
;;;898        /* Enable Crypto processor */
;;;899        CRYP_Cmd(ENABLE);
;;;900        
;;;901        if(CRYP_GetCmdStatus() == DISABLE)
;;;902        {
;;;903          /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;904             the CRYP peripheral (please check the device sales type. */
;;;905          return(ERROR);
;;;906        }
;;;907        
;;;908        /* Write number of bits concatenated with header in the IN FIFO */
;;;909        CRYP_DataIn(__REV(headerlength>>32));
;;;910        CRYP_DataIn(__REV(headerlength));
;;;911        CRYP_DataIn(__REV(inputlength>>32));
;;;912        CRYP_DataIn(__REV(inputlength));
;;;913        /* Wait until the OFNE flag is reset */
;;;914        while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
;;;915        {
;;;916        }
;;;917        
;;;918        tagaddr = (uint32_t)AuthTAG;
;;;919        /* Read the Auth TAG in the IN FIFO */
;;;920        *(uint32_t*)(tagaddr) = CRYP_DataOut();
;;;921        tagaddr+=4;
;;;922        *(uint32_t*)(tagaddr) = CRYP_DataOut();
;;;923        tagaddr+=4;
;;;924        *(uint32_t*)(tagaddr) = CRYP_DataOut();
;;;925        tagaddr+=4;
;;;926        *(uint32_t*)(tagaddr) = CRYP_DataOut();
;;;927        tagaddr+=4;
;;;928      }
;;;929      /*------------------ AES Decryption ------------------*/
;;;930      else /* AES decryption */
;;;931      {
;;;932        /* Flush IN/OUT FIFOs */
;;;933        CRYP_FIFOFlush();
0000da  f7fffffe          BL       CRYP_FIFOFlush
;;;934        
;;;935        /* Key Initialisation */
;;;936        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
0000de  a804              ADD      r0,sp,#0x10
0000e0  f7fffffe          BL       CRYP_KeyInit
;;;937        
;;;938        /* CRYP Initialization Vectors */
;;;939        CRYP_IVInit(&AES_CRYP_IVInitStructure);
0000e4  a816              ADD      r0,sp,#0x58
0000e6  f7fffffe          BL       CRYP_IVInit
;;;940        
;;;941        /* Crypto Init for Key preparation for decryption process */
;;;942        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
0000ea  2004              MOVS     r0,#4
0000ec  e9cd0412          STRD     r0,r4,[sp,#0x48]
;;;943        AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
;;;944        AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
0000f0  2080              MOVS     r0,#0x80
;;;945        CRYP_Init(&AES_CRYP_InitStructure);
0000f2  9014              STR      r0,[sp,#0x50]
0000f4  a812              ADD      r0,sp,#0x48
0000f6  f7fffffe          BL       CRYP_Init
;;;946        
;;;947        /***************************** Init phase *********************************/
;;;948        /* Select init phase */
;;;949        CRYP_PhaseConfig(CRYP_Phase_Init);
0000fa  2000              MOVS     r0,#0
0000fc  f7fffffe          BL       CRYP_PhaseConfig
;;;950        
;;;951        /* Enable Crypto processor */
;;;952        CRYP_Cmd(ENABLE);
000100  2001              MOVS     r0,#1
000102  f7fffffe          BL       CRYP_Cmd
;;;953        
;;;954        /* Wait for CRYPEN bit to be 0 */
;;;955        while(CRYP_GetCmdStatus() == ENABLE)
000106  bf00              NOP      
                  |L5.264|
000108  f7fffffe          BL       CRYP_GetCmdStatus
00010c  2801              CMP      r0,#1
00010e  d0fb              BEQ      |L5.264|
;;;956        {
;;;957        }
;;;958        
;;;959        /***************************** header phase *******************************/
;;;960        if(HLength != 0)
000110  2e00              CMP      r6,#0
000112  d07d              BEQ      |L5.528|
;;;961        {
;;;962          /* Select header phase */
;;;963          CRYP_PhaseConfig(CRYP_Phase_Header);
000114  f44f3080          MOV      r0,#0x10000
000118  f7fffffe          BL       CRYP_PhaseConfig
;;;964          
;;;965          /* Enable Crypto processor */
;;;966          CRYP_Cmd(ENABLE);
00011c  2001              MOVS     r0,#1
00011e  f7fffffe          BL       CRYP_Cmd
;;;967          
;;;968          if(CRYP_GetCmdStatus() == DISABLE)
000122  f7fffffe          BL       CRYP_GetCmdStatus
000126  2800              CMP      r0,#0
000128  d073              BEQ      |L5.530|
;;;969          {
;;;970            /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;971               the CRYP peripheral (please check the device sales type. */
;;;972            return(ERROR);
;;;973          }
;;;974          
;;;975          for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
00012a  2400              MOVS     r4,#0
00012c  e0e3              B        |L5.758|
                  |L5.302|
00012e  f7fffffe          BL       CRYP_FIFOFlush
000132  a804              ADD      r0,sp,#0x10           ;759
000134  f7fffffe          BL       CRYP_KeyInit
000138  a816              ADD      r0,sp,#0x58           ;762
00013a  f7fffffe          BL       CRYP_IVInit
00013e  2000              MOVS     r0,#0                 ;765
000140  e9cd0412          STRD     r0,r4,[sp,#0x48]      ;765
000144  2080              MOVS     r0,#0x80              ;767
000146  9014              STR      r0,[sp,#0x50]         ;768
000148  a812              ADD      r0,sp,#0x48           ;768
00014a  f7fffffe          BL       CRYP_Init
00014e  2000              MOVS     r0,#0                 ;772
000150  f7fffffe          BL       CRYP_PhaseConfig
000154  2001              MOVS     r0,#1                 ;775
000156  f7fffffe          BL       CRYP_Cmd
00015a  bf00              NOP                            ;778
                  |L5.348|
00015c  f7fffffe          BL       CRYP_GetCmdStatus
000160  2801              CMP      r0,#1                 ;778
000162  d0fb              BEQ      |L5.348|
000164  b396              CBZ      r6,|L5.460|
000166  f44f3080          MOV      r0,#0x10000           ;786
00016a  f7fffffe          BL       CRYP_PhaseConfig
00016e  2001              MOVS     r0,#1                 ;789
000170  f7fffffe          BL       CRYP_Cmd
000174  f7fffffe          BL       CRYP_GetCmdStatus
000178  2800              CMP      r0,#0                 ;791
00017a  d04a              BEQ      |L5.530|
00017c  2400              MOVS     r4,#0                 ;798
00017e  e015              B        |L5.428|
                  |L5.384|
000180  2001              MOVS     r0,#1                 ;801
000182  f7fffffe          BL       CRYP_GetFlagStatus
000186  2800              CMP      r0,#0                 ;801
000188  d0fa              BEQ      |L5.384|
00018a  6828              LDR      r0,[r5,#0]            ;806
00018c  f7fffffe          BL       CRYP_DataIn
000190  f8550f04          LDR      r0,[r5,#4]!           ;808
000194  f7fffffe          BL       CRYP_DataIn
000198  f8550f04          LDR      r0,[r5,#4]!           ;810
00019c  f7fffffe          BL       CRYP_DataIn
0001a0  f8550f04          LDR      r0,[r5,#4]!           ;812
0001a4  f7fffffe          BL       CRYP_DataIn
0001a8  3410              ADDS     r4,r4,#0x10           ;812
0001aa  1d2d              ADDS     r5,r5,#4              ;812
                  |L5.428|
0001ac  42b4              CMP      r4,r6                 ;798
0001ae  d3e7              BCC      |L5.384|
0001b0  2000              MOVS     r0,#0                 ;817
0001b2  f44f3480          MOV      r4,#0x10000           ;786
0001b6  9000              STR      r0,[sp,#0]            ;786
                  |L5.440|
0001b8  2010              MOVS     r0,#0x10              ;820
0001ba  f7fffffe          BL       CRYP_GetFlagStatus
0001be  9900              LDR      r1,[sp,#0]            ;821
0001c0  1c49              ADDS     r1,r1,#1              ;821
0001c2  9100              STR      r1,[sp,#0]            ;822
0001c4  42a1              CMP      r1,r4                 ;822
0001c6  d002              BEQ      |L5.462|
0001c8  2800              CMP      r0,#0                 ;822
0001ca  d1f5              BNE      |L5.440|
                  |L5.460|
0001cc  e002              B        |L5.468|
                  |L5.462|
0001ce  b108              CBZ      r0,|L5.468|
0001d0  f04f0800          MOV      r8,#0                 ;826
                  |L5.468|
0001d4  b3bf              CBZ      r7,|L5.582|
0001d6  f44f3000          MOV      r0,#0x20000           ;834
0001da  f7fffffe          BL       CRYP_PhaseConfig
0001de  2001              MOVS     r0,#1                 ;837
0001e0  f7fffffe          BL       CRYP_Cmd
0001e4  f7fffffe          BL       CRYP_GetCmdStatus
0001e8  2800              CMP      r0,#0                 ;839
0001ea  d012              BEQ      |L5.530|
0001ec  2500              MOVS     r5,#0                 ;846
0001ee  e046              B        |L5.638|
                  |L5.496|
0001f0  2001              MOVS     r0,#1                 ;849
0001f2  f7fffffe          BL       CRYP_GetFlagStatus
0001f6  2800              CMP      r0,#0                 ;849
0001f8  d0fa              BEQ      |L5.496|
0001fa  f8d90000          LDR      r0,[r9,#0]            ;853
0001fe  f7fffffe          BL       CRYP_DataIn
000202  f1090404          ADD      r4,r9,#4              ;854
000206  f8d90004          LDR      r0,[r9,#4]            ;855
00020a  f7fffffe          BL       CRYP_DataIn
00020e  e001              B        |L5.532|
                  |L5.528|
000210  e085              B        |L5.798|
                  |L5.530|
000212  e0ba              B        |L5.906|
                  |L5.532|
000214  f8540f04          LDR      r0,[r4,#4]!           ;857
000218  f7fffffe          BL       CRYP_DataIn
00021c  f8540f04          LDR      r0,[r4,#4]!           ;859
000220  f7fffffe          BL       CRYP_DataIn
000224  f1040904          ADD      r9,r4,#4              ;859
000228  2000              MOVS     r0,#0                 ;863
00022a  f44f3480          MOV      r4,#0x10000           ;786
00022e  9000              STR      r0,[sp,#0]            ;786
                  |L5.560|
000230  2010              MOVS     r0,#0x10              ;866
000232  f7fffffe          BL       CRYP_GetFlagStatus
000236  9900              LDR      r1,[sp,#0]            ;867
000238  1c49              ADDS     r1,r1,#1              ;867
00023a  9100              STR      r1,[sp,#0]            ;868
00023c  42a1              CMP      r1,r4                 ;868
00023e  d003              BEQ      |L5.584|
000240  2800              CMP      r0,#0                 ;868
000242  d1f5              BNE      |L5.560|
000244  e004              B        |L5.592|
                  |L5.582|
000246  e01f              B        |L5.648|
                  |L5.584|
000248  b110              CBZ      r0,|L5.592|
00024a  f04f0800          MOV      r8,#0                 ;872
00024e  e015              B        |L5.636|
                  |L5.592|
000250  2004              MOVS     r0,#4                 ;877
000252  f7fffffe          BL       CRYP_GetFlagStatus
000256  2800              CMP      r0,#0                 ;877
000258  d0fa              BEQ      |L5.592|
00025a  f7fffffe          BL       CRYP_DataOut
00025e  f10a0404          ADD      r4,r10,#4             ;883
000262  f8ca0000          STR      r0,[r10,#0]           ;884
000266  f7fffffe          BL       CRYP_DataOut
00026a  6020              STR      r0,[r4,#0]            ;886
00026c  f7fffffe          BL       CRYP_DataOut
000270  6060              STR      r0,[r4,#4]            ;888
000272  f7fffffe          BL       CRYP_DataOut
000276  f1040a0c          ADD      r10,r4,#0xc           ;888
00027a  60a0              STR      r0,[r4,#8]            ;888
                  |L5.636|
00027c  3510              ADDS     r5,r5,#0x10           ;888
                  |L5.638|
00027e  42bd              CMP      r5,r7                 ;846
000280  d202              BCS      |L5.648|
000282  f1b80f00          CMP      r8,#0                 ;846
000286  d1b3              BNE      |L5.496|
                  |L5.648|
000288  f44f3040          MOV      r0,#0x30000           ;896
00028c  f7fffffe          BL       CRYP_PhaseConfig
000290  2001              MOVS     r0,#1                 ;899
000292  f7fffffe          BL       CRYP_Cmd
000296  f7fffffe          BL       CRYP_GetCmdStatus
00029a  2800              CMP      r0,#0                 ;901
00029c  d075              BEQ      |L5.906|
00029e  fa9bf08b          REV      r0,r11                ;909
0002a2  f7fffffe          BL       CRYP_DataIn
0002a6  980e              LDR      r0,[sp,#0x38]         ;910
0002a8  ba00              REV      r0,r0                 ;910
0002aa  f7fffffe          BL       CRYP_DataIn
0002ae  fa9bf08b          REV      r0,r11                ;911
0002b2  f7fffffe          BL       CRYP_DataIn
0002b6  980c              LDR      r0,[sp,#0x30]         ;912
0002b8  ba00              REV      r0,r0                 ;912
0002ba  f7fffffe          BL       CRYP_DataIn
                  |L5.702|
0002be  2004              MOVS     r0,#4                 ;914
0002c0  f7fffffe          BL       CRYP_GetFlagStatus
0002c4  2800              CMP      r0,#0                 ;914
0002c6  d0fa              BEQ      |L5.702|
0002c8  e0a1              B        |L5.1038|
                  |L5.714|
;;;976          {
;;;977            /* Wait until the IFEM flag is reset */
;;;978            while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
0002ca  2001              MOVS     r0,#1
0002cc  f7fffffe          BL       CRYP_GetFlagStatus
0002d0  2800              CMP      r0,#0
0002d2  d0fa              BEQ      |L5.714|
;;;979            {
;;;980            }
;;;981            
;;;982            /* Write the Input block in the IN FIFO */
;;;983            CRYP_DataIn(*(uint32_t*)(headeraddr));
0002d4  6828              LDR      r0,[r5,#0]
0002d6  f7fffffe          BL       CRYP_DataIn
;;;984            headeraddr+=4;
;;;985            CRYP_DataIn(*(uint32_t*)(headeraddr));
0002da  f8550f04          LDR      r0,[r5,#4]!
0002de  f7fffffe          BL       CRYP_DataIn
;;;986            headeraddr+=4;
;;;987            CRYP_DataIn(*(uint32_t*)(headeraddr));
0002e2  f8550f04          LDR      r0,[r5,#4]!
0002e6  f7fffffe          BL       CRYP_DataIn
;;;988            headeraddr+=4;
;;;989            CRYP_DataIn(*(uint32_t*)(headeraddr));
0002ea  f8550f04          LDR      r0,[r5,#4]!
0002ee  f7fffffe          BL       CRYP_DataIn
0002f2  3410              ADDS     r4,r4,#0x10
0002f4  1d2d              ADDS     r5,r5,#4
                  |L5.758|
0002f6  42b4              CMP      r4,r6                 ;975
0002f8  d3e7              BCC      |L5.714|
0002fa  f44f3480          MOV      r4,#0x10000           ;786
0002fe  f8cdb000          STR      r11,[sp,#0]           ;786
                  |L5.770|
;;;990            headeraddr+=4;
;;;991          }
;;;992          
;;;993          /* Wait until the complete message has been processed */
;;;994          counter = 0;
;;;995          do
;;;996          {
;;;997            busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
000302  2010              MOVS     r0,#0x10
000304  f7fffffe          BL       CRYP_GetFlagStatus
;;;998            counter++;
000308  9900              LDR      r1,[sp,#0]
00030a  1c49              ADDS     r1,r1,#1
;;;999          }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
00030c  9100              STR      r1,[sp,#0]
00030e  42a1              CMP      r1,r4
000310  d002              BEQ      |L5.792|
000312  2800              CMP      r0,#0
000314  d1f5              BNE      |L5.770|
000316  e002              B        |L5.798|
                  |L5.792|
;;;1000   
;;;1001         if (busystatus != RESET)
000318  b108              CBZ      r0,|L5.798|
;;;1002         {
;;;1003           status = ERROR;
00031a  f04f0800          MOV      r8,#0
                  |L5.798|
;;;1004         }
;;;1005       }
;;;1006       
;;;1007       /**************************** payload phase *******************************/
;;;1008       if(ILength != 0)
00031e  b3af              CBZ      r7,|L5.908|
;;;1009       {
;;;1010         /* Select payload phase */
;;;1011         CRYP_PhaseConfig(CRYP_Phase_Payload);
000320  f44f3000          MOV      r0,#0x20000
000324  f7fffffe          BL       CRYP_PhaseConfig
;;;1012   
;;;1013         /* Enable Crypto processor */
;;;1014         CRYP_Cmd(ENABLE);
000328  2001              MOVS     r0,#1
00032a  f7fffffe          BL       CRYP_Cmd
;;;1015         
;;;1016         if(CRYP_GetCmdStatus() == DISABLE)
00032e  f7fffffe          BL       CRYP_GetCmdStatus
000332  2800              CMP      r0,#0
000334  d07c              BEQ      |L5.1072|
;;;1017         {
;;;1018           /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1019              the CRYP peripheral (please check the device sales type. */
;;;1020           return(ERROR);
;;;1021         }
;;;1022         
;;;1023         for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
000336  2500              MOVS     r5,#0
000338  e044              B        |L5.964|
                  |L5.826|
;;;1024         {
;;;1025           /* Wait until the IFEM flag is reset */
;;;1026           while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
00033a  2001              MOVS     r0,#1
00033c  f7fffffe          BL       CRYP_GetFlagStatus
000340  2800              CMP      r0,#0
000342  d0fa              BEQ      |L5.826|
;;;1027           {
;;;1028           }
;;;1029           /* Write the Input block in the IN FIFO */
;;;1030           CRYP_DataIn(*(uint32_t*)(inputaddr));
000344  f8d90000          LDR      r0,[r9,#0]
000348  f7fffffe          BL       CRYP_DataIn
;;;1031           inputaddr+=4;
00034c  f1090404          ADD      r4,r9,#4
;;;1032           CRYP_DataIn(*(uint32_t*)(inputaddr));
000350  f8d90004          LDR      r0,[r9,#4]
000354  f7fffffe          BL       CRYP_DataIn
;;;1033           inputaddr+=4;
;;;1034           CRYP_DataIn(*(uint32_t*)(inputaddr));
000358  f8540f04          LDR      r0,[r4,#4]!
00035c  f7fffffe          BL       CRYP_DataIn
;;;1035           inputaddr+=4;
;;;1036           CRYP_DataIn(*(uint32_t*)(inputaddr));
000360  f8540f04          LDR      r0,[r4,#4]!
000364  f7fffffe          BL       CRYP_DataIn
000368  f1040904          ADD      r9,r4,#4
00036c  f44f3480          MOV      r4,#0x10000           ;786
000370  f8cdb000          STR      r11,[sp,#0]           ;786
                  |L5.884|
;;;1037           inputaddr+=4;
;;;1038           
;;;1039           /* Wait until the complete message has been processed */
;;;1040           counter = 0;
;;;1041           do
;;;1042           {
;;;1043             busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
000374  2010              MOVS     r0,#0x10
000376  f7fffffe          BL       CRYP_GetFlagStatus
;;;1044             counter++;
00037a  9900              LDR      r1,[sp,#0]
00037c  1c49              ADDS     r1,r1,#1
;;;1045           }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
00037e  9100              STR      r1,[sp,#0]
000380  42a1              CMP      r1,r4
000382  d004              BEQ      |L5.910|
000384  2800              CMP      r0,#0
000386  d1f5              BNE      |L5.884|
000388  e005              B        |L5.918|
                  |L5.906|
00038a  e051              B        |L5.1072|
                  |L5.908|
00038c  e01f              B        |L5.974|
                  |L5.910|
;;;1046   
;;;1047           if (busystatus != RESET)
00038e  b110              CBZ      r0,|L5.918|
;;;1048           {
;;;1049             status = ERROR;
000390  f04f0800          MOV      r8,#0
000394  e015              B        |L5.962|
                  |L5.918|
;;;1050           }
;;;1051           else
;;;1052           {
;;;1053             /* Wait until the OFNE flag is reset */
;;;1054             while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
000396  2004              MOVS     r0,#4
000398  f7fffffe          BL       CRYP_GetFlagStatus
00039c  2800              CMP      r0,#0
00039e  d0fa              BEQ      |L5.918|
;;;1055             {
;;;1056             }
;;;1057             
;;;1058             /* Read the Output block from the Output FIFO */
;;;1059             *(uint32_t*)(outputaddr) = CRYP_DataOut();
0003a0  f7fffffe          BL       CRYP_DataOut
;;;1060             outputaddr+=4;
0003a4  f10a0404          ADD      r4,r10,#4
;;;1061             *(uint32_t*)(outputaddr) = CRYP_DataOut();
0003a8  f8ca0000          STR      r0,[r10,#0]
0003ac  f7fffffe          BL       CRYP_DataOut
;;;1062             outputaddr+=4;
;;;1063             *(uint32_t*)(outputaddr) = CRYP_DataOut();
0003b0  6020              STR      r0,[r4,#0]
0003b2  f7fffffe          BL       CRYP_DataOut
;;;1064             outputaddr+=4;
;;;1065             *(uint32_t*)(outputaddr) = CRYP_DataOut();
0003b6  6060              STR      r0,[r4,#4]
0003b8  f7fffffe          BL       CRYP_DataOut
0003bc  f1040a0c          ADD      r10,r4,#0xc
0003c0  60a0              STR      r0,[r4,#8]
                  |L5.962|
0003c2  3510              ADDS     r5,r5,#0x10
                  |L5.964|
0003c4  42bd              CMP      r5,r7                 ;1023
0003c6  d202              BCS      |L5.974|
0003c8  f1b80f00          CMP      r8,#0                 ;1023
0003cc  d1b5              BNE      |L5.826|
                  |L5.974|
;;;1066             outputaddr+=4;
;;;1067           }
;;;1068         }
;;;1069       }
;;;1070       
;;;1071       /***************************** final phase ********************************/
;;;1072       /* Select final phase */
;;;1073       CRYP_PhaseConfig(CRYP_Phase_Final);
0003ce  f44f3040          MOV      r0,#0x30000
0003d2  f7fffffe          BL       CRYP_PhaseConfig
;;;1074   
;;;1075       /* Enable Crypto processor */
;;;1076       CRYP_Cmd(ENABLE);
0003d6  2001              MOVS     r0,#1
0003d8  f7fffffe          BL       CRYP_Cmd
;;;1077       
;;;1078       if(CRYP_GetCmdStatus() == DISABLE)
0003dc  f7fffffe          BL       CRYP_GetCmdStatus
0003e0  2800              CMP      r0,#0
0003e2  d025              BEQ      |L5.1072|
;;;1079       {
;;;1080         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1081            the CRYP peripheral (please check the device sales type. */
;;;1082         return(ERROR);
;;;1083       }
;;;1084       
;;;1085       /* Write number of bits concatenated with header in the IN FIFO */
;;;1086       CRYP_DataIn(__REV(headerlength>>32));
0003e4  fa9bf08b          REV      r0,r11
0003e8  f7fffffe          BL       CRYP_DataIn
;;;1087       CRYP_DataIn(__REV(headerlength));
0003ec  980e              LDR      r0,[sp,#0x38]
0003ee  ba00              REV      r0,r0
0003f0  f7fffffe          BL       CRYP_DataIn
;;;1088       CRYP_DataIn(__REV(inputlength>>32));
0003f4  fa9bf08b          REV      r0,r11
0003f8  f7fffffe          BL       CRYP_DataIn
;;;1089       CRYP_DataIn(__REV(inputlength));
0003fc  980c              LDR      r0,[sp,#0x30]
0003fe  ba00              REV      r0,r0
000400  f7fffffe          BL       CRYP_DataIn
                  |L5.1028|
;;;1090       /* Wait until the OFNE flag is reset */
;;;1091       while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
000404  2004              MOVS     r0,#4
000406  f7fffffe          BL       CRYP_GetFlagStatus
00040a  2800              CMP      r0,#0
00040c  d0fa              BEQ      |L5.1028|
                  |L5.1038|
;;;1092       {
;;;1093       }
;;;1094       
;;;1095       tagaddr = (uint32_t)AuthTAG;
;;;1096       /* Read the Auth TAG in the IN FIFO */
;;;1097       *(uint32_t*)(tagaddr) = CRYP_DataOut();
00040e  9c2d              LDR      r4,[sp,#0xb4]
000410  f7fffffe          BL       CRYP_DataOut
;;;1098       tagaddr+=4;
;;;1099       *(uint32_t*)(tagaddr) = CRYP_DataOut();
000414  6020              STR      r0,[r4,#0]
000416  f7fffffe          BL       CRYP_DataOut
;;;1100       tagaddr+=4;
;;;1101       *(uint32_t*)(tagaddr) = CRYP_DataOut();
00041a  6060              STR      r0,[r4,#4]
00041c  f7fffffe          BL       CRYP_DataOut
;;;1102       tagaddr+=4;
;;;1103       *(uint32_t*)(tagaddr) = CRYP_DataOut();
000420  60a0              STR      r0,[r4,#8]
000422  f7fffffe          BL       CRYP_DataOut
;;;1104       tagaddr+=4;
;;;1105     }
;;;1106     /* Disable Crypto */
;;;1107     CRYP_Cmd(DISABLE);
000426  60e0              STR      r0,[r4,#0xc]
000428  2000              MOVS     r0,#0
00042a  f7fffffe          BL       CRYP_Cmd
;;;1108   
;;;1109     return status;
00042e  4640              MOV      r0,r8
                  |L5.1072|
;;;1110   }
000430  b01f              ADD      sp,sp,#0x7c
000432  e8bd8ff0          POP      {r4-r11,pc}
;;;1111   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Libraries\\FWlib\\src\\stm32f4xx_cryp_aes.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_cryp_aes_c_c34cf6b8____REV16|
#line 129 "E:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___20_stm32f4xx_cryp_aes_c_c34cf6b8____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_cryp_aes_c_c34cf6b8____REVSH|
#line 144
|__asm___20_stm32f4xx_cryp_aes_c_c34cf6b8____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
