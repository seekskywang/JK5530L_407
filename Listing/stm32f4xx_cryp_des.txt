; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\stm32f4xx_cryp_des.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\stm32f4xx_cryp_des.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=537 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\stm32f4xx_cryp_des.crf --no_multibyte_chars ..\Libraries\FWlib\src\stm32f4xx_cryp_des.c]
                          THUMB

                          AREA ||i.CRYP_DES_CBC||, CODE, READONLY, ALIGN=1

                  CRYP_DES_CBC PROC
;;;199      */
;;;200    ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;201                             uint8_t *Input, uint32_t Ilength, uint8_t *Output)
;;;202    {
000004  b097              SUB      sp,sp,#0x5c
;;;203      CRYP_InitTypeDef DES_CRYP_InitStructure;
;;;204      CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
;;;205      CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
;;;206      __IO uint32_t counter = 0;
000006  f04f0b00          MOV      r11,#0
00000a  e9dd9524          LDRD     r9,r5,[sp,#0x90]      ;202
00000e  461c              MOV      r4,r3                 ;202
000010  460e              MOV      r6,r1                 ;202
;;;207      uint32_t busystatus = 0;
;;;208      ErrorStatus status = SUCCESS;
000012  f04f0a01          MOV      r10,#1
;;;209      uint32_t keyaddr    = (uint32_t)Key;
;;;210      uint32_t inputaddr  = (uint32_t)Input;
;;;211      uint32_t outputaddr = (uint32_t)Output;
;;;212      uint32_t ivaddr     = (uint32_t)InitVectors;
000016  4690              MOV      r8,r2
;;;213      uint32_t i = 0;
000018  465f              MOV      r7,r11
;;;214    
;;;215      /* Crypto structures initialisation*/
;;;216      CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
00001a  a809              ADD      r0,sp,#0x24
00001c  f8cdb018          STR      r11,[sp,#0x18]
000020  f7fffffe          BL       CRYP_KeyStructInit
;;;217    
;;;218      /* Crypto Init for Encryption process */
;;;219      if(Mode == MODE_ENCRYPT) /* DES encryption */
000024  9817              LDR      r0,[sp,#0x5c]
000026  2801              CMP      r0,#1
000028  d02b              BEQ      |L1.130|
;;;220      {
;;;221         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
;;;222      }
;;;223      else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
;;;224      {
;;;225         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
00002a  2004              MOVS     r0,#4
00002c  9002              STR      r0,[sp,#8]
                  |L1.46|
;;;226      }
;;;227    
;;;228      DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
00002e  2018              MOVS     r0,#0x18
;;;229      DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000030  9003              STR      r0,[sp,#0xc]
000032  2080              MOVS     r0,#0x80
;;;230      CRYP_Init(&DES_CRYP_InitStructure);
000034  9004              STR      r0,[sp,#0x10]
000036  a802              ADD      r0,sp,#8
000038  f7fffffe          BL       CRYP_Init
;;;231    
;;;232      /* Key Initialisation */
;;;233      DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
00003c  6830              LDR      r0,[r6,#0]
00003e  ba00              REV      r0,r0
;;;234      keyaddr+=4;
;;;235      DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000040  900b              STR      r0,[sp,#0x2c]
000042  6870              LDR      r0,[r6,#4]
000044  ba00              REV      r0,r0
;;;236      CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
000046  900c              STR      r0,[sp,#0x30]
000048  a809              ADD      r0,sp,#0x24
00004a  f7fffffe          BL       CRYP_KeyInit
;;;237    
;;;238      /* Initialization Vectors */
;;;239      DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
00004e  f8d80000          LDR      r0,[r8,#0]
000052  ba00              REV      r0,r0
;;;240      ivaddr+=4;
;;;241      DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
000054  9011              STR      r0,[sp,#0x44]
000056  f8d80004          LDR      r0,[r8,#4]
00005a  ba00              REV      r0,r0
;;;242      CRYP_IVInit(&DES_CRYP_IVInitStructure);
00005c  9012              STR      r0,[sp,#0x48]
00005e  a811              ADD      r0,sp,#0x44
000060  f7fffffe          BL       CRYP_IVInit
;;;243    
;;;244      /* Flush IN/OUT FIFO */
;;;245      CRYP_FIFOFlush();
000064  f7fffffe          BL       CRYP_FIFOFlush
;;;246      
;;;247      /* Enable Crypto processor */
;;;248      CRYP_Cmd(ENABLE);
000068  2001              MOVS     r0,#1
00006a  f7fffffe          BL       CRYP_Cmd
;;;249    
;;;250      if(CRYP_GetCmdStatus() == DISABLE)
00006e  f7fffffe          BL       CRYP_GetCmdStatus
000072  2800              CMP      r0,#0
000074  d032              BEQ      |L1.220|
;;;251      {
;;;252        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;253           the CRYP peripheral (please check the device sales type. */
;;;254        return(ERROR);
;;;255      }
;;;256      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
000076  f1b90f00          CMP      r9,#0
00007a  d92b              BLS      |L1.212|
;;;257      {
;;;258        /* Write the Input block in the Input FIFO */
;;;259        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;260        inputaddr+=4;
;;;261        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;262        inputaddr+=4;
;;;263    
;;;264        /* Wait until the complete message has been processed */
;;;265        counter = 0;
;;;266        do
;;;267        {
;;;268          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;269          counter++;
;;;270        }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
00007c  f44f3680          MOV      r6,#0x10000
000080  e002              B        |L1.136|
                  |L1.130|
000082  f8cdb008          STR      r11,[sp,#8]           ;221
000086  e7d2              B        |L1.46|
                  |L1.136|
000088  6820              LDR      r0,[r4,#0]            ;259
00008a  f7fffffe          BL       CRYP_DataIn
00008e  f8540f04          LDR      r0,[r4,#4]!           ;261
000092  f7fffffe          BL       CRYP_DataIn
000096  1d24              ADDS     r4,r4,#4              ;265
000098  f8cdb018          STR      r11,[sp,#0x18]        ;265
                  |L1.156|
00009c  2010              MOVS     r0,#0x10              ;268
00009e  f7fffffe          BL       CRYP_GetFlagStatus
0000a2  9906              LDR      r1,[sp,#0x18]         ;269
0000a4  1c49              ADDS     r1,r1,#1              ;269
0000a6  9106              STR      r1,[sp,#0x18]
0000a8  42b1              CMP      r1,r6
0000aa  d002              BEQ      |L1.178|
0000ac  2800              CMP      r0,#0
0000ae  d1f5              BNE      |L1.156|
0000b0  e003              B        |L1.186|
                  |L1.178|
;;;271    
;;;272        if (busystatus != RESET)
0000b2  b110              CBZ      r0,|L1.186|
;;;273       {
;;;274           status = ERROR;
0000b4  f04f0a00          MOV      r10,#0
0000b8  e006              B        |L1.200|
                  |L1.186|
;;;275        }
;;;276        else
;;;277        {
;;;278          /* Read the Output block from the Output FIFO */
;;;279          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000ba  f7fffffe          BL       CRYP_DataOut
;;;280          outputaddr+=4;
;;;281          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000be  6028              STR      r0,[r5,#0]
0000c0  f7fffffe          BL       CRYP_DataOut
0000c4  6068              STR      r0,[r5,#4]
0000c6  3508              ADDS     r5,r5,#8
                  |L1.200|
0000c8  3708              ADDS     r7,r7,#8
0000ca  454f              CMP      r7,r9                 ;256
0000cc  d202              BCS      |L1.212|
0000ce  f1ba0f00          CMP      r10,#0                ;256
0000d2  d1d9              BNE      |L1.136|
                  |L1.212|
;;;282          outputaddr+=4;
;;;283        }
;;;284      }
;;;285    
;;;286      /* Disable Crypto */
;;;287      CRYP_Cmd(DISABLE);
0000d4  2000              MOVS     r0,#0
0000d6  f7fffffe          BL       CRYP_Cmd
;;;288    
;;;289      return status; 
0000da  4650              MOV      r0,r10
                  |L1.220|
;;;290    }
0000dc  b01b              ADD      sp,sp,#0x6c
0000de  e8bd8ff0          POP      {r4-r11,pc}
;;;291    
                          ENDP


                          AREA ||i.CRYP_DES_ECB||, CODE, READONLY, ALIGN=1

                  CRYP_DES_ECB PROC
;;;98       */
;;;99     ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;100                             uint32_t Ilength, uint8_t *Output)
;;;101    {
000004  b08d              SUB      sp,sp,#0x34
;;;102      CRYP_InitTypeDef DES_CRYP_InitStructure;
;;;103      CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
;;;104      __IO uint32_t counter = 0;
000006  f04f0a00          MOV      r10,#0
00000a  4683              MOV      r11,r0                ;101
00000c  9d16              LDR      r5,[sp,#0x58]
00000e  4698              MOV      r8,r3                 ;101
000010  4614              MOV      r4,r2                 ;101
000012  460e              MOV      r6,r1                 ;101
;;;105      uint32_t busystatus = 0;
;;;106      ErrorStatus status = SUCCESS;
000014  f04f0901          MOV      r9,#1
;;;107      uint32_t keyaddr    = (uint32_t)Key;
;;;108      uint32_t inputaddr  = (uint32_t)Input;
;;;109      uint32_t outputaddr = (uint32_t)Output;
;;;110      uint32_t i = 0;
000018  4657              MOV      r7,r10
;;;111    
;;;112      /* Crypto structures initialisation*/
;;;113      CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
00001a  4668              MOV      r0,sp
00001c  f8cda030          STR      r10,[sp,#0x30]
000020  f7fffffe          BL       CRYP_KeyStructInit
;;;114    
;;;115      /* Crypto Init for Encryption process */
;;;116      if( Mode == MODE_ENCRYPT ) /* DES encryption */
000024  f1bb0f01          CMP      r11,#1
000028  d020              BEQ      |L2.108|
;;;117      {
;;;118         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
;;;119      }
;;;120      else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
;;;121      {      
;;;122         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
00002a  2004              MOVS     r0,#4
00002c  9008              STR      r0,[sp,#0x20]
                  |L2.46|
;;;123      }
;;;124    
;;;125      DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
00002e  2010              MOVS     r0,#0x10
;;;126      DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000030  9009              STR      r0,[sp,#0x24]
000032  2080              MOVS     r0,#0x80
;;;127      CRYP_Init(&DES_CRYP_InitStructure);
000034  900a              STR      r0,[sp,#0x28]
000036  a808              ADD      r0,sp,#0x20
000038  f7fffffe          BL       CRYP_Init
;;;128    
;;;129      /* Key Initialisation */
;;;130      DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
00003c  6830              LDR      r0,[r6,#0]
00003e  ba00              REV      r0,r0
;;;131      keyaddr+=4;
;;;132      DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000040  9002              STR      r0,[sp,#8]
000042  6870              LDR      r0,[r6,#4]
000044  ba00              REV      r0,r0
;;;133      CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
000046  9003              STR      r0,[sp,#0xc]
000048  4668              MOV      r0,sp
00004a  f7fffffe          BL       CRYP_KeyInit
;;;134    
;;;135      /* Flush IN/OUT FIFO */
;;;136      CRYP_FIFOFlush();
00004e  f7fffffe          BL       CRYP_FIFOFlush
;;;137    
;;;138      /* Enable Crypto processor */
;;;139      CRYP_Cmd(ENABLE);
000052  2001              MOVS     r0,#1
000054  f7fffffe          BL       CRYP_Cmd
;;;140    
;;;141      if(CRYP_GetCmdStatus() == DISABLE)
000058  f7fffffe          BL       CRYP_GetCmdStatus
00005c  2800              CMP      r0,#0
00005e  d032              BEQ      |L2.198|
;;;142      {
;;;143        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;144           the CRYP peripheral (please check the device sales type. */
;;;145        return(ERROR);
;;;146      }
;;;147      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
000060  f1b80f00          CMP      r8,#0
000064  d92b              BLS      |L2.190|
;;;148      {
;;;149    
;;;150        /* Write the Input block in the Input FIFO */
;;;151        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;152        inputaddr+=4;
;;;153        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;154        inputaddr+=4;
;;;155    
;;;156    /* Wait until the complete message has been processed */
;;;157        counter = 0;
;;;158        do
;;;159        {
;;;160          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;161          counter++;
;;;162        }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
000066  f44f3680          MOV      r6,#0x10000
00006a  e002              B        |L2.114|
                  |L2.108|
00006c  f8cda020          STR      r10,[sp,#0x20]        ;118
000070  e7dd              B        |L2.46|
                  |L2.114|
000072  6820              LDR      r0,[r4,#0]            ;151
000074  f7fffffe          BL       CRYP_DataIn
000078  f8540f04          LDR      r0,[r4,#4]!           ;153
00007c  f7fffffe          BL       CRYP_DataIn
000080  1d24              ADDS     r4,r4,#4              ;157
000082  f8cda030          STR      r10,[sp,#0x30]        ;157
                  |L2.134|
000086  2010              MOVS     r0,#0x10              ;160
000088  f7fffffe          BL       CRYP_GetFlagStatus
00008c  990c              LDR      r1,[sp,#0x30]         ;161
00008e  1c49              ADDS     r1,r1,#1              ;161
000090  910c              STR      r1,[sp,#0x30]
000092  42b1              CMP      r1,r6
000094  d002              BEQ      |L2.156|
000096  2800              CMP      r0,#0
000098  d1f5              BNE      |L2.134|
00009a  e003              B        |L2.164|
                  |L2.156|
;;;163    
;;;164        if (busystatus != RESET)
00009c  b110              CBZ      r0,|L2.164|
;;;165       {
;;;166           status = ERROR;
00009e  f04f0900          MOV      r9,#0
0000a2  e006              B        |L2.178|
                  |L2.164|
;;;167        }
;;;168        else
;;;169        {
;;;170    
;;;171          /* Read the Output block from the Output FIFO */
;;;172          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000a4  f7fffffe          BL       CRYP_DataOut
;;;173          outputaddr+=4;
;;;174          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000a8  6028              STR      r0,[r5,#0]
0000aa  f7fffffe          BL       CRYP_DataOut
0000ae  6068              STR      r0,[r5,#4]
0000b0  3508              ADDS     r5,r5,#8
                  |L2.178|
0000b2  3708              ADDS     r7,r7,#8
0000b4  4547              CMP      r7,r8                 ;147
0000b6  d202              BCS      |L2.190|
0000b8  f1b90f00          CMP      r9,#0                 ;147
0000bc  d1d9              BNE      |L2.114|
                  |L2.190|
;;;175          outputaddr+=4;
;;;176        }
;;;177      }
;;;178    
;;;179      /* Disable Crypto */
;;;180      CRYP_Cmd(DISABLE);
0000be  2000              MOVS     r0,#0
0000c0  f7fffffe          BL       CRYP_Cmd
;;;181    
;;;182      return status; 
0000c4  4648              MOV      r0,r9
                  |L2.198|
;;;183    }
0000c6  b00d              ADD      sp,sp,#0x34
0000c8  e8bd8ff0          POP      {r4-r11,pc}
;;;184    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Libraries\\FWlib\\src\\stm32f4xx_cryp_des.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_cryp_des_c_9174d91f____REV16|
#line 129 "E:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___20_stm32f4xx_cryp_des_c_9174d91f____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_cryp_des_c_9174d91f____REVSH|
#line 144
|__asm___20_stm32f4xx_cryp_des_c_9174d91f____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
