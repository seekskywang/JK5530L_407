; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\stm32f4xx_cryp_tdes.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\stm32f4xx_cryp_tdes.d --cpu=Cortex-M4.fp.sp --apcs=interwork --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=537 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\stm32f4xx_cryp_tdes.crf --no_multibyte_chars ..\Libraries\FWlib\src\stm32f4xx_cryp_tdes.c]
                          THUMB

                          AREA ||i.CRYP_TDES_CBC||, CODE, READONLY, ALIGN=1

                  CRYP_TDES_CBC PROC
;;;207      */
;;;208    ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;209                              uint8_t *Input, uint32_t Ilength, uint8_t *Output)
;;;210    {
000004  b091              SUB      sp,sp,#0x44
;;;211      CRYP_InitTypeDef TDES_CRYP_InitStructure;
;;;212      CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
;;;213      CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
;;;214      __IO uint32_t counter = 0;
000006  f04f0a00          MOV      r10,#0
00000a  e9ddb51e          LDRD     r11,r5,[sp,#0x78]     ;210
00000e  461c              MOV      r4,r3                 ;210
;;;215      uint32_t busystatus = 0;
;;;216      ErrorStatus status = SUCCESS;
000010  2701              MOVS     r7,#1
;;;217      uint32_t keyaddr    = (uint32_t)Key;
000012  4688              MOV      r8,r1
;;;218      uint32_t inputaddr  = (uint32_t)Input;
;;;219      uint32_t outputaddr = (uint32_t)Output;
;;;220      uint32_t ivaddr     = (uint32_t)InitVectors;
000014  4691              MOV      r9,r2
;;;221      uint32_t i = 0;
000016  4656              MOV      r6,r10
;;;222    
;;;223      /* Crypto structures initialisation*/
;;;224      CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
000018  4668              MOV      r0,sp
00001a  f8cda030          STR      r10,[sp,#0x30]
00001e  f7fffffe          BL       CRYP_KeyStructInit
;;;225    
;;;226      /* Crypto Init for Encryption process */
;;;227      if(Mode == MODE_ENCRYPT) /* TDES encryption */
000022  9811              LDR      r0,[sp,#0x44]
000024  2801              CMP      r0,#1
000026  d038              BEQ      |L1.154|
;;;228      {
;;;229        TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
;;;230      }
;;;231      else
;;;232      {
;;;233        TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
000028  2004              MOVS     r0,#4
00002a  9008              STR      r0,[sp,#0x20]
                  |L1.44|
;;;234      }
;;;235      TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
00002c  2008              MOVS     r0,#8
;;;236      TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
00002e  9009              STR      r0,[sp,#0x24]
000030  2080              MOVS     r0,#0x80
;;;237    
;;;238      CRYP_Init(&TDES_CRYP_InitStructure);
000032  900a              STR      r0,[sp,#0x28]
000034  a808              ADD      r0,sp,#0x20
000036  f7fffffe          BL       CRYP_Init
;;;239    
;;;240      /* Key Initialisation */
;;;241      TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
00003a  f8d80000          LDR      r0,[r8,#0]
00003e  ba00              REV      r0,r0
;;;242      keyaddr+=4;
;;;243      TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000040  9002              STR      r0,[sp,#8]
000042  f8d81004          LDR      r1,[r8,#4]
000046  ba09              REV      r1,r1
;;;244      keyaddr+=4;
;;;245      TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000048  9103              STR      r1,[sp,#0xc]
00004a  f8d81008          LDR      r1,[r8,#8]
00004e  ba09              REV      r1,r1
;;;246      keyaddr+=4;
;;;247      TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000050  9104              STR      r1,[sp,#0x10]
000052  f8d8100c          LDR      r1,[r8,#0xc]
000056  ba09              REV      r1,r1
;;;248      keyaddr+=4;
;;;249      TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000058  9105              STR      r1,[sp,#0x14]
00005a  f8d81010          LDR      r1,[r8,#0x10]
00005e  ba09              REV      r1,r1
;;;250      keyaddr+=4;
;;;251      TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000060  9106              STR      r1,[sp,#0x18]
000062  f8d80014          LDR      r0,[r8,#0x14]
000066  ba00              REV      r0,r0
;;;252      CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
000068  9007              STR      r0,[sp,#0x1c]
00006a  4668              MOV      r0,sp
00006c  f7fffffe          BL       CRYP_KeyInit
;;;253    
;;;254      /* Initialization Vectors */
;;;255      TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
000070  f8d90000          LDR      r0,[r9,#0]
000074  ba00              REV      r0,r0
;;;256      ivaddr+=4;
;;;257      TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
000076  900d              STR      r0,[sp,#0x34]
000078  f8d90004          LDR      r0,[r9,#4]
00007c  ba00              REV      r0,r0
;;;258      CRYP_IVInit(&TDES_CRYP_IVInitStructure);
00007e  900e              STR      r0,[sp,#0x38]
000080  a80d              ADD      r0,sp,#0x34
000082  f7fffffe          BL       CRYP_IVInit
;;;259    
;;;260      /* Flush IN/OUT FIFO */
;;;261      CRYP_FIFOFlush();
000086  f7fffffe          BL       CRYP_FIFOFlush
;;;262    
;;;263      /* Enable Crypto processor */
;;;264      CRYP_Cmd(ENABLE);
00008a  2001              MOVS     r0,#1
00008c  f7fffffe          BL       CRYP_Cmd
;;;265    
;;;266      if(CRYP_GetCmdStatus() == DISABLE)
000090  f7fffffe          BL       CRYP_GetCmdStatus
000094  2800              CMP      r0,#0
000096  d02d              BEQ      |L1.244|
000098  e024              B        |L1.228|
                  |L1.154|
00009a  f8cda020          STR      r10,[sp,#0x20]        ;229
00009e  e7c5              B        |L1.44|
                  |L1.160|
;;;267      {
;;;268        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;269           the CRYP peripheral (please check the device sales type. */
;;;270        return(ERROR);
;;;271      }
;;;272      
;;;273      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
;;;274      {
;;;275        /* Write the Input block in the Input FIFO */
;;;276        CRYP_DataIn(*(uint32_t*)(inputaddr));
0000a0  6820              LDR      r0,[r4,#0]
0000a2  f7fffffe          BL       CRYP_DataIn
;;;277        inputaddr+=4;
;;;278        CRYP_DataIn(*(uint32_t*)(inputaddr));
0000a6  f8540f04          LDR      r0,[r4,#4]!
0000aa  f7fffffe          BL       CRYP_DataIn
;;;279        inputaddr+=4;
;;;280    
;;;281        /* Wait until the complete message has been processed */
;;;282        counter = 0;
;;;283        do
;;;284        {
;;;285          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;286          counter++;
;;;287        }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
0000ae  f44f3880          MOV      r8,#0x10000
0000b2  1d24              ADDS     r4,r4,#4
0000b4  f8cda030          STR      r10,[sp,#0x30]
                  |L1.184|
0000b8  2010              MOVS     r0,#0x10              ;285
0000ba  f7fffffe          BL       CRYP_GetFlagStatus
0000be  990c              LDR      r1,[sp,#0x30]         ;286
0000c0  1c49              ADDS     r1,r1,#1              ;286
0000c2  910c              STR      r1,[sp,#0x30]
0000c4  4541              CMP      r1,r8
0000c6  d002              BEQ      |L1.206|
0000c8  2800              CMP      r0,#0
0000ca  d1f5              BNE      |L1.184|
0000cc  e002              B        |L1.212|
                  |L1.206|
;;;288    
;;;289        if (busystatus != RESET)
0000ce  b108              CBZ      r0,|L1.212|
;;;290       {
;;;291           status = ERROR;
0000d0  2700              MOVS     r7,#0
0000d2  e006              B        |L1.226|
                  |L1.212|
;;;292        }
;;;293        else
;;;294        {
;;;295    
;;;296          /* Read the Output block from the Output FIFO */
;;;297          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000d4  f7fffffe          BL       CRYP_DataOut
;;;298          outputaddr+=4;
;;;299          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000d8  6028              STR      r0,[r5,#0]
0000da  f7fffffe          BL       CRYP_DataOut
0000de  6068              STR      r0,[r5,#4]
0000e0  3508              ADDS     r5,r5,#8
                  |L1.226|
0000e2  3608              ADDS     r6,r6,#8
                  |L1.228|
0000e4  455e              CMP      r6,r11                ;273
0000e6  d201              BCS      |L1.236|
0000e8  2f00              CMP      r7,#0                 ;273
0000ea  d1d9              BNE      |L1.160|
                  |L1.236|
;;;300          outputaddr+=4;
;;;301        }
;;;302      }
;;;303    
;;;304      /* Disable Crypto */
;;;305      CRYP_Cmd(DISABLE);
0000ec  2000              MOVS     r0,#0
0000ee  f7fffffe          BL       CRYP_Cmd
;;;306    
;;;307      return status; 
0000f2  4638              MOV      r0,r7
                  |L1.244|
;;;308    }
0000f4  b015              ADD      sp,sp,#0x54
0000f6  e8bd8ff0          POP      {r4-r11,pc}
;;;309    /**
                          ENDP


                          AREA ||i.CRYP_TDES_ECB||, CODE, READONLY, ALIGN=1

                  CRYP_TDES_ECB PROC
;;;99       */
;;;100    ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;101                              uint32_t Ilength, uint8_t *Output)
;;;102    {
000004  b08d              SUB      sp,sp,#0x34
;;;103      CRYP_InitTypeDef TDES_CRYP_InitStructure;
;;;104      CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
;;;105      __IO uint32_t counter = 0;
000006  f04f0900          MOV      r9,#0
00000a  4683              MOV      r11,r0                ;102
00000c  9d16              LDR      r5,[sp,#0x58]
00000e  469a              MOV      r10,r3                ;102
000010  4614              MOV      r4,r2                 ;102
;;;106      uint32_t busystatus = 0;
;;;107      ErrorStatus status = SUCCESS;
000012  2701              MOVS     r7,#1
;;;108      uint32_t keyaddr    = (uint32_t)Key;
000014  4688              MOV      r8,r1
;;;109      uint32_t inputaddr  = (uint32_t)Input;
;;;110      uint32_t outputaddr = (uint32_t)Output;
;;;111      uint32_t i = 0;
000016  464e              MOV      r6,r9
;;;112    
;;;113      /* Crypto structures initialisation*/
;;;114      CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
000018  4668              MOV      r0,sp
00001a  f8cd9030          STR      r9,[sp,#0x30]
00001e  f7fffffe          BL       CRYP_KeyStructInit
;;;115    
;;;116      /* Crypto Init for Encryption process */
;;;117      if(Mode == MODE_ENCRYPT) /* TDES encryption */
000022  f1bb0f01          CMP      r11,#1
000026  d02c              BEQ      |L2.130|
;;;118      {
;;;119         TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
;;;120      }
;;;121      else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
;;;122      {
;;;123         TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
000028  2004              MOVS     r0,#4
00002a  9008              STR      r0,[sp,#0x20]
                  |L2.44|
;;;124      }
;;;125    
;;;126      TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
;;;127      TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
00002c  2080              MOVS     r0,#0x80
00002e  e9cd9009          STRD     r9,r0,[sp,#0x24]
;;;128      CRYP_Init(&TDES_CRYP_InitStructure);
000032  a808              ADD      r0,sp,#0x20
000034  f7fffffe          BL       CRYP_Init
;;;129    
;;;130      /* Key Initialisation */
;;;131      TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000038  f8d80000          LDR      r0,[r8,#0]
00003c  ba00              REV      r0,r0
;;;132      keyaddr+=4;
;;;133      TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
00003e  9002              STR      r0,[sp,#8]
000040  f8d81004          LDR      r1,[r8,#4]
000044  ba09              REV      r1,r1
;;;134      keyaddr+=4;
;;;135      TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000046  9103              STR      r1,[sp,#0xc]
000048  f8d81008          LDR      r1,[r8,#8]
00004c  ba09              REV      r1,r1
;;;136      keyaddr+=4;
;;;137      TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
00004e  9104              STR      r1,[sp,#0x10]
000050  f8d8100c          LDR      r1,[r8,#0xc]
000054  ba09              REV      r1,r1
;;;138      keyaddr+=4;
;;;139      TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000056  9105              STR      r1,[sp,#0x14]
000058  f8d81010          LDR      r1,[r8,#0x10]
00005c  ba09              REV      r1,r1
;;;140      keyaddr+=4;
;;;141      TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
00005e  9106              STR      r1,[sp,#0x18]
000060  f8d80014          LDR      r0,[r8,#0x14]
000064  ba00              REV      r0,r0
;;;142      CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
000066  9007              STR      r0,[sp,#0x1c]
000068  4668              MOV      r0,sp
00006a  f7fffffe          BL       CRYP_KeyInit
;;;143    
;;;144      /* Flush IN/OUT FIFO */
;;;145      CRYP_FIFOFlush();
00006e  f7fffffe          BL       CRYP_FIFOFlush
;;;146    
;;;147      /* Enable Crypto processor */
;;;148      CRYP_Cmd(ENABLE);
000072  2001              MOVS     r0,#1
000074  f7fffffe          BL       CRYP_Cmd
;;;149    
;;;150      if(CRYP_GetCmdStatus() == DISABLE)
000078  f7fffffe          BL       CRYP_GetCmdStatus
00007c  2800              CMP      r0,#0
00007e  d02d              BEQ      |L2.220|
000080  e024              B        |L2.204|
                  |L2.130|
000082  f8cd9020          STR      r9,[sp,#0x20]         ;119
000086  e7d1              B        |L2.44|
                  |L2.136|
;;;151      {
;;;152        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;153           the CRYP peripheral (please check the device sales type. */
;;;154        return(ERROR);
;;;155      }
;;;156      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
;;;157      {
;;;158        /* Write the Input block in the Input FIFO */
;;;159        CRYP_DataIn(*(uint32_t*)(inputaddr));
000088  6820              LDR      r0,[r4,#0]
00008a  f7fffffe          BL       CRYP_DataIn
;;;160        inputaddr+=4;
;;;161        CRYP_DataIn(*(uint32_t*)(inputaddr));
00008e  f8540f04          LDR      r0,[r4,#4]!
000092  f7fffffe          BL       CRYP_DataIn
;;;162        inputaddr+=4;
;;;163    
;;;164        /* Wait until the complete message has been processed */
;;;165        counter = 0;
;;;166        do
;;;167        {
;;;168          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;169          counter++;
;;;170        }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
000096  f44f3880          MOV      r8,#0x10000
00009a  1d24              ADDS     r4,r4,#4
00009c  f8cd9030          STR      r9,[sp,#0x30]
                  |L2.160|
0000a0  2010              MOVS     r0,#0x10              ;168
0000a2  f7fffffe          BL       CRYP_GetFlagStatus
0000a6  990c              LDR      r1,[sp,#0x30]         ;169
0000a8  1c49              ADDS     r1,r1,#1              ;169
0000aa  910c              STR      r1,[sp,#0x30]
0000ac  4541              CMP      r1,r8
0000ae  d002              BEQ      |L2.182|
0000b0  2800              CMP      r0,#0
0000b2  d1f5              BNE      |L2.160|
0000b4  e002              B        |L2.188|
                  |L2.182|
;;;171    
;;;172        if (busystatus != RESET)
0000b6  b108              CBZ      r0,|L2.188|
;;;173        {
;;;174           status = ERROR;
0000b8  2700              MOVS     r7,#0
0000ba  e006              B        |L2.202|
                  |L2.188|
;;;175        }
;;;176        else
;;;177        {
;;;178    
;;;179          /* Read the Output block from the Output FIFO */
;;;180          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000bc  f7fffffe          BL       CRYP_DataOut
;;;181          outputaddr+=4;
;;;182          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000c0  6028              STR      r0,[r5,#0]
0000c2  f7fffffe          BL       CRYP_DataOut
0000c6  6068              STR      r0,[r5,#4]
0000c8  3508              ADDS     r5,r5,#8
                  |L2.202|
0000ca  3608              ADDS     r6,r6,#8
                  |L2.204|
0000cc  4556              CMP      r6,r10                ;156
0000ce  d201              BCS      |L2.212|
0000d0  2f00              CMP      r7,#0                 ;156
0000d2  d1d9              BNE      |L2.136|
                  |L2.212|
;;;183          outputaddr+=4;
;;;184        }
;;;185      }
;;;186    
;;;187      /* Disable Crypto */
;;;188      CRYP_Cmd(DISABLE);
0000d4  2000              MOVS     r0,#0
0000d6  f7fffffe          BL       CRYP_Cmd
;;;189    
;;;190      return status; 
0000da  4638              MOV      r0,r7
                  |L2.220|
;;;191    }
0000dc  b00d              ADD      sp,sp,#0x34
0000de  e8bd8ff0          POP      {r4-r11,pc}
;;;192    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Libraries\\FWlib\\src\\stm32f4xx_cryp_tdes.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REV16|
#line 129 "E:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REVSH|
#line 144
|__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
