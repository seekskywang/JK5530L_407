; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\stm32f4xx_cryp_tdes.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\stm32f4xx_cryp_tdes.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=538 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\stm32f4xx_cryp_tdes.crf --no_multibyte_chars ..\Libraries\FWlib\src\stm32f4xx_cryp_tdes.c]
                          THUMB

                          AREA ||i.CRYP_TDES_CBC||, CODE, READONLY, ALIGN=1

                  CRYP_TDES_CBC PROC
;;;207      */
;;;208    ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;209                              uint8_t *Input, uint32_t Ilength, uint8_t *Output)
;;;210    {
000004  b097              SUB      sp,sp,#0x5c
;;;211      CRYP_InitTypeDef TDES_CRYP_InitStructure;
;;;212      CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
;;;213      CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
;;;214      __IO uint32_t counter = 0;
000006  f04f0b00          MOV      r11,#0
00000a  e9dd9624          LDRD     r9,r6,[sp,#0x90]      ;210
;;;215      uint32_t busystatus = 0;
;;;216      ErrorStatus status = SUCCESS;
00000e  f04f0a01          MOV      r10,#1
;;;217      uint32_t keyaddr    = (uint32_t)Key;
000012  460c              MOV      r4,r1
;;;218      uint32_t inputaddr  = (uint32_t)Input;
000014  461d              MOV      r5,r3
;;;219      uint32_t outputaddr = (uint32_t)Output;
;;;220      uint32_t ivaddr     = (uint32_t)InitVectors;
000016  4690              MOV      r8,r2
;;;221      uint32_t i = 0;
000018  465f              MOV      r7,r11
;;;222    
;;;223      /* Crypto structures initialisation*/
;;;224      CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
00001a  a806              ADD      r0,sp,#0x18
00001c  f8cdb000          STR      r11,[sp,#0]
000020  f7fffffe          BL       CRYP_KeyStructInit
;;;225    
;;;226      /* Crypto Init for Encryption process */
;;;227      if(Mode == MODE_ENCRYPT) /* TDES encryption */
000024  9817              LDR      r0,[sp,#0x5c]
000026  2801              CMP      r0,#1
000028  d037              BEQ      |L1.154|
;;;228      {
;;;229        TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
;;;230      }
;;;231      else
;;;232      {
;;;233        TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
00002a  2004              MOVS     r0,#4
00002c  900e              STR      r0,[sp,#0x38]
                  |L1.46|
;;;234      }
;;;235      TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
00002e  2008              MOVS     r0,#8
;;;236      TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000030  900f              STR      r0,[sp,#0x3c]
000032  2080              MOVS     r0,#0x80
;;;237    
;;;238      CRYP_Init(&TDES_CRYP_InitStructure);
000034  9010              STR      r0,[sp,#0x40]
000036  a80e              ADD      r0,sp,#0x38
000038  f7fffffe          BL       CRYP_Init
;;;239    
;;;240      /* Key Initialisation */
;;;241      TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
00003c  6820              LDR      r0,[r4,#0]
00003e  ba00              REV      r0,r0
;;;242      keyaddr+=4;
;;;243      TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000040  9008              STR      r0,[sp,#0x20]
000042  6860              LDR      r0,[r4,#4]
000044  ba00              REV      r0,r0
;;;244      keyaddr+=4;
;;;245      TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000046  9009              STR      r0,[sp,#0x24]
000048  68a0              LDR      r0,[r4,#8]
00004a  ba00              REV      r0,r0
;;;246      keyaddr+=4;
;;;247      TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
00004c  900a              STR      r0,[sp,#0x28]
00004e  68e0              LDR      r0,[r4,#0xc]
000050  ba00              REV      r0,r0
;;;248      keyaddr+=4;
;;;249      TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000052  900b              STR      r0,[sp,#0x2c]
000054  6920              LDR      r0,[r4,#0x10]
000056  ba00              REV      r0,r0
;;;250      keyaddr+=4;
;;;251      TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000058  900c              STR      r0,[sp,#0x30]
00005a  6960              LDR      r0,[r4,#0x14]
00005c  ba00              REV      r0,r0
;;;252      CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
00005e  900d              STR      r0,[sp,#0x34]
000060  a806              ADD      r0,sp,#0x18
000062  f7fffffe          BL       CRYP_KeyInit
;;;253    
;;;254      /* Initialization Vectors */
;;;255      TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
000066  f8d80000          LDR      r0,[r8,#0]
00006a  ba00              REV      r0,r0
;;;256      ivaddr+=4;
;;;257      TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
00006c  9012              STR      r0,[sp,#0x48]
00006e  f8d80004          LDR      r0,[r8,#4]
000072  ba00              REV      r0,r0
;;;258      CRYP_IVInit(&TDES_CRYP_IVInitStructure);
000074  9013              STR      r0,[sp,#0x4c]
000076  a812              ADD      r0,sp,#0x48
000078  f7fffffe          BL       CRYP_IVInit
;;;259    
;;;260      /* Flush IN/OUT FIFO */
;;;261      CRYP_FIFOFlush();
00007c  f7fffffe          BL       CRYP_FIFOFlush
;;;262    
;;;263      /* Enable Crypto processor */
;;;264      CRYP_Cmd(ENABLE);
000080  2001              MOVS     r0,#1
000082  f7fffffe          BL       CRYP_Cmd
;;;265    
;;;266      if(CRYP_GetCmdStatus() == DISABLE)
000086  f7fffffe          BL       CRYP_GetCmdStatus
00008a  2800              CMP      r0,#0
00008c  d032              BEQ      |L1.244|
;;;267      {
;;;268        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;269           the CRYP peripheral (please check the device sales type. */
;;;270        return(ERROR);
;;;271      }
;;;272      
;;;273      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
00008e  f1b90f00          CMP      r9,#0
000092  d92b              BLS      |L1.236|
;;;274      {
;;;275        /* Write the Input block in the Input FIFO */
;;;276        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;277        inputaddr+=4;
;;;278        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;279        inputaddr+=4;
;;;280    
;;;281        /* Wait until the complete message has been processed */
;;;282        counter = 0;
;;;283        do
;;;284        {
;;;285          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;286          counter++;
;;;287        }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
000094  f44f3480          MOV      r4,#0x10000
000098  e002              B        |L1.160|
                  |L1.154|
00009a  f8cdb038          STR      r11,[sp,#0x38]        ;229
00009e  e7c6              B        |L1.46|
                  |L1.160|
0000a0  6828              LDR      r0,[r5,#0]            ;276
0000a2  f7fffffe          BL       CRYP_DataIn
0000a6  f8550f04          LDR      r0,[r5,#4]!           ;278
0000aa  f7fffffe          BL       CRYP_DataIn
0000ae  1d2d              ADDS     r5,r5,#4              ;282
0000b0  f8cdb000          STR      r11,[sp,#0]           ;282
                  |L1.180|
0000b4  2010              MOVS     r0,#0x10              ;285
0000b6  f7fffffe          BL       CRYP_GetFlagStatus
0000ba  9900              LDR      r1,[sp,#0]            ;286
0000bc  1c49              ADDS     r1,r1,#1              ;286
0000be  9100              STR      r1,[sp,#0]
0000c0  42a1              CMP      r1,r4
0000c2  d002              BEQ      |L1.202|
0000c4  2800              CMP      r0,#0
0000c6  d1f5              BNE      |L1.180|
0000c8  e003              B        |L1.210|
                  |L1.202|
;;;288    
;;;289        if (busystatus != RESET)
0000ca  b110              CBZ      r0,|L1.210|
;;;290       {
;;;291           status = ERROR;
0000cc  f04f0a00          MOV      r10,#0
0000d0  e006              B        |L1.224|
                  |L1.210|
;;;292        }
;;;293        else
;;;294        {
;;;295    
;;;296          /* Read the Output block from the Output FIFO */
;;;297          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000d2  f7fffffe          BL       CRYP_DataOut
;;;298          outputaddr+=4;
;;;299          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000d6  6030              STR      r0,[r6,#0]
0000d8  f7fffffe          BL       CRYP_DataOut
0000dc  6070              STR      r0,[r6,#4]
0000de  3608              ADDS     r6,r6,#8
                  |L1.224|
0000e0  3708              ADDS     r7,r7,#8
0000e2  454f              CMP      r7,r9                 ;273
0000e4  d202              BCS      |L1.236|
0000e6  f1ba0f00          CMP      r10,#0                ;273
0000ea  d1d9              BNE      |L1.160|
                  |L1.236|
;;;300          outputaddr+=4;
;;;301        }
;;;302      }
;;;303    
;;;304      /* Disable Crypto */
;;;305      CRYP_Cmd(DISABLE);
0000ec  2000              MOVS     r0,#0
0000ee  f7fffffe          BL       CRYP_Cmd
;;;306    
;;;307      return status; 
0000f2  4650              MOV      r0,r10
                  |L1.244|
;;;308    }
0000f4  b01b              ADD      sp,sp,#0x6c
0000f6  e8bd8ff0          POP      {r4-r11,pc}
;;;309    /**
                          ENDP


                          AREA ||i.CRYP_TDES_ECB||, CODE, READONLY, ALIGN=1

                  CRYP_TDES_ECB PROC
;;;99       */
;;;100    ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;101                              uint32_t Ilength, uint8_t *Output)
;;;102    {
000004  b093              SUB      sp,sp,#0x4c
;;;103      CRYP_InitTypeDef TDES_CRYP_InitStructure;
;;;104      CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
;;;105      __IO uint32_t counter = 0;
000006  f04f0a00          MOV      r10,#0
00000a  4683              MOV      r11,r0                ;102
00000c  4698              MOV      r8,r3                 ;102
00000e  9e1c              LDR      r6,[sp,#0x70]
;;;106      uint32_t busystatus = 0;
;;;107      ErrorStatus status = SUCCESS;
000010  f04f0901          MOV      r9,#1
;;;108      uint32_t keyaddr    = (uint32_t)Key;
000014  460c              MOV      r4,r1
;;;109      uint32_t inputaddr  = (uint32_t)Input;
000016  4615              MOV      r5,r2
;;;110      uint32_t outputaddr = (uint32_t)Output;
;;;111      uint32_t i = 0;
000018  4657              MOV      r7,r10
;;;112    
;;;113      /* Crypto structures initialisation*/
;;;114      CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
00001a  a805              ADD      r0,sp,#0x14
00001c  f8cda000          STR      r10,[sp,#0]
000020  f7fffffe          BL       CRYP_KeyStructInit
;;;115    
;;;116      /* Crypto Init for Encryption process */
;;;117      if(Mode == MODE_ENCRYPT) /* TDES encryption */
000024  f1bb0f01          CMP      r11,#1
000028  d02b              BEQ      |L2.130|
;;;118      {
;;;119         TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
;;;120      }
;;;121      else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
;;;122      {
;;;123         TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
00002a  2004              MOVS     r0,#4
00002c  900d              STR      r0,[sp,#0x34]
                  |L2.46|
;;;124      }
;;;125    
;;;126      TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
;;;127      TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
00002e  2080              MOVS     r0,#0x80
000030  e9cda00e          STRD     r10,r0,[sp,#0x38]
;;;128      CRYP_Init(&TDES_CRYP_InitStructure);
000034  a80d              ADD      r0,sp,#0x34
000036  f7fffffe          BL       CRYP_Init
;;;129    
;;;130      /* Key Initialisation */
;;;131      TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
00003a  6820              LDR      r0,[r4,#0]
00003c  ba00              REV      r0,r0
;;;132      keyaddr+=4;
;;;133      TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
00003e  9007              STR      r0,[sp,#0x1c]
000040  6860              LDR      r0,[r4,#4]
000042  ba00              REV      r0,r0
;;;134      keyaddr+=4;
;;;135      TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000044  9008              STR      r0,[sp,#0x20]
000046  68a0              LDR      r0,[r4,#8]
000048  ba00              REV      r0,r0
;;;136      keyaddr+=4;
;;;137      TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
00004a  9009              STR      r0,[sp,#0x24]
00004c  68e0              LDR      r0,[r4,#0xc]
00004e  ba00              REV      r0,r0
;;;138      keyaddr+=4;
;;;139      TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000050  900a              STR      r0,[sp,#0x28]
000052  6920              LDR      r0,[r4,#0x10]
000054  ba00              REV      r0,r0
;;;140      keyaddr+=4;
;;;141      TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000056  900b              STR      r0,[sp,#0x2c]
000058  6960              LDR      r0,[r4,#0x14]
00005a  ba00              REV      r0,r0
;;;142      CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
00005c  900c              STR      r0,[sp,#0x30]
00005e  a805              ADD      r0,sp,#0x14
000060  f7fffffe          BL       CRYP_KeyInit
;;;143    
;;;144      /* Flush IN/OUT FIFO */
;;;145      CRYP_FIFOFlush();
000064  f7fffffe          BL       CRYP_FIFOFlush
;;;146    
;;;147      /* Enable Crypto processor */
;;;148      CRYP_Cmd(ENABLE);
000068  2001              MOVS     r0,#1
00006a  f7fffffe          BL       CRYP_Cmd
;;;149    
;;;150      if(CRYP_GetCmdStatus() == DISABLE)
00006e  f7fffffe          BL       CRYP_GetCmdStatus
000072  2800              CMP      r0,#0
000074  d032              BEQ      |L2.220|
;;;151      {
;;;152        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;153           the CRYP peripheral (please check the device sales type. */
;;;154        return(ERROR);
;;;155      }
;;;156      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
000076  f1b80f00          CMP      r8,#0
00007a  d92b              BLS      |L2.212|
;;;157      {
;;;158        /* Write the Input block in the Input FIFO */
;;;159        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;160        inputaddr+=4;
;;;161        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;162        inputaddr+=4;
;;;163    
;;;164        /* Wait until the complete message has been processed */
;;;165        counter = 0;
;;;166        do
;;;167        {
;;;168          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;169          counter++;
;;;170        }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
00007c  f44f3480          MOV      r4,#0x10000
000080  e002              B        |L2.136|
                  |L2.130|
000082  f8cda034          STR      r10,[sp,#0x34]        ;119
000086  e7d2              B        |L2.46|
                  |L2.136|
000088  6828              LDR      r0,[r5,#0]            ;159
00008a  f7fffffe          BL       CRYP_DataIn
00008e  f8550f04          LDR      r0,[r5,#4]!           ;161
000092  f7fffffe          BL       CRYP_DataIn
000096  1d2d              ADDS     r5,r5,#4              ;165
000098  f8cda000          STR      r10,[sp,#0]           ;165
                  |L2.156|
00009c  2010              MOVS     r0,#0x10              ;168
00009e  f7fffffe          BL       CRYP_GetFlagStatus
0000a2  9900              LDR      r1,[sp,#0]            ;169
0000a4  1c49              ADDS     r1,r1,#1              ;169
0000a6  9100              STR      r1,[sp,#0]
0000a8  42a1              CMP      r1,r4
0000aa  d002              BEQ      |L2.178|
0000ac  2800              CMP      r0,#0
0000ae  d1f5              BNE      |L2.156|
0000b0  e003              B        |L2.186|
                  |L2.178|
;;;171    
;;;172        if (busystatus != RESET)
0000b2  b110              CBZ      r0,|L2.186|
;;;173        {
;;;174           status = ERROR;
0000b4  f04f0900          MOV      r9,#0
0000b8  e006              B        |L2.200|
                  |L2.186|
;;;175        }
;;;176        else
;;;177        {
;;;178    
;;;179          /* Read the Output block from the Output FIFO */
;;;180          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000ba  f7fffffe          BL       CRYP_DataOut
;;;181          outputaddr+=4;
;;;182          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000be  6030              STR      r0,[r6,#0]
0000c0  f7fffffe          BL       CRYP_DataOut
0000c4  6070              STR      r0,[r6,#4]
0000c6  3608              ADDS     r6,r6,#8
                  |L2.200|
0000c8  3708              ADDS     r7,r7,#8
0000ca  4547              CMP      r7,r8                 ;156
0000cc  d202              BCS      |L2.212|
0000ce  f1b90f00          CMP      r9,#0                 ;156
0000d2  d1d9              BNE      |L2.136|
                  |L2.212|
;;;183          outputaddr+=4;
;;;184        }
;;;185      }
;;;186    
;;;187      /* Disable Crypto */
;;;188      CRYP_Cmd(DISABLE);
0000d4  2000              MOVS     r0,#0
0000d6  f7fffffe          BL       CRYP_Cmd
;;;189    
;;;190      return status; 
0000da  4648              MOV      r0,r9
                  |L2.220|
;;;191    }
0000dc  b013              ADD      sp,sp,#0x4c
0000de  e8bd8ff0          POP      {r4-r11,pc}
;;;192    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Libraries\\FWlib\\src\\stm32f4xx_cryp_tdes.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REVSH|
#line 144
|__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
