; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\stm32f4xx_rng.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\stm32f4xx_rng.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=537 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\stm32f4xx_rng.crf --no_multibyte_chars ..\Libraries\FWlib\src\stm32f4xx_rng.c]
                          THUMB

                          AREA ||i.RNG_ClearFlag||, CODE, READONLY, ALIGN=2

                  RNG_ClearFlag PROC
;;;325      */
;;;326    void RNG_ClearFlag(uint8_t RNG_FLAG)
000000  4902              LDR      r1,|L1.12|
;;;327    {
;;;328      /* Check the parameters */
;;;329      assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
;;;330      /* Clear the selected RNG flags */
;;;331      RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
000002  ea6f1000          MVN      r0,r0,LSL #4
000006  6008              STR      r0,[r1,#0]
;;;332    }
000008  4770              BX       lr
;;;333    
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      0x50060804

                          AREA ||i.RNG_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  RNG_ClearITPendingBit PROC
;;;371      */
;;;372    void RNG_ClearITPendingBit(uint8_t RNG_IT)
000000  4902              LDR      r1,|L2.12|
;;;373    {
;;;374      /* Check the parameters */
;;;375      assert_param(IS_RNG_IT(RNG_IT));
;;;376    
;;;377      /* Clear the selected RNG interrupt pending bit */
;;;378      RNG->SR = (uint8_t)~RNG_IT;
000002  43c0              MVNS     r0,r0
000004  b2c0              UXTB     r0,r0
000006  6008              STR      r0,[r1,#0]
;;;379    }
000008  4770              BX       lr
;;;380    /**
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      0x50060804

                          AREA ||i.RNG_Cmd||, CODE, READONLY, ALIGN=2

                  RNG_Cmd PROC
;;;113      */
;;;114    void RNG_Cmd(FunctionalState NewState)
000000  4905              LDR      r1,|L3.24|
;;;115    {
;;;116      /* Check the parameters */
;;;117      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;118    
;;;119      if (NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;120      {
;;;121        /* Enable the RNG */
;;;122        RNG->CR |= RNG_CR_RNGEN;
;;;123      }
;;;124      else
;;;125      {
;;;126        /* Disable the RNG */
;;;127        RNG->CR &= ~RNG_CR_RNGEN;
000004  6808              LDR      r0,[r1,#0]
000006  d002              BEQ      |L3.14|
000008  f0400004          ORR      r0,r0,#4              ;122
00000c  e001              B        |L3.18|
                  |L3.14|
00000e  f0200004          BIC      r0,r0,#4
                  |L3.18|
000012  6008              STR      r0,[r1,#0]            ;122
;;;128      }
;;;129    }
000014  4770              BX       lr
;;;130    /**
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      0x50060800

                          AREA ||i.RNG_DeInit||, CODE, READONLY, ALIGN=1

                  RNG_DeInit PROC
;;;98       */
;;;99     void RNG_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;100    {
;;;101      /* Enable RNG reset state */
;;;102      RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
000002  2101              MOVS     r1,#1
000004  2040              MOVS     r0,#0x40
000006  f7fffffe          BL       RCC_AHB2PeriphResetCmd
;;;103    
;;;104      /* Release RNG from reset state */
;;;105      RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  e8bd4010          POP      {r4,lr}
000010  2040              MOVS     r0,#0x40
000012  f7ffbffe          B.W      RCC_AHB2PeriphResetCmd
;;;106    }
;;;107    
                          ENDP


                          AREA ||i.RNG_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  RNG_GetFlagStatus PROC
;;;292      */
;;;293    FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
000000  4a03              LDR      r2,|L5.16|
;;;294    {
000002  4601              MOV      r1,r0
;;;295      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;296      /* Check the parameters */
;;;297      assert_param(IS_RNG_GET_FLAG(RNG_FLAG));
;;;298    
;;;299      /* Check the status of the specified RNG flag */
;;;300      if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
000006  6812              LDR      r2,[r2,#0]
000008  420a              TST      r2,r1
00000a  d000              BEQ      |L5.14|
;;;301      {
;;;302        /* RNG_FLAG is set */
;;;303        bitstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L5.14|
;;;304      }
;;;305      else
;;;306      {
;;;307        /* RNG_FLAG is reset */
;;;308        bitstatus = RESET;
;;;309      }
;;;310      /* Return the RNG_FLAG status */
;;;311      return  bitstatus;
;;;312    }
00000e  4770              BX       lr
;;;313    
                          ENDP

                  |L5.16|
                          DCD      0x50060804

                          AREA ||i.RNG_GetITStatus||, CODE, READONLY, ALIGN=2

                  RNG_GetITStatus PROC
;;;341      */
;;;342    ITStatus RNG_GetITStatus(uint8_t RNG_IT)
000000  4a03              LDR      r2,|L6.16|
;;;343    {
000002  4601              MOV      r1,r0
;;;344      ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;345      /* Check the parameters */
;;;346      assert_param(IS_RNG_GET_IT(RNG_IT));
;;;347    
;;;348      /* Check the status of the specified RNG interrupt */
;;;349      if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
000006  6812              LDR      r2,[r2,#0]
000008  420a              TST      r2,r1
00000a  d000              BEQ      |L6.14|
;;;350      {
;;;351        /* RNG_IT is set */
;;;352        bitstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L6.14|
;;;353      }
;;;354      else
;;;355      {
;;;356        /* RNG_IT is reset */
;;;357        bitstatus = RESET;
;;;358      }
;;;359      /* Return the RNG_IT status */
;;;360      return bitstatus;
;;;361    }
00000e  4770              BX       lr
;;;362    
                          ENDP

                  |L6.16|
                          DCD      0x50060804

                          AREA ||i.RNG_GetRandomNumber||, CODE, READONLY, ALIGN=2

                  RNG_GetRandomNumber PROC
;;;175      */
;;;176    uint32_t RNG_GetRandomNumber(void)
000000  4801              LDR      r0,|L7.8|
;;;177    {
;;;178      /* Return the 32 bit random number from the DR register */
;;;179      return RNG->DR;
000002  6800              LDR      r0,[r0,#0]
;;;180    }
000004  4770              BX       lr
;;;181    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      0x50060808

                          AREA ||i.RNG_ITConfig||, CODE, READONLY, ALIGN=2

                  RNG_ITConfig PROC
;;;266      */
;;;267    void RNG_ITConfig(FunctionalState NewState)
000000  4905              LDR      r1,|L8.24|
;;;268    {
;;;269      /* Check the parameters */
;;;270      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;271    
;;;272      if (NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;273      {
;;;274        /* Enable the RNG interrupt */
;;;275        RNG->CR |= RNG_CR_IE;
;;;276      }
;;;277      else
;;;278      {
;;;279        /* Disable the RNG interrupt */
;;;280        RNG->CR &= ~RNG_CR_IE;
000004  6808              LDR      r0,[r1,#0]
000006  d002              BEQ      |L8.14|
000008  f0400008          ORR      r0,r0,#8              ;275
00000c  e001              B        |L8.18|
                  |L8.14|
00000e  f0200008          BIC      r0,r0,#8
                  |L8.18|
000012  6008              STR      r0,[r1,#0]            ;275
;;;281      }
;;;282    }
000014  4770              BX       lr
;;;283    
                          ENDP

000016  0000              DCW      0x0000
                  |L8.24|
                          DCD      0x50060800

;*** Start embedded assembler ***

#line 1 "..\\Libraries\\FWlib\\src\\stm32f4xx_rng.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_rng_c_3ce7902d____REV16|
#line 129 "E:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f4xx_rng_c_3ce7902d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_rng_c_3ce7902d____REVSH|
#line 144
|__asm___15_stm32f4xx_rng_c_3ce7902d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
