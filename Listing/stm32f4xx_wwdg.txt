; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\stm32f4xx_wwdg.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\stm32f4xx_wwdg.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=538 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\stm32f4xx_wwdg.crf --no_multibyte_chars ..\Libraries\FWlib\src\stm32f4xx_wwdg.c]
                          THUMB

                          AREA ||i.WWDG_ClearFlag||, CODE, READONLY, ALIGN=2

                  WWDG_ClearFlag PROC
;;;285      */
;;;286    void WWDG_ClearFlag(void)
000000  4901              LDR      r1,|L1.8|
;;;287    {
;;;288      WWDG->SR = (uint32_t)RESET;
000002  2000              MOVS     r0,#0
000004  6008              STR      r0,[r1,#0]
;;;289    }
000006  4770              BX       lr
;;;290    
                          ENDP

                  |L1.8|
                          DCD      0x40002c08

                          AREA ||i.WWDG_DeInit||, CODE, READONLY, ALIGN=1

                  WWDG_DeInit PROC
;;;137      */
;;;138    void WWDG_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;139    {
;;;140      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
000002  2101              MOVS     r1,#1
000004  02cc              LSLS     r4,r1,#11
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;141      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
00000c  4620              MOV      r0,r4
00000e  e8bd4010          POP      {r4,lr}
000012  2100              MOVS     r1,#0
000014  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;142    }
;;;143    
                          ENDP


                          AREA ||i.WWDG_Enable||, CODE, READONLY, ALIGN=2

                  WWDG_Enable PROC
;;;238      */
;;;239    void WWDG_Enable(uint8_t Counter)
000000  4902              LDR      r1,|L3.12|
;;;240    {
;;;241      /* Check the parameters */
;;;242      assert_param(IS_WWDG_COUNTER(Counter));
;;;243      WWDG->CR = WWDG_CR_WDGA | Counter;
000002  f0400080          ORR      r0,r0,#0x80
000006  6008              STR      r0,[r1,#0]
;;;244    }
000008  4770              BX       lr
;;;245    /**
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40002c00

                          AREA ||i.WWDG_EnableIT||, CODE, READONLY, ALIGN=2

                  WWDG_EnableIT PROC
;;;195      */
;;;196    void WWDG_EnableIT(void)
000000  4902              LDR      r1,|L4.12|
;;;197    {
;;;198      *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
000002  2001              MOVS     r0,#1
000004  f8c100a4          STR      r0,[r1,#0xa4]
;;;199    }
000008  4770              BX       lr
;;;200    
                          ENDP

00000a  0000              DCW      0x0000
                  |L4.12|
                          DCD      0x42058000

                          AREA ||i.WWDG_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  WWDG_GetFlagStatus PROC
;;;265      */
;;;266    FlagStatus WWDG_GetFlagStatus(void)
000000  4903              LDR      r1,|L5.16|
;;;267    {
;;;268      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;269        
;;;270      if ((WWDG->SR) != (uint32_t)RESET)
000004  6809              LDR      r1,[r1,#0]
000006  2900              CMP      r1,#0                 ;267
000008  d000              BEQ      |L5.12|
;;;271      {
;;;272        bitstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L5.12|
;;;273      }
;;;274      else
;;;275      {
;;;276        bitstatus = RESET;
;;;277      }
;;;278      return bitstatus;
;;;279    }
00000c  4770              BX       lr
;;;280    
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      0x40002c08

                          AREA ||i.WWDG_SetCounter||, CODE, READONLY, ALIGN=2

                  WWDG_SetCounter PROC
;;;207      */
;;;208    void WWDG_SetCounter(uint8_t Counter)
000000  4902              LDR      r1,|L6.12|
;;;209    {
;;;210      /* Check the parameters */
;;;211      assert_param(IS_WWDG_COUNTER(Counter));
;;;212      /* Write to T[6:0] bits to configure the counter value, no need to do
;;;213         a read-modify-write; writing a 0 to WDGA bit does nothing */
;;;214      WWDG->CR = Counter & BIT_MASK;
000002  f000007f          AND      r0,r0,#0x7f
000006  6008              STR      r0,[r1,#0]
;;;215    }
000008  4770              BX       lr
;;;216    /**
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      0x40002c00

                          AREA ||i.WWDG_SetPrescaler||, CODE, READONLY, ALIGN=2

                  WWDG_SetPrescaler PROC
;;;153      */
;;;154    void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
000000  4a03              LDR      r2,|L7.16|
;;;155    {
;;;156      uint32_t tmpreg = 0;
;;;157      /* Check the parameters */
;;;158      assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
;;;159      /* Clear WDGTB[1:0] bits */
;;;160      tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
000002  6811              LDR      r1,[r2,#0]
000004  f42171c0          BIC      r1,r1,#0x180
;;;161      /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
;;;162      tmpreg |= WWDG_Prescaler;
000008  4301              ORRS     r1,r1,r0
;;;163      /* Store the new value */
;;;164      WWDG->CFR = tmpreg;
00000a  6011              STR      r1,[r2,#0]
;;;165    }
00000c  4770              BX       lr
;;;166    
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0x40002c04

                          AREA ||i.WWDG_SetWindowValue||, CODE, READONLY, ALIGN=2

                  WWDG_SetWindowValue PROC
;;;172      */
;;;173    void WWDG_SetWindowValue(uint8_t WindowValue)
000000  4905              LDR      r1,|L8.24|
;;;174    {
000002  b508              PUSH     {r3,lr}
;;;175      __IO uint32_t tmpreg = 0;
;;;176    
;;;177      /* Check the parameters */
;;;178      assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
;;;179      /* Clear W[6:0] bits */
;;;180    
;;;181      tmpreg = WWDG->CFR & CFR_W_MASK;
000004  680a              LDR      r2,[r1,#0]
;;;182    
;;;183      /* Set W[6:0] bits according to WindowValue value */
;;;184      tmpreg |= WindowValue & (uint32_t) BIT_MASK;
000006  f000007f          AND      r0,r0,#0x7f
00000a  f022027f          BIC      r2,r2,#0x7f           ;181
00000e  4310              ORRS     r0,r0,r2
;;;185    
;;;186      /* Store the new value */
;;;187      WWDG->CFR = tmpreg;
000010  9000              STR      r0,[sp,#0]
000012  6008              STR      r0,[r1,#0]
;;;188    }
000014  bd08              POP      {r3,pc}
;;;189    
                          ENDP

000016  0000              DCW      0x0000
                  |L8.24|
                          DCD      0x40002c04

;*** Start embedded assembler ***

#line 1 "..\\Libraries\\FWlib\\src\\stm32f4xx_wwdg.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_wwdg_c_9668c0ca____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32f4xx_wwdg_c_9668c0ca____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_wwdg_c_9668c0ca____REVSH|
#line 144
|__asm___16_stm32f4xx_wwdg_c_9668c0ca____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
