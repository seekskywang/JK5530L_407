; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\system_stm32f4xx.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\system_stm32f4xx.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=538 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\system_stm32f4xx.crf --no_multibyte_chars ..\User\system_stm32f4xx.c]
                          THUMB

                          AREA ||i.SetSysClock||, CODE, READONLY, ALIGN=2

                  SetSysClock PROC
;;;509      */
;;;510    static void SetSysClock(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;511    {
;;;512    /******************************************************************************/
;;;513    /*            PLL (clocked by HSE) used as System clock source                */
;;;514    /******************************************************************************/
;;;515      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2000              MOVS     r0,#0
;;;516      
;;;517      /* Enable HSE */
;;;518      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000004  4927              LDR      r1,|L1.164|
000006  9001              STR      r0,[sp,#4]            ;515
000008  9000              STR      r0,[sp,#0]
00000a  680a              LDR      r2,[r1,#0]
00000c  f4423280          ORR      r2,r2,#0x10000
000010  600a              STR      r2,[r1,#0]
;;;519     
;;;520      /* Wait till HSE is ready and if Time out is reached exit */
;;;521      do
;;;522      {
;;;523        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;524        StartUpCounter++;
;;;525      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000012  f44f43a0          MOV      r3,#0x5000
                  |L1.22|
000016  680a              LDR      r2,[r1,#0]            ;523
000018  f4023200          AND      r2,r2,#0x20000        ;523
00001c  9200              STR      r2,[sp,#0]            ;524
00001e  9a01              LDR      r2,[sp,#4]            ;524
000020  1c52              ADDS     r2,r2,#1              ;524
000022  9201              STR      r2,[sp,#4]
000024  9a00              LDR      r2,[sp,#0]
000026  b912              CBNZ     r2,|L1.46|
000028  9a01              LDR      r2,[sp,#4]
00002a  429a              CMP      r2,r3
00002c  d1f3              BNE      |L1.22|
                  |L1.46|
;;;526    
;;;527      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
00002e  680a              LDR      r2,[r1,#0]
000030  0392              LSLS     r2,r2,#14
000032  d534              BPL      |L1.158|
;;;528      {
;;;529        HSEStatus = (uint32_t)0x01;
000034  2001              MOVS     r0,#1
;;;530      }
;;;531      else
;;;532      {
;;;533        HSEStatus = (uint32_t)0x00;
;;;534      }
;;;535    
;;;536      if (HSEStatus == (uint32_t)0x01)
;;;537      {
;;;538        /* Select regulator voltage output Scale 1 mode */
;;;539        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
000036  9000              STR      r0,[sp,#0]
000038  481a              LDR      r0,|L1.164|
00003a  3040              ADDS     r0,r0,#0x40
00003c  6802              LDR      r2,[r0,#0]
00003e  f0425280          ORR      r2,r2,#0x10000000
000042  6002              STR      r2,[r0,#0]
;;;540        PWR->CR |= PWR_CR_VOS;
000044  4818              LDR      r0,|L1.168|
000046  6802              LDR      r2,[r0,#0]
000048  f4424240          ORR      r2,r2,#0xc000
00004c  6002              STR      r2,[r0,#0]
;;;541    
;;;542        /* HCLK = SYSCLK / 1*/
;;;543        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
00004e  4815              LDR      r0,|L1.164|
000050  3008              ADDS     r0,r0,#8
000052  6802              LDR      r2,[r0,#0]
000054  6002              STR      r2,[r0,#0]
;;;544    
;;;545    #if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
;;;546        /* PCLK2 = HCLK / 2*/
;;;547        RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
000056  6802              LDR      r2,[r0,#0]
000058  f4424200          ORR      r2,r2,#0x8000
00005c  6002              STR      r2,[r0,#0]
;;;548        
;;;549        /* PCLK1 = HCLK / 4*/
;;;550        RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
00005e  6802              LDR      r2,[r0,#0]
000060  f44252a0          ORR      r2,r2,#0x1400
000064  6002              STR      r2,[r0,#0]
;;;551    #endif /* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx */
;;;552    
;;;553    #if defined (STM32F401xx)
;;;554        /* PCLK2 = HCLK / 2*/
;;;555        RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;556        
;;;557        /* PCLK1 = HCLK / 4*/
;;;558        RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;559    #endif /* STM32F401xx */
;;;560       
;;;561        /* Configure the main PLL */
;;;562        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
000066  1f03              SUBS     r3,r0,#4
000068  4a10              LDR      r2,|L1.172|
00006a  601a              STR      r2,[r3,#0]
;;;563                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;564    
;;;565        /* Enable the main PLL */
;;;566        RCC->CR |= RCC_CR_PLLON;
00006c  680a              LDR      r2,[r1,#0]
00006e  f0427280          ORR      r2,r2,#0x1000000
000072  600a              STR      r2,[r1,#0]
                  |L1.116|
;;;567    
;;;568        /* Wait till the main PLL is ready */
;;;569        while((RCC->CR & RCC_CR_PLLRDY) == 0)
000074  680a              LDR      r2,[r1,#0]
000076  0192              LSLS     r2,r2,#6
000078  d5fc              BPL      |L1.116|
;;;570        {
;;;571        }
;;;572       
;;;573    #if defined (STM32F427_437xx) || defined (STM32F429_439xx)
;;;574        /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
;;;575        PWR->CR |= PWR_CR_ODEN;
;;;576        while((PWR->CSR & PWR_CSR_ODRDY) == 0)
;;;577        {
;;;578        }
;;;579        PWR->CR |= PWR_CR_ODSWEN;
;;;580        while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
;;;581        {
;;;582        }      
;;;583        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;584        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
;;;585    #endif /* STM32F427_437x || STM32F429_439xx  */
;;;586    
;;;587    #if defined (STM32F40_41xxx)     
;;;588        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;589        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
00007a  4a0d              LDR      r2,|L1.176|
00007c  f2407105          MOV      r1,#0x705
000080  6011              STR      r1,[r2,#0]
;;;590    #endif /* STM32F40_41xxx  */
;;;591    
;;;592    #if defined (STM32F401xx)
;;;593        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;594        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;595    #endif /* STM32F401xx */
;;;596    
;;;597        /* Select the main PLL as system clock source */
;;;598        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
000082  6801              LDR      r1,[r0,#0]
000084  f0210103          BIC      r1,r1,#3
000088  6001              STR      r1,[r0,#0]
;;;599        RCC->CFGR |= RCC_CFGR_SW_PLL;
00008a  6801              LDR      r1,[r0,#0]
00008c  f0410102          ORR      r1,r1,#2
000090  6001              STR      r1,[r0,#0]
                  |L1.146|
;;;600    
;;;601        /* Wait till the main PLL is used as system clock source */
;;;602        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
000092  6801              LDR      r1,[r0,#0]
000094  f3c10181          UBFX     r1,r1,#2,#2
000098  2902              CMP      r1,#2
00009a  d1fa              BNE      |L1.146|
;;;603        {
;;;604        }
;;;605      }
;;;606      else
;;;607      { /* If HSE fails to start-up, the application will have wrong clock
;;;608             configuration. User can add here some code to deal with this error */
;;;609      }
;;;610    
;;;611    }
00009c  bd0c              POP      {r2,r3,pc}
                  |L1.158|
00009e  9000              STR      r0,[sp,#0]            ;533
0000a0  bd0c              POP      {r2,r3,pc}
;;;612    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L1.164|
                          DCD      0x40023800
                  |L1.168|
                          DCD      0x40007000
                  |L1.172|
                          DCD      0x07405419
                  |L1.176|
                          DCD      0x40023c00

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;453      */
;;;454    void SystemCoreClockUpdate(void)
000000  b570              PUSH     {r4-r6,lr}
;;;455    {
;;;456      uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
;;;457      
;;;458      /* Get SYSCLK source -------------------------------------------------------*/
;;;459      tmp = RCC->CFGR & RCC_CFGR_SWS;
000002  4c1a              LDR      r4,|L2.108|
000004  6820              LDR      r0,[r4,#0]
;;;460    
;;;461      switch (tmp)
;;;462      {
;;;463        case 0x00:  /* HSI used as system clock source */
;;;464          SystemCoreClock = HSI_VALUE;
000006  4a1a              LDR      r2,|L2.112|
000008  f010010c          ANDS     r1,r0,#0xc            ;459
00000c  4819              LDR      r0,|L2.116|
00000e  d004              BEQ      |L2.26|
;;;465          break;
;;;466        case 0x04:  /* HSE used as system clock source */
;;;467          SystemCoreClock = HSE_VALUE;
000010  1055              ASRS     r5,r2,#1
000012  2904              CMP      r1,#4                 ;461
000014  d003              BEQ      |L2.30|
000016  2908              CMP      r1,#8                 ;461
000018  d003              BEQ      |L2.34|
                  |L2.26|
00001a  6002              STR      r2,[r0,#0]            ;465  ; SystemCoreClock
00001c  e01b              B        |L2.86|
                  |L2.30|
;;;468          break;
00001e  6005              STR      r5,[r0,#0]  ; SystemCoreClock
000020  e019              B        |L2.86|
                  |L2.34|
;;;469        case 0x08:  /* PLL used as system clock source */
;;;470    
;;;471          /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;472             SYSCLK = PLL_VCO / PLL_P
;;;473             */    
;;;474          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
000022  4912              LDR      r1,|L2.108|
000024  1f09              SUBS     r1,r1,#4
000026  680b              LDR      r3,[r1,#0]
000028  f3c35680          UBFX     r6,r3,#22,#1
;;;475          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
00002c  680b              LDR      r3,[r1,#0]
00002e  f003033f          AND      r3,r3,#0x3f
;;;476          
;;;477          if (pllsource != 0)
000032  b116              CBZ      r6,|L2.58|
;;;478          {
;;;479            /* HSE used as PLL clock source */
;;;480            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
000034  fbb5f2f3          UDIV     r2,r5,r3
000038  e001              B        |L2.62|
                  |L2.58|
;;;481          }
;;;482          else
;;;483          {
;;;484            /* HSI used as PLL clock source */
;;;485            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
00003a  fbb2f2f3          UDIV     r2,r2,r3
                  |L2.62|
00003e  680b              LDR      r3,[r1,#0]
;;;486          }
;;;487    
;;;488          pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
000040  6809              LDR      r1,[r1,#0]
000042  f3c31388          UBFX     r3,r3,#6,#9           ;485
000046  435a              MULS     r2,r3,r2              ;485
000048  f3c14101          UBFX     r1,r1,#16,#2
00004c  1c49              ADDS     r1,r1,#1
00004e  0049              LSLS     r1,r1,#1
;;;489          SystemCoreClock = pllvco/pllp;
000050  fbb2f1f1          UDIV     r1,r2,r1
000054  6001              STR      r1,[r0,#0]  ; SystemCoreClock
                  |L2.86|
;;;490          break;
;;;491        default:
;;;492          SystemCoreClock = HSI_VALUE;
;;;493          break;
;;;494      }
;;;495      /* Compute HCLK frequency --------------------------------------------------*/
;;;496      /* Get HCLK prescaler */
;;;497      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000056  6821              LDR      r1,[r4,#0]
000058  4a06              LDR      r2,|L2.116|
00005a  f3c11103          UBFX     r1,r1,#4,#4
00005e  1d12              ADDS     r2,r2,#4
000060  5c51              LDRB     r1,[r2,r1]
;;;498      /* HCLK frequency */
;;;499      SystemCoreClock >>= tmp;
000062  6802              LDR      r2,[r0,#0]  ; SystemCoreClock
000064  40ca              LSRS     r2,r2,r1
000066  6002              STR      r2,[r0,#0]  ; SystemCoreClock
;;;500    }
000068  bd70              POP      {r4-r6,pc}
;;;501    
                          ENDP

00006a  0000              DCW      0x0000
                  |L2.108|
                          DCD      0x40023808
                  |L2.112|
                          DCD      0x00f42400
                  |L2.116|
                          DCD      ||.data||

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;376      */
;;;377    void SystemInit(void)
000000  4811              LDR      r0,|L3.72|
;;;378    {
000002  b510              PUSH     {r4,lr}
;;;379      /* FPU settings ------------------------------------------------------------*/
;;;380      #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;;;381        SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
000004  6801              LDR      r1,[r0,#0]
000006  f4410170          ORR      r1,r1,#0xf00000
00000a  6001              STR      r1,[r0,#0]
;;;382      #endif
;;;383      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;384      /* Set HSION bit */
;;;385      RCC->CR |= (uint32_t)0x00000001;
00000c  480f              LDR      r0,|L3.76|
00000e  6801              LDR      r1,[r0,#0]
000010  f0410101          ORR      r1,r1,#1
000014  6001              STR      r1,[r0,#0]
;;;386    
;;;387      /* Reset CFGR register */
;;;388      RCC->CFGR = 0x00000000;
000016  4a0d              LDR      r2,|L3.76|
000018  2100              MOVS     r1,#0
00001a  3208              ADDS     r2,r2,#8
00001c  6011              STR      r1,[r2,#0]
;;;389    
;;;390      /* Reset HSEON, CSSON and PLLON bits */
;;;391      RCC->CR &= (uint32_t)0xFEF6FFFF;
00001e  6802              LDR      r2,[r0,#0]
000020  4b0b              LDR      r3,|L3.80|
000022  401a              ANDS     r2,r2,r3
000024  6002              STR      r2,[r0,#0]
;;;392    
;;;393      /* Reset PLLCFGR register */
;;;394      RCC->PLLCFGR = 0x24003010;
000026  1d03              ADDS     r3,r0,#4
000028  4a0a              LDR      r2,|L3.84|
00002a  601a              STR      r2,[r3,#0]
;;;395    
;;;396      /* Reset HSEBYP bit */
;;;397      RCC->CR &= (uint32_t)0xFFFBFFFF;
00002c  6802              LDR      r2,[r0,#0]
00002e  f4222280          BIC      r2,r2,#0x40000
000032  6002              STR      r2,[r0,#0]
;;;398    
;;;399      /* Disable all interrupts */
;;;400      RCC->CIR = 0x00000000;
000034  4805              LDR      r0,|L3.76|
000036  300c              ADDS     r0,r0,#0xc
000038  6001              STR      r1,[r0,#0]
;;;401    
;;;402    #if defined (DATA_IN_ExtSRAM) || defined (DATA_IN_ExtSDRAM)
;;;403      SystemInit_ExtMemCtl(); 
;;;404    #endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
;;;405             
;;;406      /* Configure the System clock source, PLL Multiplier and Divider factors, 
;;;407         AHB/APBx prescalers and Flash settings ----------------------------------*/
;;;408      SetSysClock();
00003a  f7fffffe          BL       SetSysClock
;;;409    
;;;410      /* Configure the Vector Table location add offset address ------------------*/
;;;411    #ifdef VECT_TAB_SRAM
;;;412      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;413    #else
;;;414      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
00003e  4902              LDR      r1,|L3.72|
000040  4805              LDR      r0,|L3.88|
000042  3980              SUBS     r1,r1,#0x80
000044  6008              STR      r0,[r1,#0]
;;;415    #endif
;;;416    }
000046  bd10              POP      {r4,pc}
;;;417    
                          ENDP

                  |L3.72|
                          DCD      0xe000ed88
                  |L3.76|
                          DCD      0x40023800
                  |L3.80|
                          DCD      0xfef6ffff
                  |L3.84|
                          DCD      0x24003010
                  |L3.88|
                          DCD      0x08020000

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x0a037a00
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\User\\system_stm32f4xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_system_stm32f4xx_c_5d646a67____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REVSH|
#line 144
|__asm___18_system_stm32f4xx_c_5d646a67____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
