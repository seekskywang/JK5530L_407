; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\usart.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\usart.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=525 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\usart.crf --no_multibyte_chars ..\drive\usart.c]
                          THUMB

                          AREA ||i.CalHandle||, CODE, READONLY, ALIGN=2

                  CalHandle PROC
;;;515    //校准处理
;;;516    void CalHandle(u8 mode,u8 range,u32 data)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;517    {
;;;518    	if(mode == 0)//测量电压
;;;519    	{
;;;520    		if(range == 0)//低档位低段
;;;521    		{
;;;522    			calflag = 1;
;;;523    			LOAD_V_SW = 0;
;;;524    			x1 = Vmon_Load_value;
000004  4dfc              LDR      r5,|L1.1016|
;;;525    			y1 = data;
;;;526    		}else if(range == 1){//低档位高段
;;;527    			
;;;528    			x2 = Vmon_Load_value;
;;;529    			y2 = data;
;;;530    			CalPara.TestLV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;531    			CalPara.OffsetLV[0] = (float)y2 - CalPara.TestLV[0]*(float)x2;
;;;532    			
;;;533    			Flag_DAC_OFF=0;
000006  f8dfc3f8          LDR      r12,|L1.1024|
00000a  4614              MOV      r4,r2                 ;517
00000c  2300              MOVS     r3,#0                 ;517
00000e  f8dc2000          LDR      r2,[r12,#0]
000012  4ef7              LDR      r6,|L1.1008|
000014  f8df93dc          LDR      r9,|L1.1012|
000018  f8df83e0          LDR      r8,|L1.1020|
;;;534    			calflag = 0;
;;;535    		}else if(range == 2){//高档位低段
;;;536    			calflag = 1;
;;;537    			LOAD_V_SW = 1;
;;;538    			x1 = Vmon_Load_value;
;;;539    			y1 = data;
;;;540    		}else if(range == 3){//高档位高段
;;;541    			
;;;542    			x2 = Vmon_Load_value;
;;;543    			y2 = data;
;;;544    			CalPara.TestLV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;545    			CalPara.OffsetLV[1] = (float)y2 - CalPara.TestLV[1]*(float)x2;
;;;546    				//参数写进FLASH
;;;547    			Flag_DAC_OFF=0;
;;;548    			calflag = 0;
;;;549    		}else if(range == 4){//电源控制电压和测量1
;;;550    			calflag = 1;
;;;551    			Contr_Voltage = 3500;
00001c  f8dfe3e4          LDR      lr,|L1.1028|
;;;552    			Contr_Current = 5000;
000020  f8dfb3e4          LDR      r11,|L1.1032|
;;;553    			OnOff_GPOI_ResetSet(0,1);
;;;554    		}else if(range == 5){//电源控制电压和测量2
;;;555    			x1 = data;
;;;556    			y1 = Contr_Voltage;
;;;557    			x3 = Vmon_POWE_value;
;;;558    			y3 = data;
;;;559    			Contr_Voltage = 10000;
;;;560    			Contr_Current = 5000;
;;;561    		}else if(range == 6){//电源控制电压和测量3
;;;562    			x2 = data;
;;;563    			y2 = Contr_Voltage;
;;;564    			x4 = Vmon_POWE_value;
;;;565    			y4 = data;
;;;566    			
;;;567    			CalPara.SetPV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;568    			CalPara.OffsetSetPV[0] = (float)y2 - CalPara.SetPV[0]*(float)x2;
;;;569    			
;;;570    			CalPara.TestPV[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;571    			CalPara.OffsetPV[0] = (float)y4 - CalPara.TestPV[0]*(float)x4;
;;;572    			
;;;573    			Flag_DAC_OFF=0;
;;;574    			calflag = 0;
;;;575    			Off_GPOI_ResetSet();
;;;576    		}else if(range == 7){//CV控制低档1
;;;577    			LOAD_MODE = 1;
;;;578    			LOAD_V_SW=0;
;;;579    			GPIO_ResetBits(GPIOB,GPIO_Pin_1);//电压档位为低档
;;;580    			calflag = 1;
;;;581    			Contr_Laod = 1000;
000024  f8dfa3e4          LDR      r10,|L1.1036|
000028  edd50a05          VLDR     s1,[r5,#0x14]         ;524
00002c  ed950a06          VLDR     s0,[r5,#0x18]         ;524
000030  edd51a09          VLDR     s3,[r5,#0x24]         ;524
000034  ed951a0a          VLDR     s2,[r5,#0x28]         ;524
000038  2701              MOVS     r7,#1                 ;522
00003a  f0220208          BIC      r2,r2,#8              ;533
00003e  b120              CBZ      r0,|L1.74|
;;;582    			OnOff_GPOI_ResetSet(2,1);
;;;583    		}else if(range == 8){//CV控制低档2
;;;584    			LOAD_MODE = 1;
;;;585    			LOAD_V_SW=0;
;;;586    			GPIO_ResetBits(GPIOB,GPIO_Pin_1);//电压档位为低档
;;;587    			x1 = data;
;;;588    			y1 = Contr_Laod;
;;;589    			Contr_Laod = 8000;
;;;590    //			OnOff_GPOI_ResetSet(2,1);
;;;591    		}else if(range == 9){//CV控制低档3
;;;592    			x2 = data;
;;;593    			y2 = Contr_Laod;
;;;594    			CalPara.SetCV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;595    			CalPara.OffsetCV[0] = (float)y2 - CalPara.SetCV[0]*(float)x2;
;;;596    				//参数写进FLASH
;;;597    			Flag_DAC_OFF=0;
;;;598    			calflag = 0;
;;;599    			Off_GPOI_ResetSet();
;;;600    		}else if(range == 10){//CV控制高档1
;;;601    			LOAD_MODE = 1;
;;;602    			LOAD_V_SW=1;
;;;603    			GPIO_SetBits(GPIOB,GPIO_Pin_1);//电压档位为高档
;;;604    			calflag = 1;
;;;605    			Contr_Laod = 1000;
;;;606    			OnOff_GPOI_ResetSet(2,1);
;;;607    		}else if(range == 11){//CV控制高档2
;;;608    			LOAD_MODE = 1;
;;;609    			LOAD_V_SW=1;
;;;610    			GPIO_SetBits(GPIOB,GPIO_Pin_1);//电压档位为高档
;;;611    			x1 = data;
;;;612    			y1 = Contr_Laod;
;;;613    			Contr_Laod = 8000;
;;;614    //			OnOff_GPOI_ResetSet(2,1);
;;;615    		}else if(range == 12){//CV控制高档3
;;;616    			x2 = data;
;;;617    			y2 = Contr_Laod;
;;;618    			CalPara.SetCV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;619    			CalPara.OffsetCV[1] = (float)y2 - CalPara.SetCV[1]*(float)x2;
;;;620    				//参数写进FLASH
;;;621    			Flag_DAC_OFF=0;
;;;622    			calflag = 0;
;;;623    			Off_GPOI_ResetSet();
;;;624    		}
;;;625    	}else if(mode == 1){
000040  2801              CMP      r0,#1
000042  d073              BEQ      |L1.300|
;;;626    		if(range == 0)//负载电流低档位1
;;;627    		{		
;;;628    			LOAD_I_SW = 0;
;;;629    			Contr_Laod = 7000;
;;;630    			calflag = 1;
;;;631    			OnOff_GPOI_ResetSet(2,1);
;;;632    		}
;;;633    		else if(range == 1)//负载电流低档位2
;;;634    		{
;;;635    			LOAD_I_SW = 0;			
;;;636    			x1 = data;
;;;637    			y1 = Contr_Laod;
;;;638    			x3 = Imon_Load_value;
;;;639    			y3 = data;
;;;640    			Contr_Laod = 56000;
;;;641    		}else if(range == 2){//负载电流低档位3
;;;642    			
;;;643    			x2 = data;
;;;644    			y2 = Contr_Laod;
;;;645    			x4 = Imon_Load_value;
;;;646    			y4 = data;
;;;647    			
;;;648    			CalPara.SetLC[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;649    			CalPara.OffsetLC[0] = (float)y2 - CalPara.SetLC[0]*(float)x2;
;;;650    			
;;;651    			CalPara.TestLC[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;652    			CalPara.OffsetTestLC[0] = (float)y4 - CalPara.TestLC[0]*(float)x4;
;;;653    				
;;;654    			Flag_DAC_OFF =0;
;;;655    			calflag = 0;
;;;656    			Off_GPOI_ResetSet();
;;;657    		}else if(range == 3){//负载电流高档位1
;;;658    			LOAD_I_SW = 1;
;;;659    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;660    			Contr_Laod = 6500;
;;;661    			calflag = 1;
;;;662    			OnOff_GPOI_ResetSet(2,1);
;;;663    		}else if(range == 4){//负载电流高档位2
;;;664    			
;;;665    			LOAD_I_SW = 1;
;;;666    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;667    			x1 = data;
;;;668    			y1 = Contr_Laod;
;;;669    			x3 = Imon_Load_value;
;;;670    			y3 = data;
;;;671    			Contr_Laod = 29000;
;;;672    		}else if(range == 5){//负载电流高档位3
;;;673    			
;;;674    			x2 = data;
;;;675    			y2 = Contr_Laod;
;;;676    			x4 = Imon_Load_value;
;;;677    			y4 = data;
;;;678    			
;;;679    			CalPara.SetLC[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;680    			CalPara.OffsetLC[1] = (float)y2 - CalPara.SetLC[1]*(float)x2;
;;;681    			
;;;682    			CalPara.TestLC[1] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;683    			CalPara.OffsetTestLC[1] = (float)y4 - CalPara.TestLC[1]*(float)x4;
;;;684    				
;;;685    			Flag_DAC_OFF =0;
;;;686    			calflag = 0;
;;;687    			Off_GPOI_ResetSet();
;;;688    		}else if(range == 6){//电源电流1
;;;689    			Contr_Voltage = 3500;
;;;690    			Contr_Current = 4000;
;;;691    			calflag = 1;
;;;692    			OnOff_GPOI_ResetSet(0,1);
;;;693    		}else if(range == 7){//电源电流2
;;;694    			
;;;695    			x1 = data;
;;;696    			y1 = Contr_Current;
;;;697    			x3 = Imon_POWE_value;
;;;698    			y3 = data;
;;;699    			Contr_Voltage = 3500;
;;;700    			Contr_Current = 14000;
;;;701    		}else if(range == 8){//电源电流3
;;;702    			
;;;703    			x2 = data;
;;;704    			y2 = Contr_Current;
;;;705    			x4 = Imon_POWE_value;
;;;706    			y4 = data;
;;;707    			
;;;708    			CalPara.SetPC[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;709    			CalPara.OffsetPC[0] = (float)y2 - CalPara.SetPC[0]*(float)x2;
;;;710    			
;;;711    			CalPara.TestPC[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;712    			CalPara.OffsetTestPC[0] = (float)y4 - CalPara.TestPC[0]*(float)x4;
;;;713    			
;;;714    			Flag_DAC_OFF=0;
;;;715    			calflag = 0;
;;;716    			Off_GPOI_ResetSet();
;;;717    		}
;;;718    	}else if(mode == 2){
000044  2802              CMP      r0,#2
000046  d072              BEQ      |L1.302|
000048  e3b4              B        |L1.1972|
                  |L1.74|
00004a  48f1              LDR      r0,|L1.1040|
00004c  b1e9              CBZ      r1,|L1.138|
00004e  2901              CMP      r1,#1                 ;526
000050  d01f              BEQ      |L1.146|
000052  2902              CMP      r1,#2                 ;535
000054  d041              BEQ      |L1.218|
000056  2903              CMP      r1,#3                 ;540
000058  d044              BEQ      |L1.228|
00005a  f2413088          MOV      r0,#0x1388            ;552
00005e  2904              CMP      r1,#4                 ;549
000060  d066              BEQ      |L1.304|
000062  2905              CMP      r1,#5                 ;554
000064  d06c              BEQ      |L1.320|
000066  2906              CMP      r1,#6                 ;561
000068  d07f              BEQ      |L1.362|
00006a  48ea              LDR      r0,|L1.1044|
00006c  2907              CMP      r1,#7                 ;576
00006e  d076              BEQ      |L1.350|
000070  f44f5bfa          MOV      r11,#0x1f40           ;589
000074  2908              CMP      r1,#8                 ;583
000076  d073              BEQ      |L1.352|
000078  2909              CMP      r1,#9                 ;591
00007a  d072              BEQ      |L1.354|
00007c  290a              CMP      r1,#0xa               ;600
00007e  d071              BEQ      |L1.356|
000080  290b              CMP      r1,#0xb               ;607
000082  d070              BEQ      |L1.358|
000084  290c              CMP      r1,#0xc               ;615
000086  d06f              BEQ      |L1.360|
000088  e394              B        |L1.1972|
                  |L1.138|
00008a  7037              STRB     r7,[r6,#0]            ;522
00008c  f8c9301c          STR      r3,[r9,#0x1c]         ;523  ; Run_Control
000090  e026              B        |L1.224|
                  |L1.146|
000092  8800              LDRH     r0,[r0,#0]            ;528  ; Vmon_Load_value
000094  ee014a10          VMOV     s2,r4                 ;530
000098  eeb80a40          VCVT.F32.U32 s0,s0                 ;530
00009c  eef80a60          VCVT.F32.U32 s1,s1                 ;530
0000a0  eeb81a41          VCVT.F32.U32 s2,s2                 ;530
0000a4  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;528
0000a8  ee311a40          VSUB.F32 s2,s2,s0              ;530
0000ac  ee000a10          VMOV     s0,r0                 ;530
0000b0  eeb80a40          VCVT.F32.U32 s0,s0                 ;530
0000b4  ee700a60          VSUB.F32 s1,s0,s1              ;530
0000b8  ee810a20          VDIV.F32 s0,s2,s1              ;530
0000bc  ee000a90          VMOV     s1,r0                 ;531
0000c0  eeb81a60          VCVT.F32.U32 s2,s1                 ;531
0000c4  ee004a90          VMOV     s1,r4                 ;531
0000c8  eef80a60          VCVT.F32.U32 s1,s1                 ;531
0000cc  ed880a00          VSTR     s0,[r8,#0]            ;530
0000d0  ee400a41          VMLS.F32 s1,s0,s2              ;531
0000d4  edc80a04          VSTR     s1,[r8,#0x10]         ;531
0000d8  e369              B        |L1.1966|
                  |L1.218|
0000da  7037              STRB     r7,[r6,#0]            ;536
0000dc  f8c9701c          STR      r7,[r9,#0x1c]         ;537  ; Run_Control
                  |L1.224|
0000e0  8800              LDRH     r0,[r0,#0]            ;524  ; Vmon_Load_value
0000e2  e2da              B        |L1.1690|
                  |L1.228|
0000e4  8800              LDRH     r0,[r0,#0]            ;542  ; Vmon_Load_value
0000e6  ee014a10          VMOV     s2,r4                 ;544
0000ea  eeb80a40          VCVT.F32.U32 s0,s0                 ;544
0000ee  eef80a60          VCVT.F32.U32 s1,s1                 ;544
0000f2  eeb81a41          VCVT.F32.U32 s2,s2                 ;544
0000f6  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;542
0000fa  ee311a40          VSUB.F32 s2,s2,s0              ;544
0000fe  ee000a10          VMOV     s0,r0                 ;544
000102  eeb80a40          VCVT.F32.U32 s0,s0                 ;544
000106  ee700a60          VSUB.F32 s1,s0,s1              ;544
00010a  ee810a20          VDIV.F32 s0,s2,s1              ;544
00010e  ee000a90          VMOV     s1,r0                 ;545
000112  eeb81a60          VCVT.F32.U32 s2,s1                 ;545
000116  ee004a90          VMOV     s1,r4                 ;545
00011a  eef80a60          VCVT.F32.U32 s1,s1                 ;545
00011e  ed880a01          VSTR     s0,[r8,#4]            ;544
000122  ee400a41          VMLS.F32 s1,s0,s2              ;545
000126  edc80a05          VSTR     s1,[r8,#0x14]         ;545
00012a  e340              B        |L1.1966|
                  |L1.300|
00012c  e0dd              B        |L1.746|
                  |L1.302|
00012e  e242              B        |L1.1462|
                  |L1.304|
000130  7037              STRB     r7,[r6,#0]            ;550
000132  f64052ac          MOV      r2,#0xdac             ;551
000136  f8ae2000          STRH     r2,[lr,#0]            ;551
00013a  f8ab0000          STRH     r0,[r11,#0]           ;552
00013e  e1e0              B        |L1.1282|
                  |L1.320|
000140  616c              STR      r4,[r5,#0x14]         ;556  ; x1
000142  f8be2000          LDRH     r2,[lr,#0]            ;556  ; Contr_Voltage
000146  61aa              STR      r2,[r5,#0x18]         ;557  ; y1
000148  4ab3              LDR      r2,|L1.1048|
00014a  8812              LDRH     r2,[r2,#0]            ;557  ; Vmon_POWE_value
00014c  e9c52409          STRD     r2,r4,[r5,#0x24]      ;557
000150  f2427210          MOV      r2,#0x2710            ;559
000154  f8ae2000          STRH     r2,[lr,#0]            ;559
000158  4659              MOV      r1,r11                ;560
00015a  e1e2              B        |L1.1314|
00015c  e005              B        |L1.362|
                  |L1.350|
00015e  e04d              B        |L1.508|
                  |L1.352|
000160  e054              B        |L1.524|
                  |L1.354|
000162  e05b              B        |L1.540|
                  |L1.356|
000164  e07f              B        |L1.614|
                  |L1.358|
000166  e08d              B        |L1.644|
                  |L1.360|
000168  e09a              B        |L1.672|
                  |L1.362|
00016a  61ec              STR      r4,[r5,#0x1c]         ;563  ; x2
00016c  f8be1000          LDRH     r1,[lr,#0]            ;563  ; Contr_Voltage
000170  48a9              LDR      r0,|L1.1048|
000172  6229              STR      r1,[r5,#0x20]         ;564  ; y2
000174  8800              LDRH     r0,[r0,#0]            ;564  ; Vmon_POWE_value
000176  ee021a10          VMOV     s4,r1                 ;567
00017a  eeb80a40          VCVT.F32.U32 s0,s0                 ;567
00017e  eef80a60          VCVT.F32.U32 s1,s1                 ;567
000182  eeb82a42          VCVT.F32.U32 s4,s4                 ;567
000186  e9c5040b          STRD     r0,r4,[r5,#0x2c]      ;564
00018a  ee322a40          VSUB.F32 s4,s4,s0              ;567
00018e  ee004a10          VMOV     s0,r4                 ;567
000192  eeb80a40          VCVT.F32.U32 s0,s0                 ;567
000196  ee700a60          VSUB.F32 s1,s0,s1              ;567
00019a  ee820a20          VDIV.F32 s0,s4,s1              ;567
00019e  ee004a90          VMOV     s1,r4                 ;568
0001a2  eeb82a60          VCVT.F32.U32 s4,s1                 ;568
0001a6  ee001a90          VMOV     s1,r1                 ;568
0001aa  eef80a60          VCVT.F32.U32 s1,s1                 ;568
0001ae  ed880a02          VSTR     s0,[r8,#8]            ;567
0001b2  ee400a42          VMLS.F32 s1,s0,s4              ;568
0001b6  ee004a10          VMOV     s0,r4                 ;570
0001ba  eeb80a40          VCVT.F32.U32 s0,s0                 ;570
0001be  edc80a06          VSTR     s1,[r8,#0x18]         ;568
0001c2  eef80a41          VCVT.F32.U32 s1,s2                 ;570
0001c6  eeb81a61          VCVT.F32.U32 s2,s3                 ;570
0001ca  ee700a60          VSUB.F32 s1,s0,s1              ;570
0001ce  ee000a10          VMOV     s0,r0                 ;570
0001d2  eeb80a40          VCVT.F32.U32 s0,s0                 ;570
0001d6  ee301a41          VSUB.F32 s2,s0,s2              ;570
0001da  ee800a81          VDIV.F32 s0,s1,s2              ;570
0001de  ee000a90          VMOV     s1,r0                 ;571
0001e2  eeb81a60          VCVT.F32.U32 s2,s1                 ;571
0001e6  ee004a90          VMOV     s1,r4                 ;571
0001ea  eef80a60          VCVT.F32.U32 s1,s1                 ;571
0001ee  ed880a03          VSTR     s0,[r8,#0xc]          ;570
0001f2  ee400a41          VMLS.F32 s1,s0,s2              ;571
0001f6  edc80a07          VSTR     s1,[r8,#0x1c]         ;571
0001fa  e173              B        |L1.1252|
                  |L1.508|
0001fc  f8c97018          STR      r7,[r9,#0x18]         ;577  ; Run_Control
000200  f8c9301c          STR      r3,[r9,#0x1c]         ;578  ; Run_Control
000204  2102              MOVS     r1,#2                 ;579
000206  f7fffffe          BL       GPIO_ResetBits
00020a  e033              B        |L1.628|
                  |L1.524|
00020c  f8c97018          STR      r7,[r9,#0x18]         ;584  ; Run_Control
000210  f8c9301c          STR      r3,[r9,#0x1c]         ;585  ; Run_Control
000214  2102              MOVS     r1,#2                 ;586
000216  f7fffffe          BL       GPIO_ResetBits
00021a  e03a              B        |L1.658|
                  |L1.540|
00021c  61ec              STR      r4,[r5,#0x1c]         ;593  ; x2
00021e  f8ba0000          LDRH     r0,[r10,#0]           ;593  ; Contr_Laod
000222  eeb80a40          VCVT.F32.U32 s0,s0                 ;594
000226  ee010a10          VMOV     s2,r0                 ;594
00022a  eef80a60          VCVT.F32.U32 s1,s1                 ;594
00022e  6228              STR      r0,[r5,#0x20]         ;594  ; y2
000230  eeb81a41          VCVT.F32.U32 s2,s2                 ;594
000234  ee311a40          VSUB.F32 s2,s2,s0              ;594
000238  ee004a10          VMOV     s0,r4                 ;594
00023c  eeb80a40          VCVT.F32.U32 s0,s0                 ;594
000240  ee700a60          VSUB.F32 s1,s0,s1              ;594
000244  ee810a20          VDIV.F32 s0,s2,s1              ;594
000248  ee004a90          VMOV     s1,r4                 ;595
00024c  eeb81a60          VCVT.F32.U32 s2,s1                 ;595
000250  ee000a90          VMOV     s1,r0                 ;595
000254  eef80a60          VCVT.F32.U32 s1,s1                 ;595
000258  ed880a0a          VSTR     s0,[r8,#0x28]         ;594
00025c  ee400a41          VMLS.F32 s1,s0,s2              ;595
000260  edc80a12          VSTR     s1,[r8,#0x48]         ;595
000264  e13e              B        |L1.1252|
                  |L1.614|
000266  f8c97018          STR      r7,[r9,#0x18]         ;601  ; Run_Control
00026a  f8c9701c          STR      r7,[r9,#0x1c]         ;602  ; Run_Control
00026e  2102              MOVS     r1,#2                 ;603
000270  f7fffffe          BL       GPIO_SetBits
                  |L1.628|
000274  7037              STRB     r7,[r6,#0]            ;580
000276  f44f707a          MOV      r0,#0x3e8             ;581
00027a  f8aa0000          STRH     r0,[r10,#0]           ;581
                  |L1.638|
00027e  2101              MOVS     r1,#1                 ;582
000280  2002              MOVS     r0,#2                 ;582
000282  e0d1              B        |L1.1064|
                  |L1.644|
000284  f8c97018          STR      r7,[r9,#0x18]         ;608  ; Run_Control
000288  f8c9701c          STR      r7,[r9,#0x1c]         ;609  ; Run_Control
00028c  2102              MOVS     r1,#2                 ;610
00028e  f7fffffe          BL       GPIO_SetBits
                  |L1.658|
000292  616c              STR      r4,[r5,#0x14]         ;588  ; x1
000294  f8ba1000          LDRH     r1,[r10,#0]           ;588  ; Contr_Laod
000298  4650              MOV      r0,r10                ;588
00029a  61a9              STR      r1,[r5,#0x18]         ;589  ; y1
00029c  4659              MOV      r1,r11                ;589
00029e  e0d7              B        |L1.1104|
                  |L1.672|
0002a0  61ec              STR      r4,[r5,#0x1c]         ;617  ; x2
0002a2  f8ba0000          LDRH     r0,[r10,#0]           ;617  ; Contr_Laod
0002a6  eeb80a40          VCVT.F32.U32 s0,s0                 ;618
0002aa  ee010a10          VMOV     s2,r0                 ;618
0002ae  eef80a60          VCVT.F32.U32 s1,s1                 ;618
0002b2  6228              STR      r0,[r5,#0x20]         ;618  ; y2
0002b4  eeb81a41          VCVT.F32.U32 s2,s2                 ;618
0002b8  ee311a40          VSUB.F32 s2,s2,s0              ;618
0002bc  ee004a10          VMOV     s0,r4                 ;618
0002c0  eeb80a40          VCVT.F32.U32 s0,s0                 ;618
0002c4  ee700a60          VSUB.F32 s1,s0,s1              ;618
0002c8  ee810a20          VDIV.F32 s0,s2,s1              ;618
0002cc  ee004a90          VMOV     s1,r4                 ;619
0002d0  eeb81a60          VCVT.F32.U32 s2,s1                 ;619
0002d4  ee000a90          VMOV     s1,r0                 ;619
0002d8  eef80a60          VCVT.F32.U32 s1,s1                 ;619
0002dc  ed880a0b          VSTR     s0,[r8,#0x2c]         ;618
0002e0  ee400a41          VMLS.F32 s1,s0,s2              ;619
0002e4  edc80a13          VSTR     s1,[r8,#0x4c]         ;619
0002e8  e0fc              B        |L1.1252|
                  |L1.746|
0002ea  b199              CBZ      r1,|L1.788|
0002ec  2901              CMP      r1,#1                 ;633
0002ee  d016              BEQ      |L1.798|
0002f0  2902              CMP      r1,#2                 ;641
0002f2  d022              BEQ      |L1.826|
0002f4  f44f6000          MOV      r0,#0x800             ;659
0002f8  2903              CMP      r1,#3                 ;657
0002fa  d067              BEQ      |L1.972|
0002fc  2904              CMP      r1,#4                 ;663
0002fe  d071              BEQ      |L1.996|
000300  2905              CMP      r1,#5                 ;672
000302  d070              BEQ      |L1.998|
000304  2906              CMP      r1,#6                 ;688
000306  d06f              BEQ      |L1.1000|
000308  4844              LDR      r0,|L1.1052|
00030a  2907              CMP      r1,#7                 ;693
00030c  d06d              BEQ      |L1.1002|
00030e  2908              CMP      r1,#8                 ;701
000310  d06c              BEQ      |L1.1004|
000312  e24f              B        |L1.1972|
                  |L1.788|
000314  f8c93020          STR      r3,[r9,#0x20]         ;628  ; Run_Control
000318  f6413158          MOV      r1,#0x1b58            ;629
00031c  e05e              B        |L1.988|
                  |L1.798|
00031e  f8c93020          STR      r3,[r9,#0x20]         ;635  ; Run_Control
000322  616c              STR      r4,[r5,#0x14]         ;637  ; x1
000324  f8ba1000          LDRH     r1,[r10,#0]           ;637  ; Contr_Laod
000328  4650              MOV      r0,r10                ;637
00032a  61a9              STR      r1,[r5,#0x18]         ;638  ; y1
00032c  493c              LDR      r1,|L1.1056|
00032e  8809              LDRH     r1,[r1,#0]            ;638  ; Imon_Load_value
000330  e9c51409          STRD     r1,r4,[r5,#0x24]      ;638
000334  f64d21c0          MOV      r1,#0xdac0            ;640
000338  e08a              B        |L1.1104|
                  |L1.826|
00033a  61ec              STR      r4,[r5,#0x1c]         ;644  ; x2
00033c  f8ba1000          LDRH     r1,[r10,#0]           ;644  ; Contr_Laod
000340  4837              LDR      r0,|L1.1056|
000342  6229              STR      r1,[r5,#0x20]         ;645  ; y2
000344  8800              LDRH     r0,[r0,#0]            ;645  ; Imon_Load_value
000346  ee021a10          VMOV     s4,r1                 ;648
00034a  eeb80a40          VCVT.F32.U32 s0,s0                 ;648
00034e  eef80a60          VCVT.F32.U32 s1,s1                 ;648
000352  eeb82a42          VCVT.F32.U32 s4,s4                 ;648
000356  e9c5040b          STRD     r0,r4,[r5,#0x2c]      ;645
00035a  ee322a40          VSUB.F32 s4,s4,s0              ;648
00035e  ee004a10          VMOV     s0,r4                 ;648
000362  eeb80a40          VCVT.F32.U32 s0,s0                 ;648
000366  ee700a60          VSUB.F32 s1,s0,s1              ;648
00036a  ee820a20          VDIV.F32 s0,s4,s1              ;648
00036e  ee004a90          VMOV     s1,r4                 ;649
000372  eeb82a60          VCVT.F32.U32 s4,s1                 ;649
000376  ee001a90          VMOV     s1,r1                 ;649
00037a  eef80a60          VCVT.F32.U32 s1,s1                 ;649
00037e  ed880a08          VSTR     s0,[r8,#0x20]         ;648
000382  ee400a42          VMLS.F32 s1,s0,s4              ;649
000386  ee004a10          VMOV     s0,r4                 ;651
00038a  eeb80a40          VCVT.F32.U32 s0,s0                 ;651
00038e  edc80a10          VSTR     s1,[r8,#0x40]         ;649
000392  eef80a41          VCVT.F32.U32 s1,s2                 ;651
000396  eeb81a61          VCVT.F32.U32 s2,s3                 ;651
00039a  ee700a60          VSUB.F32 s1,s0,s1              ;651
00039e  ee000a10          VMOV     s0,r0                 ;651
0003a2  eeb80a40          VCVT.F32.U32 s0,s0                 ;651
0003a6  ee301a41          VSUB.F32 s2,s0,s2              ;651
0003aa  ee800a81          VDIV.F32 s0,s1,s2              ;651
0003ae  ee000a90          VMOV     s1,r0                 ;652
0003b2  eeb81a60          VCVT.F32.U32 s2,s1                 ;652
0003b6  ee004a90          VMOV     s1,r4                 ;652
0003ba  eef80a60          VCVT.F32.U32 s1,s1                 ;652
0003be  ed880a0c          VSTR     s0,[r8,#0x30]         ;651
0003c2  ee400a41          VMLS.F32 s1,s0,s2              ;652
0003c6  edc80a14          VSTR     s1,[r8,#0x50]         ;652
0003ca  e08b              B        |L1.1252|
                  |L1.972|
0003cc  f8c97020          STR      r7,[r9,#0x20]         ;658  ; Run_Control
0003d0  4601              MOV      r1,r0                 ;659
0003d2  4814              LDR      r0,|L1.1060|
0003d4  f7fffffe          BL       GPIO_ResetBits
0003d8  f6411164          MOV      r1,#0x1964            ;660
                  |L1.988|
0003dc  f8aa1000          STRH     r1,[r10,#0]           ;629
0003e0  7037              STRB     r7,[r6,#0]            ;630
0003e2  e74c              B        |L1.638|
                  |L1.996|
0003e4  e023              B        |L1.1070|
                  |L1.998|
0003e6  e035              B        |L1.1108|
                  |L1.1000|
0003e8  e082              B        |L1.1264|
                  |L1.1002|
0003ea  e08d              B        |L1.1288|
                  |L1.1004|
0003ec  e09b              B        |L1.1318|
0003ee  0000              DCW      0x0000
                  |L1.1008|
                          DCD      calflag
                  |L1.1012|
                          DCD      Run_Control
                  |L1.1016|
                          DCD      ||.data||
                  |L1.1020|
                          DCD      CalPara
                  |L1.1024|
                          DCD      flagB
                  |L1.1028|
                          DCD      Contr_Voltage
                  |L1.1032|
                          DCD      Contr_Current
                  |L1.1036|
                          DCD      Contr_Laod
                  |L1.1040|
                          DCD      Vmon_Load_value
                  |L1.1044|
                          DCD      0x40020400
                  |L1.1048|
                          DCD      Vmon_POWE_value
                  |L1.1052|
                          DCD      Imon_POWE_value
                  |L1.1056|
                          DCD      Imon_Load_value
                  |L1.1060|
                          DCD      0x40020800
                  |L1.1064|
000428  f7fffffe          BL       OnOff_GPOI_ResetSet
00042c  e1c2              B        |L1.1972|
                  |L1.1070|
00042e  f8c97020          STR      r7,[r9,#0x20]         ;665  ; Run_Control
000432  4601              MOV      r1,r0                 ;666
000434  48e1              LDR      r0,|L1.1980|
000436  f7fffffe          BL       GPIO_ResetBits
00043a  616c              STR      r4,[r5,#0x14]         ;668  ; x1
00043c  f8ba1000          LDRH     r1,[r10,#0]           ;668  ; Contr_Laod
000440  4650              MOV      r0,r10                ;668
000442  61a9              STR      r1,[r5,#0x18]         ;669  ; y1
000444  49de              LDR      r1,|L1.1984|
000446  8809              LDRH     r1,[r1,#0]            ;669  ; Imon_Load_value
000448  e9c51409          STRD     r1,r4,[r5,#0x24]      ;669
00044c  f2471148          MOV      r1,#0x7148            ;671
                  |L1.1104|
000450  8001              STRH     r1,[r0,#0]            ;640
000452  e1af              B        |L1.1972|
                  |L1.1108|
000454  61ec              STR      r4,[r5,#0x1c]         ;675  ; x2
000456  f8ba1000          LDRH     r1,[r10,#0]           ;675  ; Contr_Laod
00045a  48d9              LDR      r0,|L1.1984|
00045c  6229              STR      r1,[r5,#0x20]         ;676  ; y2
00045e  8800              LDRH     r0,[r0,#0]            ;676  ; Imon_Load_value
000460  ee021a10          VMOV     s4,r1                 ;679
000464  eeb80a40          VCVT.F32.U32 s0,s0                 ;679
000468  eef80a60          VCVT.F32.U32 s1,s1                 ;679
00046c  eeb82a42          VCVT.F32.U32 s4,s4                 ;679
000470  e9c5040b          STRD     r0,r4,[r5,#0x2c]      ;676
000474  ee322a40          VSUB.F32 s4,s4,s0              ;679
000478  ee004a10          VMOV     s0,r4                 ;679
00047c  eeb80a40          VCVT.F32.U32 s0,s0                 ;679
000480  ee700a60          VSUB.F32 s1,s0,s1              ;679
000484  ee820a20          VDIV.F32 s0,s4,s1              ;679
000488  ee004a90          VMOV     s1,r4                 ;680
00048c  eeb82a60          VCVT.F32.U32 s4,s1                 ;680
000490  ee001a90          VMOV     s1,r1                 ;680
000494  eef80a60          VCVT.F32.U32 s1,s1                 ;680
000498  ed880a09          VSTR     s0,[r8,#0x24]         ;679
00049c  ee400a42          VMLS.F32 s1,s0,s4              ;680
0004a0  ee004a10          VMOV     s0,r4                 ;682
0004a4  eeb80a40          VCVT.F32.U32 s0,s0                 ;682
0004a8  edc80a11          VSTR     s1,[r8,#0x44]         ;680
0004ac  eef80a41          VCVT.F32.U32 s1,s2                 ;682
0004b0  eeb81a61          VCVT.F32.U32 s2,s3                 ;682
0004b4  ee700a60          VSUB.F32 s1,s0,s1              ;682
0004b8  ee000a10          VMOV     s0,r0                 ;682
0004bc  eeb80a40          VCVT.F32.U32 s0,s0                 ;682
0004c0  ee301a41          VSUB.F32 s2,s0,s2              ;682
0004c4  ee800a81          VDIV.F32 s0,s1,s2              ;682
0004c8  ee000a90          VMOV     s1,r0                 ;683
0004cc  eeb81a60          VCVT.F32.U32 s2,s1                 ;683
0004d0  ee004a90          VMOV     s1,r4                 ;683
0004d4  eef80a60          VCVT.F32.U32 s1,s1                 ;683
0004d8  ed880a0d          VSTR     s0,[r8,#0x34]         ;682
0004dc  ee400a41          VMLS.F32 s1,s0,s2              ;683
0004e0  edc80a15          VSTR     s1,[r8,#0x54]         ;683
                  |L1.1252|
0004e4  f8cc2000          STR      r2,[r12,#0]           ;655  ; flagB
0004e8  7033              STRB     r3,[r6,#0]            ;655
0004ea  f7fffffe          BL       Off_GPOI_ResetSet
0004ee  e161              B        |L1.1972|
                  |L1.1264|
0004f0  f64050ac          MOV      r0,#0xdac             ;689
0004f4  f8ae0000          STRH     r0,[lr,#0]            ;689
0004f8  f44f617a          MOV      r1,#0xfa0             ;690
0004fc  f8ab1000          STRH     r1,[r11,#0]           ;690
000500  7037              STRB     r7,[r6,#0]            ;691
                  |L1.1282|
000502  2101              MOVS     r1,#1                 ;553
000504  2000              MOVS     r0,#0                 ;553
000506  e78f              B        |L1.1064|
                  |L1.1288|
000508  616c              STR      r4,[r5,#0x14]         ;696  ; x1
00050a  f8bb2000          LDRH     r2,[r11,#0]           ;696  ; Contr_Current
00050e  4659              MOV      r1,r11                ;696
000510  61aa              STR      r2,[r5,#0x18]         ;697  ; y1
000512  8800              LDRH     r0,[r0,#0]            ;697  ; Imon_POWE_value
000514  e9c50409          STRD     r0,r4,[r5,#0x24]      ;697
000518  f64050ac          MOV      r0,#0xdac             ;699
00051c  f8ae0000          STRH     r0,[lr,#0]            ;699
000520  0080              LSLS     r0,r0,#2              ;700
                  |L1.1314|
000522  8008              STRH     r0,[r1,#0]            ;700
000524  e146              B        |L1.1972|
                  |L1.1318|
000526  61ec              STR      r4,[r5,#0x1c]         ;704  ; x2
000528  f8bb1000          LDRH     r1,[r11,#0]           ;704  ; Contr_Current
00052c  6229              STR      r1,[r5,#0x20]         ;705  ; y2
00052e  8800              LDRH     r0,[r0,#0]            ;705  ; Imon_POWE_value
000530  ee021a10          VMOV     s4,r1                 ;708
000534  eeb80a40          VCVT.F32.U32 s0,s0                 ;708
000538  eef80a60          VCVT.F32.U32 s1,s1                 ;708
00053c  eeb82a42          VCVT.F32.U32 s4,s4                 ;708
000540  e9c5040b          STRD     r0,r4,[r5,#0x2c]      ;705
000544  ee322a40          VSUB.F32 s4,s4,s0              ;708
000548  ee004a10          VMOV     s0,r4                 ;708
00054c  eeb80a40          VCVT.F32.U32 s0,s0                 ;708
000550  ee700a60          VSUB.F32 s1,s0,s1              ;708
000554  ee820a20          VDIV.F32 s0,s4,s1              ;708
000558  ee004a90          VMOV     s1,r4                 ;709
00055c  eeb82a60          VCVT.F32.U32 s4,s1                 ;709
000560  ee001a90          VMOV     s1,r1                 ;709
000564  eef80a60          VCVT.F32.U32 s1,s1                 ;709
000568  ed880a0e          VSTR     s0,[r8,#0x38]         ;708
00056c  ee400a42          VMLS.F32 s1,s0,s4              ;709
000570  ee004a10          VMOV     s0,r4                 ;711
000574  eeb80a40          VCVT.F32.U32 s0,s0                 ;711
000578  edc80a16          VSTR     s1,[r8,#0x58]         ;709
00057c  eef80a41          VCVT.F32.U32 s1,s2                 ;711
000580  eeb81a61          VCVT.F32.U32 s2,s3                 ;711
000584  ee700a60          VSUB.F32 s1,s0,s1              ;711
000588  ee000a10          VMOV     s0,r0                 ;711
00058c  eeb80a40          VCVT.F32.U32 s0,s0                 ;711
000590  ee301a41          VSUB.F32 s2,s0,s2              ;711
000594  ee800a81          VDIV.F32 s0,s1,s2              ;711
000598  ee000a90          VMOV     s1,r0                 ;712
00059c  eeb81a60          VCVT.F32.U32 s2,s1                 ;712
0005a0  ee004a90          VMOV     s1,r4                 ;712
0005a4  eef80a60          VCVT.F32.U32 s1,s1                 ;712
0005a8  ed880a0f          VSTR     s0,[r8,#0x3c]         ;711
0005ac  ee400a41          VMLS.F32 s1,s0,s2              ;712
0005b0  edc80a17          VSTR     s1,[r8,#0x5c]         ;712
0005b4  e796              B        |L1.1252|
                  |L1.1462|
;;;719    		if(range == 0)//内阻低档位低段
;;;720    		{
;;;721    			RCONT_SW = 0;
;;;722    			calflag = 1;
;;;723    			x1 = Rmon_value;
0005b6  4883              LDR      r0,|L1.1988|
0005b8  b1c1              CBZ      r1,|L1.1516|
;;;724    			y1 = data;
;;;725    			
;;;726    //			Modify_A_READ=0;
;;;727    //			Modify_A_ACT=0;
;;;728    //			Modify_A_READ = Rmon_value;//测量电阻值
;;;729    //			Modify_A_ACT = data;//读取低段
;;;730    		}else if (range == 1)//内阻低档位高段
0005ba  2901              CMP      r1,#1
0005bc  d019              BEQ      |L1.1522|
;;;731    		{
;;;732    
;;;733    			x2 = Rmon_value;
;;;734    			y2 = data;
;;;735    			CalPara.TestR[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;736    			CalPara.OffsetR[0] = (float)y2 - CalPara.TestR[0]*(float)x2;
;;;737    				//参数写进FLASH
;;;738    			Flag_DAC_OFF=0;
;;;739    			calflag = 0;
;;;740    		}else if(range == 2)//内阻高档位低段
0005be  2902              CMP      r1,#2
0005c0  d07e              BEQ      |L1.1728|
;;;741    		{
;;;742    			RCONT_SW = 1;
;;;743    			calflag = 1;
;;;744    			x1 = Rmon_value;
;;;745    			y1 = data;
;;;746    		}else if (range == 3)//内阻高档位高段
0005c2  2903              CMP      r1,#3
0005c4  d039              BEQ      |L1.1594|
;;;747    		{
;;;748    			
;;;749    			x2 = Rmon_value;
;;;750    			y2 = data;
;;;751    			CalPara.TestR[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;752    			CalPara.OffsetR[1] = (float)y2 - CalPara.TestR[1]*(float)x2;
;;;753    				//参数写进FLASH
;;;754    			Flag_DAC_OFF=0;
;;;755    			calflag = 0;
;;;756    		}else if(range == 4)//识别电阻1低段
;;;757    		{
;;;758    			calflag = 1;
;;;759    //			x1 = (R1mon_value*1000)/(65535-R1mon_value);
;;;760    			x1 = (R1mon_value*1000)/(65535-R1mon_value);
0005c6  f8dfb200          LDR      r11,|L1.1992|
0005ca  f64f7aff          MOV      r10,#0xffff
0005ce  2904              CMP      r1,#4                 ;756
0005d0  d057              BEQ      |L1.1666|
;;;761    			y1 = data;
;;;762    		}else if (range == 5)//识别电阻1高段
0005d2  2905              CMP      r1,#5
0005d4  d064              BEQ      |L1.1696|
;;;763    		{
;;;764    			
;;;765    //			x2 = (R1mon_value*1000)/(65535-R1mon_value);
;;;766    			x2 = (R1mon_value*1000)/(65535-R1mon_value);
;;;767    			y2 = data;
;;;768    			CalPara.TestR1[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;769    			CalPara.OffsetR1[0] = (float)y2 - CalPara.TestR1[0]*(float)x2;
;;;770    				//参数写进FLASH
;;;771    			Flag_DAC_OFF=0;
;;;772    			calflag = 0;
;;;773    		}else if(range == 6)//识别电阻2低段
;;;774    		{
;;;775    			calflag = 1;
;;;776    			x1 = (R2mon_value*1000)/(65535-R2mon_value);
0005d6  f8dfb1f4          LDR      r11,|L1.1996|
0005da  2906              CMP      r1,#6                 ;773
0005dc  d051              BEQ      |L1.1666|
;;;777    			y1 = data;
;;;778    		}else if (range == 7)//识别电阻2高段
0005de  2907              CMP      r1,#7
0005e0  d06f              BEQ      |L1.1730|
;;;779    		{
;;;780    			
;;;781    			x2 = (R2mon_value*1000)/(65535-R2mon_value);
;;;782    			y2 = data;
;;;783    			CalPara.TestR2[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;784    			CalPara.OffsetR2[0] = (float)y2 - CalPara.TestR2[0]*(float)x2;
;;;785    				//参数写进FLASH
;;;786    			Flag_DAC_OFF=0;
;;;787    			calflag = 0;
;;;788    		}else if(range == 8)//内阻高档位低段
0005e2  2908              CMP      r1,#8
0005e4  d06c              BEQ      |L1.1728|
;;;789    		{
;;;790    			RCONT_SW = 1;
;;;791    			calflag = 1;
;;;792    			x1 = Rmon_value;
;;;793    			y1 = data;
;;;794    		}else if (range == 9)//内阻高档位高段
0005e6  2909              CMP      r1,#9
0005e8  d06c              BEQ      |L1.1732|
0005ea  e0e3              B        |L1.1972|
                  |L1.1516|
0005ec  f8c93024          STR      r3,[r9,#0x24]         ;721  ; Run_Control
0005f0  e0b8              B        |L1.1892|
                  |L1.1522|
0005f2  8800              LDRH     r0,[r0,#0]            ;733  ; Rmon_value
0005f4  ee014a10          VMOV     s2,r4                 ;735
0005f8  eeb80a40          VCVT.F32.U32 s0,s0                 ;735
0005fc  eef80a60          VCVT.F32.U32 s1,s1                 ;735
000600  eeb81a41          VCVT.F32.U32 s2,s2                 ;735
000604  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;733
000608  ee311a40          VSUB.F32 s2,s2,s0              ;735
00060c  ee000a10          VMOV     s0,r0                 ;735
000610  eeb80a40          VCVT.F32.U32 s0,s0                 ;735
000614  ee700a60          VSUB.F32 s1,s0,s1              ;735
000618  ee810a20          VDIV.F32 s0,s2,s1              ;735
00061c  ee000a90          VMOV     s1,r0                 ;736
000620  eeb81a60          VCVT.F32.U32 s2,s1                 ;736
000624  ee004a90          VMOV     s1,r4                 ;736
000628  eef80a60          VCVT.F32.U32 s1,s1                 ;736
00062c  ed880a18          VSTR     s0,[r8,#0x60]         ;735
000630  ee400a41          VMLS.F32 s1,s0,s2              ;736
000634  edc80a1d          VSTR     s1,[r8,#0x74]         ;736
000638  e0b9              B        |L1.1966|
                  |L1.1594|
00063a  8800              LDRH     r0,[r0,#0]            ;749  ; Rmon_value
00063c  ee014a10          VMOV     s2,r4                 ;751
000640  eeb80a40          VCVT.F32.U32 s0,s0                 ;751
000644  eef80a60          VCVT.F32.U32 s1,s1                 ;751
000648  eeb81a41          VCVT.F32.U32 s2,s2                 ;751
00064c  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;749
000650  ee311a40          VSUB.F32 s2,s2,s0              ;751
000654  ee000a10          VMOV     s0,r0                 ;751
000658  eeb80a40          VCVT.F32.U32 s0,s0                 ;751
00065c  ee700a60          VSUB.F32 s1,s0,s1              ;751
000660  ee810a20          VDIV.F32 s0,s2,s1              ;751
000664  ee000a90          VMOV     s1,r0                 ;752
000668  eeb81a60          VCVT.F32.U32 s2,s1                 ;752
00066c  ee004a90          VMOV     s1,r4                 ;752
000670  eef80a60          VCVT.F32.U32 s1,s1                 ;752
000674  ed880a19          VSTR     s0,[r8,#0x64]         ;751
000678  ee400a41          VMLS.F32 s1,s0,s2              ;752
00067c  edc80a1e          VSTR     s1,[r8,#0x78]         ;752
000680  e095              B        |L1.1966|
                  |L1.1666|
000682  7037              STRB     r7,[r6,#0]            ;758
000684  f8bb1000          LDRH     r1,[r11,#0]           ;760  ; R1mon_value
000688  f44f727a          MOV      r2,#0x3e8             ;760
00068c  4351              MULS     r1,r2,r1              ;760
00068e  f8bb2000          LDRH     r2,[r11,#0]           ;760  ; R1mon_value
000692  ebaa0002          SUB      r0,r10,r2             ;760
000696  fbb1f0f0          UDIV     r0,r1,r0              ;760
                  |L1.1690|
00069a  e9c50405          STRD     r0,r4,[r5,#0x14]      ;760
00069e  e089              B        |L1.1972|
                  |L1.1696|
0006a0  f8bb1000          LDRH     r1,[r11,#0]           ;766  ; R1mon_value
0006a4  f44f777a          MOV      r7,#0x3e8             ;766
0006a8  4379              MULS     r1,r7,r1              ;766
0006aa  f8bb7000          LDRH     r7,[r11,#0]           ;766  ; R1mon_value
0006ae  ee014a10          VMOV     s2,r4                 ;768
0006b2  ebaa0007          SUB      r0,r10,r7             ;766
0006b6  fbb1f0f0          UDIV     r0,r1,r0              ;766
0006ba  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;766
0006be  e002              B        |L1.1734|
                  |L1.1728|
0006c0  e04e              B        |L1.1888|
                  |L1.1730|
0006c2  e01f              B        |L1.1796|
                  |L1.1732|
0006c4  e050              B        |L1.1896|
                  |L1.1734|
0006c6  eeb81a41          VCVT.F32.U32 s2,s2                 ;768
0006ca  eeb80a40          VCVT.F32.U32 s0,s0                 ;768
0006ce  eef80a60          VCVT.F32.U32 s1,s1                 ;768
0006d2  ee311a40          VSUB.F32 s2,s2,s0              ;768
0006d6  ee000a10          VMOV     s0,r0                 ;768
0006da  eeb80a40          VCVT.F32.U32 s0,s0                 ;768
0006de  ee700a60          VSUB.F32 s1,s0,s1              ;768
0006e2  ee810a20          VDIV.F32 s0,s2,s1              ;768
0006e6  ee000a90          VMOV     s1,r0                 ;769
0006ea  eeb81a60          VCVT.F32.U32 s2,s1                 ;769
0006ee  ee004a90          VMOV     s1,r4                 ;769
0006f2  eef80a60          VCVT.F32.U32 s1,s1                 ;769
0006f6  ed880a1b          VSTR     s0,[r8,#0x6c]         ;768
0006fa  ee400a41          VMLS.F32 s1,s0,s2              ;769
0006fe  edc80a20          VSTR     s1,[r8,#0x80]         ;769
000702  e054              B        |L1.1966|
                  |L1.1796|
000704  f8bb1000          LDRH     r1,[r11,#0]           ;781  ; R2mon_value
000708  f44f777a          MOV      r7,#0x3e8             ;781
00070c  4379              MULS     r1,r7,r1              ;781
00070e  f8bb7000          LDRH     r7,[r11,#0]           ;781  ; R2mon_value
000712  ee014a10          VMOV     s2,r4                 ;783
000716  ebaa0007          SUB      r0,r10,r7             ;781
00071a  fbb1f0f0          UDIV     r0,r1,r0              ;781
00071e  eeb81a41          VCVT.F32.U32 s2,s2                 ;783
000722  eeb80a40          VCVT.F32.U32 s0,s0                 ;783
000726  eef80a60          VCVT.F32.U32 s1,s1                 ;783
00072a  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;781
00072e  ee311a40          VSUB.F32 s2,s2,s0              ;783
000732  ee000a10          VMOV     s0,r0                 ;783
000736  eeb80a40          VCVT.F32.U32 s0,s0                 ;783
00073a  ee700a60          VSUB.F32 s1,s0,s1              ;783
00073e  ee810a20          VDIV.F32 s0,s2,s1              ;783
000742  ee000a90          VMOV     s1,r0                 ;784
000746  eeb81a60          VCVT.F32.U32 s2,s1                 ;784
00074a  ee004a90          VMOV     s1,r4                 ;784
00074e  eef80a60          VCVT.F32.U32 s1,s1                 ;784
000752  ed880a1c          VSTR     s0,[r8,#0x70]         ;783
000756  ee400a41          VMLS.F32 s1,s0,s2              ;784
00075a  edc80a21          VSTR     s1,[r8,#0x84]         ;784
00075e  e026              B        |L1.1966|
                  |L1.1888|
000760  f8c97024          STR      r7,[r9,#0x24]         ;790  ; Run_Control
                  |L1.1892|
000764  7037              STRB     r7,[r6,#0]            ;791
000766  e4bb              B        |L1.224|
                  |L1.1896|
;;;795    		{
;;;796    			
;;;797    			x2 = Rmon_value;
000768  8800              LDRH     r0,[r0,#0]  ; Rmon_value
;;;798    			y2 = data;
;;;799    			CalPara.TestR[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
00076a  ee014a10          VMOV     s2,r4
00076e  eeb80a40          VCVT.F32.U32 s0,s0
000772  eef80a60          VCVT.F32.U32 s1,s1
000776  eeb81a41          VCVT.F32.U32 s2,s2
00077a  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;797
00077e  ee311a40          VSUB.F32 s2,s2,s0
000782  ee000a10          VMOV     s0,r0
000786  eeb80a40          VCVT.F32.U32 s0,s0
00078a  ee700a60          VSUB.F32 s1,s0,s1
00078e  ee810a20          VDIV.F32 s0,s2,s1
;;;800    			CalPara.OffsetR[2] = (float)y2 - CalPara.TestR[2]*(float)x2;
000792  ee000a90          VMOV     s1,r0
000796  eeb81a60          VCVT.F32.U32 s2,s1
00079a  ee004a90          VMOV     s1,r4
00079e  eef80a60          VCVT.F32.U32 s1,s1
0007a2  ed880a1a          VSTR     s0,[r8,#0x68]         ;799
0007a6  ee400a41          VMLS.F32 s1,s0,s2
0007aa  edc80a1f          VSTR     s1,[r8,#0x7c]
                  |L1.1966|
;;;801    				//参数写进FLASH
;;;802    			Flag_DAC_OFF=0;
;;;803    			calflag = 0;
0007ae  f8cc2000          STR      r2,[r12,#0]  ; flagB
0007b2  7033              STRB     r3,[r6,#0]
                  |L1.1972|
;;;804    		}
;;;805    		
;;;806    	}
;;;807    		
;;;808    
;;;809    	Write_Flash_Bytes();
0007b4  e8bd5ff0          POP      {r4-r12,lr}
0007b8  f7ffbffe          B.W      Write_Flash_Bytes
;;;810    //	else if(mode == 1){//测量电流
;;;811    //		if(range == 1)
;;;812    //		{
;;;813    //			x1 = abs(I_CS);
;;;814    //			y1 = data;
;;;815    //		}else if(range == 2){
;;;816    //			x2 = abs(I_CS);
;;;817    //			y2 = data;
;;;818    //			SaveDebug.TestIcal[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;819    //			SaveDebug.OffsetI[1] = (float)y2 - SaveDebug.TestIcal[1]*(float)x2;
;;;820    //		}else if(range == 4){
;;;821    //			x1 = abs(I_CS);
;;;822    //			y1 = data;
;;;823    //		}else if(range == 5){
;;;824    //			x2 = abs(I_CS);
;;;825    //			y2 = data;
;;;826    //			SaveDebug.TestIcal[4] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;827    //			SaveDebug.OffsetI[3] = (float)y2 - SaveDebug.TestIcal[4]*(float)x2;
;;;828    //		}else if(range == 0){
;;;829    //			SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[0]);
;;;830    //		}else if(range == 3){
;;;831    //			SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[0]));
;;;832    //		}
;;;833    ////		else if(range == 4){
;;;834    ////			x1 = V_CS;
;;;835    ////			y1 = data;
;;;836    ////		}else if(range == 5){
;;;837    ////			x2 = V_CS;
;;;838    ////			y2 = data;
;;;839    ////			SaveDebug.TestVcal[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;840    ////			SaveDebug.OffsetV[2] = (float)y2 - SaveDebug.TestVcal[2]*(float)x2;
;;;841    ////		}
;;;842    //		
;;;843    ////		if(range < 3)
;;;844    ////		{
;;;845    ////			if(range == 0)
;;;846    ////			{
;;;847    ////				SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[0]);
;;;848    ////			}else{
;;;849    ////				SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[1]);
;;;850    ////			}			
;;;851    ////		}else{
;;;852    ////			if(range == 3)
;;;853    ////			{
;;;854    ////				SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[0]));
;;;855    ////			}else{
;;;856    ////				SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[1]));
;;;857    ////			}
;;;858    ////		}
;;;859    ////		calflag = 1;
;;;860    //	}else if(mode == 2){//控制电压
;;;861    //		if(range == 0)
;;;862    //		{
;;;863    //			_D_ = 1000;
;;;864    //			x1 = data;
;;;865    //			y1 = _D_;
;;;866    //		}else if(range == 1){
;;;867    //			_D_ = 7000;
;;;868    //			x2 = data;
;;;869    //			y2 = _D_;
;;;870    //			SaveDebug.ControlV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;871    //			SaveDebug.OffsetCV[0] = (float)y2 - SaveDebug.ControlV[0]*(float)x2;
;;;872    //		}else if(range == 2){
;;;873    //			_D_ = 10000;
;;;874    //			x1 = data;
;;;875    //			y1 = _D_;
;;;876    //		}else if(range == 3){
;;;877    //			_D_ = 13000;
;;;878    //			x2 = data;
;;;879    //			y2 = _D_;
;;;880    //			SaveDebug.ControlV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;881    //			SaveDebug.OffsetCV[1] = (float)y2 - SaveDebug.ControlV[1]*(float)x2;
;;;882    //		}else if(range == 4){
;;;883    //			_D_ = 17000;
;;;884    //			x1 = data;
;;;885    //			y1 = _D_;
;;;886    //		}else if(range == 5){
;;;887    //			_D_ = 20000;
;;;888    //			x2 = data;
;;;889    //			y2 = _D_;
;;;890    //			SaveDebug.ControlV[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;891    //			SaveDebug.OffsetCV[2] = (float)y2 - SaveDebug.ControlV[2]*(float)x2;
;;;892    //		}else if(range == 6){
;;;893    //			_D_ = 24000;
;;;894    //			x1 = data;
;;;895    //			y1 = _D_;
;;;896    //		}else if(range == 7){
;;;897    //			_D_ = 27000;
;;;898    //			x2 = data;
;;;899    //			y2 = _D_;
;;;900    //			SaveDebug.ControlV[3] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;901    //			SaveDebug.OffsetCV[3] = (float)y2 - SaveDebug.ControlV[3]*(float)x2;
;;;902    //		}
;;;903    //		
;;;904    ////		if(range == 0)
;;;905    ////		{
;;;906    ////			SaveDebug.ControlV[range] = (float)1000/(float)data;
;;;907    ////		}else if(range == 1){
;;;908    ////			SaveDebug.ControlV[range] = (float)10000/(float)data;
;;;909    ////		}else if(range == 2){
;;;910    ////			SaveDebug.ControlV[range] = (float)15000/(float)data;
;;;911    ////		}else if(range == 3){
;;;912    ////			SaveDebug.ControlV[range] = (float)19000/(float)data;
;;;913    ////		}
;;;914    ////		calflag = 1;
;;;915    //	}else if(mode == 3){//电流清零
;;;916    //		SaveDebug.ClearI[range] = I_CS;
;;;917    ////		calflag = 1;
;;;918    //	}
;;;919    	
;;;920    }
;;;921    
                          ENDP

                  |L1.1980|
                          DCD      0x40020800
                  |L1.1984|
                          DCD      Imon_Load_value
                  |L1.1988|
                          DCD      Rmon_value
                  |L1.1992|
                          DCD      R1mon_value
                  |L1.1996|
                          DCD      R2mon_value

                          AREA ||i.DMA1_Stream3_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Stream3_IRQHandler PROC
;;;2235   
;;;2236   void DMA1_Stream3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2237   {
;;;2238   	//----DMA1 通道3完成中断，对应的中断也需要清除
;;;2239   	if(DMA_GetITStatus(DMA1_Stream3,DMA_IT_TCIF3) != RESET)   
000002  4d0c              LDR      r5,|L2.52|
000004  4c0c              LDR      r4,|L2.56|
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       DMA_GetITStatus
00000e  2800              CMP      r0,#0
000010  d00e              BEQ      |L2.48|
;;;2240       {
;;;2241   		/* 清除标志位 */
;;;2242   		DMA_ClearFlag(DMA1_Stream3,DMA_IT_TCIF3); 
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       DMA_ClearFlag
;;;2243   		/* 关闭DMA */
;;;2244   		DMA_Cmd(DMA1_Stream3,DISABLE);
00001a  2100              MOVS     r1,#0
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       DMA_Cmd
;;;2245   		
;;;2246   		while (!(USART3->SR & USART_FLAG_TC));  //硬件数据发送完毕
000022  4806              LDR      r0,|L2.60|
                  |L2.36|
000024  8801              LDRH     r1,[r0,#0]
000026  0649              LSLS     r1,r1,#25
000028  d5fc              BPL      |L2.36|
                  |L2.42|
;;;2247   		while (!(USART3->SR & USART_FLAG_TXE)); //等待数据从软件拷贝到硬件进行发送
00002a  8801              LDRH     r1,[r0,#0]
00002c  0609              LSLS     r1,r1,#24
00002e  d5fc              BPL      |L2.42|
                  |L2.48|
;;;2248   	}
;;;2249   }
000030  bd70              POP      {r4-r6,pc}
;;;2250   
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      0x18008000
                  |L2.56|
                          DCD      0x40026058
                  |L2.60|
                          DCD      0x40004800

                          AREA ||i.IsDigitChar||, CODE, READONLY, ALIGN=1

                  IsDigitChar PROC
;;;88     /*****************************************************************/
;;;89     unsigned short IsDigitChar(unsigned char a)             //如果a的值是数字的话返回1，否则返回0
000000  3830              SUBS     r0,r0,#0x30
;;;90     {
;;;91     	int b;
;;;92       if(a<0x30 || a>0x39)                     //数字1-9
000002  280a              CMP      r0,#0xa
000004  d301              BCC      |L3.10|
;;;93       	{
;;;94       	   b=0;
000006  2000              MOVS     r0,#0
;;;95       	}
;;;96       else
;;;97       	{
;;;98       	   b=1;
;;;99       	}
;;;100      return b;
;;;101    }
000008  4770              BX       lr
                  |L3.10|
00000a  2001              MOVS     r0,#1                 ;98
00000c  4770              BX       lr
;;;102    void SetPowerV(vu16 powv)
                          ENDP


                          AREA ||i.LIST_ONOFF||, CODE, READONLY, ALIGN=2

                  LIST_ONOFF PROC
;;;337    
;;;338    void LIST_ONOFF(vu8 value)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;339    {
;;;340    	switch(MODE)
000004  4a63              LDR      r2,|L4.404|
000006  ed2d8b02          VPUSH    {d8}                  ;339
00000a  f892c005          LDRB     r12,[r2,#5]  ; MODE
;;;341    	{
;;;342    		case 0://电子负载ON/OFF
;;;343    		{
;;;344    			LOAD_MODE=0;
;;;345    			GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
;;;346    			if( value == 0 ){
;;;347    				
;;;348    				Flag_Swtich_ON = 0;
00000e  4c63              LDR      r4,|L4.412|
000010  2600              MOVS     r6,#0                 ;340
000012  f8df9184          LDR      r9,|L4.408|
;;;349    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
;;;350    			}
;;;351    			else if( value == 1 ){
;;;352    				
;;;353    				Flag_Swtich_ON = 1;
000016  6821              LDR      r1,[r4,#0]
;;;354    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;355    			}
;;;356    		}break;
;;;357    		case 1://稳压电源ON/OFF
;;;358    		{
;;;359    			if( value == 0 ){
;;;360    				listsend = 3;
;;;361    				listpowwatch1 ++;
;;;362    //				PowerSwitch(0);
;;;363    //				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;364    //				Para.CSET_Voltage = 0;
;;;365    //				Para.CSET_Current = 0;
;;;366    //				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;367    			}
;;;368    			else if( value == 1 ){
;;;369    				listsend = 1;
000018  2301              MOVS     r3,#1
;;;370    				listpowwatch2 ++;
;;;371    //				PowerSwitch(1);
;;;372    //				Para.CSET_Voltage = Para.CDC_OutPut_V;
;;;373    //				Para.CSET_Current = Para.CDC_Limit_C;
;;;374    //				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;375    //				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;376    			}
;;;377    		}break;
;;;378    		case 2://过流测试ON/OFF
;;;379    		{
;;;380    			listocwatch++;
;;;381    			if( value == 0 ){
;;;382    				
;;;383    				Off_GPOI_ResetSet();
;;;384    				trig_flag_state = 0;
;;;385    				max_discahrgeNum = 0;
;;;386    				Para.CSET_Current_Laod =  Para.IR_Start_C;
00001a  4d61              LDR      r5,|L4.416|
00001c  4f61              LDR      r7,|L4.420|
00001e  f0410040          ORR      r0,r1,#0x40           ;353
000022  f1bc0f05          CMP      r12,#5                ;340
000026  d225              BCS      |L4.116|
000028  e8dff00c          TBB      [pc,r12]              ;340
00002c  03192e7b          DCB      0x03,0x19,0x2e,0x7b
000030  9800              DCB      0x98,0x00
000032  f8c96018          STR      r6,[r9,#0x18]         ;344  ; Run_Control
000036  f44f5180          MOV      r1,#0x1000            ;345
00003a  4638              MOV      r0,r7                 ;345
00003c  f7fffffe          BL       GPIO_ResetBits
000040  f89d0008          LDRB     r0,[sp,#8]            ;346
000044  b138              CBZ      r0,|L4.86|
000046  f89d0008          LDRB     r0,[sp,#8]            ;351
00004a  2801              CMP      r0,#1                 ;351
00004c  d112              BNE      |L4.116|
00004e  6820              LDR      r0,[r4,#0]            ;353  ; flagA
000050  f0400040          ORR      r0,r0,#0x40           ;353
000054  e089              B        |L4.362|
                  |L4.86|
000056  6820              LDR      r0,[r4,#0]            ;348  ; flagA
000058  f0200040          BIC      r0,r0,#0x40           ;348
00005c  e090              B        |L4.384|
00005e  f89d0008          LDRB     r0,[sp,#8]            ;359
000062  b158              CBZ      r0,|L4.124|
000064  f89d0008          LDRB     r0,[sp,#8]            ;368
000068  2801              CMP      r0,#1                 ;368
00006a  d103              BNE      |L4.116|
00006c  7253              STRB     r3,[r2,#9]            ;369
00006e  7b10              LDRB     r0,[r2,#0xc]          ;370  ; listpowwatch2
000070  1c40              ADDS     r0,r0,#1              ;370
000072  7310              STRB     r0,[r2,#0xc]          ;370
                  |L4.116|
;;;387    			}
;;;388    			else if( value == 1 ){
;;;389    				LOAD_I_SW = 1;
;;;390    				testv = DISS_Voltage;
;;;391    				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
;;;392    				Para.CSET_Current = 1000;
;;;393    				Para.CSET_Current_Laod =  Para.IR_Start_C;
;;;394    				shorttime = 0;
;;;395    				old_I = 0;
;;;396    				max_discahrgeNum = 0;
;;;397    				trig_flag_state = 1;
;;;398    				C_DISCHARGE = 1;        	
;;;399    				Flag_Swtich_ON = 1;
;;;400    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
;;;401    				max_discahrgeNum = (float)Para.IR_Start_C / 1000;				
;;;402    //				testv = DISS_Voltage;
;;;403    //				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
;;;404    //				Para.CSET_Current = 1000;
;;;405    //				Para.CSET_Current_Laod = Para.IR_Start_C;
;;;406    //				shorttime = 0;
;;;407    //				old_I = 0;
;;;408    //				max_discahrgeNum = 0;
;;;409    //				trig_flag_state = 1;
;;;410    //				C_DISCHARGE = 1;
;;;411    //				Flag_Swtich_ON = 1;
;;;412    //				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
;;;413    //				max_discahrgeNum = (float)Para.IR_Start_C / 1000;
;;;414    			}
;;;415    		}break;
;;;416    		case 3://过充测试ON/OFF
;;;417    		{
;;;418    			if( value == 0 ){
;;;419    				
;;;420    				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;421    				Para.CSET_Voltage = 0;
;;;422    				Para.CSET_Current = 0;
;;;423    				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;424    			}
;;;425    			else if( value == 1 ){
;;;426    				Para.CSET_Voltage = Para.CDC_OutPut_V;
;;;427    				Para.CSET_Current = Para.CDC_Limit_C;
;;;428    				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;429    				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;430    			}
;;;431    		}break;
;;;432    		case 4://电子负载ON/OFF
;;;433    		{
;;;434    			if( value == 0 ){
;;;435    				
;;;436    				Flag_Swtich_ON = 0;
;;;437    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
;;;438    			}
;;;439    			else if( value == 1 ){
;;;440    				
;;;441    				Flag_Swtich_ON = 1;
;;;442    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;443    			}
;;;444    		}break;
;;;445    	}
;;;446    }
000074  ecbd8b02          VPOP     {d8}
000078  e8bd8ff8          POP      {r3-r11,pc}
                  |L4.124|
00007c  2003              MOVS     r0,#3                 ;360
00007e  7250              STRB     r0,[r2,#9]            ;360
000080  7ad0              LDRB     r0,[r2,#0xb]          ;361  ; listpowwatch1
000082  1c40              ADDS     r0,r0,#1              ;361
000084  72d0              STRB     r0,[r2,#0xb]          ;361
000086  e7f5              B        |L4.116|
000088  7a91              LDRB     r1,[r2,#0xa]          ;380  ; listocwatch
00008a  1c49              ADDS     r1,r1,#1              ;380
00008c  7291              STRB     r1,[r2,#0xa]          ;380
00008e  f89d1008          LDRB     r1,[sp,#8]            ;381
000092  f8dfa114          LDR      r10,|L4.424|
000096  ed9f8a45          VLDR     s16,|L4.428|
00009a  f8df8114          LDR      r8,|L4.432|
00009e  b3b1              CBZ      r1,|L4.270|
0000a0  f89d1008          LDRB     r1,[sp,#8]            ;388
0000a4  2901              CMP      r1,#1                 ;388
0000a6  d1e5              BNE      |L4.116|
0000a8  f8c93020          STR      r3,[r9,#0x20]         ;389  ; Run_Control
0000ac  4941              LDR      r1,|L4.436|
0000ae  ed910a00          VLDR     s0,[r1,#0]            ;390
0000b2  4941              LDR      r1,|L4.440|
0000b4  ed810a00          VSTR     s0,[r1,#0]            ;390
0000b8  eddf8a40          VLDR     s17,|L4.444|
0000bc  ee200a28          VMUL.F32 s0,s0,s17             ;391
0000c0  eebd0ac0          VCVT.S32.F32 s0,s0                 ;391
0000c4  ee101a10          VMOV     r1,s0                 ;391
0000c8  f501717a          ADD      r1,r1,#0x3e8          ;391
0000cc  60a9              STR      r1,[r5,#8]            ;391  ; Para
0000ce  f44f717a          MOV      r1,#0x3e8             ;392
0000d2  60e9              STR      r1,[r5,#0xc]          ;392  ; Para
0000d4  6c69              LDR      r1,[r5,#0x44]         ;393  ; Para
0000d6  6169              STR      r1,[r5,#0x14]         ;393  ; Para
0000d8  4939              LDR      r1,|L4.448|
0000da  700e              STRB     r6,[r1,#0]            ;394
0000dc  4939              LDR      r1,|L4.452|
0000de  4646              MOV      r6,r8                 ;396
0000e0  ed818a00          VSTR     s16,[r1,#0]           ;395
0000e4  ed888a00          VSTR     s16,[r8,#0]           ;396
0000e8  f88a3000          STRB     r3,[r10,#0]           ;397
0000ec  4936              LDR      r1,|L4.456|
0000ee  700b              STRB     r3,[r1,#0]            ;398
0000f0  6020              STR      r0,[r4,#0]            ;400  ; flagA
0000f2  2180              MOVS     r1,#0x80              ;400
0000f4  4638              MOV      r0,r7                 ;400
0000f6  f7fffffe          BL       GPIO_ResetBits
0000fa  6c68              LDR      r0,[r5,#0x44]         ;401  ; Para
0000fc  ee000a10          VMOV     s0,r0                 ;401
000100  eeb80a40          VCVT.F32.U32 s0,s0                 ;401
000104  eec00a28          VDIV.F32 s1,s0,s17             ;401
000108  edc60a00          VSTR     s1,[r6,#0]            ;401
00010c  e7b2              B        |L4.116|
                  |L4.270|
00010e  e7ff              B        |L4.272|
                  |L4.272|
000110  f7fffffe          BL       Off_GPOI_ResetSet
000114  f88a6000          STRB     r6,[r10,#0]           ;384
000118  ed888a00          VSTR     s16,[r8,#0]           ;385
00011c  6c68              LDR      r0,[r5,#0x44]         ;386  ; Para
00011e  6168              STR      r0,[r5,#0x14]         ;386  ; Para
000120  e7a8              B        |L4.116|
000122  f89d0008          LDRB     r0,[sp,#8]            ;418
000126  4c29              LDR      r4,|L4.460|
000128  b178              CBZ      r0,|L4.330|
00012a  f89d0008          LDRB     r0,[sp,#8]            ;425
00012e  2801              CMP      r0,#1                 ;425
000130  d1a0              BNE      |L4.116|
000132  f8b50064          LDRH     r0,[r5,#0x64]         ;426  ; Para
000136  60a8              STR      r0,[r5,#8]            ;426  ; Para
000138  f8b50066          LDRH     r0,[r5,#0x66]         ;427  ; Para
00013c  60e8              STR      r0,[r5,#0xc]          ;427  ; Para
00013e  2104              MOVS     r1,#4                 ;428
000140  4620              MOV      r0,r4                 ;428
000142  f7fffffe          BL       GPIO_SetBits
000146  2102              MOVS     r1,#2                 ;429
000148  e01c              B        |L4.388|
                  |L4.330|
00014a  2102              MOVS     r1,#2                 ;420
00014c  4638              MOV      r0,r7                 ;420
00014e  f7fffffe          BL       GPIO_ResetBits
000152  60ae              STR      r6,[r5,#8]            ;421  ; Para
000154  60ee              STR      r6,[r5,#0xc]          ;422  ; Para
000156  2104              MOVS     r1,#4                 ;423
000158  4620              MOV      r0,r4                 ;423
00015a  e009              B        |L4.368|
00015c  f89d2008          LDRB     r2,[sp,#8]            ;434
000160  b162              CBZ      r2,|L4.380|
000162  f89d1008          LDRB     r1,[sp,#8]            ;439
000166  2901              CMP      r1,#1                 ;439
000168  d184              BNE      |L4.116|
                  |L4.362|
00016a  6020              STR      r0,[r4,#0]            ;442  ; flagA
00016c  2180              MOVS     r1,#0x80              ;442
00016e  4638              MOV      r0,r7                 ;442
                  |L4.368|
000170  ecbd8b02          VPOP     {d8}                  ;442
000174  e8bd4ff8          POP      {r3-r11,lr}           ;442
000178  f7ffbffe          B.W      GPIO_ResetBits
                  |L4.380|
00017c  f0210040          BIC      r0,r1,#0x40           ;436
                  |L4.384|
000180  2180              MOVS     r1,#0x80              ;349
000182  6020              STR      r0,[r4,#0]            ;349  ; flagA
                  |L4.388|
000184  4638              MOV      r0,r7                 ;437
000186  ecbd8b02          VPOP     {d8}                  ;437
00018a  e8bd4ff8          POP      {r3-r11,lr}           ;437
00018e  f7ffbffe          B.W      GPIO_SetBits
;;;447    
                          ENDP

000192  0000              DCW      0x0000
                  |L4.404|
                          DCD      ||.data||
                  |L4.408|
                          DCD      Run_Control
                  |L4.412|
                          DCD      flagA
                  |L4.416|
                          DCD      Para
                  |L4.420|
                          DCD      0x40020800
                  |L4.424|
                          DCD      trig_flag_state
                  |L4.428|
0001ac  00000000          DCFS     0x00000000 ; 0
                  |L4.432|
                          DCD      max_discahrgeNum
                  |L4.436|
                          DCD      DISS_Voltage
                  |L4.440|
                          DCD      testv
                  |L4.444|
0001bc  447a0000          DCFS     0x447a0000 ; 1000
                  |L4.448|
                          DCD      shorttime
                  |L4.452|
                          DCD      old_I
                  |L4.456|
                          DCD      C_DISCHARGE
                  |L4.460|
                          DCD      0x40021000

                          AREA ||i.MODE_ONOFF||, CODE, READONLY, ALIGN=2

                  MODE_ONOFF PROC
;;;263    
;;;264    void MODE_ONOFF(vu8 value)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;265    {
;;;266    	switch(MODE)
000004  4a41              LDR      r2,|L5.268|
000006  ed2d8b02          VPUSH    {d8}                  ;265
00000a  7951              LDRB     r1,[r2,#5]  ; MODE
;;;267    	{
;;;268    		case 0://电子负载ON/OFF
;;;269    		{
;;;270    			if( value == 0 ){
;;;271    				
;;;272    				Flag_Swtich_ON = 0;
00000c  4d40              LDR      r5,|L5.272|
;;;273    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
00000e  4841              LDR      r0,|L5.276|
000010  b3e9              CBZ      r1,|L5.142|
;;;274    			}
;;;275    			else if( value == 1 ){
;;;276    				
;;;277    				Flag_Swtich_ON = 1;
;;;278    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;279    			}
;;;280    		}break;
;;;281    		case 1://稳压电源ON/OFF
;;;282    		{
;;;283    			sendwait = 1;
000012  2601              MOVS     r6,#1
000014  2901              CMP      r1,#1                 ;266
000016  d06d              BEQ      |L5.244|
000018  2902              CMP      r1,#2                 ;266
00001a  d14a              BNE      |L5.178|
;;;284    //			if( value == 0 ){
;;;285    //				sendwait = 1;
;;;286    ////				PowerSwitch(0);//关闭电源输出
;;;287    ////				Delay_ms(1000);
;;;288    ////				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;289    ////				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;290    //////				Delay_ms(1000);
;;;291    ////				Para.CSET_Voltage = 0;
;;;292    ////				Para.CSET_Current = 0;
;;;293    //////				Delay_ms(1000);
;;;294    ////				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;295    //			}
;;;296    //			else if( value == 1 ){
;;;297    ////				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;298    //////				Delay_ms(1000);
;;;299    ////				PowerSwitch(1);//打开电源输出
;;;300    //				
;;;301    //////				
;;;302    ////				Para.CSET_Voltage = Para.POWER_OutPut_V;
;;;303    ////				Para.CSET_Current = Para.POWER_Limit_C;
;;;304    //////				Delay_ms(1000);
;;;305    ////				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;306    //				
;;;307    //			}
;;;308    		}break;
;;;309    		case 2://过流测试ON/OFF
;;;310    		{
;;;311    			if( value == 0 ){
00001c  f89d1008          LDRB     r1,[sp,#8]
;;;312    				
;;;313    				Off_GPOI_ResetSet();
;;;314    				trig_flag_state = 0;
000020  f8df90f4          LDR      r9,|L5.280|
;;;315    				max_discahrgeNum = 0;
000024  ed9f8a3d          VLDR     s16,|L5.284|
000028  f8df80f4          LDR      r8,|L5.288|
;;;316    				Para.CSET_Current_Laod =  Para.IR_Start_C;
00002c  4c3d              LDR      r4,|L5.292|
00002e  2700              MOVS     r7,#0                 ;311
000030  b371              CBZ      r1,|L5.144|
;;;317    			}
;;;318    			else if( value == 1 ){
000032  f89d1008          LDRB     r1,[sp,#8]
000036  2901              CMP      r1,#1
000038  d13b              BNE      |L5.178|
;;;319    				LOAD_MODE = 0;
00003a  493b              LDR      r1,|L5.296|
00003c  618f              STR      r7,[r1,#0x18]  ; Run_Control
;;;320    				GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
00003e  1481              ASRS     r1,r0,#18
000040  4682              MOV      r10,r0
000042  f7fffffe          BL       GPIO_ResetBits
;;;321    				Para.CSET_Current_Laod =  Para.IR_Start_C;
000046  6c60              LDR      r0,[r4,#0x44]  ; Para
000048  6160              STR      r0,[r4,#0x14]  ; Para
;;;322    				testv = DISS_Voltage;
00004a  4838              LDR      r0,|L5.300|
;;;323    				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
00004c  eddf8a39          VLDR     s17,|L5.308|
000050  ed900a00          VLDR     s0,[r0,#0]            ;322
000054  4836              LDR      r0,|L5.304|
000056  ed800a00          VSTR     s0,[r0,#0]            ;322
00005a  ee200a28          VMUL.F32 s0,s0,s17
00005e  eebd0ac0          VCVT.S32.F32 s0,s0
000062  ee100a10          VMOV     r0,s0
000066  f500707a          ADD      r0,r0,#0x3e8
00006a  60a0              STR      r0,[r4,#8]  ; Para
;;;324    				Para.CSET_Current = 1000;
00006c  f44f707a          MOV      r0,#0x3e8
000070  60e0              STR      r0,[r4,#0xc]  ; Para
;;;325    				shorttime = 0;
000072  4831              LDR      r0,|L5.312|
000074  7007              STRB     r7,[r0,#0]
;;;326    				old_I = 0;
000076  4831              LDR      r0,|L5.316|
;;;327    				max_discahrgeNum = 0;
000078  4647              MOV      r7,r8
00007a  ed808a00          VSTR     s16,[r0,#0]           ;326
00007e  ed888a00          VSTR     s16,[r8,#0]
;;;328    				trig_flag_state = 1;
000082  f8896000          STRB     r6,[r9,#0]
;;;329    				C_DISCHARGE = 1;        	
000086  482e              LDR      r0,|L5.320|
000088  7006              STRB     r6,[r0,#0]
;;;330    				Flag_Swtich_ON = 1;
00008a  6828              LDR      r0,[r5,#0]  ; flagA
00008c  e001              B        |L5.146|
                  |L5.142|
00008e  e014              B        |L5.186|
                  |L5.144|
000090  e032              B        |L5.248|
                  |L5.146|
000092  f0400040          ORR      r0,r0,#0x40
;;;331    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
000096  6028              STR      r0,[r5,#0]  ; flagA
000098  2180              MOVS     r1,#0x80
00009a  4650              MOV      r0,r10
00009c  f7fffffe          BL       GPIO_ResetBits
;;;332    				max_discahrgeNum = (float)Para.IR_Start_C / 1000;
0000a0  6c60              LDR      r0,[r4,#0x44]  ; Para
0000a2  ee000a10          VMOV     s0,r0
0000a6  eeb80a40          VCVT.F32.U32 s0,s0
0000aa  eec00a28          VDIV.F32 s1,s0,s17
0000ae  edc70a00          VSTR     s1,[r7,#0]
                  |L5.178|
;;;333    			}
;;;334    		}break;
;;;335    	}
;;;336    }
0000b2  ecbd8b02          VPOP     {d8}
0000b6  e8bd8ff8          POP      {r3-r11,pc}
                  |L5.186|
0000ba  f89d2008          LDRB     r2,[sp,#8]            ;270
0000be  4914              LDR      r1,|L5.272|
0000c0  6809              LDR      r1,[r1,#0]            ;272
0000c2  b16a              CBZ      r2,|L5.224|
0000c4  f89d2008          LDRB     r2,[sp,#8]            ;275
0000c8  2a01              CMP      r2,#1                 ;275
0000ca  d1f2              BNE      |L5.178|
0000cc  f0410140          ORR      r1,r1,#0x40           ;277
0000d0  6029              STR      r1,[r5,#0]            ;278  ; flagA
0000d2  2180              MOVS     r1,#0x80              ;278
0000d4  ecbd8b02          VPOP     {d8}                  ;278
0000d8  e8bd4ff8          POP      {r3-r11,lr}           ;278
0000dc  f7ffbffe          B.W      GPIO_ResetBits
                  |L5.224|
0000e0  f0210140          BIC      r1,r1,#0x40           ;272
0000e4  6029              STR      r1,[r5,#0]            ;273  ; flagA
0000e6  2180              MOVS     r1,#0x80              ;273
0000e8  ecbd8b02          VPOP     {d8}                  ;273
0000ec  e8bd4ff8          POP      {r3-r11,lr}           ;273
0000f0  f7ffbffe          B.W      GPIO_SetBits
                  |L5.244|
0000f4  7216              STRB     r6,[r2,#8]            ;283
0000f6  e7dc              B        |L5.178|
                  |L5.248|
0000f8  f7fffffe          BL       Off_GPOI_ResetSet
0000fc  f8897000          STRB     r7,[r9,#0]            ;314
000100  ed888a00          VSTR     s16,[r8,#0]           ;315
000104  6c60              LDR      r0,[r4,#0x44]         ;316  ; Para
000106  6160              STR      r0,[r4,#0x14]         ;316  ; Para
000108  e7d3              B        |L5.178|
;;;337    
                          ENDP

00010a  0000              DCW      0x0000
                  |L5.268|
                          DCD      ||.data||
                  |L5.272|
                          DCD      flagA
                  |L5.276|
                          DCD      0x40020800
                  |L5.280|
                          DCD      trig_flag_state
                  |L5.284|
00011c  00000000          DCFS     0x00000000 ; 0
                  |L5.288|
                          DCD      max_discahrgeNum
                  |L5.292|
                          DCD      Para
                  |L5.296|
                          DCD      Run_Control
                  |L5.300|
                          DCD      DISS_Voltage
                  |L5.304|
                          DCD      testv
                  |L5.308|
000134  447a0000          DCFS     0x447a0000 ; 1000
                  |L5.312|
                          DCD      shorttime
                  |L5.316|
                          DCD      old_I
                  |L5.320|
                          DCD      C_DISCHARGE

                          AREA ||i.MODE_PARASET||, CODE, READONLY, ALIGN=2

                  MODE_PARASET PROC
;;;447    
;;;448    void MODE_PARASET(vu8 value)
000000  b570              PUSH     {r4-r6,lr}
;;;449    {
;;;450    	switch(MODE)
000002  4a17              LDR      r2,|L6.96|
000004  7953              LDRB     r3,[r2,#5]  ; MODE
000006  2100              MOVS     r1,#0
;;;451    	{
;;;452    		case 0://电子负载
;;;453    		{
;;;454    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;455    //			mainswitch = 0;
;;;456    //			sendwait = 3;
;;;457    			LOAD_MODE = Para.CLOAD_MODE;
000008  4816              LDR      r0,|L6.100|
;;;458    			Para.CSET_Current_Laod = Para.LOAD_C;
;;;459    			Para.CSET_Voltage_Laod = Para.LOAD_V;
;;;460    			if(Para.CSET_Current_Laod > 20000)
;;;461    			{
;;;462    				LOAD_I_SW = 1;
00000a  2401              MOVS     r4,#1
00000c  4d16              LDR      r5,|L6.104|
00000e  2b05              CMP      r3,#5                 ;450
000010  d211              BCS      |L6.54|
000012  e8dff003          TBB      [pc,r3]               ;450
000016  0322              DCB      0x03,0x22
000018  131b2200          DCB      0x13,0x1b,0x22,0x00
00001c  6982              LDR      r2,[r0,#0x18]         ;457  ; Para
00001e  61aa              STR      r2,[r5,#0x18]         ;457  ; Run_Control
000020  6dc2              LDR      r2,[r0,#0x5c]         ;458  ; Para
000022  6142              STR      r2,[r0,#0x14]         ;458  ; Para
000024  f8b02060          LDRH     r2,[r0,#0x60]         ;459  ; Para
000028  6102              STR      r2,[r0,#0x10]         ;459  ; Para
00002a  6940              LDR      r0,[r0,#0x14]         ;460  ; Para
00002c  f6446220          MOV      r2,#0x4e20            ;460
000030  4290              CMP      r0,r2                 ;460
000032  d901              BLS      |L6.56|
                  |L6.52|
000034  622c              STR      r4,[r5,#0x20]  ; Run_Control
                  |L6.54|
;;;463    			}else{
;;;464    				LOAD_I_SW = 0;
;;;465    			}
;;;466    		}break;
;;;467    		case 1://稳压电源
;;;468    		{
;;;469    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;470    //			mainswitch = 0;
;;;471    //			if(USART3_Recive_flg == 1)
;;;472    //			{
;;;473    				sendwait = 1;
;;;474    //			}else{
;;;475    //				SetPowerMode();
;;;476    //			}
;;;477    //			Para.CSET_Voltage = Para.POWER_OutPut_V;
;;;478    //			SetPowerV(Para.POWER_OutPut_V);
;;;479    //	//			Para.CSET_Current = Para.POWER_Limit_C;
;;;480    //			SetPowerC(Para.POWER_Limit_C);
;;;481    		}break;
;;;482    		case 2://放电过流测试
;;;483    		{
;;;484    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;485    //			mainswitch = 0;
;;;486    //			sendwait = 3;
;;;487    			
;;;488    			LOAD_MODE = 0;
;;;489    			LOAD_I_SW = 1;
;;;490    			Para.CSET_Current = 1000;
;;;491    			Para.CSET_Current_Laod = Para.IR_Start_C;
;;;492    		}break;
;;;493    		case 3://列表
;;;494    		{
;;;495    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;496    //			mainswitch = 0;
;;;497    //			sendwait = 3;
;;;498    			
;;;499    			LOAD_MODE = 0;
;;;500    			GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
;;;501    			LOAD_I_SW = 1;
;;;502    //			Para.CSET_Current = 1000;
;;;503    		}break;
;;;504    		case 4://充电过流测试
;;;505    		{
;;;506    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;507    //			mainswitch = 0;
;;;508    //			sendwait = 3;
;;;509    			
;;;510    			sendwait = 1;
;;;511    		}break;
;;;512    	}
;;;513    }
000036  bd70              POP      {r4-r6,pc}
                  |L6.56|
000038  6229              STR      r1,[r5,#0x20]         ;464  ; Run_Control
00003a  bd70              POP      {r4-r6,pc}
00003c  61a9              STR      r1,[r5,#0x18]         ;488  ; Run_Control
00003e  622c              STR      r4,[r5,#0x20]         ;489  ; Run_Control
000040  f44f717a          MOV      r1,#0x3e8             ;490
000044  60c1              STR      r1,[r0,#0xc]          ;490  ; Para
000046  6c41              LDR      r1,[r0,#0x44]         ;491  ; Para
000048  6141              STR      r1,[r0,#0x14]         ;491  ; Para
00004a  bd70              POP      {r4-r6,pc}
00004c  61a9              STR      r1,[r5,#0x18]         ;499  ; Run_Control
00004e  f44f5180          MOV      r1,#0x1000            ;500
000052  4806              LDR      r0,|L6.108|
000054  f7fffffe          BL       GPIO_ResetBits
000058  e7ec              B        |L6.52|
00005a  7214              STRB     r4,[r2,#8]            ;510
00005c  bd70              POP      {r4-r6,pc}
;;;514    
                          ENDP

00005e  0000              DCW      0x0000
                  |L6.96|
                          DCD      ||.data||
                  |L6.100|
                          DCD      Para
                  |L6.104|
                          DCD      Run_Control
                  |L6.108|
                          DCD      0x40020800

                          AREA ||i.PowerSwitch||, CODE, READONLY, ALIGN=2

                  PowerSwitch PROC
;;;187    
;;;188    void PowerSwitch(vu8 bit)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;189    {
;;;190    	MasterSendbuf[0] = 0x01;
000002  4c0f              LDR      r4,|L7.64|
000004  2001              MOVS     r0,#1
;;;191    	MasterSendbuf[1] = 0x06;
000006  2106              MOVS     r1,#6
000008  7020              STRB     r0,[r4,#0]            ;190
00000a  7061              STRB     r1,[r4,#1]
;;;192    	MasterSendbuf[2] = 0x00;
00000c  2100              MOVS     r1,#0
00000e  70a1              STRB     r1,[r4,#2]
;;;193    	MasterSendbuf[3] = 0x01;
000010  70e0              STRB     r0,[r4,#3]
;;;194    	MasterSendbuf[4] = (u8)(bit>>8);
000012  f89d0000          LDRB     r0,[sp,#0]
000016  7121              STRB     r1,[r4,#4]
;;;195    	MasterSendbuf[5] = (u8)(bit);
000018  f89d0000          LDRB     r0,[sp,#0]
00001c  7160              STRB     r0,[r4,#5]
;;;196    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00001e  2106              MOVS     r1,#6
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       Hardware_CRC
000026  71a0              STRB     r0,[r4,#6]
;;;197    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000028  2106              MOVS     r1,#6
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       Hardware_CRC
000030  0a00              LSRS     r0,r0,#8
000032  71e0              STRB     r0,[r4,#7]
;;;198    	USART3WriteDMA(8);
000034  e8bd4038          POP      {r3-r5,lr}
000038  2008              MOVS     r0,#8
00003a  f7ffbffe          B.W      USART3WriteDMA
;;;199    }
;;;200    
                          ENDP

00003e  0000              DCW      0x0000
                  |L7.64|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.ReadPowData||, CODE, READONLY, ALIGN=2

                  ReadPowData PROC
;;;200    
;;;201    void ReadPowData(void)
000000  b510              PUSH     {r4,lr}
;;;202    {
;;;203    	MasterSendbuf[0] = 0x01;
000002  4c0e              LDR      r4,|L8.60|
000004  2001              MOVS     r0,#1
;;;204    	MasterSendbuf[1] = 0x03;
;;;205    	MasterSendbuf[2] = 0x00;
;;;206    	MasterSendbuf[3] = 0x10;
000006  2110              MOVS     r1,#0x10
000008  7020              STRB     r0,[r4,#0]            ;203
00000a  2003              MOVS     r0,#3                 ;204
00000c  7060              STRB     r0,[r4,#1]            ;204
00000e  2000              MOVS     r0,#0                 ;205
000010  70a0              STRB     r0,[r4,#2]            ;205
000012  70e1              STRB     r1,[r4,#3]
;;;207    	MasterSendbuf[4] = 0x00;
000014  7120              STRB     r0,[r4,#4]
;;;208    	MasterSendbuf[5] = 0x02;
000016  2002              MOVS     r0,#2
000018  7160              STRB     r0,[r4,#5]
;;;209    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00001a  2106              MOVS     r1,#6
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       Hardware_CRC
000022  71a0              STRB     r0,[r4,#6]
;;;210    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000024  2106              MOVS     r1,#6
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       Hardware_CRC
00002c  0a00              LSRS     r0,r0,#8
00002e  71e0              STRB     r0,[r4,#7]
;;;211    	USART3WriteDMA(8);
000030  e8bd4010          POP      {r4,lr}
000034  2008              MOVS     r0,#8
000036  f7ffbffe          B.W      USART3WriteDMA
;;;212    }
;;;213    
                          ENDP

00003a  0000              DCW      0x0000
                  |L8.60|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.SerialRemoteHandleL||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  SerialRemoteHandleL PROC
;;;959    
;;;960    u16 SerialRemoteHandleL(u8 len,char* buf)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;961    {
000004  ed2d8b02          VPUSH    {d8}
000008  b0b3              SUB      sp,sp,#0xcc
00000a  4605              MOV      r5,r0
;;;962    
;;;963      
;;;964        u16 currCharNum;
;;;965        u32 temp1;
;;;966      u8 Gmode_Vale;
;;;967    	u8 i,j;
;;;968    	
;;;969    	u8 addr = 0;
00000c  2000              MOVS     r0,#0
00000e  460c              MOV      r4,r1                 ;961
;;;970    	char str[200]={0};
000010  9032              STR      r0,[sp,#0xc8]
000012  21c8              MOVS     r1,#0xc8
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       __aeabi_memclr4
;;;971    	int cmd_flag=255;
;;;972    	u8 templen =0;
;;;973    	u8 tmpFg;
;;;974    	u8 LM_S_Vale,LOW_I_Vale,H_L_Vale,SWITCH_Vale;
;;;975    	u16 I_ADC_Vale,V_ADC_Vale;
;;;976    	int32_t V_CS_Vale,I_CS_Vale;
;;;977    	float Lvl_Vale,fadcx,fsingal, fVale;
;;;978     
;;;979    //	u8 len = 11;
;;;980    	u8 pntlen = 0;
;;;981    
;;;982    
;;;983    	
;;;984    	currCharNum=0;
;;;985    	if((buf[currCharNum] != ChrStartR) || (buf[len-2] != ChrEndR)||(buf[len-1] != ChrEndS))
00001a  7820              LDRB     r0,[r4,#0]
00001c  283c              CMP      r0,#0x3c
00001e  d108              BNE      |L9.50|
000020  1960              ADDS     r0,r4,r5
000022  f8101c02          LDRB     r1,[r0,#-2]
000026  290d              CMP      r1,#0xd
000028  d103              BNE      |L9.50|
00002a  f8100c01          LDRB     r0,[r0,#-1]
00002e  280a              CMP      r0,#0xa
000030  d001              BEQ      |L9.54|
                  |L9.50|
;;;986        {
;;;987    		return SetErr_ACK(buf,addr ,CMD_ERR); 
000032  2202              MOVS     r2,#2
000034  e166              B        |L9.772|
                  |L9.54|
;;;988        } 
;;;989    	str[currCharNum++] = ChrStartR;
000036  213c              MOVS     r1,#0x3c
000038  f88d1000          STRB     r1,[sp,#0]
;;;990    	sprintf(&str[currCharNum],"%d",addr);
00003c  a1fe              ADR      r1,|L9.1080|
00003e  f10d0001          ADD      r0,sp,#1
000042  9a32              LDR      r2,[sp,#0xc8]
000044  f7fffffe          BL       __2sprintf
;;;991    	strncat(str,"/",1);
000048  2201              MOVS     r2,#1
00004a  a1fc              ADR      r1,|L9.1084|
00004c  4668              MOV      r0,sp
00004e  f7fffffe          BL       strncat
;;;992    	currCharNum =strlen(str);
000052  4668              MOV      r0,sp
000054  f7fffffe          BL       strlen
000058  fa1ffa80          UXTH     r10,r0
;;;993    	cmd_flag=strncmp(buf,str,strlen(str));
00005c  4668              MOV      r0,sp
00005e  f7fffffe          BL       strlen
000062  4602              MOV      r2,r0
000064  4669              MOV      r1,sp
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       strncmp
;;;994    	//testflag = cmd_flag;
;;;995    	if(0!=cmd_flag)
00006c  2800              CMP      r0,#0
00006e  d1e0              BNE      |L9.50|
;;;996    	{
;;;997    		return SetErr_ACK(buf, addr ,CMD_ERR);
;;;998    		
;;;999    	}
;;;1000   	for (j=0;j<CmdNumb;j++)
;;;1001       {
;;;1002   		templen = strlen(CmdStr[j]);
000070  f8dfb3cc          LDR      r11,|L9.1088|
000074  4680              MOV      r8,r0                 ;1000
;;;1003   		cmd_flag=strncmp(&buf[currCharNum],CmdStr[j],templen);
000076  eb04090a          ADD      r9,r4,r10
                  |L9.122|
00007a  eb0801c8          ADD      r1,r8,r8,LSL #3       ;1002
00007e  eb01000b          ADD      r0,r1,r11             ;1002
000082  4606              MOV      r6,r0                 ;1002
000084  f7fffffe          BL       strlen
000088  b2c5              UXTB     r5,r0                 ;1002
00008a  4631              MOV      r1,r6                 ;1002
00008c  4648              MOV      r0,r9                 ;1002
00008e  462a              MOV      r2,r5
000090  f7fffffe          BL       strncmp
;;;1004   	    if(0==cmd_flag)
000094  b138              CBZ      r0,|L9.166|
000096  f1080001          ADD      r0,r8,#1              ;1000
00009a  f00008ff          AND      r8,r0,#0xff           ;1000
00009e  f1b80f13          CMP      r8,#0x13              ;1000
0000a2  d3ea              BCC      |L9.122|
0000a4  e7c5              B        |L9.50|
                  |L9.166|
;;;1005   	    {
;;;1006   
;;;1007   		  buf[0] = ChrStartS;
0000a6  203e              MOVS     r0,#0x3e
0000a8  7020              STRB     r0,[r4,#0]
;;;1008   		  currCharNum+=templen;
0000aa  eb0a0005          ADD      r0,r10,r5
;;;1009   		  switch(j)
;;;1010             {
;;;1011   			case 0:
;;;1012   				pntlen = 5;    //
;;;1013   				if(buf[currCharNum]=='?')
;;;1014   				{
;;;1015   
;;;1016   					
;;;1017   					sprintf(&buf[currCharNum],"%05d",Para.CVoltage);
;;;1018   					currCharNum+=pntlen;
;;;1019   					
;;;1020   					buf[currCharNum++]=(',');
;;;1021   					sprintf(&buf[currCharNum],"%06d",Para.CLaod_Current);
;;;1022   					currCharNum+=6;
;;;1023   					
;;;1024   					buf[currCharNum++]=(',');
;;;1025   					sprintf(&buf[currCharNum],"%05d",Para.CPOW_Voltage);
;;;1026   					currCharNum+=pntlen;
;;;1027   					
;;;1028   					buf[currCharNum++]=(',');
;;;1029   					sprintf(&buf[currCharNum],"%05d",Para.CCurrent);
;;;1030   					currCharNum+=pntlen;
;;;1031   					
;;;1032   					buf[currCharNum++]=(',');
;;;1033   					sprintf(&buf[currCharNum],"%05d",Para.CR_VLUE);
;;;1034   					currCharNum+=pntlen;
;;;1035   					
;;;1036   					buf[currCharNum++]=(',');
;;;1037   					sprintf(&buf[currCharNum],"%04d",Para.CR1_VLUE);
;;;1038   					currCharNum+=4;
;;;1039   					
;;;1040   					buf[currCharNum++]=(',');
;;;1041   					sprintf(&buf[currCharNum],"%04d",Para.CR2_VLUE);
;;;1042   					currCharNum+=4;
;;;1043   
;;;1044   					buf[currCharNum++]=(',');
;;;1045   					sprintf(&buf[currCharNum],"%06d",(int)(max_discahrgeNum*1000));
;;;1046   					currCharNum+=6;
;;;1047   					
;;;1048   					buf[currCharNum++]=(',');
;;;1049   					sprintf(&buf[currCharNum],"%03d",shorttime);
;;;1050   					currCharNum+=3;
;;;1051   					
;;;1052   					buf[currCharNum++]=(',');
;;;1053   					sprintf(&buf[currCharNum],"%1d",mainswitch);
0000ae  f8dfb390          LDR      r11,|L9.1088|
0000b2  b285              UXTH     r5,r0                 ;1008
;;;1054   					currCharNum+=1;
;;;1055   					
;;;1056   					buf[currCharNum++]=(',');
;;;1057   					sprintf(&buf[currCharNum],"%1d",finishflag);
;;;1058   					currCharNum+=1;
;;;1059   					
;;;1060   					buf[currCharNum++]=(',');
;;;1061   					sprintf(&buf[currCharNum],"%1d",lockflag);
;;;1062   					currCharNum+=1;
;;;1063   					
;;;1064   					buf[currCharNum++]=(',');
;;;1065   					sprintf(&buf[currCharNum],"%2d",version);
;;;1066   					currCharNum+=2;
;;;1067   					
;;;1068   					buf[currCharNum++]=(',');
;;;1069   					sprintf(&buf[currCharNum],"%03d",Temperature);
;;;1070   					currCharNum+=3;
;;;1071   //					buf[currCharNum++]=(',');
;;;1072   //					sprintf(&buf[currCharNum],"%d",H_L);
;;;1073   //					currCharNum++;
;;;1074   					
;;;1075   //					buf[currCharNum++]=(',');
;;;1076   //					sprintf(&buf[currCharNum],"%d",LM_S);
;;;1077   //					currCharNum++;
;;;1078   					
;;;1079   //					buf[currCharNum++]=(',');
;;;1080   //					sprintf(&buf[currCharNum],"%02d",(int)temperature);
;;;1081   //					currCharNum+=2;
;;;1082   					
;;;1083   				  buf[currCharNum++ ] = ChrEndR;
;;;1084   				  buf[currCharNum++ ] = ChrEndS;
;;;1085   				}
;;;1086   				else
;;;1087   				{
;;;1088   					return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1089   				}
;;;1090   				break;
;;;1091   			case 1:
;;;1092   				pntlen = 1;
;;;1093   				if(buf[currCharNum]=='?')
;;;1094   				{
;;;1095   					  sprintf(&buf[currCharNum],"%1d",MODE);
;;;1096   				    currCharNum+=pntlen;
;;;1097   				    buf[currCharNum ++] = ChrEndS;
;;;1098   					
;;;1099   				}
;;;1100   				else
;;;1101   				{
;;;1102   					pntlen = 1;				
;;;1103   					for(i=0,temp1=0;i<pntlen;i++)
;;;1104   					{
;;;1105   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1106   					}		                   
;;;1107   //					if(temp1>1)
;;;1108   //					{
;;;1109   //						return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1110   //					}
;;;1111   					MODE=temp1;
;;;1112   //					Off_GPOI_ResetSet();
;;;1113   					OnOff_GPOI_ResetSet( 2, 0 );
;;;1114   					mainswitch = 0;
;;;1115   					sendwait = 3;
;;;1116   					MODE_PARASET(MODE);
;;;1117   	//				Change_LM_Val(LM_S_Vale);
;;;1118   					buf[currCharNum++] = ChrEndR;
;;;1119   				}
;;;1120   				break;
;;;1121   				case 2:
;;;1122   				pntlen = 1;
;;;1123   				if(buf[currCharNum]=='?')
;;;1124   				{
;;;1125   					sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
0000b4  49e3              LDR      r1,|L9.1092|
0000b6  f8df9390          LDR      r9,|L9.1096|
0000ba  4640              MOV      r0,r8                 ;1009
0000bc  f04f0a0a          MOV      r10,#0xa              ;985
0000c0  f1ab0b38          SUB      r11,r11,#0x38         ;1053
0000c4  f06f062f          MVN      r6,#0x2f              ;1105
0000c8  f1b80f04          CMP      r8,#4                 ;1009
0000cc  d07c              BEQ      |L9.456|
0000ce  dc0d              BGT      |L9.236|
0000d0  b350              CBZ      r0,|L9.296|
0000d2  2801              CMP      r0,#1                 ;1009
0000d4  d079              BEQ      |L9.458|
0000d6  2802              CMP      r0,#2                 ;1009
0000d8  d078              BEQ      |L9.460|
0000da  f1b80f03          CMP      r8,#3                 ;1009
0000de  d1a8              BNE      |L9.50|
;;;1126   				    currCharNum+=pntlen;
;;;1127   				    buf[currCharNum ++] = ChrEndS;
;;;1128   					
;;;1129   				}
;;;1130   				else
;;;1131   				{
;;;1132   					pntlen = 1;				
;;;1133   					for(i=0,temp1=0;i<pntlen;i++)
;;;1134   					{
;;;1135   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1136   					}		                   
;;;1137   					if(temp1>1)
;;;1138   					{
;;;1139   						return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1140   					}
;;;1141   //					MODE=temp1;
;;;1142   					
;;;1143   					
;;;1144   					mainswitch = temp1;
;;;1145   //						Para.CSET_Voltage = 5000;
;;;1146   //						Para.CSET_Current = 1000;
;;;1147   					
;;;1148   						
;;;1149   					MODE_ONOFF(mainswitch);
;;;1150   	//				Change_LM_Val(LM_S_Vale);
;;;1151   					buf[currCharNum++] = ChrEndR;
;;;1152   		        }
;;;1153   				break;
;;;1154   				case 3:
;;;1155   				pntlen = 1;
;;;1156   				if(buf[currCharNum]=='?')
0000e0  5d60              LDRB     r0,[r4,r5]
0000e2  283f              CMP      r0,#0x3f
0000e4  d073              BEQ      |L9.462|
;;;1157   				{
;;;1158   					  sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1159   				    currCharNum+=pntlen;
;;;1160   				    buf[currCharNum ++] = ChrEndS;
;;;1161   					
;;;1162   				}
;;;1163   				else
;;;1164   				{
;;;1165   					if(currCharNum == 0x0b)
0000e6  2d0b              CMP      r5,#0xb
0000e8  d072              BEQ      |L9.464|
0000ea  e132              B        |L9.850|
                  |L9.236|
0000ec  280c              CMP      r0,#0xc               ;1009
0000ee  d070              BEQ      |L9.466|
0000f0  280d              CMP      r0,#0xd               ;1009
0000f2  d06f              BEQ      |L9.468|
0000f4  280e              CMP      r0,#0xe               ;1009
0000f6  d06e              BEQ      |L9.470|
0000f8  f1b80f12          CMP      r8,#0x12              ;1009
0000fc  d199              BNE      |L9.50|
;;;1166   					{						
;;;1167   						for(i=0,temp1=0;i<5;i++)
;;;1168   						{
;;;1169   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1170   						}
;;;1171   					}		
;;;1172   					Para.IR_Start_C = temp1;//起始电流
;;;1173   					temp1 = 0;
;;;1174   					
;;;1175   					if(buf[currCharNum++] == ',')
;;;1176   					{
;;;1177   						for(i=0,temp1=0;i<5;i++)
;;;1178   						{
;;;1179   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1180   						}
;;;1181   					}	
;;;1182   					Para.IR_Step_C = temp1;//步进电流
;;;1183   					temp1 = 0;
;;;1184   					 
;;;1185   					if(buf[currCharNum++] == ',')
;;;1186   					{
;;;1187   						for(i=0,temp1=0;i<5;i++)
;;;1188   						{
;;;1189   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1190   						}
;;;1191   					}	
;;;1192   					Para.IR_Threshold_V = temp1;//门槛电压
;;;1193   					temp1 = 0;
;;;1194   					
;;;1195   					if(buf[currCharNum++] == ',')
;;;1196   					{
;;;1197   						for(i=0,temp1=0;i<3;i++)
;;;1198   						{
;;;1199   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1200   						}
;;;1201   					}	
;;;1202   					Para.IR_Step_Time = temp1;//步进时间
;;;1203   					temp1 = 0;
;;;1204   					
;;;1205   					if(buf[currCharNum++] == ',')
;;;1206   					{
;;;1207   						for(i=0,temp1=0;i<5;i++)
;;;1208   						{
;;;1209   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1210   						}
;;;1211   					}	
;;;1212   					Para.POWER_OutPut_V = temp1;//电源电压
;;;1213   					temp1 = 0;
;;;1214   					
;;;1215   					if(buf[currCharNum++] == ',')
;;;1216   					{
;;;1217   						for(i=0,temp1=0;i<5;i++)
;;;1218   						{
;;;1219   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1220   						}
;;;1221   					}	
;;;1222   					Para.POWER_Limit_C = temp1;//电源电流
;;;1223   					temp1 = 0;
;;;1224   					
;;;1225   					if(buf[currCharNum++] == ',')
;;;1226   					{
;;;1227   						for(i=0,temp1=0;i<5;i++)
;;;1228   						{
;;;1229   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1230   						}
;;;1231   					}	
;;;1232   					Para.POWER_Cutoff_C = temp1;//设置充电截止电流
;;;1233   					temp1 = 0;
;;;1234   					
;;;1235   					if(buf[currCharNum++] == ',')
;;;1236   					{
;;;1237   						for(i=0,temp1=0;i<5;i++)
;;;1238   						{
;;;1239   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1240   						}
;;;1241   					}	
;;;1242   					Para.LOAD_V = temp1;//负载电压
;;;1243   					temp1 = 0;
;;;1244   					
;;;1245   					if(buf[currCharNum++] == ',')
;;;1246   					{
;;;1247   						for(i=0,temp1=0;i<5;i++)
;;;1248   						{
;;;1249   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1250   						}
;;;1251   					}	
;;;1252   					Para.LOAD_C = temp1;//负载电流
;;;1253   					temp1 = 0;
;;;1254   					
;;;1255   					if(buf[currCharNum++] == ',')
;;;1256   					{
;;;1257   						for(i=0,temp1=0;i<5;i++)
;;;1258   						{
;;;1259   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1260   						}
;;;1261   					}	
;;;1262   					Para.LOAD_Cutoff_V = temp1;//设置负载截止电压
;;;1263   					temp1 = 0;
;;;1264   					
;;;1265   					if(buf[currCharNum++] == ',')
;;;1266   					{
;;;1267   						for(i=0,temp1=0;i<5;i++)
;;;1268   						{
;;;1269   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1270   						}
;;;1271   					}	
;;;1272   					Para.CDC_OutPut_V = temp1;//设置容量测试充电电压
;;;1273   					temp1 = 0;
;;;1274   					
;;;1275   					if(buf[currCharNum++] == ',')
;;;1276   					{
;;;1277   						for(i=0,temp1=0;i<5;i++)
;;;1278   						{
;;;1279   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1280   						}
;;;1281   					}	
;;;1282   					Para.CDC_Limit_C = temp1;//设置容量测试充电限制电流
;;;1283   					temp1 = 0;
;;;1284   					
;;;1285   					if(buf[currCharNum++] == ',')
;;;1286   					{
;;;1287   						for(i=0,temp1=0;i<5;i++)
;;;1288   						{
;;;1289   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1290   						}
;;;1291   					}	
;;;1292   					Para.CDC_Ccutoff_V = temp1;//设置容量测试充电截止电压
;;;1293   					temp1 = 0;
;;;1294   					
;;;1295   					if(buf[currCharNum++] == ',')
;;;1296   					{
;;;1297   						for(i=0,temp1=0;i<5;i++)
;;;1298   						{
;;;1299   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1300   						}
;;;1301   					}	
;;;1302   					Para.CDC_Ccutoff_C = temp1;//设置容量测试充电截止电流
;;;1303   					temp1 = 0;
;;;1304   					
;;;1305   					if(buf[currCharNum++] == ',')
;;;1306   					{
;;;1307   						for(i=0,temp1=0;i<5;i++)
;;;1308   						{
;;;1309   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1310   						}
;;;1311   					}	
;;;1312   					Para.CDC_Load_C = temp1;//设置容量测试放电电流
;;;1313   					temp1 = 0;
;;;1314   					
;;;1315   					if(buf[currCharNum++] == ',')
;;;1316   					{
;;;1317   						for(i=0,temp1=0;i<5;i++)
;;;1318   						{
;;;1319   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1320   						}
;;;1321   					}	
;;;1322   					Para.CDC_Dcutoff_V = temp1;//设置容量测试放电截止电压
;;;1323   					temp1 = 0;
;;;1324   					
;;;1325   					if(buf[currCharNum++] == ',')
;;;1326   					{
;;;1327   						for(i=0,temp1=0;i<3;i++)
;;;1328   						{
;;;1329   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1330   						}
;;;1331   					}	
;;;1332   					Para.CDC_Cycle_Time = temp1;//循环次数
;;;1333   					temp1 = 0;
;;;1334   					
;;;1335   					if(buf[currCharNum++] == ',')
;;;1336   					{
;;;1337   						for(i=0,temp1=0;i<3;i++)
;;;1338   						{
;;;1339   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1340   						}
;;;1341   					}	
;;;1342   					if(MODE == 0)
;;;1343   					{
;;;1344   						Para.CLOAD_MODE = temp1;//负载模式
;;;1345   					}
;;;1346   					temp1 = 0;
;;;1347   //					MODE_PARASET(MODE);
;;;1348   					
;;;1349   					if(buf[currCharNum++] == ',')
;;;1350   					{
;;;1351   						for(i=0,temp1=0;i<3;i++)
;;;1352   						{
;;;1353   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1354   						}
;;;1355   					}	
;;;1356   					Rraly = temp1;//内阻档位
;;;1357   					temp1 = 0;
;;;1358   					
;;;1359   					if(buf[currCharNum++] == ',')
;;;1360   					{
;;;1361   						for(i=0,temp1=0;i<3;i++)
;;;1362   						{
;;;1363   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1364   						}
;;;1365   					}	
;;;1366   					Para.ACT_DELAY = temp1;//激活延时
;;;1367   					temp1 = 0;
;;;1368   					
;;;1369   					MODE_PARASET(MODE);
;;;1370   					
;;;1371   					 buf[currCharNum++] = ChrEndR;
;;;1372   		        }
;;;1373   				break;
;;;1374   				case 4:
;;;1375   				pntlen = 1;
;;;1376   				if(buf[currCharNum]=='?')
;;;1377   				{
;;;1378   					  sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1379   				    currCharNum+=pntlen;
;;;1380   				    buf[currCharNum ++] = ChrEndS;
;;;1381   					
;;;1382   				}
;;;1383   				else
;;;1384   				{
;;;1385   					if(currCharNum == 0x0b)
;;;1386   					{						
;;;1387   						for(i=0,temp1=0;i<2;i++)
;;;1388   						{
;;;1389   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1390   						}
;;;1391   					}
;;;1392   					MODE = temp1;//项目
;;;1393   					temp1 = 0;
;;;1394   					
;;;1395   					if(MODE == 0)
;;;1396   					{
;;;1397   						if(buf[currCharNum++] == ',')
;;;1398   						{
;;;1399   							for(i=0,temp1=0;i<5;i++)
;;;1400   							{
;;;1401   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1402   							}
;;;1403   						}	
;;;1404   						
;;;1405   						temp1 = 0;
;;;1406   						
;;;1407   						if(buf[currCharNum++] == ',')
;;;1408   						{
;;;1409   							for(i=0,temp1=0;i<5;i++)
;;;1410   							{
;;;1411   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1412   							}
;;;1413   						}	
;;;1414   						Para.CSET_Current_Laod = temp1;//负载电流
;;;1415   						temp1 = 0;
;;;1416   						
;;;1417   	
;;;1418   						if(Para.CSET_Current_Laod > 20000)
;;;1419   						{
;;;1420   							LOAD_I_SW = 1;
;;;1421   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1422   						}else{
;;;1423   							LOAD_I_SW = 0;
;;;1424   							GPIO_SetBits(GPIOC,GPIO_Pin_11);//电流测量为低档位
;;;1425   						}
;;;1426   						if(buf[currCharNum++] == ',')
;;;1427   						{
;;;1428   							for(i=0,temp1=0;i<1;i++)
;;;1429   							{
;;;1430   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1431   							}
;;;1432   						}
;;;1433   						mainswitch = temp1;//开关
;;;1434   						if(mainswitch == 0)
;;;1435   						{
;;;1436   							LOAD_I_SW = 1;
;;;1437   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1438   						}
;;;1439   					}else if(MODE == 1){
;;;1440   						if(buf[currCharNum++] == ',')
;;;1441   						{
;;;1442   							for(i=0,temp1=0;i<5;i++)
;;;1443   							{
;;;1444   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1445   							}
;;;1446   						}	
;;;1447   						Para.CDC_OutPut_V = temp1;//电源电压
;;;1448   						temp1 = 0;
;;;1449   						
;;;1450   						if(buf[currCharNum++] == ',')
;;;1451   						{
;;;1452   							for(i=0,temp1=0;i<5;i++)
;;;1453   							{
;;;1454   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1455   							}
;;;1456   						}	
;;;1457   						Para.CDC_Limit_C = temp1;//电源电流
;;;1458   						temp1 = 0;
;;;1459   						
;;;1460   						if(buf[currCharNum++] == ',')
;;;1461   						{
;;;1462   							for(i=0,temp1=0;i<1;i++)
;;;1463   							{
;;;1464   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1465   							}
;;;1466   						}
;;;1467   						mainswitch = temp1;//开关
;;;1468   					}else if(MODE == 2){
;;;1469   						LOAD_I_SW = 1;
;;;1470   						GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1471   						if(buf[currCharNum++] == ',')
;;;1472   						{
;;;1473   							for(i=0,temp1=0;i<5;i++)
;;;1474   							{
;;;1475   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1476   							}
;;;1477   						}	
;;;1478   						Para.IR_Start_C = temp1;//起始电流
;;;1479   						temp1 = 0;
;;;1480   						
;;;1481   						if(buf[currCharNum++] == ',')
;;;1482   						{
;;;1483   							for(i=0,temp1=0;i<5;i++)
;;;1484   							{
;;;1485   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1486   							}
;;;1487   						}	
;;;1488   						Para.IR_Step_C = temp1;//步进电流
;;;1489   						temp1 = 0;
;;;1490   						
;;;1491   						if(buf[currCharNum++] == ',')
;;;1492   						{
;;;1493   							for(i=0,temp1=0;i<1;i++)
;;;1494   							{
;;;1495   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1496   							}
;;;1497   						}
;;;1498   						mainswitch = temp1;//开关
;;;1499   						
;;;1500   						if(mainswitch == 1)
;;;1501   						{
;;;1502   							finishflag = 0;
;;;1503   						}
;;;1504   					}else if(MODE == 3){
;;;1505   						if(buf[currCharNum++] == ',')
;;;1506   						{
;;;1507   							for(i=0,temp1=0;i<5;i++)
;;;1508   							{
;;;1509   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1510   							}
;;;1511   						}	
;;;1512   						Para.CDC_OutPut_V = temp1;//电源电压
;;;1513   						temp1 = 0;
;;;1514   						
;;;1515   						
;;;1516   						if(buf[currCharNum++] == ',')
;;;1517   						{
;;;1518   							for(i=0,temp1=0;i<5;i++)
;;;1519   							{
;;;1520   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1521   							}
;;;1522   						}	
;;;1523   						Para.CDC_Limit_C = temp1;//电源电流
;;;1524   						temp1 = 0;
;;;1525   						
;;;1526   						if(buf[currCharNum++] == ',')
;;;1527   						{
;;;1528   							for(i=0,temp1=0;i<1;i++)
;;;1529   							{
;;;1530   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1531   							}
;;;1532   						}
;;;1533   						mainswitch = temp1;//开关
;;;1534   						
;;;1535   						
;;;1536   					}else if(MODE == 4){
;;;1537   						if(buf[currCharNum++] == ',')
;;;1538   						{
;;;1539   							for(i=0,temp1=0;i<5;i++)
;;;1540   							{
;;;1541   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1542   							}
;;;1543   						}	
;;;1544   						
;;;1545   						temp1 = 0;
;;;1546   						
;;;1547   						if(buf[currCharNum++] == ',')
;;;1548   						{
;;;1549   							for(i=0,temp1=0;i<5;i++)
;;;1550   							{
;;;1551   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1552   							}
;;;1553   						}	
;;;1554   						Para.CSET_Current_Laod = temp1;//负载电流
;;;1555   						temp1 = 0;
;;;1556   						
;;;1557   	
;;;1558   						if(Para.CSET_Current_Laod > 20000)
;;;1559   						{
;;;1560   							LOAD_I_SW = 1;
;;;1561   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1562   						}else{
;;;1563   							LOAD_I_SW = 0;
;;;1564   							GPIO_SetBits(GPIOC,GPIO_Pin_11);//电流测量为低档位
;;;1565   						}
;;;1566   						if(buf[currCharNum++] == ',')
;;;1567   						{
;;;1568   							for(i=0,temp1=0;i<1;i++)
;;;1569   							{
;;;1570   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1571   							}
;;;1572   						}
;;;1573   						mainswitch = temp1;//开关
;;;1574   						if(mainswitch == 0)
;;;1575   						{
;;;1576   							LOAD_I_SW = 1;
;;;1577   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1578   						}
;;;1579   					}else if(MODE == 5){
;;;1580   						if(buf[currCharNum++] == ',')
;;;1581   						{
;;;1582   							for(i=0,temp1=0;i<5;i++)
;;;1583   							{
;;;1584   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1585   							}
;;;1586   						}	
;;;1587   						temp1 = 0;
;;;1588   						
;;;1589   						if(buf[currCharNum++] == ',')
;;;1590   						{
;;;1591   							for(i=0,temp1=0;i<5;i++)
;;;1592   							{
;;;1593   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1594   							}
;;;1595   						}	
;;;1596   						temp1 = 0;
;;;1597   						
;;;1598   						if(buf[currCharNum++] == ',')
;;;1599   						{
;;;1600   							for(i=0,temp1=0;i<1;i++)
;;;1601   							{
;;;1602   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1603   							}
;;;1604   						}
;;;1605   						mainswitch = temp1;//开关
;;;1606   						if(mainswitch == 0)
;;;1607   						{
;;;1608   							mainswitch = 0;
;;;1609   						}
;;;1610   					}else if(MODE == 6){
;;;1611   						if(buf[currCharNum++] == ',')
;;;1612   						{
;;;1613   							for(i=0,temp1=0;i<5;i++)
;;;1614   							{
;;;1615   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1616   							}
;;;1617   						}	
;;;1618   						temp1 = 0;
;;;1619   						
;;;1620   						if(buf[currCharNum++] == ',')
;;;1621   						{
;;;1622   							for(i=0,temp1=0;i<5;i++)
;;;1623   							{
;;;1624   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1625   							}
;;;1626   						}	
;;;1627   						temp1 = 0;
;;;1628   						
;;;1629   						if(buf[currCharNum++] == ',')
;;;1630   						{
;;;1631   							for(i=0,temp1=0;i<1;i++)
;;;1632   							{
;;;1633   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1634   							}
;;;1635   						}
;;;1636   						mainswitch = temp1;//开关
;;;1637   					}
;;;1638   					
;;;1639   					temp1 = 0;
;;;1640   //					MODE_PARASET(MODE);
;;;1641   					Off_GPOI_ResetSet();
;;;1642   					LIST_ONOFF(mainswitch);
;;;1643   					buf[currCharNum++] = ChrEndR;
;;;1644   		        }
;;;1645   				break;
;;;1646   				case 12://电压校准
;;;1647   				{
;;;1648   					pntlen = 8;
;;;1649   					if(buf[currCharNum]=='?')
;;;1650   					{
;;;1651   						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1652   						sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1653   						currCharNum+=pntlen;
;;;1654   						buf[currCharNum++ ] = ChrEndS;
;;;1655   					}
;;;1656   					else
;;;1657   					{
;;;1658   						tmpFg = 1;
;;;1659   						for(i=0;i<pntlen;i++)
;;;1660   						{
;;;1661   						   if(i==0||i==4)
;;;1662   							  continue;
;;;1663   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1664   						   {
;;;1665   							  tmpFg = (tmpFg&0x01);
;;;1666   						   }
;;;1667   						   else
;;;1668   						   {
;;;1669   							  tmpFg = 0;
;;;1670   						   }
;;;1671   						}
;;;1672   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1673   						{
;;;1674   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1675   							
;;;1676   						}
;;;1677   						temp1=0;
;;;1678   						for(i=0;i<pntlen;i++)
;;;1679   						{
;;;1680   						   if(i==0)
;;;1681   						   {
;;;1682   							   fsingal = buf[currCharNum++]-0x30;
;;;1683   							   continue; 
;;;1684   						   } 
;;;1685   						   else if(i==4)
;;;1686   						   {
;;;1687   							   currCharNum++;
;;;1688   							   continue; 
;;;1689   						   }
;;;1690   						   else									 
;;;1691   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1692   						}	
;;;1693   						CalHandle(0,fsingal,temp1);
;;;1694   						
;;;1695   					}
;;;1696   				}break;
;;;1697   				case 13://电流校准
;;;1698   				{
;;;1699   					pntlen = 8;
;;;1700   					if(buf[currCharNum]=='?')
;;;1701   					{
;;;1702   //						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1703   //									sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1704   //						currCharNum+=pntlen;
;;;1705   //						buf[currCharNum++ ] = ChrEndS;
;;;1706   					}
;;;1707   					else
;;;1708   					{
;;;1709   						tmpFg = 1;
;;;1710   						for(i=0;i<pntlen;i++)
;;;1711   						{
;;;1712   						   if(i==0||i==4)
;;;1713   							  continue;
;;;1714   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1715   						   {
;;;1716   							  tmpFg = (tmpFg&0x01);
;;;1717   						   }
;;;1718   						   else
;;;1719   						   {
;;;1720   							  tmpFg = 0;
;;;1721   						   }
;;;1722   						}
;;;1723   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1724   						{
;;;1725   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1726   							
;;;1727   						}
;;;1728   						temp1=0;
;;;1729   						for(i=0;i<pntlen;i++)
;;;1730   						{
;;;1731   						   if(i==0)
;;;1732   						   {
;;;1733   							   fsingal = buf[currCharNum++]-0x30;
;;;1734   							   continue; 
;;;1735   						   } 
;;;1736   						   else if(i==4)
;;;1737   						   {
;;;1738   							   currCharNum++;
;;;1739   							   continue; 
;;;1740   						   }
;;;1741   						   else									 
;;;1742   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1743   						}	
;;;1744   						CalHandle(1,fsingal,temp1);
;;;1745   						
;;;1746   					}
;;;1747   				}break;
;;;1748   				case 14://电阻校准
;;;1749   				{
;;;1750   					pntlen = 6;
;;;1751   					if(buf[currCharNum]=='?')
;;;1752   					{
;;;1753   						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1754   									sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1755   						currCharNum+=pntlen;
;;;1756   						buf[currCharNum++ ] = ChrEndS;
;;;1757   					}
;;;1758   					else
;;;1759   					{
;;;1760   						tmpFg = 1;
;;;1761   						for(i=0;i<pntlen;i++)
;;;1762   						{
;;;1763   						   if(i==0||i==4)
;;;1764   							  continue;
;;;1765   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1766   						   {
;;;1767   							  tmpFg = (tmpFg&0x01);
;;;1768   						   }
;;;1769   						   else
;;;1770   						   {
;;;1771   							  tmpFg = 0;
;;;1772   						   }
;;;1773   						}
;;;1774   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1775   						{
;;;1776   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1777   							
;;;1778   						}
;;;1779   						temp1=0;
;;;1780   						for(i=0;i<pntlen;i++)
;;;1781   						{
;;;1782   						   if(i==0)
;;;1783   						   {
;;;1784   							   fsingal = buf[currCharNum++]-0x30;
;;;1785   							   continue; 
;;;1786   						   } 
;;;1787   //						   else if(i==4)
;;;1788   //						   {
;;;1789   //							   currCharNum++;
;;;1790   //							   continue; 
;;;1791   //						   }
;;;1792   //						   else									 
;;;1793   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1794   						}
;;;1795   						CalHandle(2,fsingal,temp1);
;;;1796   						
;;;1797   					}
;;;1798   				}break;
;;;1799   				case 18:
;;;1800   				{
;;;1801   					if(buf[currCharNum]=='?')
0000fe  5d60              LDRB     r0,[r4,r5]
000100  283f              CMP      r0,#0x3f
000102  d069              BEQ      |L9.472|
;;;1802   					{
;;;1803   //						sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1804   //						currCharNum+=pntlen;
;;;1805   //						buf[currCharNum ++] = ChrEndS;
;;;1806   						
;;;1807   					}
;;;1808   					else
;;;1809   					{
;;;1810   						pntlen = 1;				
000104  2101              MOVS     r1,#1
;;;1811   						for(i=0,temp1=0;i<pntlen;i++)
000106  2000              MOVS     r0,#0
000108  4607              MOV      r7,r0
                  |L9.266|
;;;1812   						{
;;;1813   							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
00010a  5d62              LDRB     r2,[r4,r5]
00010c  eb070387          ADD      r3,r7,r7,LSL #2
000110  eb060343          ADD      r3,r6,r3,LSL #1
000114  1c6d              ADDS     r5,r5,#1
000116  1c40              ADDS     r0,r0,#1
000118  18d7              ADDS     r7,r2,r3
00011a  b2c0              UXTB     r0,r0                 ;1811
00011c  b2ad              UXTH     r5,r5
00011e  4288              CMP      r0,r1                 ;1811
000120  d3f3              BCC      |L9.266|
;;;1814   						}		                   
;;;1815   						if(temp1>1)
000122  2f01              CMP      r7,#1
000124  d87e              BHI      |L9.548|
000126  e3f2              B        |L9.2318|
                  |L9.296|
000128  5d60              LDRB     r0,[r4,r5]            ;1013
00012a  283f              CMP      r0,#0x3f              ;1013
00012c  d181              BNE      |L9.50|
00012e  f8d9202c          LDR      r2,[r9,#0x2c]         ;1017  ; Para
000132  464e              MOV      r6,r9                 ;1017
000134  1960              ADDS     r0,r4,r5              ;1017
000136  a1c5              ADR      r1,|L9.1100|
000138  f7fffffe          BL       __2sprintf
00013c  1d6d              ADDS     r5,r5,#5              ;1017
00013e  b2a8              UXTH     r0,r5                 ;1018
000140  252c              MOVS     r5,#0x2c              ;1020
000142  5425              STRB     r5,[r4,r0]            ;1020
000144  1c40              ADDS     r0,r0,#1              ;1020
000146  6b72              LDR      r2,[r6,#0x34]         ;1021  ; Para
000148  b287              UXTH     r7,r0                 ;1020
00014a  19e0              ADDS     r0,r4,r7              ;1021
00014c  a1c1              ADR      r1,|L9.1108|
00014e  f7fffffe          BL       __2sprintf
000152  1dbf              ADDS     r7,r7,#6              ;1021
000154  b2b8              UXTH     r0,r7                 ;1022
000156  5425              STRB     r5,[r4,r0]            ;1024
000158  1c40              ADDS     r0,r0,#1              ;1024
00015a  6ab2              LDR      r2,[r6,#0x28]         ;1025  ; Para
00015c  b287              UXTH     r7,r0                 ;1024
00015e  19e0              ADDS     r0,r4,r7              ;1025
000160  a1ba              ADR      r1,|L9.1100|
000162  f7fffffe          BL       __2sprintf
000166  1d7f              ADDS     r7,r7,#5              ;1025
000168  b2b8              UXTH     r0,r7                 ;1026
00016a  5425              STRB     r5,[r4,r0]            ;1028
00016c  1c40              ADDS     r0,r0,#1              ;1028
00016e  6b32              LDR      r2,[r6,#0x30]         ;1029  ; Para
000170  b287              UXTH     r7,r0                 ;1028
000172  19e0              ADDS     r0,r4,r7              ;1029
000174  a1b5              ADR      r1,|L9.1100|
000176  f7fffffe          BL       __2sprintf
00017a  1d7f              ADDS     r7,r7,#5              ;1029
00017c  b2b8              UXTH     r0,r7                 ;1030
00017e  5425              STRB     r5,[r4,r0]            ;1032
000180  1c40              ADDS     r0,r0,#1              ;1032
000182  6bb2              LDR      r2,[r6,#0x38]         ;1033  ; Para
000184  b287              UXTH     r7,r0                 ;1032
000186  19e0              ADDS     r0,r4,r7              ;1033
000188  a1b0              ADR      r1,|L9.1100|
00018a  f7fffffe          BL       __2sprintf
00018e  1d7f              ADDS     r7,r7,#5              ;1033
000190  b2b8              UXTH     r0,r7                 ;1034
000192  5425              STRB     r5,[r4,r0]            ;1036
000194  1c40              ADDS     r0,r0,#1              ;1036
000196  6bf2              LDR      r2,[r6,#0x3c]         ;1037  ; Para
000198  b287              UXTH     r7,r0                 ;1036
00019a  19e0              ADDS     r0,r4,r7              ;1037
00019c  a1af              ADR      r1,|L9.1116|
00019e  f7fffffe          BL       __2sprintf
0001a2  1d3f              ADDS     r7,r7,#4              ;1037
0001a4  b2b8              UXTH     r0,r7                 ;1038
0001a6  5425              STRB     r5,[r4,r0]            ;1040
0001a8  1c40              ADDS     r0,r0,#1              ;1040
0001aa  6c32              LDR      r2,[r6,#0x40]         ;1041  ; Para
0001ac  b287              UXTH     r7,r0                 ;1040
0001ae  19e0              ADDS     r0,r4,r7              ;1041
0001b0  a1aa              ADR      r1,|L9.1116|
0001b2  f7fffffe          BL       __2sprintf
0001b6  1d3f              ADDS     r7,r7,#4              ;1041
0001b8  b2b8              UXTH     r0,r7                 ;1042
0001ba  5425              STRB     r5,[r4,r0]            ;1044
0001bc  1c40              ADDS     r0,r0,#1              ;1044
0001be  b286              UXTH     r6,r0                 ;1044
0001c0  48a8              LDR      r0,|L9.1124|
0001c2  ed900a00          VLDR     s0,[r0,#0]            ;1045
0001c6  e008              B        |L9.474|
                  |L9.456|
0001c8  e285              B        |L9.1750|
                  |L9.458|
0001ca  e05e              B        |L9.650|
                  |L9.460|
0001cc  e085              B        |L9.730|
                  |L9.462|
0001ce  e107              B        |L9.992|
                  |L9.464|
0001d0  e0b1              B        |L9.822|
                  |L9.466|
0001d2  e3fd              B        |L9.2512|
                  |L9.468|
0001d4  e3fd              B        |L9.2514|
                  |L9.470|
0001d6  e3fd              B        |L9.2516|
                  |L9.472|
0001d8  e3fd              B        |L9.2518|
                  |L9.474|
0001da  eddf0aa3          VLDR     s1,|L9.1128|
0001de  19a0              ADDS     r0,r4,r6              ;1045
0001e0  a19c              ADR      r1,|L9.1108|
0001e2  ee200a20          VMUL.F32 s0,s0,s1              ;1045
0001e6  eebd0ac0          VCVT.S32.F32 s0,s0                 ;1045
0001ea  ee102a10          VMOV     r2,s0                 ;1045
0001ee  f7fffffe          BL       __2sprintf
0001f2  1db6              ADDS     r6,r6,#6              ;1045
0001f4  b2b0              UXTH     r0,r6                 ;1046
0001f6  499d              LDR      r1,|L9.1132|
0001f8  5425              STRB     r5,[r4,r0]            ;1048
0001fa  1c40              ADDS     r0,r0,#1              ;1048
0001fc  b286              UXTH     r6,r0                 ;1048
0001fe  780a              LDRB     r2,[r1,#0]            ;1049  ; shorttime
000200  19a0              ADDS     r0,r4,r6              ;1049
000202  a19b              ADR      r1,|L9.1136|
000204  f7fffffe          BL       __2sprintf
000208  1cf6              ADDS     r6,r6,#3              ;1049
00020a  b2b0              UXTH     r0,r6                 ;1050
00020c  5425              STRB     r5,[r4,r0]            ;1052
00020e  1c40              ADDS     r0,r0,#1              ;1052
000210  b286              UXTH     r6,r0                 ;1052
000212  f89b2006          LDRB     r2,[r11,#6]           ;1053  ; mainswitch
000216  19a0              ADDS     r0,r4,r6              ;1053
000218  a197              ADR      r1,|L9.1144|
00021a  f7fffffe          BL       __2sprintf
00021e  1c76              ADDS     r6,r6,#1              ;1053
000220  b2b0              UXTH     r0,r6                 ;1054
000222  e000              B        |L9.550|
                  |L9.548|
000224  e06d              B        |L9.770|
                  |L9.550|
000226  5425              STRB     r5,[r4,r0]            ;1056
000228  4994              LDR      r1,|L9.1148|
00022a  1c40              ADDS     r0,r0,#1              ;1056
00022c  b286              UXTH     r6,r0                 ;1056
00022e  780a              LDRB     r2,[r1,#0]            ;1057  ; finishflag
000230  19a0              ADDS     r0,r4,r6              ;1057
000232  a191              ADR      r1,|L9.1144|
000234  f7fffffe          BL       __2sprintf
000238  1c76              ADDS     r6,r6,#1              ;1057
00023a  b2b0              UXTH     r0,r6                 ;1058
00023c  4990              LDR      r1,|L9.1152|
00023e  5425              STRB     r5,[r4,r0]            ;1060
000240  1c40              ADDS     r0,r0,#1              ;1060
000242  b286              UXTH     r6,r0                 ;1060
000244  780a              LDRB     r2,[r1,#0]            ;1061  ; lockflag
000246  19a0              ADDS     r0,r4,r6              ;1061
000248  a18b              ADR      r1,|L9.1144|
00024a  f7fffffe          BL       __2sprintf
00024e  1c76              ADDS     r6,r6,#1              ;1061
000250  b2b0              UXTH     r0,r6                 ;1062
000252  498c              LDR      r1,|L9.1156|
000254  5425              STRB     r5,[r4,r0]            ;1064
000256  1c40              ADDS     r0,r0,#1              ;1064
000258  b286              UXTH     r6,r0                 ;1064
00025a  780a              LDRB     r2,[r1,#0]            ;1065  ; version
00025c  19a0              ADDS     r0,r4,r6              ;1065
00025e  a18a              ADR      r1,|L9.1160|
000260  f7fffffe          BL       __2sprintf
000264  1cb6              ADDS     r6,r6,#2              ;1065
000266  b2b0              UXTH     r0,r6                 ;1066
000268  4988              LDR      r1,|L9.1164|
00026a  5425              STRB     r5,[r4,r0]            ;1068
00026c  1c40              ADDS     r0,r0,#1              ;1068
00026e  b285              UXTH     r5,r0                 ;1068
000270  f9b12000          LDRSH    r2,[r1,#0]            ;1069  ; Temperature
000274  1960              ADDS     r0,r4,r5              ;1069
000276  a17e              ADR      r1,|L9.1136|
000278  f7fffffe          BL       __2sprintf
00027c  1ced              ADDS     r5,r5,#3              ;1069
00027e  b2a8              UXTH     r0,r5                 ;1070
000280  210d              MOVS     r1,#0xd               ;1083
000282  5421              STRB     r1,[r4,r0]            ;1083
000284  1c40              ADDS     r0,r0,#1              ;1083
000286  b280              UXTH     r0,r0                 ;1083
000288  e022              B        |L9.720|
                  |L9.650|
00028a  5d60              LDRB     r0,[r4,r5]            ;1093
00028c  2201              MOVS     r2,#1                 ;1092
00028e  283f              CMP      r0,#0x3f              ;1093
000290  d01a              BEQ      |L9.712|
000292  2000              MOVS     r0,#0                 ;1103
000294  4601              MOV      r1,r0                 ;1103
                  |L9.662|
000296  5d63              LDRB     r3,[r4,r5]            ;1105
000298  eb010181          ADD      r1,r1,r1,LSL #2       ;1105
00029c  1c6d              ADDS     r5,r5,#1              ;1105
00029e  1c40              ADDS     r0,r0,#1              ;1105
0002a0  eb060141          ADD      r1,r6,r1,LSL #1       ;1105
0002a4  b2c0              UXTB     r0,r0                 ;1103
0002a6  4419              ADD      r1,r1,r3              ;1105
0002a8  b2ad              UXTH     r5,r5                 ;1105
0002aa  4290              CMP      r0,r2                 ;1103
0002ac  d3f3              BCC      |L9.662|
0002ae  465e              MOV      r6,r11                ;1111
0002b0  f88b1005          STRB     r1,[r11,#5]           ;1111
0002b4  2100              MOVS     r1,#0                 ;1113
0002b6  2002              MOVS     r0,#2                 ;1113
0002b8  f7fffffe          BL       OnOff_GPOI_ResetSet
0002bc  2000              MOVS     r0,#0                 ;1114
0002be  71b0              STRB     r0,[r6,#6]            ;1114
0002c0  2003              MOVS     r0,#3                 ;1115
0002c2  7230              STRB     r0,[r6,#8]            ;1115
0002c4  7970              LDRB     r0,[r6,#5]            ;1116  ; MODE
0002c6  e203              B        |L9.1744|
                  |L9.712|
0002c8  1960              ADDS     r0,r4,r5              ;1095
0002ca  f89b2005          LDRB     r2,[r11,#5]           ;1095  ; MODE
0002ce  e022              B        |L9.790|
                  |L9.720|
0002d0  f804a000          STRB     r10,[r4,r0]           ;1084
0002d4  1c40              ADDS     r0,r0,#1              ;1084
0002d6  b285              UXTH     r5,r0                 ;1084
0002d8  e37d              B        |L9.2518|
                  |L9.730|
0002da  5d60              LDRB     r0,[r4,r5]            ;1123
0002dc  2201              MOVS     r2,#1                 ;1122
0002de  283f              CMP      r0,#0x3f              ;1123
0002e0  d07e              BEQ      |L9.992|
0002e2  2100              MOVS     r1,#0                 ;1133
0002e4  4608              MOV      r0,r1                 ;1133
                  |L9.742|
0002e6  5d63              LDRB     r3,[r4,r5]            ;1135
0002e8  eb000080          ADD      r0,r0,r0,LSL #2       ;1135
0002ec  1c6d              ADDS     r5,r5,#1              ;1135
0002ee  1c49              ADDS     r1,r1,#1              ;1135
0002f0  eb060040          ADD      r0,r6,r0,LSL #1       ;1135
0002f4  b2c9              UXTB     r1,r1                 ;1133
0002f6  4418              ADD      r0,r0,r3              ;1135
0002f8  b2ad              UXTH     r5,r5                 ;1135
0002fa  4291              CMP      r1,r2                 ;1133
0002fc  d3f3              BCC      |L9.742|
0002fe  2801              CMP      r0,#1                 ;1137
000300  d90e              BLS      |L9.800|
                  |L9.770|
000302  2201              MOVS     r2,#1                 ;1139
                  |L9.772|
;;;1816   						{
;;;1817   							return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1818   						}
;;;1819   	//					MODE=temp1;
;;;1820   						
;;;1821   						bootflag = 1;
;;;1822   						Write_Boot_Flag();
;;;1823   						if(temp1 == 1)
;;;1824   						{
;;;1825   							JumpBoot(55);
;;;1826   						}
;;;1827   					}
;;;1828   				}break;
;;;1829   //				case 15:
;;;1830   //				{
;;;1831   //					pntlen = 1;
;;;1832   //					if(buf[currCharNum]=='?')
;;;1833   //					{
;;;1834   //						sprintf(&buf[currCharNum],"%1d",Gmode_Vale);
;;;1835   //						currCharNum+=pntlen;
;;;1836   //						buf[currCharNum] = ChrEndR;
;;;1837   //						currCharNum++;
;;;1838   //	//				    buf[currCharNum ++] = ChrEndS;
;;;1839   //						
;;;1840   //					}
;;;1841   //					else
;;;1842   //					{
;;;1843   //						tmpFg = 1;
;;;1844   //						for(i=0;i<pntlen;i++)
;;;1845   //						{
;;;1846   //						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1847   //						   {
;;;1848   //							  tmpFg = (tmpFg&0x01);
;;;1849   //						   }
;;;1850   //						   else
;;;1851   //						   {
;;;1852   //							  tmpFg = 0;
;;;1853   //						   }
;;;1854   //						}
;;;1855   //						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1856   //						{
;;;1857   //							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1858   //							
;;;1859   //						}					
;;;1860   //						for(i=0,temp1=0;i<pntlen;i++)
;;;1861   //						{
;;;1862   //							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1863   //						}		                   
;;;1864   //						if(temp1 >Mode_H)
;;;1865   //						 {
;;;1866   //							 return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1867   //							 
;;;1868   //						 }
;;;1869   //						 if(H_L == 1)
;;;1870   //						 {
;;;1871   //							CalHandle(3,1,temp1);
;;;1872   //						 }else{
;;;1873   //							 CalHandle(3,0,temp1);
;;;1874   //						 }
;;;1875   //						 
;;;1876   ////								 Mode=temp1;
;;;1877   ////								Change_MODE_Val(Mode);
;;;1878   ////						 buf[currCharNum++] = ChrEndS;
;;;1879   //					}
;;;1880   //					break;
;;;1881   //				}break;
;;;1882   //				case 16:
;;;1883   //				{
;;;1884   //					pntlen = 3;
;;;1885   //					if(buf[currCharNum]=='?')
;;;1886   //					{
;;;1887   //						sprintf(&buf[currCharNum],"%1d",Gmode_Vale);
;;;1888   //						currCharNum+=pntlen;
;;;1889   //						buf[currCharNum] = ChrEndR;
;;;1890   //						currCharNum++;
;;;1891   //	//				    buf[currCharNum ++] = ChrEndS;
;;;1892   //						
;;;1893   //					}
;;;1894   //					else
;;;1895   //					{
;;;1896   //						tmpFg = 1;
;;;1897   //						for(i=0;i<pntlen;i++)
;;;1898   //						{
;;;1899   //						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1900   //						   {
;;;1901   //							  tmpFg = (tmpFg&0x01);
;;;1902   //						   }
;;;1903   //						   else
;;;1904   //						   {
;;;1905   //							  tmpFg = 0;
;;;1906   //						   }
;;;1907   //						}
;;;1908   //						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1909   //						{
;;;1910   //							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1911   //							
;;;1912   //						}					
;;;1913   //						for(i=0,temp1=0;i<pntlen;i++)
;;;1914   //						{
;;;1915   //							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1916   //						}		                   
;;;1917   //						 overflag = temp1;
;;;1918   //						 
;;;1919   ////								 Mode=temp1;
;;;1920   ////								Change_MODE_Val(Mode);
;;;1921   ////						 buf[currCharNum++] = ChrEndS;
;;;1922   //					}
;;;1923   //					break;
;;;1924   //				}break;
;;;1925   //				case 17:
;;;1926   //				{
;;;1927   //					pntlen = 2;
;;;1928   //					if(buf[currCharNum]=='?')
;;;1929   //					{
;;;1930   ////						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1931   //									sprintf(&buf[currCharNum],"%02d",(int)temperature);
;;;1932   //						currCharNum+=pntlen;
;;;1933   //						buf[currCharNum++ ] = ChrEndR;
;;;1934   //						buf[currCharNum++ ] = ChrEndS;
;;;1935   //					}
;;;1936   //				}break;
;;;1937   			default:    //ERR
;;;1938              		 return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1939   	 			  
;;;1940   		  }
;;;1941   		  break;
;;;1942   		}
;;;1943   		
;;;1944   	}
;;;1945   	if(j>=CmdNumb)
;;;1946   	{
;;;1947   		return SetErr_ACK(buf, addr ,CMD_ERR);			  
000304  4620              MOV      r0,r4
000306  9932              LDR      r1,[sp,#0xc8]
000308  f7fffffe          BL       SetErr_ACK
;;;1948   	}
;;;1949   	return currCharNum+1;
;;;1950   }
00030c  b033              ADD      sp,sp,#0xcc
00030e  ecbd8b02          VPOP     {d8}
000312  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.790|
000316  a158              ADR      r1,|L9.1144|
000318  f7fffffe          BL       __2sprintf
00031c  1c6d              ADDS     r5,r5,#1              ;1095
00031e  e3f4              B        |L9.2826|
                  |L9.800|
000320  f88b0006          STRB     r0,[r11,#6]           ;1144
000324  f89b0006          LDRB     r0,[r11,#6]           ;1149  ; mainswitch
000328  f7fffffe          BL       MODE_ONOFF
                  |L9.812|
00032c  200d              MOVS     r0,#0xd               ;1118
00032e  5560              STRB     r0,[r4,r5]            ;1118
000330  1c6d              ADDS     r5,r5,#1              ;1118
000332  b2ad              UXTH     r5,r5                 ;1118
000334  e34f              B        |L9.2518|
                  |L9.822|
000336  2000              MOVS     r0,#0                 ;1167
000338  4607              MOV      r7,r0                 ;1167
                  |L9.826|
00033a  5d61              LDRB     r1,[r4,r5]            ;1169
00033c  eb070287          ADD      r2,r7,r7,LSL #2       ;1169
000340  eb060242          ADD      r2,r6,r2,LSL #1       ;1169
000344  1c6d              ADDS     r5,r5,#1              ;1169
000346  1c40              ADDS     r0,r0,#1              ;1169
000348  188f              ADDS     r7,r1,r2              ;1169
00034a  b2c0              UXTB     r0,r0                 ;1167
00034c  b2ad              UXTH     r5,r5                 ;1169
00034e  2805              CMP      r0,#5                 ;1167
000350  d3f3              BCC      |L9.826|
                  |L9.850|
000352  4649              MOV      r1,r9                 ;1172
000354  f8c97044          STR      r7,[r9,#0x44]         ;1172  ; Para
000358  5d62              LDRB     r2,[r4,r5]            ;1175
00035a  1c6d              ADDS     r5,r5,#1              ;1175
00035c  2300              MOVS     r3,#0                 ;1173
00035e  b2a8              UXTH     r0,r5                 ;1175
000360  2a2c              CMP      r2,#0x2c              ;1175
000362  d10c              BNE      |L9.894|
000364  2200              MOVS     r2,#0                 ;1177
                  |L9.870|
000366  5c25              LDRB     r5,[r4,r0]            ;1179
000368  eb030383          ADD      r3,r3,r3,LSL #2       ;1179
00036c  1c40              ADDS     r0,r0,#1              ;1179
00036e  1c52              ADDS     r2,r2,#1              ;1179
000370  eb060343          ADD      r3,r6,r3,LSL #1       ;1179
000374  b2d2              UXTB     r2,r2                 ;1177
000376  442b              ADD      r3,r3,r5              ;1179
000378  b280              UXTH     r0,r0                 ;1179
00037a  2a05              CMP      r2,#5                 ;1177
00037c  d3f3              BCC      |L9.870|
                  |L9.894|
00037e  f8a13048          STRH     r3,[r1,#0x48]         ;1182
000382  5c22              LDRB     r2,[r4,r0]            ;1185
000384  1c40              ADDS     r0,r0,#1              ;1185
000386  2300              MOVS     r3,#0                 ;1183
000388  b280              UXTH     r0,r0                 ;1185
00038a  2a2c              CMP      r2,#0x2c              ;1185
00038c  d10c              BNE      |L9.936|
00038e  2200              MOVS     r2,#0                 ;1187
                  |L9.912|
000390  5c25              LDRB     r5,[r4,r0]            ;1189
000392  eb030383          ADD      r3,r3,r3,LSL #2       ;1189
000396  1c40              ADDS     r0,r0,#1              ;1189
000398  1c52              ADDS     r2,r2,#1              ;1189
00039a  eb060343          ADD      r3,r6,r3,LSL #1       ;1189
00039e  b2d2              UXTB     r2,r2                 ;1187
0003a0  442b              ADD      r3,r3,r5              ;1189
0003a2  b280              UXTH     r0,r0                 ;1189
0003a4  2a05              CMP      r2,#5                 ;1187
0003a6  d3f3              BCC      |L9.912|
                  |L9.936|
0003a8  64cb              STR      r3,[r1,#0x4c]         ;1192  ; Para
0003aa  5c22              LDRB     r2,[r4,r0]            ;1195
0003ac  1c40              ADDS     r0,r0,#1              ;1195
0003ae  2300              MOVS     r3,#0                 ;1193
0003b0  b280              UXTH     r0,r0                 ;1195
0003b2  2a2c              CMP      r2,#0x2c              ;1195
0003b4  d10c              BNE      |L9.976|
0003b6  2200              MOVS     r2,#0                 ;1197
                  |L9.952|
0003b8  5c25              LDRB     r5,[r4,r0]            ;1199
0003ba  eb030383          ADD      r3,r3,r3,LSL #2       ;1199
0003be  1c40              ADDS     r0,r0,#1              ;1199
0003c0  1c52              ADDS     r2,r2,#1              ;1199
0003c2  eb060343          ADD      r3,r6,r3,LSL #1       ;1199
0003c6  b2d2              UXTB     r2,r2                 ;1197
0003c8  442b              ADD      r3,r3,r5              ;1199
0003ca  b280              UXTH     r0,r0                 ;1199
0003cc  2a03              CMP      r2,#3                 ;1197
0003ce  d3f3              BCC      |L9.952|
                  |L9.976|
0003d0  f8a13050          STRH     r3,[r1,#0x50]         ;1202
0003d4  5c22              LDRB     r2,[r4,r0]            ;1205
0003d6  1c40              ADDS     r0,r0,#1              ;1205
0003d8  2300              MOVS     r3,#0                 ;1203
0003da  b280              UXTH     r0,r0                 ;1205
0003dc  2a2c              CMP      r2,#0x2c              ;1205
0003de  e000              B        |L9.994|
                  |L9.992|
0003e0  e17f              B        |L9.1762|
                  |L9.994|
0003e2  d10c              BNE      |L9.1022|
0003e4  2200              MOVS     r2,#0                 ;1207
                  |L9.998|
0003e6  5c25              LDRB     r5,[r4,r0]            ;1209
0003e8  eb030383          ADD      r3,r3,r3,LSL #2       ;1209
0003ec  1c40              ADDS     r0,r0,#1              ;1209
0003ee  1c52              ADDS     r2,r2,#1              ;1209
0003f0  eb060343          ADD      r3,r6,r3,LSL #1       ;1209
0003f4  b2d2              UXTB     r2,r2                 ;1207
0003f6  442b              ADD      r3,r3,r5              ;1209
0003f8  b280              UXTH     r0,r0                 ;1209
0003fa  2a05              CMP      r2,#5                 ;1207
0003fc  d3f3              BCC      |L9.998|
                  |L9.1022|
0003fe  f8a13054          STRH     r3,[r1,#0x54]         ;1212
000402  5c22              LDRB     r2,[r4,r0]            ;1215
000404  1c40              ADDS     r0,r0,#1              ;1215
000406  2300              MOVS     r3,#0                 ;1213
000408  b280              UXTH     r0,r0                 ;1215
00040a  2a2c              CMP      r2,#0x2c              ;1215
00040c  d10c              BNE      |L9.1064|
00040e  2200              MOVS     r2,#0                 ;1217
                  |L9.1040|
000410  5c25              LDRB     r5,[r4,r0]            ;1219
000412  eb030383          ADD      r3,r3,r3,LSL #2       ;1219
000416  1c40              ADDS     r0,r0,#1              ;1219
000418  1c52              ADDS     r2,r2,#1              ;1219
00041a  eb060343          ADD      r3,r6,r3,LSL #1       ;1219
00041e  b2d2              UXTB     r2,r2                 ;1217
000420  442b              ADD      r3,r3,r5              ;1219
000422  b280              UXTH     r0,r0                 ;1219
000424  2a05              CMP      r2,#5                 ;1217
000426  d3f3              BCC      |L9.1040|
                  |L9.1064|
000428  f8a13056          STRH     r3,[r1,#0x56]         ;1222
00042c  5c22              LDRB     r2,[r4,r0]            ;1225
00042e  1c40              ADDS     r0,r0,#1              ;1225
000430  2300              MOVS     r3,#0                 ;1223
000432  b280              UXTH     r0,r0                 ;1225
000434  2a2c              CMP      r2,#0x2c              ;1225
000436  e02b              B        |L9.1168|
                  |L9.1080|
000438  256400            DCB      "%d",0
00043b  00                DCB      0
                  |L9.1084|
00043c  2f00              DCB      "/",0
00043e  00                DCB      0
00043f  00                DCB      0
                  |L9.1088|
                          DCD      ||.data||+0x38
                  |L9.1092|
                          DCD      C_DISCHARGE
                  |L9.1096|
                          DCD      Para
                  |L9.1100|
00044c  25303564          DCB      "%05d",0
000450  00      
000451  00                DCB      0
000452  00                DCB      0
000453  00                DCB      0
                  |L9.1108|
000454  25303664          DCB      "%06d",0
000458  00      
000459  00                DCB      0
00045a  00                DCB      0
00045b  00                DCB      0
                  |L9.1116|
00045c  25303464          DCB      "%04d",0
000460  00      
000461  00                DCB      0
000462  00                DCB      0
000463  00                DCB      0
                  |L9.1124|
                          DCD      max_discahrgeNum
                  |L9.1128|
000468  447a0000          DCFS     0x447a0000 ; 1000
                  |L9.1132|
                          DCD      shorttime
                  |L9.1136|
000470  25303364          DCB      "%03d",0
000474  00      
000475  00                DCB      0
000476  00                DCB      0
000477  00                DCB      0
                  |L9.1144|
000478  25316400          DCB      "%1d",0
                  |L9.1148|
                          DCD      finishflag
                  |L9.1152|
                          DCD      lockflag
                  |L9.1156|
                          DCD      version
                  |L9.1160|
000488  25326400          DCB      "%2d",0
                  |L9.1164|
                          DCD      Temperature
                  |L9.1168|
000490  d10c              BNE      |L9.1196|
000492  2200              MOVS     r2,#0                 ;1227
                  |L9.1172|
000494  5c25              LDRB     r5,[r4,r0]            ;1229
000496  eb030383          ADD      r3,r3,r3,LSL #2       ;1229
00049a  1c40              ADDS     r0,r0,#1              ;1229
00049c  1c52              ADDS     r2,r2,#1              ;1229
00049e  eb060343          ADD      r3,r6,r3,LSL #1       ;1229
0004a2  b2d2              UXTB     r2,r2                 ;1227
0004a4  442b              ADD      r3,r3,r5              ;1229
0004a6  b280              UXTH     r0,r0                 ;1229
0004a8  2a05              CMP      r2,#5                 ;1227
0004aa  d3f3              BCC      |L9.1172|
                  |L9.1196|
0004ac  f8a13058          STRH     r3,[r1,#0x58]         ;1232
0004b0  5c22              LDRB     r2,[r4,r0]            ;1235
0004b2  1c40              ADDS     r0,r0,#1              ;1235
0004b4  2300              MOVS     r3,#0                 ;1233
0004b6  b280              UXTH     r0,r0                 ;1235
0004b8  2a2c              CMP      r2,#0x2c              ;1235
0004ba  d10c              BNE      |L9.1238|
0004bc  2200              MOVS     r2,#0                 ;1237
                  |L9.1214|
0004be  5c25              LDRB     r5,[r4,r0]            ;1239
0004c0  eb030383          ADD      r3,r3,r3,LSL #2       ;1239
0004c4  1c40              ADDS     r0,r0,#1              ;1239
0004c6  1c52              ADDS     r2,r2,#1              ;1239
0004c8  eb060343          ADD      r3,r6,r3,LSL #1       ;1239
0004cc  b2d2              UXTB     r2,r2                 ;1237
0004ce  442b              ADD      r3,r3,r5              ;1239
0004d0  b280              UXTH     r0,r0                 ;1239
0004d2  2a05              CMP      r2,#5                 ;1237
0004d4  d3f3              BCC      |L9.1214|
                  |L9.1238|
0004d6  f8a13060          STRH     r3,[r1,#0x60]         ;1242
0004da  5c22              LDRB     r2,[r4,r0]            ;1245
0004dc  1c40              ADDS     r0,r0,#1              ;1245
0004de  2300              MOVS     r3,#0                 ;1243
0004e0  b280              UXTH     r0,r0                 ;1245
0004e2  2a2c              CMP      r2,#0x2c              ;1245
0004e4  d10c              BNE      |L9.1280|
0004e6  2200              MOVS     r2,#0                 ;1247
                  |L9.1256|
0004e8  5c25              LDRB     r5,[r4,r0]            ;1249
0004ea  eb030383          ADD      r3,r3,r3,LSL #2       ;1249
0004ee  1c40              ADDS     r0,r0,#1              ;1249
0004f0  1c52              ADDS     r2,r2,#1              ;1249
0004f2  eb060343          ADD      r3,r6,r3,LSL #1       ;1249
0004f6  b2d2              UXTB     r2,r2                 ;1247
0004f8  442b              ADD      r3,r3,r5              ;1249
0004fa  b280              UXTH     r0,r0                 ;1249
0004fc  2a05              CMP      r2,#5                 ;1247
0004fe  d3f3              BCC      |L9.1256|
                  |L9.1280|
000500  65cb              STR      r3,[r1,#0x5c]         ;1252  ; Para
000502  5c22              LDRB     r2,[r4,r0]            ;1255
000504  1c40              ADDS     r0,r0,#1              ;1255
000506  2300              MOVS     r3,#0                 ;1253
000508  b280              UXTH     r0,r0                 ;1255
00050a  2a2c              CMP      r2,#0x2c              ;1255
00050c  d10c              BNE      |L9.1320|
00050e  2200              MOVS     r2,#0                 ;1257
                  |L9.1296|
000510  5c25              LDRB     r5,[r4,r0]            ;1259
000512  eb030383          ADD      r3,r3,r3,LSL #2       ;1259
000516  1c40              ADDS     r0,r0,#1              ;1259
000518  1c52              ADDS     r2,r2,#1              ;1259
00051a  eb060343          ADD      r3,r6,r3,LSL #1       ;1259
00051e  b2d2              UXTB     r2,r2                 ;1257
000520  442b              ADD      r3,r3,r5              ;1259
000522  b280              UXTH     r0,r0                 ;1259
000524  2a05              CMP      r2,#5                 ;1257
000526  d3f3              BCC      |L9.1296|
                  |L9.1320|
000528  f8a13062          STRH     r3,[r1,#0x62]         ;1262
00052c  5c22              LDRB     r2,[r4,r0]            ;1265
00052e  1c40              ADDS     r0,r0,#1              ;1265
000530  2300              MOVS     r3,#0                 ;1263
000532  b280              UXTH     r0,r0                 ;1265
000534  2a2c              CMP      r2,#0x2c              ;1265
000536  d10c              BNE      |L9.1362|
000538  2200              MOVS     r2,#0                 ;1267
                  |L9.1338|
00053a  5c25              LDRB     r5,[r4,r0]            ;1269
00053c  eb030383          ADD      r3,r3,r3,LSL #2       ;1269
000540  1c40              ADDS     r0,r0,#1              ;1269
000542  1c52              ADDS     r2,r2,#1              ;1269
000544  eb060343          ADD      r3,r6,r3,LSL #1       ;1269
000548  b2d2              UXTB     r2,r2                 ;1267
00054a  442b              ADD      r3,r3,r5              ;1269
00054c  b280              UXTH     r0,r0                 ;1269
00054e  2a05              CMP      r2,#5                 ;1267
000550  d3f3              BCC      |L9.1338|
                  |L9.1362|
000552  f8a13064          STRH     r3,[r1,#0x64]         ;1272
000556  5c22              LDRB     r2,[r4,r0]            ;1275
000558  1c40              ADDS     r0,r0,#1              ;1275
00055a  2300              MOVS     r3,#0                 ;1273
00055c  b280              UXTH     r0,r0                 ;1275
00055e  2a2c              CMP      r2,#0x2c              ;1275
000560  d10c              BNE      |L9.1404|
000562  2200              MOVS     r2,#0                 ;1277
                  |L9.1380|
000564  5c25              LDRB     r5,[r4,r0]            ;1279
000566  eb030383          ADD      r3,r3,r3,LSL #2       ;1279
00056a  1c40              ADDS     r0,r0,#1              ;1279
00056c  1c52              ADDS     r2,r2,#1              ;1279
00056e  eb060343          ADD      r3,r6,r3,LSL #1       ;1279
000572  b2d2              UXTB     r2,r2                 ;1277
000574  442b              ADD      r3,r3,r5              ;1279
000576  b280              UXTH     r0,r0                 ;1279
000578  2a05              CMP      r2,#5                 ;1277
00057a  d3f3              BCC      |L9.1380|
                  |L9.1404|
00057c  f8a13066          STRH     r3,[r1,#0x66]         ;1282
000580  5c22              LDRB     r2,[r4,r0]            ;1285
000582  1c40              ADDS     r0,r0,#1              ;1285
000584  2300              MOVS     r3,#0                 ;1283
000586  b280              UXTH     r0,r0                 ;1285
000588  2a2c              CMP      r2,#0x2c              ;1285
00058a  d10c              BNE      |L9.1446|
00058c  2200              MOVS     r2,#0                 ;1287
                  |L9.1422|
00058e  5c25              LDRB     r5,[r4,r0]            ;1289
000590  eb030383          ADD      r3,r3,r3,LSL #2       ;1289
000594  1c40              ADDS     r0,r0,#1              ;1289
000596  1c52              ADDS     r2,r2,#1              ;1289
000598  eb060343          ADD      r3,r6,r3,LSL #1       ;1289
00059c  b2d2              UXTB     r2,r2                 ;1287
00059e  442b              ADD      r3,r3,r5              ;1289
0005a0  b280              UXTH     r0,r0                 ;1289
0005a2  2a05              CMP      r2,#5                 ;1287
0005a4  d3f3              BCC      |L9.1422|
                  |L9.1446|
0005a6  668b              STR      r3,[r1,#0x68]         ;1292  ; Para
0005a8  5c22              LDRB     r2,[r4,r0]            ;1295
0005aa  1c40              ADDS     r0,r0,#1              ;1295
0005ac  2300              MOVS     r3,#0                 ;1293
0005ae  b280              UXTH     r0,r0                 ;1295
0005b0  2a2c              CMP      r2,#0x2c              ;1295
0005b2  d10c              BNE      |L9.1486|
0005b4  2200              MOVS     r2,#0                 ;1297
                  |L9.1462|
0005b6  5c25              LDRB     r5,[r4,r0]            ;1299
0005b8  eb030383          ADD      r3,r3,r3,LSL #2       ;1299
0005bc  1c40              ADDS     r0,r0,#1              ;1299
0005be  1c52              ADDS     r2,r2,#1              ;1299
0005c0  eb060343          ADD      r3,r6,r3,LSL #1       ;1299
0005c4  b2d2              UXTB     r2,r2                 ;1297
0005c6  442b              ADD      r3,r3,r5              ;1299
0005c8  b280              UXTH     r0,r0                 ;1299
0005ca  2a05              CMP      r2,#5                 ;1297
0005cc  d3f3              BCC      |L9.1462|
                  |L9.1486|
0005ce  f8a1306c          STRH     r3,[r1,#0x6c]         ;1302
0005d2  5c22              LDRB     r2,[r4,r0]            ;1305
0005d4  1c40              ADDS     r0,r0,#1              ;1305
0005d6  2300              MOVS     r3,#0                 ;1303
0005d8  b280              UXTH     r0,r0                 ;1305
0005da  2a2c              CMP      r2,#0x2c              ;1305
0005dc  d10c              BNE      |L9.1528|
0005de  2200              MOVS     r2,#0                 ;1307
                  |L9.1504|
0005e0  5c25              LDRB     r5,[r4,r0]            ;1309
0005e2  eb030383          ADD      r3,r3,r3,LSL #2       ;1309
0005e6  1c40              ADDS     r0,r0,#1              ;1309
0005e8  1c52              ADDS     r2,r2,#1              ;1309
0005ea  eb060343          ADD      r3,r6,r3,LSL #1       ;1309
0005ee  b2d2              UXTB     r2,r2                 ;1307
0005f0  442b              ADD      r3,r3,r5              ;1309
0005f2  b280              UXTH     r0,r0                 ;1309
0005f4  2a05              CMP      r2,#5                 ;1307
0005f6  d3f3              BCC      |L9.1504|
                  |L9.1528|
0005f8  670b              STR      r3,[r1,#0x70]         ;1312  ; Para
0005fa  5c22              LDRB     r2,[r4,r0]            ;1315
0005fc  1c40              ADDS     r0,r0,#1              ;1315
0005fe  2300              MOVS     r3,#0                 ;1313
000600  b280              UXTH     r0,r0                 ;1315
000602  2a2c              CMP      r2,#0x2c              ;1315
000604  d10c              BNE      |L9.1568|
000606  2200              MOVS     r2,#0                 ;1317
                  |L9.1544|
000608  5c25              LDRB     r5,[r4,r0]            ;1319
00060a  eb030383          ADD      r3,r3,r3,LSL #2       ;1319
00060e  1c40              ADDS     r0,r0,#1              ;1319
000610  1c52              ADDS     r2,r2,#1              ;1319
000612  eb060343          ADD      r3,r6,r3,LSL #1       ;1319
000616  b2d2              UXTB     r2,r2                 ;1317
000618  442b              ADD      r3,r3,r5              ;1319
00061a  b280              UXTH     r0,r0                 ;1319
00061c  2a05              CMP      r2,#5                 ;1317
00061e  d3f3              BCC      |L9.1544|
                  |L9.1568|
000620  674b              STR      r3,[r1,#0x74]         ;1322  ; Para
000622  5c22              LDRB     r2,[r4,r0]            ;1325
000624  1c40              ADDS     r0,r0,#1              ;1325
000626  2300              MOVS     r3,#0                 ;1323
000628  b280              UXTH     r0,r0                 ;1325
00062a  2a2c              CMP      r2,#0x2c              ;1325
00062c  d10c              BNE      |L9.1608|
00062e  2200              MOVS     r2,#0                 ;1327
                  |L9.1584|
000630  5c25              LDRB     r5,[r4,r0]            ;1329
000632  eb030383          ADD      r3,r3,r3,LSL #2       ;1329
000636  1c40              ADDS     r0,r0,#1              ;1329
000638  1c52              ADDS     r2,r2,#1              ;1329
00063a  eb060343          ADD      r3,r6,r3,LSL #1       ;1329
00063e  b2d2              UXTB     r2,r2                 ;1327
000640  442b              ADD      r3,r3,r5              ;1329
000642  b280              UXTH     r0,r0                 ;1329
000644  2a03              CMP      r2,#3                 ;1327
000646  d3f3              BCC      |L9.1584|
                  |L9.1608|
000648  f8813078          STRB     r3,[r1,#0x78]         ;1332
00064c  5c22              LDRB     r2,[r4,r0]            ;1335
00064e  1c40              ADDS     r0,r0,#1              ;1335
000650  2300              MOVS     r3,#0                 ;1333
000652  b280              UXTH     r0,r0                 ;1335
000654  2a2c              CMP      r2,#0x2c              ;1335
000656  d10c              BNE      |L9.1650|
000658  2200              MOVS     r2,#0                 ;1337
                  |L9.1626|
00065a  5c25              LDRB     r5,[r4,r0]            ;1339
00065c  eb030383          ADD      r3,r3,r3,LSL #2       ;1339
000660  1c40              ADDS     r0,r0,#1              ;1339
000662  1c52              ADDS     r2,r2,#1              ;1339
000664  eb060343          ADD      r3,r6,r3,LSL #1       ;1339
000668  b2d2              UXTB     r2,r2                 ;1337
00066a  442b              ADD      r3,r3,r5              ;1339
00066c  b280              UXTH     r0,r0                 ;1339
00066e  2a03              CMP      r2,#3                 ;1337
000670  d3f3              BCC      |L9.1626|
                  |L9.1650|
000672  f89b2005          LDRB     r2,[r11,#5]           ;1342  ; MODE
000676  465f              MOV      r7,r11                ;1342
000678  b902              CBNZ     r2,|L9.1660|
00067a  618b              STR      r3,[r1,#0x18]         ;1344  ; Para
                  |L9.1660|
00067c  5c22              LDRB     r2,[r4,r0]            ;1349
00067e  1c40              ADDS     r0,r0,#1              ;1349
000680  2300              MOVS     r3,#0                 ;1346
000682  b280              UXTH     r0,r0                 ;1349
000684  2a2c              CMP      r2,#0x2c              ;1349
000686  d10c              BNE      |L9.1698|
000688  2200              MOVS     r2,#0                 ;1351
                  |L9.1674|
00068a  5c25              LDRB     r5,[r4,r0]            ;1353
00068c  eb030383          ADD      r3,r3,r3,LSL #2       ;1353
000690  1c40              ADDS     r0,r0,#1              ;1353
000692  1c52              ADDS     r2,r2,#1              ;1353
000694  eb060343          ADD      r3,r6,r3,LSL #1       ;1353
000698  b2d2              UXTB     r2,r2                 ;1351
00069a  442b              ADD      r3,r3,r5              ;1353
00069c  b280              UXTH     r0,r0                 ;1353
00069e  2a03              CMP      r2,#3                 ;1351
0006a0  d3f3              BCC      |L9.1674|
                  |L9.1698|
0006a2  71fb              STRB     r3,[r7,#7]            ;1356
0006a4  5c23              LDRB     r3,[r4,r0]            ;1359
0006a6  1c40              ADDS     r0,r0,#1              ;1359
0006a8  2200              MOVS     r2,#0                 ;1357
0006aa  b285              UXTH     r5,r0                 ;1359
0006ac  2b2c              CMP      r3,#0x2c              ;1359
0006ae  d10c              BNE      |L9.1738|
0006b0  2000              MOVS     r0,#0                 ;1361
                  |L9.1714|
0006b2  5d63              LDRB     r3,[r4,r5]            ;1363
0006b4  eb020282          ADD      r2,r2,r2,LSL #2       ;1363
0006b8  1c6d              ADDS     r5,r5,#1              ;1363
0006ba  1c40              ADDS     r0,r0,#1              ;1363
0006bc  eb060242          ADD      r2,r6,r2,LSL #1       ;1363
0006c0  b2c0              UXTB     r0,r0                 ;1361
0006c2  441a              ADD      r2,r2,r3              ;1363
0006c4  b2ad              UXTH     r5,r5                 ;1363
0006c6  2803              CMP      r0,#3                 ;1361
0006c8  d3f3              BCC      |L9.1714|
                  |L9.1738|
0006ca  f8812052          STRB     r2,[r1,#0x52]         ;1366
0006ce  7978              LDRB     r0,[r7,#5]            ;1369  ; MODE
                  |L9.1744|
0006d0  f7fffffe          BL       MODE_PARASET
0006d4  e62a              B        |L9.812|
                  |L9.1750|
0006d6  5d60              LDRB     r0,[r4,r5]            ;1376
0006d8  283f              CMP      r0,#0x3f              ;1376
0006da  d002              BEQ      |L9.1762|
0006dc  2d0b              CMP      r5,#0xb               ;1385
0006de  d003              BEQ      |L9.1768|
0006e0  e010              B        |L9.1796|
                  |L9.1762|
0006e2  1960              ADDS     r0,r4,r5              ;1378
0006e4  780a              LDRB     r2,[r1,#0]            ;1378  ; C_DISCHARGE
0006e6  e616              B        |L9.790|
                  |L9.1768|
0006e8  2000              MOVS     r0,#0                 ;1387
0006ea  4607              MOV      r7,r0                 ;1387
                  |L9.1772|
0006ec  5d61              LDRB     r1,[r4,r5]            ;1389
0006ee  eb070287          ADD      r2,r7,r7,LSL #2       ;1389
0006f2  eb060242          ADD      r2,r6,r2,LSL #1       ;1389
0006f6  1c6d              ADDS     r5,r5,#1              ;1389
0006f8  1c40              ADDS     r0,r0,#1              ;1389
0006fa  188f              ADDS     r7,r1,r2              ;1389
0006fc  b2c0              UXTB     r0,r0                 ;1387
0006fe  b2ad              UXTH     r5,r5                 ;1389
000700  2802              CMP      r0,#2                 ;1387
000702  d3f3              BCC      |L9.1772|
                  |L9.1796|
000704  f88b7005          STRB     r7,[r11,#5]           ;1392
000708  f89b0005          LDRB     r0,[r11,#5]           ;1395  ; MODE
00070c  2700              MOVS     r7,#0                 ;1393
00070e  f8dfa46c          LDR      r10,|L9.2940|
000712  f6446120          MOV      r1,#0x4e20            ;1418
000716  b1b0              CBZ      r0,|L9.1862|
000718  f89b0005          LDRB     r0,[r11,#5]           ;1439  ; MODE
00071c  465a              MOV      r2,r11                ;1439
00071e  2801              CMP      r0,#1                 ;1439
000720  d063              BEQ      |L9.2026|
000722  7950              LDRB     r0,[r2,#5]            ;1468  ; MODE
000724  2802              CMP      r0,#2                 ;1468
000726  d07d              BEQ      |L9.2084|
000728  f89b0005          LDRB     r0,[r11,#5]           ;1504  ; MODE
00072c  2803              CMP      r0,#3                 ;1504
00072e  d07a              BEQ      |L9.2086|
000730  7950              LDRB     r0,[r2,#5]            ;1536  ; MODE
000732  2804              CMP      r0,#4                 ;1536
000734  d078              BEQ      |L9.2088|
000736  f89b0005          LDRB     r0,[r11,#5]           ;1579  ; MODE
00073a  2805              CMP      r0,#5                 ;1579
00073c  d075              BEQ      |L9.2090|
00073e  7950              LDRB     r0,[r2,#5]            ;1610  ; MODE
000740  2806              CMP      r0,#6                 ;1610
000742  d073              BEQ      |L9.2092|
                  |L9.1860|
000744  e1da              B        |L9.2812|
                  |L9.1862|
000746  5d62              LDRB     r2,[r4,r5]            ;1397
000748  1c6d              ADDS     r5,r5,#1              ;1397
00074a  b2a8              UXTH     r0,r5                 ;1397
00074c  2a2c              CMP      r2,#0x2c              ;1397
00074e  d106              BNE      |L9.1886|
000750  2200              MOVS     r2,#0                 ;1399
                  |L9.1874|
000752  1c40              ADDS     r0,r0,#1              ;1399
000754  1c52              ADDS     r2,r2,#1              ;1401
000756  b2d2              UXTB     r2,r2                 ;1399
000758  b280              UXTH     r0,r0                 ;1401
00075a  2a05              CMP      r2,#5                 ;1399
00075c  d3f9              BCC      |L9.1874|
                  |L9.1886|
00075e  5c23              LDRB     r3,[r4,r0]            ;1407
000760  1c40              ADDS     r0,r0,#1              ;1407
000762  2200              MOVS     r2,#0                 ;1405
000764  b285              UXTH     r5,r0                 ;1407
000766  2b2c              CMP      r3,#0x2c              ;1407
000768  d10c              BNE      |L9.1924|
00076a  2000              MOVS     r0,#0                 ;1409
                  |L9.1900|
00076c  5d63              LDRB     r3,[r4,r5]            ;1411
00076e  eb020282          ADD      r2,r2,r2,LSL #2       ;1411
000772  1c6d              ADDS     r5,r5,#1              ;1411
000774  1c40              ADDS     r0,r0,#1              ;1411
000776  eb060242          ADD      r2,r6,r2,LSL #1       ;1411
00077a  b2c0              UXTB     r0,r0                 ;1409
00077c  441a              ADD      r2,r2,r3              ;1411
00077e  b2ad              UXTH     r5,r5                 ;1411
000780  2805              CMP      r0,#5                 ;1409
000782  d3f3              BCC      |L9.1900|
                  |L9.1924|
000784  f8c92014          STR      r2,[r9,#0x14]         ;1414  ; Para
000788  f8d90014          LDR      r0,[r9,#0x14]         ;1418  ; Para
00078c  2700              MOVS     r7,#0                 ;1415
00078e  4288              CMP      r0,r1                 ;1418
000790  d907              BLS      |L9.1954|
000792  2001              MOVS     r0,#1                 ;1420
000794  f8ca0020          STR      r0,[r10,#0x20]        ;1420  ; Run_Control
000798  02c1              LSLS     r1,r0,#11             ;1421
00079a  48f9              LDR      r0,|L9.2944|
00079c  f7fffffe          BL       GPIO_ResetBits
0007a0  e007              B        |L9.1970|
                  |L9.1954|
0007a2  2000              MOVS     r0,#0                 ;1423
0007a4  f8ca0020          STR      r0,[r10,#0x20]        ;1423  ; Run_Control
0007a8  f44f6100          MOV      r1,#0x800             ;1424
0007ac  48f4              LDR      r0,|L9.2944|
0007ae  f7fffffe          BL       GPIO_SetBits
                  |L9.1970|
0007b2  5d60              LDRB     r0,[r4,r5]            ;1426
0007b4  1c6d              ADDS     r5,r5,#1              ;1426
0007b6  b2ad              UXTH     r5,r5                 ;1426
0007b8  282c              CMP      r0,#0x2c              ;1426
0007ba  d10c              BNE      |L9.2006|
0007bc  2000              MOVS     r0,#0                 ;1428
                  |L9.1982|
0007be  5d61              LDRB     r1,[r4,r5]            ;1430
0007c0  eb070287          ADD      r2,r7,r7,LSL #2       ;1430
0007c4  eb060242          ADD      r2,r6,r2,LSL #1       ;1430
0007c8  1c6d              ADDS     r5,r5,#1              ;1430
0007ca  188f              ADDS     r7,r1,r2              ;1430
0007cc  1c40              ADDS     r0,r0,#1              ;1430
0007ce  b2ad              UXTH     r5,r5                 ;1430
0007d0  f01000ff          ANDS     r0,r0,#0xff           ;1428
0007d4  d0f3              BEQ      |L9.1982|
                  |L9.2006|
0007d6  f88b7006          STRB     r7,[r11,#6]           ;1433
0007da  f89b0006          LDRB     r0,[r11,#6]           ;1434  ; mainswitch
0007de  2800              CMP      r0,#0                 ;1434
0007e0  d1b0              BNE      |L9.1860|
0007e2  2001              MOVS     r0,#1                 ;1436
0007e4  f8ca0020          STR      r0,[r10,#0x20]        ;1436  ; Run_Control
0007e8  e125              B        |L9.2614|
                  |L9.2026|
0007ea  5d61              LDRB     r1,[r4,r5]            ;1440
0007ec  1c6d              ADDS     r5,r5,#1              ;1440
0007ee  b2a8              UXTH     r0,r5                 ;1440
0007f0  292c              CMP      r1,#0x2c              ;1440
0007f2  d10c              BNE      |L9.2062|
0007f4  2100              MOVS     r1,#0                 ;1442
                  |L9.2038|
0007f6  5c23              LDRB     r3,[r4,r0]            ;1444
0007f8  eb070587          ADD      r5,r7,r7,LSL #2       ;1444
0007fc  eb060545          ADD      r5,r6,r5,LSL #1       ;1444
000800  1c40              ADDS     r0,r0,#1              ;1444
000802  1c49              ADDS     r1,r1,#1              ;1444
000804  195f              ADDS     r7,r3,r5              ;1444
000806  b2c9              UXTB     r1,r1                 ;1442
000808  b280              UXTH     r0,r0                 ;1444
00080a  2905              CMP      r1,#5                 ;1442
00080c  d3f3              BCC      |L9.2038|
                  |L9.2062|
00080e  464d              MOV      r5,r9                 ;1447
000810  f8a97064          STRH     r7,[r9,#0x64]         ;1447
000814  5c21              LDRB     r1,[r4,r0]            ;1450
000816  1c40              ADDS     r0,r0,#1              ;1450
000818  2300              MOVS     r3,#0                 ;1448
00081a  b280              UXTH     r0,r0                 ;1450
00081c  292c              CMP      r1,#0x2c              ;1450
00081e  d112              BNE      |L9.2118|
000820  2100              MOVS     r1,#0                 ;1452
                  |L9.2082|
000822  e004              B        |L9.2094|
                  |L9.2084|
000824  e025              B        |L9.2162|
                  |L9.2086|
000826  e073              B        |L9.2320|
                  |L9.2088|
000828  e0b0              B        |L9.2444|
                  |L9.2090|
00082a  e10a              B        |L9.2626|
                  |L9.2092|
00082c  e13a              B        |L9.2724|
                  |L9.2094|
00082e  5c27              LDRB     r7,[r4,r0]            ;1454
000830  eb030383          ADD      r3,r3,r3,LSL #2       ;1454
000834  1c40              ADDS     r0,r0,#1              ;1454
000836  1c49              ADDS     r1,r1,#1              ;1454
000838  eb060343          ADD      r3,r6,r3,LSL #1       ;1454
00083c  b2c9              UXTB     r1,r1                 ;1452
00083e  443b              ADD      r3,r3,r7              ;1454
000840  b280              UXTH     r0,r0                 ;1454
000842  2905              CMP      r1,#5                 ;1452
000844  d3ed              BCC      |L9.2082|
                  |L9.2118|
000846  f8a53066          STRH     r3,[r5,#0x66]         ;1457
00084a  5c23              LDRB     r3,[r4,r0]            ;1460
00084c  1c40              ADDS     r0,r0,#1              ;1460
00084e  2100              MOVS     r1,#0                 ;1458
000850  b285              UXTH     r5,r0                 ;1460
000852  2b2c              CMP      r3,#0x2c              ;1460
000854  d10c              BNE      |L9.2160|
000856  2000              MOVS     r0,#0                 ;1462
                  |L9.2136|
000858  5d63              LDRB     r3,[r4,r5]            ;1464
00085a  1c6d              ADDS     r5,r5,#1              ;1464
00085c  eb010181          ADD      r1,r1,r1,LSL #2       ;1464
000860  eb060141          ADD      r1,r6,r1,LSL #1       ;1464
000864  1c40              ADDS     r0,r0,#1              ;1464
000866  4419              ADD      r1,r1,r3              ;1464
000868  b2ad              UXTH     r5,r5                 ;1464
00086a  f01000ff          ANDS     r0,r0,#0xff           ;1462
00086e  d0f3              BEQ      |L9.2136|
                  |L9.2160|
000870  e143              B        |L9.2810|
                  |L9.2162|
000872  2101              MOVS     r1,#1                 ;1469
000874  f8ca1020          STR      r1,[r10,#0x20]        ;1469  ; Run_Control
000878  02c9              LSLS     r1,r1,#11             ;1470
00087a  48c1              LDR      r0,|L9.2944|
00087c  f7fffffe          BL       GPIO_ResetBits
000880  5d61              LDRB     r1,[r4,r5]            ;1471
000882  1c6d              ADDS     r5,r5,#1              ;1471
000884  b2a8              UXTH     r0,r5                 ;1471
000886  292c              CMP      r1,#0x2c              ;1471
000888  d10c              BNE      |L9.2212|
00088a  2100              MOVS     r1,#0                 ;1473
                  |L9.2188|
00088c  5c22              LDRB     r2,[r4,r0]            ;1475
00088e  eb070387          ADD      r3,r7,r7,LSL #2       ;1475
000892  eb060343          ADD      r3,r6,r3,LSL #1       ;1475
000896  1c40              ADDS     r0,r0,#1              ;1475
000898  1c49              ADDS     r1,r1,#1              ;1475
00089a  18d7              ADDS     r7,r2,r3              ;1475
00089c  b2c9              UXTB     r1,r1                 ;1473
00089e  b280              UXTH     r0,r0                 ;1475
0008a0  2905              CMP      r1,#5                 ;1473
0008a2  d3f3              BCC      |L9.2188|
                  |L9.2212|
0008a4  464b              MOV      r3,r9                 ;1478
0008a6  f8c97044          STR      r7,[r9,#0x44]         ;1478  ; Para
0008aa  5c21              LDRB     r1,[r4,r0]            ;1481
0008ac  1c40              ADDS     r0,r0,#1              ;1481
0008ae  2200              MOVS     r2,#0                 ;1479
0008b0  b280              UXTH     r0,r0                 ;1481
0008b2  292c              CMP      r1,#0x2c              ;1481
0008b4  d10c              BNE      |L9.2256|
0008b6  2100              MOVS     r1,#0                 ;1483
                  |L9.2232|
0008b8  5c25              LDRB     r5,[r4,r0]            ;1485
0008ba  eb020282          ADD      r2,r2,r2,LSL #2       ;1485
0008be  1c40              ADDS     r0,r0,#1              ;1485
0008c0  1c49              ADDS     r1,r1,#1              ;1485
0008c2  eb060242          ADD      r2,r6,r2,LSL #1       ;1485
0008c6  b2c9              UXTB     r1,r1                 ;1483
0008c8  442a              ADD      r2,r2,r5              ;1485
0008ca  b280              UXTH     r0,r0                 ;1485
0008cc  2905              CMP      r1,#5                 ;1483
0008ce  d3f3              BCC      |L9.2232|
                  |L9.2256|
0008d0  f8a32048          STRH     r2,[r3,#0x48]         ;1488
0008d4  5c22              LDRB     r2,[r4,r0]            ;1491
0008d6  1c40              ADDS     r0,r0,#1              ;1491
0008d8  2100              MOVS     r1,#0                 ;1489
0008da  b285              UXTH     r5,r0                 ;1491
0008dc  2a2c              CMP      r2,#0x2c              ;1491
0008de  d10c              BNE      |L9.2298|
0008e0  2000              MOVS     r0,#0                 ;1493
                  |L9.2274|
0008e2  5d62              LDRB     r2,[r4,r5]            ;1495
0008e4  1c6d              ADDS     r5,r5,#1              ;1495
0008e6  eb010181          ADD      r1,r1,r1,LSL #2       ;1495
0008ea  eb060141          ADD      r1,r6,r1,LSL #1       ;1495
0008ee  1c40              ADDS     r0,r0,#1              ;1495
0008f0  4411              ADD      r1,r1,r2              ;1495
0008f2  b2ad              UXTH     r5,r5                 ;1495
0008f4  f01000ff          ANDS     r0,r0,#0xff           ;1493
0008f8  d0f3              BEQ      |L9.2274|
                  |L9.2298|
0008fa  f88b1006          STRB     r1,[r11,#6]           ;1498
0008fe  f89b0006          LDRB     r0,[r11,#6]           ;1500  ; mainswitch
000902  2801              CMP      r0,#1                 ;1500
000904  d102              BNE      |L9.2316|
000906  499f              LDR      r1,|L9.2948|
000908  2000              MOVS     r0,#0                 ;1502
00090a  7008              STRB     r0,[r1,#0]            ;1502
                  |L9.2316|
00090c  e0f6              B        |L9.2812|
                  |L9.2318|
00090e  e1fa              B        |L9.3334|
                  |L9.2320|
000910  5d61              LDRB     r1,[r4,r5]            ;1505
000912  1c6d              ADDS     r5,r5,#1              ;1505
000914  b2a8              UXTH     r0,r5                 ;1505
000916  292c              CMP      r1,#0x2c              ;1505
000918  d10c              BNE      |L9.2356|
00091a  2100              MOVS     r1,#0                 ;1507
                  |L9.2332|
00091c  5c23              LDRB     r3,[r4,r0]            ;1509
00091e  eb070587          ADD      r5,r7,r7,LSL #2       ;1509
000922  eb060545          ADD      r5,r6,r5,LSL #1       ;1509
000926  1c40              ADDS     r0,r0,#1              ;1509
000928  1c49              ADDS     r1,r1,#1              ;1509
00092a  195f              ADDS     r7,r3,r5              ;1509
00092c  b2c9              UXTB     r1,r1                 ;1507
00092e  b280              UXTH     r0,r0                 ;1509
000930  2905              CMP      r1,#5                 ;1507
000932  d3f3              BCC      |L9.2332|
                  |L9.2356|
000934  464d              MOV      r5,r9                 ;1512
000936  f8a97064          STRH     r7,[r9,#0x64]         ;1512
00093a  5c21              LDRB     r1,[r4,r0]            ;1516
00093c  1c40              ADDS     r0,r0,#1              ;1516
00093e  2300              MOVS     r3,#0                 ;1513
000940  b280              UXTH     r0,r0                 ;1516
000942  292c              CMP      r1,#0x2c              ;1516
000944  d10c              BNE      |L9.2400|
000946  2100              MOVS     r1,#0                 ;1518
                  |L9.2376|
000948  5c27              LDRB     r7,[r4,r0]            ;1520
00094a  eb030383          ADD      r3,r3,r3,LSL #2       ;1520
00094e  1c40              ADDS     r0,r0,#1              ;1520
000950  1c49              ADDS     r1,r1,#1              ;1520
000952  eb060343          ADD      r3,r6,r3,LSL #1       ;1520
000956  b2c9              UXTB     r1,r1                 ;1518
000958  443b              ADD      r3,r3,r7              ;1520
00095a  b280              UXTH     r0,r0                 ;1520
00095c  2905              CMP      r1,#5                 ;1518
00095e  d3f3              BCC      |L9.2376|
                  |L9.2400|
000960  f8a53066          STRH     r3,[r5,#0x66]         ;1523
000964  5c23              LDRB     r3,[r4,r0]            ;1526
000966  1c40              ADDS     r0,r0,#1              ;1526
000968  2100              MOVS     r1,#0                 ;1524
00096a  b285              UXTH     r5,r0                 ;1526
00096c  2b2c              CMP      r3,#0x2c              ;1526
00096e  d10c              BNE      |L9.2442|
000970  2000              MOVS     r0,#0                 ;1528
                  |L9.2418|
000972  5d63              LDRB     r3,[r4,r5]            ;1530
000974  1c6d              ADDS     r5,r5,#1              ;1530
000976  eb010181          ADD      r1,r1,r1,LSL #2       ;1530
00097a  eb060141          ADD      r1,r6,r1,LSL #1       ;1530
00097e  1c40              ADDS     r0,r0,#1              ;1530
000980  4419              ADD      r1,r1,r3              ;1530
000982  b2ad              UXTH     r5,r5                 ;1530
000984  f01000ff          ANDS     r0,r0,#0xff           ;1528
000988  d0f3              BEQ      |L9.2418|
                  |L9.2442|
00098a  e0b6              B        |L9.2810|
                  |L9.2444|
00098c  5d62              LDRB     r2,[r4,r5]            ;1537
00098e  1c6d              ADDS     r5,r5,#1              ;1537
000990  b2a8              UXTH     r0,r5                 ;1537
000992  2a2c              CMP      r2,#0x2c              ;1537
000994  d106              BNE      |L9.2468|
000996  2200              MOVS     r2,#0                 ;1539
                  |L9.2456|
000998  1c40              ADDS     r0,r0,#1              ;1539
00099a  1c52              ADDS     r2,r2,#1              ;1541
00099c  b2d2              UXTB     r2,r2                 ;1539
00099e  b280              UXTH     r0,r0                 ;1541
0009a0  2a05              CMP      r2,#5                 ;1539
0009a2  d3f9              BCC      |L9.2456|
                  |L9.2468|
0009a4  5c23              LDRB     r3,[r4,r0]            ;1547
0009a6  1c40              ADDS     r0,r0,#1              ;1547
0009a8  2200              MOVS     r2,#0                 ;1545
0009aa  b285              UXTH     r5,r0                 ;1547
0009ac  2b2c              CMP      r3,#0x2c              ;1547
0009ae  d10c              BNE      |L9.2506|
0009b0  2000              MOVS     r0,#0                 ;1549
                  |L9.2482|
0009b2  5d63              LDRB     r3,[r4,r5]            ;1551
0009b4  eb020282          ADD      r2,r2,r2,LSL #2       ;1551
0009b8  1c6d              ADDS     r5,r5,#1              ;1551
0009ba  1c40              ADDS     r0,r0,#1              ;1551
0009bc  eb060242          ADD      r2,r6,r2,LSL #1       ;1551
0009c0  b2c0              UXTB     r0,r0                 ;1549
0009c2  441a              ADD      r2,r2,r3              ;1551
0009c4  b2ad              UXTH     r5,r5                 ;1551
0009c6  2805              CMP      r0,#5                 ;1549
0009c8  d3f3              BCC      |L9.2482|
                  |L9.2506|
0009ca  f8c92014          STR      r2,[r9,#0x14]         ;1554  ; Para
0009ce  e003              B        |L9.2520|
                  |L9.2512|
0009d0  e09c              B        |L9.2828|
                  |L9.2514|
0009d2  e0ff              B        |L9.3028|
                  |L9.2516|
0009d4  e13f              B        |L9.3158|
                  |L9.2518|
0009d6  e13d              B        |L9.3156|
                  |L9.2520|
0009d8  f8d90014          LDR      r0,[r9,#0x14]         ;1558  ; Para
0009dc  2700              MOVS     r7,#0                 ;1555
0009de  4288              CMP      r0,r1                 ;1558
0009e0  d907              BLS      |L9.2546|
0009e2  2001              MOVS     r0,#1                 ;1560
0009e4  f8ca0020          STR      r0,[r10,#0x20]        ;1560  ; Run_Control
0009e8  02c1              LSLS     r1,r0,#11             ;1561
0009ea  4865              LDR      r0,|L9.2944|
0009ec  f7fffffe          BL       GPIO_ResetBits
0009f0  e007              B        |L9.2562|
                  |L9.2546|
0009f2  2000              MOVS     r0,#0                 ;1563
0009f4  f8ca0020          STR      r0,[r10,#0x20]        ;1563  ; Run_Control
0009f8  f44f6100          MOV      r1,#0x800             ;1564
0009fc  4860              LDR      r0,|L9.2944|
0009fe  f7fffffe          BL       GPIO_SetBits
                  |L9.2562|
000a02  5d60              LDRB     r0,[r4,r5]            ;1566
000a04  1c6d              ADDS     r5,r5,#1              ;1566
000a06  b2ad              UXTH     r5,r5                 ;1566
000a08  282c              CMP      r0,#0x2c              ;1566
000a0a  d10c              BNE      |L9.2598|
000a0c  2000              MOVS     r0,#0                 ;1568
                  |L9.2574|
000a0e  5d61              LDRB     r1,[r4,r5]            ;1570
000a10  eb070287          ADD      r2,r7,r7,LSL #2       ;1570
000a14  eb060242          ADD      r2,r6,r2,LSL #1       ;1570
000a18  1c6d              ADDS     r5,r5,#1              ;1570
000a1a  188f              ADDS     r7,r1,r2              ;1570
000a1c  1c40              ADDS     r0,r0,#1              ;1570
000a1e  b2ad              UXTH     r5,r5                 ;1570
000a20  f01000ff          ANDS     r0,r0,#0xff           ;1568
000a24  d0f3              BEQ      |L9.2574|
                  |L9.2598|
000a26  f88b7006          STRB     r7,[r11,#6]           ;1573
000a2a  f89b0006          LDRB     r0,[r11,#6]           ;1574  ; mainswitch
000a2e  bbc0              CBNZ     r0,|L9.2722|
000a30  2101              MOVS     r1,#1                 ;1576
000a32  f8ca1020          STR      r1,[r10,#0x20]        ;1576  ; Run_Control
                  |L9.2614|
000a36  f44f6100          MOV      r1,#0x800             ;1577
000a3a  4851              LDR      r0,|L9.2944|
000a3c  f7fffffe          BL       GPIO_ResetBits
000a40  e05c              B        |L9.2812|
                  |L9.2626|
000a42  5d61              LDRB     r1,[r4,r5]            ;1580
000a44  1c6d              ADDS     r5,r5,#1              ;1580
000a46  b2a8              UXTH     r0,r5                 ;1580
000a48  292c              CMP      r1,#0x2c              ;1580
000a4a  d106              BNE      |L9.2650|
000a4c  2100              MOVS     r1,#0                 ;1582
                  |L9.2638|
000a4e  1c40              ADDS     r0,r0,#1              ;1582
000a50  1c49              ADDS     r1,r1,#1              ;1584
000a52  b2c9              UXTB     r1,r1                 ;1582
000a54  b280              UXTH     r0,r0                 ;1584
000a56  2905              CMP      r1,#5                 ;1582
000a58  d3f9              BCC      |L9.2638|
                  |L9.2650|
000a5a  5c21              LDRB     r1,[r4,r0]            ;1589
000a5c  1c40              ADDS     r0,r0,#1              ;1589
000a5e  b280              UXTH     r0,r0                 ;1589
000a60  292c              CMP      r1,#0x2c              ;1589
000a62  d106              BNE      |L9.2674|
000a64  2100              MOVS     r1,#0                 ;1591
                  |L9.2662|
000a66  1c40              ADDS     r0,r0,#1              ;1591
000a68  1c49              ADDS     r1,r1,#1              ;1593
000a6a  b2c9              UXTB     r1,r1                 ;1591
000a6c  b280              UXTH     r0,r0                 ;1593
000a6e  2905              CMP      r1,#5                 ;1591
000a70  d3f9              BCC      |L9.2662|
                  |L9.2674|
000a72  5c23              LDRB     r3,[r4,r0]            ;1598
000a74  1c40              ADDS     r0,r0,#1              ;1598
000a76  2100              MOVS     r1,#0                 ;1596
000a78  b285              UXTH     r5,r0                 ;1598
000a7a  2b2c              CMP      r3,#0x2c              ;1598
000a7c  d10c              BNE      |L9.2712|
000a7e  2000              MOVS     r0,#0                 ;1600
                  |L9.2688|
000a80  5d63              LDRB     r3,[r4,r5]            ;1602
000a82  1c6d              ADDS     r5,r5,#1              ;1602
000a84  eb010181          ADD      r1,r1,r1,LSL #2       ;1602
000a88  eb060141          ADD      r1,r6,r1,LSL #1       ;1602
000a8c  1c40              ADDS     r0,r0,#1              ;1602
000a8e  4419              ADD      r1,r1,r3              ;1602
000a90  b2ad              UXTH     r5,r5                 ;1602
000a92  f01000ff          ANDS     r0,r0,#0xff           ;1600
000a96  d0f3              BEQ      |L9.2688|
                  |L9.2712|
000a98  7191              STRB     r1,[r2,#6]            ;1605
000a9a  7990              LDRB     r0,[r2,#6]            ;1606  ; mainswitch
000a9c  b908              CBNZ     r0,|L9.2722|
000a9e  2000              MOVS     r0,#0                 ;1608
000aa0  7190              STRB     r0,[r2,#6]            ;1608
                  |L9.2722|
000aa2  e02b              B        |L9.2812|
                  |L9.2724|
000aa4  5d61              LDRB     r1,[r4,r5]            ;1611
000aa6  1c6d              ADDS     r5,r5,#1              ;1611
000aa8  b2a8              UXTH     r0,r5                 ;1611
000aaa  292c              CMP      r1,#0x2c              ;1611
000aac  d106              BNE      |L9.2748|
000aae  2100              MOVS     r1,#0                 ;1613
                  |L9.2736|
000ab0  1c40              ADDS     r0,r0,#1              ;1613
000ab2  1c49              ADDS     r1,r1,#1              ;1615
000ab4  b2c9              UXTB     r1,r1                 ;1613
000ab6  b280              UXTH     r0,r0                 ;1615
000ab8  2905              CMP      r1,#5                 ;1613
000aba  d3f9              BCC      |L9.2736|
                  |L9.2748|
000abc  5c21              LDRB     r1,[r4,r0]            ;1620
000abe  1c40              ADDS     r0,r0,#1              ;1620
000ac0  b280              UXTH     r0,r0                 ;1620
000ac2  292c              CMP      r1,#0x2c              ;1620
000ac4  d106              BNE      |L9.2772|
000ac6  2100              MOVS     r1,#0                 ;1622
                  |L9.2760|
000ac8  1c40              ADDS     r0,r0,#1              ;1622
000aca  1c49              ADDS     r1,r1,#1              ;1624
000acc  b2c9              UXTB     r1,r1                 ;1622
000ace  b280              UXTH     r0,r0                 ;1624
000ad0  2905              CMP      r1,#5                 ;1622
000ad2  d3f9              BCC      |L9.2760|
                  |L9.2772|
000ad4  5c23              LDRB     r3,[r4,r0]            ;1629
000ad6  1c40              ADDS     r0,r0,#1              ;1629
000ad8  2100              MOVS     r1,#0                 ;1627
000ada  b285              UXTH     r5,r0                 ;1629
000adc  2b2c              CMP      r3,#0x2c              ;1629
000ade  d10c              BNE      |L9.2810|
000ae0  2000              MOVS     r0,#0                 ;1631
                  |L9.2786|
000ae2  5d63              LDRB     r3,[r4,r5]            ;1633
000ae4  1c6d              ADDS     r5,r5,#1              ;1633
000ae6  eb010181          ADD      r1,r1,r1,LSL #2       ;1633
000aea  eb060141          ADD      r1,r6,r1,LSL #1       ;1633
000aee  1c40              ADDS     r0,r0,#1              ;1633
000af0  4419              ADD      r1,r1,r3              ;1633
000af2  b2ad              UXTH     r5,r5                 ;1633
000af4  f01000ff          ANDS     r0,r0,#0xff           ;1631
000af8  d0f3              BEQ      |L9.2786|
                  |L9.2810|
000afa  7191              STRB     r1,[r2,#6]            ;1636
                  |L9.2812|
000afc  f7fffffe          BL       Off_GPOI_ResetSet
000b00  f89b0006          LDRB     r0,[r11,#6]           ;1642  ; mainswitch
000b04  f7fffffe          BL       LIST_ONOFF
000b08  e410              B        |L9.812|
                  |L9.2826|
000b0a  e0da              B        |L9.3266|
                  |L9.2828|
000b0c  5d60              LDRB     r0,[r4,r5]            ;1649
000b0e  2308              MOVS     r3,#8                 ;1648
000b10  283f              CMP      r0,#0x3f              ;1649
000b12  d019              BEQ      |L9.2888|
000b14  2201              MOVS     r2,#1                 ;1658
000b16  2100              MOVS     r1,#0                 ;1659
                  |L9.2840|
000b18  b141              CBZ      r1,|L9.2860|
000b1a  2904              CMP      r1,#4                 ;1661
000b1c  d006              BEQ      |L9.2860|
000b1e  1868              ADDS     r0,r5,r1              ;1663
000b20  5c20              LDRB     r0,[r4,r0]            ;1663
000b22  f7fffffe          BL       IsDigitChar
000b26  2801              CMP      r0,#1                 ;1663
000b28  d032              BEQ      |L9.2960|
000b2a  2200              MOVS     r2,#0                 ;1669
                  |L9.2860|
000b2c  1c49              ADDS     r1,r1,#1              ;1669
000b2e  b2c9              UXTB     r1,r1                 ;1659
000b30  4299              CMP      r1,r3                 ;1659
000b32  d3f1              BCC      |L9.2840|
000b34  2a01              CMP      r2,#1                 ;1672
                  |L9.2870|
000b36  f47faa7c          BNE      |L9.50|
000b3a  18e8              ADDS     r0,r5,r3              ;1672
000b3c  5c20              LDRB     r0,[r4,r0]            ;1672
000b3e  280d              CMP      r0,#0xd               ;1672
000b40  d1f9              BNE      |L9.2870|
000b42  2200              MOVS     r2,#0                 ;1677
000b44  4610              MOV      r0,r2                 ;1678
000b46  e03c              B        |L9.3010|
                  |L9.2888|
000b48  eeb58ac0          VCMPE.F32 s16,#0.0              ;1651
000b4c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1651
000b50  db01              BLT      |L9.2902|
000b52  202b              MOVS     r0,#0x2b              ;1651
000b54  e000              B        |L9.2904|
                  |L9.2902|
000b56  202d              MOVS     r0,#0x2d              ;1651
                  |L9.2904|
000b58  5560              STRB     r0,[r4,r5]            ;1651
000b5a  1c6d              ADDS     r5,r5,#1              ;1651
000b5c  b2ad              UXTH     r5,r5                 ;1651
000b5e  ee180a10          VMOV     r0,s16                ;1652
000b62  f7fffffe          BL       __aeabi_f2d
000b66  ec410b10          VMOV     d0,r0,r1              ;1652
000b6a  1960              ADDS     r0,r4,r5              ;1652
000b6c  ec532b10          VMOV     r2,r3,d0              ;1652
000b70  a105              ADR      r1,|L9.2952|
000b72  f7fffffe          BL       __2sprintf
000b76  3508              ADDS     r5,r5,#8              ;1652
000b78  e0a3              B        |L9.3266|
000b7a  0000              DCW      0x0000
                  |L9.2940|
                          DCD      Run_Control
                  |L9.2944|
                          DCD      0x40020800
                  |L9.2948|
                          DCD      finishflag
                  |L9.2952|
000b88  2530332e          DCB      "%03.3f",0
000b8c  336600  
000b8f  00                DCB      0
                  |L9.2960|
000b90  f0020201          AND      r2,r2,#1              ;1665
000b94  e7ca              B        |L9.2860|
                  |L9.2966|
000b96  b150              CBZ      r0,|L9.2990|
000b98  2804              CMP      r0,#4                 ;1685
000b9a  d005              BEQ      |L9.2984|
000b9c  5d61              LDRB     r1,[r4,r5]            ;1691
000b9e  eb020282          ADD      r2,r2,r2,LSL #2       ;1691
000ba2  eb060242          ADD      r2,r6,r2,LSL #1       ;1691
000ba6  440a              ADD      r2,r2,r1              ;1691
                  |L9.2984|
000ba8  1c6d              ADDS     r5,r5,#1              ;1691
000baa  b2ad              UXTH     r5,r5                 ;1687
000bac  e007              B        |L9.3006|
                  |L9.2990|
000bae  5d61              LDRB     r1,[r4,r5]            ;1682
000bb0  1c6d              ADDS     r5,r5,#1              ;1682
000bb2  3930              SUBS     r1,r1,#0x30           ;1682
000bb4  ee001a10          VMOV     s0,r1                 ;1682
000bb8  b2ad              UXTH     r5,r5                 ;1682
000bba  eeb88ac0          VCVT.F32.S32 s16,s0                ;1682
                  |L9.3006|
000bbe  1c40              ADDS     r0,r0,#1              ;1682
000bc0  b2c0              UXTB     r0,r0                 ;1678
                  |L9.3010|
000bc2  4298              CMP      r0,r3                 ;1678
000bc4  d3e7              BCC      |L9.2966|
000bc6  eebc0ac8          VCVT.U32.F32 s0,s16                ;1693
000bca  ee100a10          VMOV     r0,s0                 ;1693
000bce  b2c1              UXTB     r1,r0                 ;1693
000bd0  2000              MOVS     r0,#0                 ;1693
000bd2  e03d              B        |L9.3152|
                  |L9.3028|
000bd4  5d60              LDRB     r0,[r4,r5]            ;1700
000bd6  2308              MOVS     r3,#8                 ;1699
000bd8  283f              CMP      r0,#0x3f              ;1700
000bda  d03b              BEQ      |L9.3156|
000bdc  2201              MOVS     r2,#1                 ;1709
000bde  2100              MOVS     r1,#0                 ;1710
                  |L9.3040|
000be0  b141              CBZ      r1,|L9.3060|
000be2  2904              CMP      r1,#4                 ;1712
000be4  d006              BEQ      |L9.3060|
000be6  1868              ADDS     r0,r5,r1              ;1714
000be8  5c20              LDRB     r0,[r4,r0]            ;1714
000bea  f7fffffe          BL       IsDigitChar
000bee  2801              CMP      r0,#1                 ;1714
000bf0  d00d              BEQ      |L9.3086|
000bf2  2200              MOVS     r2,#0                 ;1720
                  |L9.3060|
000bf4  1c49              ADDS     r1,r1,#1              ;1720
000bf6  b2c9              UXTB     r1,r1                 ;1710
000bf8  4299              CMP      r1,r3                 ;1710
000bfa  d3f1              BCC      |L9.3040|
000bfc  2a01              CMP      r2,#1                 ;1723
                  |L9.3070|
000bfe  d19a              BNE      |L9.2870|
000c00  18e8              ADDS     r0,r5,r3              ;1723
000c02  5c20              LDRB     r0,[r4,r0]            ;1723
000c04  280d              CMP      r0,#0xd               ;1723
000c06  d196              BNE      |L9.2870|
000c08  2200              MOVS     r2,#0                 ;1728
000c0a  4610              MOV      r0,r2                 ;1729
000c0c  e018              B        |L9.3136|
                  |L9.3086|
000c0e  f0020201          AND      r2,r2,#1              ;1716
000c12  e7ef              B        |L9.3060|
                  |L9.3092|
000c14  b150              CBZ      r0,|L9.3116|
000c16  2804              CMP      r0,#4                 ;1736
000c18  d005              BEQ      |L9.3110|
000c1a  5d61              LDRB     r1,[r4,r5]            ;1742
000c1c  eb020282          ADD      r2,r2,r2,LSL #2       ;1742
000c20  eb060242          ADD      r2,r6,r2,LSL #1       ;1742
000c24  440a              ADD      r2,r2,r1              ;1742
                  |L9.3110|
000c26  1c6d              ADDS     r5,r5,#1              ;1742
000c28  b2ad              UXTH     r5,r5                 ;1738
000c2a  e007              B        |L9.3132|
                  |L9.3116|
000c2c  5d61              LDRB     r1,[r4,r5]            ;1733
000c2e  1c6d              ADDS     r5,r5,#1              ;1733
000c30  3930              SUBS     r1,r1,#0x30           ;1733
000c32  ee001a10          VMOV     s0,r1                 ;1733
000c36  b2ad              UXTH     r5,r5                 ;1733
000c38  eeb88ac0          VCVT.F32.S32 s16,s0                ;1733
                  |L9.3132|
000c3c  1c40              ADDS     r0,r0,#1              ;1733
000c3e  b2c0              UXTB     r0,r0                 ;1729
                  |L9.3136|
000c40  4298              CMP      r0,r3                 ;1729
000c42  d3e7              BCC      |L9.3092|
000c44  eebc0ac8          VCVT.U32.F32 s0,s16                ;1744
000c48  ee100a10          VMOV     r0,s0                 ;1744
000c4c  b2c1              UXTB     r1,r0                 ;1744
000c4e  2001              MOVS     r0,#1                 ;1744
                  |L9.3152|
000c50  f7fffffe          BL       CalHandle
                  |L9.3156|
000c54  e061              B        |L9.3354|
                  |L9.3158|
000c56  5d60              LDRB     r0,[r4,r5]            ;1751
000c58  2306              MOVS     r3,#6                 ;1750
000c5a  283f              CMP      r0,#0x3f              ;1751
000c5c  d018              BEQ      |L9.3216|
000c5e  2201              MOVS     r2,#1                 ;1760
000c60  2100              MOVS     r1,#0                 ;1761
                  |L9.3170|
000c62  b141              CBZ      r1,|L9.3190|
000c64  2904              CMP      r1,#4                 ;1763
000c66  d006              BEQ      |L9.3190|
000c68  1868              ADDS     r0,r5,r1              ;1765
000c6a  5c20              LDRB     r0,[r4,r0]            ;1765
000c6c  f7fffffe          BL       IsDigitChar
000c70  2801              CMP      r0,#1                 ;1765
000c72  d029              BEQ      |L9.3272|
000c74  2200              MOVS     r2,#0                 ;1771
                  |L9.3190|
000c76  1c49              ADDS     r1,r1,#1              ;1771
000c78  b2c9              UXTB     r1,r1                 ;1761
000c7a  4299              CMP      r1,r3                 ;1761
000c7c  d3f1              BCC      |L9.3170|
000c7e  2a01              CMP      r2,#1                 ;1774
000c80  d1bd              BNE      |L9.3070|
000c82  18e8              ADDS     r0,r5,r3              ;1774
000c84  5c20              LDRB     r0,[r4,r0]            ;1774
000c86  280d              CMP      r0,#0xd               ;1774
000c88  d1b9              BNE      |L9.3070|
000c8a  2200              MOVS     r2,#0                 ;1779
000c8c  4610              MOV      r0,r2                 ;1780
000c8e  e029              B        |L9.3300|
                  |L9.3216|
000c90  eeb58ac0          VCMPE.F32 s16,#0.0              ;1753
000c94  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1753
000c98  db01              BLT      |L9.3230|
000c9a  202b              MOVS     r0,#0x2b              ;1753
000c9c  e000              B        |L9.3232|
                  |L9.3230|
000c9e  202d              MOVS     r0,#0x2d              ;1753
                  |L9.3232|
000ca0  5560              STRB     r0,[r4,r5]            ;1753
000ca2  1c6d              ADDS     r5,r5,#1              ;1753
000ca4  b2ad              UXTH     r5,r5                 ;1753
000ca6  ee180a10          VMOV     r0,s16                ;1754
000caa  f7fffffe          BL       __aeabi_f2d
000cae  ec410b10          VMOV     d0,r0,r1              ;1754
000cb2  1960              ADDS     r0,r4,r5              ;1754
000cb4  ec532b10          VMOV     r2,r3,d0              ;1754
000cb8  f2af1134          ADR      r1,|L9.2952|
000cbc  f7fffffe          BL       __2sprintf
000cc0  1dad              ADDS     r5,r5,#6              ;1754
                  |L9.3266|
000cc2  b2a8              UXTH     r0,r5                 ;1755
000cc4  f7ffbb04          B        |L9.720|
                  |L9.3272|
000cc8  f0020201          AND      r2,r2,#1              ;1767
000ccc  e7d3              B        |L9.3190|
                  |L9.3278|
000cce  5d61              LDRB     r1,[r4,r5]            ;1793
000cd0  b188              CBZ      r0,|L9.3318|
000cd2  eb020282          ADD      r2,r2,r2,LSL #2       ;1793
000cd6  eb060242          ADD      r2,r6,r2,LSL #1       ;1793
000cda  1c6d              ADDS     r5,r5,#1              ;1793
000cdc  440a              ADD      r2,r2,r1              ;1793
000cde  b2ad              UXTH     r5,r5                 ;1793
                  |L9.3296|
000ce0  1c40              ADDS     r0,r0,#1              ;1793
000ce2  b2c0              UXTB     r0,r0                 ;1780
                  |L9.3300|
000ce4  4298              CMP      r0,r3                 ;1780
000ce6  d3f2              BCC      |L9.3278|
000ce8  eebc0ac8          VCVT.U32.F32 s0,s16                ;1795
000cec  ee100a10          VMOV     r0,s0                 ;1795
000cf0  b2c1              UXTB     r1,r0                 ;1795
000cf2  2002              MOVS     r0,#2                 ;1795
000cf4  e7ac              B        |L9.3152|
                  |L9.3318|
000cf6  1c6d              ADDS     r5,r5,#1              ;1795
000cf8  3930              SUBS     r1,r1,#0x30           ;1784
000cfa  ee001a10          VMOV     s0,r1                 ;1784
000cfe  b2ad              UXTH     r5,r5                 ;1784
000d00  eeb88ac0          VCVT.F32.S32 s16,s0                ;1784
000d04  e7ec              B        |L9.3296|
                  |L9.3334|
000d06  490a              LDR      r1,|L9.3376|
000d08  2001              MOVS     r0,#1                 ;1821
000d0a  7008              STRB     r0,[r1,#0]            ;1821
000d0c  f7fffffe          BL       Write_Boot_Flag
000d10  2f01              CMP      r7,#1                 ;1823
000d12  d102              BNE      |L9.3354|
000d14  2037              MOVS     r0,#0x37              ;1825
000d16  f7fffffe          BL       JumpBoot
                  |L9.3354|
000d1a  f1b80f13          CMP      r8,#0x13              ;1945
000d1e  f4bfa988          BCS      |L9.50|
000d22  b033              ADD      sp,sp,#0xcc
000d24  1c6d              ADDS     r5,r5,#1              ;1945
000d26  ecbd8b02          VPOP     {d8}
000d2a  b2a8              UXTH     r0,r5                 ;1949
000d2c  e8bd8ff0          POP      {r4-r11,pc}
;;;1951   
                          ENDP

                  |L9.3376|
                          DCD      bootflag

                          AREA ||i.SetErr_ACK||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  SetErr_ACK PROC
;;;921    
;;;922    u16 SetErr_ACK(char *buf, u8 addr ,u8 ucErr)
000000  b5f8              PUSH     {r3-r7,lr}
;;;923    {
000002  4604              MOV      r4,r0
;;;924    		u16 i=0;
;;;925    		u8 len = 0;
;;;926    		char stradd[3] = {0};
000004  2000              MOVS     r0,#0
;;;927    		int addlen=0;
;;;928    		memset(buf,0,sizeof(buf));
000006  9000              STR      r0,[sp,#0]
000008  6020              STR      r0,[r4,#0]
00000a  4616              MOV      r6,r2                 ;923
;;;929        	buf[i++] = ChrStartS;
00000c  203e              MOVS     r0,#0x3e
00000e  7020              STRB     r0,[r4,#0]
;;;930    		sprintf(stradd,"%d",addr);
000010  460a              MOV      r2,r1
000012  a11a              ADR      r1,|L10.124|
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       __2sprintf
;;;931    		addlen=strlen(stradd);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       strlen
000020  4605              MOV      r5,r0
;;;932    		strncat(&buf[i],stradd,addlen);
000022  1c60              ADDS     r0,r4,#1
000024  462a              MOV      r2,r5
000026  4669              MOV      r1,sp
000028  f7fffffe          BL       strncat
00002c  1c6d              ADDS     r5,r5,#1
;;;933    		i+=addlen;
00002e  b2a8              UXTH     r0,r5
;;;934    		buf[i++] = '/';
000030  212f              MOVS     r1,#0x2f
000032  5421              STRB     r1,[r4,r0]
000034  1c40              ADDS     r0,r0,#1
000036  b285              UXTH     r5,r0
;;;935    		switch(ucErr)
000038  2e01              CMP      r6,#1
00003a  d008              BEQ      |L10.78|
00003c  2e02              CMP      r6,#2
00003e  d001              BEQ      |L10.68|
000040  2e03              CMP      r6,#3
000042  d015              BEQ      |L10.112|
                  |L10.68|
;;;936            {
;;;937              case 1:         //
;;;938              	   len = 9;
;;;939              	   memmove(&buf[i],"PARA ERR!",len);   
;;;940              	   break;
;;;941    	      case 2:         //
;;;942              	   len = 8;
;;;943              	   memmove(&buf[i],"CMD ERR!",len);   
;;;944              	   break;
;;;945    	      case 3:         //
;;;946              	   len = 8;
;;;947              	   memmove(&buf[i],"REM ERR!",len);   
;;;948              	   break;
;;;949    		  default:    
;;;950                   len = 8;
000044  2608              MOVS     r6,#8
;;;951              	   memmove(&buf[i],"CMD ERR!",len);   
000046  1960              ADDS     r0,r4,r5
000048  4632              MOV      r2,r6
00004a  a10d              ADR      r1,|L10.128|
;;;952                   break;
00004c  e003              B        |L10.86|
                  |L10.78|
00004e  2609              MOVS     r6,#9                 ;938
000050  1960              ADDS     r0,r4,r5              ;939
000052  4632              MOV      r2,r6                 ;939
000054  a10d              ADR      r1,|L10.140|
                  |L10.86|
000056  f7fffffe          BL       __aeabi_memmove
;;;953    	    }
;;;954    	    i+=len;
00005a  19a8              ADDS     r0,r5,r6
00005c  b280              UXTH     r0,r0
;;;955    		buf[i++] = ChrEndR;
00005e  210d              MOVS     r1,#0xd
000060  5421              STRB     r1,[r4,r0]
000062  1c40              ADDS     r0,r0,#1
000064  b280              UXTH     r0,r0
;;;956    		buf[i++] = ChrEndS;
000066  210a              MOVS     r1,#0xa
000068  5421              STRB     r1,[r4,r0]
00006a  1c40              ADDS     r0,r0,#1
00006c  b280              UXTH     r0,r0
;;;957    		return i;
;;;958    }
00006e  bdf8              POP      {r3-r7,pc}
                  |L10.112|
000070  2608              MOVS     r6,#8                 ;946
000072  1960              ADDS     r0,r4,r5              ;947
000074  4632              MOV      r2,r6                 ;947
000076  a108              ADR      r1,|L10.152|
000078  e7ed              B        |L10.86|
;;;959    
                          ENDP

00007a  0000              DCW      0x0000
                  |L10.124|
00007c  256400            DCB      "%d",0
00007f  00                DCB      0
                  |L10.128|
000080  434d4420          DCB      "CMD ERR!",0
000084  45525221
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L10.140|
00008c  50415241          DCB      "PARA ERR!",0
000090  20455252
000094  2100    
000096  00                DCB      0
000097  00                DCB      0
                  |L10.152|
000098  52454d20          DCB      "REM ERR!",0
00009c  45525221
0000a0  00      
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0

                          AREA ||i.SetListPC||, CODE, READONLY, ALIGN=2

                  SetListPC PROC
;;;161    
;;;162    void SetListPC(void)
000000  4804              LDR      r0,|L11.20|
;;;163    {
000002  b510              PUSH     {r4,lr}
;;;164    	SetPowerC(Para.CDC_Limit_C);
000004  f8b00066          LDRH     r0,[r0,#0x66]  ; Para
000008  f7fffffe          BL       SetPowerC
;;;165    	listsend = 3;
00000c  4902              LDR      r1,|L11.24|
00000e  2003              MOVS     r0,#3
000010  7248              STRB     r0,[r1,#9]
;;;166    }
000012  bd10              POP      {r4,pc}
;;;167    
                          ENDP

                  |L11.20|
                          DCD      Para
                  |L11.24|
                          DCD      ||.data||

                          AREA ||i.SetListPS||, CODE, READONLY, ALIGN=2

                  SetListPS PROC
;;;168    
;;;169    void SetListPS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;170    {
;;;171    	if(mainswitch == 1)
000002  4c0f              LDR      r4,|L12.64|
000004  79a0              LDRB     r0,[r4,#6]  ; mainswitch
;;;172    	{
;;;173    		GPIO_SetBits(GPIOE,GPIO_Pin_2);
000006  4d0f              LDR      r5,|L12.68|
000008  2801              CMP      r0,#1                 ;171
00000a  d109              BNE      |L12.32|
00000c  2104              MOVS     r1,#4
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       GPIO_SetBits
;;;174    		Delay_ms(POWER_SW_DELAY);
000014  200a              MOVS     r0,#0xa
000016  f7fffffe          BL       Delay_ms
;;;175    		PowerSwitch(mainswitch);
00001a  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00001c  f7fffffe          BL       PowerSwitch
                  |L12.32|
;;;176    	}
;;;177    	
;;;178    	if(mainswitch == 0)
000020  79a0              LDRB     r0,[r4,#6]  ; mainswitch
000022  b948              CBNZ     r0,|L12.56|
;;;179    	{
;;;180    		PowerSwitch(mainswitch);
000024  79a0              LDRB     r0,[r4,#6]  ; mainswitch
000026  f7fffffe          BL       PowerSwitch
;;;181    		Delay_ms(POWER_SW_DELAY);
00002a  200a              MOVS     r0,#0xa
00002c  f7fffffe          BL       Delay_ms
;;;182    		GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
000030  2104              MOVS     r1,#4
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       GPIO_ResetBits
                  |L12.56|
;;;183    	}
;;;184    	
;;;185    	listsend = 0;
000038  2000              MOVS     r0,#0
00003a  7260              STRB     r0,[r4,#9]
;;;186    }
00003c  bd70              POP      {r4-r6,pc}
;;;187    
                          ENDP

00003e  0000              DCW      0x0000
                  |L12.64|
                          DCD      ||.data||
                  |L12.68|
                          DCD      0x40021000

                          AREA ||i.SetListPV||, CODE, READONLY, ALIGN=2

                  SetListPV PROC
;;;155    }
;;;156    void SetListPV(void)
000000  4804              LDR      r0,|L13.20|
;;;157    {
000002  b510              PUSH     {r4,lr}
;;;158    	SetPowerV(Para.CDC_OutPut_V);
000004  f8b00064          LDRH     r0,[r0,#0x64]  ; Para
000008  f7fffffe          BL       SetPowerV
;;;159    	listsend = 2;
00000c  4902              LDR      r1,|L13.24|
00000e  2002              MOVS     r0,#2
000010  7248              STRB     r0,[r1,#9]
;;;160    }
000012  bd10              POP      {r4,pc}
;;;161    
                          ENDP

                  |L13.20|
                          DCD      Para
                  |L13.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerC||, CODE, READONLY, ALIGN=2

                  SetPowerC PROC
;;;114    
;;;115    void SetPowerC(vu16 powc)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;116    {
;;;117    	MasterSendbuf[0] = 0x01;
000002  4c12              LDR      r4,|L14.76|
000004  2001              MOVS     r0,#1
000006  7020              STRB     r0,[r4,#0]
;;;118    	MasterSendbuf[1] = 0x06;
000008  2006              MOVS     r0,#6
00000a  7060              STRB     r0,[r4,#1]
;;;119    	MasterSendbuf[2] = 0x00;
00000c  2000              MOVS     r0,#0
00000e  70a0              STRB     r0,[r4,#2]
;;;120    	MasterSendbuf[3] = 0x31;
000010  2031              MOVS     r0,#0x31
000012  70e0              STRB     r0,[r4,#3]
;;;121    	MasterSendbuf[4] = (u8)(powc/10>>8);
000014  f8bd1000          LDRH     r1,[sp,#0]
000018  200a              MOVS     r0,#0xa
00001a  fbb1f1f0          UDIV     r1,r1,r0
00001e  0a09              LSRS     r1,r1,#8
000020  7121              STRB     r1,[r4,#4]
;;;122    	MasterSendbuf[5] = (u8)(powc/10);
000022  f8bd1000          LDRH     r1,[sp,#0]
000026  fbb1f0f0          UDIV     r0,r1,r0
00002a  7160              STRB     r0,[r4,#5]
;;;123    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00002c  2106              MOVS     r1,#6
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       Hardware_CRC
000034  71a0              STRB     r0,[r4,#6]
;;;124    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000036  2106              MOVS     r1,#6
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       Hardware_CRC
00003e  0a00              LSRS     r0,r0,#8
000040  71e0              STRB     r0,[r4,#7]
;;;125    	USART3WriteDMA(8);
000042  e8bd4038          POP      {r3-r5,lr}
000046  2008              MOVS     r0,#8
000048  f7ffbffe          B.W      USART3WriteDMA
;;;126    }
;;;127    
                          ENDP

                  |L14.76|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.SetPowerModeC||, CODE, READONLY, ALIGN=2

                  SetPowerModeC PROC
;;;133    
;;;134    void SetPowerModeC(void)
000000  4804              LDR      r0,|L15.20|
;;;135    {
000002  b510              PUSH     {r4,lr}
;;;136    	SetPowerC(Para.POWER_Limit_C);
000004  f8b00056          LDRH     r0,[r0,#0x56]  ; Para
000008  f7fffffe          BL       SetPowerC
;;;137    	sendwait = 3;
00000c  4902              LDR      r1,|L15.24|
00000e  2003              MOVS     r0,#3
000010  7208              STRB     r0,[r1,#8]
;;;138    }
000012  bd10              POP      {r4,pc}
;;;139    
                          ENDP

                  |L15.20|
                          DCD      Para
                  |L15.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerModeS||, CODE, READONLY, ALIGN=2

                  SetPowerModeS PROC
;;;139    
;;;140    void SetPowerModeS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;141    {
;;;142    	if(mainswitch == 1)
000002  4c10              LDR      r4,|L16.68|
000004  79a0              LDRB     r0,[r4,#6]  ; mainswitch
;;;143    	{
;;;144    		GPIO_SetBits(GPIOE,GPIO_Pin_2);
000006  4d10              LDR      r5,|L16.72|
000008  2801              CMP      r0,#1                 ;142
00000a  d002              BEQ      |L16.18|
;;;145    		Delay_ms(POWER_SW_DELAY);
;;;146    		PowerSwitch(mainswitch);
;;;147    	}else if(mainswitch == 0)
00000c  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00000e  b158              CBZ      r0,|L16.40|
000010  e014              B        |L16.60|
                  |L16.18|
000012  2104              MOVS     r1,#4                 ;144
000014  4628              MOV      r0,r5                 ;144
000016  f7fffffe          BL       GPIO_SetBits
00001a  200a              MOVS     r0,#0xa               ;145
00001c  f7fffffe          BL       Delay_ms
000020  79a0              LDRB     r0,[r4,#6]            ;146  ; mainswitch
000022  f7fffffe          BL       PowerSwitch
000026  e009              B        |L16.60|
                  |L16.40|
;;;148    	{
;;;149    		PowerSwitch(mainswitch);
000028  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00002a  f7fffffe          BL       PowerSwitch
;;;150    		Delay_ms(POWER_SW_DELAY);
00002e  200a              MOVS     r0,#0xa
000030  f7fffffe          BL       Delay_ms
;;;151    		GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
000034  2104              MOVS     r1,#4
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       GPIO_ResetBits
                  |L16.60|
;;;152    	}
;;;153    	
;;;154    	sendwait = 0;
00003c  2000              MOVS     r0,#0
00003e  7220              STRB     r0,[r4,#8]
;;;155    }
000040  bd70              POP      {r4-r6,pc}
;;;156    void SetListPV(void)
                          ENDP

000042  0000              DCW      0x0000
                  |L16.68|
                          DCD      ||.data||
                  |L16.72|
                          DCD      0x40021000

                          AREA ||i.SetPowerModeV||, CODE, READONLY, ALIGN=2

                  SetPowerModeV PROC
;;;127    
;;;128    void SetPowerModeV(void)
000000  4804              LDR      r0,|L17.20|
;;;129    {
000002  b510              PUSH     {r4,lr}
;;;130    	SetPowerV(Para.POWER_OutPut_V);
000004  f8b00054          LDRH     r0,[r0,#0x54]  ; Para
000008  f7fffffe          BL       SetPowerV
;;;131    	sendwait = 2;
00000c  4902              LDR      r1,|L17.24|
00000e  2002              MOVS     r0,#2
000010  7208              STRB     r0,[r1,#8]
;;;132    }
000012  bd10              POP      {r4,pc}
;;;133    
                          ENDP

                  |L17.20|
                          DCD      Para
                  |L17.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerV||, CODE, READONLY, ALIGN=2

                  SetPowerV PROC
;;;101    }
;;;102    void SetPowerV(vu16 powv)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;103    {
;;;104    	MasterSendbuf[0] = 0x01;
000002  4c12              LDR      r4,|L18.76|
000004  2001              MOVS     r0,#1
000006  7020              STRB     r0,[r4,#0]
;;;105    	MasterSendbuf[1] = 0x06;
000008  2006              MOVS     r0,#6
00000a  7060              STRB     r0,[r4,#1]
;;;106    	MasterSendbuf[2] = 0x00;
00000c  2000              MOVS     r0,#0
00000e  70a0              STRB     r0,[r4,#2]
;;;107    	MasterSendbuf[3] = 0x30;
000010  2030              MOVS     r0,#0x30
000012  70e0              STRB     r0,[r4,#3]
;;;108    	MasterSendbuf[4] = (u8)(powv/10>>8);
000014  f8bd1000          LDRH     r1,[sp,#0]
000018  200a              MOVS     r0,#0xa
00001a  fbb1f1f0          UDIV     r1,r1,r0
00001e  0a09              LSRS     r1,r1,#8
000020  7121              STRB     r1,[r4,#4]
;;;109    	MasterSendbuf[5] = (u8)(powv/10);
000022  f8bd1000          LDRH     r1,[sp,#0]
000026  fbb1f0f0          UDIV     r0,r1,r0
00002a  7160              STRB     r0,[r4,#5]
;;;110    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00002c  2106              MOVS     r1,#6
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       Hardware_CRC
000034  71a0              STRB     r0,[r4,#6]
;;;111    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000036  2106              MOVS     r1,#6
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       Hardware_CRC
00003e  0a00              LSRS     r0,r0,#8
000040  71e0              STRB     r0,[r4,#7]
;;;112    	USART3WriteDMA(8);
000042  e8bd4038          POP      {r3-r5,lr}
000046  2008              MOVS     r0,#8
000048  f7ffbffe          B.W      USART3WriteDMA
;;;113    }
;;;114    
                          ENDP

                  |L18.76|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.UART1_Send||, CODE, READONLY, ALIGN=2

                  UART1_Send PROC
;;;2343   
;;;2344   void UART1_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2345   {
;;;2346   	static vu8 UART_Buffer_Send_pointer=0;
;;;2347   		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L19.72|
000004  78e0              LDRB     r0,[r4,#3]  ; UART_Buffer_Send_pointer
000006  7921              LDRB     r1,[r4,#4]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L19.56|
;;;2348            {
;;;2349   				 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L19.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L19.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L19.54|
;;;2350   				 {
;;;2351   					USART_SendData(USART1,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  78e1              LDRB     r1,[r4,#3]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  4d0d              LDR      r5,|L19.84|
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       USART_SendData
                  |L19.36|
;;;2352   					while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);//等待发送完成
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L19.36|
;;;2353   					UART_Buffer_Send_pointer++;
000030  78e0              LDRB     r0,[r4,#3]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  70e0              STRB     r0,[r4,#3]
                  |L19.54|
;;;2354   				 }
;;;2355            }
;;;2356   		else 
;;;2357   		{
;;;2358   			UART_Buffer_Send_pointer=0;
;;;2359   			UART_SEND_flag=0;//发送完成一帧数据
;;;2360   		}
;;;2361   }
000036  bd70              POP      {r4-r6,pc}
                  |L19.56|
000038  2000              MOVS     r0,#0                 ;2358
00003a  70e0              STRB     r0,[r4,#3]            ;2358
00003c  4806              LDR      r0,|L19.88|
00003e  6801              LDR      r1,[r0,#0]            ;2359  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;2359
000044  6001              STR      r1,[r0,#0]            ;2359  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;2362   
                          ENDP

                  |L19.72|
                          DCD      ||.data||
                  |L19.76|
                          DCD      ||area_number.31||
                  |L19.80|
                          DCD      ADDR
                  |L19.84|
                          DCD      0x40011000
                  |L19.88|
                          DCD      flagA

                          AREA ||i.UART2_Send||, CODE, READONLY, ALIGN=2

                  UART2_Send PROC
;;;2324   }
;;;2325   void UART2_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2326   {
;;;2327   	static vu8 UART_Buffer_Send_pointer=0;
;;;2328   		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L20.72|
000004  78a0              LDRB     r0,[r4,#2]  ; UART_Buffer_Send_pointer
000006  7921              LDRB     r1,[r4,#4]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L20.56|
;;;2329            {
;;;2330   					 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L20.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L20.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L20.54|
;;;2331   					 {
;;;2332   						USART_SendData(USART2,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  78a1              LDRB     r1,[r4,#2]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  480d              LDR      r0,|L20.84|
00001e  f7fffffe          BL       USART_SendData
;;;2333   						while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);//等待发送完成
000022  4d0d              LDR      r5,|L20.88|
                  |L20.36|
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L20.36|
;;;2334   						UART_Buffer_Send_pointer++;
000030  78a0              LDRB     r0,[r4,#2]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  70a0              STRB     r0,[r4,#2]
                  |L20.54|
;;;2335   					}
;;;2336            }
;;;2337   		else 
;;;2338   		{
;;;2339   			UART_Buffer_Send_pointer=0;
;;;2340   			UART_SEND_flag=0;//发送完成一帧数据
;;;2341   		}
;;;2342   }
000036  bd70              POP      {r4-r6,pc}
                  |L20.56|
000038  2000              MOVS     r0,#0                 ;2339
00003a  70a0              STRB     r0,[r4,#2]            ;2339
00003c  4807              LDR      r0,|L20.92|
00003e  6801              LDR      r1,[r0,#0]            ;2340  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;2340
000044  6001              STR      r1,[r0,#0]            ;2340  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;2343   
                          ENDP

                  |L20.72|
                          DCD      ||.data||
                  |L20.76|
                          DCD      ||area_number.31||
                  |L20.80|
                          DCD      ADDR
                  |L20.84|
                          DCD      0x40004400
                  |L20.88|
                          DCD      0x40011000
                  |L20.92|
                          DCD      flagA

                          AREA ||i.USART2_Configuration||, CODE, READONLY, ALIGN=2

                  USART2_Configuration PROC
;;;2020   
;;;2021   void USART2_Configuration(void)//串口初始化函数
000000  b570              PUSH     {r4-r6,lr}
;;;2022   {  
;;;2023   	GPIO_InitTypeDef GPIO_InitStructure;
;;;2024   	USART_InitTypeDef USART_InitStructure;
;;;2025   	
;;;2026   	/* config USART1 clock */
;;;2027   	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
000002  2101              MOVS     r1,#1
000004  b088              SUB      sp,sp,#0x20           ;2022
000006  0448              LSLS     r0,r1,#17
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;2028   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);
00000c  4e2a              LDR      r6,|L21.184|
00000e  2207              MOVS     r2,#7
000010  2102              MOVS     r1,#2
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2029   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);
000018  2207              MOVS     r2,#7
00001a  2103              MOVS     r1,#3
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2030   	/* USART1 GPIO config */
;;;2031   	/* Configure USART1 Tx (PA.02) as alternate function push-pull */
;;;2032   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;2033   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000022  2502              MOVS     r5,#2
000024  2004              MOVS     r0,#4                 ;2032
000026  f88d5004          STRB     r5,[sp,#4]
;;;2034   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
00002c  9000              STR      r0,[sp,#0]            ;2033
00002e  f88d4006          STRB     r4,[sp,#6]
;;;2035   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f88d5005          STRB     r5,[sp,#5]
;;;2036   	GPIO_Init(GPIOA, &GPIO_InitStructure);    
000036  4669              MOV      r1,sp
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GPIO_Init
;;;2037   	/* Configure USART1 Rx (PA.03) as input floating */
;;;2038   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
00003e  2008              MOVS     r0,#8
;;;2039   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000040  9000              STR      r0,[sp,#0]
000042  f88d5004          STRB     r5,[sp,#4]
;;;2040   	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;2041   	
;;;2042   	/* USART1 mode config */
;;;2043   	USART_InitStructure.USART_BaudRate = 115200;
00004e  f44f30e1          MOV      r0,#0x1c200
;;;2044   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000052  9002              STR      r0,[sp,#8]
;;;2045   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2046   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000054  f8ad4010          STRH     r4,[sp,#0x10]
;;;2047   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2048   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
;;;2049   	USART_Init(USART2, &USART_InitStructure);
00005a  4d18              LDR      r5,|L21.188|
00005c  f8ad400c          STRH     r4,[sp,#0xc]          ;2044
000060  f8ad0012          STRH     r0,[sp,#0x12]         ;2048
000064  f8ad400e          STRH     r4,[sp,#0xe]          ;2045
000068  f8ad4014          STRH     r4,[sp,#0x14]         ;2047
00006c  a902              ADD      r1,sp,#8
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       USART_Init
;;;2050   	
;;;2051   	/******使能串口接收中断******************/
;;;2052   	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
000074  2201              MOVS     r2,#1
000076  f2405125          MOV      r1,#0x525
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_ITConfig
;;;2053   //	USART_ITConfig(USART2, USART_IT_ORE, ENABLE);	
;;;2054   	USART_Cmd(USART2, ENABLE);//使能串口1
000080  2101              MOVS     r1,#1
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USART_Cmd
;;;2055     USART_ClearFlag(USART2, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       USART_ClearFlag
000090  f44f60e0          MOV      r0,#0x700
000094  f7fffffe          BL       NVIC_PriorityGroupConfig
000098  2026              MOVS     r0,#0x26
00009a  f88d0018          STRB     r0,[sp,#0x18]
00009e  f88d4019          STRB     r4,[sp,#0x19]
0000a2  2001              MOVS     r0,#1
0000a4  f88d001a          STRB     r0,[sp,#0x1a]
0000a8  f88d001b          STRB     r0,[sp,#0x1b]
0000ac  a806              ADD      r0,sp,#0x18
0000ae  f7fffffe          BL       NVIC_Init
;;;2056     
;;;2057     USART2_NVIC_Config();//串口中断配置
;;;2058   }
0000b2  b008              ADD      sp,sp,#0x20
0000b4  bd70              POP      {r4-r6,pc}
;;;2059   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L21.184|
                          DCD      0x40020000
                  |L21.188|
                          DCD      0x40004400

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;2282   
;;;2283   void USART2_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2284   {
;;;2285   	u8 Res;
;;;2286    	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
000002  4c1c              LDR      r4,|L22.116|
000004  f2405525          MOV      r5,#0x525
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       USART_GetITStatus
000010  2800              CMP      r0,#0
000012  d013              BEQ      |L22.60|
;;;2287   	{
;;;2288   		USART_ClearITPendingBit(USART2,USART_IT_RXNE);
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       USART_ClearITPendingBit
;;;2289   		Res=USART_ReceiveData(USART2);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       USART_ReceiveData
;;;2290   
;;;2291   		if((USART_RX_STA&0x8000)==0)//接收未完成
000022  4a15              LDR      r2,|L22.120|
000024  b2c1              UXTB     r1,r0                 ;2289
000026  89d0              LDRH     r0,[r2,#0xe]  ; USART_RX_STA
000028  0403              LSLS     r3,r0,#16
00002a  d407              BMI      |L22.60|
;;;2292   		{
;;;2293   		if(USART_RX_STA&0x4000)//接收到了0x0d
;;;2294   		{
;;;2295   			if(Res!=0x0a)
;;;2296   				USART_RX_STA=0;//接收错误,重新开始
;;;2297   			else 
;;;2298   			{
;;;2299   		//		SerialRemoteHandleL(USART_RX_STA,USART_RX_BUF);
;;;2300   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
00002c  4b13              LDR      r3,|L22.124|
00002e  0445              LSLS     r5,r0,#17             ;2293
000030  f04f0400          MOV      r4,#0                 ;2293
000034  d50b              BPL      |L22.78|
000036  290a              CMP      r1,#0xa               ;2295
000038  d001              BEQ      |L22.62|
                  |L22.58|
00003a  81d4              STRH     r4,[r2,#0xe]          ;2296
                  |L22.60|
;;;2301   				USART_RX_STA++;
;;;2302   				USART_RX_CNT = USART_RX_STA;
;;;2303   				USART_RX_STA|=0x8000;	//接收完成了 			  //接收到回车的后字节  置位状态寄存器 
;;;2304   			}
;;;2305   		}
;;;2306   		else //还没收到0X0D
;;;2307   		{	
;;;2308   			if(Res==0x0d)
;;;2309   			{
;;;2310   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
;;;2311   				USART_RX_STA++;	
;;;2312   				USART_RX_STA|=0x4000;					 //接收到回车的前一字节  置位状态寄存器
;;;2313   			}
;;;2314   			else
;;;2315   				{
;;;2316   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
;;;2317   					USART_RX_STA++;									//长度+1 为下一次做准备
;;;2318   				if(USART_RX_STA>(USART_REC_LEN-1))
;;;2319   					USART_RX_STA=0;//接收数据错误,重新开始接收	  
;;;2320   				}		 
;;;2321   			}
;;;2322   		} 
;;;2323   	}
;;;2324   }
00003c  bd70              POP      {r4-r6,pc}
                  |L22.62|
00003e  f3c0040d          UBFX     r4,r0,#0,#14          ;2300
000042  1c40              ADDS     r0,r0,#1              ;2300
000044  5519              STRB     r1,[r3,r4]            ;2300
000046  8210              STRH     r0,[r2,#0x10]         ;2302
000048  f4404000          ORR      r0,r0,#0x8000         ;2303
00004c  e010              B        |L22.112|
                  |L22.78|
00004e  290d              CMP      r1,#0xd               ;2308
000050  d008              BEQ      |L22.100|
000052  f3c0050d          UBFX     r5,r0,#0,#14          ;2316
000056  1c40              ADDS     r0,r0,#1              ;2316
000058  b280              UXTH     r0,r0                 ;2317
00005a  5559              STRB     r1,[r3,r5]            ;2316
00005c  81d0              STRH     r0,[r2,#0xe]          ;2317
00005e  28c7              CMP      r0,#0xc7              ;2318
000060  d8eb              BHI      |L22.58|
000062  bd70              POP      {r4-r6,pc}
                  |L22.100|
000064  f3c0040d          UBFX     r4,r0,#0,#14          ;2310
000068  1c40              ADDS     r0,r0,#1              ;2310
00006a  5519              STRB     r1,[r3,r4]            ;2310
00006c  f4404080          ORR      r0,r0,#0x4000         ;2312
                  |L22.112|
000070  81d0              STRH     r0,[r2,#0xe]          ;2303
000072  bd70              POP      {r4-r6,pc}
;;;2325   void UART2_Send(void)
                          ENDP

                  |L22.116|
                          DCD      0x40004400
                  |L22.120|
                          DCD      ||.data||
                  |L22.124|
                          DCD      ||area_number.31||+0x14

                          AREA ||i.USART3HANDLE||, CODE, READONLY, ALIGN=2

                  USART3HANDLE PROC
;;;213    
;;;214    void USART3HANDLE(void)
000000  b538              PUSH     {r3-r5,lr}
;;;215    {
;;;216    	vu16 crcres;
;;;217    
;;;218    	if(MasterRecbuf[0] == 0x01)
000002  4c28              LDR      r4,|L23.164|
;;;219    	{
;;;220    		if(MasterRecbuf[1] == 0x03)
;;;221    		{
;;;222    			crcres = (MasterRecbuf[8] << 8) + MasterRecbuf[7];
;;;223    			if(crcres == Hardware_CRC(MasterRecbuf,7))
;;;224    			{
;;;225    				 
;;;226    				Para.CPOW_Voltage = (MasterRecbuf[3] << 8) + MasterRecbuf[4];
;;;227    				Para.CCurrent = (MasterRecbuf[5] << 8) + MasterRecbuf[6];
;;;228    				memset(MasterRecbuf,0,sizeof(MasterRecbuf));
;;;229    			}
;;;230    				if(sendwait == 3)
000004  4d28              LDR      r5,|L23.168|
000006  7820              LDRB     r0,[r4,#0]            ;218  ; MasterRecbuf
000008  2801              CMP      r0,#1                 ;218
00000a  d148              BNE      |L23.158|
00000c  7860              LDRB     r0,[r4,#1]            ;220  ; MasterRecbuf
00000e  2803              CMP      r0,#3                 ;220
000010  d002              BEQ      |L23.24|
;;;231    				{
;;;232    					SetPowerModeS();
;;;233    				}
;;;234    				if(sendwait == 2)
;;;235    				{
;;;236    					SetPowerModeC();
;;;237    				}
;;;238    				if(sendwait == 1)
;;;239    				{
;;;240    					SetPowerModeV();
;;;241    				}
;;;242    				if(listsend == 3)
;;;243    				{
;;;244    					SetListPS();
;;;245    				}
;;;246    				if(listsend == 2)
;;;247    				{
;;;248    					SetListPC();
;;;249    				}
;;;250    				if(listsend == 1)
;;;251    				{
;;;252    					SetListPV();
;;;253    				}
;;;254    		}else if(MasterRecbuf[1] == 0x06){
000012  2806              CMP      r0,#6
000014  d03c              BEQ      |L23.144|
000016  e042              B        |L23.158|
                  |L23.24|
000018  79e1              LDRB     r1,[r4,#7]            ;222  ; MasterRecbuf
00001a  7a20              LDRB     r0,[r4,#8]            ;222  ; MasterRecbuf
00001c  eb012000          ADD      r0,r1,r0,LSL #8       ;222
000020  f8ad0000          STRH     r0,[sp,#0]            ;222
000024  2107              MOVS     r1,#7                 ;223
000026  481f              LDR      r0,|L23.164|
000028  f7fffffe          BL       Hardware_CRC
00002c  f8bd1000          LDRH     r1,[sp,#0]            ;223
000030  4288              CMP      r0,r1                 ;223
000032  d10e              BNE      |L23.82|
000034  7920              LDRB     r0,[r4,#4]            ;226  ; MasterRecbuf
000036  78e1              LDRB     r1,[r4,#3]            ;226  ; MasterRecbuf
000038  eb002101          ADD      r1,r0,r1,LSL #8       ;226
00003c  481b              LDR      r0,|L23.172|
00003e  6281              STR      r1,[r0,#0x28]         ;226  ; Para
000040  79a1              LDRB     r1,[r4,#6]            ;227  ; MasterRecbuf
000042  7962              LDRB     r2,[r4,#5]            ;227  ; MasterRecbuf
000044  eb012102          ADD      r1,r1,r2,LSL #8       ;227
000048  6301              STR      r1,[r0,#0x30]         ;227  ; Para
00004a  2180              MOVS     r1,#0x80              ;228
00004c  4815              LDR      r0,|L23.164|
00004e  f7fffffe          BL       __aeabi_memclr
                  |L23.82|
000052  7a28              LDRB     r0,[r5,#8]            ;230  ; sendwait
000054  2803              CMP      r0,#3                 ;230
000056  d101              BNE      |L23.92|
000058  f7fffffe          BL       SetPowerModeS
                  |L23.92|
00005c  7a28              LDRB     r0,[r5,#8]            ;234  ; sendwait
00005e  2802              CMP      r0,#2                 ;234
000060  d101              BNE      |L23.102|
000062  f7fffffe          BL       SetPowerModeC
                  |L23.102|
000066  7a28              LDRB     r0,[r5,#8]            ;238  ; sendwait
000068  2801              CMP      r0,#1                 ;238
00006a  d101              BNE      |L23.112|
00006c  f7fffffe          BL       SetPowerModeV
                  |L23.112|
000070  7a68              LDRB     r0,[r5,#9]            ;242  ; listsend
000072  2803              CMP      r0,#3                 ;242
000074  d101              BNE      |L23.122|
000076  f7fffffe          BL       SetListPS
                  |L23.122|
00007a  7a68              LDRB     r0,[r5,#9]            ;246  ; listsend
00007c  2802              CMP      r0,#2                 ;246
00007e  d101              BNE      |L23.132|
000080  f7fffffe          BL       SetListPC
                  |L23.132|
000084  7a68              LDRB     r0,[r5,#9]            ;250  ; listsend
000086  2801              CMP      r0,#1                 ;250
000088  d109              BNE      |L23.158|
00008a  f7fffffe          BL       SetListPV
00008e  e006              B        |L23.158|
                  |L23.144|
;;;255    			memset(MasterRecbuf,0,sizeof(MasterRecbuf));
000090  2180              MOVS     r1,#0x80
000092  4804              LDR      r0,|L23.164|
000094  f7fffffe          BL       __aeabi_memclr
;;;256    			watchtest ++;
000098  6b68              LDR      r0,[r5,#0x34]  ; watchtest
00009a  1c40              ADDS     r0,r0,#1
00009c  6368              STR      r0,[r5,#0x34]  ; watchtest
                  |L23.158|
;;;257    		}
;;;258    	}	
;;;259    
;;;260    	
;;;261    	USART3_Recive_flg = 0;
00009e  2000              MOVS     r0,#0
0000a0  7068              STRB     r0,[r5,#1]
;;;262    }
0000a2  bd38              POP      {r3-r5,pc}
;;;263    
                          ENDP

                  |L23.164|
                          DCD      ||area_number.31||+0x15c
                  |L23.168|
                          DCD      ||.data||
                  |L23.172|
                          DCD      Para

                          AREA ||i.USART3WriteDMA||, CODE, READONLY, ALIGN=2

                  USART3WriteDMA PROC
;;;2225   
;;;2226   void USART3WriteDMA(u16 len)
000000  b570              PUSH     {r4-r6,lr}
;;;2227   {
000002  4605              MOV      r5,r0
;;;2228       USART_ClearFlag(USART3, USART_FLAG_TC);     //串口发送准备
000004  2140              MOVS     r1,#0x40
000006  4809              LDR      r0,|L24.44|
000008  f7fffffe          BL       USART_ClearFlag
;;;2229   	DMA_Cmd(DMA1_Stream3, DISABLE);//关闭DMA 数据流3
00000c  4c08              LDR      r4,|L24.48|
00000e  2100              MOVS     r1,#0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       DMA_Cmd
;;;2230       DMA_SetCurrDataCounter(DMA1_Stream3,len);//设置DMA发生长度
000016  4629              MOV      r1,r5
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       DMA_SetCurrDataCounter
;;;2231   	DMA_Cmd(DMA1_Stream3, ENABLE);// 打开DMA 数据流3
00001e  4620              MOV      r0,r4
000020  e8bd4070          POP      {r4-r6,lr}
000024  2101              MOVS     r1,#1
000026  f7ffbffe          B.W      DMA_Cmd
;;;2232      
;;;2233   }
;;;2234   
                          ENDP

00002a  0000              DCW      0x0000
                  |L24.44|
                          DCD      0x40004800
                  |L24.48|
                          DCD      0x40026058

                          AREA ||i.USART3_Configuration||, CODE, READONLY, ALIGN=2

                  USART3_Configuration PROC
;;;2172   
;;;2173   void USART3_Configuration()//???????
000000  b570              PUSH     {r4-r6,lr}
;;;2174   {  
;;;2175       GPIO_InitTypeDef GPIO_InitStructure;
;;;2176   	USART_InitTypeDef USART_InitStructure;
;;;2177   	
;;;2178   	/* config USART1 clock */
;;;2179   	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
000002  2101              MOVS     r1,#1
000004  b088              SUB      sp,sp,#0x20           ;2174
000006  0488              LSLS     r0,r1,#18
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;2180   //    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE); //?? GPIOA ??
;;;2181       
;;;2182   	GPIO_PinAFConfig(GPIOD,GPIO_PinSource8,GPIO_AF_USART3);
00000c  4c2a              LDR      r4,|L25.184|
00000e  2207              MOVS     r2,#7
000010  2108              MOVS     r1,#8
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2183   	GPIO_PinAFConfig(GPIOD,GPIO_PinSource9,GPIO_AF_USART3);
000018  2207              MOVS     r2,#7
00001a  2109              MOVS     r1,#9
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2184       
;;;2185   
;;;2186       
;;;2187       
;;;2188   	/* USART1 GPIO config */
;;;2189   	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;2190   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
000022  15a0              ASRS     r0,r4,#22
;;;2191   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000024  2502              MOVS     r5,#2
000026  9004              STR      r0,[sp,#0x10]
000028  f88d5014          STRB     r5,[sp,#0x14]
;;;2192   //     GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //??????
;;;2193   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00002c  f88d5015          STRB     r5,[sp,#0x15]
;;;2194   	GPIO_Init(GPIOD, &GPIO_InitStructure);    
000030  a904              ADD      r1,sp,#0x10
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       GPIO_Init
;;;2195   	/* Configure USART1 Rx (PA.10) as input floating */
;;;2196   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
000038  1560              ASRS     r0,r4,#21
;;;2197       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00003a  9004              STR      r0,[sp,#0x10]
00003c  f88d5014          STRB     r5,[sp,#0x14]
;;;2198   	GPIO_Init(GPIOD, &GPIO_InitStructure);
000040  a904              ADD      r1,sp,#0x10
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       GPIO_Init
;;;2199       
;;;2200   
;;;2201   	
;;;2202   	/* USART1 mode config */
;;;2203   	USART_InitStructure.USART_BaudRate = 9600;
;;;2204   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000048  2400              MOVS     r4,#0
00004a  f44f5016          MOV      r0,#0x2580            ;2203
00004e  9000              STR      r0,[sp,#0]
;;;2205   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2206   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000050  f8ad4008          STRH     r4,[sp,#8]
;;;2207   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2208   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000054  200c              MOVS     r0,#0xc
;;;2209   	USART_Init(USART3, &USART_InitStructure);
000056  4e19              LDR      r6,|L25.188|
000058  f8ad4004          STRH     r4,[sp,#4]            ;2204
00005c  f8ad000a          STRH     r0,[sp,#0xa]          ;2208
000060  f8ad4006          STRH     r4,[sp,#6]            ;2205
000064  f8ad400c          STRH     r4,[sp,#0xc]          ;2207
000068  4669              MOV      r1,sp
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       USART_Init
;;;2210       
;;;2211   
;;;2212   	
;;;2213   	/******????????******************/
;;;2214   	USART_ITConfig(USART3, USART_IT_IDLE, ENABLE);
000070  2201              MOVS     r2,#1
000072  f2404124          MOV      r1,#0x424
000076  4630              MOV      r0,r6
000078  f7fffffe          BL       USART_ITConfig
00007c  f44f60e0          MOV      r0,#0x700
000080  f7fffffe          BL       NVIC_PriorityGroupConfig
000084  2027              MOVS     r0,#0x27
000086  f88d0018          STRB     r0,[sp,#0x18]
00008a  f88d4019          STRB     r4,[sp,#0x19]
00008e  f88d501a          STRB     r5,[sp,#0x1a]
000092  2001              MOVS     r0,#1
000094  f88d001b          STRB     r0,[sp,#0x1b]
000098  a806              ADD      r0,sp,#0x18
00009a  f7fffffe          BL       NVIC_Init
;;;2215   	USART3_NVIC_Config();//??????
;;;2216   	USART3_DMA_init();
00009e  f7fffffe          BL       USART3_DMA_init
;;;2217   	USART_Cmd(USART3, ENABLE);//????1
0000a2  2101              MOVS     r1,#1
0000a4  4630              MOV      r0,r6
0000a6  f7fffffe          BL       USART_Cmd
;;;2218       USART_ClearFlag(USART3, USART_FLAG_TC);
0000aa  2140              MOVS     r1,#0x40
0000ac  4630              MOV      r0,r6
0000ae  f7fffffe          BL       USART_ClearFlag
;;;2219       
;;;2220     
;;;2221       
;;;2222   	
;;;2223   }
0000b2  b008              ADD      sp,sp,#0x20
0000b4  bd70              POP      {r4-r6,pc}
;;;2224   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L25.184|
                          DCD      0x40020c00
                  |L25.188|
                          DCD      0x40004800

                          AREA ||i.USART3_DMA_init||, CODE, READONLY, ALIGN=2

                  USART3_DMA_init PROC
;;;2073   
;;;2074   static void USART3_DMA_init(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2075   {
;;;2076       DMA_InitTypeDef DMA_InitStructure;
;;;2077       NVIC_InitTypeDef NVIC_InitStructure;
;;;2078   	
;;;2079   	//串口3使用DMA1 发送为数据流3  通道4   
;;;2080       //F4与F1DMA多了一个数据流的说法详细参考中文数据手册DMA 表35
;;;2081       /* 1.使能DMA2时钟 */
;;;2082   	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
000004  2101              MOVS     r1,#1
000006  b091              SUB      sp,sp,#0x44           ;2075
000008  0548              LSLS     r0,r1,#21
00000a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;2083   	
;;;2084   	//串口发送DMA配置
;;;2085       /* 2.配置使用DMA发送数据 */
;;;2086       DMA_DeInit(DMA1_Stream3); //DMA1 数据流 3
00000e  f8dfa0d8          LDR      r10,|L26.232|
000012  4650              MOV      r0,r10
000014  f7fffffe          BL       DMA_DeInit
;;;2087       DMA_InitStructure.DMA_Channel = DMA_Channel_4;  /* 配置DMA1通道4 */
000018  f04f6600          MOV      r6,#0x8000000
;;;2088       DMA_InitStructure.DMA_PeripheralBaseAddr  = (uint32_t)(&(USART3->DR)); /* 目的 */
;;;2089       DMA_InitStructure.DMA_Memory0BaseAddr     = (uint32_t)MasterSendbuf; /*源内存地址*/
00001c  4834              LDR      r0,|L26.240|
00001e  4f33              LDR      r7,|L26.236|
000020  9600              STR      r6,[sp,#0]
000022  e9cd7001          STRD     r7,r0,[sp,#4]
;;;2090       DMA_InitStructure.DMA_DIR                 = DMA_DIR_MemoryToPeripheral;  /*方向内            
;;;2091                                                                               存到外设*/
;;;2092       DMA_InitStructure.DMA_BufferSize          = MAXRxTxLen;                    
;;;2093       /* 长度 */                  
;;;2094       DMA_InitStructure.DMA_PeripheralInc       = DMA_PeripheralInc_Disable;    
000026  2400              MOVS     r4,#0
000028  2040              MOVS     r0,#0x40              ;2090
00002a  f04f0880          MOV      r8,#0x80              ;2092
;;;2095       /* 外设地址是否自增 */
;;;2096       DMA_InitStructure.DMA_MemoryInc           = DMA_MemoryInc_Enable;        
00002e  f44f6980          MOV      r9,#0x400
000032  9003              STR      r0,[sp,#0xc]
000034  e9cd8404          STRD     r8,r4,[sp,#0x10]
000038  e9cd9406          STRD     r9,r4,[sp,#0x18]
;;;2097       /* 内存地址是否自增 */
;;;2098       DMA_InitStructure.DMA_PeripheralDataSize  = DMA_PeripheralDataSize_Byte;  
;;;2099       /* 目的数据带宽 */
;;;2100       DMA_InitStructure.DMA_MemoryDataSize      = DMA_MemoryDataSize_Byte;      
;;;2101       /* 源数据宽度 */
;;;2102       DMA_InitStructure.DMA_Mode                = DMA_Mode_Normal;             
;;;2103       /* 单次传输模式/循环传输模式 */
;;;2104       DMA_InitStructure.DMA_Priority            = DMA_Priority_High;             
00003c  02c0              LSLS     r0,r0,#11
00003e  9408              STR      r4,[sp,#0x20]
000040  e9cd4009          STRD     r4,r0,[sp,#0x24]
;;;2105       /* DMA优先级 */
;;;2106       DMA_InitStructure.DMA_FIFOMode            = DMA_FIFOMode_Disable;          
;;;2107       /* FIFO模式/直接模式 */
;;;2108       DMA_InitStructure.DMA_FIFOThreshold       = DMA_FIFOThreshold_HalfFull; 
000044  2501              MOVS     r5,#1
000046  e9cd450b          STRD     r4,r5,[sp,#0x2c]
;;;2109       /* FIFO大小 */
;;;2110       DMA_InitStructure.DMA_MemoryBurst         = DMA_MemoryBurst_Single;      
;;;2111        /* 单次传输 */
;;;2112       DMA_InitStructure.DMA_PeripheralBurst     = DMA_PeripheralBurst_Single;
00004a  940d              STR      r4,[sp,#0x34]
;;;2113       /* 3. 配置DMA */
;;;2114       DMA_Init(DMA1_Stream3, &DMA_InitStructure);
00004c  4669              MOV      r1,sp
00004e  4650              MOV      r0,r10
000050  940e              STR      r4,[sp,#0x38]
000052  f7fffffe          BL       DMA_Init
;;;2115       /* 4.使能DMA中断 */
;;;2116       DMA_ITConfig(DMA1_Stream3, DMA_IT_TC, ENABLE);
000056  2201              MOVS     r2,#1
000058  2110              MOVS     r1,#0x10
00005a  4650              MOV      r0,r10
00005c  f7fffffe          BL       DMA_ITConfig
;;;2117       /* 5.使能串口的DMA发送接口 */
;;;2118       USART_DMACmd(USART3, USART_DMAReq_Tx, ENABLE);
000060  f1a70b04          SUB      r11,r7,#4
000064  2201              MOVS     r2,#1
000066  2180              MOVS     r1,#0x80
000068  4658              MOV      r0,r11
00006a  f7fffffe          BL       USART_DMACmd
;;;2119       /* 6. 配置DMA中断优先级 */
;;;2120       NVIC_InitStructure.NVIC_IRQChannel                   = DMA1_Stream3_IRQn;  
00006e  200e              MOVS     r0,#0xe
000070  f88d003c          STRB     r0,[sp,#0x3c]
;;;2121       //  DMA发生中断         
;;;2122       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;          
000074  f88d403d          STRB     r4,[sp,#0x3d]
;;;2123       NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 4; 
000078  2004              MOVS     r0,#4
00007a  f88d003e          STRB     r0,[sp,#0x3e]
;;;2124       NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;
00007e  f88d503f          STRB     r5,[sp,#0x3f]
;;;2125       NVIC_Init(&NVIC_InitStructure);
000082  a80f              ADD      r0,sp,#0x3c
000084  f7fffffe          BL       NVIC_Init
;;;2126   	
;;;2127       /* 7.不使能DMA */                  
;;;2128       DMA_Cmd(DMA1_Stream3, DISABLE);// 数据流2
000088  2100              MOVS     r1,#0
00008a  4650              MOV      r0,r10
00008c  f7fffffe          BL       DMA_Cmd
;;;2129   	//************************DMA接收***********************//
;;;2130   	/* 2.配置使用DMA接收数据 */
;;;2131       DMA_DeInit(DMA1_Stream1); 
000090  f8dfa054          LDR      r10,|L26.232|
000094  f1aa0a30          SUB      r10,r10,#0x30
000098  4650              MOV      r0,r10
00009a  f7fffffe          BL       DMA_DeInit
;;;2132       DMA_InitStructure.DMA_Channel             = DMA_Channel_4;               
;;;2133       /* 配置DMA通道 */
;;;2134       DMA_InitStructure.DMA_PeripheralBaseAddr  = (uint32_t)(&(USART3->DR));   
;;;2135       /* 源地址 */
;;;2136       DMA_InitStructure.DMA_Memory0BaseAddr     = (uint32_t)MasterRecbuf;    
00009e  4814              LDR      r0,|L26.240|
0000a0  a902              ADD      r1,sp,#8
0000a2  3080              ADDS     r0,r0,#0x80
0000a4  e8810111          STM      r1,{r0,r4,r8}
0000a8  e9cd4905          STRD     r4,r9,[sp,#0x14]
;;;2137       /* 目标地址 */
;;;2138       DMA_InitStructure.DMA_DIR                 = DMA_DIR_PeripheralToMemory;    
;;;2139       /* 方向外设向内存  */
;;;2140       DMA_InitStructure.DMA_BufferSize          = MAXRxTxLen;                    		
;;;2141       /* 长度 */                  
;;;2142       DMA_InitStructure.DMA_PeripheralInc       = DMA_PeripheralInc_Disable;    
;;;2143         /* 外设地址是否自增 */
;;;2144       DMA_InitStructure.DMA_MemoryInc           = DMA_MemoryInc_Enable;         
;;;2145       /* 内存地址是否自增 */
;;;2146       DMA_InitStructure.DMA_PeripheralDataSize  = DMA_MemoryDataSize_Byte;     
;;;2147       /* 目的数据带宽 */
;;;2148       DMA_InitStructure.DMA_MemoryDataSize      = DMA_MemoryDataSize_Byte;      
;;;2149       /* 源数据宽度 */
;;;2150       DMA_InitStructure.DMA_Mode                = DMA_Mode_Circular;             
0000ac  0228              LSLS     r0,r5,#8
0000ae  e9cd4008          STRD     r4,r0,[sp,#0x20]
;;;2151       /*循环传输模式 */
;;;2152       DMA_InitStructure.DMA_Priority            = DMA_Priority_VeryHigh;        
0000b2  a90a              ADD      r1,sp,#0x28
0000b4  9407              STR      r4,[sp,#0x1c]         ;2150
0000b6  f44f3040          MOV      r0,#0x30000
0000ba  e8810031          STM      r1,{r0,r4,r5}
;;;2153       /* DMA优先级 */
;;;2154       DMA_InitStructure.DMA_FIFOMode            = DMA_FIFOMode_Disable;         
;;;2155        /* FIFO模式/直接模式 */
;;;2156       DMA_InitStructure.DMA_FIFOThreshold       = DMA_FIFOThreshold_HalfFull; 
;;;2157       /* FIFO大小 */
;;;2158       DMA_InitStructure.DMA_MemoryBurst         = DMA_MemoryBurst_Single;       
;;;2159       /* 单次传输 */
;;;2160       DMA_InitStructure.DMA_PeripheralBurst     = DMA_PeripheralBurst_Single;
0000be  940d              STR      r4,[sp,#0x34]
;;;2161       /* 3. 配置DMA */
;;;2162       DMA_Init(DMA1_Stream1, &DMA_InitStructure);
0000c0  4669              MOV      r1,sp
0000c2  4650              MOV      r0,r10
0000c4  940e              STR      r4,[sp,#0x38]
0000c6  e9cd6700          STRD     r6,r7,[sp,#0]
0000ca  f7fffffe          BL       DMA_Init
;;;2163       /* 4.由于接收不需要DMA中断，故不设置DMA中断 */
;;;2164       /* 5.使能串口的DMA接收 */
;;;2165       USART_DMACmd(USART3,USART_DMAReq_Rx,ENABLE);
0000ce  2201              MOVS     r2,#1
0000d0  2140              MOVS     r1,#0x40
0000d2  4658              MOV      r0,r11
0000d4  f7fffffe          BL       USART_DMACmd
;;;2166       /* 6. 由于接收不需要DMA中断，故不能配置DMA中断优先级 */
;;;2167       /* 7.使能DMA */ 
;;;2168       DMA_Cmd(DMA1_Stream1,ENABLE);
0000d8  2101              MOVS     r1,#1
0000da  4650              MOV      r0,r10
0000dc  f7fffffe          BL       DMA_Cmd
;;;2169   }
0000e0  b011              ADD      sp,sp,#0x44
0000e2  e8bd8ff0          POP      {r4-r11,pc}
;;;2170   
                          ENDP

0000e6  0000              DCW      0x0000
                  |L26.232|
                          DCD      0x40026058
                  |L26.236|
                          DCD      0x40004804
                  |L26.240|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;2250   
;;;2251   void USART3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2252   {
;;;2253       u8 Clear = Clear;
;;;2254       u16 num = 0;
;;;2255            
;;;2256       if(USART_GetITStatus(USART3, USART_IT_IDLE) != RESET)
000002  4c18              LDR      r4,|L27.100|
000004  f2404124          MOV      r1,#0x424
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USART_GetITStatus
00000e  2800              CMP      r0,#0
000010  d024              BEQ      |L27.92|
;;;2257       {
;;;2258           Clear = USART3->SR;  //读SR寄存器清除                                                            
000012  8820              LDRH     r0,[r4,#0]
;;;2259          
;;;2260           Clear = USART3->DR;  //读DR寄存器清除                                                        
000014  1d20              ADDS     r0,r4,#4
000016  8800              LDRH     r0,[r0,#0]
;;;2261           DMA_Cmd(DMA1_Stream1,DISABLE);   //关闭DMA
000018  4d13              LDR      r5,|L27.104|
00001a  2100              MOVS     r1,#0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       DMA_Cmd
;;;2262   		DMA_ClearFlag(DMA1_Stream1,DMA_FLAG_TCIF2);
000022  f04f5181          MOV      r1,#0x10200000
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       DMA_ClearFlag
;;;2263           num = DMA_GetCurrDataCounter(DMA1_Stream1); //得到真正接收数据个数
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       DMA_GetCurrDataCounter
;;;2264           if(num < MAXRxTxLen)
;;;2265           {
;;;2266               USART3_Recive_leng   = MAXRxTxLen - num;
000032  4c0e              LDR      r4,|L27.108|
000034  2880              CMP      r0,#0x80              ;2264
000036  d212              BCS      |L27.94|
000038  f1c00080          RSB      r0,r0,#0x80
00003c  b2c0              UXTB     r0,r0
00003e  7020              STRB     r0,[r4,#0]
;;;2267           }else
;;;2268           {
;;;2269               USART3_Recive_leng = MAXRxTxLen;
;;;2270           }
;;;2271            
;;;2272           if(USART3_Recive_leng > MAXRxTxLen)
000040  2880              CMP      r0,#0x80
000042  d901              BLS      |L27.72|
;;;2273           {
;;;2274               USART3_Recive_leng = 0;  //避免接收数据超界                                               
000044  2000              MOVS     r0,#0
                  |L27.70|
000046  7020              STRB     r0,[r4,#0]            ;2269
                  |L27.72|
;;;2275           }
;;;2276           DMA_SetCurrDataCounter(DMA1_Stream1,MAXRxTxLen);//设置DMA传输长度                                                        
000048  2180              MOVS     r1,#0x80
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       DMA_SetCurrDataCounter
;;;2277           DMA_Cmd(DMA1_Stream1,ENABLE);  //开启DMA
000050  2101              MOVS     r1,#1
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       DMA_Cmd
;;;2278           USART3_Recive_flg = 1;    //数据接收成功                                                  
000058  2001              MOVS     r0,#1
00005a  7060              STRB     r0,[r4,#1]
                  |L27.92|
;;;2279           
;;;2280       } 
;;;2281   }
00005c  bd70              POP      {r4-r6,pc}
                  |L27.94|
00005e  2080              MOVS     r0,#0x80              ;2269
000060  e7f1              B        |L27.70|
;;;2282   
                          ENDP

000062  0000              DCW      0x0000
                  |L27.100|
                          DCD      0x40004800
                  |L27.104|
                          DCD      0x40026028
                  |L27.108|
                          DCD      ||.data||

                          AREA ||i.USART_Configuration||, CODE, READONLY, ALIGN=2

                  USART_Configuration PROC
;;;1967   
;;;1968   void USART_Configuration(void)//串口初始化函数
000000  b570              PUSH     {r4-r6,lr}
;;;1969   {  
000002  b088              SUB      sp,sp,#0x20
;;;1970   	GPIO_InitTypeDef GPIO_InitStructure;
;;;1971   	USART_InitTypeDef USART_InitStructure;
;;;1972   	
;;;1973   	/* config USART1 clock */
;;;1974   	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
000004  2101              MOVS     r1,#1
000006  2010              MOVS     r0,#0x10
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;1975   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1);
00000c  4e2a              LDR      r6,|L28.184|
00000e  2207              MOVS     r2,#7
000010  2109              MOVS     r1,#9
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;1976   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1);
000018  2207              MOVS     r2,#7
00001a  210a              MOVS     r1,#0xa
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;1977   	/* USART1 GPIO config */
;;;1978   	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;1979   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
;;;1980   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000022  2502              MOVS     r5,#2
000024  1570              ASRS     r0,r6,#21             ;1979
000026  f88d5004          STRB     r5,[sp,#4]
;;;1981   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
00002c  9000              STR      r0,[sp,#0]            ;1980
00002e  f88d4006          STRB     r4,[sp,#6]
;;;1982   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f88d5005          STRB     r5,[sp,#5]
;;;1983   	GPIO_Init(GPIOA, &GPIO_InitStructure);    
000036  4669              MOV      r1,sp
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GPIO_Init
;;;1984   	/* Configure USART1 Rx (PA.10) as input floating */
;;;1985   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
00003e  0268              LSLS     r0,r5,#9
;;;1986   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000040  9000              STR      r0,[sp,#0]
000042  f88d5004          STRB     r5,[sp,#4]
;;;1987   	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;1988   	
;;;1989   	/* USART1 mode config */
;;;1990   	USART_InitStructure.USART_BaudRate = 9600;
00004e  f44f5016          MOV      r0,#0x2580
;;;1991   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000052  9002              STR      r0,[sp,#8]
;;;1992   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;1993   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000054  f8ad4010          STRH     r4,[sp,#0x10]
;;;1994   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;1995   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
;;;1996   	USART_Init(USART1, &USART_InitStructure);
00005a  4d18              LDR      r5,|L28.188|
00005c  f8ad400c          STRH     r4,[sp,#0xc]          ;1991
000060  f8ad0012          STRH     r0,[sp,#0x12]         ;1995
000064  f8ad400e          STRH     r4,[sp,#0xe]          ;1992
000068  f8ad4014          STRH     r4,[sp,#0x14]         ;1994
00006c  a902              ADD      r1,sp,#8
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       USART_Init
;;;1997   	
;;;1998   	/******使能串口接收中断******************/
;;;1999   	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	
000074  2201              MOVS     r2,#1
000076  f2405125          MOV      r1,#0x525
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_ITConfig
;;;2000   	USART_Cmd(USART1, ENABLE);//使能串口1
000080  2101              MOVS     r1,#1
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USART_Cmd
;;;2001   	USART_ClearFlag(USART1, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       USART_ClearFlag
000090  f44f60e0          MOV      r0,#0x700
000094  f7fffffe          BL       NVIC_PriorityGroupConfig
000098  2025              MOVS     r0,#0x25
00009a  f88d0018          STRB     r0,[sp,#0x18]
00009e  f88d4019          STRB     r4,[sp,#0x19]
0000a2  2004              MOVS     r0,#4
0000a4  f88d001a          STRB     r0,[sp,#0x1a]
0000a8  2001              MOVS     r0,#1
0000aa  f88d001b          STRB     r0,[sp,#0x1b]
0000ae  a806              ADD      r0,sp,#0x18
0000b0  f7fffffe          BL       NVIC_Init
;;;2002     
;;;2003   	USART1_NVIC_Config();//串口中断配置
;;;2004   }			
0000b4  b008              ADD      sp,sp,#0x20
0000b6  bd70              POP      {r4-r6,pc}
;;;2005   
                          ENDP

                  |L28.184|
                          DCD      0x40020000
                  |L28.188|
                          DCD      0x40011000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UART_Buffer_Rece
                          %        16

                          AREA ||area_number.31||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.31||, ||.bss||
                  UART_Buffer_Send
                          %        20
                  USART_RX_BUF
                          %        200
                  MasterSendbuf
                          %        128
                  MasterRecbuf
                          %        128

                          AREA ||.data||, DATA, ALIGN=2

                  USART3_Recive_leng
000000  00                DCB      0x00
                  USART3_Recive_flg
000001  00                DCB      0x00
                  UART_Buffer_Send_pointer
000002  00                DCB      0x00
                  |symbol_number.103|
000003  00                DCB      0x00
                  Transmit_BUFFERsize
000004  00                DCB      0x00
                  MODE
000005  00                DCB      0x00
                  mainswitch
000006  00                DCB      0x00
                  Rraly
000007  00                DCB      0x00
                  sendwait
000008  00                DCB      0x00
                  listsend
000009  00                DCB      0x00
                  listocwatch
00000a  00                DCB      0x00
                  listpowwatch1
00000b  00                DCB      0x00
                  listpowwatch2
00000c  0000              DCB      0x00,0x00
                  USART_RX_STA
00000e  0000              DCW      0x0000
                  USART_RX_CNT
000010  0000              DCW      0x0000
000012  0000              DCB      0x00,0x00
                  ||x1||
                          DCD      0x00000000
                  ||y1||
                          DCD      0x00000000
                  ||x2||
                          DCD      0x00000000
                  ||y2||
                          DCD      0x00000000
                  ||x3||
                          DCD      0x00000000
                  ||y3||
                          DCD      0x00000000
                  ||x4||
                          DCD      0x00000000
                  ||y4||
                          DCD      0x00000000
                  watchtest
                          DCD      0x00000000
                  CmdStr
000038  53544154          DCB      0x53,0x54,0x41,0x54
00003c  55535f00          DCB      0x55,0x53,0x5f,0x00
000040  004d4f44          DCB      0x00,0x4d,0x4f,0x44
000044  5f000000          DCB      0x5f,0x00,0x00,0x00
000048  00005452          DCB      0x00,0x00,0x54,0x52
00004c  49475f00          DCB      0x49,0x47,0x5f,0x00
000050  00000053          DCB      0x00,0x00,0x00,0x53
000054  45545041          DCB      0x45,0x54,0x50,0x41
000058  52415f00          DCB      0x52,0x41,0x5f,0x00
00005c  5345544c          DCB      0x53,0x45,0x54,0x4c
000060  4953545f          DCB      0x49,0x53,0x54,0x5f
000064  00504f57          DCB      0x00,0x50,0x4f,0x57
000068  565f0000          DCB      0x56,0x5f,0x00,0x00
00006c  0000504f          DCB      0x00,0x00,0x50,0x4f
000070  57495f00          DCB      0x57,0x49,0x5f,0x00
000074  00000041          DCB      0x00,0x00,0x00,0x41
000078  4443565f          DCB      0x44,0x43,0x56,0x5f
00007c  00000000          DCB      0x00,0x00,0x00,0x00
000080  4c4f5749          DCB      0x4c,0x4f,0x57,0x49
000084  5f000000          DCB      0x5f,0x00,0x00,0x00
000088  00484f52          DCB      0x00,0x48,0x4f,0x52
00008c  4c5f0000          DCB      0x4c,0x5f,0x00,0x00
000090  00004c56          DCB      0x00,0x00,0x4c,0x56
000094  4c5f0000          DCB      0x4c,0x5f,0x00,0x00
000098  00000053          DCB      0x00,0x00,0x00,0x53
00009c  57495443          DCB      0x57,0x49,0x54,0x43
0000a0  485f0000          DCB      0x48,0x5f,0x00,0x00
0000a4  43414c56          DCB      0x43,0x41,0x4c,0x56
0000a8  5f000000          DCB      0x5f,0x00,0x00,0x00
0000ac  0043414c          DCB      0x00,0x43,0x41,0x4c
0000b0  495f0000          DCB      0x49,0x5f,0x00,0x00
0000b4  00004341          DCB      0x00,0x00,0x43,0x41
0000b8  4c525f00          DCB      0x4c,0x52,0x5f,0x00
0000bc  00000044          DCB      0x00,0x00,0x00,0x44
0000c0  41435f00          DCB      0x41,0x43,0x5f,0x00
0000c4  00000000          DCB      0x00,0x00,0x00,0x00
0000c8  4f564552          DCB      0x4f,0x56,0x45,0x52
0000cc  5f000000          DCB      0x5f,0x00,0x00,0x00
0000d0  0054454d          DCB      0x00,0x54,0x45,0x4d
0000d4  505f0000          DCB      0x50,0x5f,0x00,0x00
0000d8  0000424f          DCB      0x00,0x00,0x42,0x4f
0000dc  4f545f00          DCB      0x4f,0x54,0x5f,0x00
0000e0  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.34||, DATA, ALIGN=0

                          EXPORTAS ||area_number.34||, ||.data||
                  UART_Buffer_Size
000000  00                DCB      0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  t_USART
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.data||
                  powsetdelay
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\drive\\usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REV16|
#line 129 "E:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_usart_c_7cc17ae7____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REVSH|
#line 144
|__asm___7_usart_c_7cc17ae7____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
