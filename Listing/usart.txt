; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\usart.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\usart.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=538 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\usart.crf --no_multibyte_chars ..\drive\usart.c]
                          THUMB

                          AREA ||i.CalHandle||, CODE, READONLY, ALIGN=2

                  CalHandle PROC
;;;594    //校准处理
;;;595    void CalHandle(u8 mode,u8 range,u32 data)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;596    {
000004  4615              MOV      r5,r2
;;;597    	if(mode == 0)//测量电压
;;;598    	{
;;;599    		if(range == 0)//低档位低段
;;;600    		{
;;;601    			calflag = 1;
000006  4eff              LDR      r6,|L1.1028|
;;;602    			LOAD_V_SW = 0;
000008  4aff              LDR      r2,|L1.1032|
00000a  2700              MOVS     r7,#0                 ;596
00000c  f04f0801          MOV      r8,#1                 ;601
;;;603    			x1 = Vmon_Load_value;
000010  4cfe              LDR      r4,|L1.1036|
;;;604    			y1 = data;
;;;605    		}else if(range == 1){//低档位高段
;;;606    			
;;;607    			x2 = Vmon_Load_value;
;;;608    			y2 = data;
;;;609    			CalPara.TestLV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;610    			CalPara.OffsetLV[0] = (float)y2 - CalPara.TestLV[0]*(float)x2;
;;;611    			
;;;612    			Flag_DAC_OFF=0;
000012  f8dfc400          LDR      r12,|L1.1044|
000016  f8dfa3f8          LDR      r10,|L1.1040|
;;;613    			calflag = 0;
;;;614    		}else if(range == 2){//高档位低段
;;;615    			calflag = 1;
;;;616    			LOAD_V_SW = 1;
;;;617    			x1 = Vmon_Load_value;
;;;618    			y1 = data/10;
;;;619    		}else if(range == 3){//高档位高段
;;;620    			
;;;621    			x2 = Vmon_Load_value;
;;;622    			y2 = data/10;
;;;623    			CalPara.TestLV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;624    			CalPara.OffsetLV[1] = (float)y2 - CalPara.TestLV[1]*(float)x2;
;;;625    				//参数写进FLASH
;;;626    			Flag_DAC_OFF=0;
;;;627    			calflag = 0;
;;;628    		}else if(range == 4){//电源控制电压和测量1
;;;629    			calflag = 1;
;;;630    			Contr_Voltage = 3500;
;;;631    			Contr_Current = 5000;
;;;632    			OnOff_GPOI_ResetSet(0,1);
;;;633    		}else if(range == 5){//电源控制电压和测量2
;;;634    			x1 = data;
;;;635    			y1 = Contr_Voltage;
;;;636    			x3 = Vmon_POWE_value;
;;;637    			y3 = data;
;;;638    			Contr_Voltage = 10000;
;;;639    			Contr_Current = 5000;
;;;640    		}else if(range == 6){//电源控制电压和测量3
;;;641    			x2 = data;
;;;642    			y2 = Contr_Voltage;
;;;643    			x4 = Vmon_POWE_value;
;;;644    			y4 = data;
;;;645    			
;;;646    			CalPara.SetPV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;647    			CalPara.OffsetSetPV[0] = (float)y2 - CalPara.SetPV[0]*(float)x2;
;;;648    			
;;;649    			CalPara.TestPV[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;650    			CalPara.OffsetPV[0] = (float)y4 - CalPara.TestPV[0]*(float)x4;
;;;651    			
;;;652    			Flag_DAC_OFF=0;
;;;653    			calflag = 0;
;;;654    			Off_GPOI_ResetSet();
;;;655    		}else if(range == 7){//CV控制低档1
;;;656    			LOAD_MODE = 1;
;;;657    			LOAD_V_SW=0;
;;;658    			GPIO_ResetBits(GPIOB,GPIO_Pin_1);//电压档位为低档
;;;659    			calflag = 1;
;;;660    			Contr_Laod = 1000;
00001a  f8df93fc          LDR      r9,|L1.1048|
00001e  f8dc3000          LDR      r3,[r12,#0]           ;612
000022  edd40a05          VLDR     s1,[r4,#0x14]         ;603
000026  ed940a06          VLDR     s0,[r4,#0x18]         ;603
00002a  edd42a0a          VLDR     s5,[r4,#0x28]         ;603
00002e  ed942a09          VLDR     s4,[r4,#0x24]         ;603
000032  f0230308          BIC      r3,r3,#8              ;612
000036  b140              CBZ      r0,|L1.74|
;;;661    			OnOff_GPOI_ResetSet(2,1);
;;;662    		}else if(range == 8){//CV控制低档2
;;;663    			LOAD_MODE = 1;
;;;664    			LOAD_V_SW=0;
;;;665    			GPIO_ResetBits(GPIOB,GPIO_Pin_1);//电压档位为低档
;;;666    			x1 = data;
;;;667    			y1 = Contr_Laod;
;;;668    			Contr_Laod = 20000;
;;;669    //			OnOff_GPOI_ResetSet(2,1);
;;;670    		}else if(range == 9){//CV控制低档3
;;;671    			x2 = data;
;;;672    			y2 = Contr_Laod;
;;;673    			CalPara.SetCV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;674    			CalPara.OffsetCV[0] = (float)y2 - CalPara.SetCV[0]*(float)x2;
;;;675    				//参数写进FLASH
;;;676    			Flag_DAC_OFF=0;
;;;677    			calflag = 0;
;;;678    			Off_GPOI_ResetSet();
;;;679    		}else if(range == 10){//CV控制高档1
;;;680    			LOAD_MODE = 1;
;;;681    			LOAD_V_SW=1;
;;;682    			GPIO_SetBits(GPIOB,GPIO_Pin_1);//电压档位为高档
;;;683    			calflag = 1;
;;;684    			Contr_Laod = 1000;
;;;685    			OnOff_GPOI_ResetSet(2,1);
;;;686    		}else if(range == 11){//CV控制高档2
;;;687    			LOAD_MODE = 1;
;;;688    			LOAD_V_SW=1;
;;;689    			GPIO_SetBits(GPIOB,GPIO_Pin_1);//电压档位为高档
;;;690    			x1 = data/10;
;;;691    			y1 = Contr_Laod;
;;;692    			Contr_Laod = 20000;
;;;693    			OnOff_GPOI_ResetSet(2,1);
;;;694    		}else if(range == 12){//CV控制高档3
;;;695    			x2 = data/10;
;;;696    			y2 = Contr_Laod;
;;;697    			CalPara.SetCV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;698    			CalPara.OffsetCV[1] = (float)y2 - CalPara.SetCV[1]*(float)x2;
;;;699    				//参数写进FLASH
;;;700    			Flag_DAC_OFF=0;
;;;701    			calflag = 0;
;;;702    			Off_GPOI_ResetSet();
;;;703    		}
;;;704    	}else if(mode == 1){
;;;705    		if(range == 0)//负载电流低档位1
;;;706    		{		
;;;707    			LOAD_I_SW = 0;
;;;708    			Contr_Laod = 10000;
;;;709    			calflag = 1;
;;;710    			OnOff_GPOI_ResetSet(2,1);
;;;711    		}
;;;712    		else if(range == 1)//负载电流低档位2
;;;713    		{
;;;714    			LOAD_I_SW = 0;			
;;;715    			x1 = data;
;;;716    			y1 = Contr_Laod;
;;;717    			x4 = Imon_Load_value;
;;;718    			y4 = data;
;;;719    			Contr_Laod = 20000;
;;;720    		}else if(range == 2)//负载电流低档位3
;;;721    		{
;;;722    			LOAD_I_SW = 0;			
;;;723    			x2 = data;
;;;724    			y2 = Contr_Laod;
;;;725    			x5 = Imon_Load_value;
;;;726    			y5 = data;
;;;727    			Contr_Laod = 60000;
;;;728    		}else if(range == 3){//负载电流低档位4
;;;729    			
;;;730    			x3 = data;
;;;731    			y3 = Contr_Laod;
;;;732    			x6 = Imon_Load_value;
;;;733    			y6 = data;
;;;734    			
;;;735    			CalPara.SetLC[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;736    			CalPara.OffsetLC[0] = (float)y2 - CalPara.SetLC[0]*(float)x2;
;;;737    			CalPara.SetLC[1] = ((float)y3 - (float)y2)/((float)x3 - (float)x2);
;;;738    			CalPara.OffsetLC[1] = (float)y3 - CalPara.SetLC[1]*(float)x3;
;;;739    			
;;;740    			CalPara.TestLC[0] = ((float)y5 - (float)y4)/((float)x5 - (float)x4);
;;;741    			CalPara.OffsetTestLC[0] = (float)y5 - CalPara.TestLC[0]*(float)x5;
;;;742    			CalPara.TestLC[1] = ((float)y6 - (float)y5)/((float)x6 - (float)x5);
;;;743    			CalPara.OffsetTestLC[1] = (float)y6 - CalPara.TestLC[1]*(float)x6;
;;;744    				
;;;745    			Flag_DAC_OFF =0;
;;;746    			calflag = 0;
;;;747    			Off_GPOI_ResetSet();
;;;748    		}else if(range == 4){//负载电流高档位1
;;;749    			LOAD_I_SW = 1;
;;;750    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
000038  f44f6e00          MOV      lr,#0x800
00003c  2801              CMP      r0,#1                 ;704
00003e  d07d              BEQ      |L1.316|
;;;751    			Contr_Laod = 6000;
;;;752    			calflag = 1;
;;;753    			OnOff_GPOI_ResetSet(2,1);
;;;754    		}else if(range == 5){//负载电流高档位2
;;;755    			
;;;756    			LOAD_I_SW = 1;
;;;757    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;758    			x1 = data;
;;;759    			y1 = Contr_Laod;
;;;760    			x5 = Imon_Load_value;
;;;761    			y5 = data;
;;;762    			Contr_Laod = 12000;
;;;763    		}else if(range == 6){//负载电流高档位3
;;;764    			
;;;765    			LOAD_I_SW = 1;
;;;766    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;767    			x2 = data;
;;;768    			y2 = Contr_Laod;
;;;769    			x6 = Imon_Load_value;
;;;770    			y6 = data;
;;;771    			Contr_Laod = 20000;
;;;772    		}else if(range == 7){//负载电流高档位4
;;;773    			
;;;774    			LOAD_I_SW = 1;
;;;775    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;776    			x3 = data;
;;;777    			y3 = Contr_Laod;
;;;778    			x7 = Imon_Load_value;
;;;779    			y7 = data;
;;;780    			Contr_Laod = 40000;
;;;781    		}else if(range == 8){//负载电流高档位5
;;;782    			
;;;783    			x4 = data;
;;;784    			y4 = Contr_Laod;
;;;785    			x8 = Imon_Load_value;
;;;786    			y8 = data;
;;;787    			
;;;788    			CalPara.SetLC[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;789    			CalPara.OffsetLC[2] = (float)y2 - CalPara.SetLC[2]*(float)x2;
;;;790    			CalPara.SetLC[3] = ((float)y3 - (float)y2)/((float)x3 - (float)x2);
;;;791    			CalPara.OffsetLC[3] = (float)y3 - CalPara.SetLC[3]*(float)x3;
;;;792    			CalPara.SetLC[4] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;793    			CalPara.OffsetLC[4] = (float)y4 - CalPara.SetLC[4]*(float)x4;
;;;794    			
;;;795    			CalPara.TestLC[2] = ((float)y6 - (float)y5)/((float)x6 - (float)x5);
;;;796    			CalPara.OffsetTestLC[2] = (float)y6 - CalPara.TestLC[2]*(float)x6;
;;;797    			CalPara.TestLC[3] = ((float)y7 - (float)y6)/((float)x7 - (float)x6);
;;;798    			CalPara.OffsetTestLC[3] = (float)y7 - CalPara.TestLC[3]*(float)x7;
;;;799    			CalPara.TestLC[4] = ((float)y8 - (float)y7)/((float)x8 - (float)x7);
;;;800    			CalPara.OffsetTestLC[4] = (float)y8 - CalPara.TestLC[4]*(float)x8;
;;;801    				
;;;802    			Flag_DAC_OFF =0;
;;;803    			calflag = 0;
;;;804    			Off_GPOI_ResetSet();
;;;805    		}else if(range == 9){//电源电流1
;;;806    			Contr_Voltage = 3500;
;;;807    			Contr_Current = 4000;
;;;808    			calflag = 1;
;;;809    			OnOff_GPOI_ResetSet(0,1);
;;;810    		}else if(range == 10){//电源电流2
;;;811    			
;;;812    			x1 = data;
;;;813    			y1 = Contr_Current;
;;;814    			x3 = Imon_POWE_value;
;;;815    			y3 = data;
;;;816    			Contr_Voltage = 3500;
;;;817    			Contr_Current = 14000;
;;;818    		}else if(range == 11){//电源电流3
;;;819    			
;;;820    			x2 = data;
;;;821    			y2 = Contr_Current;
;;;822    			x4 = Imon_POWE_value;
;;;823    			y4 = data;
;;;824    			
;;;825    			CalPara.SetPC[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;826    			CalPara.OffsetPC[0] = (float)y2 - CalPara.SetPC[0]*(float)x2;
;;;827    			
;;;828    			CalPara.TestPC[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;829    			CalPara.OffsetTestPC[0] = (float)y4 - CalPara.TestPC[0]*(float)x4;
;;;830    			
;;;831    			Flag_DAC_OFF=0;
;;;832    			calflag = 0;
;;;833    			Off_GPOI_ResetSet();
;;;834    		}
;;;835    	}else if(mode == 2){
000040  2802              CMP      r0,#2
000042  d07c              BEQ      |L1.318|
;;;836    		if(range == 0)//内阻低档位低段
;;;837    		{
;;;838    			LOAD_I_SW = 1;
;;;839    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;840    			RCONT_SW = 0;
;;;841    			calflag = 1;
;;;842    			x1 = Rmon_value;
;;;843    			y1 = data;
;;;844    			
;;;845    //			Modify_A_READ=0;
;;;846    //			Modify_A_ACT=0;
;;;847    //			Modify_A_READ = Rmon_value;//测量电阻值
;;;848    //			Modify_A_ACT = data;//读取低段
;;;849    		}else if (range == 1)//内阻低档位高段
;;;850    		{
;;;851    			
;;;852    			x2 = Rmon_value;
;;;853    			y2 = data;
;;;854    			CalPara.TestR[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;855    			CalPara.OffsetR[0] = (float)y2 - CalPara.TestR[0]*(float)x2;
;;;856    				//参数写进FLASH
;;;857    			Flag_DAC_OFF=0;
;;;858    			calflag = 0;
;;;859    		}else if(range == 2)//内阻高档位低段
;;;860    		{
;;;861    			LOAD_I_SW = 1;
;;;862    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;863    			RCONT_SW = 1;
;;;864    			calflag = 1;
;;;865    			x1 = Rmon_value;
;;;866    			y1 = data;
;;;867    		}else if (range == 3)//内阻高档位高段
;;;868    		{
;;;869    			
;;;870    			x2 = Rmon_value;
;;;871    			y2 = data;
;;;872    			CalPara.TestR[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;873    			CalPara.OffsetR[1] = (float)y2 - CalPara.TestR[1]*(float)x2;
;;;874    				//参数写进FLASH
;;;875    			Flag_DAC_OFF=0;
;;;876    			calflag = 0;
;;;877    		}else if(range == 4)//识别电阻1低段
;;;878    		{
;;;879    			calflag = 1;
;;;880    //			x1 = (R1mon_value*1000)/(65535-R1mon_value);
;;;881    			x1 = (R1mon_value*1000)/(65535-R1mon_value);
;;;882    			y1 = data;
;;;883    		}else if (range == 5)//识别电阻1高段
;;;884    		{
;;;885    			
;;;886    //			x2 = (R1mon_value*1000)/(65535-R1mon_value);
;;;887    			x2 = (R1mon_value*1000)/(65535-R1mon_value);
;;;888    			y2 = data;
;;;889    			CalPara.TestR1[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;890    			CalPara.OffsetR1[0] = (float)y2 - CalPara.TestR1[0]*(float)x2;
;;;891    				//参数写进FLASH
;;;892    			Flag_DAC_OFF=0;
;;;893    			calflag = 0;
;;;894    		}else if(range == 6)//识别电阻2低段
;;;895    		{
;;;896    			calflag = 1;
;;;897    			x1 = (R2mon_value*1000)/(65535-R2mon_value);
;;;898    			y1 = data;
;;;899    		}else if (range == 7)//识别电阻2高段
;;;900    		{
;;;901    			
;;;902    			x2 = (R2mon_value*1000)/(65535-R2mon_value);
;;;903    			y2 = data;
;;;904    			CalPara.TestR2[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;905    			CalPara.OffsetR2[0] = (float)y2 - CalPara.TestR2[0]*(float)x2;
;;;906    				//参数写进FLASH
;;;907    			Flag_DAC_OFF=0;
;;;908    			calflag = 0;
;;;909    		}else if(range == 8)//内阻高档位低段
;;;910    		{
;;;911    			RCONT_SW = 1;
;;;912    			calflag = 1;
;;;913    			x1 = Rmon_value;
;;;914    			y1 = data;
;;;915    		}else if (range == 9)//内阻高档位高段
;;;916    		{
;;;917    			
;;;918    			x2 = Rmon_value;
;;;919    			y2 = data;
;;;920    			CalPara.TestR[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;921    			CalPara.OffsetR[2] = (float)y2 - CalPara.TestR[2]*(float)x2;
;;;922    				//参数写进FLASH
;;;923    			Flag_DAC_OFF=0;
;;;924    			calflag = 0;
;;;925    		}
;;;926    		
;;;927    	}else if(mode == 3){
000044  2803              CMP      r0,#3
000046  d07b              BEQ      |L1.320|
000048  e257              B        |L1.1274|
                  |L1.74|
00004a  48f4              LDR      r0,|L1.1052|
00004c  b1f1              CBZ      r1,|L1.140|
00004e  2901              CMP      r1,#1                 ;605
000050  d020              BEQ      |L1.148|
000052  f04f0b0a          MOV      r11,#0xa              ;618
000056  2902              CMP      r1,#2                 ;614
000058  d040              BEQ      |L1.220|
00005a  2903              CMP      r1,#3                 ;619
00005c  d048              BEQ      |L1.240|
00005e  f2413e88          MOV      lr,#0x1388            ;631
000062  2904              CMP      r1,#4                 ;628
000064  d072              BEQ      |L1.332|
000066  48ee              LDR      r0,|L1.1056|
000068  2905              CMP      r1,#5                 ;633
00006a  d07d              BEQ      |L1.360|
00006c  2906              CMP      r1,#6                 ;640
00006e  d06a              BEQ      |L1.326|
000070  48ec              LDR      r0,|L1.1060|
000072  2907              CMP      r1,#7                 ;655
000074  d068              BEQ      |L1.328|
000076  2908              CMP      r1,#8                 ;662
000078  d067              BEQ      |L1.330|
00007a  2909              CMP      r1,#9                 ;670
00007c  d070              BEQ      |L1.352|
00007e  290a              CMP      r1,#0xa               ;679
000080  d06f              BEQ      |L1.354|
000082  290b              CMP      r1,#0xb               ;686
000084  d06e              BEQ      |L1.356|
000086  290c              CMP      r1,#0xc               ;694
000088  d06d              BEQ      |L1.358|
00008a  e236              B        |L1.1274|
                  |L1.140|
00008c  f8868000          STRB     r8,[r6,#0]            ;601
000090  61d7              STR      r7,[r2,#0x1c]         ;602  ; Run_Control
000092  e3dd              B        |L1.2128|
                  |L1.148|
000094  8800              LDRH     r0,[r0,#0]            ;607  ; Vmon_Load_value
000096  ee015a10          VMOV     s2,r5                 ;609
00009a  eeb80a40          VCVT.F32.U32 s0,s0                 ;609
00009e  eef80a60          VCVT.F32.U32 s1,s1                 ;609
0000a2  eeb81a41          VCVT.F32.U32 s2,s2                 ;609
0000a6  e9c40507          STRD     r0,r5,[r4,#0x1c]      ;607
0000aa  ee311a40          VSUB.F32 s2,s2,s0              ;609
0000ae  ee000a10          VMOV     s0,r0                 ;609
0000b2  eeb80a40          VCVT.F32.U32 s0,s0                 ;609
0000b6  ee300a60          VSUB.F32 s0,s0,s1              ;609
0000ba  eec10a00          VDIV.F32 s1,s2,s0              ;609
0000be  ee000a10          VMOV     s0,r0                 ;610
0000c2  eeb81a40          VCVT.F32.U32 s2,s0                 ;610
0000c6  ee005a10          VMOV     s0,r5                 ;610
0000ca  eeb80a40          VCVT.F32.U32 s0,s0                 ;610
0000ce  edca0a00          VSTR     s1,[r10,#0]           ;609
0000d2  ee000ac1          VMLS.F32 s0,s1,s2              ;610
0000d6  ed8a0a04          VSTR     s0,[r10,#0x10]        ;610
0000da  e3e2              B        |L1.2210|
                  |L1.220|
0000dc  f8868000          STRB     r8,[r6,#0]            ;615
0000e0  f8c2801c          STR      r8,[r2,#0x1c]         ;616  ; Run_Control
0000e4  8800              LDRH     r0,[r0,#0]            ;617  ; Vmon_Load_value
0000e6  6160              STR      r0,[r4,#0x14]         ;618  ; x1
0000e8  fbb5f0fb          UDIV     r0,r5,r11             ;618
0000ec  61a0              STR      r0,[r4,#0x18]         ;618  ; y1
0000ee  e204              B        |L1.1274|
                  |L1.240|
0000f0  8800              LDRH     r0,[r0,#0]            ;621  ; Vmon_Load_value
0000f2  fbb5f1fb          UDIV     r1,r5,r11             ;622
0000f6  ee011a10          VMOV     s2,r1                 ;623
0000fa  eeb80a40          VCVT.F32.U32 s0,s0                 ;623
0000fe  eef80a60          VCVT.F32.U32 s1,s1                 ;623
000102  eeb81a41          VCVT.F32.U32 s2,s2                 ;623
000106  e9c40107          STRD     r0,r1,[r4,#0x1c]      ;623
00010a  ee311a40          VSUB.F32 s2,s2,s0              ;623
00010e  ee000a10          VMOV     s0,r0                 ;623
000112  eeb80a40          VCVT.F32.U32 s0,s0                 ;623
000116  ee300a60          VSUB.F32 s0,s0,s1              ;623
00011a  eec10a00          VDIV.F32 s1,s2,s0              ;623
00011e  ee000a10          VMOV     s0,r0                 ;624
000122  eeb81a40          VCVT.F32.U32 s2,s0                 ;624
000126  ee001a10          VMOV     s0,r1                 ;624
00012a  eeb80a40          VCVT.F32.U32 s0,s0                 ;624
00012e  edca0a01          VSTR     s1,[r10,#4]           ;623
000132  ee000ac1          VMLS.F32 s0,s1,s2              ;624
000136  ed8a0a05          VSTR     s0,[r10,#0x14]        ;624
00013a  e3b2              B        |L1.2210|
                  |L1.316|
00013c  e0eb              B        |L1.790|
                  |L1.318|
00013e  e32e              B        |L1.1950|
                  |L1.320|
000140  e3f2              B        |L1.2344|
000142  e003              B        |L1.332|
000144  e010              B        |L1.360|
                  |L1.326|
000146  e01c              B        |L1.386|
                  |L1.328|
000148  e064              B        |L1.532|
                  |L1.330|
00014a  e06a              B        |L1.546|
                  |L1.332|
00014c  f8868000          STRB     r8,[r6,#0]            ;629
000150  48b5              LDR      r0,|L1.1064|
000152  f64051ac          MOV      r1,#0xdac             ;630
000156  8001              STRH     r1,[r0,#0]            ;630
000158  49b4              LDR      r1,|L1.1068|
00015a  f8a1e000          STRH     lr,[r1,#0]            ;631
00015e  e2c4              B        |L1.1770|
                  |L1.352|
000160  e06b              B        |L1.570|
                  |L1.354|
000162  e08f              B        |L1.644|
                  |L1.356|
000164  e09e              B        |L1.676|
                  |L1.358|
000166  e0af              B        |L1.712|
                  |L1.360|
000168  49af              LDR      r1,|L1.1064|
00016a  6165              STR      r5,[r4,#0x14]         ;635  ; x1
00016c  880a              LDRH     r2,[r1,#0]            ;635  ; Contr_Voltage
00016e  61a2              STR      r2,[r4,#0x18]         ;636  ; y1
000170  8800              LDRH     r0,[r0,#0]            ;636  ; Vmon_POWE_value
000172  e9c40509          STRD     r0,r5,[r4,#0x24]      ;636
000176  f2427010          MOV      r0,#0x2710            ;638
00017a  8008              STRH     r0,[r1,#0]            ;638
00017c  4670              MOV      r0,lr                 ;639
00017e  49ab              LDR      r1,|L1.1068|
000180  e2c2              B        |L1.1800|
                  |L1.386|
000182  49a9              LDR      r1,|L1.1064|
000184  61e5              STR      r5,[r4,#0x1c]         ;642  ; x2
000186  8809              LDRH     r1,[r1,#0]            ;642  ; Contr_Voltage
000188  6221              STR      r1,[r4,#0x20]         ;643  ; y2
00018a  8800              LDRH     r0,[r0,#0]            ;643  ; Vmon_POWE_value
00018c  ee011a10          VMOV     s2,r1                 ;646
000190  eeb80a40          VCVT.F32.U32 s0,s0                 ;646
000194  eef80a60          VCVT.F32.U32 s1,s1                 ;646
000198  eeb81a41          VCVT.F32.U32 s2,s2                 ;646
00019c  e9c4050b          STRD     r0,r5,[r4,#0x2c]      ;643
0001a0  ee311a40          VSUB.F32 s2,s2,s0              ;646
0001a4  ee005a10          VMOV     s0,r5                 ;646
0001a8  4652              MOV      r2,r10                ;646
0001aa  eeb80a40          VCVT.F32.U32 s0,s0                 ;646
0001ae  ee300a60          VSUB.F32 s0,s0,s1              ;646
0001b2  eec10a00          VDIV.F32 s1,s2,s0              ;646
0001b6  ee005a10          VMOV     s0,r5                 ;647
0001ba  eeb81a40          VCVT.F32.U32 s2,s0                 ;647
0001be  ee001a10          VMOV     s0,r1                 ;647
0001c2  eeb80a40          VCVT.F32.U32 s0,s0                 ;647
0001c6  edca0a02          VSTR     s1,[r10,#8]           ;646
0001ca  ee000ac1          VMLS.F32 s0,s1,s2              ;647
0001ce  eef80a62          VCVT.F32.U32 s1,s5                 ;649
0001d2  ed8a0a06          VSTR     s0,[r10,#0x18]        ;647
0001d6  ee005a10          VMOV     s0,r5                 ;649
0001da  eeb80a40          VCVT.F32.U32 s0,s0                 ;649
0001de  ee301a60          VSUB.F32 s2,s0,s1              ;649
0001e2  ee000a10          VMOV     s0,r0                 ;649
0001e6  eef80a42          VCVT.F32.U32 s1,s4                 ;649
0001ea  eeb80a40          VCVT.F32.U32 s0,s0                 ;649
0001ee  ee300a60          VSUB.F32 s0,s0,s1              ;649
0001f2  eec10a00          VDIV.F32 s1,s2,s0              ;649
0001f6  ee000a10          VMOV     s0,r0                 ;650
0001fa  eeb81a40          VCVT.F32.U32 s2,s0                 ;650
0001fe  ee005a10          VMOV     s0,r5                 ;650
000202  eeb80a40          VCVT.F32.U32 s0,s0                 ;650
000206  edc20a03          VSTR     s1,[r2,#0xc]          ;649
00020a  ee000ac1          VMLS.F32 s0,s1,s2              ;650
00020e  ed8a0a07          VSTR     s0,[r10,#0x1c]        ;650
000212  e25a              B        |L1.1738|
                  |L1.532|
000214  f8c28018          STR      r8,[r2,#0x18]         ;656  ; Run_Control
000218  61d7              STR      r7,[r2,#0x1c]         ;657  ; Run_Control
00021a  2102              MOVS     r1,#2                 ;658
00021c  f7fffffe          BL       GPIO_ResetBits
000220  e037              B        |L1.658|
                  |L1.546|
000222  f8c28018          STR      r8,[r2,#0x18]         ;663  ; Run_Control
000226  61d7              STR      r7,[r2,#0x1c]         ;664  ; Run_Control
000228  2102              MOVS     r1,#2                 ;665
00022a  f7fffffe          BL       GPIO_ResetBits
00022e  6165              STR      r5,[r4,#0x14]         ;667  ; x1
000230  f8b91000          LDRH     r1,[r9,#0]            ;667  ; Contr_Laod
000234  4648              MOV      r0,r9                 ;667
000236  61a1              STR      r1,[r4,#0x18]         ;668  ; y1
000238  e181              B        |L1.1342|
                  |L1.570|
00023a  61e5              STR      r5,[r4,#0x1c]         ;672  ; x2
00023c  f8b90000          LDRH     r0,[r9,#0]            ;672  ; Contr_Laod
000240  eeb80a40          VCVT.F32.U32 s0,s0                 ;673
000244  ee010a10          VMOV     s2,r0                 ;673
000248  eef80a60          VCVT.F32.U32 s1,s1                 ;673
00024c  6220              STR      r0,[r4,#0x20]         ;673  ; y2
00024e  eeb81a41          VCVT.F32.U32 s2,s2                 ;673
000252  ee311a40          VSUB.F32 s2,s2,s0              ;673
000256  ee005a10          VMOV     s0,r5                 ;673
00025a  eeb80a40          VCVT.F32.U32 s0,s0                 ;673
00025e  ee300a60          VSUB.F32 s0,s0,s1              ;673
000262  eec10a00          VDIV.F32 s1,s2,s0              ;673
000266  ee005a10          VMOV     s0,r5                 ;674
00026a  eeb81a40          VCVT.F32.U32 s2,s0                 ;674
00026e  ee000a10          VMOV     s0,r0                 ;674
000272  eeb80a40          VCVT.F32.U32 s0,s0                 ;674
000276  edca0a0d          VSTR     s1,[r10,#0x34]        ;673
00027a  ee000ac1          VMLS.F32 s0,s1,s2              ;674
00027e  ed8a0a1b          VSTR     s0,[r10,#0x6c]        ;674
000282  e222              B        |L1.1738|
                  |L1.644|
000284  f8c28018          STR      r8,[r2,#0x18]         ;680  ; Run_Control
000288  f8c2801c          STR      r8,[r2,#0x1c]         ;681  ; Run_Control
00028c  2102              MOVS     r1,#2                 ;682
00028e  f7fffffe          BL       GPIO_SetBits
                  |L1.658|
000292  f8868000          STRB     r8,[r6,#0]            ;659
000296  f44f707a          MOV      r0,#0x3e8             ;660
00029a  f8a90000          STRH     r0,[r9,#0]            ;660
                  |L1.670|
00029e  2101              MOVS     r1,#1                 ;661
0002a0  2002              MOVS     r0,#2                 ;661
0002a2  e128              B        |L1.1270|
                  |L1.676|
0002a4  f8c28018          STR      r8,[r2,#0x18]         ;687  ; Run_Control
0002a8  f8c2801c          STR      r8,[r2,#0x1c]         ;688  ; Run_Control
0002ac  2102              MOVS     r1,#2                 ;689
0002ae  f7fffffe          BL       GPIO_SetBits
0002b2  fbb5f0fb          UDIV     r0,r5,r11             ;690
0002b6  6160              STR      r0,[r4,#0x14]         ;691  ; x1
0002b8  f8b91000          LDRH     r1,[r9,#0]            ;691  ; Contr_Laod
0002bc  61a1              STR      r1,[r4,#0x18]         ;692  ; y1
0002be  f6446120          MOV      r1,#0x4e20            ;692
0002c2  f8a91000          STRH     r1,[r9,#0]            ;692
0002c6  e7ea              B        |L1.670|
                  |L1.712|
0002c8  fbb5f0fb          UDIV     r0,r5,r11             ;695
0002cc  61e0              STR      r0,[r4,#0x1c]         ;696  ; x2
0002ce  f8b91000          LDRH     r1,[r9,#0]            ;696  ; Contr_Laod
0002d2  eeb80a40          VCVT.F32.U32 s0,s0                 ;697
0002d6  ee011a10          VMOV     s2,r1                 ;697
0002da  eef80a60          VCVT.F32.U32 s1,s1                 ;697
0002de  6221              STR      r1,[r4,#0x20]         ;697  ; y2
0002e0  eeb81a41          VCVT.F32.U32 s2,s2                 ;697
0002e4  ee311a40          VSUB.F32 s2,s2,s0              ;697
0002e8  ee000a10          VMOV     s0,r0                 ;697
0002ec  eeb80a40          VCVT.F32.U32 s0,s0                 ;697
0002f0  ee300a60          VSUB.F32 s0,s0,s1              ;697
0002f4  eec10a00          VDIV.F32 s1,s2,s0              ;697
0002f8  ee000a10          VMOV     s0,r0                 ;698
0002fc  eeb81a40          VCVT.F32.U32 s2,s0                 ;698
000300  ee001a10          VMOV     s0,r1                 ;698
000304  eeb80a40          VCVT.F32.U32 s0,s0                 ;698
000308  edca0a0e          VSTR     s1,[r10,#0x38]        ;697
00030c  ee000ac1          VMLS.F32 s0,s1,s2              ;698
000310  ed8a0a1c          VSTR     s0,[r10,#0x70]        ;698
000314  e1d9              B        |L1.1738|
                  |L1.790|
000316  b311              CBZ      r1,|L1.862|
000318  f8dfb114          LDR      r11,|L1.1072|
00031c  2901              CMP      r1,#1                 ;712
00031e  d024              BEQ      |L1.874|
000320  2902              CMP      r1,#2                 ;720
000322  d02d              BEQ      |L1.896|
000324  4839              LDR      r0,|L1.1036|
000326  2903              CMP      r1,#3                 ;728
000328  edd03a0e          VLDR     s7,[r0,#0x38]         ;603
00032c  ed903a0d          VLDR     s6,[r0,#0x34]         ;603
000330  edd01a08          VLDR     s3,[r0,#0x20]         ;603
000334  ed901a07          VLDR     s2,[r0,#0x1c]         ;603
000338  d02f              BEQ      |L1.922|
00033a  2904              CMP      r1,#4                 ;748
00033c  d061              BEQ      |L1.1026|
00033e  2905              CMP      r1,#5                 ;754
000340  d07a              BEQ      |L1.1080|
000342  2906              CMP      r1,#6                 ;763
000344  d079              BEQ      |L1.1082|
000346  2907              CMP      r1,#7                 ;772
000348  d078              BEQ      |L1.1084|
00034a  2908              CMP      r1,#8                 ;781
00034c  d077              BEQ      |L1.1086|
00034e  2909              CMP      r1,#9                 ;805
000350  d076              BEQ      |L1.1088|
000352  4838              LDR      r0,|L1.1076|
000354  290a              CMP      r1,#0xa               ;810
000356  d074              BEQ      |L1.1090|
000358  290b              CMP      r1,#0xb               ;818
00035a  d073              BEQ      |L1.1092|
00035c  e368              B        |L1.2608|
                  |L1.862|
00035e  6217              STR      r7,[r2,#0x20]         ;707  ; Run_Control
000360  f2427010          MOV      r0,#0x2710            ;708
000364  f8a90000          STRH     r0,[r9,#0]            ;708
000368  e0c2              B        |L1.1264|
                  |L1.874|
00036a  6217              STR      r7,[r2,#0x20]         ;714  ; Run_Control
00036c  6165              STR      r5,[r4,#0x14]         ;716  ; x1
00036e  f8b91000          LDRH     r1,[r9,#0]            ;716  ; Contr_Laod
000372  4648              MOV      r0,r9                 ;716
000374  61a1              STR      r1,[r4,#0x18]         ;717  ; y1
000376  f8bb1000          LDRH     r1,[r11,#0]           ;717  ; Imon_Load_value
00037a  e9c4150b          STRD     r1,r5,[r4,#0x2c]      ;717
00037e  e0de              B        |L1.1342|
                  |L1.896|
000380  6217              STR      r7,[r2,#0x20]         ;722  ; Run_Control
000382  61e5              STR      r5,[r4,#0x1c]         ;724  ; x2
000384  f8b91000          LDRH     r1,[r9,#0]            ;724  ; Contr_Laod
000388  4648              MOV      r0,r9                 ;724
00038a  6221              STR      r1,[r4,#0x20]         ;725  ; y2
00038c  f8bb1000          LDRH     r1,[r11,#0]           ;725  ; Imon_Load_value
000390  e9c4150d          STRD     r1,r5,[r4,#0x34]      ;725
000394  f64e2160          MOV      r1,#0xea60            ;727
000398  e349              B        |L1.2606|
                  |L1.922|
00039a  6265              STR      r5,[r4,#0x24]         ;731  ; x3
00039c  f8b92000          LDRH     r2,[r9,#0]            ;731  ; Contr_Laod
0003a0  62a2              STR      r2,[r4,#0x28]         ;732  ; y3
0003a2  f8bb1000          LDRH     r1,[r11,#0]           ;732  ; Imon_Load_value
0003a6  eeb82a61          VCVT.F32.U32 s4,s3                 ;735
0003aa  eeb80a40          VCVT.F32.U32 s0,s0                 ;735
0003ae  eef80a60          VCVT.F32.U32 s1,s1                 ;735
0003b2  e9c4150f          STRD     r1,r5,[r4,#0x3c]      ;735
0003b6  ee322a40          VSUB.F32 s4,s4,s0              ;735
0003ba  eeb80a41          VCVT.F32.U32 s0,s2                 ;735
0003be  4650              MOV      r0,r10                ;735
0003c0  ee700a60          VSUB.F32 s1,s0,s1              ;735
0003c4  ee820a20          VDIV.F32 s0,s4,s1              ;735
0003c8  eeb82a41          VCVT.F32.U32 s4,s2                 ;736
0003cc  eef80a61          VCVT.F32.U32 s1,s3                 ;736
0003d0  ed8a0a08          VSTR     s0,[r10,#0x20]        ;735
0003d4  ee400a42          VMLS.F32 s1,s0,s4              ;736
0003d8  ee002a10          VMOV     s0,r2                 ;737
0003dc  eeb80a40          VCVT.F32.U32 s0,s0                 ;737
0003e0  edca0a16          VSTR     s1,[r10,#0x58]        ;736
0003e4  eef80a61          VCVT.F32.U32 s1,s3                 ;737
0003e8  ee701a60          VSUB.F32 s3,s0,s1              ;737
0003ec  ee005a10          VMOV     s0,r5                 ;737
0003f0  eef80a41          VCVT.F32.U32 s1,s2                 ;737
0003f4  eeb80a40          VCVT.F32.U32 s0,s0                 ;737
0003f8  ee300a60          VSUB.F32 s0,s0,s1              ;737
0003fc  eec10a80          VDIV.F32 s1,s3,s0              ;737
000400  e021              B        |L1.1094|
                  |L1.1026|
000402  e06b              B        |L1.1244|
                  |L1.1028|
                          DCD      calflag
                  |L1.1032|
                          DCD      Run_Control
                  |L1.1036|
                          DCD      ||.data||
                  |L1.1040|
                          DCD      CalPara
                  |L1.1044|
                          DCD      flagB
                  |L1.1048|
                          DCD      Contr_Laod
                  |L1.1052|
                          DCD      Vmon_Load_value
                  |L1.1056|
                          DCD      Vmon_POWE_value
                  |L1.1060|
                          DCD      0x40020400
                  |L1.1064|
                          DCD      Contr_Voltage
                  |L1.1068|
                          DCD      Contr_Current
                  |L1.1072|
                          DCD      Imon_Load_value
                  |L1.1076|
                          DCD      Imon_POWE_value
                  |L1.1080|
000438  e060              B        |L1.1276|
                  |L1.1082|
00043a  e071              B        |L1.1312|
                  |L1.1084|
00043c  e082              B        |L1.1348|
                  |L1.1086|
00043e  e093              B        |L1.1384|
                  |L1.1088|
000440  e149              B        |L1.1750|
                  |L1.1090|
000442  e155              B        |L1.1776|
                  |L1.1092|
000444  e162              B        |L1.1804|
                  |L1.1094|
000446  ee005a10          VMOV     s0,r5                 ;738
00044a  edca0a09          VSTR     s1,[r10,#0x24]        ;738
00044e  eeb81a40          VCVT.F32.U32 s2,s0                 ;738
000452  ee002a10          VMOV     s0,r2                 ;738
000456  eeb80a40          VCVT.F32.U32 s0,s0                 ;738
00045a  ee000ac1          VMLS.F32 s0,s1,s2              ;738
00045e  eef80a63          VCVT.F32.U32 s1,s7                 ;740
000462  eeb81a43          VCVT.F32.U32 s2,s6                 ;740
000466  ed800a17          VSTR     s0,[r0,#0x5c]         ;738
00046a  ed940a0c          VLDR     s0,[r4,#0x30]         ;740
00046e  eeb80a40          VCVT.F32.U32 s0,s0                 ;740
000472  ee700ac0          VSUB.F32 s1,s1,s0              ;740
000476  ed940a0b          VLDR     s0,[r4,#0x2c]         ;740
00047a  eeb80a40          VCVT.F32.U32 s0,s0                 ;740
00047e  ee311a40          VSUB.F32 s2,s2,s0              ;740
000482  ee800a81          VDIV.F32 s0,s1,s2              ;740
000486  eeb81a43          VCVT.F32.U32 s2,s6                 ;741
00048a  eef80a63          VCVT.F32.U32 s1,s7                 ;741
00048e  ed800a0f          VSTR     s0,[r0,#0x3c]         ;740
000492  ee400a41          VMLS.F32 s1,s0,s2              ;741
000496  ee005a10          VMOV     s0,r5                 ;742
00049a  eeb80a40          VCVT.F32.U32 s0,s0                 ;742
00049e  edc00a1d          VSTR     s1,[r0,#0x74]         ;741
0004a2  eef80a63          VCVT.F32.U32 s1,s7                 ;742
0004a6  ee301a60          VSUB.F32 s2,s0,s1              ;742
0004aa  ee001a10          VMOV     s0,r1                 ;742
0004ae  eef80a43          VCVT.F32.U32 s1,s6                 ;742
0004b2  eeb80a40          VCVT.F32.U32 s0,s0                 ;742
0004b6  ee300a60          VSUB.F32 s0,s0,s1              ;742
0004ba  eec10a00          VDIV.F32 s1,s2,s0              ;742
0004be  ee001a10          VMOV     s0,r1                 ;743
0004c2  eeb81a40          VCVT.F32.U32 s2,s0                 ;743
0004c6  ee005a10          VMOV     s0,r5                 ;743
0004ca  eeb80a40          VCVT.F32.U32 s0,s0                 ;743
0004ce  edc00a10          VSTR     s1,[r0,#0x40]         ;742
0004d2  ee000ac1          VMLS.F32 s0,s1,s2              ;743
0004d6  ed8a0a1e          VSTR     s0,[r10,#0x78]        ;743
0004da  e0f6              B        |L1.1738|
                  |L1.1244|
0004dc  f8c28020          STR      r8,[r2,#0x20]         ;749  ; Run_Control
0004e0  4671              MOV      r1,lr                 ;750
0004e2  48f3              LDR      r0,|L1.2224|
0004e4  f7fffffe          BL       GPIO_ResetBits
0004e8  f2417170          MOV      r1,#0x1770            ;751
0004ec  f8a91000          STRH     r1,[r9,#0]            ;751
                  |L1.1264|
0004f0  f8868000          STRB     r8,[r6,#0]            ;709
0004f4  e6d3              B        |L1.670|
                  |L1.1270|
0004f6  f7fffffe          BL       OnOff_GPOI_ResetSet
                  |L1.1274|
0004fa  e299              B        |L1.2608|
                  |L1.1276|
0004fc  f8c28020          STR      r8,[r2,#0x20]         ;756  ; Run_Control
000500  4671              MOV      r1,lr                 ;757
000502  48eb              LDR      r0,|L1.2224|
000504  f7fffffe          BL       GPIO_ResetBits
000508  6165              STR      r5,[r4,#0x14]         ;759  ; x1
00050a  f8b91000          LDRH     r1,[r9,#0]            ;759  ; Contr_Laod
00050e  4648              MOV      r0,r9                 ;759
000510  61a1              STR      r1,[r4,#0x18]         ;760  ; y1
000512  f8bb1000          LDRH     r1,[r11,#0]           ;760  ; Imon_Load_value
000516  e9c4150d          STRD     r1,r5,[r4,#0x34]      ;760
00051a  f64261e0          MOV      r1,#0x2ee0            ;762
00051e  e286              B        |L1.2606|
                  |L1.1312|
000520  f8c28020          STR      r8,[r2,#0x20]         ;765  ; Run_Control
000524  4671              MOV      r1,lr                 ;766
000526  48e2              LDR      r0,|L1.2224|
000528  f7fffffe          BL       GPIO_ResetBits
00052c  61e5              STR      r5,[r4,#0x1c]         ;768  ; x2
00052e  f8b91000          LDRH     r1,[r9,#0]            ;768  ; Contr_Laod
000532  4648              MOV      r0,r9                 ;768
000534  6221              STR      r1,[r4,#0x20]         ;769  ; y2
000536  f8bb1000          LDRH     r1,[r11,#0]           ;769  ; Imon_Load_value
00053a  e9c4150f          STRD     r1,r5,[r4,#0x3c]      ;769
                  |L1.1342|
00053e  f6446120          MOV      r1,#0x4e20            ;668
000542  e274              B        |L1.2606|
                  |L1.1348|
000544  f8c28020          STR      r8,[r2,#0x20]         ;774  ; Run_Control
000548  4671              MOV      r1,lr                 ;775
00054a  48d9              LDR      r0,|L1.2224|
00054c  f7fffffe          BL       GPIO_ResetBits
000550  6265              STR      r5,[r4,#0x24]         ;777  ; x3
000552  f8b91000          LDRH     r1,[r9,#0]            ;777  ; Contr_Laod
000556  4648              MOV      r0,r9                 ;777
000558  62a1              STR      r1,[r4,#0x28]         ;778  ; y3
00055a  f8bb1000          LDRH     r1,[r11,#0]           ;778  ; Imon_Load_value
00055e  e9c41511          STRD     r1,r5,[r4,#0x44]      ;778
000562  f6494140          MOV      r1,#0x9c40            ;780
000566  e262              B        |L1.2606|
                  |L1.1384|
000568  62e5              STR      r5,[r4,#0x2c]         ;784  ; x4
00056a  f8b92000          LDRH     r2,[r9,#0]            ;784  ; Contr_Laod
00056e  6322              STR      r2,[r4,#0x30]         ;785  ; y4
000570  f8bb1000          LDRH     r1,[r11,#0]           ;785  ; Imon_Load_value
000574  eeb84a61          VCVT.F32.U32 s8,s3                 ;788
000578  eeb80a40          VCVT.F32.U32 s0,s0                 ;788
00057c  eef80a60          VCVT.F32.U32 s1,s1                 ;788
000580  e9c41513          STRD     r1,r5,[r4,#0x4c]      ;788
000584  ee344a40          VSUB.F32 s8,s8,s0              ;788
000588  eeb80a41          VCVT.F32.U32 s0,s2                 ;788
00058c  4650              MOV      r0,r10                ;788
00058e  ee700a60          VSUB.F32 s1,s0,s1              ;788
000592  ee840a20          VDIV.F32 s0,s8,s1              ;788
000596  eeb84a41          VCVT.F32.U32 s8,s2                 ;789
00059a  eef80a61          VCVT.F32.U32 s1,s3                 ;789
00059e  eeb81a41          VCVT.F32.U32 s2,s2                 ;790
0005a2  ed8a0a0a          VSTR     s0,[r10,#0x28]        ;788
0005a6  ee400a44          VMLS.F32 s1,s0,s8              ;789
0005aa  eeb80a62          VCVT.F32.U32 s0,s5                 ;790
0005ae  edca0a18          VSTR     s1,[r10,#0x60]        ;789
0005b2  eef80a61          VCVT.F32.U32 s1,s3                 ;790
0005b6  ee700a60          VSUB.F32 s1,s0,s1              ;790
0005ba  eeb80a42          VCVT.F32.U32 s0,s4                 ;790
0005be  ee301a41          VSUB.F32 s2,s0,s2              ;790
0005c2  ee800a81          VDIV.F32 s0,s1,s2              ;790
0005c6  eeb81a42          VCVT.F32.U32 s2,s4                 ;791
0005ca  eef80a62          VCVT.F32.U32 s1,s5                 ;791
0005ce  ed8a0a0b          VSTR     s0,[r10,#0x2c]        ;790
0005d2  ee400a41          VMLS.F32 s1,s0,s2              ;791
0005d6  ee002a10          VMOV     s0,r2                 ;792
0005da  eeb80a40          VCVT.F32.U32 s0,s0                 ;792
0005de  edc00a19          VSTR     s1,[r0,#0x64]         ;791
0005e2  eef80a62          VCVT.F32.U32 s1,s5                 ;792
0005e6  ee301a60          VSUB.F32 s2,s0,s1              ;792
0005ea  ee005a10          VMOV     s0,r5                 ;792
0005ee  eef80a42          VCVT.F32.U32 s1,s4                 ;792
0005f2  eeb82a43          VCVT.F32.U32 s4,s6                 ;795
0005f6  eeb80a40          VCVT.F32.U32 s0,s0                 ;792
0005fa  ee300a60          VSUB.F32 s0,s0,s1              ;792
0005fe  eec10a00          VDIV.F32 s1,s2,s0              ;792
000602  ee005a10          VMOV     s0,r5                 ;793
000606  eeb81a40          VCVT.F32.U32 s2,s0                 ;793
00060a  ee002a10          VMOV     s0,r2                 ;793
00060e  eeb80a40          VCVT.F32.U32 s0,s0                 ;793
000612  edc00a0c          VSTR     s1,[r0,#0x30]         ;792
000616  ee000ac1          VMLS.F32 s0,s1,s2              ;793
00061a  eef80a63          VCVT.F32.U32 s1,s7                 ;795
00061e  ed800a1a          VSTR     s0,[r0,#0x68]         ;793
000622  ed941a10          VLDR     s2,[r4,#0x40]         ;795
000626  eeb80a41          VCVT.F32.U32 s0,s2                 ;795
00062a  ee701a60          VSUB.F32 s3,s0,s1              ;795
00062e  edd40a0f          VLDR     s1,[r4,#0x3c]         ;795
000632  eeb80a60          VCVT.F32.U32 s0,s1                 ;795
000636  ee302a42          VSUB.F32 s4,s0,s4              ;795
00063a  ee810a82          VDIV.F32 s0,s3,s4              ;795
00063e  eeb82a60          VCVT.F32.U32 s4,s1                 ;796
000642  eef81a41          VCVT.F32.U32 s3,s2                 ;796
000646  eeb81a41          VCVT.F32.U32 s2,s2                 ;797
00064a  eef80a60          VCVT.F32.U32 s1,s1                 ;797
00064e  ed800a11          VSTR     s0,[r0,#0x44]         ;795
000652  ee401a42          VMLS.F32 s3,s0,s4              ;796
000656  edc01a1f          VSTR     s3,[r0,#0x7c]         ;796
00065a  ed940a12          VLDR     s0,[r4,#0x48]         ;797
00065e  eef81a40          VCVT.F32.U32 s3,s0                 ;797
000662  ee711ac1          VSUB.F32 s3,s3,s2              ;797
000666  ed941a11          VLDR     s2,[r4,#0x44]         ;797
00066a  eeb82a41          VCVT.F32.U32 s4,s2                 ;797
00066e  ee322a60          VSUB.F32 s4,s4,s1              ;797
000672  eec10a82          VDIV.F32 s1,s3,s4              ;797
000676  eeb82a41          VCVT.F32.U32 s4,s2                 ;798
00067a  eef81a40          VCVT.F32.U32 s3,s0                 ;798
00067e  eeb80a40          VCVT.F32.U32 s0,s0                 ;799
000682  edc00a12          VSTR     s1,[r0,#0x48]         ;797
000686  ee401ac2          VMLS.F32 s3,s1,s4              ;798
00068a  ee005a90          VMOV     s1,r5                 ;799
00068e  eef80a60          VCVT.F32.U32 s1,s1                 ;799
000692  edc01a20          VSTR     s3,[r0,#0x80]         ;798
000696  ee701ac0          VSUB.F32 s3,s1,s0              ;799
00069a  ee001a10          VMOV     s0,r1                 ;799
00069e  eef80a41          VCVT.F32.U32 s1,s2                 ;799
0006a2  eeb80a40          VCVT.F32.U32 s0,s0                 ;799
0006a6  ee300a60          VSUB.F32 s0,s0,s1              ;799
0006aa  eec10a80          VDIV.F32 s1,s3,s0              ;799
0006ae  ee001a10          VMOV     s0,r1                 ;800
0006b2  eeb81a40          VCVT.F32.U32 s2,s0                 ;800
0006b6  ee005a10          VMOV     s0,r5                 ;800
0006ba  eeb80a40          VCVT.F32.U32 s0,s0                 ;800
0006be  edc00a13          VSTR     s1,[r0,#0x4c]         ;799
0006c2  ee000ac1          VMLS.F32 s0,s1,s2              ;800
0006c6  ed8a0a21          VSTR     s0,[r10,#0x84]        ;800
                  |L1.1738|
0006ca  f8cc3000          STR      r3,[r12,#0]           ;746  ; flagB
0006ce  7037              STRB     r7,[r6,#0]            ;746
0006d0  f7fffffe          BL       Off_GPOI_ResetSet
0006d4  e1ac              B        |L1.2608|
                  |L1.1750|
0006d6  4977              LDR      r1,|L1.2228|
0006d8  f64050ac          MOV      r0,#0xdac             ;806
0006dc  8008              STRH     r0,[r1,#0]            ;806
0006de  4876              LDR      r0,|L1.2232|
0006e0  f44f617a          MOV      r1,#0xfa0             ;807
0006e4  8001              STRH     r1,[r0,#0]            ;807
0006e6  f8868000          STRB     r8,[r6,#0]            ;808
                  |L1.1770|
0006ea  2101              MOVS     r1,#1                 ;632
0006ec  2000              MOVS     r0,#0                 ;632
0006ee  e702              B        |L1.1270|
                  |L1.1776|
0006f0  4971              LDR      r1,|L1.2232|
0006f2  6165              STR      r5,[r4,#0x14]         ;813  ; x1
0006f4  880a              LDRH     r2,[r1,#0]            ;813  ; Contr_Current
0006f6  61a2              STR      r2,[r4,#0x18]         ;814  ; y1
0006f8  8800              LDRH     r0,[r0,#0]            ;814  ; Imon_POWE_value
0006fa  e9c40509          STRD     r0,r5,[r4,#0x24]      ;814
0006fe  4a6d              LDR      r2,|L1.2228|
000700  f64050ac          MOV      r0,#0xdac             ;816
000704  8010              STRH     r0,[r2,#0]            ;816
000706  0080              LSLS     r0,r0,#2              ;817
                  |L1.1800|
000708  8008              STRH     r0,[r1,#0]            ;817
00070a  e191              B        |L1.2608|
                  |L1.1804|
00070c  496a              LDR      r1,|L1.2232|
00070e  61e5              STR      r5,[r4,#0x1c]         ;821  ; x2
000710  8809              LDRH     r1,[r1,#0]            ;821  ; Contr_Current
000712  6221              STR      r1,[r4,#0x20]         ;822  ; y2
000714  8800              LDRH     r0,[r0,#0]            ;822  ; Imon_POWE_value
000716  ee011a10          VMOV     s2,r1                 ;825
00071a  eeb80a40          VCVT.F32.U32 s0,s0                 ;825
00071e  eef80a60          VCVT.F32.U32 s1,s1                 ;825
000722  eeb81a41          VCVT.F32.U32 s2,s2                 ;825
000726  e9c4050b          STRD     r0,r5,[r4,#0x2c]      ;822
00072a  ee311a40          VSUB.F32 s2,s2,s0              ;825
00072e  ee005a10          VMOV     s0,r5                 ;825
000732  4652              MOV      r2,r10                ;825
000734  eeb80a40          VCVT.F32.U32 s0,s0                 ;825
000738  ee300a60          VSUB.F32 s0,s0,s1              ;825
00073c  eec10a00          VDIV.F32 s1,s2,s0              ;825
000740  ee005a10          VMOV     s0,r5                 ;826
000744  eeb81a40          VCVT.F32.U32 s2,s0                 ;826
000748  ee001a10          VMOV     s0,r1                 ;826
00074c  eeb80a40          VCVT.F32.U32 s0,s0                 ;826
000750  edca0a14          VSTR     s1,[r10,#0x50]        ;825
000754  ee000ac1          VMLS.F32 s0,s1,s2              ;826
000758  eef80a62          VCVT.F32.U32 s1,s5                 ;828
00075c  ed8a0a22          VSTR     s0,[r10,#0x88]        ;826
000760  ee005a10          VMOV     s0,r5                 ;828
000764  eeb80a40          VCVT.F32.U32 s0,s0                 ;828
000768  ee301a60          VSUB.F32 s2,s0,s1              ;828
00076c  ee000a10          VMOV     s0,r0                 ;828
000770  eef80a42          VCVT.F32.U32 s1,s4                 ;828
000774  eeb80a40          VCVT.F32.U32 s0,s0                 ;828
000778  ee300a60          VSUB.F32 s0,s0,s1              ;828
00077c  eec10a00          VDIV.F32 s1,s2,s0              ;828
000780  ee000a10          VMOV     s0,r0                 ;829
000784  eeb81a40          VCVT.F32.U32 s2,s0                 ;829
000788  ee005a10          VMOV     s0,r5                 ;829
00078c  eeb80a40          VCVT.F32.U32 s0,s0                 ;829
000790  edc20a15          VSTR     s1,[r2,#0x54]         ;828
000794  ee000ac1          VMLS.F32 s0,s1,s2              ;829
000798  ed8a0a23          VSTR     s0,[r10,#0x8c]        ;829
00079c  e795              B        |L1.1738|
                  |L1.1950|
00079e  f8df911c          LDR      r9,|L1.2236|
0007a2  b1c1              CBZ      r1,|L1.2006|
0007a4  2901              CMP      r1,#1                 ;849
0007a6  d023              BEQ      |L1.2032|
0007a8  2902              CMP      r1,#2                 ;859
0007aa  d046              BEQ      |L1.2106|
0007ac  2903              CMP      r1,#3                 ;867
0007ae  d054              BEQ      |L1.2138|
0007b0  f8dfb10c          LDR      r11,|L1.2240|
0007b4  f64f70ff          MOV      r0,#0xffff            ;881
0007b8  2904              CMP      r1,#4                 ;877
0007ba  d076              BEQ      |L1.2218|
0007bc  2905              CMP      r1,#5                 ;883
0007be  d075              BEQ      |L1.2220|
0007c0  f8dfb100          LDR      r11,|L1.2244|
0007c4  2906              CMP      r1,#6                 ;894
0007c6  d070              BEQ      |L1.2218|
0007c8  2907              CMP      r1,#7                 ;899
0007ca  d070              BEQ      |L1.2222|
0007cc  2908              CMP      r1,#8                 ;909
0007ce  d07b              BEQ      |L1.2248|
0007d0  2909              CMP      r1,#9                 ;915
0007d2  d07a              BEQ      |L1.2250|
0007d4  e12c              B        |L1.2608|
                  |L1.2006|
0007d6  4640              MOV      r0,r8                 ;838
0007d8  46c2              MOV      r10,r8                ;838
0007da  4690              MOV      r8,r2                 ;838
0007dc  6210              STR      r0,[r2,#0x20]         ;838  ; Run_Control
0007de  4671              MOV      r1,lr                 ;839
0007e0  4833              LDR      r0,|L1.2224|
0007e2  f7fffffe          BL       GPIO_ResetBits
0007e6  f8c87024          STR      r7,[r8,#0x24]         ;840  ; Run_Control
0007ea  f886a000          STRB     r10,[r6,#0]           ;841
0007ee  e02e              B        |L1.2126|
                  |L1.2032|
0007f0  f8b90000          LDRH     r0,[r9,#0]            ;852  ; Rmon_value
0007f4  ee015a10          VMOV     s2,r5                 ;854
0007f8  eeb80a40          VCVT.F32.U32 s0,s0                 ;854
0007fc  eef80a60          VCVT.F32.U32 s1,s1                 ;854
000800  eeb81a41          VCVT.F32.U32 s2,s2                 ;854
000804  e9c40507          STRD     r0,r5,[r4,#0x1c]      ;852
000808  ee311a40          VSUB.F32 s2,s2,s0              ;854
00080c  ee000a10          VMOV     s0,r0                 ;854
000810  eeb80a40          VCVT.F32.U32 s0,s0                 ;854
000814  ee300a60          VSUB.F32 s0,s0,s1              ;854
000818  eec10a00          VDIV.F32 s1,s2,s0              ;854
00081c  ee000a10          VMOV     s0,r0                 ;855
000820  eeb81a40          VCVT.F32.U32 s2,s0                 ;855
000824  ee005a10          VMOV     s0,r5                 ;855
000828  eeb80a40          VCVT.F32.U32 s0,s0                 ;855
00082c  edca0a24          VSTR     s1,[r10,#0x90]        ;854
000830  ee000ac1          VMLS.F32 s0,s1,s2              ;855
000834  ed8a0a29          VSTR     s0,[r10,#0xa4]        ;855
000838  e033              B        |L1.2210|
                  |L1.2106|
00083a  4617              MOV      r7,r2                 ;861
00083c  f8c28020          STR      r8,[r2,#0x20]         ;861  ; Run_Control
000840  4671              MOV      r1,lr                 ;862
000842  481b              LDR      r0,|L1.2224|
000844  f7fffffe          BL       GPIO_ResetBits
000848  f8c78024          STR      r8,[r7,#0x24]         ;863  ; Run_Control
00084c  e0aa              B        |L1.2468|
                  |L1.2126|
00084e  4648              MOV      r0,r9                 ;842
                  |L1.2128|
000850  f8b00000          LDRH.W   r0,[r0,#0]            ;603
                  |L1.2132|
000854  e9c40505          STRD     r0,r5,[r4,#0x14]      ;603
000858  e0ea              B        |L1.2608|
                  |L1.2138|
00085a  f8b90000          LDRH     r0,[r9,#0]            ;870  ; Rmon_value
00085e  ee015a10          VMOV     s2,r5                 ;872
000862  eeb80a40          VCVT.F32.U32 s0,s0                 ;872
000866  eef80a60          VCVT.F32.U32 s1,s1                 ;872
00086a  eeb81a41          VCVT.F32.U32 s2,s2                 ;872
00086e  e9c40507          STRD     r0,r5,[r4,#0x1c]      ;870
000872  ee311a40          VSUB.F32 s2,s2,s0              ;872
000876  ee000a10          VMOV     s0,r0                 ;872
00087a  eeb80a40          VCVT.F32.U32 s0,s0                 ;872
00087e  ee300a60          VSUB.F32 s0,s0,s1              ;872
000882  eec10a00          VDIV.F32 s1,s2,s0              ;872
000886  ee000a10          VMOV     s0,r0                 ;873
00088a  eeb81a40          VCVT.F32.U32 s2,s0                 ;873
00088e  ee005a10          VMOV     s0,r5                 ;873
000892  eeb80a40          VCVT.F32.U32 s0,s0                 ;873
000896  edca0a25          VSTR     s1,[r10,#0x94]        ;872
00089a  ee000ac1          VMLS.F32 s0,s1,s2              ;873
00089e  ed8a0a2a          VSTR     s0,[r10,#0xa8]        ;873
                  |L1.2210|
0008a2  f8cc3000          STR      r3,[r12,#0]           ;858  ; flagB
0008a6  7037              STRB     r7,[r6,#0]            ;858
0008a8  e0c2              B        |L1.2608|
                  |L1.2218|
0008aa  e03e              B        |L1.2346|
                  |L1.2220|
0008ac  e00e              B        |L1.2252|
                  |L1.2222|
0008ae  e049              B        |L1.2372|
                  |L1.2224|
                          DCD      0x40020800
                  |L1.2228|
                          DCD      Contr_Voltage
                  |L1.2232|
                          DCD      Contr_Current
                  |L1.2236|
                          DCD      Rmon_value
                  |L1.2240|
                          DCD      R1mon_value
                  |L1.2244|
                          DCD      R2mon_value
                  |L1.2248|
0008c8  e06a              B        |L1.2464|
                  |L1.2250|
0008ca  e06e              B        |L1.2474|
                  |L1.2252|
0008cc  f8bb2000          LDRH     r2,[r11,#0]           ;887  ; R1mon_value
0008d0  f44f787a          MOV      r8,#0x3e8             ;887
0008d4  f8bb1000          LDRH     r1,[r11,#0]           ;887  ; R1mon_value
0008d8  fb02f208          MUL      r2,r2,r8              ;887
0008dc  ee015a10          VMOV     s2,r5                 ;889
0008e0  1a40              SUBS     r0,r0,r1              ;887
0008e2  fbb2f0f0          UDIV     r0,r2,r0              ;887
0008e6  eeb81a41          VCVT.F32.U32 s2,s2                 ;889
0008ea  eeb80a40          VCVT.F32.U32 s0,s0                 ;889
0008ee  eef80a60          VCVT.F32.U32 s1,s1                 ;889
0008f2  e9c40507          STRD     r0,r5,[r4,#0x1c]      ;887
0008f6  ee311a40          VSUB.F32 s2,s2,s0              ;889
0008fa  ee000a10          VMOV     s0,r0                 ;889
0008fe  eeb80a40          VCVT.F32.U32 s0,s0                 ;889
000902  ee300a60          VSUB.F32 s0,s0,s1              ;889
000906  eec10a00          VDIV.F32 s1,s2,s0              ;889
00090a  ee000a10          VMOV     s0,r0                 ;890
00090e  eeb81a40          VCVT.F32.U32 s2,s0                 ;890
000912  ee005a10          VMOV     s0,r5                 ;890
000916  eeb80a40          VCVT.F32.U32 s0,s0                 ;890
00091a  edca0a27          VSTR     s1,[r10,#0x9c]        ;889
00091e  ee000ac1          VMLS.F32 s0,s1,s2              ;890
000922  ed8a0a2c          VSTR     s0,[r10,#0xb0]        ;890
000926  e7bc              B        |L1.2210|
                  |L1.2344|
000928  e064              B        |L1.2548|
                  |L1.2346|
00092a  f8868000          STRB     r8,[r6,#0]            ;896
00092e  f8bb2000          LDRH     r2,[r11,#0]           ;897  ; R2mon_value
000932  f44f737a          MOV      r3,#0x3e8             ;897
000936  f8bb1000          LDRH     r1,[r11,#0]           ;897  ; R2mon_value
00093a  435a              MULS     r2,r3,r2              ;897
00093c  1a40              SUBS     r0,r0,r1              ;897
00093e  fbb2f0f0          UDIV     r0,r2,r0              ;897
000942  e787              B        |L1.2132|
                  |L1.2372|
000944  f8bb2000          LDRH     r2,[r11,#0]           ;902  ; R2mon_value
000948  f44f787a          MOV      r8,#0x3e8             ;902
00094c  f8bb1000          LDRH     r1,[r11,#0]           ;902  ; R2mon_value
000950  fb02f208          MUL      r2,r2,r8              ;902
000954  ee015a10          VMOV     s2,r5                 ;904
000958  1a40              SUBS     r0,r0,r1              ;902
00095a  fbb2f0f0          UDIV     r0,r2,r0              ;902
00095e  eeb81a41          VCVT.F32.U32 s2,s2                 ;904
000962  eeb80a40          VCVT.F32.U32 s0,s0                 ;904
000966  eef80a60          VCVT.F32.U32 s1,s1                 ;904
00096a  e9c40507          STRD     r0,r5,[r4,#0x1c]      ;902
00096e  ee311a40          VSUB.F32 s2,s2,s0              ;904
000972  ee000a10          VMOV     s0,r0                 ;904
000976  eeb80a40          VCVT.F32.U32 s0,s0                 ;904
00097a  ee300a60          VSUB.F32 s0,s0,s1              ;904
00097e  eec10a00          VDIV.F32 s1,s2,s0              ;904
000982  ee000a10          VMOV     s0,r0                 ;905
000986  eeb81a40          VCVT.F32.U32 s2,s0                 ;905
00098a  ee005a10          VMOV     s0,r5                 ;905
00098e  eeb80a40          VCVT.F32.U32 s0,s0                 ;905
000992  edca0a28          VSTR     s1,[r10,#0xa0]        ;904
000996  ee000ac1          VMLS.F32 s0,s1,s2              ;905
00099a  ed8a0a2d          VSTR     s0,[r10,#0xb4]        ;905
00099e  e780              B        |L1.2210|
                  |L1.2464|
0009a0  f8c28024          STR      r8,[r2,#0x24]         ;911  ; Run_Control
                  |L1.2468|
0009a4  f8868000          STRB     r8,[r6,#0]            ;912
0009a8  e751              B        |L1.2126|
                  |L1.2474|
0009aa  f8b90000          LDRH     r0,[r9,#0]            ;918  ; Rmon_value
0009ae  ee015a10          VMOV     s2,r5                 ;920
0009b2  eeb80a40          VCVT.F32.U32 s0,s0                 ;920
0009b6  eef80a60          VCVT.F32.U32 s1,s1                 ;920
0009ba  eeb81a41          VCVT.F32.U32 s2,s2                 ;920
0009be  e9c40507          STRD     r0,r5,[r4,#0x1c]      ;918
0009c2  ee311a40          VSUB.F32 s2,s2,s0              ;920
0009c6  ee000a10          VMOV     s0,r0                 ;920
0009ca  eeb80a40          VCVT.F32.U32 s0,s0                 ;920
0009ce  ee300a60          VSUB.F32 s0,s0,s1              ;920
0009d2  eec10a00          VDIV.F32 s1,s2,s0              ;920
0009d6  ee000a10          VMOV     s0,r0                 ;921
0009da  eeb81a40          VCVT.F32.U32 s2,s0                 ;921
0009de  ee005a10          VMOV     s0,r5                 ;921
0009e2  eeb80a40          VCVT.F32.U32 s0,s0                 ;921
0009e6  edca0a26          VSTR     s1,[r10,#0x98]        ;920
0009ea  ee000ac1          VMLS.F32 s0,s1,s2              ;921
0009ee  ed8a0a2b          VSTR     s0,[r10,#0xac]        ;921
0009f2  e756              B        |L1.2210|
                  |L1.2548|
;;;928    		if(range == 0)
0009f4  b131              CBZ      r1,|L1.2564|
;;;929    		{
;;;930    			Contr_Laod += 50;
;;;931    		}else if(range == 1){
0009f6  2901              CMP      r1,#1
0009f8  d009              BEQ      |L1.2574|
;;;932    			Contr_Laod -= 50;
;;;933    		}else if(range == 2){
0009fa  2902              CMP      r1,#2
0009fc  d00c              BEQ      |L1.2584|
;;;934    			Contr_Laod += 500;
;;;935    		}else if(range == 3){
0009fe  2903              CMP      r1,#3
000a00  d010              BEQ      |L1.2596|
000a02  e015              B        |L1.2608|
                  |L1.2564|
000a04  f8b91000          LDRH     r1,[r9,#0]            ;930  ; Contr_Laod
000a08  4648              MOV      r0,r9                 ;930
000a0a  3132              ADDS     r1,r1,#0x32           ;930
000a0c  e00f              B        |L1.2606|
                  |L1.2574|
000a0e  f8b91000          LDRH     r1,[r9,#0]            ;932  ; Contr_Laod
000a12  4648              MOV      r0,r9                 ;932
000a14  3932              SUBS     r1,r1,#0x32           ;932
000a16  e00a              B        |L1.2606|
                  |L1.2584|
000a18  f8b91000          LDRH     r1,[r9,#0]            ;934  ; Contr_Laod
000a1c  4648              MOV      r0,r9                 ;934
000a1e  f50171fa          ADD      r1,r1,#0x1f4          ;934
000a22  e004              B        |L1.2606|
                  |L1.2596|
;;;936    			Contr_Laod -= 500;
000a24  f8b91000          LDRH     r1,[r9,#0]  ; Contr_Laod
000a28  4648              MOV      r0,r9
000a2a  f5a171fa          SUB      r1,r1,#0x1f4
                  |L1.2606|
000a2e  8001              STRH     r1,[r0,#0]
                  |L1.2608|
;;;937    		}
;;;938    	}
;;;939    		
;;;940    
;;;941    	Write_Flash_Bytes();
000a30  e8bd5ff0          POP      {r4-r12,lr}
000a34  f7ffbffe          B.W      Write_Flash_Bytes
;;;942    //	else if(mode == 1){//测量电流
;;;943    //		if(range == 1)
;;;944    //		{
;;;945    //			x1 = abs(I_CS);
;;;946    //			y1 = data;
;;;947    //		}else if(range == 2){
;;;948    //			x2 = abs(I_CS);
;;;949    //			y2 = data;
;;;950    //			SaveDebug.TestIcal[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;951    //			SaveDebug.OffsetI[1] = (float)y2 - SaveDebug.TestIcal[1]*(float)x2;
;;;952    //		}else if(range == 4){
;;;953    //			x1 = abs(I_CS);
;;;954    //			y1 = data;
;;;955    //		}else if(range == 5){
;;;956    //			x2 = abs(I_CS);
;;;957    //			y2 = data;
;;;958    //			SaveDebug.TestIcal[4] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;959    //			SaveDebug.OffsetI[3] = (float)y2 - SaveDebug.TestIcal[4]*(float)x2;
;;;960    //		}else if(range == 0){
;;;961    //			SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[0]);
;;;962    //		}else if(range == 3){
;;;963    //			SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[0]));
;;;964    //		}
;;;965    ////		else if(range == 4){
;;;966    ////			x1 = V_CS;
;;;967    ////			y1 = data;
;;;968    ////		}else if(range == 5){
;;;969    ////			x2 = V_CS;
;;;970    ////			y2 = data;
;;;971    ////			SaveDebug.TestVcal[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;972    ////			SaveDebug.OffsetV[2] = (float)y2 - SaveDebug.TestVcal[2]*(float)x2;
;;;973    ////		}
;;;974    //		
;;;975    ////		if(range < 3)
;;;976    ////		{
;;;977    ////			if(range == 0)
;;;978    ////			{
;;;979    ////				SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[0]);
;;;980    ////			}else{
;;;981    ////				SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[1]);
;;;982    ////			}			
;;;983    ////		}else{
;;;984    ////			if(range == 3)
;;;985    ////			{
;;;986    ////				SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[0]));
;;;987    ////			}else{
;;;988    ////				SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[1]));
;;;989    ////			}
;;;990    ////		}
;;;991    ////		calflag = 1;
;;;992    //	}else if(mode == 2){//控制电压
;;;993    //		if(range == 0)
;;;994    //		{
;;;995    //			_D_ = 1000;
;;;996    //			x1 = data;
;;;997    //			y1 = _D_;
;;;998    //		}else if(range == 1){
;;;999    //			_D_ = 7000;
;;;1000   //			x2 = data;
;;;1001   //			y2 = _D_;
;;;1002   //			SaveDebug.ControlV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;1003   //			SaveDebug.OffsetCV[0] = (float)y2 - SaveDebug.ControlV[0]*(float)x2;
;;;1004   //		}else if(range == 2){
;;;1005   //			_D_ = 10000;
;;;1006   //			x1 = data;
;;;1007   //			y1 = _D_;
;;;1008   //		}else if(range == 3){
;;;1009   //			_D_ = 13000;
;;;1010   //			x2 = data;
;;;1011   //			y2 = _D_;
;;;1012   //			SaveDebug.ControlV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;1013   //			SaveDebug.OffsetCV[1] = (float)y2 - SaveDebug.ControlV[1]*(float)x2;
;;;1014   //		}else if(range == 4){
;;;1015   //			_D_ = 17000;
;;;1016   //			x1 = data;
;;;1017   //			y1 = _D_;
;;;1018   //		}else if(range == 5){
;;;1019   //			_D_ = 20000;
;;;1020   //			x2 = data;
;;;1021   //			y2 = _D_;
;;;1022   //			SaveDebug.ControlV[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;1023   //			SaveDebug.OffsetCV[2] = (float)y2 - SaveDebug.ControlV[2]*(float)x2;
;;;1024   //		}else if(range == 6){
;;;1025   //			_D_ = 24000;
;;;1026   //			x1 = data;
;;;1027   //			y1 = _D_;
;;;1028   //		}else if(range == 7){
;;;1029   //			_D_ = 27000;
;;;1030   //			x2 = data;
;;;1031   //			y2 = _D_;
;;;1032   //			SaveDebug.ControlV[3] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;1033   //			SaveDebug.OffsetCV[3] = (float)y2 - SaveDebug.ControlV[3]*(float)x2;
;;;1034   //		}
;;;1035   //		
;;;1036   ////		if(range == 0)
;;;1037   ////		{
;;;1038   ////			SaveDebug.ControlV[range] = (float)1000/(float)data;
;;;1039   ////		}else if(range == 1){
;;;1040   ////			SaveDebug.ControlV[range] = (float)10000/(float)data;
;;;1041   ////		}else if(range == 2){
;;;1042   ////			SaveDebug.ControlV[range] = (float)15000/(float)data;
;;;1043   ////		}else if(range == 3){
;;;1044   ////			SaveDebug.ControlV[range] = (float)19000/(float)data;
;;;1045   ////		}
;;;1046   ////		calflag = 1;
;;;1047   //	}else if(mode == 3){//电流清零
;;;1048   //		SaveDebug.ClearI[range] = I_CS;
;;;1049   ////		calflag = 1;
;;;1050   //	}
;;;1051   	
;;;1052   }
;;;1053   
                          ENDP


                          AREA ||i.DMA1_Stream3_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Stream3_IRQHandler PROC
;;;2419   
;;;2420   void DMA1_Stream3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2421   {
;;;2422   	//----DMA1 通道3完成中断，对应的中断也需要清除
;;;2423   	if(DMA_GetITStatus(DMA1_Stream3,DMA_IT_TCIF3) != RESET)   
000002  4d0c              LDR      r5,|L2.52|
000004  4c0c              LDR      r4,|L2.56|
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       DMA_GetITStatus
00000e  2800              CMP      r0,#0
000010  d00e              BEQ      |L2.48|
;;;2424       {
;;;2425   		/* 清除标志位 */
;;;2426   		DMA_ClearFlag(DMA1_Stream3,DMA_IT_TCIF3); 
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       DMA_ClearFlag
;;;2427   		/* 关闭DMA */
;;;2428   		DMA_Cmd(DMA1_Stream3,DISABLE);
00001a  2100              MOVS     r1,#0
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       DMA_Cmd
;;;2429   		
;;;2430   		while (!(USART3->SR & USART_FLAG_TC));  //硬件数据发送完毕
000022  4806              LDR      r0,|L2.60|
                  |L2.36|
000024  8801              LDRH     r1,[r0,#0]
000026  0649              LSLS     r1,r1,#25
000028  d5fc              BPL      |L2.36|
                  |L2.42|
;;;2431   		while (!(USART3->SR & USART_FLAG_TXE)); //等待数据从软件拷贝到硬件进行发送
00002a  8801              LDRH     r1,[r0,#0]
00002c  0609              LSLS     r1,r1,#24
00002e  d5fc              BPL      |L2.42|
                  |L2.48|
;;;2432   	}
;;;2433   }
000030  bd70              POP      {r4-r6,pc}
;;;2434   
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      0x18008000
                  |L2.56|
                          DCD      0x40026058
                  |L2.60|
                          DCD      0x40004800

                          AREA ||i.IsDigitChar||, CODE, READONLY, ALIGN=1

                  IsDigitChar PROC
;;;91     /*****************************************************************/
;;;92     unsigned short IsDigitChar(unsigned char a)             //如果a的值是数字的话返回1，否则返回0
000000  3830              SUBS     r0,r0,#0x30
;;;93     {
;;;94     	int b;
;;;95       if(a<0x30 || a>0x39)                     //数字1-9
000002  280a              CMP      r0,#0xa
000004  d301              BCC      |L3.10|
;;;96       	{
;;;97       	   b=0;
000006  2000              MOVS     r0,#0
;;;98       	}
;;;99       else
;;;100      	{
;;;101      	   b=1;
;;;102      	}
;;;103      return b;
;;;104    }
000008  4770              BX       lr
                  |L3.10|
00000a  2001              MOVS     r0,#1                 ;101
00000c  4770              BX       lr
;;;105    void SetPowerV(vu32 powv)
                          ENDP


                          AREA ||i.LIST_ONOFF||, CODE, READONLY, ALIGN=2

                  LIST_ONOFF PROC
;;;403    
;;;404    void LIST_ONOFF(vu8 value)
000000  e92d43f1          PUSH     {r0,r4-r9,lr}
;;;405    {
;;;406    	switch(MODE)
000004  4b63              LDR      r3,|L4.404|
000006  ed2d8b02          VPUSH    {d8}                  ;405
00000a  f893c005          LDRB     r12,[r3,#5]  ; MODE
;;;407    	{
;;;408    		case 0://电子负载ON/OFF
;;;409    		{
;;;410    			LOAD_MODE=0;
;;;411    			GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
;;;412    			if( value == 0 ){
;;;413    				
;;;414    				Flag_Swtich_ON = 0;
00000e  4d63              LDR      r5,|L4.412|
000010  2600              MOVS     r6,#0                 ;406
000012  4a61              LDR      r2,|L4.408|
;;;415    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	 
;;;416    //				TIM_SetCompare1(TIM1,33000/2);				
;;;417    			}
;;;418    			else if( value == 1 ){
;;;419    				
;;;420    				Flag_Swtich_ON = 1;
000014  6829              LDR      r1,[r5,#0]
;;;421    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;422    //				TIM_SetCompare1(TIM1,0);
;;;423    			}
;;;424    		}break;
;;;425    		case 1://稳压电源ON/OFF
;;;426    		{
;;;427    			if( value == 0 ){
;;;428    				PowerCommWaitHandle(3,1);
;;;429    //				listsend = 3;
;;;430    				listpowwatch1 ++;
;;;431    //				PowerSwitch(0);
;;;432    //				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;433    //				Para.CSET_Voltage = 0;
;;;434    //				Para.CSET_Current = 0;
;;;435    //				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;436    			}
;;;437    			else if( value == 1 ){
;;;438    				PowerCommWaitHandle(1,1);
;;;439    //				listsend = 1;
;;;440    				listpowwatch2 ++;
;;;441    //				PowerSwitch(1);
;;;442    //				Para.CSET_Voltage = Para.CDC_OutPut_V;
;;;443    //				Para.CSET_Current = Para.CDC_Limit_C;
;;;444    //				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;445    //				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;446    			}
;;;447    		}break;
;;;448    		case 2://过流测试ON/OFF
;;;449    		{
;;;450    			listocwatch++;
;;;451    			if( value == 0 ){
;;;452    				
;;;453    				Off_GPOI_ResetSet();
;;;454    				trig_flag_state = 0;
;;;455    				max_discahrgeNum = 0;
;;;456    				Para.CSET_Current_Laod =  Para.IR_Start_C;
000016  4c62              LDR      r4,|L4.416|
000018  4f62              LDR      r7,|L4.420|
00001a  f0410040          ORR      r0,r1,#0x40           ;420
00001e  f1bc0f05          CMP      r12,#5                ;406
000022  d227              BCS      |L4.116|
000024  e8dff00c          TBB      [pc,r12]              ;406
000028  0318327e          DCB      0x03,0x18,0x32,0x7e
00002c  9a00              DCB      0x9a,0x00
00002e  6196              STR      r6,[r2,#0x18]         ;410  ; Run_Control
000030  f44f5180          MOV      r1,#0x1000            ;411
000034  4638              MOV      r0,r7                 ;411
000036  f7fffffe          BL       GPIO_ResetBits
00003a  f89d0008          LDRB     r0,[sp,#8]            ;412
00003e  b138              CBZ      r0,|L4.80|
000040  f89d0008          LDRB     r0,[sp,#8]            ;418
000044  2801              CMP      r0,#1                 ;418
000046  d115              BNE      |L4.116|
000048  6828              LDR      r0,[r5,#0]            ;420  ; flagA
00004a  f0400040          ORR      r0,r0,#0x40           ;420
00004e  e08c              B        |L4.362|
                  |L4.80|
000050  6828              LDR      r0,[r5,#0]            ;414  ; flagA
000052  f0200040          BIC      r0,r0,#0x40           ;414
000056  e093              B        |L4.384|
000058  f89d0008          LDRB     r0,[sp,#8]            ;427
00005c  b170              CBZ      r0,|L4.124|
00005e  f89d0008          LDRB     r0,[sp,#8]            ;437
000062  2801              CMP      r0,#1                 ;437
000064  d106              BNE      |L4.116|
000066  2101              MOVS     r1,#1                 ;438
000068  4608              MOV      r0,r1                 ;438
00006a  f7fffffe          BL       PowerCommWaitHandle
00006e  7b98              LDRB     r0,[r3,#0xe]          ;440  ; listpowwatch2
000070  1c40              ADDS     r0,r0,#1              ;440
000072  7398              STRB     r0,[r3,#0xe]          ;440
                  |L4.116|
;;;457    			}
;;;458    			else if( value == 1 ){
;;;459    //				TIM_SetCompare1(TIM1,0);
;;;460    				LOAD_I_SW = 1;
;;;461    				testv = DISS_Voltage;
;;;462    				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
;;;463    				Para.CSET_Current = 1000;
;;;464    				Para.CSET_Current_Laod =  Para.IR_Start_C;
;;;465    				shorttime = 0;
;;;466    				old_I = 0;
;;;467    				max_discahrgeNum = 0;
;;;468    				trig_flag_state = 1;
;;;469    				C_DISCHARGE = 1;        	
;;;470    				Flag_Swtich_ON = 1;
;;;471    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
;;;472    				max_discahrgeNum = (float)Para.IR_Start_C / 1000;				
;;;473    //				testv = DISS_Voltage;
;;;474    //				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
;;;475    //				Para.CSET_Current = 1000;
;;;476    //				Para.CSET_Current_Laod = Para.IR_Start_C;
;;;477    //				shorttime = 0;
;;;478    //				old_I = 0;
;;;479    //				max_discahrgeNum = 0;
;;;480    //				trig_flag_state = 1;
;;;481    //				C_DISCHARGE = 1;
;;;482    //				Flag_Swtich_ON = 1;
;;;483    //				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
;;;484    //				max_discahrgeNum = (float)Para.IR_Start_C / 1000;
;;;485    			}
;;;486    		}break;
;;;487    		case 3://过充测试ON/OFF
;;;488    		{
;;;489    			if( value == 0 ){
;;;490    				
;;;491    				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;492    				Para.CSET_Voltage = 0;
;;;493    				Para.CSET_Current = 0;
;;;494    				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;495    			}
;;;496    			else if( value == 1 ){
;;;497    				Para.CSET_Voltage = Para.CDC_OutPut_V;
;;;498    				Para.CSET_Current = Para.CDC_Limit_C;
;;;499    				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;500    				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;501    			}
;;;502    		}break;
;;;503    		case 4://电子负载ON/OFF
;;;504    		{
;;;505    			if( value == 0 ){
;;;506    //				TIM_SetCompare1(TIM1,33000/2);
;;;507    				Flag_Swtich_ON = 0;
;;;508    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
;;;509    			}
;;;510    			else if( value == 1 ){
;;;511    //				TIM_SetCompare1(TIM1,0);
;;;512    				Flag_Swtich_ON = 1;
;;;513    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;514    			}
;;;515    		}break;
;;;516    	}
;;;517    }
000074  ecbd8b02          VPOP     {d8}
000078  e8bd83f8          POP      {r3-r9,pc}
                  |L4.124|
00007c  2101              MOVS     r1,#1                 ;428
00007e  2003              MOVS     r0,#3                 ;428
000080  f7fffffe          BL       PowerCommWaitHandle
000084  7b58              LDRB     r0,[r3,#0xd]          ;430  ; listpowwatch1
000086  1c40              ADDS     r0,r0,#1              ;430
000088  7358              STRB     r0,[r3,#0xd]          ;430
00008a  e7f3              B        |L4.116|
00008c  7b19              LDRB     r1,[r3,#0xc]          ;450  ; listocwatch
00008e  1c49              ADDS     r1,r1,#1              ;450
000090  7319              STRB     r1,[r3,#0xc]          ;450
000092  f89d1008          LDRB     r1,[sp,#8]            ;451
000096  f8df9110          LDR      r9,|L4.424|
00009a  ed9f8a44          VLDR     s16,|L4.428|
00009e  f8df8110          LDR      r8,|L4.432|
0000a2  b3a9              CBZ      r1,|L4.272|
0000a4  f89d1008          LDRB     r1,[sp,#8]            ;458
0000a8  2901              CMP      r1,#1                 ;458
0000aa  d1e3              BNE      |L4.116|
0000ac  6211              STR      r1,[r2,#0x20]         ;460  ; Run_Control
0000ae  4a41              LDR      r2,|L4.436|
0000b0  ed920a00          VLDR     s0,[r2,#0]            ;461
0000b4  4a40              LDR      r2,|L4.440|
0000b6  ed820a00          VSTR     s0,[r2,#0]            ;461
0000ba  eddf8a40          VLDR     s17,|L4.444|
0000be  ee200a28          VMUL.F32 s0,s0,s17             ;462
0000c2  eebd0ac0          VCVT.S32.F32 s0,s0                 ;462
0000c6  ee102a10          VMOV     r2,s0                 ;462
0000ca  f502727a          ADD      r2,r2,#0x3e8          ;462
0000ce  60a2              STR      r2,[r4,#8]            ;462  ; Para
0000d0  f44f727a          MOV      r2,#0x3e8             ;463
0000d4  60e2              STR      r2,[r4,#0xc]          ;463  ; Para
0000d6  6c62              LDR      r2,[r4,#0x44]         ;464  ; Para
0000d8  6162              STR      r2,[r4,#0x14]         ;464  ; Para
0000da  4a39              LDR      r2,|L4.448|
0000dc  7016              STRB     r6,[r2,#0]            ;465
0000de  4a39              LDR      r2,|L4.452|
0000e0  4646              MOV      r6,r8                 ;467
0000e2  ed828a00          VSTR     s16,[r2,#0]           ;466
0000e6  ed888a00          VSTR     s16,[r8,#0]           ;467
0000ea  f8891000          STRB     r1,[r9,#0]            ;468
0000ee  4a36              LDR      r2,|L4.456|
0000f0  7011              STRB     r1,[r2,#0]            ;469
0000f2  6028              STR      r0,[r5,#0]            ;471  ; flagA
0000f4  2180              MOVS     r1,#0x80              ;471
0000f6  4638              MOV      r0,r7                 ;471
0000f8  f7fffffe          BL       GPIO_ResetBits
0000fc  6c60              LDR      r0,[r4,#0x44]         ;472  ; Para
0000fe  ee000a10          VMOV     s0,r0                 ;472
000102  eeb80a40          VCVT.F32.U32 s0,s0                 ;472
000106  eec00a28          VDIV.F32 s1,s0,s17             ;472
00010a  edc60a00          VSTR     s1,[r6,#0]            ;472
00010e  e7b1              B        |L4.116|
                  |L4.272|
000110  e7ff              B        |L4.274|
                  |L4.274|
000112  f7fffffe          BL       Off_GPOI_ResetSet
000116  f8896000          STRB     r6,[r9,#0]            ;454
00011a  ed888a00          VSTR     s16,[r8,#0]           ;455
00011e  6c60              LDR      r0,[r4,#0x44]         ;456  ; Para
000120  6160              STR      r0,[r4,#0x14]         ;456  ; Para
000122  e7a7              B        |L4.116|
000124  f89d0008          LDRB     r0,[sp,#8]            ;489
000128  4d28              LDR      r5,|L4.460|
00012a  b170              CBZ      r0,|L4.330|
00012c  f89d0008          LDRB     r0,[sp,#8]            ;496
000130  2801              CMP      r0,#1                 ;496
000132  d19f              BNE      |L4.116|
000134  6ee0              LDR      r0,[r4,#0x6c]         ;497  ; Para
000136  60a0              STR      r0,[r4,#8]            ;497  ; Para
000138  f8b40070          LDRH     r0,[r4,#0x70]         ;498  ; Para
00013c  60e0              STR      r0,[r4,#0xc]          ;498  ; Para
00013e  2104              MOVS     r1,#4                 ;499
000140  4628              MOV      r0,r5                 ;499
000142  f7fffffe          BL       GPIO_SetBits
000146  2102              MOVS     r1,#2                 ;500
000148  e01c              B        |L4.388|
                  |L4.330|
00014a  2102              MOVS     r1,#2                 ;491
00014c  4638              MOV      r0,r7                 ;491
00014e  f7fffffe          BL       GPIO_ResetBits
000152  60a6              STR      r6,[r4,#8]            ;492  ; Para
000154  60e6              STR      r6,[r4,#0xc]          ;493  ; Para
000156  2104              MOVS     r1,#4                 ;494
000158  4628              MOV      r0,r5                 ;494
00015a  e009              B        |L4.368|
00015c  f89d2008          LDRB     r2,[sp,#8]            ;505
000160  b162              CBZ      r2,|L4.380|
000162  f89d1008          LDRB     r1,[sp,#8]            ;510
000166  2901              CMP      r1,#1                 ;510
000168  d184              BNE      |L4.116|
                  |L4.362|
00016a  6028              STR      r0,[r5,#0]            ;513  ; flagA
00016c  2180              MOVS     r1,#0x80              ;513
00016e  4638              MOV      r0,r7                 ;513
                  |L4.368|
000170  ecbd8b02          VPOP     {d8}                  ;513
000174  e8bd43f8          POP      {r3-r9,lr}            ;513
000178  f7ffbffe          B.W      GPIO_ResetBits
                  |L4.380|
00017c  f0210040          BIC      r0,r1,#0x40           ;507
                  |L4.384|
000180  2180              MOVS     r1,#0x80              ;415
000182  6028              STR      r0,[r5,#0]            ;415  ; flagA
                  |L4.388|
000184  4638              MOV      r0,r7                 ;508
000186  ecbd8b02          VPOP     {d8}                  ;508
00018a  e8bd43f8          POP      {r3-r9,lr}            ;508
00018e  f7ffbffe          B.W      GPIO_SetBits
;;;518    
                          ENDP

000192  0000              DCW      0x0000
                  |L4.404|
                          DCD      ||.data||
                  |L4.408|
                          DCD      Run_Control
                  |L4.412|
                          DCD      flagA
                  |L4.416|
                          DCD      Para
                  |L4.420|
                          DCD      0x40020800
                  |L4.424|
                          DCD      trig_flag_state
                  |L4.428|
0001ac  00000000          DCFS     0x00000000 ; 0
                  |L4.432|
                          DCD      max_discahrgeNum
                  |L4.436|
                          DCD      DISS_Voltage
                  |L4.440|
                          DCD      testv
                  |L4.444|
0001bc  447a0000          DCFS     0x447a0000 ; 1000
                  |L4.448|
                          DCD      shorttime
                  |L4.452|
                          DCD      old_I
                  |L4.456|
                          DCD      C_DISCHARGE
                  |L4.460|
                          DCD      0x40021000

                          AREA ||i.MODE_ONOFF||, CODE, READONLY, ALIGN=2

                  MODE_ONOFF PROC
;;;319    
;;;320    void MODE_ONOFF(vu8 value)
000000  e92d43f1          PUSH     {r0,r4-r9,lr}
;;;321    {
;;;322    	switch(MODE)
000004  4846              LDR      r0,|L5.288|
000006  ed2d8b02          VPUSH    {d8}                  ;321
00000a  7941              LDRB     r1,[r0,#5]  ; MODE
;;;323    	{
;;;324    		case 0://电子负载ON/OFF
;;;325    		{
;;;326    			if( value == 0 ){
;;;327    				
;;;328    				Flag_Swtich_ON = 0;
00000c  4d45              LDR      r5,|L5.292|
;;;329    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	
00000e  4846              LDR      r0,|L5.296|
000010  b3f1              CBZ      r1,|L5.144|
000012  2901              CMP      r1,#1                 ;322
000014  d06c              BEQ      |L5.240|
000016  2902              CMP      r1,#2                 ;322
000018  d149              BNE      |L5.174|
;;;330    //				TIM_SetCompare1(TIM1,33000/2);
;;;331    			}
;;;332    			else if( value == 1 ){
;;;333    				
;;;334    				Flag_Swtich_ON = 1;
;;;335    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;336    //				TIM_SetCompare1(TIM1,0);
;;;337    			}
;;;338    		}break;
;;;339    		case 1://稳压电源ON/OFF
;;;340    		{
;;;341    			if( value == 0 )
;;;342    			{
;;;343    				PowerCommWaitHandle(3,0);
;;;344    //				sendwait = 3;
;;;345    			}else{
;;;346    				PowerCommWaitHandle(1,0);
;;;347    //				sendwait = 1;
;;;348    			}
;;;349    //			if( value == 0 ){
;;;350    //				sendwait = 1;
;;;351    ////				PowerSwitch(0);//关闭电源输出
;;;352    ////				Delay_ms(1000);
;;;353    ////				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;354    ////				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;355    //////				Delay_ms(1000);
;;;356    ////				Para.CSET_Voltage = 0;
;;;357    ////				Para.CSET_Current = 0;
;;;358    //////				Delay_ms(1000);
;;;359    ////				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;360    //			}
;;;361    //			else if( value == 1 ){
;;;362    ////				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;363    //////				Delay_ms(1000);
;;;364    ////				PowerSwitch(1);//打开电源输出
;;;365    //				
;;;366    //////				
;;;367    ////				Para.CSET_Voltage = Para.POWER_OutPut_V;
;;;368    ////				Para.CSET_Current = Para.POWER_Limit_C;
;;;369    //////				Delay_ms(1000);
;;;370    ////				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;371    //				
;;;372    //			}
;;;373    		}break;
;;;374    		case 2://过流测试ON/OFF
;;;375    		{
;;;376    			if( value == 0 ){
00001a  f89d1008          LDRB     r1,[sp,#8]
;;;377    				
;;;378    				Off_GPOI_ResetSet();
;;;379    				trig_flag_state = 0;
00001e  f8df810c          LDR      r8,|L5.300|
000022  2700              MOVS     r7,#0                 ;376
;;;380    				max_discahrgeNum = 0;
000024  ed9f8a42          VLDR     s16,|L5.304|
000028  4e42              LDR      r6,|L5.308|
;;;381    				Para.CSET_Current_Laod =  Para.IR_Start_C;
00002a  4c43              LDR      r4,|L5.312|
00002c  b389              CBZ      r1,|L5.146|
;;;382    			}
;;;383    			else if( value == 1 ){
00002e  f89d1008          LDRB     r1,[sp,#8]
000032  2901              CMP      r1,#1
000034  d13b              BNE      |L5.174|
;;;384    //				TIM_SetCompare1(TIM1,0);
;;;385    				LOAD_MODE = 0;
000036  4941              LDR      r1,|L5.316|
000038  618f              STR      r7,[r1,#0x18]  ; Run_Control
;;;386    				GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
00003a  1481              ASRS     r1,r0,#18
00003c  4681              MOV      r9,r0
00003e  f7fffffe          BL       GPIO_ResetBits
;;;387    				Para.CSET_Current_Laod =  Para.IR_Start_C;
000042  6c60              LDR      r0,[r4,#0x44]  ; Para
000044  6160              STR      r0,[r4,#0x14]  ; Para
;;;388    				testv = DISS_Voltage;
000046  483e              LDR      r0,|L5.320|
;;;389    				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
000048  eddf8a3f          VLDR     s17,|L5.328|
00004c  ed900a00          VLDR     s0,[r0,#0]            ;388
000050  483c              LDR      r0,|L5.324|
000052  ed800a00          VSTR     s0,[r0,#0]            ;388
000056  ee200a28          VMUL.F32 s0,s0,s17
00005a  eebd0ac0          VCVT.S32.F32 s0,s0
00005e  ee100a10          VMOV     r0,s0
000062  f500707a          ADD      r0,r0,#0x3e8
000066  60a0              STR      r0,[r4,#8]  ; Para
;;;390    				Para.CSET_Current = 1000;
000068  f44f707a          MOV      r0,#0x3e8
00006c  60e0              STR      r0,[r4,#0xc]  ; Para
;;;391    				shorttime = 0;
00006e  4837              LDR      r0,|L5.332|
000070  7007              STRB     r7,[r0,#0]
;;;392    				old_I = 0;
000072  4837              LDR      r0,|L5.336|
000074  ed808a00          VSTR     s16,[r0,#0]
;;;393    				max_discahrgeNum = 0;
000078  ed868a00          VSTR     s16,[r6,#0]
;;;394    				trig_flag_state = 1;
00007c  2001              MOVS     r0,#1
00007e  f8880000          STRB     r0,[r8,#0]
;;;395    				C_DISCHARGE = 1;        	
000082  4934              LDR      r1,|L5.340|
000084  7008              STRB     r0,[r1,#0]
;;;396    				Flag_Swtich_ON = 1;
000086  6828              LDR      r0,[r5,#0]  ; flagA
;;;397    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
000088  2180              MOVS     r1,#0x80
00008a  f0400040          ORR      r0,r0,#0x40           ;396
00008e  e001              B        |L5.148|
                  |L5.144|
000090  e011              B        |L5.182|
                  |L5.146|
000092  e03b              B        |L5.268|
                  |L5.148|
000094  6028              STR      r0,[r5,#0]  ; flagA
000096  4648              MOV      r0,r9
000098  f7fffffe          BL       GPIO_ResetBits
;;;398    				max_discahrgeNum = (float)Para.IR_Start_C / 1000;
00009c  6c60              LDR      r0,[r4,#0x44]  ; Para
00009e  ee000a10          VMOV     s0,r0
0000a2  eeb80a40          VCVT.F32.U32 s0,s0
0000a6  eec00a28          VDIV.F32 s1,s0,s17
0000aa  edc60a00          VSTR     s1,[r6,#0]
                  |L5.174|
;;;399    			}
;;;400    		}break;
;;;401    	}
;;;402    }
0000ae  ecbd8b02          VPOP     {d8}
0000b2  e8bd83f8          POP      {r3-r9,pc}
                  |L5.182|
0000b6  f89d2008          LDRB     r2,[sp,#8]            ;326
0000ba  491a              LDR      r1,|L5.292|
0000bc  6809              LDR      r1,[r1,#0]            ;328
0000be  b16a              CBZ      r2,|L5.220|
0000c0  f89d2008          LDRB     r2,[sp,#8]            ;332
0000c4  2a01              CMP      r2,#1                 ;332
0000c6  d1f2              BNE      |L5.174|
0000c8  f0410140          ORR      r1,r1,#0x40           ;334
0000cc  6029              STR      r1,[r5,#0]            ;335  ; flagA
0000ce  2180              MOVS     r1,#0x80              ;335
0000d0  ecbd8b02          VPOP     {d8}                  ;335
0000d4  e8bd43f8          POP      {r3-r9,lr}            ;335
0000d8  f7ffbffe          B.W      GPIO_ResetBits
                  |L5.220|
0000dc  f0210140          BIC      r1,r1,#0x40           ;328
0000e0  6029              STR      r1,[r5,#0]            ;329  ; flagA
0000e2  2180              MOVS     r1,#0x80              ;329
0000e4  ecbd8b02          VPOP     {d8}                  ;329
0000e8  e8bd43f8          POP      {r3-r9,lr}            ;329
0000ec  f7ffbffe          B.W      GPIO_SetBits
                  |L5.240|
0000f0  f89d0008          LDRB     r0,[sp,#8]            ;341
0000f4  f04f0100          MOV      r1,#0                 ;346
0000f8  b130              CBZ      r0,|L5.264|
0000fa  2001              MOVS     r0,#1                 ;346
                  |L5.252|
0000fc  ecbd8b02          VPOP     {d8}                  ;346
000100  e8bd43f8          POP      {r3-r9,lr}            ;346
000104  f7ffbffe          B.W      PowerCommWaitHandle
                  |L5.264|
000108  2003              MOVS     r0,#3                 ;343
00010a  e7f7              B        |L5.252|
                  |L5.268|
00010c  f7fffffe          BL       Off_GPOI_ResetSet
000110  f8887000          STRB     r7,[r8,#0]            ;379
000114  ed868a00          VSTR     s16,[r6,#0]           ;380
000118  6c60              LDR      r0,[r4,#0x44]         ;381  ; Para
00011a  6160              STR      r0,[r4,#0x14]         ;381  ; Para
00011c  e7c7              B        |L5.174|
;;;403    
                          ENDP

00011e  0000              DCW      0x0000
                  |L5.288|
                          DCD      ||.data||
                  |L5.292|
                          DCD      flagA
                  |L5.296|
                          DCD      0x40020800
                  |L5.300|
                          DCD      trig_flag_state
                  |L5.304|
000130  00000000          DCFS     0x00000000 ; 0
                  |L5.308|
                          DCD      max_discahrgeNum
                  |L5.312|
                          DCD      Para
                  |L5.316|
                          DCD      Run_Control
                  |L5.320|
                          DCD      DISS_Voltage
                  |L5.324|
                          DCD      testv
                  |L5.328|
000148  447a0000          DCFS     0x447a0000 ; 1000
                  |L5.332|
                          DCD      shorttime
                  |L5.336|
                          DCD      old_I
                  |L5.340|
                          DCD      C_DISCHARGE

                          AREA ||i.MODE_PARASET||, CODE, READONLY, ALIGN=2

                  MODE_PARASET PROC
;;;518    
;;;519    void MODE_PARASET(vu8 value)
000000  b570              PUSH     {r4-r6,lr}
;;;520    {
;;;521    	float ptrans;
;;;522    	switch(MODE)
000002  4824              LDR      r0,|L6.148|
000004  7942              LDRB     r2,[r0,#5]  ; MODE
000006  2100              MOVS     r1,#0
;;;523    	{
;;;524    		case 0://电子负载
;;;525    		{
;;;526    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;527    //			mainswitch = 0;
;;;528    //			sendwait = 3;
;;;529    			LOAD_MODE = Para.CLOAD_MODE;
;;;530    			if(LOAD_MODE == 2)
;;;531    			{
;;;532    				ptrans = (float)Para.LOAD_P/1000;
;;;533    				Para.CSET_Current_Laod = (uint32_t)((ptrans/DISS_Voltage)*1000);
;;;534    			}else{
;;;535    				Para.CSET_Current_Laod = Para.LOAD_C;
;;;536    			}
;;;537    			Para.CSET_Voltage_Laod = Para.LOAD_V;
;;;538    			if(Para.CSET_Current_Laod > 15000)
;;;539    			{
;;;540    				LOAD_I_SW = 1;
000008  2501              MOVS     r5,#1
00000a  4c23              LDR      r4,|L6.152|
00000c  4823              LDR      r0,|L6.156|
00000e  2a05              CMP      r2,#5                 ;522
000010  d213              BCS      |L6.58|
000012  e8dff002          TBB      [pc,r2]               ;522
000016  0339              DCB      0x03,0x39
000018  2a323900          DCB      0x2a,0x32,0x39,0x00
00001c  6982              LDR      r2,[r0,#0x18]         ;529  ; Para
00001e  61a2              STR      r2,[r4,#0x18]         ;529  ; Run_Control
000020  69a2              LDR      r2,[r4,#0x18]         ;530  ; Run_Control
000022  2a02              CMP      r2,#2                 ;530
000024  d00a              BEQ      |L6.60|
000026  6dc2              LDR      r2,[r0,#0x5c]         ;535  ; Para
                  |L6.40|
000028  6142              STR      r2,[r0,#0x14]         ;535  ; Para
00002a  6e02              LDR      r2,[r0,#0x60]         ;537  ; Para
00002c  6102              STR      r2,[r0,#0x10]         ;537  ; Para
00002e  6940              LDR      r0,[r0,#0x14]         ;538  ; Para
000030  f6432298          MOV      r2,#0x3a98            ;538
000034  4290              CMP      r0,r2                 ;538
000036  d916              BLS      |L6.102|
                  |L6.56|
000038  6225              STR      r5,[r4,#0x20]  ; Run_Control
                  |L6.58|
;;;541    			}else{
;;;542    				LOAD_I_SW = 0;
;;;543    			}
;;;544    		}break;
;;;545    		case 1://稳压电源
;;;546    		{
;;;547    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;548    //			mainswitch = 0;
;;;549    //			if(USART3_Recive_flg == 1)
;;;550    //			{
;;;551    			PowerCommWaitHandle(1,0);
;;;552    //				sendwait = 1;
;;;553    //			}else{
;;;554    //				SetPowerMode();
;;;555    //			}
;;;556    //			Para.CSET_Voltage = Para.POWER_OutPut_V;
;;;557    //			SetPowerV(Para.POWER_OutPut_V);
;;;558    //	//			Para.CSET_Current = Para.POWER_Limit_C;
;;;559    //			SetPowerC(Para.POWER_Limit_C);
;;;560    		}break;
;;;561    		case 2://放电过流测试
;;;562    		{
;;;563    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;564    //			mainswitch = 0;
;;;565    //			sendwait = 3;
;;;566    			
;;;567    			LOAD_MODE = 0;
;;;568    			LOAD_I_SW = 1;
;;;569    			Para.CSET_Current = 1000;
;;;570    			Para.CSET_Current_Laod = Para.IR_Start_C;
;;;571    		}break;
;;;572    		case 3://列表
;;;573    		{
;;;574    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;575    //			mainswitch = 0;
;;;576    //			sendwait = 3;
;;;577    			
;;;578    			LOAD_MODE = 0;
;;;579    			GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
;;;580    			LOAD_I_SW = 1;
;;;581    //			Para.CSET_Current = 1000;
;;;582    		}break;
;;;583    		case 4://充电过流测试
;;;584    		{
;;;585    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;586    //			mainswitch = 0;
;;;587    //			sendwait = 3;
;;;588    			PowerCommWaitHandle(1,0);
;;;589    //			sendwait = 1;
;;;590    		}break;
;;;591    	}
;;;592    }
00003a  bd70              POP      {r4-r6,pc}
                  |L6.60|
00003c  6e42              LDR      r2,[r0,#0x64]         ;532  ; Para
00003e  ee002a10          VMOV     s0,r2                 ;532
000042  4a18              LDR      r2,|L6.164|
000044  eeb81a40          VCVT.F32.U32 s2,s0                 ;532
000048  ed9f0a15          VLDR     s0,|L6.160|
00004c  edd21a00          VLDR     s3,[r2,#0]            ;533
000050  eec10a00          VDIV.F32 s1,s2,s0              ;532
000054  ee801aa1          VDIV.F32 s2,s1,s3              ;533
000058  ee210a00          VMUL.F32 s0,s2,s0              ;533
00005c  eebc0ac0          VCVT.U32.F32 s0,s0                 ;533
000060  ee102a10          VMOV     r2,s0                 ;533
000064  e7e0              B        |L6.40|
                  |L6.102|
000066  6221              STR      r1,[r4,#0x20]         ;542  ; Run_Control
000068  bd70              POP      {r4-r6,pc}
00006a  61a1              STR      r1,[r4,#0x18]         ;567  ; Run_Control
00006c  6225              STR      r5,[r4,#0x20]         ;568  ; Run_Control
00006e  f44f717a          MOV      r1,#0x3e8             ;569
000072  60c1              STR      r1,[r0,#0xc]          ;569  ; Para
000074  6c41              LDR      r1,[r0,#0x44]         ;570  ; Para
000076  6141              STR      r1,[r0,#0x14]         ;570  ; Para
000078  bd70              POP      {r4-r6,pc}
00007a  61a1              STR      r1,[r4,#0x18]         ;578  ; Run_Control
00007c  f44f5180          MOV      r1,#0x1000            ;579
000080  4809              LDR      r0,|L6.168|
000082  f7fffffe          BL       GPIO_ResetBits
000086  e7d7              B        |L6.56|
000088  e8bd4070          POP      {r4-r6,lr}            ;588
00008c  2100              MOVS     r1,#0                 ;588
00008e  2001              MOVS     r0,#1                 ;588
000090  f7ffbffe          B.W      PowerCommWaitHandle
;;;593    
                          ENDP

                  |L6.148|
                          DCD      ||.data||
                  |L6.152|
                          DCD      Run_Control
                  |L6.156|
                          DCD      Para
                  |L6.160|
0000a0  447a0000          DCFS     0x447a0000 ; 1000
                  |L6.164|
                          DCD      DISS_Voltage
                  |L6.168|
                          DCD      0x40020800

                          AREA ||i.PowerCommWaitHandle||, CODE, READONLY, ALIGN=2

                  PowerCommWaitHandle PROC
;;;216    //如果在前一组通讯还未完成时收到新的电源控制命令，则把这组命令存起来，等前一组通讯完成后再发送
;;;217    void PowerCommWaitHandle(u8 command,u8 mode)
000000  4a07              LDR      r2,|L7.32|
;;;218    {
000002  b129              CBZ      r1,|L7.16|
;;;219    	if(mode == 0)//普通操作
;;;220    	{
;;;221    		if(sendwait != 0)
;;;222    		{
;;;223    			waitcommand1 = command;
;;;224    		}else{
;;;225    			sendwait = command;
;;;226    		}
;;;227    	}else if(mode == 1){//列表操作
000004  2901              CMP      r1,#1
000006  d102              BNE      |L7.14|
;;;228    		if(sendwait != 0)
000008  7a11              LDRB     r1,[r2,#8]  ; sendwait
00000a  b139              CBZ      r1,|L7.28|
;;;229    		{
;;;230    			waitcommand2 = command;
00000c  72d0              STRB     r0,[r2,#0xb]
                  |L7.14|
;;;231    		}else{
;;;232    			listsend = command;
;;;233    		}
;;;234    	}
;;;235    }
00000e  4770              BX       lr
                  |L7.16|
000010  7a11              LDRB     r1,[r2,#8]            ;221  ; sendwait
000012  b109              CBZ      r1,|L7.24|
000014  7290              STRB     r0,[r2,#0xa]          ;223
000016  4770              BX       lr
                  |L7.24|
000018  7210              STRB     r0,[r2,#8]            ;225
00001a  4770              BX       lr
                  |L7.28|
00001c  7250              STRB     r0,[r2,#9]            ;232
00001e  4770              BX       lr
;;;236    
                          ENDP

                  |L7.32|
                          DCD      ||.data||

                          AREA ||i.PowerSwitch||, CODE, READONLY, ALIGN=2

                  PowerSwitch PROC
;;;190    
;;;191    void PowerSwitch(vu8 bit)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;192    {
;;;193    	MasterSendbuf[0] = 0x01;
000002  4c0f              LDR      r4,|L8.64|
000004  2001              MOVS     r0,#1
;;;194    	MasterSendbuf[1] = 0x06;
000006  2106              MOVS     r1,#6
000008  7020              STRB     r0,[r4,#0]            ;193
00000a  7061              STRB     r1,[r4,#1]
;;;195    	MasterSendbuf[2] = 0x00;
00000c  2100              MOVS     r1,#0
00000e  70a1              STRB     r1,[r4,#2]
;;;196    	MasterSendbuf[3] = 0x01;
000010  70e0              STRB     r0,[r4,#3]
;;;197    	MasterSendbuf[4] = (u8)(bit>>8);
000012  f89d0000          LDRB     r0,[sp,#0]
000016  7121              STRB     r1,[r4,#4]
;;;198    	MasterSendbuf[5] = (u8)(bit);
000018  f89d0000          LDRB     r0,[sp,#0]
00001c  7160              STRB     r0,[r4,#5]
;;;199    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00001e  2106              MOVS     r1,#6
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       Hardware_CRC
000026  71a0              STRB     r0,[r4,#6]
;;;200    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000028  2106              MOVS     r1,#6
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       Hardware_CRC
000030  0a00              LSRS     r0,r0,#8
000032  71e0              STRB     r0,[r4,#7]
;;;201    	USART3WriteDMA(8);
000034  e8bd4038          POP      {r3-r5,lr}
000038  2008              MOVS     r0,#8
00003a  f7ffbffe          B.W      USART3WriteDMA
;;;202    }
;;;203    
                          ENDP

00003e  0000              DCW      0x0000
                  |L8.64|
                          DCD      ||area_number.32||+0xdc

                          AREA ||i.ReadPowData||, CODE, READONLY, ALIGN=2

                  ReadPowData PROC
;;;203    
;;;204    void ReadPowData(void)
000000  b510              PUSH     {r4,lr}
;;;205    {
;;;206    	MasterSendbuf[0] = 0x01;
000002  4c0e              LDR      r4,|L9.60|
000004  2001              MOVS     r0,#1
;;;207    	MasterSendbuf[1] = 0x03;
;;;208    	MasterSendbuf[2] = 0x00;
;;;209    	MasterSendbuf[3] = 0x10;
000006  2110              MOVS     r1,#0x10
000008  7020              STRB     r0,[r4,#0]            ;206
00000a  2003              MOVS     r0,#3                 ;207
00000c  7060              STRB     r0,[r4,#1]            ;207
00000e  2000              MOVS     r0,#0                 ;208
000010  70a0              STRB     r0,[r4,#2]            ;208
000012  70e1              STRB     r1,[r4,#3]
;;;210    	MasterSendbuf[4] = 0x00;
000014  7120              STRB     r0,[r4,#4]
;;;211    	MasterSendbuf[5] = 0x02;
000016  2002              MOVS     r0,#2
000018  7160              STRB     r0,[r4,#5]
;;;212    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00001a  2106              MOVS     r1,#6
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       Hardware_CRC
000022  71a0              STRB     r0,[r4,#6]
;;;213    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000024  2106              MOVS     r1,#6
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       Hardware_CRC
00002c  0a00              LSRS     r0,r0,#8
00002e  71e0              STRB     r0,[r4,#7]
;;;214    	USART3WriteDMA(8);
000030  e8bd4010          POP      {r4,lr}
000034  2008              MOVS     r0,#8
000036  f7ffbffe          B.W      USART3WriteDMA
;;;215    }
;;;216    //如果在前一组通讯还未完成时收到新的电源控制命令，则把这组命令存起来，等前一组通讯完成后再发送
                          ENDP

00003a  0000              DCW      0x0000
                  |L9.60|
                          DCD      ||area_number.32||+0xdc

                          AREA ||i.SerialRemoteHandleL||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  SerialRemoteHandleL PROC
;;;1091   
;;;1092   u16 SerialRemoteHandleL(u8 len,char* buf)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1093   {
000004  b0b3              SUB      sp,sp,#0xcc
000006  4604              MOV      r4,r0
;;;1094   
;;;1095     
;;;1096       u16 currCharNum;
;;;1097       u32 temp1;
;;;1098     u8 Gmode_Vale;
;;;1099   	u8 i,j;
;;;1100   	
;;;1101   	u8 addr = 0;
000008  2000              MOVS     r0,#0
00000a  460d              MOV      r5,r1                 ;1093
;;;1102   	char str[200]={0};
00000c  9032              STR      r0,[sp,#0xc8]
00000e  21c8              MOVS     r1,#0xc8
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       __aeabi_memclr4
;;;1103   	int cmd_flag=255;
;;;1104   	u8 templen =0;
;;;1105   	u8 tmpFg;
;;;1106   	u8 LM_S_Vale,LOW_I_Vale,H_L_Vale,SWITCH_Vale;
;;;1107   	u16 I_ADC_Vale,V_ADC_Vale;
;;;1108   	int32_t V_CS_Vale,I_CS_Vale;
;;;1109   	float Lvl_Vale,fadcx,fsingal, fVale;
;;;1110    
;;;1111   //	u8 len = 11;
;;;1112   	u8 pntlen = 0;
;;;1113   
;;;1114   
;;;1115   	
;;;1116   	currCharNum=0;
;;;1117   	if((buf[currCharNum] != ChrStartR) || (buf[len-2] != ChrEndR)||(buf[len-1] != ChrEndS))
000016  7828              LDRB     r0,[r5,#0]
000018  283c              CMP      r0,#0x3c
00001a  d108              BNE      |L10.46|
00001c  1928              ADDS     r0,r5,r4
00001e  f8101c02          LDRB     r1,[r0,#-2]
000022  290d              CMP      r1,#0xd
000024  d103              BNE      |L10.46|
000026  f8100c01          LDRB     r0,[r0,#-1]
00002a  280a              CMP      r0,#0xa
00002c  d001              BEQ      |L10.50|
                  |L10.46|
;;;1118       {
;;;1119   		return SetErr_ACK(buf,addr ,CMD_ERR); 
00002e  2202              MOVS     r2,#2
000030  e14d              B        |L10.718|
                  |L10.50|
;;;1120       } 
;;;1121   	str[currCharNum++] = ChrStartR;
000032  213c              MOVS     r1,#0x3c
000034  f88d1000          STRB     r1,[sp,#0]
;;;1122   	sprintf(&str[currCharNum],"%d",addr);
000038  a1fe              ADR      r1,|L10.1076|
00003a  f10d0001          ADD      r0,sp,#1
00003e  9a32              LDR      r2,[sp,#0xc8]
000040  f7fffffe          BL       __2sprintf
;;;1123   	strncat(str,"/",1);
000044  2201              MOVS     r2,#1
000046  a1fc              ADR      r1,|L10.1080|
000048  4668              MOV      r0,sp
00004a  f7fffffe          BL       strncat
;;;1124   	currCharNum =strlen(str);
00004e  4668              MOV      r0,sp
000050  f7fffffe          BL       strlen
000054  fa1ffa80          UXTH     r10,r0
;;;1125   	cmd_flag=strncmp(buf,str,strlen(str));
000058  4668              MOV      r0,sp
00005a  f7fffffe          BL       strlen
00005e  4602              MOV      r2,r0
000060  4669              MOV      r1,sp
000062  4628              MOV      r0,r5
000064  f7fffffe          BL       strncmp
;;;1126   	//testflag = cmd_flag;
;;;1127   	if(0!=cmd_flag)
000068  2800              CMP      r0,#0
00006a  d1e0              BNE      |L10.46|
;;;1128   	{
;;;1129   		return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1130   		
;;;1131   	}
;;;1132   	for (j=0;j<CmdNumb;j++)
;;;1133       {
;;;1134   		templen = strlen(CmdStr[j]);
00006c  f8dfb3cc          LDR      r11,|L10.1084|
000070  4680              MOV      r8,r0                 ;1132
;;;1135   		cmd_flag=strncmp(&buf[currCharNum],CmdStr[j],templen);
000072  eb05060a          ADD      r6,r5,r10
000076  bf00              NOP                            ;1134
                  |L10.120|
000078  eb0801c8          ADD      r1,r8,r8,LSL #3       ;1134
00007c  eb01040b          ADD      r4,r1,r11             ;1134
000080  4620              MOV      r0,r4                 ;1134
000082  f7fffffe          BL       strlen
000086  f00009ff          AND      r9,r0,#0xff           ;1134
00008a  4621              MOV      r1,r4
00008c  4630              MOV      r0,r6
00008e  464a              MOV      r2,r9
000090  f7fffffe          BL       strncmp
;;;1136   	    if(0==cmd_flag)
000094  b138              CBZ      r0,|L10.166|
000096  f1080801          ADD      r8,r8,#1
00009a  f00808ff          AND      r8,r8,#0xff           ;1132
00009e  f1b80f13          CMP      r8,#0x13              ;1132
0000a2  d3e9              BCC      |L10.120|
0000a4  e7c3              B        |L10.46|
                  |L10.166|
;;;1137   	    {
;;;1138   
;;;1139   		  buf[0] = ChrStartS;
0000a6  203e              MOVS     r0,#0x3e
0000a8  7028              STRB     r0,[r5,#0]
;;;1140   		  currCharNum+=templen;
0000aa  eb0a0009          ADD      r0,r10,r9
0000ae  b284              UXTH     r4,r0
;;;1141   		  switch(j)
;;;1142             {
;;;1143   			case 0:
;;;1144   				pntlen = 5;    //
;;;1145   				if(buf[currCharNum]=='?')
;;;1146   				{
;;;1147   
;;;1148   					
;;;1149   					sprintf(&buf[currCharNum],"%06d",Para.CVoltage);
;;;1150   					currCharNum+=6;
;;;1151   					
;;;1152   					buf[currCharNum++]=(',');
;;;1153   					sprintf(&buf[currCharNum],"%06d",Para.CLaod_Current);
;;;1154   					currCharNum+=6;
;;;1155   					
;;;1156   					buf[currCharNum++]=(',');
;;;1157   					sprintf(&buf[currCharNum],"%05d",Para.CPOW_Voltage);
;;;1158   					currCharNum+=pntlen;
;;;1159   					
;;;1160   					buf[currCharNum++]=(',');
;;;1161   					sprintf(&buf[currCharNum],"%05d",Para.CCurrent);
;;;1162   					currCharNum+=pntlen;
;;;1163   					
;;;1164   					buf[currCharNum++]=(',');
;;;1165   					sprintf(&buf[currCharNum],"%05d",Para.CR_VLUE);
;;;1166   					currCharNum+=pntlen;
;;;1167   					
;;;1168   					buf[currCharNum++]=(',');
;;;1169   					sprintf(&buf[currCharNum],"%04d",Para.CR1_VLUE);
;;;1170   					currCharNum+=4;
;;;1171   					
;;;1172   					buf[currCharNum++]=(',');
;;;1173   					sprintf(&buf[currCharNum],"%04d",Para.CR2_VLUE);
;;;1174   					currCharNum+=4;
;;;1175   
;;;1176   					buf[currCharNum++]=(',');
;;;1177   					sprintf(&buf[currCharNum],"%06d",(int)(max_discahrgeNum*1000));
;;;1178   					currCharNum+=6;
;;;1179   					
;;;1180   					buf[currCharNum++]=(',');
;;;1181   					sprintf(&buf[currCharNum],"%03d",shorttime);
;;;1182   					currCharNum+=3;
;;;1183   					
;;;1184   					buf[currCharNum++]=(',');
;;;1185   					sprintf(&buf[currCharNum],"%1d",mainswitch);
;;;1186   					currCharNum+=1;
;;;1187   					
;;;1188   					buf[currCharNum++]=(',');
;;;1189   					sprintf(&buf[currCharNum],"%1d",finishflag);
;;;1190   					currCharNum+=1;
;;;1191   					
;;;1192   					buf[currCharNum++]=(',');
;;;1193   					sprintf(&buf[currCharNum],"%1d",lockflag);
;;;1194   					currCharNum+=1;
;;;1195   					
;;;1196   					buf[currCharNum++]=(',');
;;;1197   					sprintf(&buf[currCharNum],"%2d",version);
;;;1198   					currCharNum+=2;
;;;1199   					
;;;1200   					buf[currCharNum++]=(',');
;;;1201   					sprintf(&buf[currCharNum],"%03d",Temperature);
;;;1202   					currCharNum+=3;
;;;1203   					
;;;1204   					buf[currCharNum++]=(',');
;;;1205   					sprintf(&buf[currCharNum],"%1d",overflag);
;;;1206   					currCharNum+=1;
;;;1207   //					buf[currCharNum++]=(',');
;;;1208   //					sprintf(&buf[currCharNum],"%d",H_L);
;;;1209   //					currCharNum++;
;;;1210   					
;;;1211   //					buf[currCharNum++]=(',');
;;;1212   //					sprintf(&buf[currCharNum],"%d",LM_S);
;;;1213   //					currCharNum++;
;;;1214   					
;;;1215   //					buf[currCharNum++]=(',');
;;;1216   //					sprintf(&buf[currCharNum],"%02d",(int)temperature);
;;;1217   //					currCharNum+=2;
;;;1218   					
;;;1219   				  buf[currCharNum++ ] = ChrEndR;
;;;1220   				  buf[currCharNum++ ] = ChrEndS;
;;;1221   				}
;;;1222   				else
;;;1223   				{
;;;1224   					return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1225   				}
;;;1226   				break;
;;;1227   			case 1:
;;;1228   				pntlen = 1;
;;;1229   				if(buf[currCharNum]=='?')
;;;1230   				{
;;;1231   					  sprintf(&buf[currCharNum],"%1d",MODE);
;;;1232   				    currCharNum+=pntlen;
;;;1233   				    buf[currCharNum ++] = ChrEndS;
;;;1234   					
;;;1235   				}
;;;1236   				else
;;;1237   				{
;;;1238   					pntlen = 1;				
;;;1239   					for(i=0,temp1=0;i<pntlen;i++)
;;;1240   					{
;;;1241   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1242   					}		                   
;;;1243   //					if(temp1>1)
;;;1244   //					{
;;;1245   //						return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1246   //					}
;;;1247   					MODE=temp1;
;;;1248   //					Off_GPOI_ResetSet();
;;;1249   					OnOff_GPOI_ResetSet( 2, 0 );
;;;1250   					mainswitch = 0;
;;;1251   					PowerCommWaitHandle(3,0);
;;;1252   //					sendwait = 3;
;;;1253   					MODE_PARASET(MODE);
;;;1254   	//				Change_LM_Val(LM_S_Vale);
;;;1255   					buf[currCharNum++] = ChrEndR;
;;;1256   				}
;;;1257   				break;
;;;1258   				case 2:
;;;1259   				pntlen = 1;
;;;1260   				if(buf[currCharNum]=='?')
;;;1261   				{
;;;1262   					sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
0000b0  48e3              LDR      r0,|L10.1088|
0000b2  f8dfb390          LDR      r11,|L10.1092|
0000b6  f04f0a0d          MOV      r10,#0xd              ;1117
0000ba  f04f090a          MOV      r9,#0xa               ;1117
0000be  f06f062f          MVN      r6,#0x2f              ;1241
0000c2  f1b80f13          CMP      r8,#0x13              ;1141
0000c6  d2b2              BCS      |L10.46|
0000c8  e8dff008          TBB      [pc,r8]               ;1141
0000cc  0bbce3fd          DCB      0x0b,0xbc,0xe3,0xfd
0000d0  fcfb0a0a          DCB      0xfc,0xfb,0x0a,0x0a
0000d4  0a0a0a0a          DCB      0x0a,0x0a,0x0a,0x0a
0000d8  faf9f8f7          DCB      0xfa,0xf9,0xf8,0xf7
0000dc  0a0af600          DCB      0x0a,0x0a,0xf6,0x00
0000e0  e7a5              B        |L10.46|
0000e2  5d28              LDRB     r0,[r5,r4]            ;1145
0000e4  283f              CMP      r0,#0x3f              ;1145
0000e6  d1a2              BNE      |L10.46|
0000e8  f8db202c          LDR      r2,[r11,#0x2c]        ;1149  ; Para
0000ec  465e              MOV      r6,r11                ;1149
0000ee  1928              ADDS     r0,r5,r4              ;1149
0000f0  a1d5              ADR      r1,|L10.1096|
0000f2  f7fffffe          BL       __2sprintf
0000f6  1da4              ADDS     r4,r4,#6              ;1149
0000f8  b2a0              UXTH     r0,r4                 ;1150
0000fa  242c              MOVS     r4,#0x2c              ;1152
0000fc  542c              STRB     r4,[r5,r0]            ;1152
0000fe  1c40              ADDS     r0,r0,#1              ;1152
000100  6b72              LDR      r2,[r6,#0x34]         ;1153  ; Para
000102  b287              UXTH     r7,r0                 ;1152
000104  19e8              ADDS     r0,r5,r7              ;1153
000106  a1d0              ADR      r1,|L10.1096|
000108  f7fffffe          BL       __2sprintf
00010c  1dbf              ADDS     r7,r7,#6              ;1153
00010e  b2b8              UXTH     r0,r7                 ;1154
000110  542c              STRB     r4,[r5,r0]            ;1156
000112  1c40              ADDS     r0,r0,#1              ;1156
000114  6ab2              LDR      r2,[r6,#0x28]         ;1157  ; Para
000116  b287              UXTH     r7,r0                 ;1156
000118  19e8              ADDS     r0,r5,r7              ;1157
00011a  a1cd              ADR      r1,|L10.1104|
00011c  f7fffffe          BL       __2sprintf
000120  1d7f              ADDS     r7,r7,#5              ;1157
000122  b2b8              UXTH     r0,r7                 ;1158
000124  542c              STRB     r4,[r5,r0]            ;1160
000126  1c40              ADDS     r0,r0,#1              ;1160
000128  6b32              LDR      r2,[r6,#0x30]         ;1161  ; Para
00012a  b287              UXTH     r7,r0                 ;1160
00012c  19e8              ADDS     r0,r5,r7              ;1161
00012e  a1c8              ADR      r1,|L10.1104|
000130  f7fffffe          BL       __2sprintf
000134  1d7f              ADDS     r7,r7,#5              ;1161
000136  b2b8              UXTH     r0,r7                 ;1162
000138  542c              STRB     r4,[r5,r0]            ;1164
00013a  1c40              ADDS     r0,r0,#1              ;1164
00013c  6bb2              LDR      r2,[r6,#0x38]         ;1165  ; Para
00013e  b287              UXTH     r7,r0                 ;1164
000140  19e8              ADDS     r0,r5,r7              ;1165
000142  a1c3              ADR      r1,|L10.1104|
000144  f7fffffe          BL       __2sprintf
000148  1d7f              ADDS     r7,r7,#5              ;1165
00014a  b2b8              UXTH     r0,r7                 ;1166
00014c  542c              STRB     r4,[r5,r0]            ;1168
00014e  1c40              ADDS     r0,r0,#1              ;1168
000150  6bf2              LDR      r2,[r6,#0x3c]         ;1169  ; Para
000152  b287              UXTH     r7,r0                 ;1168
000154  19e8              ADDS     r0,r5,r7              ;1169
000156  a1c0              ADR      r1,|L10.1112|
000158  f7fffffe          BL       __2sprintf
00015c  1d3f              ADDS     r7,r7,#4              ;1169
00015e  b2b8              UXTH     r0,r7                 ;1170
000160  542c              STRB     r4,[r5,r0]            ;1172
000162  1c40              ADDS     r0,r0,#1              ;1172
000164  6c32              LDR      r2,[r6,#0x40]         ;1173  ; Para
000166  b287              UXTH     r7,r0                 ;1172
000168  19e8              ADDS     r0,r5,r7              ;1173
00016a  a1bb              ADR      r1,|L10.1112|
00016c  f7fffffe          BL       __2sprintf
000170  1d3f              ADDS     r7,r7,#4              ;1173
000172  b2b8              UXTH     r0,r7                 ;1174
000174  542c              STRB     r4,[r5,r0]            ;1176
000176  1c40              ADDS     r0,r0,#1              ;1176
000178  b286              UXTH     r6,r0                 ;1176
00017a  48b9              LDR      r0,|L10.1120|
00017c  ed900a00          VLDR     s0,[r0,#0]            ;1177
000180  eddf0ab8          VLDR     s1,|L10.1124|
000184  19a8              ADDS     r0,r5,r6              ;1177
000186  a1b0              ADR      r1,|L10.1096|
000188  ee200a20          VMUL.F32 s0,s0,s1              ;1177
00018c  eebd0ac0          VCVT.S32.F32 s0,s0                 ;1177
000190  ee102a10          VMOV     r2,s0                 ;1177
000194  f7fffffe          BL       __2sprintf
000198  1db6              ADDS     r6,r6,#6              ;1177
00019a  b2b0              UXTH     r0,r6                 ;1178
00019c  49b2              LDR      r1,|L10.1128|
00019e  542c              STRB     r4,[r5,r0]            ;1180
0001a0  1c40              ADDS     r0,r0,#1              ;1180
0001a2  b286              UXTH     r6,r0                 ;1180
0001a4  780a              LDRB     r2,[r1,#0]            ;1181  ; shorttime
0001a6  19a8              ADDS     r0,r5,r6              ;1181
0001a8  a1b0              ADR      r1,|L10.1132|
0001aa  f7fffffe          BL       __2sprintf
0001ae  1cf6              ADDS     r6,r6,#3              ;1181
0001b0  b2b0              UXTH     r0,r6                 ;1182
0001b2  49a2              LDR      r1,|L10.1084|
0001b4  542c              STRB     r4,[r5,r0]            ;1184
0001b6  1c40              ADDS     r0,r0,#1              ;1184
0001b8  b286              UXTH     r6,r0                 ;1184
0001ba  19a8              ADDS     r0,r5,r6              ;1185
0001bc  3958              SUBS     r1,r1,#0x58           ;1185
0001be  798a              LDRB     r2,[r1,#6]            ;1185  ; mainswitch
0001c0  a1ac              ADR      r1,|L10.1140|
0001c2  f7fffffe          BL       __2sprintf
0001c6  1c76              ADDS     r6,r6,#1              ;1185
0001c8  b2b0              UXTH     r0,r6                 ;1186
0001ca  49ab              LDR      r1,|L10.1144|
0001cc  542c              STRB     r4,[r5,r0]            ;1188
0001ce  1c40              ADDS     r0,r0,#1              ;1188
0001d0  b286              UXTH     r6,r0                 ;1188
0001d2  780a              LDRB     r2,[r1,#0]            ;1189  ; finishflag
0001d4  19a8              ADDS     r0,r5,r6              ;1189
0001d6  a1a7              ADR      r1,|L10.1140|
0001d8  f7fffffe          BL       __2sprintf
0001dc  1c76              ADDS     r6,r6,#1              ;1189
0001de  b2b0              UXTH     r0,r6                 ;1190
0001e0  49a6              LDR      r1,|L10.1148|
0001e2  542c              STRB     r4,[r5,r0]            ;1192
0001e4  1c40              ADDS     r0,r0,#1              ;1192
0001e6  b286              UXTH     r6,r0                 ;1192
0001e8  780a              LDRB     r2,[r1,#0]            ;1193  ; lockflag
0001ea  19a8              ADDS     r0,r5,r6              ;1193
0001ec  a1a1              ADR      r1,|L10.1140|
0001ee  f7fffffe          BL       __2sprintf
0001f2  1c76              ADDS     r6,r6,#1              ;1193
0001f4  b2b0              UXTH     r0,r6                 ;1194
0001f6  49a2              LDR      r1,|L10.1152|
0001f8  542c              STRB     r4,[r5,r0]            ;1196
0001fa  1c40              ADDS     r0,r0,#1              ;1196
0001fc  b286              UXTH     r6,r0                 ;1196
0001fe  780a              LDRB     r2,[r1,#0]            ;1197  ; version
000200  19a8              ADDS     r0,r5,r6              ;1197
000202  a1a0              ADR      r1,|L10.1156|
000204  f7fffffe          BL       __2sprintf
000208  1cb6              ADDS     r6,r6,#2              ;1197
00020a  b2b0              UXTH     r0,r6                 ;1198
00020c  499e              LDR      r1,|L10.1160|
00020e  542c              STRB     r4,[r5,r0]            ;1200
000210  1c40              ADDS     r0,r0,#1              ;1200
000212  b286              UXTH     r6,r0                 ;1200
000214  f9b12000          LDRSH    r2,[r1,#0]            ;1201  ; Temperature
000218  19a8              ADDS     r0,r5,r6              ;1201
00021a  a194              ADR      r1,|L10.1132|
00021c  f7fffffe          BL       __2sprintf
000220  1cf6              ADDS     r6,r6,#3              ;1201
000222  b2b0              UXTH     r0,r6                 ;1202
000224  4999              LDR      r1,|L10.1164|
000226  542c              STRB     r4,[r5,r0]            ;1204
000228  1c40              ADDS     r0,r0,#1              ;1204
00022a  b284              UXTH     r4,r0                 ;1204
00022c  780a              LDRB     r2,[r1,#0]            ;1205  ; overflag
00022e  1928              ADDS     r0,r5,r4              ;1205
000230  a190              ADR      r1,|L10.1140|
000232  f7fffffe          BL       __2sprintf
000236  1c64              ADDS     r4,r4,#1              ;1205
000238  b2a0              UXTH     r0,r4                 ;1206
00023a  f805a000          STRB     r10,[r5,r0]           ;1219
00023e  1c40              ADDS     r0,r0,#1              ;1219
000240  b280              UXTH     r0,r0                 ;1219
000242  e3e8              B        |L10.2582|
000244  5d28              LDRB     r0,[r5,r4]            ;1229
000246  2201              MOVS     r2,#1                 ;1228
000248  283f              CMP      r0,#0x3f              ;1229
00024a  d01c              BEQ      |L10.646|
00024c  2000              MOVS     r0,#0                 ;1239
00024e  4601              MOV      r1,r0                 ;1239
                  |L10.592|
000250  5d2b              LDRB     r3,[r5,r4]            ;1241
000252  eb010181          ADD      r1,r1,r1,LSL #2       ;1241
000256  1c64              ADDS     r4,r4,#1              ;1241
000258  1c40              ADDS     r0,r0,#1              ;1241
00025a  eb060141          ADD      r1,r6,r1,LSL #1       ;1241
00025e  b2c0              UXTB     r0,r0                 ;1239
000260  4419              ADD      r1,r1,r3              ;1241
000262  b2a4              UXTH     r4,r4                 ;1241
000264  4290              CMP      r0,r2                 ;1239
000266  d3f3              BCC      |L10.592|
000268  4e74              LDR      r6,|L10.1084|
00026a  3e58              SUBS     r6,r6,#0x58           ;1247
00026c  7171              STRB     r1,[r6,#5]            ;1247
00026e  2100              MOVS     r1,#0                 ;1249
000270  2002              MOVS     r0,#2                 ;1249
000272  f7fffffe          BL       OnOff_GPOI_ResetSet
000276  2000              MOVS     r0,#0                 ;1250
000278  71b0              STRB     r0,[r6,#6]            ;1250
00027a  4601              MOV      r1,r0                 ;1251
00027c  2003              MOVS     r0,#3                 ;1251
00027e  f7fffffe          BL       PowerCommWaitHandle
000282  7970              LDRB     r0,[r6,#5]            ;1253  ; MODE
000284  e21d              B        |L10.1730|
                  |L10.646|
000286  496d              LDR      r1,|L10.1084|
000288  1928              ADDS     r0,r5,r4              ;1231
00028a  3958              SUBS     r1,r1,#0x58           ;1231
00028c  794a              LDRB     r2,[r1,#5]            ;1231  ; MODE
00028e  a179              ADR      r1,|L10.1140|
000290  e024              B        |L10.732|
000292  5d29              LDRB     r1,[r5,r4]            ;1260
000294  2201              MOVS     r2,#1                 ;1259
000296  293f              CMP      r1,#0x3f              ;1260
                  |L10.664|
000298  d07e              BEQ      |L10.920|
;;;1263   				    currCharNum+=pntlen;
;;;1264   				    buf[currCharNum ++] = ChrEndS;
;;;1265   					
;;;1266   				}
;;;1267   				else
;;;1268   				{
;;;1269   					pntlen = 1;				
;;;1270   					for(i=0,temp1=0;i<pntlen;i++)
00029a  2100              MOVS     r1,#0
00029c  4608              MOV      r0,r1
                  |L10.670|
;;;1271   					{
;;;1272   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
00029e  5d2b              LDRB     r3,[r5,r4]
0002a0  eb000080          ADD      r0,r0,r0,LSL #2
0002a4  1c64              ADDS     r4,r4,#1
0002a6  1c49              ADDS     r1,r1,#1
0002a8  eb060040          ADD      r0,r6,r0,LSL #1
0002ac  b2c9              UXTB     r1,r1                 ;1270
0002ae  4418              ADD      r0,r0,r3
0002b0  b2a4              UXTH     r4,r4
0002b2  4291              CMP      r1,r2                 ;1270
0002b4  d3f3              BCC      |L10.670|
;;;1273   					}		                   
;;;1274   					if(temp1>1)
0002b6  e007              B        |L10.712|
0002b8  e3fc              B        |L10.2740|
0002ba  e3fc              B        |L10.2742|
0002bc  e3fc              B        |L10.2744|
0002be  e3fc              B        |L10.2746|
0002c0  e3fc              B        |L10.2748|
0002c2  e3fc              B        |L10.2750|
0002c4  e200              B        |L10.1736|
0002c6  e014              B        |L10.754|
                  |L10.712|
0002c8  2801              CMP      r0,#1
0002ca  d90b              BLS      |L10.740|
                  |L10.716|
;;;1275   					{
;;;1276   						return SetErr_ACK(buf, addr ,PARA_ERR);
0002cc  2201              MOVS     r2,#1
                  |L10.718|
;;;1277   					}
;;;1278   //					MODE=temp1;
;;;1279   					
;;;1280   					
;;;1281   					mainswitch = temp1;
;;;1282   //						Para.CSET_Voltage = 5000;
;;;1283   //						Para.CSET_Current = 1000;
;;;1284   					
;;;1285   						
;;;1286   					MODE_ONOFF(mainswitch);
;;;1287   	//				Change_LM_Val(LM_S_Vale);
;;;1288   					buf[currCharNum++] = ChrEndR;
;;;1289   		        }
;;;1290   				break;
;;;1291   				case 3:
;;;1292   				pntlen = 1;
;;;1293   				if(buf[currCharNum]=='?')
;;;1294   				{
;;;1295   					  sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1296   				    currCharNum+=pntlen;
;;;1297   				    buf[currCharNum ++] = ChrEndS;
;;;1298   					
;;;1299   				}
;;;1300   				else
;;;1301   				{
;;;1302   					if(currCharNum == 0x0b)
;;;1303   					{						
;;;1304   						for(i=0,temp1=0;i<6;i++)
;;;1305   						{
;;;1306   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1307   						}
;;;1308   					}		
;;;1309   					Para.IR_Start_C = temp1;//起始电流
;;;1310   					temp1 = 0;
;;;1311   					
;;;1312   					if(buf[currCharNum++] == ',')
;;;1313   					{
;;;1314   						for(i=0,temp1=0;i<5;i++)
;;;1315   						{
;;;1316   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1317   						}
;;;1318   					}	
;;;1319   					Para.IR_Step_C = temp1;//步进电流
;;;1320   					temp1 = 0;
;;;1321   					 
;;;1322   					if(buf[currCharNum++] == ',')
;;;1323   					{
;;;1324   						for(i=0,temp1=0;i<5;i++)
;;;1325   						{
;;;1326   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1327   						}
;;;1328   					}	
;;;1329   					Para.IR_Threshold_V = temp1;//门槛电压
;;;1330   					temp1 = 0;
;;;1331   					
;;;1332   					if(buf[currCharNum++] == ',')
;;;1333   					{
;;;1334   						for(i=0,temp1=0;i<3;i++)
;;;1335   						{
;;;1336   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1337   						}
;;;1338   					}	
;;;1339   					Para.IR_Step_Time = temp1;//步进时间
;;;1340   					temp1 = 0;
;;;1341   					
;;;1342   					if(buf[currCharNum++] == ',')
;;;1343   					{
;;;1344   						for(i=0,temp1=0;i<6;i++)
;;;1345   						{
;;;1346   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1347   						}
;;;1348   					}	
;;;1349   					Para.POWER_OutPut_V = temp1;//电源电压
;;;1350   					temp1 = 0;
;;;1351   					
;;;1352   					if(buf[currCharNum++] == ',')
;;;1353   					{
;;;1354   						for(i=0,temp1=0;i<5;i++)
;;;1355   						{
;;;1356   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1357   						}
;;;1358   					}	
;;;1359   					Para.POWER_Limit_C = temp1;//电源电流
;;;1360   					temp1 = 0;
;;;1361   					
;;;1362   					if(buf[currCharNum++] == ',')
;;;1363   					{
;;;1364   						for(i=0,temp1=0;i<5;i++)
;;;1365   						{
;;;1366   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1367   						}
;;;1368   					}	
;;;1369   					Para.POWER_Cutoff_C = temp1;//设置充电截止电流
;;;1370   					temp1 = 0;
;;;1371   					
;;;1372   					if(buf[currCharNum++] == ',')
;;;1373   					{
;;;1374   						for(i=0,temp1=0;i<6;i++)
;;;1375   						{
;;;1376   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1377   						}
;;;1378   					}	
;;;1379   					Para.LOAD_V = temp1;//负载电压
;;;1380   					temp1 = 0;
;;;1381   					
;;;1382   					if(buf[currCharNum++] == ',')
;;;1383   					{
;;;1384   						for(i=0,temp1=0;i<6;i++)
;;;1385   						{
;;;1386   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1387   						}
;;;1388   					}	
;;;1389   					Para.LOAD_C = temp1;//负载电流
;;;1390   					temp1 = 0;
;;;1391   					
;;;1392   					if(buf[currCharNum++] == ',')
;;;1393   					{
;;;1394   						for(i=0,temp1=0;i<6;i++)
;;;1395   						{
;;;1396   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1397   						}
;;;1398   					}	
;;;1399   					Para.LOAD_Cutoff_V = temp1;//设置负载截止电压
;;;1400   					temp1 = 0;
;;;1401   					
;;;1402   					if(buf[currCharNum++] == ',')
;;;1403   					{
;;;1404   						for(i=0,temp1=0;i<5;i++)
;;;1405   						{
;;;1406   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1407   						}
;;;1408   					}	
;;;1409   					Para.CDC_OutPut_V = temp1;//设置容量测试充电电压
;;;1410   					temp1 = 0;
;;;1411   					
;;;1412   					if(buf[currCharNum++] == ',')
;;;1413   					{
;;;1414   						for(i=0,temp1=0;i<5;i++)
;;;1415   						{
;;;1416   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1417   						}
;;;1418   					}	
;;;1419   					Para.CDC_Limit_C = temp1;//设置容量测试充电限制电流
;;;1420   					temp1 = 0;
;;;1421   					
;;;1422   					if(buf[currCharNum++] == ',')
;;;1423   					{
;;;1424   						for(i=0,temp1=0;i<5;i++)
;;;1425   						{
;;;1426   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1427   						}
;;;1428   					}	
;;;1429   					Para.CDC_Ccutoff_V = temp1;//设置容量测试充电截止电压
;;;1430   					temp1 = 0;
;;;1431   					
;;;1432   					if(buf[currCharNum++] == ',')
;;;1433   					{
;;;1434   						for(i=0,temp1=0;i<5;i++)
;;;1435   						{
;;;1436   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1437   						}
;;;1438   					}	
;;;1439   					Para.CDC_Ccutoff_C = temp1;//设置容量测试充电截止电流
;;;1440   					temp1 = 0;
;;;1441   					
;;;1442   					if(buf[currCharNum++] == ',')
;;;1443   					{
;;;1444   						for(i=0,temp1=0;i<5;i++)
;;;1445   						{
;;;1446   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1447   						}
;;;1448   					}	
;;;1449   					Para.CDC_Load_C = temp1;//设置容量测试放电电流
;;;1450   					temp1 = 0;
;;;1451   					
;;;1452   					if(buf[currCharNum++] == ',')
;;;1453   					{
;;;1454   						for(i=0,temp1=0;i<5;i++)
;;;1455   						{
;;;1456   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1457   						}
;;;1458   					}	
;;;1459   					Para.CDC_Dcutoff_V = temp1;//设置容量测试放电截止电压
;;;1460   					temp1 = 0;
;;;1461   					
;;;1462   					if(buf[currCharNum++] == ',')
;;;1463   					{
;;;1464   						for(i=0,temp1=0;i<3;i++)
;;;1465   						{
;;;1466   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1467   						}
;;;1468   					}	
;;;1469   					Para.CDC_Cycle_Time = temp1;//循环次数
;;;1470   					temp1 = 0;
;;;1471   					
;;;1472   					if(buf[currCharNum++] == ',')
;;;1473   					{
;;;1474   						for(i=0,temp1=0;i<3;i++)
;;;1475   						{
;;;1476   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1477   						}
;;;1478   					}	
;;;1479   					if(MODE == 0)
;;;1480   					{
;;;1481   						Para.CLOAD_MODE = temp1;//负载模式
;;;1482   					}
;;;1483   					temp1 = 0;
;;;1484   //					MODE_PARASET(MODE);
;;;1485   					
;;;1486   					if(buf[currCharNum++] == ',')
;;;1487   					{
;;;1488   						for(i=0,temp1=0;i<3;i++)
;;;1489   						{
;;;1490   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1491   						}
;;;1492   					}	
;;;1493   					Rraly = temp1;//内阻档位
;;;1494   					temp1 = 0;
;;;1495   					
;;;1496   					if(buf[currCharNum++] == ',')
;;;1497   					{
;;;1498   						for(i=0,temp1=0;i<3;i++)
;;;1499   						{
;;;1500   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1501   						}
;;;1502   					}	
;;;1503   					Para.ACT_DELAY = temp1;//激活延时
;;;1504   					temp1 = 0;
;;;1505   					
;;;1506   					if(buf[currCharNum++] == ',')
;;;1507   					{
;;;1508   						for(i=0,temp1=0;i<6;i++)
;;;1509   						{
;;;1510   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1511   						}
;;;1512   					}	
;;;1513   					Para.LOAD_P = temp1*10;//负载功率
;;;1514   					temp1 = 0;
;;;1515   					
;;;1516   					MODE_PARASET(MODE);
;;;1517   					
;;;1518   					 buf[currCharNum++] = ChrEndR;
;;;1519   		        }
;;;1520   				break;
;;;1521   				case 4:
;;;1522   				pntlen = 1;
;;;1523   				if(buf[currCharNum]=='?')
;;;1524   				{
;;;1525   					  sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1526   				    currCharNum+=pntlen;
;;;1527   				    buf[currCharNum ++] = ChrEndS;
;;;1528   					
;;;1529   				}
;;;1530   				else
;;;1531   				{
;;;1532   					if(currCharNum == 0x0b)
;;;1533   					{						
;;;1534   						for(i=0,temp1=0;i<2;i++)
;;;1535   						{
;;;1536   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1537   						}
;;;1538   					}
;;;1539   					MODE = temp1;//项目
;;;1540   					temp1 = 0;
;;;1541   					
;;;1542   					if(MODE == 0)
;;;1543   					{
;;;1544   						if(buf[currCharNum++] == ',')
;;;1545   						{
;;;1546   							for(i=0,temp1=0;i<6;i++)
;;;1547   							{
;;;1548   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1549   							}
;;;1550   						}	
;;;1551   						
;;;1552   						temp1 = 0;
;;;1553   						
;;;1554   						if(buf[currCharNum++] == ',')
;;;1555   						{
;;;1556   							for(i=0,temp1=0;i<6;i++)
;;;1557   							{
;;;1558   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1559   							}
;;;1560   						}	
;;;1561   						Para.CSET_Current_Laod = temp1;//负载电流
;;;1562   						temp1 = 0;
;;;1563   						
;;;1564   	
;;;1565   						if(Para.CSET_Current_Laod > 15000)
;;;1566   						{
;;;1567   							LOAD_I_SW = 1;
;;;1568   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1569   						}else{
;;;1570   							LOAD_I_SW = 0;
;;;1571   							GPIO_SetBits(GPIOC,GPIO_Pin_11);//电流测量为低档位
;;;1572   						}
;;;1573   						if(buf[currCharNum++] == ',')
;;;1574   						{
;;;1575   							for(i=0,temp1=0;i<1;i++)
;;;1576   							{
;;;1577   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1578   							}
;;;1579   						}
;;;1580   						mainswitch = temp1;//开关
;;;1581   						if(mainswitch == 0)
;;;1582   						{
;;;1583   							LOAD_I_SW = 1;
;;;1584   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1585   						}
;;;1586   					}else if(MODE == 1){
;;;1587   						if(buf[currCharNum++] == ',')
;;;1588   						{
;;;1589   							for(i=0,temp1=0;i<6;i++)
;;;1590   							{
;;;1591   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1592   							}
;;;1593   						}	
;;;1594   						Para.CDC_OutPut_V = temp1;//电源电压
;;;1595   						temp1 = 0;
;;;1596   						
;;;1597   						if(buf[currCharNum++] == ',')
;;;1598   						{
;;;1599   							for(i=0,temp1=0;i<6;i++)
;;;1600   							{
;;;1601   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1602   							}
;;;1603   						}	
;;;1604   						Para.CDC_Limit_C = temp1;//电源电流
;;;1605   						temp1 = 0;
;;;1606   						
;;;1607   						if(buf[currCharNum++] == ',')
;;;1608   						{
;;;1609   							for(i=0,temp1=0;i<1;i++)
;;;1610   							{
;;;1611   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1612   							}
;;;1613   						}
;;;1614   						mainswitch = temp1;//开关
;;;1615   					}else if(MODE == 2){
;;;1616   						LOAD_I_SW = 1;
;;;1617   						GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1618   						if(buf[currCharNum++] == ',')
;;;1619   						{
;;;1620   							for(i=0,temp1=0;i<6;i++)
;;;1621   							{
;;;1622   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1623   							}
;;;1624   						}	
;;;1625   						Para.IR_Start_C = temp1;//起始电流
;;;1626   						temp1 = 0;
;;;1627   						
;;;1628   						if(buf[currCharNum++] == ',')
;;;1629   						{
;;;1630   							for(i=0,temp1=0;i<6;i++)
;;;1631   							{
;;;1632   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1633   							}
;;;1634   						}	
;;;1635   						Para.IR_Step_C = temp1;//步进电流
;;;1636   						temp1 = 0;
;;;1637   						
;;;1638   						if(buf[currCharNum++] == ',')
;;;1639   						{
;;;1640   							for(i=0,temp1=0;i<1;i++)
;;;1641   							{
;;;1642   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1643   							}
;;;1644   						}
;;;1645   						mainswitch = temp1;//开关
;;;1646   						
;;;1647   						if(mainswitch == 1)
;;;1648   						{
;;;1649   							finishflag = 0;
;;;1650   						}
;;;1651   					}else if(MODE == 3){
;;;1652   						if(buf[currCharNum++] == ',')
;;;1653   						{
;;;1654   							for(i=0,temp1=0;i<6;i++)
;;;1655   							{
;;;1656   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1657   							}
;;;1658   						}	
;;;1659   						Para.CDC_OutPut_V = temp1;//电源电压
;;;1660   						temp1 = 0;
;;;1661   						
;;;1662   						
;;;1663   						if(buf[currCharNum++] == ',')
;;;1664   						{
;;;1665   							for(i=0,temp1=0;i<6;i++)
;;;1666   							{
;;;1667   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1668   							}
;;;1669   						}	
;;;1670   						Para.CDC_Limit_C = temp1;//电源电流
;;;1671   						temp1 = 0;
;;;1672   						
;;;1673   						if(buf[currCharNum++] == ',')
;;;1674   						{
;;;1675   							for(i=0,temp1=0;i<1;i++)
;;;1676   							{
;;;1677   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1678   							}
;;;1679   						}
;;;1680   						mainswitch = temp1;//开关
;;;1681   						
;;;1682   						
;;;1683   					}else if(MODE == 4){
;;;1684   						if(buf[currCharNum++] == ',')
;;;1685   						{
;;;1686   							for(i=0,temp1=0;i<6;i++)
;;;1687   							{
;;;1688   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1689   							}
;;;1690   						}	
;;;1691   						
;;;1692   						temp1 = 0;
;;;1693   						
;;;1694   						if(buf[currCharNum++] == ',')
;;;1695   						{
;;;1696   							for(i=0,temp1=0;i<6;i++)
;;;1697   							{
;;;1698   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1699   							}
;;;1700   						}	
;;;1701   						Para.CSET_Current_Laod = temp1;//负载电流
;;;1702   						temp1 = 0;
;;;1703   						
;;;1704   	
;;;1705   						if(Para.CSET_Current_Laod > 15000)
;;;1706   						{
;;;1707   							LOAD_I_SW = 1;
;;;1708   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1709   						}else{
;;;1710   							LOAD_I_SW = 0;
;;;1711   							GPIO_SetBits(GPIOC,GPIO_Pin_11);//电流测量为低档位
;;;1712   						}
;;;1713   						if(buf[currCharNum++] == ',')
;;;1714   						{
;;;1715   							for(i=0,temp1=0;i<1;i++)
;;;1716   							{
;;;1717   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1718   							}
;;;1719   						}
;;;1720   						mainswitch = temp1;//开关
;;;1721   						if(mainswitch == 0)
;;;1722   						{
;;;1723   							LOAD_I_SW = 1;
;;;1724   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1725   						}
;;;1726   					}else if(MODE == 5){
;;;1727   						if(buf[currCharNum++] == ',')
;;;1728   						{
;;;1729   							for(i=0,temp1=0;i<6;i++)
;;;1730   							{
;;;1731   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1732   							}
;;;1733   						}	
;;;1734   						temp1 = 0;
;;;1735   						
;;;1736   						if(buf[currCharNum++] == ',')
;;;1737   						{
;;;1738   							for(i=0,temp1=0;i<6;i++)
;;;1739   							{
;;;1740   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1741   							}
;;;1742   						}	
;;;1743   						temp1 = 0;
;;;1744   						
;;;1745   						if(buf[currCharNum++] == ',')
;;;1746   						{
;;;1747   							for(i=0,temp1=0;i<1;i++)
;;;1748   							{
;;;1749   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1750   							}
;;;1751   						}
;;;1752   						mainswitch = temp1;//开关
;;;1753   						if(mainswitch == 0)
;;;1754   						{
;;;1755   							mainswitch = 0;
;;;1756   						}
;;;1757   					}else if(MODE == 6){
;;;1758   						if(buf[currCharNum++] == ',')
;;;1759   						{
;;;1760   							for(i=0,temp1=0;i<6;i++)
;;;1761   							{
;;;1762   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1763   							}
;;;1764   						}	
;;;1765   						temp1 = 0;
;;;1766   						
;;;1767   						if(buf[currCharNum++] == ',')
;;;1768   						{
;;;1769   							for(i=0,temp1=0;i<6;i++)
;;;1770   							{
;;;1771   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1772   							}
;;;1773   						}	
;;;1774   						temp1 = 0;
;;;1775   						
;;;1776   						if(buf[currCharNum++] == ',')
;;;1777   						{
;;;1778   							for(i=0,temp1=0;i<1;i++)
;;;1779   							{
;;;1780   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1781   							}
;;;1782   						}
;;;1783   						mainswitch = temp1;//开关
;;;1784   					}
;;;1785   					
;;;1786   					temp1 = 0;
;;;1787   //					MODE_PARASET(MODE);
;;;1788   					Off_GPOI_ResetSet();
;;;1789   					LIST_ONOFF(mainswitch);
;;;1790   					buf[currCharNum++] = ChrEndR;
;;;1791   		        }
;;;1792   				break;
;;;1793   				case 12://电压校准
;;;1794   				{
;;;1795   					pntlen = 9;
;;;1796   					if(buf[currCharNum]=='?')
;;;1797   					{
;;;1798   						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1799   						sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1800   						currCharNum+=pntlen;
;;;1801   						buf[currCharNum++ ] = ChrEndS;
;;;1802   					}
;;;1803   					else
;;;1804   					{
;;;1805   						tmpFg = 1;
;;;1806   						for(i=0;i<pntlen;i++)
;;;1807   						{
;;;1808   						   if(i==0||i==5)
;;;1809   							  continue;
;;;1810   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1811   						   {
;;;1812   							  tmpFg = (tmpFg&0x01);
;;;1813   						   }
;;;1814   						   else
;;;1815   						   {
;;;1816   							  tmpFg = 0;
;;;1817   						   }
;;;1818   						}
;;;1819   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1820   						{
;;;1821   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1822   							
;;;1823   						}
;;;1824   						temp1=0;
;;;1825   						for(i=0;i<pntlen;i++)
;;;1826   						{
;;;1827   						   if(i==0)
;;;1828   						   {
;;;1829   							   fsingal = 10*(buf[currCharNum++]-0x30);
;;;1830   							   continue; 
;;;1831   						   }else if(i==1)
;;;1832   						   {
;;;1833   							  fsingal = fsingal+(buf[currCharNum++]-0x30);
;;;1834   							  continue; 
;;;1835   						   } 
;;;1836   						   else if(i==5)
;;;1837   						   {
;;;1838   							   currCharNum++;
;;;1839   							   continue; 
;;;1840   						   }
;;;1841   						   else									 
;;;1842   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1843   						}	
;;;1844   						CalHandle(0,fsingal,temp1);
;;;1845   						
;;;1846   					}
;;;1847   				}break;
;;;1848   				case 5:
;;;1849   				pntlen = 1;
;;;1850   				if(buf[currCharNum]=='?')
;;;1851   				{
;;;1852   					sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1853   				    currCharNum+=pntlen;
;;;1854   				    buf[currCharNum ++] = ChrEndS;
;;;1855   					
;;;1856   				}
;;;1857   				else
;;;1858   				{
;;;1859   					pntlen = 1;				
;;;1860   					for(i=0,temp1=0;i<pntlen;i++)
;;;1861   					{
;;;1862   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1863   					}		                   
;;;1864   					if(temp1>1)
;;;1865   					{
;;;1866   						return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1867   					}
;;;1868   //					MODE=temp1;
;;;1869   					
;;;1870   					
;;;1871   					overflag = temp1;
;;;1872   //						Para.CSET_Voltage = 5000;
;;;1873   //						Para.CSET_Current = 1000;
;;;1874   					
;;;1875   						
;;;1876   //					MODE_ONOFF(mainswitch);
;;;1877   	//				Change_LM_Val(LM_S_Vale);
;;;1878   					buf[currCharNum++] = ChrEndR;
;;;1879   		        }
;;;1880   				break;
;;;1881   				case 13://电流校准
;;;1882   				{
;;;1883   					pntlen = 9;
;;;1884   					if(buf[currCharNum]=='?')
;;;1885   					{
;;;1886   //						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1887   //									sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1888   //						currCharNum+=pntlen;
;;;1889   //						buf[currCharNum++ ] = ChrEndS;
;;;1890   					}
;;;1891   					else
;;;1892   					{
;;;1893   						tmpFg = 1;
;;;1894   						for(i=0;i<pntlen;i++)
;;;1895   						{
;;;1896   						   if(i==0||i==5)
;;;1897   							  continue;
;;;1898   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1899   						   {
;;;1900   							  tmpFg = (tmpFg&0x01);
;;;1901   						   }
;;;1902   						   else
;;;1903   						   {
;;;1904   							  tmpFg = 0;
;;;1905   						   }
;;;1906   						}
;;;1907   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1908   						{
;;;1909   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1910   							
;;;1911   						}
;;;1912   						temp1=0;
;;;1913   						for(i=0;i<pntlen;i++)
;;;1914   						{
;;;1915   						   if(i==0)
;;;1916   						   {
;;;1917   							   fsingal = 10*(buf[currCharNum++]-0x30);
;;;1918   							   continue; 
;;;1919   						   }else if(i==1)
;;;1920   						   {
;;;1921   							  fsingal = fsingal+(buf[currCharNum++]-0x30);
;;;1922   							  continue; 
;;;1923   						   } 
;;;1924   						   else if(i==5)
;;;1925   						   {
;;;1926   							   currCharNum++;
;;;1927   							   continue; 
;;;1928   						   }
;;;1929   						   else									 
;;;1930   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1931   						}
;;;1932   //						for(i=0;i<pntlen;i++)
;;;1933   //						{
;;;1934   //						   if(i==0)
;;;1935   //						   {
;;;1936   //							   fsingal = buf[currCharNum++]-0x30;
;;;1937   //							   continue; 
;;;1938   //						   } 
;;;1939   //						   else if(i==5)
;;;1940   //						   {
;;;1941   //							   currCharNum++;
;;;1942   //							   continue; 
;;;1943   //						   }
;;;1944   //						   else									 
;;;1945   //						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1946   //						}	
;;;1947   						CalHandle(1,fsingal,temp1);
;;;1948   						
;;;1949   					}
;;;1950   				}break;
;;;1951   				case 14://电阻校准
;;;1952   				{
;;;1953   					pntlen = 6;
;;;1954   					if(buf[currCharNum]=='?')
;;;1955   					{
;;;1956   						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1957   									sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1958   						currCharNum+=pntlen;
;;;1959   						buf[currCharNum++ ] = ChrEndS;
;;;1960   					}
;;;1961   					else
;;;1962   					{
;;;1963   						tmpFg = 1;
;;;1964   						for(i=0;i<pntlen;i++)
;;;1965   						{
;;;1966   						   if(i==0||i==4)
;;;1967   							  continue;
;;;1968   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1969   						   {
;;;1970   							  tmpFg = (tmpFg&0x01);
;;;1971   						   }
;;;1972   						   else
;;;1973   						   {
;;;1974   							  tmpFg = 0;
;;;1975   						   }
;;;1976   						}
;;;1977   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1978   						{
;;;1979   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1980   							
;;;1981   						}
;;;1982   						temp1=0;
;;;1983   						for(i=0;i<pntlen;i++)
;;;1984   						{
;;;1985   						   if(i==0)
;;;1986   						   {
;;;1987   							   fsingal = buf[currCharNum++]-0x30;
;;;1988   							   continue; 
;;;1989   						   } 
;;;1990   //						   else if(i==4)
;;;1991   //						   {
;;;1992   //							   currCharNum++;
;;;1993   //							   continue; 
;;;1994   //						   }
;;;1995   //						   else									 
;;;1996   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1997   						}
;;;1998   						CalHandle(2,fsingal,temp1);
;;;1999   						
;;;2000   					}
;;;2001   				}break;
;;;2002   				case 18:
;;;2003   				{
;;;2004   					if(buf[currCharNum]=='?')
;;;2005   					{
;;;2006   //						sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;2007   //						currCharNum+=pntlen;
;;;2008   //						buf[currCharNum ++] = ChrEndS;
;;;2009   						
;;;2010   					}
;;;2011   					else
;;;2012   					{
;;;2013   						pntlen = 1;				
;;;2014   						for(i=0,temp1=0;i<pntlen;i++)
;;;2015   						{
;;;2016   							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;2017   						}		                   
;;;2018   						if(temp1>1)
;;;2019   						{
;;;2020   							return SetErr_ACK(buf, addr ,PARA_ERR);
;;;2021   						}
;;;2022   	//					MODE=temp1;
;;;2023   						
;;;2024   						jumpflag = temp1;
;;;2025   						bootflag=1;
;;;2026   						Write_Boot_Flag();
;;;2027   //						if(temp1 == 1)
;;;2028   //						{
;;;2029   //							JumpBoot(55);
;;;2030   //						}
;;;2031   						buf[currCharNum++] = ChrEndR;
;;;2032   					}
;;;2033   				}break;
;;;2034   				case 15:
;;;2035   				{
;;;2036   					pntlen = 1;
;;;2037   					if(buf[currCharNum]=='?')
;;;2038   					{
;;;2039   
;;;2040   	//				    buf[currCharNum ++] = ChrEndS;
;;;2041   						
;;;2042   					}
;;;2043   					else
;;;2044   					{
;;;2045   						pntlen = 1;				
;;;2046   						for(i=0,temp1=0;i<pntlen;i++)
;;;2047   						{
;;;2048   							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;2049   						}		                   
;;;2050   						if(temp1>3)
;;;2051   						{
;;;2052   							return SetErr_ACK(buf, addr ,PARA_ERR);
;;;2053   						}
;;;2054   	//					MODE=temp1;
;;;2055   						
;;;2056   						fsingal = temp1;
;;;2057   						CalHandle(3,fsingal,0);
;;;2058   //						if(temp1 == 1)
;;;2059   //						{
;;;2060   //							JumpBoot(55);
;;;2061   //						}
;;;2062   						buf[currCharNum++] = ChrEndR;
;;;2063   					}
;;;2064   				}
;;;2065   				break;
;;;2066   //				case 16:
;;;2067   //				{
;;;2068   //					pntlen = 3;
;;;2069   //					if(buf[currCharNum]=='?')
;;;2070   //					{
;;;2071   //						sprintf(&buf[currCharNum],"%1d",Gmode_Vale);
;;;2072   //						currCharNum+=pntlen;
;;;2073   //						buf[currCharNum] = ChrEndR;
;;;2074   //						currCharNum++;
;;;2075   //	//				    buf[currCharNum ++] = ChrEndS;
;;;2076   //						
;;;2077   //					}
;;;2078   //					else
;;;2079   //					{
;;;2080   //						tmpFg = 1;
;;;2081   //						for(i=0;i<pntlen;i++)
;;;2082   //						{
;;;2083   //						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;2084   //						   {
;;;2085   //							  tmpFg = (tmpFg&0x01);
;;;2086   //						   }
;;;2087   //						   else
;;;2088   //						   {
;;;2089   //							  tmpFg = 0;
;;;2090   //						   }
;;;2091   //						}
;;;2092   //						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;2093   //						{
;;;2094   //							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;2095   //							
;;;2096   //						}					
;;;2097   //						for(i=0,temp1=0;i<pntlen;i++)
;;;2098   //						{
;;;2099   //							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;2100   //						}		                   
;;;2101   //						 overflag = temp1;
;;;2102   //						 
;;;2103   ////								 Mode=temp1;
;;;2104   ////								Change_MODE_Val(Mode);
;;;2105   ////						 buf[currCharNum++] = ChrEndS;
;;;2106   //					}
;;;2107   //					break;
;;;2108   //				}break;
;;;2109   //				case 17:
;;;2110   //				{
;;;2111   //					pntlen = 2;
;;;2112   //					if(buf[currCharNum]=='?')
;;;2113   //					{
;;;2114   ////						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;2115   //									sprintf(&buf[currCharNum],"%02d",(int)temperature);
;;;2116   //						currCharNum+=pntlen;
;;;2117   //						buf[currCharNum++ ] = ChrEndR;
;;;2118   //						buf[currCharNum++ ] = ChrEndS;
;;;2119   //					}
;;;2120   //				}break;
;;;2121   			default:    //ERR
;;;2122              		 return SetErr_ACK(buf, addr ,CMD_ERR);
;;;2123   	 			  
;;;2124   		  }
;;;2125   		  break;
;;;2126   		}
;;;2127   		
;;;2128   	}
;;;2129   	if(j>=CmdNumb)
;;;2130   	{
;;;2131   		return SetErr_ACK(buf, addr ,CMD_ERR);			  
0002ce  4628              MOV      r0,r5
0002d0  9932              LDR      r1,[sp,#0xc8]
0002d2  f7fffffe          BL       SetErr_ACK
;;;2132   	}
;;;2133   	return currCharNum+1;
;;;2134   }
0002d6  b033              ADD      sp,sp,#0xcc
0002d8  e8bd8ff0          POP      {r4-r11,pc}
                  |L10.732|
0002dc  f7fffffe          BL       __2sprintf
0002e0  1c64              ADDS     r4,r4,#1              ;1231
0002e2  e3ed              B        |L10.2752|
                  |L10.740|
0002e4  4955              LDR      r1,|L10.1084|
0002e6  3958              SUBS     r1,r1,#0x58           ;1281
0002e8  7188              STRB     r0,[r1,#6]            ;1281
0002ea  7988              LDRB     r0,[r1,#6]            ;1286  ; mainswitch
0002ec  f7fffffe          BL       MODE_ONOFF
0002f0  e3e7              B        |L10.2754|
                  |L10.754|
0002f2  5d29              LDRB     r1,[r5,r4]            ;1293
0002f4  293f              CMP      r1,#0x3f              ;1293
0002f6  d0cf              BEQ      |L10.664|
0002f8  2c0b              CMP      r4,#0xb               ;1302
0002fa  d10d              BNE      |L10.792|
0002fc  2000              MOVS     r0,#0                 ;1304
0002fe  4607              MOV      r7,r0                 ;1304
                  |L10.768|
000300  5d2a              LDRB     r2,[r5,r4]            ;1306
000302  eb070187          ADD      r1,r7,r7,LSL #2       ;1306
000306  eb060141          ADD      r1,r6,r1,LSL #1       ;1306
00030a  1c64              ADDS     r4,r4,#1              ;1306
00030c  1c40              ADDS     r0,r0,#1              ;1306
00030e  1857              ADDS     r7,r2,r1              ;1306
000310  b2c0              UXTB     r0,r0                 ;1304
000312  b2a4              UXTH     r4,r4                 ;1306
000314  2806              CMP      r0,#6                 ;1304
000316  d3f3              BCC      |L10.768|
                  |L10.792|
000318  4658              MOV      r0,r11                ;1309
00031a  f8cb7044          STR      r7,[r11,#0x44]        ;1309  ; Para
00031e  5d2b              LDRB     r3,[r5,r4]            ;1312
000320  1c64              ADDS     r4,r4,#1              ;1312
000322  2200              MOVS     r2,#0                 ;1310
000324  b2a1              UXTH     r1,r4                 ;1312
000326  2b2c              CMP      r3,#0x2c              ;1312
000328  d10c              BNE      |L10.836|
00032a  2300              MOVS     r3,#0                 ;1314
                  |L10.812|
00032c  5c6c              LDRB     r4,[r5,r1]            ;1316
00032e  eb020282          ADD      r2,r2,r2,LSL #2       ;1316
000332  1c49              ADDS     r1,r1,#1              ;1316
000334  1c5b              ADDS     r3,r3,#1              ;1316
000336  eb060242          ADD      r2,r6,r2,LSL #1       ;1316
00033a  b2db              UXTB     r3,r3                 ;1314
00033c  4422              ADD      r2,r2,r4              ;1316
00033e  b289              UXTH     r1,r1                 ;1316
000340  2b05              CMP      r3,#5                 ;1314
000342  d3f3              BCC      |L10.812|
                  |L10.836|
000344  f8a02048          STRH     r2,[r0,#0x48]         ;1319
000348  5c6a              LDRB     r2,[r5,r1]            ;1322
00034a  1c49              ADDS     r1,r1,#1              ;1322
00034c  2300              MOVS     r3,#0                 ;1320
00034e  b289              UXTH     r1,r1                 ;1322
000350  2a2c              CMP      r2,#0x2c              ;1322
000352  d10c              BNE      |L10.878|
000354  2200              MOVS     r2,#0                 ;1324
                  |L10.854|
000356  5c6c              LDRB     r4,[r5,r1]            ;1326
000358  eb030383          ADD      r3,r3,r3,LSL #2       ;1326
00035c  1c49              ADDS     r1,r1,#1              ;1326
00035e  1c52              ADDS     r2,r2,#1              ;1326
000360  eb060343          ADD      r3,r6,r3,LSL #1       ;1326
000364  b2d2              UXTB     r2,r2                 ;1324
000366  4423              ADD      r3,r3,r4              ;1326
000368  b289              UXTH     r1,r1                 ;1326
00036a  2a05              CMP      r2,#5                 ;1324
00036c  d3f3              BCC      |L10.854|
                  |L10.878|
00036e  64c3              STR      r3,[r0,#0x4c]         ;1329  ; Para
000370  5c6b              LDRB     r3,[r5,r1]            ;1332
000372  1c49              ADDS     r1,r1,#1              ;1332
000374  2200              MOVS     r2,#0                 ;1330
000376  b289              UXTH     r1,r1                 ;1332
000378  2b2c              CMP      r3,#0x2c              ;1332
00037a  d10c              BNE      |L10.918|
00037c  2300              MOVS     r3,#0                 ;1334
                  |L10.894|
00037e  5c6c              LDRB     r4,[r5,r1]            ;1336
000380  eb020282          ADD      r2,r2,r2,LSL #2       ;1336
000384  1c49              ADDS     r1,r1,#1              ;1336
000386  1c5b              ADDS     r3,r3,#1              ;1336
000388  eb060242          ADD      r2,r6,r2,LSL #1       ;1336
00038c  b2db              UXTB     r3,r3                 ;1334
00038e  4422              ADD      r2,r2,r4              ;1336
000390  b289              UXTH     r1,r1                 ;1336
000392  2b03              CMP      r3,#3                 ;1334
000394  d3f3              BCC      |L10.894|
                  |L10.918|
000396  e000              B        |L10.922|
                  |L10.920|
000398  e216              B        |L10.1992|
                  |L10.922|
00039a  f8a02050          STRH     r2,[r0,#0x50]         ;1339
00039e  5c6a              LDRB     r2,[r5,r1]            ;1342
0003a0  1c49              ADDS     r1,r1,#1              ;1342
0003a2  2300              MOVS     r3,#0                 ;1340
0003a4  b289              UXTH     r1,r1                 ;1342
0003a6  2a2c              CMP      r2,#0x2c              ;1342
0003a8  d10c              BNE      |L10.964|
0003aa  2200              MOVS     r2,#0                 ;1344
                  |L10.940|
0003ac  5c6c              LDRB     r4,[r5,r1]            ;1346
0003ae  eb030383          ADD      r3,r3,r3,LSL #2       ;1346
0003b2  1c49              ADDS     r1,r1,#1              ;1346
0003b4  1c52              ADDS     r2,r2,#1              ;1346
0003b6  eb060343          ADD      r3,r6,r3,LSL #1       ;1346
0003ba  b2d2              UXTB     r2,r2                 ;1344
0003bc  4423              ADD      r3,r3,r4              ;1346
0003be  b289              UXTH     r1,r1                 ;1346
0003c0  2a06              CMP      r2,#6                 ;1344
0003c2  d3f3              BCC      |L10.940|
                  |L10.964|
0003c4  6543              STR      r3,[r0,#0x54]         ;1349  ; Para
0003c6  5c6b              LDRB     r3,[r5,r1]            ;1352
0003c8  1c49              ADDS     r1,r1,#1              ;1352
0003ca  2200              MOVS     r2,#0                 ;1350
0003cc  b289              UXTH     r1,r1                 ;1352
0003ce  2b2c              CMP      r3,#0x2c              ;1352
0003d0  d10c              BNE      |L10.1004|
0003d2  2300              MOVS     r3,#0                 ;1354
                  |L10.980|
0003d4  5c6c              LDRB     r4,[r5,r1]            ;1356
0003d6  eb020282          ADD      r2,r2,r2,LSL #2       ;1356
0003da  1c49              ADDS     r1,r1,#1              ;1356
0003dc  1c5b              ADDS     r3,r3,#1              ;1356
0003de  eb060242          ADD      r2,r6,r2,LSL #1       ;1356
0003e2  b2db              UXTB     r3,r3                 ;1354
0003e4  4422              ADD      r2,r2,r4              ;1356
0003e6  b289              UXTH     r1,r1                 ;1356
0003e8  2b05              CMP      r3,#5                 ;1354
0003ea  d3f3              BCC      |L10.980|
                  |L10.1004|
0003ec  f8a02058          STRH     r2,[r0,#0x58]         ;1359
0003f0  5c6b              LDRB     r3,[r5,r1]            ;1362
0003f2  1c49              ADDS     r1,r1,#1              ;1362
0003f4  2200              MOVS     r2,#0                 ;1360
0003f6  b289              UXTH     r1,r1                 ;1362
0003f8  2b2c              CMP      r3,#0x2c              ;1362
0003fa  d10c              BNE      |L10.1046|
0003fc  2300              MOVS     r3,#0                 ;1364
                  |L10.1022|
0003fe  5c6c              LDRB     r4,[r5,r1]            ;1366
000400  eb020282          ADD      r2,r2,r2,LSL #2       ;1366
000404  1c49              ADDS     r1,r1,#1              ;1366
000406  1c5b              ADDS     r3,r3,#1              ;1366
000408  eb060242          ADD      r2,r6,r2,LSL #1       ;1366
00040c  b2db              UXTB     r3,r3                 ;1364
00040e  4422              ADD      r2,r2,r4              ;1366
000410  b289              UXTH     r1,r1                 ;1366
000412  2b05              CMP      r3,#5                 ;1364
000414  d3f3              BCC      |L10.1022|
                  |L10.1046|
000416  f8a0205a          STRH     r2,[r0,#0x5a]         ;1369
00041a  5c6a              LDRB     r2,[r5,r1]            ;1372
00041c  1c49              ADDS     r1,r1,#1              ;1372
00041e  2300              MOVS     r3,#0                 ;1370
000420  b289              UXTH     r1,r1                 ;1372
000422  2a2c              CMP      r2,#0x2c              ;1372
000424  d13b              BNE      |L10.1182|
000426  2200              MOVS     r2,#0                 ;1374
                  |L10.1064|
000428  eb030383          ADD      r3,r3,r3,LSL #2       ;1376
00042c  5c6c              LDRB     r4,[r5,r1]            ;1376
00042e  eb060343          ADD      r3,r6,r3,LSL #1       ;1376
000432  e02d              B        |L10.1168|
                  |L10.1076|
000434  256400            DCB      "%d",0
000437  00                DCB      0
                  |L10.1080|
000438  2f00              DCB      "/",0
00043a  00                DCB      0
00043b  00                DCB      0
                  |L10.1084|
                          DCD      ||.data||+0x58
                  |L10.1088|
                          DCD      C_DISCHARGE
                  |L10.1092|
                          DCD      Para
                  |L10.1096|
000448  25303664          DCB      "%06d",0
00044c  00      
00044d  00                DCB      0
00044e  00                DCB      0
00044f  00                DCB      0
                  |L10.1104|
000450  25303564          DCB      "%05d",0
000454  00      
000455  00                DCB      0
000456  00                DCB      0
000457  00                DCB      0
                  |L10.1112|
000458  25303464          DCB      "%04d",0
00045c  00      
00045d  00                DCB      0
00045e  00                DCB      0
00045f  00                DCB      0
                  |L10.1120|
                          DCD      max_discahrgeNum
                  |L10.1124|
000464  447a0000          DCFS     0x447a0000 ; 1000
                  |L10.1128|
                          DCD      shorttime
                  |L10.1132|
00046c  25303364          DCB      "%03d",0
000470  00      
000471  00                DCB      0
000472  00                DCB      0
000473  00                DCB      0
                  |L10.1140|
000474  25316400          DCB      "%1d",0
                  |L10.1144|
                          DCD      finishflag
                  |L10.1148|
                          DCD      lockflag
                  |L10.1152|
                          DCD      version
                  |L10.1156|
000484  25326400          DCB      "%2d",0
                  |L10.1160|
                          DCD      Temperature
                  |L10.1164|
                          DCD      overflag
                  |L10.1168|
000490  1c49              ADDS     r1,r1,#1              ;1376
000492  1c52              ADDS     r2,r2,#1              ;1376
000494  b2d2              UXTB     r2,r2                 ;1374
000496  4423              ADD      r3,r3,r4              ;1374
000498  b289              UXTH     r1,r1                 ;1376
00049a  2a06              CMP      r2,#6                 ;1374
00049c  d3c4              BCC      |L10.1064|
                  |L10.1182|
00049e  6603              STR      r3,[r0,#0x60]         ;1379  ; Para
0004a0  5c6a              LDRB     r2,[r5,r1]            ;1382
0004a2  1c49              ADDS     r1,r1,#1              ;1382
0004a4  2300              MOVS     r3,#0                 ;1380
0004a6  b289              UXTH     r1,r1                 ;1382
0004a8  2a2c              CMP      r2,#0x2c              ;1382
0004aa  d10c              BNE      |L10.1222|
0004ac  2200              MOVS     r2,#0                 ;1384
                  |L10.1198|
0004ae  5c6c              LDRB     r4,[r5,r1]            ;1386
0004b0  eb030383          ADD      r3,r3,r3,LSL #2       ;1386
0004b4  1c49              ADDS     r1,r1,#1              ;1386
0004b6  1c52              ADDS     r2,r2,#1              ;1386
0004b8  eb060343          ADD      r3,r6,r3,LSL #1       ;1386
0004bc  b2d2              UXTB     r2,r2                 ;1384
0004be  4423              ADD      r3,r3,r4              ;1386
0004c0  b289              UXTH     r1,r1                 ;1386
0004c2  2a06              CMP      r2,#6                 ;1384
0004c4  d3f3              BCC      |L10.1198|
                  |L10.1222|
0004c6  65c3              STR      r3,[r0,#0x5c]         ;1389  ; Para
0004c8  5c6b              LDRB     r3,[r5,r1]            ;1392
0004ca  1c49              ADDS     r1,r1,#1              ;1392
0004cc  2200              MOVS     r2,#0                 ;1390
0004ce  b289              UXTH     r1,r1                 ;1392
0004d0  2b2c              CMP      r3,#0x2c              ;1392
0004d2  d10c              BNE      |L10.1262|
0004d4  2300              MOVS     r3,#0                 ;1394
                  |L10.1238|
0004d6  5c6c              LDRB     r4,[r5,r1]            ;1396
0004d8  eb020282          ADD      r2,r2,r2,LSL #2       ;1396
0004dc  1c49              ADDS     r1,r1,#1              ;1396
0004de  1c5b              ADDS     r3,r3,#1              ;1396
0004e0  eb060242          ADD      r2,r6,r2,LSL #1       ;1396
0004e4  b2db              UXTB     r3,r3                 ;1394
0004e6  4422              ADD      r2,r2,r4              ;1396
0004e8  b289              UXTH     r1,r1                 ;1396
0004ea  2b06              CMP      r3,#6                 ;1394
0004ec  d3f3              BCC      |L10.1238|
                  |L10.1262|
0004ee  f8a02068          STRH     r2,[r0,#0x68]         ;1399
0004f2  5c6a              LDRB     r2,[r5,r1]            ;1402
0004f4  1c49              ADDS     r1,r1,#1              ;1402
0004f6  2300              MOVS     r3,#0                 ;1400
0004f8  b289              UXTH     r1,r1                 ;1402
0004fa  2a2c              CMP      r2,#0x2c              ;1402
0004fc  d10c              BNE      |L10.1304|
0004fe  2200              MOVS     r2,#0                 ;1404
                  |L10.1280|
000500  5c6c              LDRB     r4,[r5,r1]            ;1406
000502  eb030383          ADD      r3,r3,r3,LSL #2       ;1406
000506  1c49              ADDS     r1,r1,#1              ;1406
000508  1c52              ADDS     r2,r2,#1              ;1406
00050a  eb060343          ADD      r3,r6,r3,LSL #1       ;1406
00050e  b2d2              UXTB     r2,r2                 ;1404
000510  4423              ADD      r3,r3,r4              ;1406
000512  b289              UXTH     r1,r1                 ;1406
000514  2a05              CMP      r2,#5                 ;1404
000516  d3f3              BCC      |L10.1280|
                  |L10.1304|
000518  66c3              STR      r3,[r0,#0x6c]         ;1409  ; Para
00051a  5c6b              LDRB     r3,[r5,r1]            ;1412
00051c  1c49              ADDS     r1,r1,#1              ;1412
00051e  2200              MOVS     r2,#0                 ;1410
000520  b289              UXTH     r1,r1                 ;1412
000522  2b2c              CMP      r3,#0x2c              ;1412
000524  d10c              BNE      |L10.1344|
000526  2300              MOVS     r3,#0                 ;1414
                  |L10.1320|
000528  5c6c              LDRB     r4,[r5,r1]            ;1416
00052a  eb020282          ADD      r2,r2,r2,LSL #2       ;1416
00052e  1c49              ADDS     r1,r1,#1              ;1416
000530  1c5b              ADDS     r3,r3,#1              ;1416
000532  eb060242          ADD      r2,r6,r2,LSL #1       ;1416
000536  b2db              UXTB     r3,r3                 ;1414
000538  4422              ADD      r2,r2,r4              ;1416
00053a  b289              UXTH     r1,r1                 ;1416
00053c  2b05              CMP      r3,#5                 ;1414
00053e  d3f3              BCC      |L10.1320|
                  |L10.1344|
000540  f8a02070          STRH     r2,[r0,#0x70]         ;1419
000544  5c6a              LDRB     r2,[r5,r1]            ;1422
000546  1c49              ADDS     r1,r1,#1              ;1422
000548  2300              MOVS     r3,#0                 ;1420
00054a  b289              UXTH     r1,r1                 ;1422
00054c  2a2c              CMP      r2,#0x2c              ;1422
00054e  d10c              BNE      |L10.1386|
000550  2200              MOVS     r2,#0                 ;1424
                  |L10.1362|
000552  5c6c              LDRB     r4,[r5,r1]            ;1426
000554  eb030383          ADD      r3,r3,r3,LSL #2       ;1426
000558  1c49              ADDS     r1,r1,#1              ;1426
00055a  1c52              ADDS     r2,r2,#1              ;1426
00055c  eb060343          ADD      r3,r6,r3,LSL #1       ;1426
000560  b2d2              UXTB     r2,r2                 ;1424
000562  4423              ADD      r3,r3,r4              ;1426
000564  b289              UXTH     r1,r1                 ;1426
000566  2a05              CMP      r2,#5                 ;1424
000568  d3f3              BCC      |L10.1362|
                  |L10.1386|
00056a  6743              STR      r3,[r0,#0x74]         ;1429  ; Para
00056c  5c6b              LDRB     r3,[r5,r1]            ;1432
00056e  1c49              ADDS     r1,r1,#1              ;1432
000570  2200              MOVS     r2,#0                 ;1430
000572  b289              UXTH     r1,r1                 ;1432
000574  2b2c              CMP      r3,#0x2c              ;1432
000576  d10c              BNE      |L10.1426|
000578  2300              MOVS     r3,#0                 ;1434
                  |L10.1402|
00057a  5c6c              LDRB     r4,[r5,r1]            ;1436
00057c  eb020282          ADD      r2,r2,r2,LSL #2       ;1436
000580  1c49              ADDS     r1,r1,#1              ;1436
000582  1c5b              ADDS     r3,r3,#1              ;1436
000584  eb060242          ADD      r2,r6,r2,LSL #1       ;1436
000588  b2db              UXTB     r3,r3                 ;1434
00058a  4422              ADD      r2,r2,r4              ;1436
00058c  b289              UXTH     r1,r1                 ;1436
00058e  2b05              CMP      r3,#5                 ;1434
000590  d3f3              BCC      |L10.1402|
                  |L10.1426|
000592  f8a02078          STRH     r2,[r0,#0x78]         ;1439
000596  5c6a              LDRB     r2,[r5,r1]            ;1442
000598  1c49              ADDS     r1,r1,#1              ;1442
00059a  2300              MOVS     r3,#0                 ;1440
00059c  b289              UXTH     r1,r1                 ;1442
00059e  2a2c              CMP      r2,#0x2c              ;1442
0005a0  d10c              BNE      |L10.1468|
0005a2  2200              MOVS     r2,#0                 ;1444
                  |L10.1444|
0005a4  5c6c              LDRB     r4,[r5,r1]            ;1446
0005a6  eb030383          ADD      r3,r3,r3,LSL #2       ;1446
0005aa  1c49              ADDS     r1,r1,#1              ;1446
0005ac  1c52              ADDS     r2,r2,#1              ;1446
0005ae  eb060343          ADD      r3,r6,r3,LSL #1       ;1446
0005b2  b2d2              UXTB     r2,r2                 ;1444
0005b4  4423              ADD      r3,r3,r4              ;1446
0005b6  b289              UXTH     r1,r1                 ;1446
0005b8  2a05              CMP      r2,#5                 ;1444
0005ba  d3f3              BCC      |L10.1444|
                  |L10.1468|
0005bc  67c3              STR      r3,[r0,#0x7c]         ;1449  ; Para
0005be  5c6a              LDRB     r2,[r5,r1]            ;1452
0005c0  1c49              ADDS     r1,r1,#1              ;1452
0005c2  2300              MOVS     r3,#0                 ;1450
0005c4  b289              UXTH     r1,r1                 ;1452
0005c6  2a2c              CMP      r2,#0x2c              ;1452
0005c8  d10c              BNE      |L10.1508|
0005ca  2200              MOVS     r2,#0                 ;1454
                  |L10.1484|
0005cc  5c6c              LDRB     r4,[r5,r1]            ;1456
0005ce  eb030383          ADD      r3,r3,r3,LSL #2       ;1456
0005d2  1c49              ADDS     r1,r1,#1              ;1456
0005d4  1c52              ADDS     r2,r2,#1              ;1456
0005d6  eb060343          ADD      r3,r6,r3,LSL #1       ;1456
0005da  b2d2              UXTB     r2,r2                 ;1454
0005dc  4423              ADD      r3,r3,r4              ;1456
0005de  b289              UXTH     r1,r1                 ;1456
0005e0  2a05              CMP      r2,#5                 ;1454
0005e2  d3f3              BCC      |L10.1484|
                  |L10.1508|
0005e4  f8c03080          STR      r3,[r0,#0x80]         ;1459  ; Para
0005e8  5c6b              LDRB     r3,[r5,r1]            ;1462
0005ea  1c49              ADDS     r1,r1,#1              ;1462
0005ec  2200              MOVS     r2,#0                 ;1460
0005ee  b289              UXTH     r1,r1                 ;1462
0005f0  2b2c              CMP      r3,#0x2c              ;1462
0005f2  d10c              BNE      |L10.1550|
0005f4  2300              MOVS     r3,#0                 ;1464
                  |L10.1526|
0005f6  5c6c              LDRB     r4,[r5,r1]            ;1466
0005f8  eb020282          ADD      r2,r2,r2,LSL #2       ;1466
0005fc  1c49              ADDS     r1,r1,#1              ;1466
0005fe  1c5b              ADDS     r3,r3,#1              ;1466
000600  eb060242          ADD      r2,r6,r2,LSL #1       ;1466
000604  b2db              UXTB     r3,r3                 ;1464
000606  4422              ADD      r2,r2,r4              ;1466
000608  b289              UXTH     r1,r1                 ;1466
00060a  2b03              CMP      r3,#3                 ;1464
00060c  d3f3              BCC      |L10.1526|
                  |L10.1550|
00060e  f8802084          STRB     r2,[r0,#0x84]         ;1469
000612  5c6a              LDRB     r2,[r5,r1]            ;1472
000614  1c49              ADDS     r1,r1,#1              ;1472
000616  2300              MOVS     r3,#0                 ;1470
000618  b289              UXTH     r1,r1                 ;1472
00061a  2a2c              CMP      r2,#0x2c              ;1472
00061c  d10c              BNE      |L10.1592|
00061e  2200              MOVS     r2,#0                 ;1474
                  |L10.1568|
000620  5c6c              LDRB     r4,[r5,r1]            ;1476
000622  eb030383          ADD      r3,r3,r3,LSL #2       ;1476
000626  1c49              ADDS     r1,r1,#1              ;1476
000628  1c52              ADDS     r2,r2,#1              ;1476
00062a  eb060343          ADD      r3,r6,r3,LSL #1       ;1476
00062e  b2d2              UXTB     r2,r2                 ;1474
000630  4423              ADD      r3,r3,r4              ;1476
000632  b289              UXTH     r1,r1                 ;1476
000634  2a03              CMP      r2,#3                 ;1474
000636  d3f3              BCC      |L10.1568|
                  |L10.1592|
000638  4af7              LDR      r2,|L10.2584|
00063a  7954              LDRB     r4,[r2,#5]            ;1479  ; MODE
00063c  b904              CBNZ     r4,|L10.1600|
00063e  6183              STR      r3,[r0,#0x18]         ;1481  ; Para
                  |L10.1600|
000640  5c6c              LDRB     r4,[r5,r1]            ;1486
000642  1c49              ADDS     r1,r1,#1              ;1486
000644  2300              MOVS     r3,#0                 ;1483
000646  b289              UXTH     r1,r1                 ;1486
000648  2c2c              CMP      r4,#0x2c              ;1486
00064a  d10c              BNE      |L10.1638|
00064c  2400              MOVS     r4,#0                 ;1488
                  |L10.1614|
00064e  5c6f              LDRB     r7,[r5,r1]            ;1490
000650  eb030383          ADD      r3,r3,r3,LSL #2       ;1490
000654  1c49              ADDS     r1,r1,#1              ;1490
000656  1c64              ADDS     r4,r4,#1              ;1490
000658  eb060343          ADD      r3,r6,r3,LSL #1       ;1490
00065c  b2e4              UXTB     r4,r4                 ;1488
00065e  443b              ADD      r3,r3,r7              ;1490
000660  b289              UXTH     r1,r1                 ;1490
000662  2c03              CMP      r4,#3                 ;1488
000664  d3f3              BCC      |L10.1614|
                  |L10.1638|
000666  71d3              STRB     r3,[r2,#7]            ;1493
000668  5c6c              LDRB     r4,[r5,r1]            ;1496
00066a  1c49              ADDS     r1,r1,#1              ;1496
00066c  2300              MOVS     r3,#0                 ;1494
00066e  b289              UXTH     r1,r1                 ;1496
000670  2c2c              CMP      r4,#0x2c              ;1496
000672  d10c              BNE      |L10.1678|
000674  2400              MOVS     r4,#0                 ;1498
                  |L10.1654|
000676  5c6f              LDRB     r7,[r5,r1]            ;1500
000678  eb030383          ADD      r3,r3,r3,LSL #2       ;1500
00067c  1c49              ADDS     r1,r1,#1              ;1500
00067e  1c64              ADDS     r4,r4,#1              ;1500
000680  eb060343          ADD      r3,r6,r3,LSL #1       ;1500
000684  b2e4              UXTB     r4,r4                 ;1498
000686  443b              ADD      r3,r3,r7              ;1500
000688  b289              UXTH     r1,r1                 ;1500
00068a  2c03              CMP      r4,#3                 ;1498
00068c  d3f3              BCC      |L10.1654|
                  |L10.1678|
00068e  f8803052          STRB     r3,[r0,#0x52]         ;1503
000692  5c6f              LDRB     r7,[r5,r1]            ;1506
000694  1c49              ADDS     r1,r1,#1              ;1506
000696  2300              MOVS     r3,#0                 ;1504
000698  b28c              UXTH     r4,r1                 ;1506
00069a  2f2c              CMP      r7,#0x2c              ;1506
00069c  d10c              BNE      |L10.1720|
00069e  2100              MOVS     r1,#0                 ;1508
                  |L10.1696|
0006a0  5d2f              LDRB     r7,[r5,r4]            ;1510
0006a2  eb030383          ADD      r3,r3,r3,LSL #2       ;1510
0006a6  1c64              ADDS     r4,r4,#1              ;1510
0006a8  1c49              ADDS     r1,r1,#1              ;1510
0006aa  eb060343          ADD      r3,r6,r3,LSL #1       ;1510
0006ae  b2c9              UXTB     r1,r1                 ;1508
0006b0  443b              ADD      r3,r3,r7              ;1510
0006b2  b2a4              UXTH     r4,r4                 ;1510
0006b4  2906              CMP      r1,#6                 ;1508
0006b6  d3f3              BCC      |L10.1696|
                  |L10.1720|
0006b8  eb030183          ADD      r1,r3,r3,LSL #2       ;1513
0006bc  0049              LSLS     r1,r1,#1              ;1513
0006be  6641              STR      r1,[r0,#0x64]         ;1513  ; Para
0006c0  7950              LDRB     r0,[r2,#5]            ;1516  ; MODE
                  |L10.1730|
0006c2  f7fffffe          BL       MODE_PARASET
0006c6  e38b              B        |L10.3552|
                  |L10.1736|
0006c8  5d29              LDRB     r1,[r5,r4]            ;1523
0006ca  293f              CMP      r1,#0x3f              ;1523
0006cc  d07c              BEQ      |L10.1992|
0006ce  2c0b              CMP      r4,#0xb               ;1532
0006d0  d10d              BNE      |L10.1774|
0006d2  2000              MOVS     r0,#0                 ;1534
0006d4  4607              MOV      r7,r0                 ;1534
                  |L10.1750|
0006d6  5d29              LDRB     r1,[r5,r4]            ;1536
0006d8  eb070287          ADD      r2,r7,r7,LSL #2       ;1536
0006dc  eb060242          ADD      r2,r6,r2,LSL #1       ;1536
0006e0  1c64              ADDS     r4,r4,#1              ;1536
0006e2  1c40              ADDS     r0,r0,#1              ;1536
0006e4  188f              ADDS     r7,r1,r2              ;1536
0006e6  b2c0              UXTB     r0,r0                 ;1534
0006e8  b2a4              UXTH     r4,r4                 ;1536
0006ea  2802              CMP      r0,#2                 ;1534
0006ec  d3f3              BCC      |L10.1750|
                  |L10.1774|
0006ee  f8df9328          LDR      r9,|L10.2584|
0006f2  f8897005          STRB     r7,[r9,#5]            ;1539
0006f6  f8990005          LDRB     r0,[r9,#5]            ;1542  ; MODE
0006fa  2700              MOVS     r7,#0                 ;1540
0006fc  f8df831c          LDR      r8,|L10.2588|
000700  f6432198          MOV      r1,#0x3a98            ;1565
000704  b1b8              CBZ      r0,|L10.1846|
000706  f8990005          LDRB     r0,[r9,#5]            ;1586  ; MODE
00070a  464a              MOV      r2,r9                 ;1586
00070c  2801              CMP      r0,#1                 ;1586
00070e  d05c              BEQ      |L10.1994|
000710  7950              LDRB     r0,[r2,#5]            ;1615  ; MODE
000712  2802              CMP      r0,#2                 ;1615
000714  d07e              BEQ      |L10.2068|
000716  f8990005          LDRB     r0,[r9,#5]            ;1651  ; MODE
00071a  2803              CMP      r0,#3                 ;1651
00071c  d07b              BEQ      |L10.2070|
00071e  7950              LDRB     r0,[r2,#5]            ;1683  ; MODE
000720  2804              CMP      r0,#4                 ;1683
000722  d079              BEQ      |L10.2072|
000724  f8991005          LDRB     r1,[r9,#5]            ;1726  ; MODE
000728  4648              MOV      r0,r9                 ;1726
00072a  2905              CMP      r1,#5                 ;1726
00072c  d075              BEQ      |L10.2074|
00072e  7941              LDRB     r1,[r0,#5]            ;1757  ; MODE
000730  2906              CMP      r1,#6                 ;1757
000732  d073              BEQ      |L10.2076|
000734  e1e0              B        |L10.2808|
                  |L10.1846|
000736  5d2a              LDRB     r2,[r5,r4]            ;1544
000738  1c64              ADDS     r4,r4,#1              ;1544
00073a  b2a0              UXTH     r0,r4                 ;1544
00073c  2a2c              CMP      r2,#0x2c              ;1544
00073e  d106              BNE      |L10.1870|
000740  2200              MOVS     r2,#0                 ;1546
                  |L10.1858|
000742  1c40              ADDS     r0,r0,#1              ;1546
000744  1c52              ADDS     r2,r2,#1              ;1548
000746  b2d2              UXTB     r2,r2                 ;1546
000748  b280              UXTH     r0,r0                 ;1548
00074a  2a06              CMP      r2,#6                 ;1546
00074c  d3f9              BCC      |L10.1858|
                  |L10.1870|
00074e  5c2b              LDRB     r3,[r5,r0]            ;1554
000750  1c40              ADDS     r0,r0,#1              ;1554
000752  2200              MOVS     r2,#0                 ;1552
000754  b284              UXTH     r4,r0                 ;1554
000756  2b2c              CMP      r3,#0x2c              ;1554
000758  d10c              BNE      |L10.1908|
00075a  2000              MOVS     r0,#0                 ;1556
                  |L10.1884|
00075c  5d2b              LDRB     r3,[r5,r4]            ;1558
00075e  eb020282          ADD      r2,r2,r2,LSL #2       ;1558
000762  1c64              ADDS     r4,r4,#1              ;1558
000764  1c40              ADDS     r0,r0,#1              ;1558
000766  eb060242          ADD      r2,r6,r2,LSL #1       ;1558
00076a  b2c0              UXTB     r0,r0                 ;1556
00076c  441a              ADD      r2,r2,r3              ;1558
00076e  b2a4              UXTH     r4,r4                 ;1558
000770  2806              CMP      r0,#6                 ;1556
000772  d3f3              BCC      |L10.1884|
                  |L10.1908|
000774  f8cb2014          STR      r2,[r11,#0x14]        ;1561  ; Para
000778  f8db0014          LDR      r0,[r11,#0x14]        ;1565  ; Para
00077c  2700              MOVS     r7,#0                 ;1562
00077e  4288              CMP      r0,r1                 ;1565
000780  d907              BLS      |L10.1938|
000782  2001              MOVS     r0,#1                 ;1567
000784  f8c80020          STR      r0,[r8,#0x20]         ;1567  ; Run_Control
000788  02c1              LSLS     r1,r0,#11             ;1568
00078a  48a5              LDR      r0,|L10.2592|
00078c  f7fffffe          BL       GPIO_ResetBits
000790  e007              B        |L10.1954|
                  |L10.1938|
000792  2000              MOVS     r0,#0                 ;1570
000794  f8c80020          STR      r0,[r8,#0x20]         ;1570  ; Run_Control
000798  f44f6100          MOV      r1,#0x800             ;1571
00079c  48a0              LDR      r0,|L10.2592|
00079e  f7fffffe          BL       GPIO_SetBits
                  |L10.1954|
0007a2  5d28              LDRB     r0,[r5,r4]            ;1573
0007a4  1c64              ADDS     r4,r4,#1              ;1573
0007a6  b2a4              UXTH     r4,r4                 ;1573
0007a8  282c              CMP      r0,#0x2c              ;1573
0007aa  d10c              BNE      |L10.1990|
0007ac  2000              MOVS     r0,#0                 ;1575
                  |L10.1966|
0007ae  5d29              LDRB     r1,[r5,r4]            ;1577
0007b0  eb070287          ADD      r2,r7,r7,LSL #2       ;1577
0007b4  eb060242          ADD      r2,r6,r2,LSL #1       ;1577
0007b8  1c64              ADDS     r4,r4,#1              ;1577
0007ba  188f              ADDS     r7,r1,r2              ;1577
0007bc  1c40              ADDS     r0,r0,#1              ;1577
0007be  b2a4              UXTH     r4,r4                 ;1577
0007c0  f01000ff          ANDS     r0,r0,#0xff           ;1575
0007c4  d0f3              BEQ      |L10.1966|
                  |L10.1990|
0007c6  e119              B        |L10.2556|
                  |L10.1992|
0007c8  e21d              B        |L10.3078|
                  |L10.1994|
0007ca  5d29              LDRB     r1,[r5,r4]            ;1587
0007cc  1c64              ADDS     r4,r4,#1              ;1587
0007ce  b2a0              UXTH     r0,r4                 ;1587
0007d0  292c              CMP      r1,#0x2c              ;1587
0007d2  d10c              BNE      |L10.2030|
0007d4  2100              MOVS     r1,#0                 ;1589
                  |L10.2006|
0007d6  5c2b              LDRB     r3,[r5,r0]            ;1591
0007d8  eb070487          ADD      r4,r7,r7,LSL #2       ;1591
0007dc  eb060444          ADD      r4,r6,r4,LSL #1       ;1591
0007e0  1c40              ADDS     r0,r0,#1              ;1591
0007e2  1c49              ADDS     r1,r1,#1              ;1591
0007e4  191f              ADDS     r7,r3,r4              ;1591
0007e6  b2c9              UXTB     r1,r1                 ;1589
0007e8  b280              UXTH     r0,r0                 ;1591
0007ea  2906              CMP      r1,#6                 ;1589
0007ec  d3f3              BCC      |L10.2006|
                  |L10.2030|
0007ee  465c              MOV      r4,r11                ;1594
0007f0  f8cb706c          STR      r7,[r11,#0x6c]        ;1594  ; Para
0007f4  5c2b              LDRB     r3,[r5,r0]            ;1597
0007f6  1c40              ADDS     r0,r0,#1              ;1597
0007f8  2100              MOVS     r1,#0                 ;1595
0007fa  b280              UXTH     r0,r0                 ;1597
0007fc  2b2c              CMP      r3,#0x2c              ;1597
0007fe  d112              BNE      |L10.2086|
000800  2300              MOVS     r3,#0                 ;1599
                  |L10.2050|
000802  5c2f              LDRB     r7,[r5,r0]            ;1601
000804  eb010181          ADD      r1,r1,r1,LSL #2       ;1601
000808  eb060141          ADD      r1,r6,r1,LSL #1       ;1601
00080c  1c40              ADDS     r0,r0,#1              ;1601
00080e  4439              ADD      r1,r1,r7              ;1601
000810  b280              UXTH     r0,r0                 ;1601
000812  e004              B        |L10.2078|
                  |L10.2068|
000814  e01d              B        |L10.2130|
                  |L10.2070|
000816  e06a              B        |L10.2286|
                  |L10.2072|
000818  e0a8              B        |L10.2412|
                  |L10.2074|
00081a  e105              B        |L10.2600|
                  |L10.2076|
00081c  e137              B        |L10.2702|
                  |L10.2078|
00081e  1c5b              ADDS     r3,r3,#1              ;1601
000820  b2db              UXTB     r3,r3                 ;1599
000822  2b06              CMP      r3,#6                 ;1599
000824  d3ed              BCC      |L10.2050|
                  |L10.2086|
000826  f8a41070          STRH     r1,[r4,#0x70]         ;1604
00082a  5c2b              LDRB     r3,[r5,r0]            ;1607
00082c  1c40              ADDS     r0,r0,#1              ;1607
00082e  2100              MOVS     r1,#0                 ;1605
000830  b284              UXTH     r4,r0                 ;1607
000832  2b2c              CMP      r3,#0x2c              ;1607
000834  d10c              BNE      |L10.2128|
000836  2000              MOVS     r0,#0                 ;1609
                  |L10.2104|
000838  5d2b              LDRB     r3,[r5,r4]            ;1611
00083a  1c64              ADDS     r4,r4,#1              ;1611
00083c  eb010181          ADD      r1,r1,r1,LSL #2       ;1611
000840  eb060141          ADD      r1,r6,r1,LSL #1       ;1611
000844  1c40              ADDS     r0,r0,#1              ;1611
000846  4419              ADD      r1,r1,r3              ;1611
000848  b2a4              UXTH     r4,r4                 ;1611
00084a  f01000ff          ANDS     r0,r0,#0xff           ;1609
00084e  d0f3              BEQ      |L10.2104|
                  |L10.2128|
000850  e08a              B        |L10.2408|
                  |L10.2130|
000852  2001              MOVS     r0,#1                 ;1616
000854  f8c80020          STR      r0,[r8,#0x20]         ;1616  ; Run_Control
000858  02c1              LSLS     r1,r0,#11             ;1617
00085a  4871              LDR      r0,|L10.2592|
00085c  f7fffffe          BL       GPIO_ResetBits
000860  5d29              LDRB     r1,[r5,r4]            ;1618
000862  1c64              ADDS     r4,r4,#1              ;1618
000864  b2a0              UXTH     r0,r4                 ;1618
000866  292c              CMP      r1,#0x2c              ;1618
000868  d10c              BNE      |L10.2180|
00086a  2100              MOVS     r1,#0                 ;1620
                  |L10.2156|
00086c  5c2a              LDRB     r2,[r5,r0]            ;1622
00086e  eb070387          ADD      r3,r7,r7,LSL #2       ;1622
000872  eb060343          ADD      r3,r6,r3,LSL #1       ;1622
000876  1c40              ADDS     r0,r0,#1              ;1622
000878  1c49              ADDS     r1,r1,#1              ;1622
00087a  18d7              ADDS     r7,r2,r3              ;1622
00087c  b2c9              UXTB     r1,r1                 ;1620
00087e  b280              UXTH     r0,r0                 ;1622
000880  2906              CMP      r1,#6                 ;1620
000882  d3f3              BCC      |L10.2156|
                  |L10.2180|
000884  465b              MOV      r3,r11                ;1625
000886  f8cb7044          STR      r7,[r11,#0x44]        ;1625  ; Para
00088a  5c2a              LDRB     r2,[r5,r0]            ;1628
00088c  1c40              ADDS     r0,r0,#1              ;1628
00088e  2100              MOVS     r1,#0                 ;1626
000890  b280              UXTH     r0,r0                 ;1628
000892  2a2c              CMP      r2,#0x2c              ;1628
000894  d10c              BNE      |L10.2224|
000896  2200              MOVS     r2,#0                 ;1630
                  |L10.2200|
000898  5c2c              LDRB     r4,[r5,r0]            ;1632
00089a  eb010181          ADD      r1,r1,r1,LSL #2       ;1632
00089e  1c40              ADDS     r0,r0,#1              ;1632
0008a0  1c52              ADDS     r2,r2,#1              ;1632
0008a2  eb060141          ADD      r1,r6,r1,LSL #1       ;1632
0008a6  b2d2              UXTB     r2,r2                 ;1630
0008a8  4421              ADD      r1,r1,r4              ;1632
0008aa  b280              UXTH     r0,r0                 ;1632
0008ac  2a06              CMP      r2,#6                 ;1630
0008ae  d3f3              BCC      |L10.2200|
                  |L10.2224|
0008b0  f8a31048          STRH     r1,[r3,#0x48]         ;1635
0008b4  5c2a              LDRB     r2,[r5,r0]            ;1638
0008b6  1c40              ADDS     r0,r0,#1              ;1638
0008b8  2100              MOVS     r1,#0                 ;1636
0008ba  b284              UXTH     r4,r0                 ;1638
0008bc  2a2c              CMP      r2,#0x2c              ;1638
0008be  d10c              BNE      |L10.2266|
0008c0  2000              MOVS     r0,#0                 ;1640
                  |L10.2242|
0008c2  5d2a              LDRB     r2,[r5,r4]            ;1642
0008c4  1c64              ADDS     r4,r4,#1              ;1642
0008c6  eb010181          ADD      r1,r1,r1,LSL #2       ;1642
0008ca  eb060141          ADD      r1,r6,r1,LSL #1       ;1642
0008ce  1c40              ADDS     r0,r0,#1              ;1642
0008d0  4411              ADD      r1,r1,r2              ;1642
0008d2  b2a4              UXTH     r4,r4                 ;1642
0008d4  f01000ff          ANDS     r0,r0,#0xff           ;1640
0008d8  d0f3              BEQ      |L10.2242|
                  |L10.2266|
0008da  f8891006          STRB     r1,[r9,#6]            ;1645
0008de  f8990006          LDRB     r0,[r9,#6]            ;1647  ; mainswitch
0008e2  2801              CMP      r0,#1                 ;1647
0008e4  d102              BNE      |L10.2284|
0008e6  494f              LDR      r1,|L10.2596|
0008e8  2000              MOVS     r0,#0                 ;1649
0008ea  7008              STRB     r0,[r1,#0]            ;1649
                  |L10.2284|
0008ec  e104              B        |L10.2808|
                  |L10.2286|
0008ee  5d29              LDRB     r1,[r5,r4]            ;1652
0008f0  1c64              ADDS     r4,r4,#1              ;1652
0008f2  b2a0              UXTH     r0,r4                 ;1652
0008f4  292c              CMP      r1,#0x2c              ;1652
0008f6  d10c              BNE      |L10.2322|
0008f8  2100              MOVS     r1,#0                 ;1654
                  |L10.2298|
0008fa  5c2b              LDRB     r3,[r5,r0]            ;1656
0008fc  eb070487          ADD      r4,r7,r7,LSL #2       ;1656
000900  eb060444          ADD      r4,r6,r4,LSL #1       ;1656
000904  1c40              ADDS     r0,r0,#1              ;1656
000906  1c49              ADDS     r1,r1,#1              ;1656
000908  191f              ADDS     r7,r3,r4              ;1656
00090a  b2c9              UXTB     r1,r1                 ;1654
00090c  b280              UXTH     r0,r0                 ;1656
00090e  2906              CMP      r1,#6                 ;1654
000910  d3f3              BCC      |L10.2298|
                  |L10.2322|
000912  465c              MOV      r4,r11                ;1659
000914  f8cb706c          STR      r7,[r11,#0x6c]        ;1659  ; Para
000918  5c2b              LDRB     r3,[r5,r0]            ;1663
00091a  1c40              ADDS     r0,r0,#1              ;1663
00091c  2100              MOVS     r1,#0                 ;1660
00091e  b280              UXTH     r0,r0                 ;1663
000920  2b2c              CMP      r3,#0x2c              ;1663
000922  d10c              BNE      |L10.2366|
000924  2300              MOVS     r3,#0                 ;1665
                  |L10.2342|
000926  5c2f              LDRB     r7,[r5,r0]            ;1667
000928  eb010181          ADD      r1,r1,r1,LSL #2       ;1667
00092c  1c40              ADDS     r0,r0,#1              ;1667
00092e  1c5b              ADDS     r3,r3,#1              ;1667
000930  eb060141          ADD      r1,r6,r1,LSL #1       ;1667
000934  b2db              UXTB     r3,r3                 ;1665
000936  4439              ADD      r1,r1,r7              ;1667
000938  b280              UXTH     r0,r0                 ;1667
00093a  2b06              CMP      r3,#6                 ;1665
00093c  d3f3              BCC      |L10.2342|
                  |L10.2366|
00093e  f8a41070          STRH     r1,[r4,#0x70]         ;1670
000942  5c2b              LDRB     r3,[r5,r0]            ;1673
000944  1c40              ADDS     r0,r0,#1              ;1673
000946  2100              MOVS     r1,#0                 ;1671
000948  b284              UXTH     r4,r0                 ;1673
00094a  2b2c              CMP      r3,#0x2c              ;1673
00094c  d10c              BNE      |L10.2408|
00094e  2000              MOVS     r0,#0                 ;1675
                  |L10.2384|
000950  5d2b              LDRB     r3,[r5,r4]            ;1677
000952  1c64              ADDS     r4,r4,#1              ;1677
000954  eb010181          ADD      r1,r1,r1,LSL #2       ;1677
000958  eb060141          ADD      r1,r6,r1,LSL #1       ;1677
00095c  1c40              ADDS     r0,r0,#1              ;1677
00095e  4419              ADD      r1,r1,r3              ;1677
000960  b2a4              UXTH     r4,r4                 ;1677
000962  f01000ff          ANDS     r0,r0,#0xff           ;1675
000966  d0f3              BEQ      |L10.2384|
                  |L10.2408|
000968  7191              STRB     r1,[r2,#6]            ;1680
00096a  e0c5              B        |L10.2808|
                  |L10.2412|
00096c  5d2a              LDRB     r2,[r5,r4]            ;1684
00096e  1c64              ADDS     r4,r4,#1              ;1684
000970  b2a0              UXTH     r0,r4                 ;1684
000972  2a2c              CMP      r2,#0x2c              ;1684
000974  d106              BNE      |L10.2436|
000976  2200              MOVS     r2,#0                 ;1686
                  |L10.2424|
000978  1c40              ADDS     r0,r0,#1              ;1686
00097a  1c52              ADDS     r2,r2,#1              ;1688
00097c  b2d2              UXTB     r2,r2                 ;1686
00097e  b280              UXTH     r0,r0                 ;1688
000980  2a06              CMP      r2,#6                 ;1686
000982  d3f9              BCC      |L10.2424|
                  |L10.2436|
000984  5c2b              LDRB     r3,[r5,r0]            ;1694
000986  1c40              ADDS     r0,r0,#1              ;1694
000988  2200              MOVS     r2,#0                 ;1692
00098a  b284              UXTH     r4,r0                 ;1694
00098c  2b2c              CMP      r3,#0x2c              ;1694
00098e  d10c              BNE      |L10.2474|
000990  2000              MOVS     r0,#0                 ;1696
                  |L10.2450|
000992  5d2b              LDRB     r3,[r5,r4]            ;1698
000994  eb020282          ADD      r2,r2,r2,LSL #2       ;1698
000998  1c64              ADDS     r4,r4,#1              ;1698
00099a  1c40              ADDS     r0,r0,#1              ;1698
00099c  eb060242          ADD      r2,r6,r2,LSL #1       ;1698
0009a0  b2c0              UXTB     r0,r0                 ;1696
0009a2  441a              ADD      r2,r2,r3              ;1698
0009a4  b2a4              UXTH     r4,r4                 ;1698
0009a6  2806              CMP      r0,#6                 ;1696
0009a8  d3f3              BCC      |L10.2450|
                  |L10.2474|
0009aa  f8cb2014          STR      r2,[r11,#0x14]        ;1701  ; Para
0009ae  f8db0014          LDR      r0,[r11,#0x14]        ;1705  ; Para
0009b2  2700              MOVS     r7,#0                 ;1702
0009b4  4288              CMP      r0,r1                 ;1705
0009b6  d907              BLS      |L10.2504|
0009b8  2001              MOVS     r0,#1                 ;1707
0009ba  f8c80020          STR      r0,[r8,#0x20]         ;1707  ; Run_Control
0009be  02c1              LSLS     r1,r0,#11             ;1708
0009c0  4817              LDR      r0,|L10.2592|
0009c2  f7fffffe          BL       GPIO_ResetBits
0009c6  e007              B        |L10.2520|
                  |L10.2504|
0009c8  2100              MOVS     r1,#0                 ;1710
0009ca  f8c81020          STR      r1,[r8,#0x20]         ;1710  ; Run_Control
0009ce  f44f6100          MOV      r1,#0x800             ;1711
0009d2  4813              LDR      r0,|L10.2592|
0009d4  f7fffffe          BL       GPIO_SetBits
                  |L10.2520|
0009d8  5d28              LDRB     r0,[r5,r4]            ;1713
0009da  1c64              ADDS     r4,r4,#1              ;1713
0009dc  b2a4              UXTH     r4,r4                 ;1713
0009de  282c              CMP      r0,#0x2c              ;1713
0009e0  d10c              BNE      |L10.2556|
0009e2  2000              MOVS     r0,#0                 ;1715
                  |L10.2532|
0009e4  5d29              LDRB     r1,[r5,r4]            ;1717
0009e6  eb070287          ADD      r2,r7,r7,LSL #2       ;1717
0009ea  eb060242          ADD      r2,r6,r2,LSL #1       ;1717
0009ee  1c64              ADDS     r4,r4,#1              ;1717
0009f0  188f              ADDS     r7,r1,r2              ;1717
0009f2  1c40              ADDS     r0,r0,#1              ;1717
0009f4  b2a4              UXTH     r4,r4                 ;1717
0009f6  f01000ff          ANDS     r0,r0,#0xff           ;1715
0009fa  d0f3              BEQ      |L10.2532|
                  |L10.2556|
0009fc  f8897006          STRB     r7,[r9,#6]            ;1720
000a00  f8990006          LDRB     r0,[r9,#6]            ;1721  ; mainswitch
000a04  bbf0              CBNZ     r0,|L10.2692|
000a06  2001              MOVS     r0,#1                 ;1723
000a08  f8c80020          STR      r0,[r8,#0x20]         ;1723  ; Run_Control
000a0c  02c1              LSLS     r1,r0,#11             ;1724
000a0e  4804              LDR      r0,|L10.2592|
000a10  f7fffffe          BL       GPIO_ResetBits
000a14  e070              B        |L10.2808|
                  |L10.2582|
000a16  e16a              B        |L10.3310|
                  |L10.2584|
                          DCD      ||.data||
                  |L10.2588|
                          DCD      Run_Control
                  |L10.2592|
                          DCD      0x40020800
                  |L10.2596|
                          DCD      finishflag
                  |L10.2600|
000a28  5d2a              LDRB     r2,[r5,r4]            ;1727
000a2a  1c64              ADDS     r4,r4,#1              ;1727
000a2c  b2a1              UXTH     r1,r4                 ;1727
000a2e  2a2c              CMP      r2,#0x2c              ;1727
000a30  d106              BNE      |L10.2624|
000a32  2200              MOVS     r2,#0                 ;1729
                  |L10.2612|
000a34  1c49              ADDS     r1,r1,#1              ;1729
000a36  1c52              ADDS     r2,r2,#1              ;1731
000a38  b2d2              UXTB     r2,r2                 ;1729
000a3a  b289              UXTH     r1,r1                 ;1731
000a3c  2a06              CMP      r2,#6                 ;1729
000a3e  d3f9              BCC      |L10.2612|
                  |L10.2624|
000a40  5c6a              LDRB     r2,[r5,r1]            ;1736
000a42  1c49              ADDS     r1,r1,#1              ;1736
000a44  b289              UXTH     r1,r1                 ;1736
000a46  2a2c              CMP      r2,#0x2c              ;1736
000a48  d106              BNE      |L10.2648|
000a4a  2200              MOVS     r2,#0                 ;1738
                  |L10.2636|
000a4c  1c49              ADDS     r1,r1,#1              ;1738
000a4e  1c52              ADDS     r2,r2,#1              ;1740
000a50  b2d2              UXTB     r2,r2                 ;1738
000a52  b289              UXTH     r1,r1                 ;1740
000a54  2a06              CMP      r2,#6                 ;1738
000a56  d3f9              BCC      |L10.2636|
                  |L10.2648|
000a58  5c6b              LDRB     r3,[r5,r1]            ;1745
000a5a  1c49              ADDS     r1,r1,#1              ;1745
000a5c  2200              MOVS     r2,#0                 ;1743
000a5e  b28c              UXTH     r4,r1                 ;1745
000a60  2b2c              CMP      r3,#0x2c              ;1745
000a62  d10c              BNE      |L10.2686|
000a64  2100              MOVS     r1,#0                 ;1747
                  |L10.2662|
000a66  5d2b              LDRB     r3,[r5,r4]            ;1749
000a68  1c64              ADDS     r4,r4,#1              ;1749
000a6a  eb020282          ADD      r2,r2,r2,LSL #2       ;1749
000a6e  eb060242          ADD      r2,r6,r2,LSL #1       ;1749
000a72  1c49              ADDS     r1,r1,#1              ;1749
000a74  441a              ADD      r2,r2,r3              ;1749
000a76  b2a4              UXTH     r4,r4                 ;1749
000a78  f01101ff          ANDS     r1,r1,#0xff           ;1747
000a7c  d0f3              BEQ      |L10.2662|
                  |L10.2686|
000a7e  7182              STRB     r2,[r0,#6]            ;1752
000a80  7981              LDRB     r1,[r0,#6]            ;1753  ; mainswitch
000a82  e000              B        |L10.2694|
                  |L10.2692|
000a84  e038              B        |L10.2808|
                  |L10.2694|
000a86  bbb9              CBNZ     r1,|L10.2808|
000a88  2100              MOVS     r1,#0                 ;1755
000a8a  7181              STRB     r1,[r0,#6]            ;1755
000a8c  e034              B        |L10.2808|
                  |L10.2702|
000a8e  5d2a              LDRB     r2,[r5,r4]            ;1758
000a90  1c64              ADDS     r4,r4,#1              ;1758
000a92  b2a1              UXTH     r1,r4                 ;1758
000a94  2a2c              CMP      r2,#0x2c              ;1758
000a96  d106              BNE      |L10.2726|
000a98  2200              MOVS     r2,#0                 ;1760
                  |L10.2714|
000a9a  1c49              ADDS     r1,r1,#1              ;1760
000a9c  1c52              ADDS     r2,r2,#1              ;1762
000a9e  b2d2              UXTB     r2,r2                 ;1760
000aa0  b289              UXTH     r1,r1                 ;1762
000aa2  2a06              CMP      r2,#6                 ;1760
000aa4  d3f9              BCC      |L10.2714|
                  |L10.2726|
000aa6  5c6a              LDRB     r2,[r5,r1]            ;1767
000aa8  1c49              ADDS     r1,r1,#1              ;1767
000aaa  b289              UXTH     r1,r1                 ;1767
000aac  2a2c              CMP      r2,#0x2c              ;1767
000aae  d10f              BNE      |L10.2768|
000ab0  2200              MOVS     r2,#0                 ;1769
                  |L10.2738|
000ab2  e007              B        |L10.2756|
                  |L10.2740|
000ab4  e156              B        |L10.3428|
                  |L10.2742|
000ab6  e172              B        |L10.3486|
                  |L10.2744|
000ab8  e0f9              B        |L10.3246|
                  |L10.2746|
000aba  e0ab              B        |L10.3092|
                  |L10.2748|
000abc  e023              B        |L10.2822|
                  |L10.2750|
000abe  e08a              B        |L10.3030|
                  |L10.2752|
000ac0  e114              B        |L10.3308|
                  |L10.2754|
000ac2  e18d              B        |L10.3552|
                  |L10.2756|
000ac4  1c49              ADDS     r1,r1,#1              ;1769
000ac6  1c52              ADDS     r2,r2,#1              ;1771
000ac8  b2d2              UXTB     r2,r2                 ;1769
000aca  b289              UXTH     r1,r1                 ;1771
000acc  2a06              CMP      r2,#6                 ;1769
000ace  d3f0              BCC      |L10.2738|
                  |L10.2768|
000ad0  5c6b              LDRB     r3,[r5,r1]            ;1776
000ad2  1c49              ADDS     r1,r1,#1              ;1776
000ad4  2200              MOVS     r2,#0                 ;1774
000ad6  b28c              UXTH     r4,r1                 ;1776
000ad8  2b2c              CMP      r3,#0x2c              ;1776
000ada  d10c              BNE      |L10.2806|
000adc  2100              MOVS     r1,#0                 ;1778
                  |L10.2782|
000ade  5d2b              LDRB     r3,[r5,r4]            ;1780
000ae0  1c64              ADDS     r4,r4,#1              ;1780
000ae2  eb020282          ADD      r2,r2,r2,LSL #2       ;1780
000ae6  eb060242          ADD      r2,r6,r2,LSL #1       ;1780
000aea  1c49              ADDS     r1,r1,#1              ;1780
000aec  441a              ADD      r2,r2,r3              ;1780
000aee  b2a4              UXTH     r4,r4                 ;1780
000af0  f01101ff          ANDS     r1,r1,#0xff           ;1778
000af4  d0f3              BEQ      |L10.2782|
                  |L10.2806|
000af6  7182              STRB     r2,[r0,#6]            ;1783
                  |L10.2808|
000af8  f7fffffe          BL       Off_GPOI_ResetSet
000afc  f8990006          LDRB     r0,[r9,#6]            ;1789  ; mainswitch
000b00  f7fffffe          BL       LIST_ONOFF
000b04  e16c              B        |L10.3552|
                  |L10.2822|
000b06  5d28              LDRB     r0,[r5,r4]            ;1796
000b08  2309              MOVS     r3,#9                 ;1795
000b0a  283f              CMP      r0,#0x3f              ;1796
000b0c  d002              BEQ      |L10.2836|
000b0e  2201              MOVS     r2,#1                 ;1805
000b10  2100              MOVS     r1,#0                 ;1806
000b12  e022              B        |L10.2906|
                  |L10.2836|
000b14  eeb58ac0          VCMPE.F32 s16,#0.0              ;1798
000b18  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1798
000b1c  db01              BLT      |L10.2850|
000b1e  202b              MOVS     r0,#0x2b              ;1798
000b20  e000              B        |L10.2852|
                  |L10.2850|
000b22  202d              MOVS     r0,#0x2d              ;1798
                  |L10.2852|
000b24  5528              STRB     r0,[r5,r4]            ;1798
000b26  1c64              ADDS     r4,r4,#1              ;1798
000b28  b2a4              UXTH     r4,r4                 ;1798
000b2a  ee180a10          VMOV     r0,s16                ;1799
000b2e  f7fffffe          BL       __aeabi_f2d
000b32  ec410b10          VMOV     d0,r0,r1              ;1799
000b36  1928              ADDS     r0,r5,r4              ;1799
000b38  ec532b10          VMOV     r2,r3,d0              ;1799
000b3c  a1ad              ADR      r1,|L10.3572|
000b3e  f7fffffe          BL       __2sprintf
000b42  3409              ADDS     r4,r4,#9              ;1799
000b44  e0d2              B        |L10.3308|
                  |L10.2886|
000b46  b141              CBZ      r1,|L10.2906|
000b48  2905              CMP      r1,#5                 ;1808
000b4a  d006              BEQ      |L10.2906|
000b4c  1860              ADDS     r0,r4,r1              ;1810
000b4e  5c28              LDRB     r0,[r5,r0]            ;1810
000b50  f7fffffe          BL       IsDigitChar
000b54  2801              CMP      r0,#1                 ;1810
000b56  d000              BEQ      |L10.2906|
000b58  2200              MOVS     r2,#0                 ;1816
                  |L10.2906|
000b5a  1c49              ADDS     r1,r1,#1              ;1816
000b5c  b2c9              UXTB     r1,r1                 ;1806
000b5e  4299              CMP      r1,r3                 ;1806
000b60  d3f1              BCC      |L10.2886|
000b62  2a00              CMP      r2,#0                 ;1819
                  |L10.2916|
000b64  f43faa63          BEQ      |L10.46|
000b68  18e0              ADDS     r0,r4,r3              ;1819
000b6a  5c28              LDRB     r0,[r5,r0]            ;1819
000b6c  280d              CMP      r0,#0xd               ;1819
                  |L10.2926|
000b6e  f47faa5e          BNE      |L10.46|
000b72  2200              MOVS     r2,#0                 ;1824
000b74  4610              MOV      r0,r2                 ;1825
000b76  e00d              B        |L10.2964|
                  |L10.2936|
000b78  b160              CBZ      r0,|L10.2964|
000b7a  2801              CMP      r0,#1                 ;1831
000b7c  d016              BEQ      |L10.2988|
000b7e  2805              CMP      r0,#5                 ;1836
000b80  d005              BEQ      |L10.2958|
000b82  5d29              LDRB     r1,[r5,r4]            ;1842
000b84  eb020282          ADD      r2,r2,r2,LSL #2       ;1842
000b88  eb060242          ADD      r2,r6,r2,LSL #1       ;1842
000b8c  440a              ADD      r2,r2,r1              ;1842
                  |L10.2958|
000b8e  1c64              ADDS     r4,r4,#1              ;1842
000b90  b2a4              UXTH     r4,r4                 ;1838
000b92  e015              B        |L10.3008|
                  |L10.2964|
000b94  5d29              LDRB     r1,[r5,r4]            ;1829
000b96  3930              SUBS     r1,r1,#0x30           ;1829
000b98  eb010181          ADD      r1,r1,r1,LSL #2       ;1829
000b9c  0049              LSLS     r1,r1,#1              ;1829
000b9e  ee001a10          VMOV     s0,r1                 ;1829
000ba2  1c64              ADDS     r4,r4,#1              ;1829
000ba4  b2a4              UXTH     r4,r4                 ;1829
000ba6  eeb80ac0          VCVT.F32.S32 s0,s0                 ;1829
000baa  e009              B        |L10.3008|
                  |L10.2988|
000bac  5d29              LDRB     r1,[r5,r4]            ;1833
000bae  1c64              ADDS     r4,r4,#1              ;1833
000bb0  3930              SUBS     r1,r1,#0x30           ;1833
000bb2  ee001a90          VMOV     s1,r1                 ;1833
000bb6  b2a4              UXTH     r4,r4                 ;1833
000bb8  eef80ae0          VCVT.F32.S32 s1,s1                 ;1833
000bbc  ee300a80          VADD.F32 s0,s1,s0              ;1833
                  |L10.3008|
000bc0  1c40              ADDS     r0,r0,#1              ;1833
000bc2  b2c0              UXTB     r0,r0                 ;1825
000bc4  4298              CMP      r0,r3                 ;1825
000bc6  d3d7              BCC      |L10.2936|
000bc8  eebc0ac0          VCVT.U32.F32 s0,s0                 ;1844
000bcc  ee100a10          VMOV     r0,s0                 ;1844
000bd0  b2c1              UXTB     r1,r0                 ;1844
000bd2  2000              MOVS     r0,#0                 ;1844
000bd4  e0ba              B        |L10.3404|
                  |L10.3030|
000bd6  5d29              LDRB     r1,[r5,r4]            ;1850
000bd8  2201              MOVS     r2,#1                 ;1849
000bda  293f              CMP      r1,#0x3f              ;1850
000bdc  d013              BEQ      |L10.3078|
000bde  2100              MOVS     r1,#0                 ;1860
000be0  4608              MOV      r0,r1                 ;1860
                  |L10.3042|
000be2  5d2b              LDRB     r3,[r5,r4]            ;1862
000be4  eb000080          ADD      r0,r0,r0,LSL #2       ;1862
000be8  1c64              ADDS     r4,r4,#1              ;1862
000bea  1c49              ADDS     r1,r1,#1              ;1862
000bec  eb060040          ADD      r0,r6,r0,LSL #1       ;1862
000bf0  b2c9              UXTB     r1,r1                 ;1860
000bf2  4418              ADD      r0,r0,r3              ;1862
000bf4  b2a4              UXTH     r4,r4                 ;1862
000bf6  4291              CMP      r1,r2                 ;1860
000bf8  d3f3              BCC      |L10.3042|
000bfa  2801              CMP      r0,#1                 ;1864
000bfc  f63fab66          BHI      |L10.716|
000c00  497e              LDR      r1,|L10.3580|
000c02  7008              STRB     r0,[r1,#0]            ;1871
000c04  e0ec              B        |L10.3552|
                  |L10.3078|
000c06  7802              LDRB     r2,[r0,#0]            ;1852  ; C_DISCHARGE
000c08  192b              ADDS     r3,r5,r4              ;1852
000c0a  f2af7198          ADR      r1,|L10.1140|
000c0e  4618              MOV      r0,r3                 ;1852
000c10  f7ffbb64          B        |L10.732|
                  |L10.3092|
000c14  5d28              LDRB     r0,[r5,r4]            ;1884
000c16  2309              MOVS     r3,#9                 ;1883
000c18  283f              CMP      r0,#0x3f              ;1884
000c1a  d06c              BEQ      |L10.3318|
000c1c  2201              MOVS     r2,#1                 ;1893
000c1e  2100              MOVS     r1,#0                 ;1894
000c20  e009              B        |L10.3126|
                  |L10.3106|
000c22  b141              CBZ      r1,|L10.3126|
000c24  2905              CMP      r1,#5                 ;1896
000c26  d006              BEQ      |L10.3126|
000c28  1860              ADDS     r0,r4,r1              ;1898
000c2a  5c28              LDRB     r0,[r5,r0]            ;1898
000c2c  f7fffffe          BL       IsDigitChar
000c30  2801              CMP      r0,#1                 ;1898
000c32  d000              BEQ      |L10.3126|
000c34  2200              MOVS     r2,#0                 ;1904
                  |L10.3126|
000c36  1c49              ADDS     r1,r1,#1              ;1904
000c38  b2c9              UXTB     r1,r1                 ;1894
000c3a  4299              CMP      r1,r3                 ;1894
000c3c  d3f1              BCC      |L10.3106|
000c3e  2a00              CMP      r2,#0                 ;1907
                  |L10.3136|
000c40  d090              BEQ      |L10.2916|
000c42  18e0              ADDS     r0,r4,r3              ;1907
000c44  5c28              LDRB     r0,[r5,r0]            ;1907
000c46  280d              CMP      r0,#0xd               ;1907
                  |L10.3144|
000c48  d191              BNE      |L10.2926|
000c4a  2200              MOVS     r2,#0                 ;1912
000c4c  4610              MOV      r0,r2                 ;1913
000c4e  e00d              B        |L10.3180|
                  |L10.3152|
000c50  b160              CBZ      r0,|L10.3180|
000c52  2801              CMP      r0,#1                 ;1919
000c54  d016              BEQ      |L10.3204|
000c56  2805              CMP      r0,#5                 ;1924
000c58  d005              BEQ      |L10.3174|
000c5a  5d29              LDRB     r1,[r5,r4]            ;1930
000c5c  eb020282          ADD      r2,r2,r2,LSL #2       ;1930
000c60  eb060242          ADD      r2,r6,r2,LSL #1       ;1930
000c64  440a              ADD      r2,r2,r1              ;1930
                  |L10.3174|
000c66  1c64              ADDS     r4,r4,#1              ;1930
000c68  b2a4              UXTH     r4,r4                 ;1926
000c6a  e015              B        |L10.3224|
                  |L10.3180|
000c6c  5d29              LDRB     r1,[r5,r4]            ;1917
000c6e  3930              SUBS     r1,r1,#0x30           ;1917
000c70  eb010181          ADD      r1,r1,r1,LSL #2       ;1917
000c74  0049              LSLS     r1,r1,#1              ;1917
000c76  ee001a10          VMOV     s0,r1                 ;1917
000c7a  1c64              ADDS     r4,r4,#1              ;1917
000c7c  b2a4              UXTH     r4,r4                 ;1917
000c7e  eeb80ac0          VCVT.F32.S32 s0,s0                 ;1917
000c82  e009              B        |L10.3224|
                  |L10.3204|
000c84  5d29              LDRB     r1,[r5,r4]            ;1921
000c86  1c64              ADDS     r4,r4,#1              ;1921
000c88  3930              SUBS     r1,r1,#0x30           ;1921
000c8a  ee001a90          VMOV     s1,r1                 ;1921
000c8e  b2a4              UXTH     r4,r4                 ;1921
000c90  eef80ae0          VCVT.F32.S32 s1,s1                 ;1921
000c94  ee300a80          VADD.F32 s0,s1,s0              ;1921
                  |L10.3224|
000c98  1c40              ADDS     r0,r0,#1              ;1921
000c9a  b2c0              UXTB     r0,r0                 ;1913
000c9c  4298              CMP      r0,r3                 ;1913
000c9e  d3d7              BCC      |L10.3152|
000ca0  eebc0ac0          VCVT.U32.F32 s0,s0                 ;1947
000ca4  ee100a10          VMOV     r0,s0                 ;1947
000ca8  b2c1              UXTB     r1,r0                 ;1947
000caa  2001              MOVS     r0,#1                 ;1947
000cac  e04e              B        |L10.3404|
                  |L10.3246|
000cae  5d28              LDRB     r0,[r5,r4]            ;1954
000cb0  2306              MOVS     r3,#6                 ;1953
000cb2  283f              CMP      r0,#0x3f              ;1954
000cb4  d002              BEQ      |L10.3260|
000cb6  2201              MOVS     r2,#1                 ;1963
000cb8  2100              MOVS     r1,#0                 ;1964
000cba  e027              B        |L10.3340|
                  |L10.3260|
000cbc  eeb58ac0          VCMPE.F32 s16,#0.0              ;1956
000cc0  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1956
000cc4  db01              BLT      |L10.3274|
000cc6  202b              MOVS     r0,#0x2b              ;1956
000cc8  e000              B        |L10.3276|
                  |L10.3274|
000cca  202d              MOVS     r0,#0x2d              ;1956
                  |L10.3276|
000ccc  5528              STRB     r0,[r5,r4]            ;1956
000cce  1c64              ADDS     r4,r4,#1              ;1956
000cd0  b2a4              UXTH     r4,r4                 ;1956
000cd2  ee180a10          VMOV     r0,s16                ;1957
000cd6  f7fffffe          BL       __aeabi_f2d
000cda  ec410b10          VMOV     d0,r0,r1              ;1957
000cde  1928              ADDS     r0,r5,r4              ;1957
000ce0  ec532b10          VMOV     r2,r3,d0              ;1957
000ce4  a143              ADR      r1,|L10.3572|
000ce6  f7fffffe          BL       __2sprintf
000cea  1da4              ADDS     r4,r4,#6              ;1957
                  |L10.3308|
000cec  b2a0              UXTH     r0,r4                 ;1958
                  |L10.3310|
000cee  f8059000          STRB     r9,[r5,r0]            ;1959
000cf2  1c40              ADDS     r0,r0,#1              ;1959
000cf4  b284              UXTH     r4,r0                 ;1959
                  |L10.3318|
000cf6  e077              B        |L10.3560|
                  |L10.3320|
000cf8  b141              CBZ      r1,|L10.3340|
000cfa  2904              CMP      r1,#4                 ;1966
000cfc  d006              BEQ      |L10.3340|
000cfe  1860              ADDS     r0,r4,r1              ;1968
000d00  5c28              LDRB     r0,[r5,r0]            ;1968
000d02  f7fffffe          BL       IsDigitChar
000d06  2801              CMP      r0,#1                 ;1968
000d08  d000              BEQ      |L10.3340|
000d0a  2200              MOVS     r2,#0                 ;1974
                  |L10.3340|
000d0c  1c49              ADDS     r1,r1,#1              ;1974
000d0e  b2c9              UXTB     r1,r1                 ;1964
000d10  4299              CMP      r1,r3                 ;1964
000d12  d3f1              BCC      |L10.3320|
000d14  2a00              CMP      r2,#0                 ;1977
000d16  d093              BEQ      |L10.3136|
000d18  18e0              ADDS     r0,r4,r3              ;1977
000d1a  5c28              LDRB     r0,[r5,r0]            ;1977
000d1c  280d              CMP      r0,#0xd               ;1977
000d1e  d193              BNE      |L10.3144|
000d20  2200              MOVS     r2,#0                 ;1982
000d22  4610              MOV      r0,r2                 ;1983
000d24  e015              B        |L10.3410|
                  |L10.3366|
000d26  b1a0              CBZ      r0,|L10.3410|
000d28  5d29              LDRB     r1,[r5,r4]            ;1996
000d2a  eb020282          ADD      r2,r2,r2,LSL #2       ;1996
000d2e  eb060242          ADD      r2,r6,r2,LSL #1       ;1996
000d32  1c64              ADDS     r4,r4,#1              ;1996
000d34  440a              ADD      r2,r2,r1              ;1996
000d36  b2a4              UXTH     r4,r4                 ;1996
                  |L10.3384|
000d38  1c40              ADDS     r0,r0,#1              ;1996
000d3a  b2c0              UXTB     r0,r0                 ;1983
000d3c  4298              CMP      r0,r3                 ;1983
000d3e  d3f2              BCC      |L10.3366|
000d40  eebc0ac0          VCVT.U32.F32 s0,s0                 ;1998
000d44  ee100a10          VMOV     r0,s0                 ;1998
000d48  b2c1              UXTB     r1,r0                 ;1998
000d4a  2002              MOVS     r0,#2                 ;1998
                  |L10.3404|
000d4c  f7fffffe          BL       CalHandle
000d50  e04a              B        |L10.3560|
                  |L10.3410|
000d52  5d29              LDRB     r1,[r5,r4]            ;1987
000d54  1c64              ADDS     r4,r4,#1              ;1987
000d56  3930              SUBS     r1,r1,#0x30           ;1987
000d58  ee001a10          VMOV     s0,r1                 ;1987
000d5c  b2a4              UXTH     r4,r4                 ;1987
000d5e  eeb80ac0          VCVT.F32.S32 s0,s0                 ;1987
000d62  e7e9              B        |L10.3384|
                  |L10.3428|
000d64  5d28              LDRB     r0,[r5,r4]            ;2004
000d66  283f              CMP      r0,#0x3f              ;2004
000d68  d03e              BEQ      |L10.3560|
000d6a  2201              MOVS     r2,#1                 ;2013
000d6c  2100              MOVS     r1,#0                 ;2014
000d6e  4608              MOV      r0,r1                 ;2014
                  |L10.3440|
000d70  5d2b              LDRB     r3,[r5,r4]            ;2016
000d72  eb000080          ADD      r0,r0,r0,LSL #2       ;2016
000d76  1c64              ADDS     r4,r4,#1              ;2016
000d78  1c49              ADDS     r1,r1,#1              ;2016
000d7a  eb060040          ADD      r0,r6,r0,LSL #1       ;2016
000d7e  b2c9              UXTB     r1,r1                 ;2014
000d80  4418              ADD      r0,r0,r3              ;2016
000d82  b2a4              UXTH     r4,r4                 ;2016
000d84  4291              CMP      r1,r2                 ;2014
000d86  d3f3              BCC      |L10.3440|
000d88  2801              CMP      r0,#1                 ;2018
                  |L10.3466|
000d8a  f63faa9f          BHI      |L10.716|
000d8e  491c              LDR      r1,|L10.3584|
000d90  7008              STRB     r0,[r1,#0]            ;2024
000d92  491c              LDR      r1,|L10.3588|
000d94  2001              MOVS     r0,#1                 ;2025
000d96  7008              STRB     r0,[r1,#0]            ;2025
000d98  f7fffffe          BL       Write_Boot_Flag
000d9c  e020              B        |L10.3552|
                  |L10.3486|
000d9e  5d28              LDRB     r0,[r5,r4]            ;2037
000da0  2201              MOVS     r2,#1                 ;2036
000da2  283f              CMP      r0,#0x3f              ;2037
000da4  d020              BEQ      |L10.3560|
000da6  2100              MOVS     r1,#0                 ;2046
000da8  4608              MOV      r0,r1                 ;2046
                  |L10.3498|
000daa  5d2b              LDRB     r3,[r5,r4]            ;2048
000dac  eb000080          ADD      r0,r0,r0,LSL #2       ;2048
000db0  1c64              ADDS     r4,r4,#1              ;2048
000db2  1c49              ADDS     r1,r1,#1              ;2048
000db4  eb060040          ADD      r0,r6,r0,LSL #1       ;2048
000db8  b2c9              UXTB     r1,r1                 ;2046
000dba  4418              ADD      r0,r0,r3              ;2048
000dbc  b2a4              UXTH     r4,r4                 ;2048
000dbe  4291              CMP      r1,r2                 ;2046
000dc0  d3f3              BCC      |L10.3498|
000dc2  2803              CMP      r0,#3                 ;2050
000dc4  d8e1              BHI      |L10.3466|
000dc6  ee000a10          VMOV     s0,r0                 ;2056
000dca  2200              MOVS     r2,#0                 ;2057
000dcc  eeb80a40          VCVT.F32.U32 s0,s0                 ;2056
000dd0  eebc0ac0          VCVT.U32.F32 s0,s0                 ;2057
000dd4  ee100a10          VMOV     r0,s0                 ;2057
000dd8  b2c1              UXTB     r1,r0                 ;2057
000dda  2003              MOVS     r0,#3                 ;2057
000ddc  f7fffffe          BL       CalHandle
                  |L10.3552|
000de0  f805a004          STRB     r10,[r5,r4]           ;2062
000de4  1c64              ADDS     r4,r4,#1              ;2062
000de6  b2a4              UXTH     r4,r4                 ;2062
                  |L10.3560|
000de8  1c64              ADDS     r4,r4,#1              ;2062
000dea  b033              ADD      sp,sp,#0xcc
000dec  b2a0              UXTH     r0,r4                 ;2133
000dee  e8bd8ff0          POP      {r4-r11,pc}
;;;2135   
                          ENDP

000df2  0000              DCW      0x0000
                  |L10.3572|
000df4  2530332e          DCB      "%03.3f",0
000df8  336600  
000dfb  00                DCB      0
                  |L10.3580|
                          DCD      overflag
                  |L10.3584|
                          DCD      jumpflag
                  |L10.3588|
                          DCD      bootflag

                          AREA ||i.SetErr_ACK||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  SetErr_ACK PROC
;;;1053   
;;;1054   u16 SetErr_ACK(char *buf, u8 addr ,u8 ucErr)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1055   {
000002  4604              MOV      r4,r0
;;;1056   		u16 i=0;
;;;1057   		u8 len = 0;
;;;1058   		char stradd[3] = {0};
000004  2000              MOVS     r0,#0
;;;1059   		int addlen=0;
;;;1060   		memset(buf,0,sizeof(buf));
000006  9000              STR      r0,[sp,#0]
000008  6020              STR      r0,[r4,#0]
00000a  4616              MOV      r6,r2                 ;1055
;;;1061       	buf[i++] = ChrStartS;
00000c  203e              MOVS     r0,#0x3e
00000e  7020              STRB     r0,[r4,#0]
;;;1062   		sprintf(stradd,"%d",addr);
000010  460a              MOV      r2,r1
000012  a11a              ADR      r1,|L11.124|
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       __2sprintf
;;;1063   		addlen=strlen(stradd);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       strlen
000020  4605              MOV      r5,r0
;;;1064   		strncat(&buf[i],stradd,addlen);
000022  1c60              ADDS     r0,r4,#1
000024  462a              MOV      r2,r5
000026  4669              MOV      r1,sp
000028  f7fffffe          BL       strncat
00002c  1c6d              ADDS     r5,r5,#1
;;;1065   		i+=addlen;
00002e  b2a8              UXTH     r0,r5
;;;1066   		buf[i++] = '/';
000030  212f              MOVS     r1,#0x2f
000032  5421              STRB     r1,[r4,r0]
000034  1c40              ADDS     r0,r0,#1
000036  b285              UXTH     r5,r0
;;;1067   		switch(ucErr)
000038  2e01              CMP      r6,#1
00003a  d008              BEQ      |L11.78|
00003c  2e02              CMP      r6,#2
00003e  d001              BEQ      |L11.68|
000040  2e03              CMP      r6,#3
000042  d015              BEQ      |L11.112|
                  |L11.68|
;;;1068           {
;;;1069             case 1:         //
;;;1070             	   len = 9;
;;;1071             	   memmove(&buf[i],"PARA ERR!",len);   
;;;1072             	   break;
;;;1073   	      case 2:         //
;;;1074             	   len = 8;
;;;1075             	   memmove(&buf[i],"CMD ERR!",len);   
;;;1076             	   break;
;;;1077   	      case 3:         //
;;;1078             	   len = 8;
;;;1079             	   memmove(&buf[i],"REM ERR!",len);   
;;;1080             	   break;
;;;1081   		  default:    
;;;1082                  len = 8;
000044  2608              MOVS     r6,#8
;;;1083             	   memmove(&buf[i],"CMD ERR!",len);   
000046  1960              ADDS     r0,r4,r5
000048  4632              MOV      r2,r6
00004a  a10d              ADR      r1,|L11.128|
;;;1084                  break;
00004c  e003              B        |L11.86|
                  |L11.78|
00004e  2609              MOVS     r6,#9                 ;1070
000050  1960              ADDS     r0,r4,r5              ;1071
000052  4632              MOV      r2,r6                 ;1071
000054  a10d              ADR      r1,|L11.140|
                  |L11.86|
000056  f7fffffe          BL       __aeabi_memmove
;;;1085   	    }
;;;1086   	    i+=len;
00005a  19a8              ADDS     r0,r5,r6
00005c  b280              UXTH     r0,r0
;;;1087   		buf[i++] = ChrEndR;
00005e  210d              MOVS     r1,#0xd
000060  5421              STRB     r1,[r4,r0]
000062  1c40              ADDS     r0,r0,#1
000064  b280              UXTH     r0,r0
;;;1088   		buf[i++] = ChrEndS;
000066  210a              MOVS     r1,#0xa
000068  5421              STRB     r1,[r4,r0]
00006a  1c40              ADDS     r0,r0,#1
00006c  b280              UXTH     r0,r0
;;;1089   		return i;
;;;1090   }
00006e  bdf8              POP      {r3-r7,pc}
                  |L11.112|
000070  2608              MOVS     r6,#8                 ;1078
000072  1960              ADDS     r0,r4,r5              ;1079
000074  4632              MOV      r2,r6                 ;1079
000076  a108              ADR      r1,|L11.152|
000078  e7ed              B        |L11.86|
;;;1091   
                          ENDP

00007a  0000              DCW      0x0000
                  |L11.124|
00007c  256400            DCB      "%d",0
00007f  00                DCB      0
                  |L11.128|
000080  434d4420          DCB      "CMD ERR!",0
000084  45525221
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L11.140|
00008c  50415241          DCB      "PARA ERR!",0
000090  20455252
000094  2100    
000096  00                DCB      0
000097  00                DCB      0
                  |L11.152|
000098  52454d20          DCB      "REM ERR!",0
00009c  45525221
0000a0  00      
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0

                          AREA ||i.SetListPC||, CODE, READONLY, ALIGN=2

                  SetListPC PROC
;;;164    
;;;165    void SetListPC(void)
000000  4802              LDR      r0,|L12.12|
;;;166    {
;;;167    	SetPowerC(Para.CDC_Limit_C);
000002  f8b00070          LDRH     r0,[r0,#0x70]  ; Para
000006  f7ffbffe          B.W      SetPowerC
;;;168    //	listsend = 3;
;;;169    }
;;;170    
                          ENDP

00000a  0000              DCW      0x0000
                  |L12.12|
                          DCD      Para

                          AREA ||i.SetListPS||, CODE, READONLY, ALIGN=2

                  SetListPS PROC
;;;171    
;;;172    void SetListPS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;173    {
;;;174    	if(mainswitch == 1)
000002  4c0f              LDR      r4,|L13.64|
000004  79a0              LDRB     r0,[r4,#6]  ; mainswitch
;;;175    	{
;;;176    		GPIO_SetBits(GPIOE,GPIO_Pin_2);
000006  4d0f              LDR      r5,|L13.68|
000008  2801              CMP      r0,#1                 ;174
00000a  d109              BNE      |L13.32|
00000c  2104              MOVS     r1,#4
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       GPIO_SetBits
;;;177    		Delay_ms(POWER_SW_DELAY);
000014  200a              MOVS     r0,#0xa
000016  f7fffffe          BL       Delay_ms
;;;178    		PowerSwitch(mainswitch);
00001a  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00001c  f7fffffe          BL       PowerSwitch
                  |L13.32|
;;;179    	}
;;;180    	
;;;181    	if(mainswitch == 0)
000020  79a0              LDRB     r0,[r4,#6]  ; mainswitch
000022  2800              CMP      r0,#0
000024  d10b              BNE      |L13.62|
;;;182    	{
;;;183    		PowerSwitch(mainswitch);
000026  79a0              LDRB     r0,[r4,#6]  ; mainswitch
000028  f7fffffe          BL       PowerSwitch
;;;184    		Delay_ms(POWER_SW_DELAY);
00002c  200a              MOVS     r0,#0xa
00002e  f7fffffe          BL       Delay_ms
;;;185    		GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
000032  4628              MOV      r0,r5
000034  e8bd4070          POP      {r4-r6,lr}
000038  2104              MOVS     r1,#4
00003a  f7ffbffe          B.W      GPIO_ResetBits
                  |L13.62|
;;;186    	}
;;;187    	
;;;188    //	listsend = 0;
;;;189    }
00003e  bd70              POP      {r4-r6,pc}
;;;190    
                          ENDP

                  |L13.64|
                          DCD      ||.data||
                  |L13.68|
                          DCD      0x40021000

                          AREA ||i.SetListPV||, CODE, READONLY, ALIGN=2

                  SetListPV PROC
;;;158    }
;;;159    void SetListPV(void)
000000  4801              LDR      r0,|L14.8|
;;;160    {
;;;161    	SetPowerV(Para.CDC_OutPut_V);
000002  6ec0              LDR      r0,[r0,#0x6c]  ; Para
000004  f7ffbffe          B.W      SetPowerV
;;;162    //	listsend = 2;
;;;163    }
;;;164    
                          ENDP

                  |L14.8|
                          DCD      Para

                          AREA ||i.SetPowerC||, CODE, READONLY, ALIGN=2

                  SetPowerC PROC
;;;117    
;;;118    void SetPowerC(vu16 powc)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;119    {
;;;120    	MasterSendbuf[0] = 0x01;
000002  4c12              LDR      r4,|L15.76|
000004  2001              MOVS     r0,#1
000006  7020              STRB     r0,[r4,#0]
;;;121    	MasterSendbuf[1] = 0x06;
000008  2006              MOVS     r0,#6
00000a  7060              STRB     r0,[r4,#1]
;;;122    	MasterSendbuf[2] = 0x00;
00000c  2000              MOVS     r0,#0
00000e  70a0              STRB     r0,[r4,#2]
;;;123    	MasterSendbuf[3] = 0x31;
000010  2031              MOVS     r0,#0x31
000012  70e0              STRB     r0,[r4,#3]
;;;124    	MasterSendbuf[4] = (u8)(powc/10>>8);
000014  f8bd1000          LDRH     r1,[sp,#0]
000018  200a              MOVS     r0,#0xa
00001a  fbb1f1f0          UDIV     r1,r1,r0
00001e  0a09              LSRS     r1,r1,#8
000020  7121              STRB     r1,[r4,#4]
;;;125    	MasterSendbuf[5] = (u8)(powc/10);
000022  f8bd1000          LDRH     r1,[sp,#0]
000026  fbb1f0f0          UDIV     r0,r1,r0
00002a  7160              STRB     r0,[r4,#5]
;;;126    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00002c  2106              MOVS     r1,#6
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       Hardware_CRC
000034  71a0              STRB     r0,[r4,#6]
;;;127    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000036  2106              MOVS     r1,#6
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       Hardware_CRC
00003e  0a00              LSRS     r0,r0,#8
000040  71e0              STRB     r0,[r4,#7]
;;;128    	USART3WriteDMA(8);
000042  e8bd4038          POP      {r3-r5,lr}
000046  2008              MOVS     r0,#8
000048  f7ffbffe          B.W      USART3WriteDMA
;;;129    }
;;;130    
                          ENDP

                  |L15.76|
                          DCD      ||area_number.32||+0xdc

                          AREA ||i.SetPowerModeC||, CODE, READONLY, ALIGN=2

                  SetPowerModeC PROC
;;;136    
;;;137    void SetPowerModeC(void)
000000  4802              LDR      r0,|L16.12|
;;;138    {
;;;139    	SetPowerC(Para.POWER_Limit_C);
000002  f8b00058          LDRH     r0,[r0,#0x58]  ; Para
000006  f7ffbffe          B.W      SetPowerC
;;;140    //	sendwait = 3;
;;;141    }
;;;142    
                          ENDP

00000a  0000              DCW      0x0000
                  |L16.12|
                          DCD      Para

                          AREA ||i.SetPowerModeS||, CODE, READONLY, ALIGN=2

                  SetPowerModeS PROC
;;;142    
;;;143    void SetPowerModeS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;144    {
;;;145    	if(mainswitch == 1)
000002  4c10              LDR      r4,|L17.68|
000004  79a0              LDRB     r0,[r4,#6]  ; mainswitch
;;;146    	{
;;;147    		GPIO_SetBits(GPIOE,GPIO_Pin_2);
000006  4d10              LDR      r5,|L17.72|
000008  2801              CMP      r0,#1                 ;145
00000a  d00e              BEQ      |L17.42|
;;;148    		Delay_ms(POWER_SW_DELAY);
;;;149    		PowerSwitch(mainswitch);
;;;150    	}else if(mainswitch == 0)
00000c  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00000e  2800              CMP      r0,#0
000010  d117              BNE      |L17.66|
;;;151    	{
;;;152    		PowerSwitch(mainswitch);
000012  79a0              LDRB     r0,[r4,#6]  ; mainswitch
000014  f7fffffe          BL       PowerSwitch
;;;153    		Delay_ms(POWER_SW_DELAY);
000018  200a              MOVS     r0,#0xa
00001a  f7fffffe          BL       Delay_ms
;;;154    		GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
00001e  4628              MOV      r0,r5
000020  e8bd4070          POP      {r4-r6,lr}
000024  2104              MOVS     r1,#4
000026  f7ffbffe          B.W      GPIO_ResetBits
                  |L17.42|
00002a  2104              MOVS     r1,#4                 ;147
00002c  4628              MOV      r0,r5                 ;147
00002e  f7fffffe          BL       GPIO_SetBits
000032  200a              MOVS     r0,#0xa               ;148
000034  f7fffffe          BL       Delay_ms
000038  79a0              LDRB     r0,[r4,#6]            ;149  ; mainswitch
00003a  e8bd4070          POP      {r4-r6,lr}            ;149
00003e  f7ffbffe          B.W      PowerSwitch
                  |L17.66|
;;;155    	}
;;;156    	
;;;157    //	sendwait = 0;
;;;158    }
000042  bd70              POP      {r4-r6,pc}
;;;159    void SetListPV(void)
                          ENDP

                  |L17.68|
                          DCD      ||.data||
                  |L17.72|
                          DCD      0x40021000

                          AREA ||i.SetPowerModeV||, CODE, READONLY, ALIGN=2

                  SetPowerModeV PROC
;;;130    
;;;131    void SetPowerModeV(void)
000000  4801              LDR      r0,|L18.8|
;;;132    {
;;;133    	SetPowerV(Para.POWER_OutPut_V);
000002  6d40              LDR      r0,[r0,#0x54]  ; Para
000004  f7ffbffe          B.W      SetPowerV
;;;134    //	sendwait = 2;
;;;135    }
;;;136    
                          ENDP

                  |L18.8|
                          DCD      Para

                          AREA ||i.SetPowerV||, CODE, READONLY, ALIGN=2

                  SetPowerV PROC
;;;104    }
;;;105    void SetPowerV(vu32 powv)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;106    {
;;;107    	MasterSendbuf[0] = 0x01;
000002  4c11              LDR      r4,|L19.72|
000004  2001              MOVS     r0,#1
000006  7020              STRB     r0,[r4,#0]
;;;108    	MasterSendbuf[1] = 0x06;
000008  2006              MOVS     r0,#6
00000a  7060              STRB     r0,[r4,#1]
;;;109    	MasterSendbuf[2] = 0x00;
00000c  2000              MOVS     r0,#0
00000e  70a0              STRB     r0,[r4,#2]
;;;110    	MasterSendbuf[3] = 0x30;
000010  2030              MOVS     r0,#0x30
000012  70e0              STRB     r0,[r4,#3]
;;;111    	MasterSendbuf[4] = (u8)(powv/10>>8);
000014  9900              LDR      r1,[sp,#0]
000016  200a              MOVS     r0,#0xa
000018  fbb1f1f0          UDIV     r1,r1,r0
00001c  0a09              LSRS     r1,r1,#8
00001e  7121              STRB     r1,[r4,#4]
;;;112    	MasterSendbuf[5] = (u8)(powv/10);
000020  9900              LDR      r1,[sp,#0]
000022  fbb1f0f0          UDIV     r0,r1,r0
000026  7160              STRB     r0,[r4,#5]
;;;113    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
000028  2106              MOVS     r1,#6
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       Hardware_CRC
000030  71a0              STRB     r0,[r4,#6]
;;;114    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000032  2106              MOVS     r1,#6
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       Hardware_CRC
00003a  0a00              LSRS     r0,r0,#8
00003c  71e0              STRB     r0,[r4,#7]
;;;115    	USART3WriteDMA(8);
00003e  e8bd4038          POP      {r3-r5,lr}
000042  2008              MOVS     r0,#8
000044  f7ffbffe          B.W      USART3WriteDMA
;;;116    }
;;;117    
                          ENDP

                  |L19.72|
                          DCD      ||area_number.32||+0xdc

                          AREA ||i.UART1_Send||, CODE, READONLY, ALIGN=2

                  UART1_Send PROC
;;;2527   
;;;2528   void UART1_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2529   {
;;;2530   	static vu8 UART_Buffer_Send_pointer=0;
;;;2531   		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L20.72|
000004  78e0              LDRB     r0,[r4,#3]  ; UART_Buffer_Send_pointer
000006  7921              LDRB     r1,[r4,#4]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L20.56|
;;;2532            {
;;;2533   				 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L20.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L20.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L20.54|
;;;2534   				 {
;;;2535   					USART_SendData(USART1,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  78e1              LDRB     r1,[r4,#3]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  4d0d              LDR      r5,|L20.84|
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       USART_SendData
                  |L20.36|
;;;2536   					while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);//等待发送完成
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L20.36|
;;;2537   					UART_Buffer_Send_pointer++;
000030  78e0              LDRB     r0,[r4,#3]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  70e0              STRB     r0,[r4,#3]
                  |L20.54|
;;;2538   				 }
;;;2539            }
;;;2540   		else 
;;;2541   		{
;;;2542   			UART_Buffer_Send_pointer=0;
;;;2543   			UART_SEND_flag=0;//发送完成一帧数据
;;;2544   		}
;;;2545   }
000036  bd70              POP      {r4-r6,pc}
                  |L20.56|
000038  2000              MOVS     r0,#0                 ;2542
00003a  70e0              STRB     r0,[r4,#3]            ;2542
00003c  4806              LDR      r0,|L20.88|
00003e  6801              LDR      r1,[r0,#0]            ;2543  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;2543
000044  6001              STR      r1,[r0,#0]            ;2543  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;2546   
                          ENDP

                  |L20.72|
                          DCD      ||.data||
                  |L20.76|
                          DCD      ||area_number.32||
                  |L20.80|
                          DCD      ADDR
                  |L20.84|
                          DCD      0x40011000
                  |L20.88|
                          DCD      flagA

                          AREA ||i.UART2_Send||, CODE, READONLY, ALIGN=2

                  UART2_Send PROC
;;;2508   }
;;;2509   void UART2_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2510   {
;;;2511   	static vu8 UART_Buffer_Send_pointer=0;
;;;2512   		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L21.72|
000004  78a0              LDRB     r0,[r4,#2]  ; UART_Buffer_Send_pointer
000006  7921              LDRB     r1,[r4,#4]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L21.56|
;;;2513            {
;;;2514   					 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L21.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L21.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L21.54|
;;;2515   					 {
;;;2516   						USART_SendData(USART2,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  78a1              LDRB     r1,[r4,#2]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  480d              LDR      r0,|L21.84|
00001e  f7fffffe          BL       USART_SendData
;;;2517   						while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);//等待发送完成
000022  4d0d              LDR      r5,|L21.88|
                  |L21.36|
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L21.36|
;;;2518   						UART_Buffer_Send_pointer++;
000030  78a0              LDRB     r0,[r4,#2]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  70a0              STRB     r0,[r4,#2]
                  |L21.54|
;;;2519   					}
;;;2520            }
;;;2521   		else 
;;;2522   		{
;;;2523   			UART_Buffer_Send_pointer=0;
;;;2524   			UART_SEND_flag=0;//发送完成一帧数据
;;;2525   		}
;;;2526   }
000036  bd70              POP      {r4-r6,pc}
                  |L21.56|
000038  2000              MOVS     r0,#0                 ;2523
00003a  70a0              STRB     r0,[r4,#2]            ;2523
00003c  4807              LDR      r0,|L21.92|
00003e  6801              LDR      r1,[r0,#0]            ;2524  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;2524
000044  6001              STR      r1,[r0,#0]            ;2524  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;2527   
                          ENDP

                  |L21.72|
                          DCD      ||.data||
                  |L21.76|
                          DCD      ||area_number.32||
                  |L21.80|
                          DCD      ADDR
                  |L21.84|
                          DCD      0x40004400
                  |L21.88|
                          DCD      0x40011000
                  |L21.92|
                          DCD      flagA

                          AREA ||i.USART2_Configuration||, CODE, READONLY, ALIGN=2

                  USART2_Configuration PROC
;;;2204   
;;;2205   void USART2_Configuration(void)//串口初始化函数
000000  b570              PUSH     {r4-r6,lr}
;;;2206   {  
;;;2207   	GPIO_InitTypeDef GPIO_InitStructure;
;;;2208   	USART_InitTypeDef USART_InitStructure;
;;;2209   	
;;;2210   	/* config USART1 clock */
;;;2211   	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
000002  2101              MOVS     r1,#1
000004  b088              SUB      sp,sp,#0x20           ;2206
000006  0448              LSLS     r0,r1,#17
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;2212   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);
00000c  4e2a              LDR      r6,|L22.184|
00000e  2207              MOVS     r2,#7
000010  2102              MOVS     r1,#2
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2213   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);
000018  2207              MOVS     r2,#7
00001a  2103              MOVS     r1,#3
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2214   	/* USART1 GPIO config */
;;;2215   	/* Configure USART1 Tx (PA.02) as alternate function push-pull */
;;;2216   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;2217   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000022  2502              MOVS     r5,#2
000024  2004              MOVS     r0,#4                 ;2216
000026  f88d5004          STRB     r5,[sp,#4]
;;;2218   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
00002c  9000              STR      r0,[sp,#0]            ;2217
00002e  f88d4006          STRB     r4,[sp,#6]
;;;2219   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f88d5005          STRB     r5,[sp,#5]
;;;2220   	GPIO_Init(GPIOA, &GPIO_InitStructure);    
000036  4669              MOV      r1,sp
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GPIO_Init
;;;2221   	/* Configure USART1 Rx (PA.03) as input floating */
;;;2222   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
00003e  2008              MOVS     r0,#8
;;;2223   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000040  9000              STR      r0,[sp,#0]
000042  f88d5004          STRB     r5,[sp,#4]
;;;2224   	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;2225   	
;;;2226   	/* USART1 mode config */
;;;2227   	USART_InitStructure.USART_BaudRate = 115200;
00004e  f44f30e1          MOV      r0,#0x1c200
;;;2228   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000052  9002              STR      r0,[sp,#8]
;;;2229   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2230   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000054  f8ad4010          STRH     r4,[sp,#0x10]
;;;2231   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2232   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
;;;2233   	USART_Init(USART2, &USART_InitStructure);
00005a  4d18              LDR      r5,|L22.188|
00005c  f8ad400c          STRH     r4,[sp,#0xc]          ;2228
000060  f8ad0012          STRH     r0,[sp,#0x12]         ;2232
000064  f8ad400e          STRH     r4,[sp,#0xe]          ;2229
000068  f8ad4014          STRH     r4,[sp,#0x14]         ;2231
00006c  a902              ADD      r1,sp,#8
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       USART_Init
;;;2234   	
;;;2235   	/******使能串口接收中断******************/
;;;2236   	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
000074  2201              MOVS     r2,#1
000076  f2405125          MOV      r1,#0x525
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_ITConfig
;;;2237   //	USART_ITConfig(USART2, USART_IT_ORE, ENABLE);	
;;;2238   	USART_Cmd(USART2, ENABLE);//使能串口1
000080  2101              MOVS     r1,#1
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USART_Cmd
;;;2239     USART_ClearFlag(USART2, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       USART_ClearFlag
000090  f44f60e0          MOV      r0,#0x700
000094  f7fffffe          BL       NVIC_PriorityGroupConfig
000098  2026              MOVS     r0,#0x26
00009a  f88d0018          STRB     r0,[sp,#0x18]
00009e  f88d4019          STRB     r4,[sp,#0x19]
0000a2  2001              MOVS     r0,#1
0000a4  f88d001a          STRB     r0,[sp,#0x1a]
0000a8  f88d001b          STRB     r0,[sp,#0x1b]
0000ac  a806              ADD      r0,sp,#0x18
0000ae  f7fffffe          BL       NVIC_Init
;;;2240     
;;;2241     USART2_NVIC_Config();//串口中断配置
;;;2242   }
0000b2  b008              ADD      sp,sp,#0x20
0000b4  bd70              POP      {r4-r6,pc}
;;;2243   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L22.184|
                          DCD      0x40020000
                  |L22.188|
                          DCD      0x40004400

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;2466   
;;;2467   void USART2_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2468   {
;;;2469   	u8 Res;
;;;2470    	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
000002  4c1c              LDR      r4,|L23.116|
000004  f2405525          MOV      r5,#0x525
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       USART_GetITStatus
000010  2800              CMP      r0,#0
000012  d013              BEQ      |L23.60|
;;;2471   	{
;;;2472   		USART_ClearITPendingBit(USART2,USART_IT_RXNE);
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       USART_ClearITPendingBit
;;;2473   		Res=USART_ReceiveData(USART2);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       USART_ReceiveData
;;;2474   
;;;2475   		if((USART_RX_STA&0x8000)==0)//接收未完成
000022  4915              LDR      r1,|L23.120|
000024  b2c2              UXTB     r2,r0                 ;2473
000026  8a08              LDRH     r0,[r1,#0x10]  ; USART_RX_STA
000028  0403              LSLS     r3,r0,#16
00002a  d407              BMI      |L23.60|
;;;2476   		{
;;;2477   		if(USART_RX_STA&0x4000)//接收到了0x0d
;;;2478   		{
;;;2479   			if(Res!=0x0a)
;;;2480   				USART_RX_STA=0;//接收错误,重新开始
;;;2481   			else 
;;;2482   			{
;;;2483   		//		SerialRemoteHandleL(USART_RX_STA,USART_RX_BUF);
;;;2484   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
00002c  4b13              LDR      r3,|L23.124|
00002e  0445              LSLS     r5,r0,#17             ;2477
000030  f04f0400          MOV      r4,#0                 ;2477
000034  d50b              BPL      |L23.78|
000036  2a0a              CMP      r2,#0xa               ;2479
000038  d001              BEQ      |L23.62|
                  |L23.58|
00003a  820c              STRH     r4,[r1,#0x10]         ;2480
                  |L23.60|
;;;2485   				USART_RX_STA++;
;;;2486   				USART_RX_CNT = USART_RX_STA;
;;;2487   				USART_RX_STA|=0x8000;	//接收完成了 			  //接收到回车的后字节  置位状态寄存器 
;;;2488   			}
;;;2489   		}
;;;2490   		else //还没收到0X0D
;;;2491   		{	
;;;2492   			if(Res==0x0d)
;;;2493   			{
;;;2494   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
;;;2495   				USART_RX_STA++;	
;;;2496   				USART_RX_STA|=0x4000;					 //接收到回车的前一字节  置位状态寄存器
;;;2497   			}
;;;2498   			else
;;;2499   				{
;;;2500   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
;;;2501   					USART_RX_STA++;									//长度+1 为下一次做准备
;;;2502   				if(USART_RX_STA>(USART_REC_LEN-1))
;;;2503   					USART_RX_STA=0;//接收数据错误,重新开始接收	  
;;;2504   				}		 
;;;2505   			}
;;;2506   		} 
;;;2507   	}
;;;2508   }
00003c  bd70              POP      {r4-r6,pc}
                  |L23.62|
00003e  f3c0040d          UBFX     r4,r0,#0,#14          ;2484
000042  1c40              ADDS     r0,r0,#1              ;2484
000044  551a              STRB     r2,[r3,r4]            ;2484
000046  8248              STRH     r0,[r1,#0x12]         ;2486
000048  f4404000          ORR      r0,r0,#0x8000         ;2487
00004c  e010              B        |L23.112|
                  |L23.78|
00004e  2a0d              CMP      r2,#0xd               ;2492
000050  d008              BEQ      |L23.100|
000052  f3c0050d          UBFX     r5,r0,#0,#14          ;2500
000056  1c40              ADDS     r0,r0,#1              ;2500
000058  b280              UXTH     r0,r0                 ;2501
00005a  555a              STRB     r2,[r3,r5]            ;2500
00005c  8208              STRH     r0,[r1,#0x10]         ;2501
00005e  28c7              CMP      r0,#0xc7              ;2502
000060  d8eb              BHI      |L23.58|
000062  bd70              POP      {r4-r6,pc}
                  |L23.100|
000064  f3c0040d          UBFX     r4,r0,#0,#14          ;2494
000068  1c40              ADDS     r0,r0,#1              ;2494
00006a  551a              STRB     r2,[r3,r4]            ;2494
00006c  f4404080          ORR      r0,r0,#0x4000         ;2496
                  |L23.112|
000070  8208              STRH     r0,[r1,#0x10]         ;2487
000072  bd70              POP      {r4-r6,pc}
;;;2509   void UART2_Send(void)
                          ENDP

                  |L23.116|
                          DCD      0x40004400
                  |L23.120|
                          DCD      ||.data||
                  |L23.124|
                          DCD      ||area_number.32||+0x14

                          AREA ||i.USART3HANDLE||, CODE, READONLY, ALIGN=2

                  USART3HANDLE PROC
;;;236    
;;;237    void USART3HANDLE(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;238    {
;;;239    	vu16 crcres;
;;;240    
;;;241    	if(MasterRecbuf[0] == 0x01)
000002  4e43              LDR      r6,|L24.272|
000004  2500              MOVS     r5,#0
;;;242    	{
;;;243    		if(MasterRecbuf[1] == 0x03)
;;;244    		{
;;;245    			crcres = (MasterRecbuf[8] << 8) + MasterRecbuf[7];
;;;246    			if(crcres == Hardware_CRC(MasterRecbuf,7))
;;;247    			{
;;;248    				 
;;;249    				Para.CPOW_Voltage = (MasterRecbuf[3] << 8) + MasterRecbuf[4];
;;;250    				Para.CCurrent = (MasterRecbuf[5] << 8) + MasterRecbuf[6];
;;;251    				memset(MasterRecbuf,0,sizeof(MasterRecbuf));
;;;252    			}
;;;253    				if(sendwait == 3)
000006  4c43              LDR      r4,|L24.276|
000008  7830              LDRB     r0,[r6,#0]            ;241  ; MasterRecbuf
00000a  2801              CMP      r0,#1                 ;241
00000c  d17e              BNE      |L24.268|
00000e  7870              LDRB     r0,[r6,#1]            ;243  ; MasterRecbuf
000010  2803              CMP      r0,#3                 ;243
000012  d002              BEQ      |L24.26|
;;;254    				{
;;;255    					SetPowerModeS();
;;;256    				}
;;;257    				if(sendwait == 2)
;;;258    				{
;;;259    					SetPowerModeC();
;;;260    				}
;;;261    				if(sendwait == 1)
;;;262    				{
;;;263    					SetPowerModeV();
;;;264    				}
;;;265    				if(listsend == 3)
;;;266    				{
;;;267    					SetListPS();
;;;268    				}
;;;269    				if(listsend == 2)
;;;270    				{
;;;271    					SetListPC();
;;;272    				}
;;;273    				if(listsend == 1)
;;;274    				{
;;;275    					SetListPV();
;;;276    				}
;;;277    		}else if(MasterRecbuf[1] == 0x06){
000014  2806              CMP      r0,#6
000016  d03c              BEQ      |L24.146|
000018  e078              B        |L24.268|
                  |L24.26|
00001a  79f0              LDRB     r0,[r6,#7]            ;245  ; MasterRecbuf
00001c  7a31              LDRB     r1,[r6,#8]            ;245  ; MasterRecbuf
00001e  eb002001          ADD      r0,r0,r1,LSL #8       ;245
000022  f8ad0000          STRH     r0,[sp,#0]            ;245
000026  2107              MOVS     r1,#7                 ;246
000028  4839              LDR      r0,|L24.272|
00002a  f7fffffe          BL       Hardware_CRC
00002e  f8bd1000          LDRH     r1,[sp,#0]            ;246
000032  4288              CMP      r0,r1                 ;246
000034  d10e              BNE      |L24.84|
000036  7930              LDRB     r0,[r6,#4]            ;249  ; MasterRecbuf
000038  78f1              LDRB     r1,[r6,#3]            ;249  ; MasterRecbuf
00003a  eb002101          ADD      r1,r0,r1,LSL #8       ;249
00003e  4836              LDR      r0,|L24.280|
000040  6281              STR      r1,[r0,#0x28]         ;249  ; Para
000042  79b1              LDRB     r1,[r6,#6]            ;250  ; MasterRecbuf
000044  7972              LDRB     r2,[r6,#5]            ;250  ; MasterRecbuf
000046  eb012102          ADD      r1,r1,r2,LSL #8       ;250
00004a  6301              STR      r1,[r0,#0x30]         ;250  ; Para
00004c  2180              MOVS     r1,#0x80              ;251
00004e  4830              LDR      r0,|L24.272|
000050  f7fffffe          BL       __aeabi_memclr
                  |L24.84|
000054  7a20              LDRB     r0,[r4,#8]            ;253  ; sendwait
000056  2803              CMP      r0,#3                 ;253
000058  d101              BNE      |L24.94|
00005a  f7fffffe          BL       SetPowerModeS
                  |L24.94|
00005e  7a20              LDRB     r0,[r4,#8]            ;257  ; sendwait
000060  2802              CMP      r0,#2                 ;257
000062  d101              BNE      |L24.104|
000064  f7fffffe          BL       SetPowerModeC
                  |L24.104|
000068  7a20              LDRB     r0,[r4,#8]            ;261  ; sendwait
00006a  2801              CMP      r0,#1                 ;261
00006c  d101              BNE      |L24.114|
00006e  f7fffffe          BL       SetPowerModeV
                  |L24.114|
000072  7a60              LDRB     r0,[r4,#9]            ;265  ; listsend
000074  2803              CMP      r0,#3                 ;265
000076  d101              BNE      |L24.124|
000078  f7fffffe          BL       SetListPS
                  |L24.124|
00007c  7a60              LDRB     r0,[r4,#9]            ;269  ; listsend
00007e  2802              CMP      r0,#2                 ;269
000080  d101              BNE      |L24.134|
000082  f7fffffe          BL       SetListPC
                  |L24.134|
000086  7a60              LDRB     r0,[r4,#9]            ;273  ; listsend
000088  2801              CMP      r0,#1                 ;273
00008a  d13f              BNE      |L24.268|
00008c  f7fffffe          BL       SetListPV
000090  e03c              B        |L24.268|
                  |L24.146|
;;;278    			memset(MasterRecbuf,0,sizeof(MasterRecbuf));
000092  2180              MOVS     r1,#0x80
000094  481e              LDR      r0,|L24.272|
000096  f7fffffe          BL       __aeabi_memclr
;;;279    			if(sendwait == 1)
00009a  7a22              LDRB     r2,[r4,#8]  ; sendwait
;;;280    			{
;;;281    				sendwait = 2;
00009c  2102              MOVS     r1,#2
00009e  2003              MOVS     r0,#3                 ;243
0000a0  2a01              CMP      r2,#1                 ;279
0000a2  d006              BEQ      |L24.178|
;;;282    			}else if(sendwait == 2){
0000a4  7a22              LDRB     r2,[r4,#8]  ; sendwait
0000a6  2a02              CMP      r2,#2
0000a8  d005              BEQ      |L24.182|
;;;283    				sendwait = 3;
;;;284    			}else if(sendwait == 3){
0000aa  7a22              LDRB     r2,[r4,#8]  ; sendwait
0000ac  2a03              CMP      r2,#3
0000ae  d004              BEQ      |L24.186|
0000b0  e00f              B        |L24.210|
                  |L24.178|
0000b2  7221              STRB     r1,[r4,#8]            ;281
0000b4  e00d              B        |L24.210|
                  |L24.182|
0000b6  7220              STRB     r0,[r4,#8]            ;283
0000b8  e00b              B        |L24.210|
                  |L24.186|
;;;285    				sendwait = 0;
0000ba  7225              STRB     r5,[r4,#8]
;;;286    				if(waitcommand1 != 0)
0000bc  7aa2              LDRB     r2,[r4,#0xa]  ; waitcommand1
0000be  b11a              CBZ      r2,|L24.200|
;;;287    				{
;;;288    					sendwait = waitcommand1;
0000c0  7aa2              LDRB     r2,[r4,#0xa]  ; waitcommand1
0000c2  7222              STRB     r2,[r4,#8]
;;;289    					waitcommand1 = 0;
0000c4  72a5              STRB     r5,[r4,#0xa]
0000c6  e004              B        |L24.210|
                  |L24.200|
;;;290    				}else if(waitcommand2 != 0){
0000c8  7ae2              LDRB     r2,[r4,#0xb]  ; waitcommand2
0000ca  b112              CBZ      r2,|L24.210|
;;;291    					listsend = waitcommand2;
0000cc  7ae2              LDRB     r2,[r4,#0xb]  ; waitcommand2
0000ce  7262              STRB     r2,[r4,#9]
;;;292    					waitcommand2 = 0;
0000d0  72e5              STRB     r5,[r4,#0xb]
                  |L24.210|
;;;293    				}
;;;294    			}
;;;295    			
;;;296    			if(listsend == 1)
0000d2  7a62              LDRB     r2,[r4,#9]  ; listsend
0000d4  2a01              CMP      r2,#1
0000d6  d006              BEQ      |L24.230|
;;;297    			{
;;;298    				listsend = 2;
;;;299    			}else if(listsend == 2){
0000d8  7a61              LDRB     r1,[r4,#9]  ; listsend
0000da  2902              CMP      r1,#2
0000dc  d005              BEQ      |L24.234|
;;;300    				listsend = 3;
;;;301    			}else if(listsend == 3){
0000de  7a60              LDRB     r0,[r4,#9]  ; listsend
0000e0  2803              CMP      r0,#3
0000e2  d004              BEQ      |L24.238|
0000e4  e00f              B        |L24.262|
                  |L24.230|
0000e6  7261              STRB     r1,[r4,#9]            ;298
0000e8  e00d              B        |L24.262|
                  |L24.234|
0000ea  7260              STRB     r0,[r4,#9]            ;300
0000ec  e00b              B        |L24.262|
                  |L24.238|
;;;302    				listsend = 0;
0000ee  7265              STRB     r5,[r4,#9]
;;;303    				if(waitcommand1 != 0)
0000f0  7aa0              LDRB     r0,[r4,#0xa]  ; waitcommand1
0000f2  b118              CBZ      r0,|L24.252|
;;;304    				{
;;;305    					sendwait = waitcommand1;
0000f4  7aa0              LDRB     r0,[r4,#0xa]  ; waitcommand1
0000f6  7220              STRB     r0,[r4,#8]
;;;306    					waitcommand1 = 0;
0000f8  72a5              STRB     r5,[r4,#0xa]
0000fa  e004              B        |L24.262|
                  |L24.252|
;;;307    				}else if(waitcommand2 != 0){
0000fc  7ae0              LDRB     r0,[r4,#0xb]  ; waitcommand2
0000fe  b110              CBZ      r0,|L24.262|
;;;308    					listsend = waitcommand2;
000100  7ae0              LDRB     r0,[r4,#0xb]  ; waitcommand2
000102  7260              STRB     r0,[r4,#9]
;;;309    					waitcommand2 = 0;
000104  72e5              STRB     r5,[r4,#0xb]
                  |L24.262|
;;;310    				}
;;;311    			}
;;;312    			watchtest ++;
000106  6d60              LDR      r0,[r4,#0x54]  ; watchtest
000108  1c40              ADDS     r0,r0,#1
00010a  6560              STR      r0,[r4,#0x54]  ; watchtest
                  |L24.268|
;;;313    		}
;;;314    	}	
;;;315    
;;;316    	
;;;317    	USART3_Recive_flg = 0;
00010c  7065              STRB     r5,[r4,#1]
;;;318    }
00010e  bdf8              POP      {r3-r7,pc}
;;;319    
                          ENDP

                  |L24.272|
                          DCD      ||area_number.32||+0x15c
                  |L24.276|
                          DCD      ||.data||
                  |L24.280|
                          DCD      Para

                          AREA ||i.USART3WriteDMA||, CODE, READONLY, ALIGN=2

                  USART3WriteDMA PROC
;;;2409   
;;;2410   void USART3WriteDMA(u16 len)
000000  b570              PUSH     {r4-r6,lr}
;;;2411   {
000002  4604              MOV      r4,r0
;;;2412       USART_ClearFlag(USART3, USART_FLAG_TC);     //串口发送准备
000004  2140              MOVS     r1,#0x40
000006  4809              LDR      r0,|L25.44|
000008  f7fffffe          BL       USART_ClearFlag
;;;2413   	DMA_Cmd(DMA1_Stream3, DISABLE);//关闭DMA 数据流3
00000c  4d08              LDR      r5,|L25.48|
00000e  2100              MOVS     r1,#0
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       DMA_Cmd
;;;2414       DMA_SetCurrDataCounter(DMA1_Stream3,len);//设置DMA发生长度
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       DMA_SetCurrDataCounter
;;;2415   	DMA_Cmd(DMA1_Stream3, ENABLE);// 打开DMA 数据流3
00001e  4628              MOV      r0,r5
000020  e8bd4070          POP      {r4-r6,lr}
000024  2101              MOVS     r1,#1
000026  f7ffbffe          B.W      DMA_Cmd
;;;2416      
;;;2417   }
;;;2418   
                          ENDP

00002a  0000              DCW      0x0000
                  |L25.44|
                          DCD      0x40004800
                  |L25.48|
                          DCD      0x40026058

                          AREA ||i.USART3_Configuration||, CODE, READONLY, ALIGN=2

                  USART3_Configuration PROC
;;;2356   
;;;2357   void USART3_Configuration()//???????
000000  b570              PUSH     {r4-r6,lr}
;;;2358   {  
;;;2359       GPIO_InitTypeDef GPIO_InitStructure;
;;;2360   	USART_InitTypeDef USART_InitStructure;
;;;2361   	
;;;2362   	/* config USART1 clock */
;;;2363   	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
000002  2101              MOVS     r1,#1
000004  b088              SUB      sp,sp,#0x20           ;2358
000006  0488              LSLS     r0,r1,#18
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;2364   //    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE); //?? GPIOA ??
;;;2365       
;;;2366   	GPIO_PinAFConfig(GPIOD,GPIO_PinSource8,GPIO_AF_USART3);
00000c  4c2a              LDR      r4,|L26.184|
00000e  2207              MOVS     r2,#7
000010  2108              MOVS     r1,#8
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2367   	GPIO_PinAFConfig(GPIOD,GPIO_PinSource9,GPIO_AF_USART3);
000018  2207              MOVS     r2,#7
00001a  2109              MOVS     r1,#9
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2368       
;;;2369   
;;;2370       
;;;2371       
;;;2372   	/* USART1 GPIO config */
;;;2373   	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;2374   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
000022  15a0              ASRS     r0,r4,#22
;;;2375   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000024  2502              MOVS     r5,#2
000026  9004              STR      r0,[sp,#0x10]
000028  f88d5014          STRB     r5,[sp,#0x14]
;;;2376   //     GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //??????
;;;2377   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00002c  f88d5015          STRB     r5,[sp,#0x15]
;;;2378   	GPIO_Init(GPIOD, &GPIO_InitStructure);    
000030  a904              ADD      r1,sp,#0x10
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       GPIO_Init
;;;2379   	/* Configure USART1 Rx (PA.10) as input floating */
;;;2380   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
000038  1560              ASRS     r0,r4,#21
;;;2381       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00003a  9004              STR      r0,[sp,#0x10]
00003c  f88d5014          STRB     r5,[sp,#0x14]
;;;2382   	GPIO_Init(GPIOD, &GPIO_InitStructure);
000040  a904              ADD      r1,sp,#0x10
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       GPIO_Init
;;;2383       
;;;2384   
;;;2385   	
;;;2386   	/* USART1 mode config */
;;;2387   	USART_InitStructure.USART_BaudRate = 9600;
;;;2388   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000048  2400              MOVS     r4,#0
00004a  f44f5016          MOV      r0,#0x2580            ;2387
00004e  9000              STR      r0,[sp,#0]
;;;2389   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2390   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000050  f8ad4008          STRH     r4,[sp,#8]
;;;2391   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2392   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000054  200c              MOVS     r0,#0xc
;;;2393   	USART_Init(USART3, &USART_InitStructure);
000056  4e19              LDR      r6,|L26.188|
000058  f8ad4004          STRH     r4,[sp,#4]            ;2388
00005c  f8ad000a          STRH     r0,[sp,#0xa]          ;2392
000060  f8ad4006          STRH     r4,[sp,#6]            ;2389
000064  f8ad400c          STRH     r4,[sp,#0xc]          ;2391
000068  4669              MOV      r1,sp
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       USART_Init
;;;2394       
;;;2395   
;;;2396   	
;;;2397   	/******????????******************/
;;;2398   	USART_ITConfig(USART3, USART_IT_IDLE, ENABLE);
000070  2201              MOVS     r2,#1
000072  f2404124          MOV      r1,#0x424
000076  4630              MOV      r0,r6
000078  f7fffffe          BL       USART_ITConfig
00007c  f44f60e0          MOV      r0,#0x700
000080  f7fffffe          BL       NVIC_PriorityGroupConfig
000084  2027              MOVS     r0,#0x27
000086  f88d0018          STRB     r0,[sp,#0x18]
00008a  f88d4019          STRB     r4,[sp,#0x19]
00008e  f88d501a          STRB     r5,[sp,#0x1a]
000092  2001              MOVS     r0,#1
000094  f88d001b          STRB     r0,[sp,#0x1b]
000098  a806              ADD      r0,sp,#0x18
00009a  f7fffffe          BL       NVIC_Init
;;;2399   	USART3_NVIC_Config();//??????
;;;2400   	USART3_DMA_init();
00009e  f7fffffe          BL       USART3_DMA_init
;;;2401   	USART_Cmd(USART3, ENABLE);//????1
0000a2  2101              MOVS     r1,#1
0000a4  4630              MOV      r0,r6
0000a6  f7fffffe          BL       USART_Cmd
;;;2402       USART_ClearFlag(USART3, USART_FLAG_TC);
0000aa  2140              MOVS     r1,#0x40
0000ac  4630              MOV      r0,r6
0000ae  f7fffffe          BL       USART_ClearFlag
;;;2403       
;;;2404     
;;;2405       
;;;2406   	
;;;2407   }
0000b2  b008              ADD      sp,sp,#0x20
0000b4  bd70              POP      {r4-r6,pc}
;;;2408   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L26.184|
                          DCD      0x40020c00
                  |L26.188|
                          DCD      0x40004800

                          AREA ||i.USART3_DMA_init||, CODE, READONLY, ALIGN=2

                  USART3_DMA_init PROC
;;;2257   
;;;2258   static void USART3_DMA_init(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2259   {
;;;2260       DMA_InitTypeDef DMA_InitStructure;
;;;2261       NVIC_InitTypeDef NVIC_InitStructure;
;;;2262   	
;;;2263   	//串口3使用DMA1 发送为数据流3  通道4   
;;;2264       //F4与F1DMA多了一个数据流的说法详细参考中文数据手册DMA 表35
;;;2265       /* 1.使能DMA2时钟 */
;;;2266   	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
000004  2101              MOVS     r1,#1
000006  b091              SUB      sp,sp,#0x44           ;2259
000008  0548              LSLS     r0,r1,#21
00000a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;2267   	
;;;2268   	//串口发送DMA配置
;;;2269       /* 2.配置使用DMA发送数据 */
;;;2270       DMA_DeInit(DMA1_Stream3); //DMA1 数据流 3
00000e  f8dfa0d8          LDR      r10,|L27.232|
000012  4650              MOV      r0,r10
000014  f7fffffe          BL       DMA_DeInit
;;;2271       DMA_InitStructure.DMA_Channel = DMA_Channel_4;  /* 配置DMA1通道4 */
000018  f04f6600          MOV      r6,#0x8000000
;;;2272       DMA_InitStructure.DMA_PeripheralBaseAddr  = (uint32_t)(&(USART3->DR)); /* 目的 */
;;;2273       DMA_InitStructure.DMA_Memory0BaseAddr     = (uint32_t)MasterSendbuf; /*源内存地址*/
00001c  4834              LDR      r0,|L27.240|
00001e  4f33              LDR      r7,|L27.236|
000020  9600              STR      r6,[sp,#0]
000022  e9cd7001          STRD     r7,r0,[sp,#4]
;;;2274       DMA_InitStructure.DMA_DIR                 = DMA_DIR_MemoryToPeripheral;  /*方向内            
;;;2275                                                                               存到外设*/
;;;2276       DMA_InitStructure.DMA_BufferSize          = MAXRxTxLen;                    
;;;2277       /* 长度 */                  
;;;2278       DMA_InitStructure.DMA_PeripheralInc       = DMA_PeripheralInc_Disable;    
000026  2400              MOVS     r4,#0
000028  2040              MOVS     r0,#0x40              ;2274
00002a  f04f0880          MOV      r8,#0x80              ;2276
;;;2279       /* 外设地址是否自增 */
;;;2280       DMA_InitStructure.DMA_MemoryInc           = DMA_MemoryInc_Enable;        
00002e  f44f6980          MOV      r9,#0x400
000032  9003              STR      r0,[sp,#0xc]
000034  e9cd8404          STRD     r8,r4,[sp,#0x10]
000038  e9cd9406          STRD     r9,r4,[sp,#0x18]
;;;2281       /* 内存地址是否自增 */
;;;2282       DMA_InitStructure.DMA_PeripheralDataSize  = DMA_PeripheralDataSize_Byte;  
;;;2283       /* 目的数据带宽 */
;;;2284       DMA_InitStructure.DMA_MemoryDataSize      = DMA_MemoryDataSize_Byte;      
;;;2285       /* 源数据宽度 */
;;;2286       DMA_InitStructure.DMA_Mode                = DMA_Mode_Normal;             
;;;2287       /* 单次传输模式/循环传输模式 */
;;;2288       DMA_InitStructure.DMA_Priority            = DMA_Priority_High;             
00003c  02c0              LSLS     r0,r0,#11
00003e  9408              STR      r4,[sp,#0x20]
000040  e9cd4009          STRD     r4,r0,[sp,#0x24]
;;;2289       /* DMA优先级 */
;;;2290       DMA_InitStructure.DMA_FIFOMode            = DMA_FIFOMode_Disable;          
;;;2291       /* FIFO模式/直接模式 */
;;;2292       DMA_InitStructure.DMA_FIFOThreshold       = DMA_FIFOThreshold_HalfFull; 
000044  2501              MOVS     r5,#1
000046  e9cd450b          STRD     r4,r5,[sp,#0x2c]
;;;2293       /* FIFO大小 */
;;;2294       DMA_InitStructure.DMA_MemoryBurst         = DMA_MemoryBurst_Single;      
;;;2295        /* 单次传输 */
;;;2296       DMA_InitStructure.DMA_PeripheralBurst     = DMA_PeripheralBurst_Single;
00004a  940d              STR      r4,[sp,#0x34]
;;;2297       /* 3. 配置DMA */
;;;2298       DMA_Init(DMA1_Stream3, &DMA_InitStructure);
00004c  4669              MOV      r1,sp
00004e  4650              MOV      r0,r10
000050  940e              STR      r4,[sp,#0x38]
000052  f7fffffe          BL       DMA_Init
;;;2299       /* 4.使能DMA中断 */
;;;2300       DMA_ITConfig(DMA1_Stream3, DMA_IT_TC, ENABLE);
000056  2201              MOVS     r2,#1
000058  2110              MOVS     r1,#0x10
00005a  4650              MOV      r0,r10
00005c  f7fffffe          BL       DMA_ITConfig
;;;2301       /* 5.使能串口的DMA发送接口 */
;;;2302       USART_DMACmd(USART3, USART_DMAReq_Tx, ENABLE);
000060  f1a70b04          SUB      r11,r7,#4
000064  2201              MOVS     r2,#1
000066  2180              MOVS     r1,#0x80
000068  4658              MOV      r0,r11
00006a  f7fffffe          BL       USART_DMACmd
;;;2303       /* 6. 配置DMA中断优先级 */
;;;2304       NVIC_InitStructure.NVIC_IRQChannel                   = DMA1_Stream3_IRQn;  
00006e  200e              MOVS     r0,#0xe
000070  f88d003c          STRB     r0,[sp,#0x3c]
;;;2305       //  DMA发生中断         
;;;2306       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;          
000074  f88d403d          STRB     r4,[sp,#0x3d]
;;;2307       NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 4; 
000078  2004              MOVS     r0,#4
00007a  f88d003e          STRB     r0,[sp,#0x3e]
;;;2308       NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;
00007e  f88d503f          STRB     r5,[sp,#0x3f]
;;;2309       NVIC_Init(&NVIC_InitStructure);
000082  a80f              ADD      r0,sp,#0x3c
000084  f7fffffe          BL       NVIC_Init
;;;2310   	
;;;2311       /* 7.不使能DMA */                  
;;;2312       DMA_Cmd(DMA1_Stream3, DISABLE);// 数据流2
000088  2100              MOVS     r1,#0
00008a  4650              MOV      r0,r10
00008c  f7fffffe          BL       DMA_Cmd
;;;2313   	//************************DMA接收***********************//
;;;2314   	/* 2.配置使用DMA接收数据 */
;;;2315       DMA_DeInit(DMA1_Stream1); 
000090  f8dfa054          LDR      r10,|L27.232|
000094  f1aa0a30          SUB      r10,r10,#0x30
000098  4650              MOV      r0,r10
00009a  f7fffffe          BL       DMA_DeInit
;;;2316       DMA_InitStructure.DMA_Channel             = DMA_Channel_4;               
;;;2317       /* 配置DMA通道 */
;;;2318       DMA_InitStructure.DMA_PeripheralBaseAddr  = (uint32_t)(&(USART3->DR));   
;;;2319       /* 源地址 */
;;;2320       DMA_InitStructure.DMA_Memory0BaseAddr     = (uint32_t)MasterRecbuf;    
00009e  4814              LDR      r0,|L27.240|
0000a0  a902              ADD      r1,sp,#8
0000a2  3080              ADDS     r0,r0,#0x80
0000a4  e8810111          STM      r1,{r0,r4,r8}
0000a8  e9cd4905          STRD     r4,r9,[sp,#0x14]
;;;2321       /* 目标地址 */
;;;2322       DMA_InitStructure.DMA_DIR                 = DMA_DIR_PeripheralToMemory;    
;;;2323       /* 方向外设向内存  */
;;;2324       DMA_InitStructure.DMA_BufferSize          = MAXRxTxLen;                    		
;;;2325       /* 长度 */                  
;;;2326       DMA_InitStructure.DMA_PeripheralInc       = DMA_PeripheralInc_Disable;    
;;;2327         /* 外设地址是否自增 */
;;;2328       DMA_InitStructure.DMA_MemoryInc           = DMA_MemoryInc_Enable;         
;;;2329       /* 内存地址是否自增 */
;;;2330       DMA_InitStructure.DMA_PeripheralDataSize  = DMA_MemoryDataSize_Byte;     
;;;2331       /* 目的数据带宽 */
;;;2332       DMA_InitStructure.DMA_MemoryDataSize      = DMA_MemoryDataSize_Byte;      
;;;2333       /* 源数据宽度 */
;;;2334       DMA_InitStructure.DMA_Mode                = DMA_Mode_Circular;             
0000ac  0228              LSLS     r0,r5,#8
0000ae  e9cd4008          STRD     r4,r0,[sp,#0x20]
;;;2335       /*循环传输模式 */
;;;2336       DMA_InitStructure.DMA_Priority            = DMA_Priority_VeryHigh;        
0000b2  a90a              ADD      r1,sp,#0x28
0000b4  9407              STR      r4,[sp,#0x1c]         ;2334
0000b6  f44f3040          MOV      r0,#0x30000
0000ba  e8810031          STM      r1,{r0,r4,r5}
;;;2337       /* DMA优先级 */
;;;2338       DMA_InitStructure.DMA_FIFOMode            = DMA_FIFOMode_Disable;         
;;;2339        /* FIFO模式/直接模式 */
;;;2340       DMA_InitStructure.DMA_FIFOThreshold       = DMA_FIFOThreshold_HalfFull; 
;;;2341       /* FIFO大小 */
;;;2342       DMA_InitStructure.DMA_MemoryBurst         = DMA_MemoryBurst_Single;       
;;;2343       /* 单次传输 */
;;;2344       DMA_InitStructure.DMA_PeripheralBurst     = DMA_PeripheralBurst_Single;
0000be  940d              STR      r4,[sp,#0x34]
;;;2345       /* 3. 配置DMA */
;;;2346       DMA_Init(DMA1_Stream1, &DMA_InitStructure);
0000c0  4669              MOV      r1,sp
0000c2  4650              MOV      r0,r10
0000c4  940e              STR      r4,[sp,#0x38]
0000c6  e9cd6700          STRD     r6,r7,[sp,#0]
0000ca  f7fffffe          BL       DMA_Init
;;;2347       /* 4.由于接收不需要DMA中断，故不设置DMA中断 */
;;;2348       /* 5.使能串口的DMA接收 */
;;;2349       USART_DMACmd(USART3,USART_DMAReq_Rx,ENABLE);
0000ce  2201              MOVS     r2,#1
0000d0  2140              MOVS     r1,#0x40
0000d2  4658              MOV      r0,r11
0000d4  f7fffffe          BL       USART_DMACmd
;;;2350       /* 6. 由于接收不需要DMA中断，故不能配置DMA中断优先级 */
;;;2351       /* 7.使能DMA */ 
;;;2352       DMA_Cmd(DMA1_Stream1,ENABLE);
0000d8  2101              MOVS     r1,#1
0000da  4650              MOV      r0,r10
0000dc  f7fffffe          BL       DMA_Cmd
;;;2353   }
0000e0  b011              ADD      sp,sp,#0x44
0000e2  e8bd8ff0          POP      {r4-r11,pc}
;;;2354   
                          ENDP

0000e6  0000              DCW      0x0000
                  |L27.232|
                          DCD      0x40026058
                  |L27.236|
                          DCD      0x40004804
                  |L27.240|
                          DCD      ||area_number.32||+0xdc

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;2434   
;;;2435   void USART3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2436   {
;;;2437       u8 Clear = Clear;
;;;2438       u16 num = 0;
;;;2439            
;;;2440       if(USART_GetITStatus(USART3, USART_IT_IDLE) != RESET)
000002  4c18              LDR      r4,|L28.100|
000004  f2404124          MOV      r1,#0x424
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USART_GetITStatus
00000e  2800              CMP      r0,#0
000010  d024              BEQ      |L28.92|
;;;2441       {
;;;2442           Clear = USART3->SR;  //读SR寄存器清除                                                            
000012  8820              LDRH     r0,[r4,#0]
;;;2443          
;;;2444           Clear = USART3->DR;  //读DR寄存器清除                                                        
000014  1d20              ADDS     r0,r4,#4
000016  8800              LDRH     r0,[r0,#0]
;;;2445           DMA_Cmd(DMA1_Stream1,DISABLE);   //关闭DMA
000018  4d13              LDR      r5,|L28.104|
00001a  2100              MOVS     r1,#0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       DMA_Cmd
;;;2446   		DMA_ClearFlag(DMA1_Stream1,DMA_FLAG_TCIF2);
000022  f04f5181          MOV      r1,#0x10200000
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       DMA_ClearFlag
;;;2447           num = DMA_GetCurrDataCounter(DMA1_Stream1); //得到真正接收数据个数
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       DMA_GetCurrDataCounter
;;;2448           if(num < MAXRxTxLen)
;;;2449           {
;;;2450               USART3_Recive_leng   = MAXRxTxLen - num;
000032  4c0e              LDR      r4,|L28.108|
000034  2880              CMP      r0,#0x80              ;2448
000036  d212              BCS      |L28.94|
000038  f1c00080          RSB      r0,r0,#0x80
00003c  b2c0              UXTB     r0,r0
00003e  7020              STRB     r0,[r4,#0]
;;;2451           }else
;;;2452           {
;;;2453               USART3_Recive_leng = MAXRxTxLen;
;;;2454           }
;;;2455            
;;;2456           if(USART3_Recive_leng > MAXRxTxLen)
000040  2880              CMP      r0,#0x80
000042  d901              BLS      |L28.72|
;;;2457           {
;;;2458               USART3_Recive_leng = 0;  //避免接收数据超界                                               
000044  2000              MOVS     r0,#0
                  |L28.70|
000046  7020              STRB     r0,[r4,#0]            ;2453
                  |L28.72|
;;;2459           }
;;;2460           DMA_SetCurrDataCounter(DMA1_Stream1,MAXRxTxLen);//设置DMA传输长度                                                        
000048  2180              MOVS     r1,#0x80
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       DMA_SetCurrDataCounter
;;;2461           DMA_Cmd(DMA1_Stream1,ENABLE);  //开启DMA
000050  2101              MOVS     r1,#1
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       DMA_Cmd
;;;2462           USART3_Recive_flg = 1;    //数据接收成功                                                  
000058  2001              MOVS     r0,#1
00005a  7060              STRB     r0,[r4,#1]
                  |L28.92|
;;;2463           
;;;2464       } 
;;;2465   }
00005c  bd70              POP      {r4-r6,pc}
                  |L28.94|
00005e  2080              MOVS     r0,#0x80              ;2453
000060  e7f1              B        |L28.70|
;;;2466   
                          ENDP

000062  0000              DCW      0x0000
                  |L28.100|
                          DCD      0x40004800
                  |L28.104|
                          DCD      0x40026028
                  |L28.108|
                          DCD      ||.data||

                          AREA ||i.USART_Configuration||, CODE, READONLY, ALIGN=2

                  USART_Configuration PROC
;;;2151   
;;;2152   void USART_Configuration(void)//串口初始化函数
000000  b570              PUSH     {r4-r6,lr}
;;;2153   {  
000002  b088              SUB      sp,sp,#0x20
;;;2154   	GPIO_InitTypeDef GPIO_InitStructure;
;;;2155   	USART_InitTypeDef USART_InitStructure;
;;;2156   	
;;;2157   	/* config USART1 clock */
;;;2158   	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
000004  2101              MOVS     r1,#1
000006  2010              MOVS     r0,#0x10
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;2159   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1);
00000c  4e2a              LDR      r6,|L29.184|
00000e  2207              MOVS     r2,#7
000010  2109              MOVS     r1,#9
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2160   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1);
000018  2207              MOVS     r2,#7
00001a  210a              MOVS     r1,#0xa
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2161   	/* USART1 GPIO config */
;;;2162   	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;2163   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
;;;2164   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000022  2502              MOVS     r5,#2
000024  1570              ASRS     r0,r6,#21             ;2163
000026  f88d5004          STRB     r5,[sp,#4]
;;;2165   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
00002c  9000              STR      r0,[sp,#0]            ;2164
00002e  f88d4006          STRB     r4,[sp,#6]
;;;2166   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f88d5005          STRB     r5,[sp,#5]
;;;2167   	GPIO_Init(GPIOA, &GPIO_InitStructure);    
000036  4669              MOV      r1,sp
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GPIO_Init
;;;2168   	/* Configure USART1 Rx (PA.10) as input floating */
;;;2169   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
00003e  0268              LSLS     r0,r5,#9
;;;2170   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000040  9000              STR      r0,[sp,#0]
000042  f88d5004          STRB     r5,[sp,#4]
;;;2171   	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;2172   	
;;;2173   	/* USART1 mode config */
;;;2174   	USART_InitStructure.USART_BaudRate = 9600;
00004e  f44f5016          MOV      r0,#0x2580
;;;2175   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000052  9002              STR      r0,[sp,#8]
;;;2176   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2177   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000054  f8ad4010          STRH     r4,[sp,#0x10]
;;;2178   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2179   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
;;;2180   	USART_Init(USART1, &USART_InitStructure);
00005a  4d18              LDR      r5,|L29.188|
00005c  f8ad400c          STRH     r4,[sp,#0xc]          ;2175
000060  f8ad0012          STRH     r0,[sp,#0x12]         ;2179
000064  f8ad400e          STRH     r4,[sp,#0xe]          ;2176
000068  f8ad4014          STRH     r4,[sp,#0x14]         ;2178
00006c  a902              ADD      r1,sp,#8
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       USART_Init
;;;2181   	
;;;2182   	/******使能串口接收中断******************/
;;;2183   	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	
000074  2201              MOVS     r2,#1
000076  f2405125          MOV      r1,#0x525
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_ITConfig
;;;2184   	USART_Cmd(USART1, ENABLE);//使能串口1
000080  2101              MOVS     r1,#1
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USART_Cmd
;;;2185   	USART_ClearFlag(USART1, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       USART_ClearFlag
000090  f44f60e0          MOV      r0,#0x700
000094  f7fffffe          BL       NVIC_PriorityGroupConfig
000098  2025              MOVS     r0,#0x25
00009a  f88d0018          STRB     r0,[sp,#0x18]
00009e  f88d4019          STRB     r4,[sp,#0x19]
0000a2  2004              MOVS     r0,#4
0000a4  f88d001a          STRB     r0,[sp,#0x1a]
0000a8  2001              MOVS     r0,#1
0000aa  f88d001b          STRB     r0,[sp,#0x1b]
0000ae  a806              ADD      r0,sp,#0x18
0000b0  f7fffffe          BL       NVIC_Init
;;;2186     
;;;2187   	USART1_NVIC_Config();//串口中断配置
;;;2188   }			
0000b4  b008              ADD      sp,sp,#0x20
0000b6  bd70              POP      {r4-r6,pc}
;;;2189   
                          ENDP

                  |L29.184|
                          DCD      0x40020000
                  |L29.188|
                          DCD      0x40011000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UART_Buffer_Rece
                          %        16

                          AREA ||area_number.32||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.bss||
                  UART_Buffer_Send
                          %        20
                  USART_RX_BUF
                          %        200
                  MasterSendbuf
                          %        128
                  MasterRecbuf
                          %        128

                          AREA ||.data||, DATA, ALIGN=2

                  USART3_Recive_leng
000000  00                DCB      0x00
                  USART3_Recive_flg
000001  00                DCB      0x00
                  UART_Buffer_Send_pointer
000002  00                DCB      0x00
                  |symbol_number.109|
000003  00                DCB      0x00
                  Transmit_BUFFERsize
000004  00                DCB      0x00
                  MODE
000005  00                DCB      0x00
                  mainswitch
000006  00                DCB      0x00
                  Rraly
000007  00                DCB      0x00
                  sendwait
000008  00                DCB      0x00
                  listsend
000009  00                DCB      0x00
                  waitcommand1
00000a  00                DCB      0x00
                  waitcommand2
00000b  00                DCB      0x00
                  listocwatch
00000c  00                DCB      0x00
                  listpowwatch1
00000d  00                DCB      0x00
                  listpowwatch2
00000e  0000              DCB      0x00,0x00
                  USART_RX_STA
000010  0000              DCW      0x0000
                  USART_RX_CNT
000012  0000              DCW      0x0000
                  ||x1||
                          DCD      0x00000000
                  ||y1||
                          DCD      0x00000000
                  ||x2||
                          DCD      0x00000000
                  ||y2||
                          DCD      0x00000000
                  ||x3||
                          DCD      0x00000000
                  ||y3||
                          DCD      0x00000000
                  ||x4||
                          DCD      0x00000000
                  ||y4||
                          DCD      0x00000000
                  ||x5||
                          DCD      0x00000000
                  ||y5||
                          DCD      0x00000000
                  ||x6||
                          DCD      0x00000000
                  ||y6||
                          DCD      0x00000000
                  ||x7||
                          DCD      0x00000000
                  ||y7||
                          DCD      0x00000000
                  ||x8||
                          DCD      0x00000000
                  ||y8||
                          DCD      0x00000000
                  watchtest
                          DCD      0x00000000
                  CmdStr
000058  53544154          DCB      0x53,0x54,0x41,0x54
00005c  55535f00          DCB      0x55,0x53,0x5f,0x00
000060  004d4f44          DCB      0x00,0x4d,0x4f,0x44
000064  5f000000          DCB      0x5f,0x00,0x00,0x00
000068  00005452          DCB      0x00,0x00,0x54,0x52
00006c  49475f00          DCB      0x49,0x47,0x5f,0x00
000070  00000053          DCB      0x00,0x00,0x00,0x53
000074  45545041          DCB      0x45,0x54,0x50,0x41
000078  52415f00          DCB      0x52,0x41,0x5f,0x00
00007c  5345544c          DCB      0x53,0x45,0x54,0x4c
000080  4953545f          DCB      0x49,0x53,0x54,0x5f
000084  004f5052          DCB      0x00,0x4f,0x50,0x52
000088  45534554          DCB      0x45,0x53,0x45,0x54
00008c  5f00504f          DCB      0x5f,0x00,0x50,0x4f
000090  57495f00          DCB      0x57,0x49,0x5f,0x00
000094  00000041          DCB      0x00,0x00,0x00,0x41
000098  4443565f          DCB      0x44,0x43,0x56,0x5f
00009c  00000000          DCB      0x00,0x00,0x00,0x00
0000a0  4c4f5749          DCB      0x4c,0x4f,0x57,0x49
0000a4  5f000000          DCB      0x5f,0x00,0x00,0x00
0000a8  00484f52          DCB      0x00,0x48,0x4f,0x52
0000ac  4c5f0000          DCB      0x4c,0x5f,0x00,0x00
0000b0  00004c56          DCB      0x00,0x00,0x4c,0x56
0000b4  4c5f0000          DCB      0x4c,0x5f,0x00,0x00
0000b8  00000053          DCB      0x00,0x00,0x00,0x53
0000bc  57495443          DCB      0x57,0x49,0x54,0x43
0000c0  485f0000          DCB      0x48,0x5f,0x00,0x00
0000c4  43414c56          DCB      0x43,0x41,0x4c,0x56
0000c8  5f000000          DCB      0x5f,0x00,0x00,0x00
0000cc  0043414c          DCB      0x00,0x43,0x41,0x4c
0000d0  495f0000          DCB      0x49,0x5f,0x00,0x00
0000d4  00004341          DCB      0x00,0x00,0x43,0x41
0000d8  4c525f00          DCB      0x4c,0x52,0x5f,0x00
0000dc  00000044          DCB      0x00,0x00,0x00,0x44
0000e0  41435f00          DCB      0x41,0x43,0x5f,0x00
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
0000e8  4f564552          DCB      0x4f,0x56,0x45,0x52
0000ec  5f000000          DCB      0x5f,0x00,0x00,0x00
0000f0  0054454d          DCB      0x00,0x54,0x45,0x4d
0000f4  505f0000          DCB      0x50,0x5f,0x00,0x00
0000f8  0000424f          DCB      0x00,0x00,0x42,0x4f
0000fc  4f545f00          DCB      0x4f,0x54,0x5f,0x00
000100  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  UART_Buffer_Size
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=0

                          EXPORTAS ||area_number.36||, ||.data||
                  t_USART
000000  00                DCB      0x00

                          AREA ||area_number.37||, DATA, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.data||
                  powsetdelay
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\drive\\usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_usart_c_7cc17ae7____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REVSH|
#line 144
|__asm___7_usart_c_7cc17ae7____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
