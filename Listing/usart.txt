; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\usart.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\usart.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=525 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\usart.crf --no_multibyte_chars ..\drive\usart.c]
                          THUMB

                          AREA ||i.CalHandle||, CODE, READONLY, ALIGN=2

                  CalHandle PROC
;;;507    //校准处理
;;;508    void CalHandle(u8 mode,u8 range,u32 data)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;509    {
;;;510    	if(mode == 0)//测量电压
;;;511    	{
;;;512    		if(range == 0)//低档位低段
;;;513    		{
;;;514    			calflag = 1;
;;;515    			LOAD_V_SW = 0;
;;;516    			x1 = Vmon_Load_value;
000004  4dfc              LDR      r5,|L1.1016|
;;;517    			y1 = data;
;;;518    		}else if(range == 1){//低档位高段
;;;519    			
;;;520    			x2 = Vmon_Load_value;
;;;521    			y2 = data;
;;;522    			CalPara.TestLV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;523    			CalPara.OffsetLV[0] = (float)y2 - CalPara.TestLV[0]*(float)x2;
;;;524    			
;;;525    			Flag_DAC_OFF=0;
000006  f8dfc3f8          LDR      r12,|L1.1024|
00000a  4614              MOV      r4,r2                 ;509
00000c  2300              MOVS     r3,#0                 ;509
00000e  f8dc2000          LDR      r2,[r12,#0]
000012  4ef7              LDR      r6,|L1.1008|
000014  f8df93dc          LDR      r9,|L1.1012|
000018  f8df83e0          LDR      r8,|L1.1020|
;;;526    			calflag = 0;
;;;527    		}else if(range == 2){//高档位低段
;;;528    			calflag = 1;
;;;529    			LOAD_V_SW = 1;
;;;530    			x1 = Vmon_Load_value;
;;;531    			y1 = data;
;;;532    		}else if(range == 3){//高档位高段
;;;533    			
;;;534    			x2 = Vmon_Load_value;
;;;535    			y2 = data;
;;;536    			CalPara.TestLV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;537    			CalPara.OffsetLV[1] = (float)y2 - CalPara.TestLV[1]*(float)x2;
;;;538    				//参数写进FLASH
;;;539    			Flag_DAC_OFF=0;
;;;540    			calflag = 0;
;;;541    		}else if(range == 4){//电源控制电压和测量1
;;;542    			calflag = 1;
;;;543    			Contr_Voltage = 3500;
00001c  f8dfe3e4          LDR      lr,|L1.1028|
;;;544    			Contr_Current = 5000;
000020  f8dfb3e4          LDR      r11,|L1.1032|
;;;545    			OnOff_GPOI_ResetSet(0,1);
;;;546    		}else if(range == 5){//电源控制电压和测量2
;;;547    			x1 = data;
;;;548    			y1 = Contr_Voltage;
;;;549    			x3 = Vmon_POWE_value;
;;;550    			y3 = data;
;;;551    			Contr_Voltage = 10000;
;;;552    			Contr_Current = 5000;
;;;553    		}else if(range == 6){//电源控制电压和测量3
;;;554    			x2 = data;
;;;555    			y2 = Contr_Voltage;
;;;556    			x4 = Vmon_POWE_value;
;;;557    			y4 = data;
;;;558    			
;;;559    			CalPara.SetPV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;560    			CalPara.OffsetSetPV[0] = (float)y2 - CalPara.SetPV[0]*(float)x2;
;;;561    			
;;;562    			CalPara.TestPV[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;563    			CalPara.OffsetPV[0] = (float)y4 - CalPara.TestPV[0]*(float)x4;
;;;564    			
;;;565    			Flag_DAC_OFF=0;
;;;566    			calflag = 0;
;;;567    			Off_GPOI_ResetSet();
;;;568    		}else if(range == 7){//CV控制低档1
;;;569    			LOAD_MODE = 1;
;;;570    			LOAD_V_SW=0;
;;;571    			GPIO_ResetBits(GPIOB,GPIO_Pin_1);//电压档位为低档
;;;572    			calflag = 1;
;;;573    			Contr_Laod = 1000;
000024  f8dfa3e4          LDR      r10,|L1.1036|
000028  edd50a04          VLDR     s1,[r5,#0x10]         ;516
00002c  ed950a05          VLDR     s0,[r5,#0x14]         ;516
000030  edd51a08          VLDR     s3,[r5,#0x20]         ;516
000034  ed951a09          VLDR     s2,[r5,#0x24]         ;516
000038  2701              MOVS     r7,#1                 ;514
00003a  f0220208          BIC      r2,r2,#8              ;525
00003e  b120              CBZ      r0,|L1.74|
;;;574    			OnOff_GPOI_ResetSet(2,1);
;;;575    		}else if(range == 8){//CV控制低档2
;;;576    			LOAD_MODE = 1;
;;;577    			LOAD_V_SW=0;
;;;578    			GPIO_ResetBits(GPIOB,GPIO_Pin_1);//电压档位为低档
;;;579    			x1 = data;
;;;580    			y1 = Contr_Laod;
;;;581    			Contr_Laod = 8000;
;;;582    //			OnOff_GPOI_ResetSet(2,1);
;;;583    		}else if(range == 9){//CV控制低档3
;;;584    			x2 = data;
;;;585    			y2 = Contr_Laod;
;;;586    			CalPara.SetCV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;587    			CalPara.OffsetCV[0] = (float)y2 - CalPara.SetCV[0]*(float)x2;
;;;588    				//参数写进FLASH
;;;589    			Flag_DAC_OFF=0;
;;;590    			calflag = 0;
;;;591    			Off_GPOI_ResetSet();
;;;592    		}else if(range == 10){//CV控制高档1
;;;593    			LOAD_MODE = 1;
;;;594    			LOAD_V_SW=1;
;;;595    			GPIO_SetBits(GPIOB,GPIO_Pin_1);//电压档位为高档
;;;596    			calflag = 1;
;;;597    			Contr_Laod = 1000;
;;;598    			OnOff_GPOI_ResetSet(2,1);
;;;599    		}else if(range == 11){//CV控制高档2
;;;600    			LOAD_MODE = 1;
;;;601    			LOAD_V_SW=1;
;;;602    			GPIO_SetBits(GPIOB,GPIO_Pin_1);//电压档位为高档
;;;603    			x1 = data;
;;;604    			y1 = Contr_Laod;
;;;605    			Contr_Laod = 8000;
;;;606    //			OnOff_GPOI_ResetSet(2,1);
;;;607    		}else if(range == 12){//CV控制高档3
;;;608    			x2 = data;
;;;609    			y2 = Contr_Laod;
;;;610    			CalPara.SetCV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;611    			CalPara.OffsetCV[1] = (float)y2 - CalPara.SetCV[1]*(float)x2;
;;;612    				//参数写进FLASH
;;;613    			Flag_DAC_OFF=0;
;;;614    			calflag = 0;
;;;615    			Off_GPOI_ResetSet();
;;;616    		}
;;;617    	}else if(mode == 1){
000040  2801              CMP      r0,#1
000042  d073              BEQ      |L1.300|
;;;618    		if(range == 0)//负载电流低档位1
;;;619    		{		
;;;620    			LOAD_I_SW = 0;
;;;621    			Contr_Laod = 7000;
;;;622    			calflag = 1;
;;;623    			OnOff_GPOI_ResetSet(2,1);
;;;624    		}
;;;625    		else if(range == 1)//负载电流低档位2
;;;626    		{
;;;627    			LOAD_I_SW = 0;			
;;;628    			x1 = data;
;;;629    			y1 = Contr_Laod;
;;;630    			x3 = Imon_Load_value;
;;;631    			y3 = data;
;;;632    			Contr_Laod = 56000;
;;;633    		}else if(range == 2){//负载电流低档位3
;;;634    			
;;;635    			x2 = data;
;;;636    			y2 = Contr_Laod;
;;;637    			x4 = Imon_Load_value;
;;;638    			y4 = data;
;;;639    			
;;;640    			CalPara.SetLC[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;641    			CalPara.OffsetLC[0] = (float)y2 - CalPara.SetLC[0]*(float)x2;
;;;642    			
;;;643    			CalPara.TestLC[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;644    			CalPara.OffsetTestLC[0] = (float)y4 - CalPara.TestLC[0]*(float)x4;
;;;645    				
;;;646    			Flag_DAC_OFF =0;
;;;647    			calflag = 0;
;;;648    			Off_GPOI_ResetSet();
;;;649    		}else if(range == 3){//负载电流高档位1
;;;650    			LOAD_I_SW = 1;
;;;651    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;652    			Contr_Laod = 6500;
;;;653    			calflag = 1;
;;;654    			OnOff_GPOI_ResetSet(2,1);
;;;655    		}else if(range == 4){//负载电流高档位2
;;;656    			
;;;657    			LOAD_I_SW = 1;
;;;658    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;659    			x1 = data;
;;;660    			y1 = Contr_Laod;
;;;661    			x3 = Imon_Load_value;
;;;662    			y3 = data;
;;;663    			Contr_Laod = 29000;
;;;664    		}else if(range == 5){//负载电流高档位3
;;;665    			
;;;666    			x2 = data;
;;;667    			y2 = Contr_Laod;
;;;668    			x4 = Imon_Load_value;
;;;669    			y4 = data;
;;;670    			
;;;671    			CalPara.SetLC[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;672    			CalPara.OffsetLC[1] = (float)y2 - CalPara.SetLC[1]*(float)x2;
;;;673    			
;;;674    			CalPara.TestLC[1] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;675    			CalPara.OffsetTestLC[1] = (float)y4 - CalPara.TestLC[1]*(float)x4;
;;;676    				
;;;677    			Flag_DAC_OFF =0;
;;;678    			calflag = 0;
;;;679    			Off_GPOI_ResetSet();
;;;680    		}else if(range == 6){//电源电流1
;;;681    			Contr_Voltage = 3500;
;;;682    			Contr_Current = 4000;
;;;683    			calflag = 1;
;;;684    			OnOff_GPOI_ResetSet(0,1);
;;;685    		}else if(range == 7){//电源电流2
;;;686    			
;;;687    			x1 = data;
;;;688    			y1 = Contr_Current;
;;;689    			x3 = Imon_POWE_value;
;;;690    			y3 = data;
;;;691    			Contr_Voltage = 3500;
;;;692    			Contr_Current = 14000;
;;;693    		}else if(range == 8){//电源电流3
;;;694    			
;;;695    			x2 = data;
;;;696    			y2 = Contr_Current;
;;;697    			x4 = Imon_POWE_value;
;;;698    			y4 = data;
;;;699    			
;;;700    			CalPara.SetPC[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;701    			CalPara.OffsetPC[0] = (float)y2 - CalPara.SetPC[0]*(float)x2;
;;;702    			
;;;703    			CalPara.TestPC[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;704    			CalPara.OffsetTestPC[0] = (float)y4 - CalPara.TestPC[0]*(float)x4;
;;;705    			
;;;706    			Flag_DAC_OFF=0;
;;;707    			calflag = 0;
;;;708    			Off_GPOI_ResetSet();
;;;709    		}
;;;710    	}else if(mode == 2){
000044  2802              CMP      r0,#2
000046  d072              BEQ      |L1.302|
000048  e3b4              B        |L1.1972|
                  |L1.74|
00004a  48f1              LDR      r0,|L1.1040|
00004c  b1e9              CBZ      r1,|L1.138|
00004e  2901              CMP      r1,#1                 ;518
000050  d01f              BEQ      |L1.146|
000052  2902              CMP      r1,#2                 ;527
000054  d041              BEQ      |L1.218|
000056  2903              CMP      r1,#3                 ;532
000058  d044              BEQ      |L1.228|
00005a  f2413088          MOV      r0,#0x1388            ;544
00005e  2904              CMP      r1,#4                 ;541
000060  d066              BEQ      |L1.304|
000062  2905              CMP      r1,#5                 ;546
000064  d06c              BEQ      |L1.320|
000066  2906              CMP      r1,#6                 ;553
000068  d07f              BEQ      |L1.362|
00006a  48ea              LDR      r0,|L1.1044|
00006c  2907              CMP      r1,#7                 ;568
00006e  d076              BEQ      |L1.350|
000070  f44f5bfa          MOV      r11,#0x1f40           ;581
000074  2908              CMP      r1,#8                 ;575
000076  d073              BEQ      |L1.352|
000078  2909              CMP      r1,#9                 ;583
00007a  d072              BEQ      |L1.354|
00007c  290a              CMP      r1,#0xa               ;592
00007e  d071              BEQ      |L1.356|
000080  290b              CMP      r1,#0xb               ;599
000082  d070              BEQ      |L1.358|
000084  290c              CMP      r1,#0xc               ;607
000086  d06f              BEQ      |L1.360|
000088  e394              B        |L1.1972|
                  |L1.138|
00008a  7037              STRB     r7,[r6,#0]            ;514
00008c  f8c9301c          STR      r3,[r9,#0x1c]         ;515  ; Run_Control
000090  e026              B        |L1.224|
                  |L1.146|
000092  8800              LDRH     r0,[r0,#0]            ;520  ; Vmon_Load_value
000094  ee014a10          VMOV     s2,r4                 ;522
000098  eeb80a40          VCVT.F32.U32 s0,s0                 ;522
00009c  eef80a60          VCVT.F32.U32 s1,s1                 ;522
0000a0  eeb81a41          VCVT.F32.U32 s2,s2                 ;522
0000a4  e9c50406          STRD     r0,r4,[r5,#0x18]      ;520
0000a8  ee311a40          VSUB.F32 s2,s2,s0              ;522
0000ac  ee000a10          VMOV     s0,r0                 ;522
0000b0  eeb80a40          VCVT.F32.U32 s0,s0                 ;522
0000b4  ee700a60          VSUB.F32 s1,s0,s1              ;522
0000b8  ee810a20          VDIV.F32 s0,s2,s1              ;522
0000bc  ee000a90          VMOV     s1,r0                 ;523
0000c0  eeb81a60          VCVT.F32.U32 s2,s1                 ;523
0000c4  ee004a90          VMOV     s1,r4                 ;523
0000c8  eef80a60          VCVT.F32.U32 s1,s1                 ;523
0000cc  ed880a00          VSTR     s0,[r8,#0]            ;522
0000d0  ee400a41          VMLS.F32 s1,s0,s2              ;523
0000d4  edc80a04          VSTR     s1,[r8,#0x10]         ;523
0000d8  e369              B        |L1.1966|
                  |L1.218|
0000da  7037              STRB     r7,[r6,#0]            ;528
0000dc  f8c9701c          STR      r7,[r9,#0x1c]         ;529  ; Run_Control
                  |L1.224|
0000e0  8800              LDRH     r0,[r0,#0]            ;516  ; Vmon_Load_value
0000e2  e2da              B        |L1.1690|
                  |L1.228|
0000e4  8800              LDRH     r0,[r0,#0]            ;534  ; Vmon_Load_value
0000e6  ee014a10          VMOV     s2,r4                 ;536
0000ea  eeb80a40          VCVT.F32.U32 s0,s0                 ;536
0000ee  eef80a60          VCVT.F32.U32 s1,s1                 ;536
0000f2  eeb81a41          VCVT.F32.U32 s2,s2                 ;536
0000f6  e9c50406          STRD     r0,r4,[r5,#0x18]      ;534
0000fa  ee311a40          VSUB.F32 s2,s2,s0              ;536
0000fe  ee000a10          VMOV     s0,r0                 ;536
000102  eeb80a40          VCVT.F32.U32 s0,s0                 ;536
000106  ee700a60          VSUB.F32 s1,s0,s1              ;536
00010a  ee810a20          VDIV.F32 s0,s2,s1              ;536
00010e  ee000a90          VMOV     s1,r0                 ;537
000112  eeb81a60          VCVT.F32.U32 s2,s1                 ;537
000116  ee004a90          VMOV     s1,r4                 ;537
00011a  eef80a60          VCVT.F32.U32 s1,s1                 ;537
00011e  ed880a01          VSTR     s0,[r8,#4]            ;536
000122  ee400a41          VMLS.F32 s1,s0,s2              ;537
000126  edc80a05          VSTR     s1,[r8,#0x14]         ;537
00012a  e340              B        |L1.1966|
                  |L1.300|
00012c  e0dd              B        |L1.746|
                  |L1.302|
00012e  e242              B        |L1.1462|
                  |L1.304|
000130  7037              STRB     r7,[r6,#0]            ;542
000132  f64052ac          MOV      r2,#0xdac             ;543
000136  f8ae2000          STRH     r2,[lr,#0]            ;543
00013a  f8ab0000          STRH     r0,[r11,#0]           ;544
00013e  e1e0              B        |L1.1282|
                  |L1.320|
000140  612c              STR      r4,[r5,#0x10]         ;548  ; x1
000142  f8be2000          LDRH     r2,[lr,#0]            ;548  ; Contr_Voltage
000146  616a              STR      r2,[r5,#0x14]         ;549  ; y1
000148  4ab3              LDR      r2,|L1.1048|
00014a  8812              LDRH     r2,[r2,#0]            ;549  ; Vmon_POWE_value
00014c  e9c52408          STRD     r2,r4,[r5,#0x20]      ;549
000150  f2427210          MOV      r2,#0x2710            ;551
000154  f8ae2000          STRH     r2,[lr,#0]            ;551
000158  4659              MOV      r1,r11                ;552
00015a  e1e2              B        |L1.1314|
00015c  e005              B        |L1.362|
                  |L1.350|
00015e  e04d              B        |L1.508|
                  |L1.352|
000160  e054              B        |L1.524|
                  |L1.354|
000162  e05b              B        |L1.540|
                  |L1.356|
000164  e07f              B        |L1.614|
                  |L1.358|
000166  e08d              B        |L1.644|
                  |L1.360|
000168  e09a              B        |L1.672|
                  |L1.362|
00016a  61ac              STR      r4,[r5,#0x18]         ;555  ; x2
00016c  f8be1000          LDRH     r1,[lr,#0]            ;555  ; Contr_Voltage
000170  48a9              LDR      r0,|L1.1048|
000172  61e9              STR      r1,[r5,#0x1c]         ;556  ; y2
000174  8800              LDRH     r0,[r0,#0]            ;556  ; Vmon_POWE_value
000176  ee021a10          VMOV     s4,r1                 ;559
00017a  eeb80a40          VCVT.F32.U32 s0,s0                 ;559
00017e  eef80a60          VCVT.F32.U32 s1,s1                 ;559
000182  eeb82a42          VCVT.F32.U32 s4,s4                 ;559
000186  e9c5040a          STRD     r0,r4,[r5,#0x28]      ;556
00018a  ee322a40          VSUB.F32 s4,s4,s0              ;559
00018e  ee004a10          VMOV     s0,r4                 ;559
000192  eeb80a40          VCVT.F32.U32 s0,s0                 ;559
000196  ee700a60          VSUB.F32 s1,s0,s1              ;559
00019a  ee820a20          VDIV.F32 s0,s4,s1              ;559
00019e  ee004a90          VMOV     s1,r4                 ;560
0001a2  eeb82a60          VCVT.F32.U32 s4,s1                 ;560
0001a6  ee001a90          VMOV     s1,r1                 ;560
0001aa  eef80a60          VCVT.F32.U32 s1,s1                 ;560
0001ae  ed880a02          VSTR     s0,[r8,#8]            ;559
0001b2  ee400a42          VMLS.F32 s1,s0,s4              ;560
0001b6  ee004a10          VMOV     s0,r4                 ;562
0001ba  eeb80a40          VCVT.F32.U32 s0,s0                 ;562
0001be  edc80a06          VSTR     s1,[r8,#0x18]         ;560
0001c2  eef80a41          VCVT.F32.U32 s1,s2                 ;562
0001c6  eeb81a61          VCVT.F32.U32 s2,s3                 ;562
0001ca  ee700a60          VSUB.F32 s1,s0,s1              ;562
0001ce  ee000a10          VMOV     s0,r0                 ;562
0001d2  eeb80a40          VCVT.F32.U32 s0,s0                 ;562
0001d6  ee301a41          VSUB.F32 s2,s0,s2              ;562
0001da  ee800a81          VDIV.F32 s0,s1,s2              ;562
0001de  ee000a90          VMOV     s1,r0                 ;563
0001e2  eeb81a60          VCVT.F32.U32 s2,s1                 ;563
0001e6  ee004a90          VMOV     s1,r4                 ;563
0001ea  eef80a60          VCVT.F32.U32 s1,s1                 ;563
0001ee  ed880a03          VSTR     s0,[r8,#0xc]          ;562
0001f2  ee400a41          VMLS.F32 s1,s0,s2              ;563
0001f6  edc80a07          VSTR     s1,[r8,#0x1c]         ;563
0001fa  e173              B        |L1.1252|
                  |L1.508|
0001fc  f8c97018          STR      r7,[r9,#0x18]         ;569  ; Run_Control
000200  f8c9301c          STR      r3,[r9,#0x1c]         ;570  ; Run_Control
000204  2102              MOVS     r1,#2                 ;571
000206  f7fffffe          BL       GPIO_ResetBits
00020a  e033              B        |L1.628|
                  |L1.524|
00020c  f8c97018          STR      r7,[r9,#0x18]         ;576  ; Run_Control
000210  f8c9301c          STR      r3,[r9,#0x1c]         ;577  ; Run_Control
000214  2102              MOVS     r1,#2                 ;578
000216  f7fffffe          BL       GPIO_ResetBits
00021a  e03a              B        |L1.658|
                  |L1.540|
00021c  61ac              STR      r4,[r5,#0x18]         ;585  ; x2
00021e  f8ba0000          LDRH     r0,[r10,#0]           ;585  ; Contr_Laod
000222  eeb80a40          VCVT.F32.U32 s0,s0                 ;586
000226  ee010a10          VMOV     s2,r0                 ;586
00022a  eef80a60          VCVT.F32.U32 s1,s1                 ;586
00022e  61e8              STR      r0,[r5,#0x1c]         ;586  ; y2
000230  eeb81a41          VCVT.F32.U32 s2,s2                 ;586
000234  ee311a40          VSUB.F32 s2,s2,s0              ;586
000238  ee004a10          VMOV     s0,r4                 ;586
00023c  eeb80a40          VCVT.F32.U32 s0,s0                 ;586
000240  ee700a60          VSUB.F32 s1,s0,s1              ;586
000244  ee810a20          VDIV.F32 s0,s2,s1              ;586
000248  ee004a90          VMOV     s1,r4                 ;587
00024c  eeb81a60          VCVT.F32.U32 s2,s1                 ;587
000250  ee000a90          VMOV     s1,r0                 ;587
000254  eef80a60          VCVT.F32.U32 s1,s1                 ;587
000258  ed880a0a          VSTR     s0,[r8,#0x28]         ;586
00025c  ee400a41          VMLS.F32 s1,s0,s2              ;587
000260  edc80a12          VSTR     s1,[r8,#0x48]         ;587
000264  e13e              B        |L1.1252|
                  |L1.614|
000266  f8c97018          STR      r7,[r9,#0x18]         ;593  ; Run_Control
00026a  f8c9701c          STR      r7,[r9,#0x1c]         ;594  ; Run_Control
00026e  2102              MOVS     r1,#2                 ;595
000270  f7fffffe          BL       GPIO_SetBits
                  |L1.628|
000274  7037              STRB     r7,[r6,#0]            ;572
000276  f44f707a          MOV      r0,#0x3e8             ;573
00027a  f8aa0000          STRH     r0,[r10,#0]           ;573
                  |L1.638|
00027e  2101              MOVS     r1,#1                 ;574
000280  2002              MOVS     r0,#2                 ;574
000282  e0d1              B        |L1.1064|
                  |L1.644|
000284  f8c97018          STR      r7,[r9,#0x18]         ;600  ; Run_Control
000288  f8c9701c          STR      r7,[r9,#0x1c]         ;601  ; Run_Control
00028c  2102              MOVS     r1,#2                 ;602
00028e  f7fffffe          BL       GPIO_SetBits
                  |L1.658|
000292  612c              STR      r4,[r5,#0x10]         ;580  ; x1
000294  f8ba1000          LDRH     r1,[r10,#0]           ;580  ; Contr_Laod
000298  4650              MOV      r0,r10                ;580
00029a  6169              STR      r1,[r5,#0x14]         ;581  ; y1
00029c  4659              MOV      r1,r11                ;581
00029e  e0d7              B        |L1.1104|
                  |L1.672|
0002a0  61ac              STR      r4,[r5,#0x18]         ;609  ; x2
0002a2  f8ba0000          LDRH     r0,[r10,#0]           ;609  ; Contr_Laod
0002a6  eeb80a40          VCVT.F32.U32 s0,s0                 ;610
0002aa  ee010a10          VMOV     s2,r0                 ;610
0002ae  eef80a60          VCVT.F32.U32 s1,s1                 ;610
0002b2  61e8              STR      r0,[r5,#0x1c]         ;610  ; y2
0002b4  eeb81a41          VCVT.F32.U32 s2,s2                 ;610
0002b8  ee311a40          VSUB.F32 s2,s2,s0              ;610
0002bc  ee004a10          VMOV     s0,r4                 ;610
0002c0  eeb80a40          VCVT.F32.U32 s0,s0                 ;610
0002c4  ee700a60          VSUB.F32 s1,s0,s1              ;610
0002c8  ee810a20          VDIV.F32 s0,s2,s1              ;610
0002cc  ee004a90          VMOV     s1,r4                 ;611
0002d0  eeb81a60          VCVT.F32.U32 s2,s1                 ;611
0002d4  ee000a90          VMOV     s1,r0                 ;611
0002d8  eef80a60          VCVT.F32.U32 s1,s1                 ;611
0002dc  ed880a0b          VSTR     s0,[r8,#0x2c]         ;610
0002e0  ee400a41          VMLS.F32 s1,s0,s2              ;611
0002e4  edc80a13          VSTR     s1,[r8,#0x4c]         ;611
0002e8  e0fc              B        |L1.1252|
                  |L1.746|
0002ea  b199              CBZ      r1,|L1.788|
0002ec  2901              CMP      r1,#1                 ;625
0002ee  d016              BEQ      |L1.798|
0002f0  2902              CMP      r1,#2                 ;633
0002f2  d022              BEQ      |L1.826|
0002f4  f44f6000          MOV      r0,#0x800             ;651
0002f8  2903              CMP      r1,#3                 ;649
0002fa  d067              BEQ      |L1.972|
0002fc  2904              CMP      r1,#4                 ;655
0002fe  d071              BEQ      |L1.996|
000300  2905              CMP      r1,#5                 ;664
000302  d070              BEQ      |L1.998|
000304  2906              CMP      r1,#6                 ;680
000306  d06f              BEQ      |L1.1000|
000308  4844              LDR      r0,|L1.1052|
00030a  2907              CMP      r1,#7                 ;685
00030c  d06d              BEQ      |L1.1002|
00030e  2908              CMP      r1,#8                 ;693
000310  d06c              BEQ      |L1.1004|
000312  e24f              B        |L1.1972|
                  |L1.788|
000314  f8c93020          STR      r3,[r9,#0x20]         ;620  ; Run_Control
000318  f6413158          MOV      r1,#0x1b58            ;621
00031c  e05e              B        |L1.988|
                  |L1.798|
00031e  f8c93020          STR      r3,[r9,#0x20]         ;627  ; Run_Control
000322  612c              STR      r4,[r5,#0x10]         ;629  ; x1
000324  f8ba1000          LDRH     r1,[r10,#0]           ;629  ; Contr_Laod
000328  4650              MOV      r0,r10                ;629
00032a  6169              STR      r1,[r5,#0x14]         ;630  ; y1
00032c  493c              LDR      r1,|L1.1056|
00032e  8809              LDRH     r1,[r1,#0]            ;630  ; Imon_Load_value
000330  e9c51408          STRD     r1,r4,[r5,#0x20]      ;630
000334  f64d21c0          MOV      r1,#0xdac0            ;632
000338  e08a              B        |L1.1104|
                  |L1.826|
00033a  61ac              STR      r4,[r5,#0x18]         ;636  ; x2
00033c  f8ba1000          LDRH     r1,[r10,#0]           ;636  ; Contr_Laod
000340  4837              LDR      r0,|L1.1056|
000342  61e9              STR      r1,[r5,#0x1c]         ;637  ; y2
000344  8800              LDRH     r0,[r0,#0]            ;637  ; Imon_Load_value
000346  ee021a10          VMOV     s4,r1                 ;640
00034a  eeb80a40          VCVT.F32.U32 s0,s0                 ;640
00034e  eef80a60          VCVT.F32.U32 s1,s1                 ;640
000352  eeb82a42          VCVT.F32.U32 s4,s4                 ;640
000356  e9c5040a          STRD     r0,r4,[r5,#0x28]      ;637
00035a  ee322a40          VSUB.F32 s4,s4,s0              ;640
00035e  ee004a10          VMOV     s0,r4                 ;640
000362  eeb80a40          VCVT.F32.U32 s0,s0                 ;640
000366  ee700a60          VSUB.F32 s1,s0,s1              ;640
00036a  ee820a20          VDIV.F32 s0,s4,s1              ;640
00036e  ee004a90          VMOV     s1,r4                 ;641
000372  eeb82a60          VCVT.F32.U32 s4,s1                 ;641
000376  ee001a90          VMOV     s1,r1                 ;641
00037a  eef80a60          VCVT.F32.U32 s1,s1                 ;641
00037e  ed880a08          VSTR     s0,[r8,#0x20]         ;640
000382  ee400a42          VMLS.F32 s1,s0,s4              ;641
000386  ee004a10          VMOV     s0,r4                 ;643
00038a  eeb80a40          VCVT.F32.U32 s0,s0                 ;643
00038e  edc80a10          VSTR     s1,[r8,#0x40]         ;641
000392  eef80a41          VCVT.F32.U32 s1,s2                 ;643
000396  eeb81a61          VCVT.F32.U32 s2,s3                 ;643
00039a  ee700a60          VSUB.F32 s1,s0,s1              ;643
00039e  ee000a10          VMOV     s0,r0                 ;643
0003a2  eeb80a40          VCVT.F32.U32 s0,s0                 ;643
0003a6  ee301a41          VSUB.F32 s2,s0,s2              ;643
0003aa  ee800a81          VDIV.F32 s0,s1,s2              ;643
0003ae  ee000a90          VMOV     s1,r0                 ;644
0003b2  eeb81a60          VCVT.F32.U32 s2,s1                 ;644
0003b6  ee004a90          VMOV     s1,r4                 ;644
0003ba  eef80a60          VCVT.F32.U32 s1,s1                 ;644
0003be  ed880a0c          VSTR     s0,[r8,#0x30]         ;643
0003c2  ee400a41          VMLS.F32 s1,s0,s2              ;644
0003c6  edc80a14          VSTR     s1,[r8,#0x50]         ;644
0003ca  e08b              B        |L1.1252|
                  |L1.972|
0003cc  f8c97020          STR      r7,[r9,#0x20]         ;650  ; Run_Control
0003d0  4601              MOV      r1,r0                 ;651
0003d2  4814              LDR      r0,|L1.1060|
0003d4  f7fffffe          BL       GPIO_ResetBits
0003d8  f6411164          MOV      r1,#0x1964            ;652
                  |L1.988|
0003dc  f8aa1000          STRH     r1,[r10,#0]           ;621
0003e0  7037              STRB     r7,[r6,#0]            ;622
0003e2  e74c              B        |L1.638|
                  |L1.996|
0003e4  e023              B        |L1.1070|
                  |L1.998|
0003e6  e035              B        |L1.1108|
                  |L1.1000|
0003e8  e082              B        |L1.1264|
                  |L1.1002|
0003ea  e08d              B        |L1.1288|
                  |L1.1004|
0003ec  e09b              B        |L1.1318|
0003ee  0000              DCW      0x0000
                  |L1.1008|
                          DCD      calflag
                  |L1.1012|
                          DCD      Run_Control
                  |L1.1016|
                          DCD      ||.data||
                  |L1.1020|
                          DCD      CalPara
                  |L1.1024|
                          DCD      flagB
                  |L1.1028|
                          DCD      Contr_Voltage
                  |L1.1032|
                          DCD      Contr_Current
                  |L1.1036|
                          DCD      Contr_Laod
                  |L1.1040|
                          DCD      Vmon_Load_value
                  |L1.1044|
                          DCD      0x40020400
                  |L1.1048|
                          DCD      Vmon_POWE_value
                  |L1.1052|
                          DCD      Imon_POWE_value
                  |L1.1056|
                          DCD      Imon_Load_value
                  |L1.1060|
                          DCD      0x40020800
                  |L1.1064|
000428  f7fffffe          BL       OnOff_GPOI_ResetSet
00042c  e1c2              B        |L1.1972|
                  |L1.1070|
00042e  f8c97020          STR      r7,[r9,#0x20]         ;657  ; Run_Control
000432  4601              MOV      r1,r0                 ;658
000434  48e1              LDR      r0,|L1.1980|
000436  f7fffffe          BL       GPIO_ResetBits
00043a  612c              STR      r4,[r5,#0x10]         ;660  ; x1
00043c  f8ba1000          LDRH     r1,[r10,#0]           ;660  ; Contr_Laod
000440  4650              MOV      r0,r10                ;660
000442  6169              STR      r1,[r5,#0x14]         ;661  ; y1
000444  49de              LDR      r1,|L1.1984|
000446  8809              LDRH     r1,[r1,#0]            ;661  ; Imon_Load_value
000448  e9c51408          STRD     r1,r4,[r5,#0x20]      ;661
00044c  f2471148          MOV      r1,#0x7148            ;663
                  |L1.1104|
000450  8001              STRH     r1,[r0,#0]            ;632
000452  e1af              B        |L1.1972|
                  |L1.1108|
000454  61ac              STR      r4,[r5,#0x18]         ;667  ; x2
000456  f8ba1000          LDRH     r1,[r10,#0]           ;667  ; Contr_Laod
00045a  48d9              LDR      r0,|L1.1984|
00045c  61e9              STR      r1,[r5,#0x1c]         ;668  ; y2
00045e  8800              LDRH     r0,[r0,#0]            ;668  ; Imon_Load_value
000460  ee021a10          VMOV     s4,r1                 ;671
000464  eeb80a40          VCVT.F32.U32 s0,s0                 ;671
000468  eef80a60          VCVT.F32.U32 s1,s1                 ;671
00046c  eeb82a42          VCVT.F32.U32 s4,s4                 ;671
000470  e9c5040a          STRD     r0,r4,[r5,#0x28]      ;668
000474  ee322a40          VSUB.F32 s4,s4,s0              ;671
000478  ee004a10          VMOV     s0,r4                 ;671
00047c  eeb80a40          VCVT.F32.U32 s0,s0                 ;671
000480  ee700a60          VSUB.F32 s1,s0,s1              ;671
000484  ee820a20          VDIV.F32 s0,s4,s1              ;671
000488  ee004a90          VMOV     s1,r4                 ;672
00048c  eeb82a60          VCVT.F32.U32 s4,s1                 ;672
000490  ee001a90          VMOV     s1,r1                 ;672
000494  eef80a60          VCVT.F32.U32 s1,s1                 ;672
000498  ed880a09          VSTR     s0,[r8,#0x24]         ;671
00049c  ee400a42          VMLS.F32 s1,s0,s4              ;672
0004a0  ee004a10          VMOV     s0,r4                 ;674
0004a4  eeb80a40          VCVT.F32.U32 s0,s0                 ;674
0004a8  edc80a11          VSTR     s1,[r8,#0x44]         ;672
0004ac  eef80a41          VCVT.F32.U32 s1,s2                 ;674
0004b0  eeb81a61          VCVT.F32.U32 s2,s3                 ;674
0004b4  ee700a60          VSUB.F32 s1,s0,s1              ;674
0004b8  ee000a10          VMOV     s0,r0                 ;674
0004bc  eeb80a40          VCVT.F32.U32 s0,s0                 ;674
0004c0  ee301a41          VSUB.F32 s2,s0,s2              ;674
0004c4  ee800a81          VDIV.F32 s0,s1,s2              ;674
0004c8  ee000a90          VMOV     s1,r0                 ;675
0004cc  eeb81a60          VCVT.F32.U32 s2,s1                 ;675
0004d0  ee004a90          VMOV     s1,r4                 ;675
0004d4  eef80a60          VCVT.F32.U32 s1,s1                 ;675
0004d8  ed880a0d          VSTR     s0,[r8,#0x34]         ;674
0004dc  ee400a41          VMLS.F32 s1,s0,s2              ;675
0004e0  edc80a15          VSTR     s1,[r8,#0x54]         ;675
                  |L1.1252|
0004e4  f8cc2000          STR      r2,[r12,#0]           ;647  ; flagB
0004e8  7033              STRB     r3,[r6,#0]            ;647
0004ea  f7fffffe          BL       Off_GPOI_ResetSet
0004ee  e161              B        |L1.1972|
                  |L1.1264|
0004f0  f64050ac          MOV      r0,#0xdac             ;681
0004f4  f8ae0000          STRH     r0,[lr,#0]            ;681
0004f8  f44f617a          MOV      r1,#0xfa0             ;682
0004fc  f8ab1000          STRH     r1,[r11,#0]           ;682
000500  7037              STRB     r7,[r6,#0]            ;683
                  |L1.1282|
000502  2101              MOVS     r1,#1                 ;545
000504  2000              MOVS     r0,#0                 ;545
000506  e78f              B        |L1.1064|
                  |L1.1288|
000508  612c              STR      r4,[r5,#0x10]         ;688  ; x1
00050a  f8bb2000          LDRH     r2,[r11,#0]           ;688  ; Contr_Current
00050e  4659              MOV      r1,r11                ;688
000510  616a              STR      r2,[r5,#0x14]         ;689  ; y1
000512  8800              LDRH     r0,[r0,#0]            ;689  ; Imon_POWE_value
000514  e9c50408          STRD     r0,r4,[r5,#0x20]      ;689
000518  f64050ac          MOV      r0,#0xdac             ;691
00051c  f8ae0000          STRH     r0,[lr,#0]            ;691
000520  0080              LSLS     r0,r0,#2              ;692
                  |L1.1314|
000522  8008              STRH     r0,[r1,#0]            ;692
000524  e146              B        |L1.1972|
                  |L1.1318|
000526  61ac              STR      r4,[r5,#0x18]         ;696  ; x2
000528  f8bb1000          LDRH     r1,[r11,#0]           ;696  ; Contr_Current
00052c  61e9              STR      r1,[r5,#0x1c]         ;697  ; y2
00052e  8800              LDRH     r0,[r0,#0]            ;697  ; Imon_POWE_value
000530  ee021a10          VMOV     s4,r1                 ;700
000534  eeb80a40          VCVT.F32.U32 s0,s0                 ;700
000538  eef80a60          VCVT.F32.U32 s1,s1                 ;700
00053c  eeb82a42          VCVT.F32.U32 s4,s4                 ;700
000540  e9c5040a          STRD     r0,r4,[r5,#0x28]      ;697
000544  ee322a40          VSUB.F32 s4,s4,s0              ;700
000548  ee004a10          VMOV     s0,r4                 ;700
00054c  eeb80a40          VCVT.F32.U32 s0,s0                 ;700
000550  ee700a60          VSUB.F32 s1,s0,s1              ;700
000554  ee820a20          VDIV.F32 s0,s4,s1              ;700
000558  ee004a90          VMOV     s1,r4                 ;701
00055c  eeb82a60          VCVT.F32.U32 s4,s1                 ;701
000560  ee001a90          VMOV     s1,r1                 ;701
000564  eef80a60          VCVT.F32.U32 s1,s1                 ;701
000568  ed880a0e          VSTR     s0,[r8,#0x38]         ;700
00056c  ee400a42          VMLS.F32 s1,s0,s4              ;701
000570  ee004a10          VMOV     s0,r4                 ;703
000574  eeb80a40          VCVT.F32.U32 s0,s0                 ;703
000578  edc80a16          VSTR     s1,[r8,#0x58]         ;701
00057c  eef80a41          VCVT.F32.U32 s1,s2                 ;703
000580  eeb81a61          VCVT.F32.U32 s2,s3                 ;703
000584  ee700a60          VSUB.F32 s1,s0,s1              ;703
000588  ee000a10          VMOV     s0,r0                 ;703
00058c  eeb80a40          VCVT.F32.U32 s0,s0                 ;703
000590  ee301a41          VSUB.F32 s2,s0,s2              ;703
000594  ee800a81          VDIV.F32 s0,s1,s2              ;703
000598  ee000a90          VMOV     s1,r0                 ;704
00059c  eeb81a60          VCVT.F32.U32 s2,s1                 ;704
0005a0  ee004a90          VMOV     s1,r4                 ;704
0005a4  eef80a60          VCVT.F32.U32 s1,s1                 ;704
0005a8  ed880a0f          VSTR     s0,[r8,#0x3c]         ;703
0005ac  ee400a41          VMLS.F32 s1,s0,s2              ;704
0005b0  edc80a17          VSTR     s1,[r8,#0x5c]         ;704
0005b4  e796              B        |L1.1252|
                  |L1.1462|
;;;711    		if(range == 0)//内阻低档位低段
;;;712    		{
;;;713    			RCONT_SW = 0;
;;;714    			calflag = 1;
;;;715    			x1 = Rmon_value;
0005b6  4883              LDR      r0,|L1.1988|
0005b8  b1c1              CBZ      r1,|L1.1516|
;;;716    			y1 = data;
;;;717    			
;;;718    //			Modify_A_READ=0;
;;;719    //			Modify_A_ACT=0;
;;;720    //			Modify_A_READ = Rmon_value;//测量电阻值
;;;721    //			Modify_A_ACT = data;//读取低段
;;;722    		}else if (range == 1)//内阻低档位高段
0005ba  2901              CMP      r1,#1
0005bc  d019              BEQ      |L1.1522|
;;;723    		{
;;;724    
;;;725    			x2 = Rmon_value;
;;;726    			y2 = data;
;;;727    			CalPara.TestR[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;728    			CalPara.OffsetR[0] = (float)y2 - CalPara.TestR[0]*(float)x2;
;;;729    				//参数写进FLASH
;;;730    			Flag_DAC_OFF=0;
;;;731    			calflag = 0;
;;;732    		}else if(range == 2)//内阻高档位低段
0005be  2902              CMP      r1,#2
0005c0  d07e              BEQ      |L1.1728|
;;;733    		{
;;;734    			RCONT_SW = 1;
;;;735    			calflag = 1;
;;;736    			x1 = Rmon_value;
;;;737    			y1 = data;
;;;738    		}else if (range == 3)//内阻高档位高段
0005c2  2903              CMP      r1,#3
0005c4  d039              BEQ      |L1.1594|
;;;739    		{
;;;740    			
;;;741    			x2 = Rmon_value;
;;;742    			y2 = data;
;;;743    			CalPara.TestR[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;744    			CalPara.OffsetR[1] = (float)y2 - CalPara.TestR[1]*(float)x2;
;;;745    				//参数写进FLASH
;;;746    			Flag_DAC_OFF=0;
;;;747    			calflag = 0;
;;;748    		}else if(range == 4)//识别电阻1低段
;;;749    		{
;;;750    			calflag = 1;
;;;751    //			x1 = (R1mon_value*1000)/(65535-R1mon_value);
;;;752    			x1 = (R1mon_value*1000)/(65535-R1mon_value);
0005c6  f8dfb200          LDR      r11,|L1.1992|
0005ca  f64f7aff          MOV      r10,#0xffff
0005ce  2904              CMP      r1,#4                 ;748
0005d0  d057              BEQ      |L1.1666|
;;;753    			y1 = data;
;;;754    		}else if (range == 5)//识别电阻1高段
0005d2  2905              CMP      r1,#5
0005d4  d064              BEQ      |L1.1696|
;;;755    		{
;;;756    			
;;;757    //			x2 = (R1mon_value*1000)/(65535-R1mon_value);
;;;758    			x2 = (R1mon_value*1000)/(65535-R1mon_value);
;;;759    			y2 = data;
;;;760    			CalPara.TestR1[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;761    			CalPara.OffsetR1[0] = (float)y2 - CalPara.TestR1[0]*(float)x2;
;;;762    				//参数写进FLASH
;;;763    			Flag_DAC_OFF=0;
;;;764    			calflag = 0;
;;;765    		}else if(range == 6)//识别电阻2低段
;;;766    		{
;;;767    			calflag = 1;
;;;768    			x1 = (R2mon_value*1000)/(65535-R2mon_value);
0005d6  f8dfb1f4          LDR      r11,|L1.1996|
0005da  2906              CMP      r1,#6                 ;765
0005dc  d051              BEQ      |L1.1666|
;;;769    			y1 = data;
;;;770    		}else if (range == 7)//识别电阻2高段
0005de  2907              CMP      r1,#7
0005e0  d06f              BEQ      |L1.1730|
;;;771    		{
;;;772    			
;;;773    			x2 = (R2mon_value*1000)/(65535-R2mon_value);
;;;774    			y2 = data;
;;;775    			CalPara.TestR2[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;776    			CalPara.OffsetR2[0] = (float)y2 - CalPara.TestR2[0]*(float)x2;
;;;777    				//参数写进FLASH
;;;778    			Flag_DAC_OFF=0;
;;;779    			calflag = 0;
;;;780    		}else if(range == 8)//内阻高档位低段
0005e2  2908              CMP      r1,#8
0005e4  d06c              BEQ      |L1.1728|
;;;781    		{
;;;782    			RCONT_SW = 1;
;;;783    			calflag = 1;
;;;784    			x1 = Rmon_value;
;;;785    			y1 = data;
;;;786    		}else if (range == 9)//内阻高档位高段
0005e6  2909              CMP      r1,#9
0005e8  d06c              BEQ      |L1.1732|
0005ea  e0e3              B        |L1.1972|
                  |L1.1516|
0005ec  f8c93024          STR      r3,[r9,#0x24]         ;713  ; Run_Control
0005f0  e0b8              B        |L1.1892|
                  |L1.1522|
0005f2  8800              LDRH     r0,[r0,#0]            ;725  ; Rmon_value
0005f4  ee014a10          VMOV     s2,r4                 ;727
0005f8  eeb80a40          VCVT.F32.U32 s0,s0                 ;727
0005fc  eef80a60          VCVT.F32.U32 s1,s1                 ;727
000600  eeb81a41          VCVT.F32.U32 s2,s2                 ;727
000604  e9c50406          STRD     r0,r4,[r5,#0x18]      ;725
000608  ee311a40          VSUB.F32 s2,s2,s0              ;727
00060c  ee000a10          VMOV     s0,r0                 ;727
000610  eeb80a40          VCVT.F32.U32 s0,s0                 ;727
000614  ee700a60          VSUB.F32 s1,s0,s1              ;727
000618  ee810a20          VDIV.F32 s0,s2,s1              ;727
00061c  ee000a90          VMOV     s1,r0                 ;728
000620  eeb81a60          VCVT.F32.U32 s2,s1                 ;728
000624  ee004a90          VMOV     s1,r4                 ;728
000628  eef80a60          VCVT.F32.U32 s1,s1                 ;728
00062c  ed880a18          VSTR     s0,[r8,#0x60]         ;727
000630  ee400a41          VMLS.F32 s1,s0,s2              ;728
000634  edc80a1d          VSTR     s1,[r8,#0x74]         ;728
000638  e0b9              B        |L1.1966|
                  |L1.1594|
00063a  8800              LDRH     r0,[r0,#0]            ;741  ; Rmon_value
00063c  ee014a10          VMOV     s2,r4                 ;743
000640  eeb80a40          VCVT.F32.U32 s0,s0                 ;743
000644  eef80a60          VCVT.F32.U32 s1,s1                 ;743
000648  eeb81a41          VCVT.F32.U32 s2,s2                 ;743
00064c  e9c50406          STRD     r0,r4,[r5,#0x18]      ;741
000650  ee311a40          VSUB.F32 s2,s2,s0              ;743
000654  ee000a10          VMOV     s0,r0                 ;743
000658  eeb80a40          VCVT.F32.U32 s0,s0                 ;743
00065c  ee700a60          VSUB.F32 s1,s0,s1              ;743
000660  ee810a20          VDIV.F32 s0,s2,s1              ;743
000664  ee000a90          VMOV     s1,r0                 ;744
000668  eeb81a60          VCVT.F32.U32 s2,s1                 ;744
00066c  ee004a90          VMOV     s1,r4                 ;744
000670  eef80a60          VCVT.F32.U32 s1,s1                 ;744
000674  ed880a19          VSTR     s0,[r8,#0x64]         ;743
000678  ee400a41          VMLS.F32 s1,s0,s2              ;744
00067c  edc80a1e          VSTR     s1,[r8,#0x78]         ;744
000680  e095              B        |L1.1966|
                  |L1.1666|
000682  7037              STRB     r7,[r6,#0]            ;750
000684  f8bb1000          LDRH     r1,[r11,#0]           ;752  ; R1mon_value
000688  f44f727a          MOV      r2,#0x3e8             ;752
00068c  4351              MULS     r1,r2,r1              ;752
00068e  f8bb2000          LDRH     r2,[r11,#0]           ;752  ; R1mon_value
000692  ebaa0002          SUB      r0,r10,r2             ;752
000696  fbb1f0f0          UDIV     r0,r1,r0              ;752
                  |L1.1690|
00069a  e9c50404          STRD     r0,r4,[r5,#0x10]      ;752
00069e  e089              B        |L1.1972|
                  |L1.1696|
0006a0  f8bb1000          LDRH     r1,[r11,#0]           ;758  ; R1mon_value
0006a4  f44f777a          MOV      r7,#0x3e8             ;758
0006a8  4379              MULS     r1,r7,r1              ;758
0006aa  f8bb7000          LDRH     r7,[r11,#0]           ;758  ; R1mon_value
0006ae  ee014a10          VMOV     s2,r4                 ;760
0006b2  ebaa0007          SUB      r0,r10,r7             ;758
0006b6  fbb1f0f0          UDIV     r0,r1,r0              ;758
0006ba  e9c50406          STRD     r0,r4,[r5,#0x18]      ;758
0006be  e002              B        |L1.1734|
                  |L1.1728|
0006c0  e04e              B        |L1.1888|
                  |L1.1730|
0006c2  e01f              B        |L1.1796|
                  |L1.1732|
0006c4  e050              B        |L1.1896|
                  |L1.1734|
0006c6  eeb81a41          VCVT.F32.U32 s2,s2                 ;760
0006ca  eeb80a40          VCVT.F32.U32 s0,s0                 ;760
0006ce  eef80a60          VCVT.F32.U32 s1,s1                 ;760
0006d2  ee311a40          VSUB.F32 s2,s2,s0              ;760
0006d6  ee000a10          VMOV     s0,r0                 ;760
0006da  eeb80a40          VCVT.F32.U32 s0,s0                 ;760
0006de  ee700a60          VSUB.F32 s1,s0,s1              ;760
0006e2  ee810a20          VDIV.F32 s0,s2,s1              ;760
0006e6  ee000a90          VMOV     s1,r0                 ;761
0006ea  eeb81a60          VCVT.F32.U32 s2,s1                 ;761
0006ee  ee004a90          VMOV     s1,r4                 ;761
0006f2  eef80a60          VCVT.F32.U32 s1,s1                 ;761
0006f6  ed880a1b          VSTR     s0,[r8,#0x6c]         ;760
0006fa  ee400a41          VMLS.F32 s1,s0,s2              ;761
0006fe  edc80a20          VSTR     s1,[r8,#0x80]         ;761
000702  e054              B        |L1.1966|
                  |L1.1796|
000704  f8bb1000          LDRH     r1,[r11,#0]           ;773  ; R2mon_value
000708  f44f777a          MOV      r7,#0x3e8             ;773
00070c  4379              MULS     r1,r7,r1              ;773
00070e  f8bb7000          LDRH     r7,[r11,#0]           ;773  ; R2mon_value
000712  ee014a10          VMOV     s2,r4                 ;775
000716  ebaa0007          SUB      r0,r10,r7             ;773
00071a  fbb1f0f0          UDIV     r0,r1,r0              ;773
00071e  eeb81a41          VCVT.F32.U32 s2,s2                 ;775
000722  eeb80a40          VCVT.F32.U32 s0,s0                 ;775
000726  eef80a60          VCVT.F32.U32 s1,s1                 ;775
00072a  e9c50406          STRD     r0,r4,[r5,#0x18]      ;773
00072e  ee311a40          VSUB.F32 s2,s2,s0              ;775
000732  ee000a10          VMOV     s0,r0                 ;775
000736  eeb80a40          VCVT.F32.U32 s0,s0                 ;775
00073a  ee700a60          VSUB.F32 s1,s0,s1              ;775
00073e  ee810a20          VDIV.F32 s0,s2,s1              ;775
000742  ee000a90          VMOV     s1,r0                 ;776
000746  eeb81a60          VCVT.F32.U32 s2,s1                 ;776
00074a  ee004a90          VMOV     s1,r4                 ;776
00074e  eef80a60          VCVT.F32.U32 s1,s1                 ;776
000752  ed880a1c          VSTR     s0,[r8,#0x70]         ;775
000756  ee400a41          VMLS.F32 s1,s0,s2              ;776
00075a  edc80a21          VSTR     s1,[r8,#0x84]         ;776
00075e  e026              B        |L1.1966|
                  |L1.1888|
000760  f8c97024          STR      r7,[r9,#0x24]         ;782  ; Run_Control
                  |L1.1892|
000764  7037              STRB     r7,[r6,#0]            ;783
000766  e4bb              B        |L1.224|
                  |L1.1896|
;;;787    		{
;;;788    			
;;;789    			x2 = Rmon_value;
000768  8800              LDRH     r0,[r0,#0]  ; Rmon_value
;;;790    			y2 = data;
;;;791    			CalPara.TestR[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
00076a  ee014a10          VMOV     s2,r4
00076e  eeb80a40          VCVT.F32.U32 s0,s0
000772  eef80a60          VCVT.F32.U32 s1,s1
000776  eeb81a41          VCVT.F32.U32 s2,s2
00077a  e9c50406          STRD     r0,r4,[r5,#0x18]      ;789
00077e  ee311a40          VSUB.F32 s2,s2,s0
000782  ee000a10          VMOV     s0,r0
000786  eeb80a40          VCVT.F32.U32 s0,s0
00078a  ee700a60          VSUB.F32 s1,s0,s1
00078e  ee810a20          VDIV.F32 s0,s2,s1
;;;792    			CalPara.OffsetR[2] = (float)y2 - CalPara.TestR[2]*(float)x2;
000792  ee000a90          VMOV     s1,r0
000796  eeb81a60          VCVT.F32.U32 s2,s1
00079a  ee004a90          VMOV     s1,r4
00079e  eef80a60          VCVT.F32.U32 s1,s1
0007a2  ed880a1a          VSTR     s0,[r8,#0x68]         ;791
0007a6  ee400a41          VMLS.F32 s1,s0,s2
0007aa  edc80a1f          VSTR     s1,[r8,#0x7c]
                  |L1.1966|
;;;793    				//参数写进FLASH
;;;794    			Flag_DAC_OFF=0;
;;;795    			calflag = 0;
0007ae  f8cc2000          STR      r2,[r12,#0]  ; flagB
0007b2  7033              STRB     r3,[r6,#0]
                  |L1.1972|
;;;796    		}
;;;797    		
;;;798    	}
;;;799    		
;;;800    
;;;801    	Write_Flash_Bytes();
0007b4  e8bd5ff0          POP      {r4-r12,lr}
0007b8  f7ffbffe          B.W      Write_Flash_Bytes
;;;802    //	else if(mode == 1){//测量电流
;;;803    //		if(range == 1)
;;;804    //		{
;;;805    //			x1 = abs(I_CS);
;;;806    //			y1 = data;
;;;807    //		}else if(range == 2){
;;;808    //			x2 = abs(I_CS);
;;;809    //			y2 = data;
;;;810    //			SaveDebug.TestIcal[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;811    //			SaveDebug.OffsetI[1] = (float)y2 - SaveDebug.TestIcal[1]*(float)x2;
;;;812    //		}else if(range == 4){
;;;813    //			x1 = abs(I_CS);
;;;814    //			y1 = data;
;;;815    //		}else if(range == 5){
;;;816    //			x2 = abs(I_CS);
;;;817    //			y2 = data;
;;;818    //			SaveDebug.TestIcal[4] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;819    //			SaveDebug.OffsetI[3] = (float)y2 - SaveDebug.TestIcal[4]*(float)x2;
;;;820    //		}else if(range == 0){
;;;821    //			SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[0]);
;;;822    //		}else if(range == 3){
;;;823    //			SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[0]));
;;;824    //		}
;;;825    ////		else if(range == 4){
;;;826    ////			x1 = V_CS;
;;;827    ////			y1 = data;
;;;828    ////		}else if(range == 5){
;;;829    ////			x2 = V_CS;
;;;830    ////			y2 = data;
;;;831    ////			SaveDebug.TestVcal[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;832    ////			SaveDebug.OffsetV[2] = (float)y2 - SaveDebug.TestVcal[2]*(float)x2;
;;;833    ////		}
;;;834    //		
;;;835    ////		if(range < 3)
;;;836    ////		{
;;;837    ////			if(range == 0)
;;;838    ////			{
;;;839    ////				SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[0]);
;;;840    ////			}else{
;;;841    ////				SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[1]);
;;;842    ////			}			
;;;843    ////		}else{
;;;844    ////			if(range == 3)
;;;845    ////			{
;;;846    ////				SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[0]));
;;;847    ////			}else{
;;;848    ////				SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[1]));
;;;849    ////			}
;;;850    ////		}
;;;851    ////		calflag = 1;
;;;852    //	}else if(mode == 2){//控制电压
;;;853    //		if(range == 0)
;;;854    //		{
;;;855    //			_D_ = 1000;
;;;856    //			x1 = data;
;;;857    //			y1 = _D_;
;;;858    //		}else if(range == 1){
;;;859    //			_D_ = 7000;
;;;860    //			x2 = data;
;;;861    //			y2 = _D_;
;;;862    //			SaveDebug.ControlV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;863    //			SaveDebug.OffsetCV[0] = (float)y2 - SaveDebug.ControlV[0]*(float)x2;
;;;864    //		}else if(range == 2){
;;;865    //			_D_ = 10000;
;;;866    //			x1 = data;
;;;867    //			y1 = _D_;
;;;868    //		}else if(range == 3){
;;;869    //			_D_ = 13000;
;;;870    //			x2 = data;
;;;871    //			y2 = _D_;
;;;872    //			SaveDebug.ControlV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;873    //			SaveDebug.OffsetCV[1] = (float)y2 - SaveDebug.ControlV[1]*(float)x2;
;;;874    //		}else if(range == 4){
;;;875    //			_D_ = 17000;
;;;876    //			x1 = data;
;;;877    //			y1 = _D_;
;;;878    //		}else if(range == 5){
;;;879    //			_D_ = 20000;
;;;880    //			x2 = data;
;;;881    //			y2 = _D_;
;;;882    //			SaveDebug.ControlV[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;883    //			SaveDebug.OffsetCV[2] = (float)y2 - SaveDebug.ControlV[2]*(float)x2;
;;;884    //		}else if(range == 6){
;;;885    //			_D_ = 24000;
;;;886    //			x1 = data;
;;;887    //			y1 = _D_;
;;;888    //		}else if(range == 7){
;;;889    //			_D_ = 27000;
;;;890    //			x2 = data;
;;;891    //			y2 = _D_;
;;;892    //			SaveDebug.ControlV[3] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;893    //			SaveDebug.OffsetCV[3] = (float)y2 - SaveDebug.ControlV[3]*(float)x2;
;;;894    //		}
;;;895    //		
;;;896    ////		if(range == 0)
;;;897    ////		{
;;;898    ////			SaveDebug.ControlV[range] = (float)1000/(float)data;
;;;899    ////		}else if(range == 1){
;;;900    ////			SaveDebug.ControlV[range] = (float)10000/(float)data;
;;;901    ////		}else if(range == 2){
;;;902    ////			SaveDebug.ControlV[range] = (float)15000/(float)data;
;;;903    ////		}else if(range == 3){
;;;904    ////			SaveDebug.ControlV[range] = (float)19000/(float)data;
;;;905    ////		}
;;;906    ////		calflag = 1;
;;;907    //	}else if(mode == 3){//电流清零
;;;908    //		SaveDebug.ClearI[range] = I_CS;
;;;909    ////		calflag = 1;
;;;910    //	}
;;;911    	
;;;912    }
;;;913    
                          ENDP

                  |L1.1980|
                          DCD      0x40020800
                  |L1.1984|
                          DCD      Imon_Load_value
                  |L1.1988|
                          DCD      Rmon_value
                  |L1.1992|
                          DCD      R1mon_value
                  |L1.1996|
                          DCD      R2mon_value

                          AREA ||i.DMA1_Stream3_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Stream3_IRQHandler PROC
;;;2223   
;;;2224   void DMA1_Stream3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2225   {
;;;2226   	//----DMA1 通道3完成中断，对应的中断也需要清除
;;;2227   	if(DMA_GetITStatus(DMA1_Stream3,DMA_IT_TCIF3) != RESET)   
000002  4d0c              LDR      r5,|L2.52|
000004  4c0c              LDR      r4,|L2.56|
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       DMA_GetITStatus
00000e  2800              CMP      r0,#0
000010  d00e              BEQ      |L2.48|
;;;2228       {
;;;2229   		/* 清除标志位 */
;;;2230   		DMA_ClearFlag(DMA1_Stream3,DMA_IT_TCIF3); 
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       DMA_ClearFlag
;;;2231   		/* 关闭DMA */
;;;2232   		DMA_Cmd(DMA1_Stream3,DISABLE);
00001a  2100              MOVS     r1,#0
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       DMA_Cmd
;;;2233   		
;;;2234   		while (!(USART3->SR & USART_FLAG_TC));  //硬件数据发送完毕
000022  4806              LDR      r0,|L2.60|
                  |L2.36|
000024  8801              LDRH     r1,[r0,#0]
000026  0649              LSLS     r1,r1,#25
000028  d5fc              BPL      |L2.36|
                  |L2.42|
;;;2235   		while (!(USART3->SR & USART_FLAG_TXE)); //等待数据从软件拷贝到硬件进行发送
00002a  8801              LDRH     r1,[r0,#0]
00002c  0609              LSLS     r1,r1,#24
00002e  d5fc              BPL      |L2.42|
                  |L2.48|
;;;2236   	}
;;;2237   }
000030  bd70              POP      {r4-r6,pc}
;;;2238   
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      0x18008000
                  |L2.56|
                          DCD      0x40026058
                  |L2.60|
                          DCD      0x40004800

                          AREA ||i.IsDigitChar||, CODE, READONLY, ALIGN=1

                  IsDigitChar PROC
;;;87     /*****************************************************************/
;;;88     unsigned short IsDigitChar(unsigned char a)             //如果a的值是数字的话返回1，否则返回0
000000  3830              SUBS     r0,r0,#0x30
;;;89     {
;;;90     	int b;
;;;91       if(a<0x30 || a>0x39)                     //数字1-9
000002  280a              CMP      r0,#0xa
000004  d301              BCC      |L3.10|
;;;92       	{
;;;93       	   b=0;
000006  2000              MOVS     r0,#0
;;;94       	}
;;;95       else
;;;96       	{
;;;97       	   b=1;
;;;98       	}
;;;99       return b;
;;;100    }
000008  4770              BX       lr
                  |L3.10|
00000a  2001              MOVS     r0,#1                 ;97
00000c  4770              BX       lr
;;;101    void SetPowerV(vu16 powv)
                          ENDP


                          AREA ||i.LIST_ONOFF||, CODE, READONLY, ALIGN=2

                  LIST_ONOFF PROC
;;;332    
;;;333    void LIST_ONOFF(vu8 value)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;334    {
;;;335    	switch(MODE)
000004  4b5e              LDR      r3,|L4.384|
000006  ed2d8b02          VPUSH    {d8}                  ;334
00000a  f893c005          LDRB     r12,[r3,#5]  ; MODE
;;;336    	{
;;;337    		case 0://电子负载ON/OFF
;;;338    		{
;;;339    			LOAD_MODE=0;
;;;340    			GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
;;;341    			if( value == 0 ){
;;;342    				
;;;343    				Flag_Swtich_ON = 0;
00000e  4c5e              LDR      r4,|L4.392|
000010  2600              MOVS     r6,#0                 ;335
000012  f8df9170          LDR      r9,|L4.388|
;;;344    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
;;;345    			}
;;;346    			else if( value == 1 ){
;;;347    				
;;;348    				Flag_Swtich_ON = 1;
000016  6821              LDR      r1,[r4,#0]
;;;349    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;350    			}
;;;351    		}break;
;;;352    		case 1://稳压电源ON/OFF
;;;353    		{
;;;354    			if( value == 0 ){
;;;355    				listsend = 3;
;;;356    //				PowerSwitch(0);
;;;357    //				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;358    //				Para.CSET_Voltage = 0;
;;;359    //				Para.CSET_Current = 0;
;;;360    //				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;361    			}
;;;362    			else if( value == 1 ){
;;;363    				listsend = 1;
000018  2201              MOVS     r2,#1
;;;364    //				PowerSwitch(1);
;;;365    //				Para.CSET_Voltage = Para.CDC_OutPut_V;
;;;366    //				Para.CSET_Current = Para.CDC_Limit_C;
;;;367    //				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;368    //				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;369    			}
;;;370    		}break;
;;;371    		case 2://过流测试ON/OFF
;;;372    		{
;;;373    			if( value == 0 ){
;;;374    				
;;;375    				Off_GPOI_ResetSet();
;;;376    				trig_flag_state = 0;
;;;377    				max_discahrgeNum = 0;
;;;378    				Para.CSET_Current_Laod =  Para.IR_Start_C;
00001a  4d5c              LDR      r5,|L4.396|
00001c  4f5c              LDR      r7,|L4.400|
00001e  f0410040          ORR      r0,r1,#0x40           ;348
000022  f1bc0f05          CMP      r12,#5                ;335
000026  d222              BCS      |L4.110|
000028  e8dff00c          TBB      [pc,r12]              ;335
00002c  03192872          DCB      0x03,0x19,0x28,0x72
000030  8f00              DCB      0x8f,0x00
000032  f8c96018          STR      r6,[r9,#0x18]         ;339  ; Run_Control
000036  f44f5180          MOV      r1,#0x1000            ;340
00003a  4638              MOV      r0,r7                 ;340
00003c  f7fffffe          BL       GPIO_ResetBits
000040  f89d0008          LDRB     r0,[sp,#8]            ;341
000044  b138              CBZ      r0,|L4.86|
000046  f89d0008          LDRB     r0,[sp,#8]            ;346
00004a  2801              CMP      r0,#1                 ;346
00004c  d10f              BNE      |L4.110|
00004e  6820              LDR      r0,[r4,#0]            ;348  ; flagA
000050  f0400040          ORR      r0,r0,#0x40           ;348
000054  e080              B        |L4.344|
                  |L4.86|
000056  6820              LDR      r0,[r4,#0]            ;343  ; flagA
000058  f0200040          BIC      r0,r0,#0x40           ;343
00005c  e087              B        |L4.366|
00005e  f89d0008          LDRB     r0,[sp,#8]            ;354
000062  b140              CBZ      r0,|L4.118|
000064  f89d0008          LDRB     r0,[sp,#8]            ;362
000068  2801              CMP      r0,#1                 ;362
00006a  d100              BNE      |L4.110|
00006c  725a              STRB     r2,[r3,#9]            ;363
                  |L4.110|
;;;379    			}
;;;380    			else if( value == 1 ){
;;;381    				LOAD_I_SW = 1;
;;;382    				testv = DISS_Voltage;
;;;383    				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
;;;384    				Para.CSET_Current = 1000;
;;;385    				Para.CSET_Current_Laod =  Para.IR_Start_C;
;;;386    				shorttime = 0;
;;;387    				old_I = 0;
;;;388    				max_discahrgeNum = 0;
;;;389    				trig_flag_state = 1;
;;;390    				C_DISCHARGE = 1;        	
;;;391    				Flag_Swtich_ON = 1;
;;;392    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
;;;393    				max_discahrgeNum = (float)Para.IR_Start_C / 1000;				
;;;394    //				testv = DISS_Voltage;
;;;395    //				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
;;;396    //				Para.CSET_Current = 1000;
;;;397    //				Para.CSET_Current_Laod = Para.IR_Start_C;
;;;398    //				shorttime = 0;
;;;399    //				old_I = 0;
;;;400    //				max_discahrgeNum = 0;
;;;401    //				trig_flag_state = 1;
;;;402    //				C_DISCHARGE = 1;
;;;403    //				Flag_Swtich_ON = 1;
;;;404    //				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
;;;405    //				max_discahrgeNum = (float)Para.IR_Start_C / 1000;
;;;406    			}
;;;407    		}break;
;;;408    		case 3://过充测试ON/OFF
;;;409    		{
;;;410    			if( value == 0 ){
;;;411    				
;;;412    				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;413    				Para.CSET_Voltage = 0;
;;;414    				Para.CSET_Current = 0;
;;;415    				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;416    			}
;;;417    			else if( value == 1 ){
;;;418    				Para.CSET_Voltage = Para.CDC_OutPut_V;
;;;419    				Para.CSET_Current = Para.CDC_Limit_C;
;;;420    				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;421    				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;422    			}
;;;423    		}break;
;;;424    		case 4://电子负载ON/OFF
;;;425    		{
;;;426    			if( value == 0 ){
;;;427    				
;;;428    				Flag_Swtich_ON = 0;
;;;429    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
;;;430    			}
;;;431    			else if( value == 1 ){
;;;432    				
;;;433    				Flag_Swtich_ON = 1;
;;;434    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;435    			}
;;;436    		}break;
;;;437    	}
;;;438    }
00006e  ecbd8b02          VPOP     {d8}
000072  e8bd8ff8          POP      {r3-r11,pc}
                  |L4.118|
000076  2003              MOVS     r0,#3                 ;355
000078  7258              STRB     r0,[r3,#9]            ;355
00007a  e7f8              B        |L4.110|
00007c  f89d1008          LDRB     r1,[sp,#8]            ;373
000080  f8dfa110          LDR      r10,|L4.404|
000084  ed9f8a44          VLDR     s16,|L4.408|
000088  f8df8110          LDR      r8,|L4.412|
00008c  b3b1              CBZ      r1,|L4.252|
00008e  f89d1008          LDRB     r1,[sp,#8]            ;380
000092  2901              CMP      r1,#1                 ;380
000094  d1eb              BNE      |L4.110|
000096  f8c92020          STR      r2,[r9,#0x20]         ;381  ; Run_Control
00009a  4941              LDR      r1,|L4.416|
00009c  ed910a00          VLDR     s0,[r1,#0]            ;382
0000a0  4940              LDR      r1,|L4.420|
0000a2  ed810a00          VSTR     s0,[r1,#0]            ;382
0000a6  eddf8a40          VLDR     s17,|L4.424|
0000aa  ee200a28          VMUL.F32 s0,s0,s17             ;383
0000ae  eebd0ac0          VCVT.S32.F32 s0,s0                 ;383
0000b2  ee101a10          VMOV     r1,s0                 ;383
0000b6  f501717a          ADD      r1,r1,#0x3e8          ;383
0000ba  60a9              STR      r1,[r5,#8]            ;383  ; Para
0000bc  f44f717a          MOV      r1,#0x3e8             ;384
0000c0  60e9              STR      r1,[r5,#0xc]          ;384  ; Para
0000c2  6c69              LDR      r1,[r5,#0x44]         ;385  ; Para
0000c4  6169              STR      r1,[r5,#0x14]         ;385  ; Para
0000c6  4939              LDR      r1,|L4.428|
0000c8  700e              STRB     r6,[r1,#0]            ;386
0000ca  4939              LDR      r1,|L4.432|
0000cc  4646              MOV      r6,r8                 ;388
0000ce  ed818a00          VSTR     s16,[r1,#0]           ;387
0000d2  ed888a00          VSTR     s16,[r8,#0]           ;388
0000d6  f88a2000          STRB     r2,[r10,#0]           ;389
0000da  4936              LDR      r1,|L4.436|
0000dc  700a              STRB     r2,[r1,#0]            ;390
0000de  6020              STR      r0,[r4,#0]            ;392  ; flagA
0000e0  2180              MOVS     r1,#0x80              ;392
0000e2  4638              MOV      r0,r7                 ;392
0000e4  f7fffffe          BL       GPIO_ResetBits
0000e8  6c68              LDR      r0,[r5,#0x44]         ;393  ; Para
0000ea  ee000a10          VMOV     s0,r0                 ;393
0000ee  eeb80a40          VCVT.F32.U32 s0,s0                 ;393
0000f2  eec00a28          VDIV.F32 s1,s0,s17             ;393
0000f6  edc60a00          VSTR     s1,[r6,#0]            ;393
0000fa  e7b8              B        |L4.110|
                  |L4.252|
0000fc  e7ff              B        |L4.254|
                  |L4.254|
0000fe  f7fffffe          BL       Off_GPOI_ResetSet
000102  f88a6000          STRB     r6,[r10,#0]           ;376
000106  ed888a00          VSTR     s16,[r8,#0]           ;377
00010a  6c68              LDR      r0,[r5,#0x44]         ;378  ; Para
00010c  6168              STR      r0,[r5,#0x14]         ;378  ; Para
00010e  e7ae              B        |L4.110|
000110  f89d0008          LDRB     r0,[sp,#8]            ;410
000114  4c28              LDR      r4,|L4.440|
000116  b178              CBZ      r0,|L4.312|
000118  f89d0008          LDRB     r0,[sp,#8]            ;417
00011c  2801              CMP      r0,#1                 ;417
00011e  d1a6              BNE      |L4.110|
000120  f8b50064          LDRH     r0,[r5,#0x64]         ;418  ; Para
000124  60a8              STR      r0,[r5,#8]            ;418  ; Para
000126  f8b50066          LDRH     r0,[r5,#0x66]         ;419  ; Para
00012a  60e8              STR      r0,[r5,#0xc]          ;419  ; Para
00012c  2104              MOVS     r1,#4                 ;420
00012e  4620              MOV      r0,r4                 ;420
000130  f7fffffe          BL       GPIO_SetBits
000134  2102              MOVS     r1,#2                 ;421
000136  e01c              B        |L4.370|
                  |L4.312|
000138  2102              MOVS     r1,#2                 ;412
00013a  4638              MOV      r0,r7                 ;412
00013c  f7fffffe          BL       GPIO_ResetBits
000140  60ae              STR      r6,[r5,#8]            ;413  ; Para
000142  60ee              STR      r6,[r5,#0xc]          ;414  ; Para
000144  2104              MOVS     r1,#4                 ;415
000146  4620              MOV      r0,r4                 ;415
000148  e009              B        |L4.350|
00014a  f89d2008          LDRB     r2,[sp,#8]            ;426
00014e  b162              CBZ      r2,|L4.362|
000150  f89d1008          LDRB     r1,[sp,#8]            ;431
000154  2901              CMP      r1,#1                 ;431
000156  d18a              BNE      |L4.110|
                  |L4.344|
000158  6020              STR      r0,[r4,#0]            ;434  ; flagA
00015a  2180              MOVS     r1,#0x80              ;434
00015c  4638              MOV      r0,r7                 ;434
                  |L4.350|
00015e  ecbd8b02          VPOP     {d8}                  ;434
000162  e8bd4ff8          POP      {r3-r11,lr}           ;434
000166  f7ffbffe          B.W      GPIO_ResetBits
                  |L4.362|
00016a  f0210040          BIC      r0,r1,#0x40           ;428
                  |L4.366|
00016e  2180              MOVS     r1,#0x80              ;344
000170  6020              STR      r0,[r4,#0]            ;344  ; flagA
                  |L4.370|
000172  4638              MOV      r0,r7                 ;429
000174  ecbd8b02          VPOP     {d8}                  ;429
000178  e8bd4ff8          POP      {r3-r11,lr}           ;429
00017c  f7ffbffe          B.W      GPIO_SetBits
;;;439    
                          ENDP

                  |L4.384|
                          DCD      ||.data||
                  |L4.388|
                          DCD      Run_Control
                  |L4.392|
                          DCD      flagA
                  |L4.396|
                          DCD      Para
                  |L4.400|
                          DCD      0x40020800
                  |L4.404|
                          DCD      trig_flag_state
                  |L4.408|
000198  00000000          DCFS     0x00000000 ; 0
                  |L4.412|
                          DCD      max_discahrgeNum
                  |L4.416|
                          DCD      DISS_Voltage
                  |L4.420|
                          DCD      testv
                  |L4.424|
0001a8  447a0000          DCFS     0x447a0000 ; 1000
                  |L4.428|
                          DCD      shorttime
                  |L4.432|
                          DCD      old_I
                  |L4.436|
                          DCD      C_DISCHARGE
                  |L4.440|
                          DCD      0x40021000

                          AREA ||i.MODE_ONOFF||, CODE, READONLY, ALIGN=2

                  MODE_ONOFF PROC
;;;258    
;;;259    void MODE_ONOFF(vu8 value)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;260    {
;;;261    	switch(MODE)
000004  4a41              LDR      r2,|L5.268|
000006  ed2d8b02          VPUSH    {d8}                  ;260
00000a  7951              LDRB     r1,[r2,#5]  ; MODE
;;;262    	{
;;;263    		case 0://电子负载ON/OFF
;;;264    		{
;;;265    			if( value == 0 ){
;;;266    				
;;;267    				Flag_Swtich_ON = 0;
00000c  4d40              LDR      r5,|L5.272|
;;;268    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
00000e  4841              LDR      r0,|L5.276|
000010  b3e9              CBZ      r1,|L5.142|
;;;269    			}
;;;270    			else if( value == 1 ){
;;;271    				
;;;272    				Flag_Swtich_ON = 1;
;;;273    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;274    			}
;;;275    		}break;
;;;276    		case 1://稳压电源ON/OFF
;;;277    		{
;;;278    			sendwait = 1;
000012  2601              MOVS     r6,#1
000014  2901              CMP      r1,#1                 ;261
000016  d06d              BEQ      |L5.244|
000018  2902              CMP      r1,#2                 ;261
00001a  d14a              BNE      |L5.178|
;;;279    //			if( value == 0 ){
;;;280    //				sendwait = 1;
;;;281    ////				PowerSwitch(0);//关闭电源输出
;;;282    ////				Delay_ms(1000);
;;;283    ////				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;284    ////				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;285    //////				Delay_ms(1000);
;;;286    ////				Para.CSET_Voltage = 0;
;;;287    ////				Para.CSET_Current = 0;
;;;288    //////				Delay_ms(1000);
;;;289    ////				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;290    //			}
;;;291    //			else if( value == 1 ){
;;;292    ////				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;293    //////				Delay_ms(1000);
;;;294    ////				PowerSwitch(1);//打开电源输出
;;;295    //				
;;;296    //////				
;;;297    ////				Para.CSET_Voltage = Para.POWER_OutPut_V;
;;;298    ////				Para.CSET_Current = Para.POWER_Limit_C;
;;;299    //////				Delay_ms(1000);
;;;300    ////				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;301    //				
;;;302    //			}
;;;303    		}break;
;;;304    		case 2://过流测试ON/OFF
;;;305    		{
;;;306    			if( value == 0 ){
00001c  f89d1008          LDRB     r1,[sp,#8]
;;;307    				
;;;308    				Off_GPOI_ResetSet();
;;;309    				trig_flag_state = 0;
000020  f8df90f4          LDR      r9,|L5.280|
;;;310    				max_discahrgeNum = 0;
000024  ed9f8a3d          VLDR     s16,|L5.284|
000028  f8df80f4          LDR      r8,|L5.288|
;;;311    				Para.CSET_Current_Laod =  Para.IR_Start_C;
00002c  4c3d              LDR      r4,|L5.292|
00002e  2700              MOVS     r7,#0                 ;306
000030  b371              CBZ      r1,|L5.144|
;;;312    			}
;;;313    			else if( value == 1 ){
000032  f89d1008          LDRB     r1,[sp,#8]
000036  2901              CMP      r1,#1
000038  d13b              BNE      |L5.178|
;;;314    				LOAD_MODE = 0;
00003a  493b              LDR      r1,|L5.296|
00003c  618f              STR      r7,[r1,#0x18]  ; Run_Control
;;;315    				GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
00003e  1481              ASRS     r1,r0,#18
000040  4682              MOV      r10,r0
000042  f7fffffe          BL       GPIO_ResetBits
;;;316    				Para.CSET_Current_Laod =  Para.IR_Start_C;
000046  6c60              LDR      r0,[r4,#0x44]  ; Para
000048  6160              STR      r0,[r4,#0x14]  ; Para
;;;317    				testv = DISS_Voltage;
00004a  4838              LDR      r0,|L5.300|
;;;318    				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
00004c  eddf8a39          VLDR     s17,|L5.308|
000050  ed900a00          VLDR     s0,[r0,#0]            ;317
000054  4836              LDR      r0,|L5.304|
000056  ed800a00          VSTR     s0,[r0,#0]            ;317
00005a  ee200a28          VMUL.F32 s0,s0,s17
00005e  eebd0ac0          VCVT.S32.F32 s0,s0
000062  ee100a10          VMOV     r0,s0
000066  f500707a          ADD      r0,r0,#0x3e8
00006a  60a0              STR      r0,[r4,#8]  ; Para
;;;319    				Para.CSET_Current = 1000;
00006c  f44f707a          MOV      r0,#0x3e8
000070  60e0              STR      r0,[r4,#0xc]  ; Para
;;;320    				shorttime = 0;
000072  4831              LDR      r0,|L5.312|
000074  7007              STRB     r7,[r0,#0]
;;;321    				old_I = 0;
000076  4831              LDR      r0,|L5.316|
;;;322    				max_discahrgeNum = 0;
000078  4647              MOV      r7,r8
00007a  ed808a00          VSTR     s16,[r0,#0]           ;321
00007e  ed888a00          VSTR     s16,[r8,#0]
;;;323    				trig_flag_state = 1;
000082  f8896000          STRB     r6,[r9,#0]
;;;324    				C_DISCHARGE = 1;        	
000086  482e              LDR      r0,|L5.320|
000088  7006              STRB     r6,[r0,#0]
;;;325    				Flag_Swtich_ON = 1;
00008a  6828              LDR      r0,[r5,#0]  ; flagA
00008c  e001              B        |L5.146|
                  |L5.142|
00008e  e014              B        |L5.186|
                  |L5.144|
000090  e032              B        |L5.248|
                  |L5.146|
000092  f0400040          ORR      r0,r0,#0x40
;;;326    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
000096  6028              STR      r0,[r5,#0]  ; flagA
000098  2180              MOVS     r1,#0x80
00009a  4650              MOV      r0,r10
00009c  f7fffffe          BL       GPIO_ResetBits
;;;327    				max_discahrgeNum = (float)Para.IR_Start_C / 1000;
0000a0  6c60              LDR      r0,[r4,#0x44]  ; Para
0000a2  ee000a10          VMOV     s0,r0
0000a6  eeb80a40          VCVT.F32.U32 s0,s0
0000aa  eec00a28          VDIV.F32 s1,s0,s17
0000ae  edc70a00          VSTR     s1,[r7,#0]
                  |L5.178|
;;;328    			}
;;;329    		}break;
;;;330    	}
;;;331    }
0000b2  ecbd8b02          VPOP     {d8}
0000b6  e8bd8ff8          POP      {r3-r11,pc}
                  |L5.186|
0000ba  f89d2008          LDRB     r2,[sp,#8]            ;265
0000be  4914              LDR      r1,|L5.272|
0000c0  6809              LDR      r1,[r1,#0]            ;267
0000c2  b16a              CBZ      r2,|L5.224|
0000c4  f89d2008          LDRB     r2,[sp,#8]            ;270
0000c8  2a01              CMP      r2,#1                 ;270
0000ca  d1f2              BNE      |L5.178|
0000cc  f0410140          ORR      r1,r1,#0x40           ;272
0000d0  6029              STR      r1,[r5,#0]            ;273  ; flagA
0000d2  2180              MOVS     r1,#0x80              ;273
0000d4  ecbd8b02          VPOP     {d8}                  ;273
0000d8  e8bd4ff8          POP      {r3-r11,lr}           ;273
0000dc  f7ffbffe          B.W      GPIO_ResetBits
                  |L5.224|
0000e0  f0210140          BIC      r1,r1,#0x40           ;267
0000e4  6029              STR      r1,[r5,#0]            ;268  ; flagA
0000e6  2180              MOVS     r1,#0x80              ;268
0000e8  ecbd8b02          VPOP     {d8}                  ;268
0000ec  e8bd4ff8          POP      {r3-r11,lr}           ;268
0000f0  f7ffbffe          B.W      GPIO_SetBits
                  |L5.244|
0000f4  7216              STRB     r6,[r2,#8]            ;278
0000f6  e7dc              B        |L5.178|
                  |L5.248|
0000f8  f7fffffe          BL       Off_GPOI_ResetSet
0000fc  f8897000          STRB     r7,[r9,#0]            ;309
000100  ed888a00          VSTR     s16,[r8,#0]           ;310
000104  6c60              LDR      r0,[r4,#0x44]         ;311  ; Para
000106  6160              STR      r0,[r4,#0x14]         ;311  ; Para
000108  e7d3              B        |L5.178|
;;;332    
                          ENDP

00010a  0000              DCW      0x0000
                  |L5.268|
                          DCD      ||.data||
                  |L5.272|
                          DCD      flagA
                  |L5.276|
                          DCD      0x40020800
                  |L5.280|
                          DCD      trig_flag_state
                  |L5.284|
00011c  00000000          DCFS     0x00000000 ; 0
                  |L5.288|
                          DCD      max_discahrgeNum
                  |L5.292|
                          DCD      Para
                  |L5.296|
                          DCD      Run_Control
                  |L5.300|
                          DCD      DISS_Voltage
                  |L5.304|
                          DCD      testv
                  |L5.308|
000134  447a0000          DCFS     0x447a0000 ; 1000
                  |L5.312|
                          DCD      shorttime
                  |L5.316|
                          DCD      old_I
                  |L5.320|
                          DCD      C_DISCHARGE

                          AREA ||i.MODE_PARASET||, CODE, READONLY, ALIGN=2

                  MODE_PARASET PROC
;;;439    
;;;440    void MODE_PARASET(vu8 value)
000000  b570              PUSH     {r4-r6,lr}
;;;441    {
;;;442    	switch(MODE)
000002  4a17              LDR      r2,|L6.96|
000004  7953              LDRB     r3,[r2,#5]  ; MODE
000006  2100              MOVS     r1,#0
;;;443    	{
;;;444    		case 0://电子负载
;;;445    		{
;;;446    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;447    //			mainswitch = 0;
;;;448    //			sendwait = 3;
;;;449    			LOAD_MODE = Para.CLOAD_MODE;
000008  4816              LDR      r0,|L6.100|
;;;450    			Para.CSET_Current_Laod = Para.LOAD_C;
;;;451    			Para.CSET_Voltage_Laod = Para.LOAD_V;
;;;452    			if(Para.CSET_Current_Laod > 20000)
;;;453    			{
;;;454    				LOAD_I_SW = 1;
00000a  2401              MOVS     r4,#1
00000c  4d16              LDR      r5,|L6.104|
00000e  2b05              CMP      r3,#5                 ;442
000010  d211              BCS      |L6.54|
000012  e8dff003          TBB      [pc,r3]               ;442
000016  0322              DCB      0x03,0x22
000018  131b2200          DCB      0x13,0x1b,0x22,0x00
00001c  6982              LDR      r2,[r0,#0x18]         ;449  ; Para
00001e  61aa              STR      r2,[r5,#0x18]         ;449  ; Run_Control
000020  6dc2              LDR      r2,[r0,#0x5c]         ;450  ; Para
000022  6142              STR      r2,[r0,#0x14]         ;450  ; Para
000024  f8b02060          LDRH     r2,[r0,#0x60]         ;451  ; Para
000028  6102              STR      r2,[r0,#0x10]         ;451  ; Para
00002a  6940              LDR      r0,[r0,#0x14]         ;452  ; Para
00002c  f6446220          MOV      r2,#0x4e20            ;452
000030  4290              CMP      r0,r2                 ;452
000032  d901              BLS      |L6.56|
                  |L6.52|
000034  622c              STR      r4,[r5,#0x20]  ; Run_Control
                  |L6.54|
;;;455    			}else{
;;;456    				LOAD_I_SW = 0;
;;;457    			}
;;;458    		}break;
;;;459    		case 1://稳压电源
;;;460    		{
;;;461    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;462    //			mainswitch = 0;
;;;463    //			if(USART3_Recive_flg == 1)
;;;464    //			{
;;;465    				sendwait = 1;
;;;466    //			}else{
;;;467    //				SetPowerMode();
;;;468    //			}
;;;469    //			Para.CSET_Voltage = Para.POWER_OutPut_V;
;;;470    //			SetPowerV(Para.POWER_OutPut_V);
;;;471    //	//			Para.CSET_Current = Para.POWER_Limit_C;
;;;472    //			SetPowerC(Para.POWER_Limit_C);
;;;473    		}break;
;;;474    		case 2://放电过流测试
;;;475    		{
;;;476    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;477    //			mainswitch = 0;
;;;478    //			sendwait = 3;
;;;479    			
;;;480    			LOAD_MODE = 0;
;;;481    			LOAD_I_SW = 1;
;;;482    			Para.CSET_Current = 1000;
;;;483    			Para.CSET_Current_Laod = Para.IR_Start_C;
;;;484    		}break;
;;;485    		case 3://列表
;;;486    		{
;;;487    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;488    //			mainswitch = 0;
;;;489    //			sendwait = 3;
;;;490    			
;;;491    			LOAD_MODE = 0;
;;;492    			GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
;;;493    			LOAD_I_SW = 1;
;;;494    //			Para.CSET_Current = 1000;
;;;495    		}break;
;;;496    		case 4://充电过流测试
;;;497    		{
;;;498    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;499    //			mainswitch = 0;
;;;500    //			sendwait = 3;
;;;501    			
;;;502    			sendwait = 1;
;;;503    		}break;
;;;504    	}
;;;505    }
000036  bd70              POP      {r4-r6,pc}
                  |L6.56|
000038  6229              STR      r1,[r5,#0x20]         ;456  ; Run_Control
00003a  bd70              POP      {r4-r6,pc}
00003c  61a9              STR      r1,[r5,#0x18]         ;480  ; Run_Control
00003e  622c              STR      r4,[r5,#0x20]         ;481  ; Run_Control
000040  f44f717a          MOV      r1,#0x3e8             ;482
000044  60c1              STR      r1,[r0,#0xc]          ;482  ; Para
000046  6c41              LDR      r1,[r0,#0x44]         ;483  ; Para
000048  6141              STR      r1,[r0,#0x14]         ;483  ; Para
00004a  bd70              POP      {r4-r6,pc}
00004c  61a9              STR      r1,[r5,#0x18]         ;491  ; Run_Control
00004e  f44f5180          MOV      r1,#0x1000            ;492
000052  4806              LDR      r0,|L6.108|
000054  f7fffffe          BL       GPIO_ResetBits
000058  e7ec              B        |L6.52|
00005a  7214              STRB     r4,[r2,#8]            ;502
00005c  bd70              POP      {r4-r6,pc}
;;;506    
                          ENDP

00005e  0000              DCW      0x0000
                  |L6.96|
                          DCD      ||.data||
                  |L6.100|
                          DCD      Para
                  |L6.104|
                          DCD      Run_Control
                  |L6.108|
                          DCD      0x40020800

                          AREA ||i.PowerSwitch||, CODE, READONLY, ALIGN=2

                  PowerSwitch PROC
;;;182    
;;;183    void PowerSwitch(vu8 bit)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;184    {
;;;185    	MasterSendbuf[0] = 0x01;
000002  4c0f              LDR      r4,|L7.64|
000004  2001              MOVS     r0,#1
;;;186    	MasterSendbuf[1] = 0x06;
000006  2106              MOVS     r1,#6
000008  7020              STRB     r0,[r4,#0]            ;185
00000a  7061              STRB     r1,[r4,#1]
;;;187    	MasterSendbuf[2] = 0x00;
00000c  2100              MOVS     r1,#0
00000e  70a1              STRB     r1,[r4,#2]
;;;188    	MasterSendbuf[3] = 0x01;
000010  70e0              STRB     r0,[r4,#3]
;;;189    	MasterSendbuf[4] = (u8)(bit>>8);
000012  f89d0000          LDRB     r0,[sp,#0]
000016  7121              STRB     r1,[r4,#4]
;;;190    	MasterSendbuf[5] = (u8)(bit);
000018  f89d0000          LDRB     r0,[sp,#0]
00001c  7160              STRB     r0,[r4,#5]
;;;191    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00001e  2106              MOVS     r1,#6
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       Hardware_CRC
000026  71a0              STRB     r0,[r4,#6]
;;;192    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000028  2106              MOVS     r1,#6
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       Hardware_CRC
000030  0a00              LSRS     r0,r0,#8
000032  71e0              STRB     r0,[r4,#7]
;;;193    	USART3WriteDMA(8);
000034  e8bd4038          POP      {r3-r5,lr}
000038  2008              MOVS     r0,#8
00003a  f7ffbffe          B.W      USART3WriteDMA
;;;194    }
;;;195    
                          ENDP

00003e  0000              DCW      0x0000
                  |L7.64|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.ReadPowData||, CODE, READONLY, ALIGN=2

                  ReadPowData PROC
;;;195    
;;;196    void ReadPowData(void)
000000  b510              PUSH     {r4,lr}
;;;197    {
;;;198    	MasterSendbuf[0] = 0x01;
000002  4c0e              LDR      r4,|L8.60|
000004  2001              MOVS     r0,#1
;;;199    	MasterSendbuf[1] = 0x03;
;;;200    	MasterSendbuf[2] = 0x00;
;;;201    	MasterSendbuf[3] = 0x10;
000006  2110              MOVS     r1,#0x10
000008  7020              STRB     r0,[r4,#0]            ;198
00000a  2003              MOVS     r0,#3                 ;199
00000c  7060              STRB     r0,[r4,#1]            ;199
00000e  2000              MOVS     r0,#0                 ;200
000010  70a0              STRB     r0,[r4,#2]            ;200
000012  70e1              STRB     r1,[r4,#3]
;;;202    	MasterSendbuf[4] = 0x00;
000014  7120              STRB     r0,[r4,#4]
;;;203    	MasterSendbuf[5] = 0x02;
000016  2002              MOVS     r0,#2
000018  7160              STRB     r0,[r4,#5]
;;;204    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00001a  2106              MOVS     r1,#6
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       Hardware_CRC
000022  71a0              STRB     r0,[r4,#6]
;;;205    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000024  2106              MOVS     r1,#6
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       Hardware_CRC
00002c  0a00              LSRS     r0,r0,#8
00002e  71e0              STRB     r0,[r4,#7]
;;;206    	USART3WriteDMA(8);
000030  e8bd4010          POP      {r4,lr}
000034  2008              MOVS     r0,#8
000036  f7ffbffe          B.W      USART3WriteDMA
;;;207    }
;;;208    
                          ENDP

00003a  0000              DCW      0x0000
                  |L8.60|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.SerialRemoteHandleL||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  SerialRemoteHandleL PROC
;;;951    
;;;952    u16 SerialRemoteHandleL(u8 len,char* buf)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;953    {
000004  ed2d8b02          VPUSH    {d8}
000008  b0b3              SUB      sp,sp,#0xcc
00000a  4605              MOV      r5,r0
;;;954    
;;;955      
;;;956        u16 currCharNum;
;;;957        u32 temp1;
;;;958      u8 Gmode_Vale;
;;;959    	u8 i,j;
;;;960    	
;;;961    	u8 addr = 0;
00000c  2000              MOVS     r0,#0
00000e  460c              MOV      r4,r1                 ;953
;;;962    	char str[200]={0};
000010  9032              STR      r0,[sp,#0xc8]
000012  21c8              MOVS     r1,#0xc8
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       __aeabi_memclr4
;;;963    	int cmd_flag=255;
;;;964    	u8 templen =0;
;;;965    	u8 tmpFg;
;;;966    	u8 LM_S_Vale,LOW_I_Vale,H_L_Vale,SWITCH_Vale;
;;;967    	u16 I_ADC_Vale,V_ADC_Vale;
;;;968    	int32_t V_CS_Vale,I_CS_Vale;
;;;969    	float Lvl_Vale,fadcx,fsingal, fVale;
;;;970     
;;;971    //	u8 len = 11;
;;;972    	u8 pntlen = 0;
;;;973    
;;;974    
;;;975    	
;;;976    	currCharNum=0;
;;;977    	if((buf[currCharNum] != ChrStartR) || (buf[len-2] != ChrEndR)||(buf[len-1] != ChrEndS))
00001a  7820              LDRB     r0,[r4,#0]
00001c  283c              CMP      r0,#0x3c
00001e  d108              BNE      |L9.50|
000020  1960              ADDS     r0,r4,r5
000022  f8101c02          LDRB     r1,[r0,#-2]
000026  290d              CMP      r1,#0xd
000028  d103              BNE      |L9.50|
00002a  f8100c01          LDRB     r0,[r0,#-1]
00002e  280a              CMP      r0,#0xa
000030  d001              BEQ      |L9.54|
                  |L9.50|
;;;978        {
;;;979    		return SetErr_ACK(buf,addr ,CMD_ERR); 
000032  2202              MOVS     r2,#2
000034  e168              B        |L9.776|
                  |L9.54|
;;;980        } 
;;;981    	str[currCharNum++] = ChrStartR;
000036  213c              MOVS     r1,#0x3c
000038  f88d1000          STRB     r1,[sp,#0]
;;;982    	sprintf(&str[currCharNum],"%d",addr);
00003c  a1fe              ADR      r1,|L9.1080|
00003e  f10d0001          ADD      r0,sp,#1
000042  9a32              LDR      r2,[sp,#0xc8]
000044  f7fffffe          BL       __2sprintf
;;;983    	strncat(str,"/",1);
000048  2201              MOVS     r2,#1
00004a  a1fc              ADR      r1,|L9.1084|
00004c  4668              MOV      r0,sp
00004e  f7fffffe          BL       strncat
;;;984    	currCharNum =strlen(str);
000052  4668              MOV      r0,sp
000054  f7fffffe          BL       strlen
000058  fa1ffa80          UXTH     r10,r0
;;;985    	cmd_flag=strncmp(buf,str,strlen(str));
00005c  4668              MOV      r0,sp
00005e  f7fffffe          BL       strlen
000062  4602              MOV      r2,r0
000064  4669              MOV      r1,sp
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       strncmp
;;;986    	//testflag = cmd_flag;
;;;987    	if(0!=cmd_flag)
00006c  2800              CMP      r0,#0
00006e  d1e0              BNE      |L9.50|
;;;988    	{
;;;989    		return SetErr_ACK(buf, addr ,CMD_ERR);
;;;990    		
;;;991    	}
;;;992    	for (j=0;j<CmdNumb;j++)
;;;993        {
;;;994    		templen = strlen(CmdStr[j]);
000070  f8dfb3cc          LDR      r11,|L9.1088|
000074  4680              MOV      r8,r0                 ;992
;;;995    		cmd_flag=strncmp(&buf[currCharNum],CmdStr[j],templen);
000076  eb04090a          ADD      r9,r4,r10
                  |L9.122|
00007a  eb0801c8          ADD      r1,r8,r8,LSL #3       ;994
00007e  eb01000b          ADD      r0,r1,r11             ;994
000082  4606              MOV      r6,r0                 ;994
000084  f7fffffe          BL       strlen
000088  b2c5              UXTB     r5,r0                 ;994
00008a  4631              MOV      r1,r6                 ;994
00008c  4648              MOV      r0,r9                 ;994
00008e  462a              MOV      r2,r5
000090  f7fffffe          BL       strncmp
;;;996    	    if(0==cmd_flag)
000094  b138              CBZ      r0,|L9.166|
000096  f1080001          ADD      r0,r8,#1              ;992
00009a  f00008ff          AND      r8,r0,#0xff           ;992
00009e  f1b80f13          CMP      r8,#0x13              ;992
0000a2  d3ea              BCC      |L9.122|
0000a4  e7c5              B        |L9.50|
                  |L9.166|
;;;997    	    {
;;;998    
;;;999    		  buf[0] = ChrStartS;
0000a6  203e              MOVS     r0,#0x3e
0000a8  7020              STRB     r0,[r4,#0]
;;;1000   		  currCharNum+=templen;
0000aa  eb0a0005          ADD      r0,r10,r5
;;;1001   		  switch(j)
;;;1002             {
;;;1003   			case 0:
;;;1004   				pntlen = 5;    //
;;;1005   				if(buf[currCharNum]=='?')
;;;1006   				{
;;;1007   
;;;1008   					
;;;1009   					sprintf(&buf[currCharNum],"%05d",Para.CVoltage);
;;;1010   					currCharNum+=pntlen;
;;;1011   					
;;;1012   					buf[currCharNum++]=(',');
;;;1013   					sprintf(&buf[currCharNum],"%06d",Para.CLaod_Current);
;;;1014   					currCharNum+=6;
;;;1015   					
;;;1016   					buf[currCharNum++]=(',');
;;;1017   					sprintf(&buf[currCharNum],"%05d",Para.CPOW_Voltage);
;;;1018   					currCharNum+=pntlen;
;;;1019   					
;;;1020   					buf[currCharNum++]=(',');
;;;1021   					sprintf(&buf[currCharNum],"%05d",Para.CCurrent);
;;;1022   					currCharNum+=pntlen;
;;;1023   					
;;;1024   					buf[currCharNum++]=(',');
;;;1025   					sprintf(&buf[currCharNum],"%05d",Para.CR_VLUE);
;;;1026   					currCharNum+=pntlen;
;;;1027   					
;;;1028   					buf[currCharNum++]=(',');
;;;1029   					sprintf(&buf[currCharNum],"%04d",Para.CR1_VLUE);
;;;1030   					currCharNum+=4;
;;;1031   					
;;;1032   					buf[currCharNum++]=(',');
;;;1033   					sprintf(&buf[currCharNum],"%04d",Para.CR2_VLUE);
;;;1034   					currCharNum+=4;
;;;1035   
;;;1036   					buf[currCharNum++]=(',');
;;;1037   					sprintf(&buf[currCharNum],"%06d",(int)(max_discahrgeNum*1000));
;;;1038   					currCharNum+=6;
;;;1039   					
;;;1040   					buf[currCharNum++]=(',');
;;;1041   					sprintf(&buf[currCharNum],"%03d",shorttime);
;;;1042   					currCharNum+=3;
;;;1043   					
;;;1044   					buf[currCharNum++]=(',');
;;;1045   					sprintf(&buf[currCharNum],"%1d",mainswitch);
0000ae  f8dfb390          LDR      r11,|L9.1088|
0000b2  b285              UXTH     r5,r0                 ;1000
;;;1046   					currCharNum+=1;
;;;1047   					
;;;1048   					buf[currCharNum++]=(',');
;;;1049   					sprintf(&buf[currCharNum],"%1d",finishflag);
;;;1050   					currCharNum+=1;
;;;1051   					
;;;1052   					buf[currCharNum++]=(',');
;;;1053   					sprintf(&buf[currCharNum],"%1d",lockflag);
;;;1054   					currCharNum+=1;
;;;1055   					
;;;1056   					buf[currCharNum++]=(',');
;;;1057   					sprintf(&buf[currCharNum],"%2d",version);
;;;1058   					currCharNum+=2;
;;;1059   					
;;;1060   					buf[currCharNum++]=(',');
;;;1061   					sprintf(&buf[currCharNum],"%03d",Temperature);
;;;1062   					currCharNum+=3;
;;;1063   //					buf[currCharNum++]=(',');
;;;1064   //					sprintf(&buf[currCharNum],"%d",H_L);
;;;1065   //					currCharNum++;
;;;1066   					
;;;1067   //					buf[currCharNum++]=(',');
;;;1068   //					sprintf(&buf[currCharNum],"%d",LM_S);
;;;1069   //					currCharNum++;
;;;1070   					
;;;1071   //					buf[currCharNum++]=(',');
;;;1072   //					sprintf(&buf[currCharNum],"%02d",(int)temperature);
;;;1073   //					currCharNum+=2;
;;;1074   					
;;;1075   				  buf[currCharNum++ ] = ChrEndR;
;;;1076   				  buf[currCharNum++ ] = ChrEndS;
;;;1077   				}
;;;1078   				else
;;;1079   				{
;;;1080   					return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1081   				}
;;;1082   				break;
;;;1083   			case 1:
;;;1084   				pntlen = 1;
;;;1085   				if(buf[currCharNum]=='?')
;;;1086   				{
;;;1087   					  sprintf(&buf[currCharNum],"%1d",MODE);
;;;1088   				    currCharNum+=pntlen;
;;;1089   				    buf[currCharNum ++] = ChrEndS;
;;;1090   					
;;;1091   				}
;;;1092   				else
;;;1093   				{
;;;1094   					pntlen = 1;				
;;;1095   					for(i=0,temp1=0;i<pntlen;i++)
;;;1096   					{
;;;1097   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1098   					}		                   
;;;1099   //					if(temp1>1)
;;;1100   //					{
;;;1101   //						return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1102   //					}
;;;1103   					MODE=temp1;
;;;1104   //					Off_GPOI_ResetSet();
;;;1105   					OnOff_GPOI_ResetSet( 2, 0 );
;;;1106   					mainswitch = 0;
;;;1107   					sendwait = 3;
;;;1108   					MODE_PARASET(MODE);
;;;1109   	//				Change_LM_Val(LM_S_Vale);
;;;1110   					buf[currCharNum++] = ChrEndR;
;;;1111   				}
;;;1112   				break;
;;;1113   				case 2:
;;;1114   				pntlen = 1;
;;;1115   				if(buf[currCharNum]=='?')
;;;1116   				{
;;;1117   					sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
0000b4  49e3              LDR      r1,|L9.1092|
0000b6  f8dfa390          LDR      r10,|L9.1096|
0000ba  4640              MOV      r0,r8                 ;1001
0000bc  f04f090a          MOV      r9,#0xa               ;977
0000c0  f1ab0b34          SUB      r11,r11,#0x34         ;1045
0000c4  f06f062f          MVN      r6,#0x2f              ;1097
0000c8  f1b80f04          CMP      r8,#4                 ;1001
0000cc  d07c              BEQ      |L9.456|
0000ce  dc0d              BGT      |L9.236|
0000d0  b350              CBZ      r0,|L9.296|
0000d2  2801              CMP      r0,#1                 ;1001
0000d4  d079              BEQ      |L9.458|
0000d6  2802              CMP      r0,#2                 ;1001
0000d8  d078              BEQ      |L9.460|
0000da  f1b80f03          CMP      r8,#3                 ;1001
0000de  d1a8              BNE      |L9.50|
;;;1118   				    currCharNum+=pntlen;
;;;1119   				    buf[currCharNum ++] = ChrEndS;
;;;1120   					
;;;1121   				}
;;;1122   				else
;;;1123   				{
;;;1124   					pntlen = 1;				
;;;1125   					for(i=0,temp1=0;i<pntlen;i++)
;;;1126   					{
;;;1127   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1128   					}		                   
;;;1129   					if(temp1>1)
;;;1130   					{
;;;1131   						return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1132   					}
;;;1133   //					MODE=temp1;
;;;1134   					
;;;1135   					
;;;1136   					mainswitch = temp1;
;;;1137   //						Para.CSET_Voltage = 5000;
;;;1138   //						Para.CSET_Current = 1000;
;;;1139   					
;;;1140   						
;;;1141   					MODE_ONOFF(mainswitch);
;;;1142   	//				Change_LM_Val(LM_S_Vale);
;;;1143   					buf[currCharNum++] = ChrEndR;
;;;1144   		        }
;;;1145   				break;
;;;1146   				case 3:
;;;1147   				pntlen = 1;
;;;1148   				if(buf[currCharNum]=='?')
0000e0  5d60              LDRB     r0,[r4,r5]
0000e2  283f              CMP      r0,#0x3f
0000e4  d073              BEQ      |L9.462|
;;;1149   				{
;;;1150   					  sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1151   				    currCharNum+=pntlen;
;;;1152   				    buf[currCharNum ++] = ChrEndS;
;;;1153   					
;;;1154   				}
;;;1155   				else
;;;1156   				{
;;;1157   					if(currCharNum == 0x0b)
0000e6  2d0b              CMP      r5,#0xb
0000e8  d072              BEQ      |L9.464|
0000ea  e134              B        |L9.854|
                  |L9.236|
0000ec  280c              CMP      r0,#0xc               ;1001
0000ee  d070              BEQ      |L9.466|
0000f0  280d              CMP      r0,#0xd               ;1001
0000f2  d06f              BEQ      |L9.468|
0000f4  280e              CMP      r0,#0xe               ;1001
0000f6  d06e              BEQ      |L9.470|
0000f8  f1b80f12          CMP      r8,#0x12              ;1001
0000fc  d199              BNE      |L9.50|
;;;1158   					{						
;;;1159   						for(i=0,temp1=0;i<5;i++)
;;;1160   						{
;;;1161   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1162   						}
;;;1163   					}		
;;;1164   					Para.IR_Start_C = temp1;//起始电流
;;;1165   					temp1 = 0;
;;;1166   					
;;;1167   					if(buf[currCharNum++] == ',')
;;;1168   					{
;;;1169   						for(i=0,temp1=0;i<5;i++)
;;;1170   						{
;;;1171   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1172   						}
;;;1173   					}	
;;;1174   					Para.IR_Step_C = temp1;//步进电流
;;;1175   					temp1 = 0;
;;;1176   					 
;;;1177   					if(buf[currCharNum++] == ',')
;;;1178   					{
;;;1179   						for(i=0,temp1=0;i<5;i++)
;;;1180   						{
;;;1181   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1182   						}
;;;1183   					}	
;;;1184   					Para.IR_Threshold_V = temp1;//门槛电压
;;;1185   					temp1 = 0;
;;;1186   					
;;;1187   					if(buf[currCharNum++] == ',')
;;;1188   					{
;;;1189   						for(i=0,temp1=0;i<3;i++)
;;;1190   						{
;;;1191   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1192   						}
;;;1193   					}	
;;;1194   					Para.IR_Step_Time = temp1;//步进时间
;;;1195   					temp1 = 0;
;;;1196   					
;;;1197   					if(buf[currCharNum++] == ',')
;;;1198   					{
;;;1199   						for(i=0,temp1=0;i<5;i++)
;;;1200   						{
;;;1201   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1202   						}
;;;1203   					}	
;;;1204   					Para.POWER_OutPut_V = temp1;//电源电压
;;;1205   					temp1 = 0;
;;;1206   					
;;;1207   					if(buf[currCharNum++] == ',')
;;;1208   					{
;;;1209   						for(i=0,temp1=0;i<5;i++)
;;;1210   						{
;;;1211   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1212   						}
;;;1213   					}	
;;;1214   					Para.POWER_Limit_C = temp1;//电源电流
;;;1215   					temp1 = 0;
;;;1216   					
;;;1217   					if(buf[currCharNum++] == ',')
;;;1218   					{
;;;1219   						for(i=0,temp1=0;i<5;i++)
;;;1220   						{
;;;1221   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1222   						}
;;;1223   					}	
;;;1224   					Para.POWER_Cutoff_C = temp1;//设置充电截止电流
;;;1225   					temp1 = 0;
;;;1226   					
;;;1227   					if(buf[currCharNum++] == ',')
;;;1228   					{
;;;1229   						for(i=0,temp1=0;i<5;i++)
;;;1230   						{
;;;1231   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1232   						}
;;;1233   					}	
;;;1234   					Para.LOAD_V = temp1;//负载电压
;;;1235   					temp1 = 0;
;;;1236   					
;;;1237   					if(buf[currCharNum++] == ',')
;;;1238   					{
;;;1239   						for(i=0,temp1=0;i<5;i++)
;;;1240   						{
;;;1241   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1242   						}
;;;1243   					}	
;;;1244   					Para.LOAD_C = temp1;//负载电流
;;;1245   					temp1 = 0;
;;;1246   					
;;;1247   					if(buf[currCharNum++] == ',')
;;;1248   					{
;;;1249   						for(i=0,temp1=0;i<5;i++)
;;;1250   						{
;;;1251   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1252   						}
;;;1253   					}	
;;;1254   					Para.LOAD_Cutoff_V = temp1;//设置负载截止电压
;;;1255   					temp1 = 0;
;;;1256   					
;;;1257   					if(buf[currCharNum++] == ',')
;;;1258   					{
;;;1259   						for(i=0,temp1=0;i<5;i++)
;;;1260   						{
;;;1261   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1262   						}
;;;1263   					}	
;;;1264   					Para.CDC_OutPut_V = temp1;//设置容量测试充电电压
;;;1265   					temp1 = 0;
;;;1266   					
;;;1267   					if(buf[currCharNum++] == ',')
;;;1268   					{
;;;1269   						for(i=0,temp1=0;i<5;i++)
;;;1270   						{
;;;1271   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1272   						}
;;;1273   					}	
;;;1274   					Para.CDC_Limit_C = temp1;//设置容量测试充电限制电流
;;;1275   					temp1 = 0;
;;;1276   					
;;;1277   					if(buf[currCharNum++] == ',')
;;;1278   					{
;;;1279   						for(i=0,temp1=0;i<5;i++)
;;;1280   						{
;;;1281   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1282   						}
;;;1283   					}	
;;;1284   					Para.CDC_Ccutoff_V = temp1;//设置容量测试充电截止电压
;;;1285   					temp1 = 0;
;;;1286   					
;;;1287   					if(buf[currCharNum++] == ',')
;;;1288   					{
;;;1289   						for(i=0,temp1=0;i<5;i++)
;;;1290   						{
;;;1291   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1292   						}
;;;1293   					}	
;;;1294   					Para.CDC_Ccutoff_C = temp1;//设置容量测试充电截止电流
;;;1295   					temp1 = 0;
;;;1296   					
;;;1297   					if(buf[currCharNum++] == ',')
;;;1298   					{
;;;1299   						for(i=0,temp1=0;i<5;i++)
;;;1300   						{
;;;1301   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1302   						}
;;;1303   					}	
;;;1304   					Para.CDC_Load_C = temp1;//设置容量测试放电电流
;;;1305   					temp1 = 0;
;;;1306   					
;;;1307   					if(buf[currCharNum++] == ',')
;;;1308   					{
;;;1309   						for(i=0,temp1=0;i<5;i++)
;;;1310   						{
;;;1311   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1312   						}
;;;1313   					}	
;;;1314   					Para.CDC_Dcutoff_V = temp1;//设置容量测试放电截止电压
;;;1315   					temp1 = 0;
;;;1316   					
;;;1317   					if(buf[currCharNum++] == ',')
;;;1318   					{
;;;1319   						for(i=0,temp1=0;i<3;i++)
;;;1320   						{
;;;1321   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1322   						}
;;;1323   					}	
;;;1324   					Para.CDC_Cycle_Time = temp1;//循环次数
;;;1325   					temp1 = 0;
;;;1326   					
;;;1327   					if(buf[currCharNum++] == ',')
;;;1328   					{
;;;1329   						for(i=0,temp1=0;i<3;i++)
;;;1330   						{
;;;1331   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1332   						}
;;;1333   					}	
;;;1334   					if(MODE == 0)
;;;1335   					{
;;;1336   						Para.CLOAD_MODE = temp1;//负载模式
;;;1337   					}
;;;1338   					temp1 = 0;
;;;1339   //					MODE_PARASET(MODE);
;;;1340   					
;;;1341   					if(buf[currCharNum++] == ',')
;;;1342   					{
;;;1343   						for(i=0,temp1=0;i<3;i++)
;;;1344   						{
;;;1345   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1346   						}
;;;1347   					}	
;;;1348   					Rraly = temp1;//内阻档位
;;;1349   					temp1 = 0;
;;;1350   					
;;;1351   					if(buf[currCharNum++] == ',')
;;;1352   					{
;;;1353   						for(i=0,temp1=0;i<3;i++)
;;;1354   						{
;;;1355   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1356   						}
;;;1357   					}	
;;;1358   					Para.ACT_DELAY = temp1;//激活延时
;;;1359   					temp1 = 0;
;;;1360   					
;;;1361   					MODE_PARASET(MODE);
;;;1362   					
;;;1363   					 buf[currCharNum++] = ChrEndS;
;;;1364   		        }
;;;1365   				break;
;;;1366   				case 4:
;;;1367   				pntlen = 1;
;;;1368   				if(buf[currCharNum]=='?')
;;;1369   				{
;;;1370   					  sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1371   				    currCharNum+=pntlen;
;;;1372   				    buf[currCharNum ++] = ChrEndS;
;;;1373   					
;;;1374   				}
;;;1375   				else
;;;1376   				{
;;;1377   					if(currCharNum == 0x0b)
;;;1378   					{						
;;;1379   						for(i=0,temp1=0;i<2;i++)
;;;1380   						{
;;;1381   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1382   						}
;;;1383   					}
;;;1384   					MODE = temp1;//项目
;;;1385   					temp1 = 0;
;;;1386   					
;;;1387   					if(MODE == 0)
;;;1388   					{
;;;1389   						if(buf[currCharNum++] == ',')
;;;1390   						{
;;;1391   							for(i=0,temp1=0;i<5;i++)
;;;1392   							{
;;;1393   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1394   							}
;;;1395   						}	
;;;1396   						
;;;1397   						temp1 = 0;
;;;1398   						
;;;1399   						if(buf[currCharNum++] == ',')
;;;1400   						{
;;;1401   							for(i=0,temp1=0;i<5;i++)
;;;1402   							{
;;;1403   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1404   							}
;;;1405   						}	
;;;1406   						Para.CSET_Current_Laod = temp1;//负载电流
;;;1407   						temp1 = 0;
;;;1408   						
;;;1409   	
;;;1410   						if(Para.CSET_Current_Laod > 20000)
;;;1411   						{
;;;1412   							LOAD_I_SW = 1;
;;;1413   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1414   						}else{
;;;1415   							LOAD_I_SW = 0;
;;;1416   							GPIO_SetBits(GPIOC,GPIO_Pin_11);//电流测量为低档位
;;;1417   						}
;;;1418   						if(buf[currCharNum++] == ',')
;;;1419   						{
;;;1420   							for(i=0,temp1=0;i<1;i++)
;;;1421   							{
;;;1422   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1423   							}
;;;1424   						}
;;;1425   						mainswitch = temp1;//开关
;;;1426   						if(mainswitch == 0)
;;;1427   						{
;;;1428   							LOAD_I_SW = 1;
;;;1429   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1430   						}
;;;1431   					}else if(MODE == 1){
;;;1432   						if(buf[currCharNum++] == ',')
;;;1433   						{
;;;1434   							for(i=0,temp1=0;i<5;i++)
;;;1435   							{
;;;1436   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1437   							}
;;;1438   						}	
;;;1439   						Para.CDC_OutPut_V = temp1;//电源电压
;;;1440   						temp1 = 0;
;;;1441   						
;;;1442   						if(buf[currCharNum++] == ',')
;;;1443   						{
;;;1444   							for(i=0,temp1=0;i<5;i++)
;;;1445   							{
;;;1446   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1447   							}
;;;1448   						}	
;;;1449   						Para.CDC_Limit_C = temp1;//电源电流
;;;1450   						temp1 = 0;
;;;1451   						
;;;1452   						if(buf[currCharNum++] == ',')
;;;1453   						{
;;;1454   							for(i=0,temp1=0;i<1;i++)
;;;1455   							{
;;;1456   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1457   							}
;;;1458   						}
;;;1459   						mainswitch = temp1;//开关
;;;1460   					}else if(MODE == 2){
;;;1461   						LOAD_I_SW = 1;
;;;1462   						GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1463   						if(buf[currCharNum++] == ',')
;;;1464   						{
;;;1465   							for(i=0,temp1=0;i<5;i++)
;;;1466   							{
;;;1467   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1468   							}
;;;1469   						}	
;;;1470   						Para.IR_Start_C = temp1;//起始电流
;;;1471   						temp1 = 0;
;;;1472   						
;;;1473   						if(buf[currCharNum++] == ',')
;;;1474   						{
;;;1475   							for(i=0,temp1=0;i<5;i++)
;;;1476   							{
;;;1477   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1478   							}
;;;1479   						}	
;;;1480   						Para.IR_Step_C = temp1;//步进电流
;;;1481   						temp1 = 0;
;;;1482   						
;;;1483   						if(buf[currCharNum++] == ',')
;;;1484   						{
;;;1485   							for(i=0,temp1=0;i<1;i++)
;;;1486   							{
;;;1487   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1488   							}
;;;1489   						}
;;;1490   						mainswitch = temp1;//开关
;;;1491   						finishflag = 0;
;;;1492   					}else if(MODE == 3){
;;;1493   						if(buf[currCharNum++] == ',')
;;;1494   						{
;;;1495   							for(i=0,temp1=0;i<5;i++)
;;;1496   							{
;;;1497   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1498   							}
;;;1499   						}	
;;;1500   						Para.CDC_OutPut_V = temp1;//电源电压
;;;1501   						temp1 = 0;
;;;1502   						
;;;1503   						
;;;1504   						if(buf[currCharNum++] == ',')
;;;1505   						{
;;;1506   							for(i=0,temp1=0;i<5;i++)
;;;1507   							{
;;;1508   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1509   							}
;;;1510   						}	
;;;1511   						Para.CDC_Limit_C = temp1;//电源电流
;;;1512   						temp1 = 0;
;;;1513   						
;;;1514   						if(buf[currCharNum++] == ',')
;;;1515   						{
;;;1516   							for(i=0,temp1=0;i<1;i++)
;;;1517   							{
;;;1518   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1519   							}
;;;1520   						}
;;;1521   						mainswitch = temp1;//开关
;;;1522   						
;;;1523   						
;;;1524   					}else if(MODE == 4){
;;;1525   						if(buf[currCharNum++] == ',')
;;;1526   						{
;;;1527   							for(i=0,temp1=0;i<5;i++)
;;;1528   							{
;;;1529   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1530   							}
;;;1531   						}	
;;;1532   						
;;;1533   						temp1 = 0;
;;;1534   						
;;;1535   						if(buf[currCharNum++] == ',')
;;;1536   						{
;;;1537   							for(i=0,temp1=0;i<5;i++)
;;;1538   							{
;;;1539   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1540   							}
;;;1541   						}	
;;;1542   						Para.CSET_Current_Laod = temp1;//负载电流
;;;1543   						temp1 = 0;
;;;1544   						
;;;1545   	
;;;1546   						if(Para.CSET_Current_Laod > 20000)
;;;1547   						{
;;;1548   							LOAD_I_SW = 1;
;;;1549   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1550   						}else{
;;;1551   							LOAD_I_SW = 0;
;;;1552   							GPIO_SetBits(GPIOC,GPIO_Pin_11);//电流测量为低档位
;;;1553   						}
;;;1554   						if(buf[currCharNum++] == ',')
;;;1555   						{
;;;1556   							for(i=0,temp1=0;i<1;i++)
;;;1557   							{
;;;1558   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1559   							}
;;;1560   						}
;;;1561   						mainswitch = temp1;//开关
;;;1562   						if(mainswitch == 0)
;;;1563   						{
;;;1564   							LOAD_I_SW = 1;
;;;1565   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1566   						}
;;;1567   					}else if(MODE == 5){
;;;1568   						if(buf[currCharNum++] == ',')
;;;1569   						{
;;;1570   							for(i=0,temp1=0;i<5;i++)
;;;1571   							{
;;;1572   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1573   							}
;;;1574   						}	
;;;1575   						temp1 = 0;
;;;1576   						
;;;1577   						if(buf[currCharNum++] == ',')
;;;1578   						{
;;;1579   							for(i=0,temp1=0;i<5;i++)
;;;1580   							{
;;;1581   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1582   							}
;;;1583   						}	
;;;1584   						temp1 = 0;
;;;1585   						
;;;1586   						if(buf[currCharNum++] == ',')
;;;1587   						{
;;;1588   							for(i=0,temp1=0;i<1;i++)
;;;1589   							{
;;;1590   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1591   							}
;;;1592   						}
;;;1593   						mainswitch = temp1;//开关
;;;1594   						if(mainswitch == 0)
;;;1595   						{
;;;1596   							mainswitch = 0;
;;;1597   						}
;;;1598   					}else if(MODE == 6){
;;;1599   						if(buf[currCharNum++] == ',')
;;;1600   						{
;;;1601   							for(i=0,temp1=0;i<5;i++)
;;;1602   							{
;;;1603   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1604   							}
;;;1605   						}	
;;;1606   						temp1 = 0;
;;;1607   						
;;;1608   						if(buf[currCharNum++] == ',')
;;;1609   						{
;;;1610   							for(i=0,temp1=0;i<5;i++)
;;;1611   							{
;;;1612   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1613   							}
;;;1614   						}	
;;;1615   						temp1 = 0;
;;;1616   						
;;;1617   						if(buf[currCharNum++] == ',')
;;;1618   						{
;;;1619   							for(i=0,temp1=0;i<1;i++)
;;;1620   							{
;;;1621   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1622   							}
;;;1623   						}
;;;1624   						mainswitch = temp1;//开关
;;;1625   					}
;;;1626   					
;;;1627   					temp1 = 0;
;;;1628   //					MODE_PARASET(MODE);
;;;1629   					Off_GPOI_ResetSet();
;;;1630   					LIST_ONOFF(mainswitch);
;;;1631   					buf[currCharNum++] = ChrEndS;
;;;1632   		        }
;;;1633   				break;
;;;1634   				case 12://电压校准
;;;1635   				{
;;;1636   					pntlen = 8;
;;;1637   					if(buf[currCharNum]=='?')
;;;1638   					{
;;;1639   						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1640   						sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1641   						currCharNum+=pntlen;
;;;1642   						buf[currCharNum++ ] = ChrEndS;
;;;1643   					}
;;;1644   					else
;;;1645   					{
;;;1646   						tmpFg = 1;
;;;1647   						for(i=0;i<pntlen;i++)
;;;1648   						{
;;;1649   						   if(i==0||i==4)
;;;1650   							  continue;
;;;1651   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1652   						   {
;;;1653   							  tmpFg = (tmpFg&0x01);
;;;1654   						   }
;;;1655   						   else
;;;1656   						   {
;;;1657   							  tmpFg = 0;
;;;1658   						   }
;;;1659   						}
;;;1660   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1661   						{
;;;1662   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1663   							
;;;1664   						}
;;;1665   						temp1=0;
;;;1666   						for(i=0;i<pntlen;i++)
;;;1667   						{
;;;1668   						   if(i==0)
;;;1669   						   {
;;;1670   							   fsingal = buf[currCharNum++]-0x30;
;;;1671   							   continue; 
;;;1672   						   } 
;;;1673   						   else if(i==4)
;;;1674   						   {
;;;1675   							   currCharNum++;
;;;1676   							   continue; 
;;;1677   						   }
;;;1678   						   else									 
;;;1679   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1680   						}	
;;;1681   						CalHandle(0,fsingal,temp1);
;;;1682   						
;;;1683   					}
;;;1684   				}break;
;;;1685   				case 13://电流校准
;;;1686   				{
;;;1687   					pntlen = 8;
;;;1688   					if(buf[currCharNum]=='?')
;;;1689   					{
;;;1690   //						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1691   //									sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1692   //						currCharNum+=pntlen;
;;;1693   //						buf[currCharNum++ ] = ChrEndS;
;;;1694   					}
;;;1695   					else
;;;1696   					{
;;;1697   						tmpFg = 1;
;;;1698   						for(i=0;i<pntlen;i++)
;;;1699   						{
;;;1700   						   if(i==0||i==4)
;;;1701   							  continue;
;;;1702   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1703   						   {
;;;1704   							  tmpFg = (tmpFg&0x01);
;;;1705   						   }
;;;1706   						   else
;;;1707   						   {
;;;1708   							  tmpFg = 0;
;;;1709   						   }
;;;1710   						}
;;;1711   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1712   						{
;;;1713   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1714   							
;;;1715   						}
;;;1716   						temp1=0;
;;;1717   						for(i=0;i<pntlen;i++)
;;;1718   						{
;;;1719   						   if(i==0)
;;;1720   						   {
;;;1721   							   fsingal = buf[currCharNum++]-0x30;
;;;1722   							   continue; 
;;;1723   						   } 
;;;1724   						   else if(i==4)
;;;1725   						   {
;;;1726   							   currCharNum++;
;;;1727   							   continue; 
;;;1728   						   }
;;;1729   						   else									 
;;;1730   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1731   						}	
;;;1732   						CalHandle(1,fsingal,temp1);
;;;1733   						
;;;1734   					}
;;;1735   				}break;
;;;1736   				case 14://电阻校准
;;;1737   				{
;;;1738   					pntlen = 6;
;;;1739   					if(buf[currCharNum]=='?')
;;;1740   					{
;;;1741   						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1742   									sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1743   						currCharNum+=pntlen;
;;;1744   						buf[currCharNum++ ] = ChrEndS;
;;;1745   					}
;;;1746   					else
;;;1747   					{
;;;1748   						tmpFg = 1;
;;;1749   						for(i=0;i<pntlen;i++)
;;;1750   						{
;;;1751   						   if(i==0||i==4)
;;;1752   							  continue;
;;;1753   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1754   						   {
;;;1755   							  tmpFg = (tmpFg&0x01);
;;;1756   						   }
;;;1757   						   else
;;;1758   						   {
;;;1759   							  tmpFg = 0;
;;;1760   						   }
;;;1761   						}
;;;1762   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1763   						{
;;;1764   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1765   							
;;;1766   						}
;;;1767   						temp1=0;
;;;1768   						for(i=0;i<pntlen;i++)
;;;1769   						{
;;;1770   						   if(i==0)
;;;1771   						   {
;;;1772   							   fsingal = buf[currCharNum++]-0x30;
;;;1773   							   continue; 
;;;1774   						   } 
;;;1775   //						   else if(i==4)
;;;1776   //						   {
;;;1777   //							   currCharNum++;
;;;1778   //							   continue; 
;;;1779   //						   }
;;;1780   //						   else									 
;;;1781   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1782   						}
;;;1783   						CalHandle(2,fsingal,temp1);
;;;1784   						
;;;1785   					}
;;;1786   				}break;
;;;1787   				case 18:
;;;1788   				{
;;;1789   					if(buf[currCharNum]=='?')
0000fe  5d60              LDRB     r0,[r4,r5]
000100  283f              CMP      r0,#0x3f
000102  d069              BEQ      |L9.472|
;;;1790   					{
;;;1791   //						sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1792   //						currCharNum+=pntlen;
;;;1793   //						buf[currCharNum ++] = ChrEndS;
;;;1794   						
;;;1795   					}
;;;1796   					else
;;;1797   					{
;;;1798   						pntlen = 1;				
000104  2101              MOVS     r1,#1
;;;1799   						for(i=0,temp1=0;i<pntlen;i++)
000106  2000              MOVS     r0,#0
000108  4607              MOV      r7,r0
                  |L9.266|
;;;1800   						{
;;;1801   							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
00010a  5d62              LDRB     r2,[r4,r5]
00010c  eb070387          ADD      r3,r7,r7,LSL #2
000110  eb060343          ADD      r3,r6,r3,LSL #1
000114  1c6d              ADDS     r5,r5,#1
000116  1c40              ADDS     r0,r0,#1
000118  18d7              ADDS     r7,r2,r3
00011a  b2c0              UXTB     r0,r0                 ;1799
00011c  b2ad              UXTH     r5,r5
00011e  4288              CMP      r0,r1                 ;1799
000120  d3f3              BCC      |L9.266|
;;;1802   						}		                   
;;;1803   						if(temp1>1)
000122  2f01              CMP      r7,#1
000124  d87e              BHI      |L9.548|
000126  e3fd              B        |L9.2340|
                  |L9.296|
000128  5d60              LDRB     r0,[r4,r5]            ;1005
00012a  283f              CMP      r0,#0x3f              ;1005
00012c  d181              BNE      |L9.50|
00012e  f8da202c          LDR      r2,[r10,#0x2c]        ;1009  ; Para
000132  4656              MOV      r6,r10                ;1009
000134  1960              ADDS     r0,r4,r5              ;1009
000136  a1c5              ADR      r1,|L9.1100|
000138  f7fffffe          BL       __2sprintf
00013c  1d6d              ADDS     r5,r5,#5              ;1009
00013e  b2a8              UXTH     r0,r5                 ;1010
000140  252c              MOVS     r5,#0x2c              ;1012
000142  5425              STRB     r5,[r4,r0]            ;1012
000144  1c40              ADDS     r0,r0,#1              ;1012
000146  6b72              LDR      r2,[r6,#0x34]         ;1013  ; Para
000148  b287              UXTH     r7,r0                 ;1012
00014a  19e0              ADDS     r0,r4,r7              ;1013
00014c  a1c1              ADR      r1,|L9.1108|
00014e  f7fffffe          BL       __2sprintf
000152  1dbf              ADDS     r7,r7,#6              ;1013
000154  b2b8              UXTH     r0,r7                 ;1014
000156  5425              STRB     r5,[r4,r0]            ;1016
000158  1c40              ADDS     r0,r0,#1              ;1016
00015a  6ab2              LDR      r2,[r6,#0x28]         ;1017  ; Para
00015c  b287              UXTH     r7,r0                 ;1016
00015e  19e0              ADDS     r0,r4,r7              ;1017
000160  a1ba              ADR      r1,|L9.1100|
000162  f7fffffe          BL       __2sprintf
000166  1d7f              ADDS     r7,r7,#5              ;1017
000168  b2b8              UXTH     r0,r7                 ;1018
00016a  5425              STRB     r5,[r4,r0]            ;1020
00016c  1c40              ADDS     r0,r0,#1              ;1020
00016e  6b32              LDR      r2,[r6,#0x30]         ;1021  ; Para
000170  b287              UXTH     r7,r0                 ;1020
000172  19e0              ADDS     r0,r4,r7              ;1021
000174  a1b5              ADR      r1,|L9.1100|
000176  f7fffffe          BL       __2sprintf
00017a  1d7f              ADDS     r7,r7,#5              ;1021
00017c  b2b8              UXTH     r0,r7                 ;1022
00017e  5425              STRB     r5,[r4,r0]            ;1024
000180  1c40              ADDS     r0,r0,#1              ;1024
000182  6bb2              LDR      r2,[r6,#0x38]         ;1025  ; Para
000184  b287              UXTH     r7,r0                 ;1024
000186  19e0              ADDS     r0,r4,r7              ;1025
000188  a1b0              ADR      r1,|L9.1100|
00018a  f7fffffe          BL       __2sprintf
00018e  1d7f              ADDS     r7,r7,#5              ;1025
000190  b2b8              UXTH     r0,r7                 ;1026
000192  5425              STRB     r5,[r4,r0]            ;1028
000194  1c40              ADDS     r0,r0,#1              ;1028
000196  6bf2              LDR      r2,[r6,#0x3c]         ;1029  ; Para
000198  b287              UXTH     r7,r0                 ;1028
00019a  19e0              ADDS     r0,r4,r7              ;1029
00019c  a1af              ADR      r1,|L9.1116|
00019e  f7fffffe          BL       __2sprintf
0001a2  1d3f              ADDS     r7,r7,#4              ;1029
0001a4  b2b8              UXTH     r0,r7                 ;1030
0001a6  5425              STRB     r5,[r4,r0]            ;1032
0001a8  1c40              ADDS     r0,r0,#1              ;1032
0001aa  6c32              LDR      r2,[r6,#0x40]         ;1033  ; Para
0001ac  b287              UXTH     r7,r0                 ;1032
0001ae  19e0              ADDS     r0,r4,r7              ;1033
0001b0  a1aa              ADR      r1,|L9.1116|
0001b2  f7fffffe          BL       __2sprintf
0001b6  1d3f              ADDS     r7,r7,#4              ;1033
0001b8  b2b8              UXTH     r0,r7                 ;1034
0001ba  5425              STRB     r5,[r4,r0]            ;1036
0001bc  1c40              ADDS     r0,r0,#1              ;1036
0001be  b286              UXTH     r6,r0                 ;1036
0001c0  48a8              LDR      r0,|L9.1124|
0001c2  ed900a00          VLDR     s0,[r0,#0]            ;1037
0001c6  e008              B        |L9.474|
                  |L9.456|
0001c8  e287              B        |L9.1754|
                  |L9.458|
0001ca  e05e              B        |L9.650|
                  |L9.460|
0001cc  e087              B        |L9.734|
                  |L9.462|
0001ce  e109              B        |L9.996|
                  |L9.464|
0001d0  e0b3              B        |L9.826|
                  |L9.466|
0001d2  e3fd              B        |L9.2512|
                  |L9.468|
0001d4  e3fd              B        |L9.2514|
                  |L9.470|
0001d6  e3fd              B        |L9.2516|
                  |L9.472|
0001d8  e3fd              B        |L9.2518|
                  |L9.474|
0001da  eddf0aa3          VLDR     s1,|L9.1128|
0001de  19a0              ADDS     r0,r4,r6              ;1037
0001e0  a19c              ADR      r1,|L9.1108|
0001e2  ee200a20          VMUL.F32 s0,s0,s1              ;1037
0001e6  eebd0ac0          VCVT.S32.F32 s0,s0                 ;1037
0001ea  ee102a10          VMOV     r2,s0                 ;1037
0001ee  f7fffffe          BL       __2sprintf
0001f2  1db6              ADDS     r6,r6,#6              ;1037
0001f4  b2b0              UXTH     r0,r6                 ;1038
0001f6  499d              LDR      r1,|L9.1132|
0001f8  5425              STRB     r5,[r4,r0]            ;1040
0001fa  1c40              ADDS     r0,r0,#1              ;1040
0001fc  b286              UXTH     r6,r0                 ;1040
0001fe  780a              LDRB     r2,[r1,#0]            ;1041  ; shorttime
000200  19a0              ADDS     r0,r4,r6              ;1041
000202  a19b              ADR      r1,|L9.1136|
000204  f7fffffe          BL       __2sprintf
000208  1cf6              ADDS     r6,r6,#3              ;1041
00020a  b2b0              UXTH     r0,r6                 ;1042
00020c  5425              STRB     r5,[r4,r0]            ;1044
00020e  1c40              ADDS     r0,r0,#1              ;1044
000210  b286              UXTH     r6,r0                 ;1044
000212  f89b2006          LDRB     r2,[r11,#6]           ;1045  ; mainswitch
000216  19a0              ADDS     r0,r4,r6              ;1045
000218  a197              ADR      r1,|L9.1144|
00021a  f7fffffe          BL       __2sprintf
00021e  1c76              ADDS     r6,r6,#1              ;1045
000220  b2b0              UXTH     r0,r6                 ;1046
000222  e000              B        |L9.550|
                  |L9.548|
000224  e06f              B        |L9.774|
                  |L9.550|
000226  5425              STRB     r5,[r4,r0]            ;1048
000228  4994              LDR      r1,|L9.1148|
00022a  1c40              ADDS     r0,r0,#1              ;1048
00022c  b286              UXTH     r6,r0                 ;1048
00022e  780a              LDRB     r2,[r1,#0]            ;1049  ; finishflag
000230  19a0              ADDS     r0,r4,r6              ;1049
000232  a191              ADR      r1,|L9.1144|
000234  f7fffffe          BL       __2sprintf
000238  1c76              ADDS     r6,r6,#1              ;1049
00023a  b2b0              UXTH     r0,r6                 ;1050
00023c  4990              LDR      r1,|L9.1152|
00023e  5425              STRB     r5,[r4,r0]            ;1052
000240  1c40              ADDS     r0,r0,#1              ;1052
000242  b286              UXTH     r6,r0                 ;1052
000244  780a              LDRB     r2,[r1,#0]            ;1053  ; lockflag
000246  19a0              ADDS     r0,r4,r6              ;1053
000248  a18b              ADR      r1,|L9.1144|
00024a  f7fffffe          BL       __2sprintf
00024e  1c76              ADDS     r6,r6,#1              ;1053
000250  b2b0              UXTH     r0,r6                 ;1054
000252  498c              LDR      r1,|L9.1156|
000254  5425              STRB     r5,[r4,r0]            ;1056
000256  1c40              ADDS     r0,r0,#1              ;1056
000258  b286              UXTH     r6,r0                 ;1056
00025a  780a              LDRB     r2,[r1,#0]            ;1057  ; version
00025c  19a0              ADDS     r0,r4,r6              ;1057
00025e  a18a              ADR      r1,|L9.1160|
000260  f7fffffe          BL       __2sprintf
000264  1cb6              ADDS     r6,r6,#2              ;1057
000266  b2b0              UXTH     r0,r6                 ;1058
000268  4988              LDR      r1,|L9.1164|
00026a  5425              STRB     r5,[r4,r0]            ;1060
00026c  1c40              ADDS     r0,r0,#1              ;1060
00026e  b285              UXTH     r5,r0                 ;1060
000270  f9b12000          LDRSH    r2,[r1,#0]            ;1061  ; Temperature
000274  1960              ADDS     r0,r4,r5              ;1061
000276  a17e              ADR      r1,|L9.1136|
000278  f7fffffe          BL       __2sprintf
00027c  1ced              ADDS     r5,r5,#3              ;1061
00027e  b2a8              UXTH     r0,r5                 ;1062
000280  210d              MOVS     r1,#0xd               ;1075
000282  5421              STRB     r1,[r4,r0]            ;1075
000284  1c40              ADDS     r0,r0,#1              ;1075
000286  b280              UXTH     r0,r0                 ;1075
000288  e024              B        |L9.724|
                  |L9.650|
00028a  5d60              LDRB     r0,[r4,r5]            ;1085
00028c  2201              MOVS     r2,#1                 ;1084
00028e  283f              CMP      r0,#0x3f              ;1085
000290  d01c              BEQ      |L9.716|
000292  2000              MOVS     r0,#0                 ;1095
000294  4601              MOV      r1,r0                 ;1095
                  |L9.662|
000296  5d63              LDRB     r3,[r4,r5]            ;1097
000298  eb010181          ADD      r1,r1,r1,LSL #2       ;1097
00029c  1c6d              ADDS     r5,r5,#1              ;1097
00029e  1c40              ADDS     r0,r0,#1              ;1097
0002a0  eb060141          ADD      r1,r6,r1,LSL #1       ;1097
0002a4  b2c0              UXTB     r0,r0                 ;1095
0002a6  4419              ADD      r1,r1,r3              ;1097
0002a8  b2ad              UXTH     r5,r5                 ;1097
0002aa  4290              CMP      r0,r2                 ;1095
0002ac  d3f3              BCC      |L9.662|
0002ae  465e              MOV      r6,r11                ;1103
0002b0  f88b1005          STRB     r1,[r11,#5]           ;1103
0002b4  2100              MOVS     r1,#0                 ;1105
0002b6  2002              MOVS     r0,#2                 ;1105
0002b8  f7fffffe          BL       OnOff_GPOI_ResetSet
0002bc  2000              MOVS     r0,#0                 ;1106
0002be  71b0              STRB     r0,[r6,#6]            ;1106
0002c0  2003              MOVS     r0,#3                 ;1107
0002c2  7230              STRB     r0,[r6,#8]            ;1107
0002c4  7970              LDRB     r0,[r6,#5]            ;1108  ; MODE
0002c6  f7fffffe          BL       MODE_PARASET
0002ca  e031              B        |L9.816|
                  |L9.716|
0002cc  1960              ADDS     r0,r4,r5              ;1087
0002ce  f89b2005          LDRB     r2,[r11,#5]           ;1087  ; MODE
0002d2  e022              B        |L9.794|
                  |L9.724|
0002d4  f8049000          STRB     r9,[r4,r0]            ;1076
0002d8  1c40              ADDS     r0,r0,#1              ;1076
0002da  b285              UXTH     r5,r0                 ;1076
0002dc  e37b              B        |L9.2518|
                  |L9.734|
0002de  5d60              LDRB     r0,[r4,r5]            ;1115
0002e0  2201              MOVS     r2,#1                 ;1114
0002e2  283f              CMP      r0,#0x3f              ;1115
0002e4  d07e              BEQ      |L9.996|
0002e6  2100              MOVS     r1,#0                 ;1125
0002e8  4608              MOV      r0,r1                 ;1125
                  |L9.746|
0002ea  5d63              LDRB     r3,[r4,r5]            ;1127
0002ec  eb000080          ADD      r0,r0,r0,LSL #2       ;1127
0002f0  1c6d              ADDS     r5,r5,#1              ;1127
0002f2  1c49              ADDS     r1,r1,#1              ;1127
0002f4  eb060040          ADD      r0,r6,r0,LSL #1       ;1127
0002f8  b2c9              UXTB     r1,r1                 ;1125
0002fa  4418              ADD      r0,r0,r3              ;1127
0002fc  b2ad              UXTH     r5,r5                 ;1127
0002fe  4291              CMP      r1,r2                 ;1125
000300  d3f3              BCC      |L9.746|
000302  2801              CMP      r0,#1                 ;1129
000304  d90e              BLS      |L9.804|
                  |L9.774|
000306  2201              MOVS     r2,#1                 ;1131
                  |L9.776|
;;;1804   						{
;;;1805   							return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1806   						}
;;;1807   	//					MODE=temp1;
;;;1808   						
;;;1809   						bootflag = 1;
;;;1810   						Write_Boot_Flag();
;;;1811   						if(temp1 == 1)
;;;1812   						{
;;;1813   							JumpBoot(55);
;;;1814   						}
;;;1815   					}
;;;1816   				}break;
;;;1817   //				case 15:
;;;1818   //				{
;;;1819   //					pntlen = 1;
;;;1820   //					if(buf[currCharNum]=='?')
;;;1821   //					{
;;;1822   //						sprintf(&buf[currCharNum],"%1d",Gmode_Vale);
;;;1823   //						currCharNum+=pntlen;
;;;1824   //						buf[currCharNum] = ChrEndR;
;;;1825   //						currCharNum++;
;;;1826   //	//				    buf[currCharNum ++] = ChrEndS;
;;;1827   //						
;;;1828   //					}
;;;1829   //					else
;;;1830   //					{
;;;1831   //						tmpFg = 1;
;;;1832   //						for(i=0;i<pntlen;i++)
;;;1833   //						{
;;;1834   //						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1835   //						   {
;;;1836   //							  tmpFg = (tmpFg&0x01);
;;;1837   //						   }
;;;1838   //						   else
;;;1839   //						   {
;;;1840   //							  tmpFg = 0;
;;;1841   //						   }
;;;1842   //						}
;;;1843   //						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1844   //						{
;;;1845   //							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1846   //							
;;;1847   //						}					
;;;1848   //						for(i=0,temp1=0;i<pntlen;i++)
;;;1849   //						{
;;;1850   //							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1851   //						}		                   
;;;1852   //						if(temp1 >Mode_H)
;;;1853   //						 {
;;;1854   //							 return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1855   //							 
;;;1856   //						 }
;;;1857   //						 if(H_L == 1)
;;;1858   //						 {
;;;1859   //							CalHandle(3,1,temp1);
;;;1860   //						 }else{
;;;1861   //							 CalHandle(3,0,temp1);
;;;1862   //						 }
;;;1863   //						 
;;;1864   ////								 Mode=temp1;
;;;1865   ////								Change_MODE_Val(Mode);
;;;1866   ////						 buf[currCharNum++] = ChrEndS;
;;;1867   //					}
;;;1868   //					break;
;;;1869   //				}break;
;;;1870   //				case 16:
;;;1871   //				{
;;;1872   //					pntlen = 3;
;;;1873   //					if(buf[currCharNum]=='?')
;;;1874   //					{
;;;1875   //						sprintf(&buf[currCharNum],"%1d",Gmode_Vale);
;;;1876   //						currCharNum+=pntlen;
;;;1877   //						buf[currCharNum] = ChrEndR;
;;;1878   //						currCharNum++;
;;;1879   //	//				    buf[currCharNum ++] = ChrEndS;
;;;1880   //						
;;;1881   //					}
;;;1882   //					else
;;;1883   //					{
;;;1884   //						tmpFg = 1;
;;;1885   //						for(i=0;i<pntlen;i++)
;;;1886   //						{
;;;1887   //						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1888   //						   {
;;;1889   //							  tmpFg = (tmpFg&0x01);
;;;1890   //						   }
;;;1891   //						   else
;;;1892   //						   {
;;;1893   //							  tmpFg = 0;
;;;1894   //						   }
;;;1895   //						}
;;;1896   //						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1897   //						{
;;;1898   //							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1899   //							
;;;1900   //						}					
;;;1901   //						for(i=0,temp1=0;i<pntlen;i++)
;;;1902   //						{
;;;1903   //							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1904   //						}		                   
;;;1905   //						 overflag = temp1;
;;;1906   //						 
;;;1907   ////								 Mode=temp1;
;;;1908   ////								Change_MODE_Val(Mode);
;;;1909   ////						 buf[currCharNum++] = ChrEndS;
;;;1910   //					}
;;;1911   //					break;
;;;1912   //				}break;
;;;1913   //				case 17:
;;;1914   //				{
;;;1915   //					pntlen = 2;
;;;1916   //					if(buf[currCharNum]=='?')
;;;1917   //					{
;;;1918   ////						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1919   //									sprintf(&buf[currCharNum],"%02d",(int)temperature);
;;;1920   //						currCharNum+=pntlen;
;;;1921   //						buf[currCharNum++ ] = ChrEndR;
;;;1922   //						buf[currCharNum++ ] = ChrEndS;
;;;1923   //					}
;;;1924   //				}break;
;;;1925   			default:    //ERR
;;;1926              		 return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1927   	 			  
;;;1928   		  }
;;;1929   		  break;
;;;1930   		}
;;;1931   		
;;;1932   	}
;;;1933   	if(j>=CmdNumb)
;;;1934   	{
;;;1935   		return SetErr_ACK(buf, addr ,CMD_ERR);			  
000308  4620              MOV      r0,r4
00030a  9932              LDR      r1,[sp,#0xc8]
00030c  f7fffffe          BL       SetErr_ACK
;;;1936   	}
;;;1937   	return currCharNum+1;
;;;1938   }
000310  b033              ADD      sp,sp,#0xcc
000312  ecbd8b02          VPOP     {d8}
000316  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.794|
00031a  a157              ADR      r1,|L9.1144|
00031c  f7fffffe          BL       __2sprintf
000320  1c6d              ADDS     r5,r5,#1              ;1087
000322  e3ed              B        |L9.2816|
                  |L9.804|
000324  f88b0006          STRB     r0,[r11,#6]           ;1136
000328  f89b0006          LDRB     r0,[r11,#6]           ;1141  ; mainswitch
00032c  f7fffffe          BL       MODE_ONOFF
                  |L9.816|
000330  200d              MOVS     r0,#0xd               ;1110
000332  5560              STRB     r0,[r4,r5]            ;1110
                  |L9.820|
000334  1c6d              ADDS     r5,r5,#1              ;1110
000336  b2ad              UXTH     r5,r5                 ;1110
000338  e34d              B        |L9.2518|
                  |L9.826|
00033a  2000              MOVS     r0,#0                 ;1159
00033c  4607              MOV      r7,r0                 ;1159
                  |L9.830|
00033e  5d61              LDRB     r1,[r4,r5]            ;1161
000340  eb070287          ADD      r2,r7,r7,LSL #2       ;1161
000344  eb060242          ADD      r2,r6,r2,LSL #1       ;1161
000348  1c6d              ADDS     r5,r5,#1              ;1161
00034a  1c40              ADDS     r0,r0,#1              ;1161
00034c  188f              ADDS     r7,r1,r2              ;1161
00034e  b2c0              UXTB     r0,r0                 ;1159
000350  b2ad              UXTH     r5,r5                 ;1161
000352  2805              CMP      r0,#5                 ;1159
000354  d3f3              BCC      |L9.830|
                  |L9.854|
000356  4651              MOV      r1,r10                ;1164
000358  f8ca7044          STR      r7,[r10,#0x44]        ;1164  ; Para
00035c  5d62              LDRB     r2,[r4,r5]            ;1167
00035e  1c6d              ADDS     r5,r5,#1              ;1167
000360  2300              MOVS     r3,#0                 ;1165
000362  b2a8              UXTH     r0,r5                 ;1167
000364  2a2c              CMP      r2,#0x2c              ;1167
000366  d10c              BNE      |L9.898|
000368  2200              MOVS     r2,#0                 ;1169
                  |L9.874|
00036a  5c25              LDRB     r5,[r4,r0]            ;1171
00036c  eb030383          ADD      r3,r3,r3,LSL #2       ;1171
000370  1c40              ADDS     r0,r0,#1              ;1171
000372  1c52              ADDS     r2,r2,#1              ;1171
000374  eb060343          ADD      r3,r6,r3,LSL #1       ;1171
000378  b2d2              UXTB     r2,r2                 ;1169
00037a  442b              ADD      r3,r3,r5              ;1171
00037c  b280              UXTH     r0,r0                 ;1171
00037e  2a05              CMP      r2,#5                 ;1169
000380  d3f3              BCC      |L9.874|
                  |L9.898|
000382  f8a13048          STRH     r3,[r1,#0x48]         ;1174
000386  5c22              LDRB     r2,[r4,r0]            ;1177
000388  1c40              ADDS     r0,r0,#1              ;1177
00038a  2300              MOVS     r3,#0                 ;1175
00038c  b280              UXTH     r0,r0                 ;1177
00038e  2a2c              CMP      r2,#0x2c              ;1177
000390  d10c              BNE      |L9.940|
000392  2200              MOVS     r2,#0                 ;1179
                  |L9.916|
000394  5c25              LDRB     r5,[r4,r0]            ;1181
000396  eb030383          ADD      r3,r3,r3,LSL #2       ;1181
00039a  1c40              ADDS     r0,r0,#1              ;1181
00039c  1c52              ADDS     r2,r2,#1              ;1181
00039e  eb060343          ADD      r3,r6,r3,LSL #1       ;1181
0003a2  b2d2              UXTB     r2,r2                 ;1179
0003a4  442b              ADD      r3,r3,r5              ;1181
0003a6  b280              UXTH     r0,r0                 ;1181
0003a8  2a05              CMP      r2,#5                 ;1179
0003aa  d3f3              BCC      |L9.916|
                  |L9.940|
0003ac  64cb              STR      r3,[r1,#0x4c]         ;1184  ; Para
0003ae  5c22              LDRB     r2,[r4,r0]            ;1187
0003b0  1c40              ADDS     r0,r0,#1              ;1187
0003b2  2300              MOVS     r3,#0                 ;1185
0003b4  b280              UXTH     r0,r0                 ;1187
0003b6  2a2c              CMP      r2,#0x2c              ;1187
0003b8  d10c              BNE      |L9.980|
0003ba  2200              MOVS     r2,#0                 ;1189
                  |L9.956|
0003bc  5c25              LDRB     r5,[r4,r0]            ;1191
0003be  eb030383          ADD      r3,r3,r3,LSL #2       ;1191
0003c2  1c40              ADDS     r0,r0,#1              ;1191
0003c4  1c52              ADDS     r2,r2,#1              ;1191
0003c6  eb060343          ADD      r3,r6,r3,LSL #1       ;1191
0003ca  b2d2              UXTB     r2,r2                 ;1189
0003cc  442b              ADD      r3,r3,r5              ;1191
0003ce  b280              UXTH     r0,r0                 ;1191
0003d0  2a03              CMP      r2,#3                 ;1189
0003d2  d3f3              BCC      |L9.956|
                  |L9.980|
0003d4  f8a13050          STRH     r3,[r1,#0x50]         ;1194
0003d8  5c22              LDRB     r2,[r4,r0]            ;1197
0003da  1c40              ADDS     r0,r0,#1              ;1197
0003dc  2300              MOVS     r3,#0                 ;1195
0003de  b280              UXTH     r0,r0                 ;1197
0003e0  2a2c              CMP      r2,#0x2c              ;1197
0003e2  e000              B        |L9.998|
                  |L9.996|
0003e4  e17f              B        |L9.1766|
                  |L9.998|
0003e6  d10c              BNE      |L9.1026|
0003e8  2200              MOVS     r2,#0                 ;1199
                  |L9.1002|
0003ea  5c25              LDRB     r5,[r4,r0]            ;1201
0003ec  eb030383          ADD      r3,r3,r3,LSL #2       ;1201
0003f0  1c40              ADDS     r0,r0,#1              ;1201
0003f2  1c52              ADDS     r2,r2,#1              ;1201
0003f4  eb060343          ADD      r3,r6,r3,LSL #1       ;1201
0003f8  b2d2              UXTB     r2,r2                 ;1199
0003fa  442b              ADD      r3,r3,r5              ;1201
0003fc  b280              UXTH     r0,r0                 ;1201
0003fe  2a05              CMP      r2,#5                 ;1199
000400  d3f3              BCC      |L9.1002|
                  |L9.1026|
000402  f8a13054          STRH     r3,[r1,#0x54]         ;1204
000406  5c22              LDRB     r2,[r4,r0]            ;1207
000408  1c40              ADDS     r0,r0,#1              ;1207
00040a  2300              MOVS     r3,#0                 ;1205
00040c  b280              UXTH     r0,r0                 ;1207
00040e  2a2c              CMP      r2,#0x2c              ;1207
000410  d10c              BNE      |L9.1068|
000412  2200              MOVS     r2,#0                 ;1209
                  |L9.1044|
000414  5c25              LDRB     r5,[r4,r0]            ;1211
000416  eb030383          ADD      r3,r3,r3,LSL #2       ;1211
00041a  1c40              ADDS     r0,r0,#1              ;1211
00041c  1c52              ADDS     r2,r2,#1              ;1211
00041e  eb060343          ADD      r3,r6,r3,LSL #1       ;1211
000422  b2d2              UXTB     r2,r2                 ;1209
000424  442b              ADD      r3,r3,r5              ;1211
000426  b280              UXTH     r0,r0                 ;1211
000428  2a05              CMP      r2,#5                 ;1209
00042a  d3f3              BCC      |L9.1044|
                  |L9.1068|
00042c  f8a13056          STRH     r3,[r1,#0x56]         ;1214
000430  2300              MOVS     r3,#0                 ;1215
000432  5c22              LDRB     r2,[r4,r0]            ;1217
000434  1c40              ADDS     r0,r0,#1              ;1217
000436  e02b              B        |L9.1168|
                  |L9.1080|
000438  256400            DCB      "%d",0
00043b  00                DCB      0
                  |L9.1084|
00043c  2f00              DCB      "/",0
00043e  00                DCB      0
00043f  00                DCB      0
                  |L9.1088|
                          DCD      ||.data||+0x34
                  |L9.1092|
                          DCD      C_DISCHARGE
                  |L9.1096|
                          DCD      Para
                  |L9.1100|
00044c  25303564          DCB      "%05d",0
000450  00      
000451  00                DCB      0
000452  00                DCB      0
000453  00                DCB      0
                  |L9.1108|
000454  25303664          DCB      "%06d",0
000458  00      
000459  00                DCB      0
00045a  00                DCB      0
00045b  00                DCB      0
                  |L9.1116|
00045c  25303464          DCB      "%04d",0
000460  00      
000461  00                DCB      0
000462  00                DCB      0
000463  00                DCB      0
                  |L9.1124|
                          DCD      max_discahrgeNum
                  |L9.1128|
000468  447a0000          DCFS     0x447a0000 ; 1000
                  |L9.1132|
                          DCD      shorttime
                  |L9.1136|
000470  25303364          DCB      "%03d",0
000474  00      
000475  00                DCB      0
000476  00                DCB      0
000477  00                DCB      0
                  |L9.1144|
000478  25316400          DCB      "%1d",0
                  |L9.1148|
                          DCD      finishflag
                  |L9.1152|
                          DCD      lockflag
                  |L9.1156|
                          DCD      version
                  |L9.1160|
000488  25326400          DCB      "%2d",0
                  |L9.1164|
                          DCD      Temperature
                  |L9.1168|
000490  b280              UXTH     r0,r0                 ;1217
000492  2a2c              CMP      r2,#0x2c              ;1217
000494  d10c              BNE      |L9.1200|
000496  2200              MOVS     r2,#0                 ;1219
                  |L9.1176|
000498  5c25              LDRB     r5,[r4,r0]            ;1221
00049a  eb030383          ADD      r3,r3,r3,LSL #2       ;1221
00049e  1c40              ADDS     r0,r0,#1              ;1221
0004a0  1c52              ADDS     r2,r2,#1              ;1221
0004a2  eb060343          ADD      r3,r6,r3,LSL #1       ;1221
0004a6  b2d2              UXTB     r2,r2                 ;1219
0004a8  442b              ADD      r3,r3,r5              ;1221
0004aa  b280              UXTH     r0,r0                 ;1221
0004ac  2a05              CMP      r2,#5                 ;1219
0004ae  d3f3              BCC      |L9.1176|
                  |L9.1200|
0004b0  f8a13058          STRH     r3,[r1,#0x58]         ;1224
0004b4  5c22              LDRB     r2,[r4,r0]            ;1227
0004b6  1c40              ADDS     r0,r0,#1              ;1227
0004b8  2300              MOVS     r3,#0                 ;1225
0004ba  b280              UXTH     r0,r0                 ;1227
0004bc  2a2c              CMP      r2,#0x2c              ;1227
0004be  d10c              BNE      |L9.1242|
0004c0  2200              MOVS     r2,#0                 ;1229
                  |L9.1218|
0004c2  5c25              LDRB     r5,[r4,r0]            ;1231
0004c4  eb030383          ADD      r3,r3,r3,LSL #2       ;1231
0004c8  1c40              ADDS     r0,r0,#1              ;1231
0004ca  1c52              ADDS     r2,r2,#1              ;1231
0004cc  eb060343          ADD      r3,r6,r3,LSL #1       ;1231
0004d0  b2d2              UXTB     r2,r2                 ;1229
0004d2  442b              ADD      r3,r3,r5              ;1231
0004d4  b280              UXTH     r0,r0                 ;1231
0004d6  2a05              CMP      r2,#5                 ;1229
0004d8  d3f3              BCC      |L9.1218|
                  |L9.1242|
0004da  f8a13060          STRH     r3,[r1,#0x60]         ;1234
0004de  5c22              LDRB     r2,[r4,r0]            ;1237
0004e0  1c40              ADDS     r0,r0,#1              ;1237
0004e2  2300              MOVS     r3,#0                 ;1235
0004e4  b280              UXTH     r0,r0                 ;1237
0004e6  2a2c              CMP      r2,#0x2c              ;1237
0004e8  d10c              BNE      |L9.1284|
0004ea  2200              MOVS     r2,#0                 ;1239
                  |L9.1260|
0004ec  5c25              LDRB     r5,[r4,r0]            ;1241
0004ee  eb030383          ADD      r3,r3,r3,LSL #2       ;1241
0004f2  1c40              ADDS     r0,r0,#1              ;1241
0004f4  1c52              ADDS     r2,r2,#1              ;1241
0004f6  eb060343          ADD      r3,r6,r3,LSL #1       ;1241
0004fa  b2d2              UXTB     r2,r2                 ;1239
0004fc  442b              ADD      r3,r3,r5              ;1241
0004fe  b280              UXTH     r0,r0                 ;1241
000500  2a05              CMP      r2,#5                 ;1239
000502  d3f3              BCC      |L9.1260|
                  |L9.1284|
000504  65cb              STR      r3,[r1,#0x5c]         ;1244  ; Para
000506  5c22              LDRB     r2,[r4,r0]            ;1247
000508  1c40              ADDS     r0,r0,#1              ;1247
00050a  2300              MOVS     r3,#0                 ;1245
00050c  b280              UXTH     r0,r0                 ;1247
00050e  2a2c              CMP      r2,#0x2c              ;1247
000510  d10c              BNE      |L9.1324|
000512  2200              MOVS     r2,#0                 ;1249
                  |L9.1300|
000514  5c25              LDRB     r5,[r4,r0]            ;1251
000516  eb030383          ADD      r3,r3,r3,LSL #2       ;1251
00051a  1c40              ADDS     r0,r0,#1              ;1251
00051c  1c52              ADDS     r2,r2,#1              ;1251
00051e  eb060343          ADD      r3,r6,r3,LSL #1       ;1251
000522  b2d2              UXTB     r2,r2                 ;1249
000524  442b              ADD      r3,r3,r5              ;1251
000526  b280              UXTH     r0,r0                 ;1251
000528  2a05              CMP      r2,#5                 ;1249
00052a  d3f3              BCC      |L9.1300|
                  |L9.1324|
00052c  f8a13062          STRH     r3,[r1,#0x62]         ;1254
000530  5c22              LDRB     r2,[r4,r0]            ;1257
000532  1c40              ADDS     r0,r0,#1              ;1257
000534  2300              MOVS     r3,#0                 ;1255
000536  b280              UXTH     r0,r0                 ;1257
000538  2a2c              CMP      r2,#0x2c              ;1257
00053a  d10c              BNE      |L9.1366|
00053c  2200              MOVS     r2,#0                 ;1259
                  |L9.1342|
00053e  5c25              LDRB     r5,[r4,r0]            ;1261
000540  eb030383          ADD      r3,r3,r3,LSL #2       ;1261
000544  1c40              ADDS     r0,r0,#1              ;1261
000546  1c52              ADDS     r2,r2,#1              ;1261
000548  eb060343          ADD      r3,r6,r3,LSL #1       ;1261
00054c  b2d2              UXTB     r2,r2                 ;1259
00054e  442b              ADD      r3,r3,r5              ;1261
000550  b280              UXTH     r0,r0                 ;1261
000552  2a05              CMP      r2,#5                 ;1259
000554  d3f3              BCC      |L9.1342|
                  |L9.1366|
000556  f8a13064          STRH     r3,[r1,#0x64]         ;1264
00055a  5c22              LDRB     r2,[r4,r0]            ;1267
00055c  1c40              ADDS     r0,r0,#1              ;1267
00055e  2300              MOVS     r3,#0                 ;1265
000560  b280              UXTH     r0,r0                 ;1267
000562  2a2c              CMP      r2,#0x2c              ;1267
000564  d10c              BNE      |L9.1408|
000566  2200              MOVS     r2,#0                 ;1269
                  |L9.1384|
000568  5c25              LDRB     r5,[r4,r0]            ;1271
00056a  eb030383          ADD      r3,r3,r3,LSL #2       ;1271
00056e  1c40              ADDS     r0,r0,#1              ;1271
000570  1c52              ADDS     r2,r2,#1              ;1271
000572  eb060343          ADD      r3,r6,r3,LSL #1       ;1271
000576  b2d2              UXTB     r2,r2                 ;1269
000578  442b              ADD      r3,r3,r5              ;1271
00057a  b280              UXTH     r0,r0                 ;1271
00057c  2a05              CMP      r2,#5                 ;1269
00057e  d3f3              BCC      |L9.1384|
                  |L9.1408|
000580  f8a13066          STRH     r3,[r1,#0x66]         ;1274
000584  5c22              LDRB     r2,[r4,r0]            ;1277
000586  1c40              ADDS     r0,r0,#1              ;1277
000588  2300              MOVS     r3,#0                 ;1275
00058a  b280              UXTH     r0,r0                 ;1277
00058c  2a2c              CMP      r2,#0x2c              ;1277
00058e  d10c              BNE      |L9.1450|
000590  2200              MOVS     r2,#0                 ;1279
                  |L9.1426|
000592  5c25              LDRB     r5,[r4,r0]            ;1281
000594  eb030383          ADD      r3,r3,r3,LSL #2       ;1281
000598  1c40              ADDS     r0,r0,#1              ;1281
00059a  1c52              ADDS     r2,r2,#1              ;1281
00059c  eb060343          ADD      r3,r6,r3,LSL #1       ;1281
0005a0  b2d2              UXTB     r2,r2                 ;1279
0005a2  442b              ADD      r3,r3,r5              ;1281
0005a4  b280              UXTH     r0,r0                 ;1281
0005a6  2a05              CMP      r2,#5                 ;1279
0005a8  d3f3              BCC      |L9.1426|
                  |L9.1450|
0005aa  668b              STR      r3,[r1,#0x68]         ;1284  ; Para
0005ac  5c22              LDRB     r2,[r4,r0]            ;1287
0005ae  1c40              ADDS     r0,r0,#1              ;1287
0005b0  2300              MOVS     r3,#0                 ;1285
0005b2  b280              UXTH     r0,r0                 ;1287
0005b4  2a2c              CMP      r2,#0x2c              ;1287
0005b6  d10c              BNE      |L9.1490|
0005b8  2200              MOVS     r2,#0                 ;1289
                  |L9.1466|
0005ba  5c25              LDRB     r5,[r4,r0]            ;1291
0005bc  eb030383          ADD      r3,r3,r3,LSL #2       ;1291
0005c0  1c40              ADDS     r0,r0,#1              ;1291
0005c2  1c52              ADDS     r2,r2,#1              ;1291
0005c4  eb060343          ADD      r3,r6,r3,LSL #1       ;1291
0005c8  b2d2              UXTB     r2,r2                 ;1289
0005ca  442b              ADD      r3,r3,r5              ;1291
0005cc  b280              UXTH     r0,r0                 ;1291
0005ce  2a05              CMP      r2,#5                 ;1289
0005d0  d3f3              BCC      |L9.1466|
                  |L9.1490|
0005d2  f8a1306c          STRH     r3,[r1,#0x6c]         ;1294
0005d6  5c22              LDRB     r2,[r4,r0]            ;1297
0005d8  1c40              ADDS     r0,r0,#1              ;1297
0005da  2300              MOVS     r3,#0                 ;1295
0005dc  b280              UXTH     r0,r0                 ;1297
0005de  2a2c              CMP      r2,#0x2c              ;1297
0005e0  d10c              BNE      |L9.1532|
0005e2  2200              MOVS     r2,#0                 ;1299
                  |L9.1508|
0005e4  5c25              LDRB     r5,[r4,r0]            ;1301
0005e6  eb030383          ADD      r3,r3,r3,LSL #2       ;1301
0005ea  1c40              ADDS     r0,r0,#1              ;1301
0005ec  1c52              ADDS     r2,r2,#1              ;1301
0005ee  eb060343          ADD      r3,r6,r3,LSL #1       ;1301
0005f2  b2d2              UXTB     r2,r2                 ;1299
0005f4  442b              ADD      r3,r3,r5              ;1301
0005f6  b280              UXTH     r0,r0                 ;1301
0005f8  2a05              CMP      r2,#5                 ;1299
0005fa  d3f3              BCC      |L9.1508|
                  |L9.1532|
0005fc  670b              STR      r3,[r1,#0x70]         ;1304  ; Para
0005fe  5c22              LDRB     r2,[r4,r0]            ;1307
000600  1c40              ADDS     r0,r0,#1              ;1307
000602  2300              MOVS     r3,#0                 ;1305
000604  b280              UXTH     r0,r0                 ;1307
000606  2a2c              CMP      r2,#0x2c              ;1307
000608  d10c              BNE      |L9.1572|
00060a  2200              MOVS     r2,#0                 ;1309
                  |L9.1548|
00060c  5c25              LDRB     r5,[r4,r0]            ;1311
00060e  eb030383          ADD      r3,r3,r3,LSL #2       ;1311
000612  1c40              ADDS     r0,r0,#1              ;1311
000614  1c52              ADDS     r2,r2,#1              ;1311
000616  eb060343          ADD      r3,r6,r3,LSL #1       ;1311
00061a  b2d2              UXTB     r2,r2                 ;1309
00061c  442b              ADD      r3,r3,r5              ;1311
00061e  b280              UXTH     r0,r0                 ;1311
000620  2a05              CMP      r2,#5                 ;1309
000622  d3f3              BCC      |L9.1548|
                  |L9.1572|
000624  674b              STR      r3,[r1,#0x74]         ;1314  ; Para
000626  5c22              LDRB     r2,[r4,r0]            ;1317
000628  1c40              ADDS     r0,r0,#1              ;1317
00062a  2300              MOVS     r3,#0                 ;1315
00062c  b280              UXTH     r0,r0                 ;1317
00062e  2a2c              CMP      r2,#0x2c              ;1317
000630  d10c              BNE      |L9.1612|
000632  2200              MOVS     r2,#0                 ;1319
                  |L9.1588|
000634  5c25              LDRB     r5,[r4,r0]            ;1321
000636  eb030383          ADD      r3,r3,r3,LSL #2       ;1321
00063a  1c40              ADDS     r0,r0,#1              ;1321
00063c  1c52              ADDS     r2,r2,#1              ;1321
00063e  eb060343          ADD      r3,r6,r3,LSL #1       ;1321
000642  b2d2              UXTB     r2,r2                 ;1319
000644  442b              ADD      r3,r3,r5              ;1321
000646  b280              UXTH     r0,r0                 ;1321
000648  2a03              CMP      r2,#3                 ;1319
00064a  d3f3              BCC      |L9.1588|
                  |L9.1612|
00064c  f8813078          STRB     r3,[r1,#0x78]         ;1324
000650  5c22              LDRB     r2,[r4,r0]            ;1327
000652  1c40              ADDS     r0,r0,#1              ;1327
000654  2300              MOVS     r3,#0                 ;1325
000656  b280              UXTH     r0,r0                 ;1327
000658  2a2c              CMP      r2,#0x2c              ;1327
00065a  d10c              BNE      |L9.1654|
00065c  2200              MOVS     r2,#0                 ;1329
                  |L9.1630|
00065e  5c25              LDRB     r5,[r4,r0]            ;1331
000660  eb030383          ADD      r3,r3,r3,LSL #2       ;1331
000664  1c40              ADDS     r0,r0,#1              ;1331
000666  1c52              ADDS     r2,r2,#1              ;1331
000668  eb060343          ADD      r3,r6,r3,LSL #1       ;1331
00066c  b2d2              UXTB     r2,r2                 ;1329
00066e  442b              ADD      r3,r3,r5              ;1331
000670  b280              UXTH     r0,r0                 ;1331
000672  2a03              CMP      r2,#3                 ;1329
000674  d3f3              BCC      |L9.1630|
                  |L9.1654|
000676  f89b2005          LDRB     r2,[r11,#5]           ;1334  ; MODE
00067a  465f              MOV      r7,r11                ;1334
00067c  b902              CBNZ     r2,|L9.1664|
00067e  618b              STR      r3,[r1,#0x18]         ;1336  ; Para
                  |L9.1664|
000680  5c22              LDRB     r2,[r4,r0]            ;1341
000682  1c40              ADDS     r0,r0,#1              ;1341
000684  2300              MOVS     r3,#0                 ;1338
000686  b280              UXTH     r0,r0                 ;1341
000688  2a2c              CMP      r2,#0x2c              ;1341
00068a  d10c              BNE      |L9.1702|
00068c  2200              MOVS     r2,#0                 ;1343
                  |L9.1678|
00068e  5c25              LDRB     r5,[r4,r0]            ;1345
000690  eb030383          ADD      r3,r3,r3,LSL #2       ;1345
000694  1c40              ADDS     r0,r0,#1              ;1345
000696  1c52              ADDS     r2,r2,#1              ;1345
000698  eb060343          ADD      r3,r6,r3,LSL #1       ;1345
00069c  b2d2              UXTB     r2,r2                 ;1343
00069e  442b              ADD      r3,r3,r5              ;1345
0006a0  b280              UXTH     r0,r0                 ;1345
0006a2  2a03              CMP      r2,#3                 ;1343
0006a4  d3f3              BCC      |L9.1678|
                  |L9.1702|
0006a6  71fb              STRB     r3,[r7,#7]            ;1348
0006a8  5c23              LDRB     r3,[r4,r0]            ;1351
0006aa  1c40              ADDS     r0,r0,#1              ;1351
0006ac  2200              MOVS     r2,#0                 ;1349
0006ae  b285              UXTH     r5,r0                 ;1351
0006b0  2b2c              CMP      r3,#0x2c              ;1351
0006b2  d10c              BNE      |L9.1742|
0006b4  2000              MOVS     r0,#0                 ;1353
                  |L9.1718|
0006b6  5d63              LDRB     r3,[r4,r5]            ;1355
0006b8  eb020282          ADD      r2,r2,r2,LSL #2       ;1355
0006bc  1c6d              ADDS     r5,r5,#1              ;1355
0006be  1c40              ADDS     r0,r0,#1              ;1355
0006c0  eb060242          ADD      r2,r6,r2,LSL #1       ;1355
0006c4  b2c0              UXTB     r0,r0                 ;1353
0006c6  441a              ADD      r2,r2,r3              ;1355
0006c8  b2ad              UXTH     r5,r5                 ;1355
0006ca  2803              CMP      r0,#3                 ;1353
0006cc  d3f3              BCC      |L9.1718|
                  |L9.1742|
0006ce  f8812052          STRB     r2,[r1,#0x52]         ;1358
0006d2  7978              LDRB     r0,[r7,#5]            ;1361  ; MODE
0006d4  f7fffffe          BL       MODE_PARASET
0006d8  e207              B        |L9.2794|
                  |L9.1754|
0006da  5d60              LDRB     r0,[r4,r5]            ;1368
0006dc  283f              CMP      r0,#0x3f              ;1368
0006de  d002              BEQ      |L9.1766|
0006e0  2d0b              CMP      r5,#0xb               ;1377
0006e2  d003              BEQ      |L9.1772|
0006e4  e010              B        |L9.1800|
                  |L9.1766|
0006e6  1960              ADDS     r0,r4,r5              ;1370
0006e8  780a              LDRB     r2,[r1,#0]            ;1370  ; C_DISCHARGE
0006ea  e616              B        |L9.794|
                  |L9.1772|
0006ec  2000              MOVS     r0,#0                 ;1379
0006ee  4607              MOV      r7,r0                 ;1379
                  |L9.1776|
0006f0  5d61              LDRB     r1,[r4,r5]            ;1381
0006f2  eb070287          ADD      r2,r7,r7,LSL #2       ;1381
0006f6  eb060242          ADD      r2,r6,r2,LSL #1       ;1381
0006fa  1c6d              ADDS     r5,r5,#1              ;1381
0006fc  1c40              ADDS     r0,r0,#1              ;1381
0006fe  188f              ADDS     r7,r1,r2              ;1381
000700  b2c0              UXTB     r0,r0                 ;1379
000702  b2ad              UXTH     r5,r5                 ;1381
000704  2802              CMP      r0,#2                 ;1379
000706  d3f3              BCC      |L9.1776|
                  |L9.1800|
000708  48f9              LDR      r0,|L9.2800|
00070a  7147              STRB     r7,[r0,#5]            ;1384
00070c  7940              LDRB     r0,[r0,#5]            ;1387  ; MODE
00070e  2700              MOVS     r7,#0                 ;1385
000710  f8dfb3e0          LDR      r11,|L9.2804|
000714  f6446120          MOV      r1,#0x4e20            ;1410
000718  b1a8              CBZ      r0,|L9.1862|
00071a  4af5              LDR      r2,|L9.2800|
00071c  7950              LDRB     r0,[r2,#5]            ;1431  ; MODE
00071e  2801              CMP      r0,#1                 ;1431
000720  d05a              BEQ      |L9.2008|
000722  4610              MOV      r0,r2                 ;1460
000724  7940              LDRB     r0,[r0,#5]            ;1460  ; MODE
000726  2802              CMP      r0,#2                 ;1460
000728  d07e              BEQ      |L9.2088|
00072a  7950              LDRB     r0,[r2,#5]            ;1492  ; MODE
00072c  2803              CMP      r0,#3                 ;1492
00072e  d07c              BEQ      |L9.2090|
000730  4610              MOV      r0,r2                 ;1524
000732  7940              LDRB     r0,[r0,#5]            ;1524  ; MODE
000734  2804              CMP      r0,#4                 ;1524
000736  d079              BEQ      |L9.2092|
000738  7950              LDRB     r0,[r2,#5]            ;1567  ; MODE
00073a  2805              CMP      r0,#5                 ;1567
00073c  d077              BEQ      |L9.2094|
00073e  7950              LDRB     r0,[r2,#5]            ;1598  ; MODE
000740  2806              CMP      r0,#6                 ;1598
000742  d075              BEQ      |L9.2096|
000744  e1cb              B        |L9.2782|
                  |L9.1862|
000746  5d62              LDRB     r2,[r4,r5]            ;1389
000748  1c6d              ADDS     r5,r5,#1              ;1389
00074a  b2a8              UXTH     r0,r5                 ;1389
00074c  2a2c              CMP      r2,#0x2c              ;1389
00074e  d106              BNE      |L9.1886|
000750  2200              MOVS     r2,#0                 ;1391
                  |L9.1874|
000752  1c40              ADDS     r0,r0,#1              ;1391
000754  1c52              ADDS     r2,r2,#1              ;1393
000756  b2d2              UXTB     r2,r2                 ;1391
000758  b280              UXTH     r0,r0                 ;1393
00075a  2a05              CMP      r2,#5                 ;1391
00075c  d3f9              BCC      |L9.1874|
                  |L9.1886|
00075e  5c23              LDRB     r3,[r4,r0]            ;1399
000760  1c40              ADDS     r0,r0,#1              ;1399
000762  2200              MOVS     r2,#0                 ;1397
000764  b285              UXTH     r5,r0                 ;1399
000766  2b2c              CMP      r3,#0x2c              ;1399
000768  d10c              BNE      |L9.1924|
00076a  2000              MOVS     r0,#0                 ;1401
                  |L9.1900|
00076c  5d63              LDRB     r3,[r4,r5]            ;1403
00076e  eb020282          ADD      r2,r2,r2,LSL #2       ;1403
000772  1c6d              ADDS     r5,r5,#1              ;1403
000774  1c40              ADDS     r0,r0,#1              ;1403
000776  eb060242          ADD      r2,r6,r2,LSL #1       ;1403
00077a  b2c0              UXTB     r0,r0                 ;1401
00077c  441a              ADD      r2,r2,r3              ;1403
00077e  b2ad              UXTH     r5,r5                 ;1403
000780  2805              CMP      r0,#5                 ;1401
000782  d3f3              BCC      |L9.1900|
                  |L9.1924|
000784  f8ca2014          STR      r2,[r10,#0x14]        ;1406  ; Para
000788  f8da0014          LDR      r0,[r10,#0x14]        ;1410  ; Para
00078c  2700              MOVS     r7,#0                 ;1407
00078e  4288              CMP      r0,r1                 ;1410
000790  d907              BLS      |L9.1954|
000792  2001              MOVS     r0,#1                 ;1412
000794  f8cb0020          STR      r0,[r11,#0x20]        ;1412  ; Run_Control
000798  02c1              LSLS     r1,r0,#11             ;1413
00079a  48d7              LDR      r0,|L9.2808|
00079c  f7fffffe          BL       GPIO_ResetBits
0007a0  e007              B        |L9.1970|
                  |L9.1954|
0007a2  2000              MOVS     r0,#0                 ;1415
0007a4  f8cb0020          STR      r0,[r11,#0x20]        ;1415  ; Run_Control
0007a8  f44f6100          MOV      r1,#0x800             ;1416
0007ac  48d2              LDR      r0,|L9.2808|
0007ae  f7fffffe          BL       GPIO_SetBits
                  |L9.1970|
0007b2  5d60              LDRB     r0,[r4,r5]            ;1418
0007b4  1c6d              ADDS     r5,r5,#1              ;1418
0007b6  b2ad              UXTH     r5,r5                 ;1418
0007b8  282c              CMP      r0,#0x2c              ;1418
0007ba  d10c              BNE      |L9.2006|
0007bc  2000              MOVS     r0,#0                 ;1420
                  |L9.1982|
0007be  5d61              LDRB     r1,[r4,r5]            ;1422
0007c0  eb070287          ADD      r2,r7,r7,LSL #2       ;1422
0007c4  eb060242          ADD      r2,r6,r2,LSL #1       ;1422
0007c8  1c6d              ADDS     r5,r5,#1              ;1422
0007ca  188f              ADDS     r7,r1,r2              ;1422
0007cc  1c40              ADDS     r0,r0,#1              ;1422
0007ce  b2ad              UXTH     r5,r5                 ;1422
0007d0  f01000ff          ANDS     r0,r0,#0xff           ;1420
0007d4  d0f3              BEQ      |L9.1982|
                  |L9.2006|
0007d6  e119              B        |L9.2572|
                  |L9.2008|
0007d8  5d61              LDRB     r1,[r4,r5]            ;1432
0007da  1c6d              ADDS     r5,r5,#1              ;1432
0007dc  b2a8              UXTH     r0,r5                 ;1432
0007de  292c              CMP      r1,#0x2c              ;1432
0007e0  d10c              BNE      |L9.2044|
0007e2  2100              MOVS     r1,#0                 ;1434
                  |L9.2020|
0007e4  5c23              LDRB     r3,[r4,r0]            ;1436
0007e6  eb070587          ADD      r5,r7,r7,LSL #2       ;1436
0007ea  eb060545          ADD      r5,r6,r5,LSL #1       ;1436
0007ee  1c40              ADDS     r0,r0,#1              ;1436
0007f0  1c49              ADDS     r1,r1,#1              ;1436
0007f2  195f              ADDS     r7,r3,r5              ;1436
0007f4  b2c9              UXTB     r1,r1                 ;1434
0007f6  b280              UXTH     r0,r0                 ;1436
0007f8  2905              CMP      r1,#5                 ;1434
0007fa  d3f3              BCC      |L9.2020|
                  |L9.2044|
0007fc  4655              MOV      r5,r10                ;1439
0007fe  f8aa7064          STRH     r7,[r10,#0x64]        ;1439
000802  5c21              LDRB     r1,[r4,r0]            ;1442
000804  1c40              ADDS     r0,r0,#1              ;1442
000806  2300              MOVS     r3,#0                 ;1440
000808  b280              UXTH     r0,r0                 ;1442
00080a  292c              CMP      r1,#0x2c              ;1442
00080c  d112              BNE      |L9.2100|
00080e  2100              MOVS     r1,#0                 ;1444
                  |L9.2064|
000810  5c27              LDRB     r7,[r4,r0]            ;1446
000812  eb030383          ADD      r3,r3,r3,LSL #2       ;1446
000816  1c40              ADDS     r0,r0,#1              ;1446
000818  1c49              ADDS     r1,r1,#1              ;1446
00081a  eb060343          ADD      r3,r6,r3,LSL #1       ;1446
00081e  b2c9              UXTB     r1,r1                 ;1444
000820  443b              ADD      r3,r3,r7              ;1446
000822  b280              UXTH     r0,r0                 ;1446
000824  2905              CMP      r1,#5                 ;1444
000826  e004              B        |L9.2098|
                  |L9.2088|
000828  e01a              B        |L9.2144|
                  |L9.2090|
00082a  e063              B        |L9.2292|
                  |L9.2092|
00082c  e0a2              B        |L9.2420|
                  |L9.2094|
00082e  e0f9              B        |L9.2596|
                  |L9.2096|
000830  e129              B        |L9.2694|
                  |L9.2098|
000832  d3ed              BCC      |L9.2064|
                  |L9.2100|
000834  f8a53066          STRH     r3,[r5,#0x66]         ;1449
000838  5c23              LDRB     r3,[r4,r0]            ;1452
00083a  1c40              ADDS     r0,r0,#1              ;1452
00083c  2100              MOVS     r1,#0                 ;1450
00083e  b285              UXTH     r5,r0                 ;1452
000840  2b2c              CMP      r3,#0x2c              ;1452
000842  d10c              BNE      |L9.2142|
000844  2000              MOVS     r0,#0                 ;1454
                  |L9.2118|
000846  5d63              LDRB     r3,[r4,r5]            ;1456
000848  1c6d              ADDS     r5,r5,#1              ;1456
00084a  eb010181          ADD      r1,r1,r1,LSL #2       ;1456
00084e  eb060141          ADD      r1,r6,r1,LSL #1       ;1456
000852  1c40              ADDS     r0,r0,#1              ;1456
000854  4419              ADD      r1,r1,r3              ;1456
000856  b2ad              UXTH     r5,r5                 ;1456
000858  f01000ff          ANDS     r0,r0,#0xff           ;1454
00085c  d0f3              BEQ      |L9.2118|
                  |L9.2142|
00085e  e13d              B        |L9.2780|
                  |L9.2144|
000860  2101              MOVS     r1,#1                 ;1461
000862  f8cb1020          STR      r1,[r11,#0x20]        ;1461  ; Run_Control
000866  02c9              LSLS     r1,r1,#11             ;1462
000868  48a3              LDR      r0,|L9.2808|
00086a  f7fffffe          BL       GPIO_ResetBits
00086e  5d61              LDRB     r1,[r4,r5]            ;1463
000870  1c6d              ADDS     r5,r5,#1              ;1463
000872  b2a8              UXTH     r0,r5                 ;1463
000874  292c              CMP      r1,#0x2c              ;1463
000876  d10c              BNE      |L9.2194|
000878  2100              MOVS     r1,#0                 ;1465
                  |L9.2170|
00087a  5c22              LDRB     r2,[r4,r0]            ;1467
00087c  eb070387          ADD      r3,r7,r7,LSL #2       ;1467
000880  eb060343          ADD      r3,r6,r3,LSL #1       ;1467
000884  1c40              ADDS     r0,r0,#1              ;1467
000886  1c49              ADDS     r1,r1,#1              ;1467
000888  18d7              ADDS     r7,r2,r3              ;1467
00088a  b2c9              UXTB     r1,r1                 ;1465
00088c  b280              UXTH     r0,r0                 ;1467
00088e  2905              CMP      r1,#5                 ;1465
000890  d3f3              BCC      |L9.2170|
                  |L9.2194|
000892  4653              MOV      r3,r10                ;1470
000894  f8ca7044          STR      r7,[r10,#0x44]        ;1470  ; Para
000898  5c21              LDRB     r1,[r4,r0]            ;1473
00089a  1c40              ADDS     r0,r0,#1              ;1473
00089c  2200              MOVS     r2,#0                 ;1471
00089e  b280              UXTH     r0,r0                 ;1473
0008a0  292c              CMP      r1,#0x2c              ;1473
0008a2  d10c              BNE      |L9.2238|
0008a4  2100              MOVS     r1,#0                 ;1475
                  |L9.2214|
0008a6  5c25              LDRB     r5,[r4,r0]            ;1477
0008a8  eb020282          ADD      r2,r2,r2,LSL #2       ;1477
0008ac  1c40              ADDS     r0,r0,#1              ;1477
0008ae  1c49              ADDS     r1,r1,#1              ;1477
0008b0  eb060242          ADD      r2,r6,r2,LSL #1       ;1477
0008b4  b2c9              UXTB     r1,r1                 ;1475
0008b6  442a              ADD      r2,r2,r5              ;1477
0008b8  b280              UXTH     r0,r0                 ;1477
0008ba  2905              CMP      r1,#5                 ;1475
0008bc  d3f3              BCC      |L9.2214|
                  |L9.2238|
0008be  f8a32048          STRH     r2,[r3,#0x48]         ;1480
0008c2  5c22              LDRB     r2,[r4,r0]            ;1483
0008c4  1c40              ADDS     r0,r0,#1              ;1483
0008c6  2100              MOVS     r1,#0                 ;1481
0008c8  b285              UXTH     r5,r0                 ;1483
0008ca  2a2c              CMP      r2,#0x2c              ;1483
0008cc  d10c              BNE      |L9.2280|
0008ce  2000              MOVS     r0,#0                 ;1485
                  |L9.2256|
0008d0  5d62              LDRB     r2,[r4,r5]            ;1487
0008d2  1c6d              ADDS     r5,r5,#1              ;1487
0008d4  eb010181          ADD      r1,r1,r1,LSL #2       ;1487
0008d8  eb060141          ADD      r1,r6,r1,LSL #1       ;1487
0008dc  1c40              ADDS     r0,r0,#1              ;1487
0008de  4411              ADD      r1,r1,r2              ;1487
0008e0  b2ad              UXTH     r5,r5                 ;1487
0008e2  f01000ff          ANDS     r0,r0,#0xff           ;1485
0008e6  d0f3              BEQ      |L9.2256|
                  |L9.2280|
0008e8  4881              LDR      r0,|L9.2800|
0008ea  7181              STRB     r1,[r0,#6]            ;1490
0008ec  4983              LDR      r1,|L9.2812|
0008ee  2000              MOVS     r0,#0                 ;1491
0008f0  7008              STRB     r0,[r1,#0]            ;1491
0008f2  e0f4              B        |L9.2782|
                  |L9.2292|
0008f4  5d61              LDRB     r1,[r4,r5]            ;1493
0008f6  1c6d              ADDS     r5,r5,#1              ;1493
0008f8  b2a8              UXTH     r0,r5                 ;1493
0008fa  292c              CMP      r1,#0x2c              ;1493
0008fc  d10c              BNE      |L9.2328|
0008fe  2100              MOVS     r1,#0                 ;1495
                  |L9.2304|
000900  5c23              LDRB     r3,[r4,r0]            ;1497
000902  eb070587          ADD      r5,r7,r7,LSL #2       ;1497
000906  eb060545          ADD      r5,r6,r5,LSL #1       ;1497
00090a  1c40              ADDS     r0,r0,#1              ;1497
00090c  1c49              ADDS     r1,r1,#1              ;1497
00090e  195f              ADDS     r7,r3,r5              ;1497
000910  b2c9              UXTB     r1,r1                 ;1495
000912  b280              UXTH     r0,r0                 ;1497
000914  2905              CMP      r1,#5                 ;1495
000916  d3f3              BCC      |L9.2304|
                  |L9.2328|
000918  4655              MOV      r5,r10                ;1500
00091a  f8aa7064          STRH     r7,[r10,#0x64]        ;1500
00091e  2300              MOVS     r3,#0                 ;1501
000920  5c21              LDRB     r1,[r4,r0]            ;1504
000922  e000              B        |L9.2342|
                  |L9.2340|
000924  e1de              B        |L9.3300|
                  |L9.2342|
000926  1c40              ADDS     r0,r0,#1              ;1504
000928  b280              UXTH     r0,r0                 ;1504
00092a  292c              CMP      r1,#0x2c              ;1504
00092c  d10c              BNE      |L9.2376|
00092e  2100              MOVS     r1,#0                 ;1506
                  |L9.2352|
000930  5c27              LDRB     r7,[r4,r0]            ;1508
000932  eb030383          ADD      r3,r3,r3,LSL #2       ;1508
000936  1c40              ADDS     r0,r0,#1              ;1508
000938  1c49              ADDS     r1,r1,#1              ;1508
00093a  eb060343          ADD      r3,r6,r3,LSL #1       ;1508
00093e  b2c9              UXTB     r1,r1                 ;1506
000940  443b              ADD      r3,r3,r7              ;1508
000942  b280              UXTH     r0,r0                 ;1508
000944  2905              CMP      r1,#5                 ;1506
000946  d3f3              BCC      |L9.2352|
                  |L9.2376|
000948  f8a53066          STRH     r3,[r5,#0x66]         ;1511
00094c  5c23              LDRB     r3,[r4,r0]            ;1514
00094e  1c40              ADDS     r0,r0,#1              ;1514
000950  2100              MOVS     r1,#0                 ;1512
000952  b285              UXTH     r5,r0                 ;1514
000954  2b2c              CMP      r3,#0x2c              ;1514
000956  d10c              BNE      |L9.2418|
000958  2000              MOVS     r0,#0                 ;1516
                  |L9.2394|
00095a  5d63              LDRB     r3,[r4,r5]            ;1518
00095c  1c6d              ADDS     r5,r5,#1              ;1518
00095e  eb010181          ADD      r1,r1,r1,LSL #2       ;1518
000962  eb060141          ADD      r1,r6,r1,LSL #1       ;1518
000966  1c40              ADDS     r0,r0,#1              ;1518
000968  4419              ADD      r1,r1,r3              ;1518
00096a  b2ad              UXTH     r5,r5                 ;1518
00096c  f01000ff          ANDS     r0,r0,#0xff           ;1516
000970  d0f3              BEQ      |L9.2394|
                  |L9.2418|
000972  e0b3              B        |L9.2780|
                  |L9.2420|
000974  5d62              LDRB     r2,[r4,r5]            ;1525
000976  1c6d              ADDS     r5,r5,#1              ;1525
000978  b2a8              UXTH     r0,r5                 ;1525
00097a  2a2c              CMP      r2,#0x2c              ;1525
00097c  d106              BNE      |L9.2444|
00097e  2200              MOVS     r2,#0                 ;1527
                  |L9.2432|
000980  1c40              ADDS     r0,r0,#1              ;1527
000982  1c52              ADDS     r2,r2,#1              ;1529
000984  b2d2              UXTB     r2,r2                 ;1527
000986  b280              UXTH     r0,r0                 ;1529
000988  2a05              CMP      r2,#5                 ;1527
00098a  d3f9              BCC      |L9.2432|
                  |L9.2444|
00098c  5c23              LDRB     r3,[r4,r0]            ;1535
00098e  1c40              ADDS     r0,r0,#1              ;1535
000990  2200              MOVS     r2,#0                 ;1533
000992  b285              UXTH     r5,r0                 ;1535
000994  2b2c              CMP      r3,#0x2c              ;1535
000996  d10c              BNE      |L9.2482|
000998  2000              MOVS     r0,#0                 ;1537
                  |L9.2458|
00099a  5d63              LDRB     r3,[r4,r5]            ;1539
00099c  eb020282          ADD      r2,r2,r2,LSL #2       ;1539
0009a0  1c6d              ADDS     r5,r5,#1              ;1539
0009a2  1c40              ADDS     r0,r0,#1              ;1539
0009a4  eb060242          ADD      r2,r6,r2,LSL #1       ;1539
0009a8  b2c0              UXTB     r0,r0                 ;1537
0009aa  441a              ADD      r2,r2,r3              ;1539
0009ac  b2ad              UXTH     r5,r5                 ;1539
0009ae  2805              CMP      r0,#5                 ;1537
0009b0  d3f3              BCC      |L9.2458|
                  |L9.2482|
0009b2  f8ca2014          STR      r2,[r10,#0x14]        ;1542  ; Para
0009b6  f8da0014          LDR      r0,[r10,#0x14]        ;1546  ; Para
0009ba  2700              MOVS     r7,#0                 ;1543
0009bc  4288              CMP      r0,r1                 ;1546
0009be  d90b              BLS      |L9.2520|
0009c0  2001              MOVS     r0,#1                 ;1548
0009c2  f8cb0020          STR      r0,[r11,#0x20]        ;1548  ; Run_Control
0009c6  02c1              LSLS     r1,r0,#11             ;1549
0009c8  484b              LDR      r0,|L9.2808|
0009ca  f7fffffe          BL       GPIO_ResetBits
0009ce  e00b              B        |L9.2536|
                  |L9.2512|
0009d0  e097              B        |L9.2818|
                  |L9.2514|
0009d2  e0ef              B        |L9.2996|
                  |L9.2516|
0009d4  e12f              B        |L9.3126|
                  |L9.2518|
0009d6  e12d              B        |L9.3124|
                  |L9.2520|
0009d8  2100              MOVS     r1,#0                 ;1551
0009da  f8cb1020          STR      r1,[r11,#0x20]        ;1551  ; Run_Control
0009de  f44f6100          MOV      r1,#0x800             ;1552
0009e2  4845              LDR      r0,|L9.2808|
0009e4  f7fffffe          BL       GPIO_SetBits
                  |L9.2536|
0009e8  5d60              LDRB     r0,[r4,r5]            ;1554
0009ea  1c6d              ADDS     r5,r5,#1              ;1554
0009ec  b2ad              UXTH     r5,r5                 ;1554
0009ee  282c              CMP      r0,#0x2c              ;1554
0009f0  d10c              BNE      |L9.2572|
0009f2  2000              MOVS     r0,#0                 ;1556
                  |L9.2548|
0009f4  5d61              LDRB     r1,[r4,r5]            ;1558
0009f6  eb070287          ADD      r2,r7,r7,LSL #2       ;1558
0009fa  eb060242          ADD      r2,r6,r2,LSL #1       ;1558
0009fe  1c6d              ADDS     r5,r5,#1              ;1558
000a00  188f              ADDS     r7,r1,r2              ;1558
000a02  1c40              ADDS     r0,r0,#1              ;1558
000a04  b2ad              UXTH     r5,r5                 ;1558
000a06  f01000ff          ANDS     r0,r0,#0xff           ;1556
000a0a  d0f3              BEQ      |L9.2548|
                  |L9.2572|
000a0c  4838              LDR      r0,|L9.2800|
000a0e  7187              STRB     r7,[r0,#6]            ;1561
000a10  7980              LDRB     r0,[r0,#6]            ;1562  ; mainswitch
000a12  bbb8              CBNZ     r0,|L9.2692|
000a14  2001              MOVS     r0,#1                 ;1564
000a16  f8cb0020          STR      r0,[r11,#0x20]        ;1564  ; Run_Control
000a1a  02c1              LSLS     r1,r0,#11             ;1565
000a1c  4836              LDR      r0,|L9.2808|
000a1e  f7fffffe          BL       GPIO_ResetBits
000a22  e05c              B        |L9.2782|
                  |L9.2596|
000a24  5d61              LDRB     r1,[r4,r5]            ;1568
000a26  1c6d              ADDS     r5,r5,#1              ;1568
000a28  b2a8              UXTH     r0,r5                 ;1568
000a2a  292c              CMP      r1,#0x2c              ;1568
000a2c  d106              BNE      |L9.2620|
000a2e  2100              MOVS     r1,#0                 ;1570
                  |L9.2608|
000a30  1c40              ADDS     r0,r0,#1              ;1570
000a32  1c49              ADDS     r1,r1,#1              ;1572
000a34  b2c9              UXTB     r1,r1                 ;1570
000a36  b280              UXTH     r0,r0                 ;1572
000a38  2905              CMP      r1,#5                 ;1570
000a3a  d3f9              BCC      |L9.2608|
                  |L9.2620|
000a3c  5c21              LDRB     r1,[r4,r0]            ;1577
000a3e  1c40              ADDS     r0,r0,#1              ;1577
000a40  b280              UXTH     r0,r0                 ;1577
000a42  292c              CMP      r1,#0x2c              ;1577
000a44  d106              BNE      |L9.2644|
000a46  2100              MOVS     r1,#0                 ;1579
                  |L9.2632|
000a48  1c40              ADDS     r0,r0,#1              ;1579
000a4a  1c49              ADDS     r1,r1,#1              ;1581
000a4c  b2c9              UXTB     r1,r1                 ;1579
000a4e  b280              UXTH     r0,r0                 ;1581
000a50  2905              CMP      r1,#5                 ;1579
000a52  d3f9              BCC      |L9.2632|
                  |L9.2644|
000a54  5c23              LDRB     r3,[r4,r0]            ;1586
000a56  1c40              ADDS     r0,r0,#1              ;1586
000a58  2100              MOVS     r1,#0                 ;1584
000a5a  b285              UXTH     r5,r0                 ;1586
000a5c  2b2c              CMP      r3,#0x2c              ;1586
000a5e  d10c              BNE      |L9.2682|
000a60  2000              MOVS     r0,#0                 ;1588
                  |L9.2658|
000a62  5d63              LDRB     r3,[r4,r5]            ;1590
000a64  1c6d              ADDS     r5,r5,#1              ;1590
000a66  eb010181          ADD      r1,r1,r1,LSL #2       ;1590
000a6a  eb060141          ADD      r1,r6,r1,LSL #1       ;1590
000a6e  1c40              ADDS     r0,r0,#1              ;1590
000a70  4419              ADD      r1,r1,r3              ;1590
000a72  b2ad              UXTH     r5,r5                 ;1590
000a74  f01000ff          ANDS     r0,r0,#0xff           ;1588
000a78  d0f3              BEQ      |L9.2658|
                  |L9.2682|
000a7a  7191              STRB     r1,[r2,#6]            ;1593
000a7c  7990              LDRB     r0,[r2,#6]            ;1594  ; mainswitch
000a7e  b908              CBNZ     r0,|L9.2692|
000a80  2000              MOVS     r0,#0                 ;1596
000a82  7190              STRB     r0,[r2,#6]            ;1596
                  |L9.2692|
000a84  e02b              B        |L9.2782|
                  |L9.2694|
000a86  5d61              LDRB     r1,[r4,r5]            ;1599
000a88  1c6d              ADDS     r5,r5,#1              ;1599
000a8a  b2a8              UXTH     r0,r5                 ;1599
000a8c  292c              CMP      r1,#0x2c              ;1599
000a8e  d106              BNE      |L9.2718|
000a90  2100              MOVS     r1,#0                 ;1601
                  |L9.2706|
000a92  1c40              ADDS     r0,r0,#1              ;1601
000a94  1c49              ADDS     r1,r1,#1              ;1603
000a96  b2c9              UXTB     r1,r1                 ;1601
000a98  b280              UXTH     r0,r0                 ;1603
000a9a  2905              CMP      r1,#5                 ;1601
000a9c  d3f9              BCC      |L9.2706|
                  |L9.2718|
000a9e  5c21              LDRB     r1,[r4,r0]            ;1608
000aa0  1c40              ADDS     r0,r0,#1              ;1608
000aa2  b280              UXTH     r0,r0                 ;1608
000aa4  292c              CMP      r1,#0x2c              ;1608
000aa6  d106              BNE      |L9.2742|
000aa8  2100              MOVS     r1,#0                 ;1610
                  |L9.2730|
000aaa  1c40              ADDS     r0,r0,#1              ;1610
000aac  1c49              ADDS     r1,r1,#1              ;1612
000aae  b2c9              UXTB     r1,r1                 ;1610
000ab0  b280              UXTH     r0,r0                 ;1612
000ab2  2905              CMP      r1,#5                 ;1610
000ab4  d3f9              BCC      |L9.2730|
                  |L9.2742|
000ab6  5c23              LDRB     r3,[r4,r0]            ;1617
000ab8  1c40              ADDS     r0,r0,#1              ;1617
000aba  2100              MOVS     r1,#0                 ;1615
000abc  b285              UXTH     r5,r0                 ;1617
000abe  2b2c              CMP      r3,#0x2c              ;1617
000ac0  d10c              BNE      |L9.2780|
000ac2  2000              MOVS     r0,#0                 ;1619
                  |L9.2756|
000ac4  5d63              LDRB     r3,[r4,r5]            ;1621
000ac6  1c6d              ADDS     r5,r5,#1              ;1621
000ac8  eb010181          ADD      r1,r1,r1,LSL #2       ;1621
000acc  eb060141          ADD      r1,r6,r1,LSL #1       ;1621
000ad0  1c40              ADDS     r0,r0,#1              ;1621
000ad2  4419              ADD      r1,r1,r3              ;1621
000ad4  b2ad              UXTH     r5,r5                 ;1621
000ad6  f01000ff          ANDS     r0,r0,#0xff           ;1619
000ada  d0f3              BEQ      |L9.2756|
                  |L9.2780|
000adc  7191              STRB     r1,[r2,#6]            ;1624
                  |L9.2782|
000ade  f7fffffe          BL       Off_GPOI_ResetSet
000ae2  4803              LDR      r0,|L9.2800|
000ae4  7980              LDRB     r0,[r0,#6]            ;1630  ; mainswitch
000ae6  f7fffffe          BL       LIST_ONOFF
                  |L9.2794|
000aea  f8049005          STRB     r9,[r4,r5]            ;1631
000aee  e421              B        |L9.820|
                  |L9.2800|
                          DCD      ||.data||
                  |L9.2804|
                          DCD      Run_Control
                  |L9.2808|
                          DCD      0x40020800
                  |L9.2812|
                          DCD      finishflag
                  |L9.2816|
000b00  e0ce              B        |L9.3232|
                  |L9.2818|
000b02  5d60              LDRB     r0,[r4,r5]            ;1637
000b04  2308              MOVS     r3,#8                 ;1636
000b06  283f              CMP      r0,#0x3f              ;1637
000b08  d019              BEQ      |L9.2878|
000b0a  2201              MOVS     r2,#1                 ;1646
000b0c  2100              MOVS     r1,#0                 ;1647
                  |L9.2830|
000b0e  b141              CBZ      r1,|L9.2850|
000b10  2904              CMP      r1,#4                 ;1649
000b12  d006              BEQ      |L9.2850|
000b14  1868              ADDS     r0,r5,r1              ;1651
000b16  5c20              LDRB     r0,[r4,r0]            ;1651
000b18  f7fffffe          BL       IsDigitChar
000b1c  2801              CMP      r0,#1                 ;1651
000b1e  d027              BEQ      |L9.2928|
000b20  2200              MOVS     r2,#0                 ;1657
                  |L9.2850|
000b22  1c49              ADDS     r1,r1,#1              ;1657
000b24  b2c9              UXTB     r1,r1                 ;1647
000b26  4299              CMP      r1,r3                 ;1647
000b28  d3f1              BCC      |L9.2830|
000b2a  2a01              CMP      r2,#1                 ;1660
                  |L9.2860|
000b2c  f47faa81          BNE      |L9.50|
000b30  18e8              ADDS     r0,r5,r3              ;1660
000b32  5c20              LDRB     r0,[r4,r0]            ;1660
000b34  280d              CMP      r0,#0xd               ;1660
000b36  d1f9              BNE      |L9.2860|
000b38  2200              MOVS     r2,#0                 ;1665
000b3a  4610              MOV      r0,r2                 ;1666
000b3c  e031              B        |L9.2978|
                  |L9.2878|
000b3e  eeb58ac0          VCMPE.F32 s16,#0.0              ;1639
000b42  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1639
000b46  db01              BLT      |L9.2892|
000b48  202b              MOVS     r0,#0x2b              ;1639
000b4a  e000              B        |L9.2894|
                  |L9.2892|
000b4c  202d              MOVS     r0,#0x2d              ;1639
                  |L9.2894|
000b4e  5560              STRB     r0,[r4,r5]            ;1639
000b50  1c6d              ADDS     r5,r5,#1              ;1639
000b52  b2ad              UXTH     r5,r5                 ;1639
000b54  ee180a10          VMOV     r0,s16                ;1640
000b58  f7fffffe          BL       __aeabi_f2d
000b5c  ec410b10          VMOV     d0,r0,r1              ;1640
000b60  1960              ADDS     r0,r4,r5              ;1640
000b62  ec532b10          VMOV     r2,r3,d0              ;1640
000b66  a16a              ADR      r1,|L9.3344|
000b68  f7fffffe          BL       __2sprintf
000b6c  3508              ADDS     r5,r5,#8              ;1640
000b6e  e097              B        |L9.3232|
                  |L9.2928|
000b70  f0020201          AND      r2,r2,#1              ;1653
000b74  e7d5              B        |L9.2850|
                  |L9.2934|
000b76  b150              CBZ      r0,|L9.2958|
000b78  2804              CMP      r0,#4                 ;1673
000b7a  d005              BEQ      |L9.2952|
000b7c  5d61              LDRB     r1,[r4,r5]            ;1679
000b7e  eb020282          ADD      r2,r2,r2,LSL #2       ;1679
000b82  eb060242          ADD      r2,r6,r2,LSL #1       ;1679
000b86  440a              ADD      r2,r2,r1              ;1679
                  |L9.2952|
000b88  1c6d              ADDS     r5,r5,#1              ;1679
000b8a  b2ad              UXTH     r5,r5                 ;1675
000b8c  e007              B        |L9.2974|
                  |L9.2958|
000b8e  5d61              LDRB     r1,[r4,r5]            ;1670
000b90  1c6d              ADDS     r5,r5,#1              ;1670
000b92  3930              SUBS     r1,r1,#0x30           ;1670
000b94  ee001a10          VMOV     s0,r1                 ;1670
000b98  b2ad              UXTH     r5,r5                 ;1670
000b9a  eeb88ac0          VCVT.F32.S32 s16,s0                ;1670
                  |L9.2974|
000b9e  1c40              ADDS     r0,r0,#1              ;1670
000ba0  b2c0              UXTB     r0,r0                 ;1666
                  |L9.2978|
000ba2  4298              CMP      r0,r3                 ;1666
000ba4  d3e7              BCC      |L9.2934|
000ba6  eebc0ac8          VCVT.U32.F32 s0,s16                ;1681
000baa  ee100a10          VMOV     r0,s0                 ;1681
000bae  b2c1              UXTB     r1,r0                 ;1681
000bb0  2000              MOVS     r0,#0                 ;1681
000bb2  e03d              B        |L9.3120|
                  |L9.2996|
000bb4  5d60              LDRB     r0,[r4,r5]            ;1688
000bb6  2308              MOVS     r3,#8                 ;1687
000bb8  283f              CMP      r0,#0x3f              ;1688
000bba  d03b              BEQ      |L9.3124|
000bbc  2201              MOVS     r2,#1                 ;1697
000bbe  2100              MOVS     r1,#0                 ;1698
                  |L9.3008|
000bc0  b141              CBZ      r1,|L9.3028|
000bc2  2904              CMP      r1,#4                 ;1700
000bc4  d006              BEQ      |L9.3028|
000bc6  1868              ADDS     r0,r5,r1              ;1702
000bc8  5c20              LDRB     r0,[r4,r0]            ;1702
000bca  f7fffffe          BL       IsDigitChar
000bce  2801              CMP      r0,#1                 ;1702
000bd0  d00d              BEQ      |L9.3054|
000bd2  2200              MOVS     r2,#0                 ;1708
                  |L9.3028|
000bd4  1c49              ADDS     r1,r1,#1              ;1708
000bd6  b2c9              UXTB     r1,r1                 ;1698
000bd8  4299              CMP      r1,r3                 ;1698
000bda  d3f1              BCC      |L9.3008|
000bdc  2a01              CMP      r2,#1                 ;1711
                  |L9.3038|
000bde  d1a5              BNE      |L9.2860|
000be0  18e8              ADDS     r0,r5,r3              ;1711
000be2  5c20              LDRB     r0,[r4,r0]            ;1711
000be4  280d              CMP      r0,#0xd               ;1711
000be6  d1a1              BNE      |L9.2860|
000be8  2200              MOVS     r2,#0                 ;1716
000bea  4610              MOV      r0,r2                 ;1717
000bec  e018              B        |L9.3104|
                  |L9.3054|
000bee  f0020201          AND      r2,r2,#1              ;1704
000bf2  e7ef              B        |L9.3028|
                  |L9.3060|
000bf4  b150              CBZ      r0,|L9.3084|
000bf6  2804              CMP      r0,#4                 ;1724
000bf8  d005              BEQ      |L9.3078|
000bfa  5d61              LDRB     r1,[r4,r5]            ;1730
000bfc  eb020282          ADD      r2,r2,r2,LSL #2       ;1730
000c00  eb060242          ADD      r2,r6,r2,LSL #1       ;1730
000c04  440a              ADD      r2,r2,r1              ;1730
                  |L9.3078|
000c06  1c6d              ADDS     r5,r5,#1              ;1730
000c08  b2ad              UXTH     r5,r5                 ;1726
000c0a  e007              B        |L9.3100|
                  |L9.3084|
000c0c  5d61              LDRB     r1,[r4,r5]            ;1721
000c0e  1c6d              ADDS     r5,r5,#1              ;1721
000c10  3930              SUBS     r1,r1,#0x30           ;1721
000c12  ee001a10          VMOV     s0,r1                 ;1721
000c16  b2ad              UXTH     r5,r5                 ;1721
000c18  eeb88ac0          VCVT.F32.S32 s16,s0                ;1721
                  |L9.3100|
000c1c  1c40              ADDS     r0,r0,#1              ;1721
000c1e  b2c0              UXTB     r0,r0                 ;1717
                  |L9.3104|
000c20  4298              CMP      r0,r3                 ;1717
000c22  d3e7              BCC      |L9.3060|
000c24  eebc0ac8          VCVT.U32.F32 s0,s16                ;1732
000c28  ee100a10          VMOV     r0,s0                 ;1732
000c2c  b2c1              UXTB     r1,r0                 ;1732
000c2e  2001              MOVS     r0,#1                 ;1732
                  |L9.3120|
000c30  f7fffffe          BL       CalHandle
                  |L9.3124|
000c34  e060              B        |L9.3320|
                  |L9.3126|
000c36  5d60              LDRB     r0,[r4,r5]            ;1739
000c38  2306              MOVS     r3,#6                 ;1738
000c3a  283f              CMP      r0,#0x3f              ;1739
000c3c  d018              BEQ      |L9.3184|
000c3e  2201              MOVS     r2,#1                 ;1748
000c40  2100              MOVS     r1,#0                 ;1749
                  |L9.3138|
000c42  b141              CBZ      r1,|L9.3158|
000c44  2904              CMP      r1,#4                 ;1751
000c46  d006              BEQ      |L9.3158|
000c48  1868              ADDS     r0,r5,r1              ;1753
000c4a  5c20              LDRB     r0,[r4,r0]            ;1753
000c4c  f7fffffe          BL       IsDigitChar
000c50  2801              CMP      r0,#1                 ;1753
000c52  d028              BEQ      |L9.3238|
000c54  2200              MOVS     r2,#0                 ;1759
                  |L9.3158|
000c56  1c49              ADDS     r1,r1,#1              ;1759
000c58  b2c9              UXTB     r1,r1                 ;1749
000c5a  4299              CMP      r1,r3                 ;1749
000c5c  d3f1              BCC      |L9.3138|
000c5e  2a01              CMP      r2,#1                 ;1762
000c60  d1bd              BNE      |L9.3038|
000c62  18e8              ADDS     r0,r5,r3              ;1762
000c64  5c20              LDRB     r0,[r4,r0]            ;1762
000c66  280d              CMP      r0,#0xd               ;1762
000c68  d1b9              BNE      |L9.3038|
000c6a  2200              MOVS     r2,#0                 ;1767
000c6c  4610              MOV      r0,r2                 ;1768
000c6e  e028              B        |L9.3266|
                  |L9.3184|
000c70  eeb58ac0          VCMPE.F32 s16,#0.0              ;1741
000c74  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1741
000c78  db01              BLT      |L9.3198|
000c7a  202b              MOVS     r0,#0x2b              ;1741
000c7c  e000              B        |L9.3200|
                  |L9.3198|
000c7e  202d              MOVS     r0,#0x2d              ;1741
                  |L9.3200|
000c80  5560              STRB     r0,[r4,r5]            ;1741
000c82  1c6d              ADDS     r5,r5,#1              ;1741
000c84  b2ad              UXTH     r5,r5                 ;1741
000c86  ee180a10          VMOV     r0,s16                ;1742
000c8a  f7fffffe          BL       __aeabi_f2d
000c8e  ec410b10          VMOV     d0,r0,r1              ;1742
000c92  1960              ADDS     r0,r4,r5              ;1742
000c94  ec532b10          VMOV     r2,r3,d0              ;1742
000c98  a11d              ADR      r1,|L9.3344|
000c9a  f7fffffe          BL       __2sprintf
000c9e  1dad              ADDS     r5,r5,#6              ;1742
                  |L9.3232|
000ca0  b2a8              UXTH     r0,r5                 ;1743
000ca2  f7ffbb17          B        |L9.724|
                  |L9.3238|
000ca6  f0020201          AND      r2,r2,#1              ;1755
000caa  e7d4              B        |L9.3158|
                  |L9.3244|
000cac  5d61              LDRB     r1,[r4,r5]            ;1781
000cae  b188              CBZ      r0,|L9.3284|
000cb0  eb020282          ADD      r2,r2,r2,LSL #2       ;1781
000cb4  eb060242          ADD      r2,r6,r2,LSL #1       ;1781
000cb8  1c6d              ADDS     r5,r5,#1              ;1781
000cba  440a              ADD      r2,r2,r1              ;1781
000cbc  b2ad              UXTH     r5,r5                 ;1781
                  |L9.3262|
000cbe  1c40              ADDS     r0,r0,#1              ;1781
000cc0  b2c0              UXTB     r0,r0                 ;1768
                  |L9.3266|
000cc2  4298              CMP      r0,r3                 ;1768
000cc4  d3f2              BCC      |L9.3244|
000cc6  eebc0ac8          VCVT.U32.F32 s0,s16                ;1783
000cca  ee100a10          VMOV     r0,s0                 ;1783
000cce  b2c1              UXTB     r1,r0                 ;1783
000cd0  2002              MOVS     r0,#2                 ;1783
000cd2  e7ad              B        |L9.3120|
                  |L9.3284|
000cd4  1c6d              ADDS     r5,r5,#1              ;1783
000cd6  3930              SUBS     r1,r1,#0x30           ;1772
000cd8  ee001a10          VMOV     s0,r1                 ;1772
000cdc  b2ad              UXTH     r5,r5                 ;1772
000cde  eeb88ac0          VCVT.F32.S32 s16,s0                ;1772
000ce2  e7ec              B        |L9.3262|
                  |L9.3300|
000ce4  490c              LDR      r1,|L9.3352|
000ce6  2001              MOVS     r0,#1                 ;1809
000ce8  7008              STRB     r0,[r1,#0]            ;1809
000cea  f7fffffe          BL       Write_Boot_Flag
000cee  2f01              CMP      r7,#1                 ;1811
000cf0  d102              BNE      |L9.3320|
000cf2  2037              MOVS     r0,#0x37              ;1813
000cf4  f7fffffe          BL       JumpBoot
                  |L9.3320|
000cf8  f1b80f13          CMP      r8,#0x13              ;1933
000cfc  f4bfa999          BCS      |L9.50|
000d00  b033              ADD      sp,sp,#0xcc
000d02  1c6d              ADDS     r5,r5,#1              ;1933
000d04  ecbd8b02          VPOP     {d8}
000d08  b2a8              UXTH     r0,r5                 ;1937
000d0a  e8bd8ff0          POP      {r4-r11,pc}
;;;1939   
                          ENDP

000d0e  0000              DCW      0x0000
                  |L9.3344|
000d10  2530332e          DCB      "%03.3f",0
000d14  336600  
000d17  00                DCB      0
                  |L9.3352|
                          DCD      bootflag

                          AREA ||i.SetErr_ACK||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  SetErr_ACK PROC
;;;913    
;;;914    u16 SetErr_ACK(char *buf, u8 addr ,u8 ucErr)
000000  b5f8              PUSH     {r3-r7,lr}
;;;915    {
000002  4604              MOV      r4,r0
;;;916    		u16 i=0;
;;;917    		u8 len = 0;
;;;918    		char stradd[3] = {0};
000004  2000              MOVS     r0,#0
;;;919    		int addlen=0;
;;;920    		memset(buf,0,sizeof(buf));
000006  9000              STR      r0,[sp,#0]
000008  6020              STR      r0,[r4,#0]
00000a  4616              MOV      r6,r2                 ;915
;;;921        	buf[i++] = ChrStartS;
00000c  203e              MOVS     r0,#0x3e
00000e  7020              STRB     r0,[r4,#0]
;;;922    		sprintf(stradd,"%d",addr);
000010  460a              MOV      r2,r1
000012  a11a              ADR      r1,|L10.124|
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       __2sprintf
;;;923    		addlen=strlen(stradd);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       strlen
000020  4605              MOV      r5,r0
;;;924    		strncat(&buf[i],stradd,addlen);
000022  1c60              ADDS     r0,r4,#1
000024  462a              MOV      r2,r5
000026  4669              MOV      r1,sp
000028  f7fffffe          BL       strncat
00002c  1c6d              ADDS     r5,r5,#1
;;;925    		i+=addlen;
00002e  b2a8              UXTH     r0,r5
;;;926    		buf[i++] = '/';
000030  212f              MOVS     r1,#0x2f
000032  5421              STRB     r1,[r4,r0]
000034  1c40              ADDS     r0,r0,#1
000036  b285              UXTH     r5,r0
;;;927    		switch(ucErr)
000038  2e01              CMP      r6,#1
00003a  d008              BEQ      |L10.78|
00003c  2e02              CMP      r6,#2
00003e  d001              BEQ      |L10.68|
000040  2e03              CMP      r6,#3
000042  d015              BEQ      |L10.112|
                  |L10.68|
;;;928            {
;;;929              case 1:         //
;;;930              	   len = 9;
;;;931              	   memmove(&buf[i],"PARA ERR!",len);   
;;;932              	   break;
;;;933    	      case 2:         //
;;;934              	   len = 8;
;;;935              	   memmove(&buf[i],"CMD ERR!",len);   
;;;936              	   break;
;;;937    	      case 3:         //
;;;938              	   len = 8;
;;;939              	   memmove(&buf[i],"REM ERR!",len);   
;;;940              	   break;
;;;941    		  default:    
;;;942                   len = 8;
000044  2608              MOVS     r6,#8
;;;943              	   memmove(&buf[i],"CMD ERR!",len);   
000046  1960              ADDS     r0,r4,r5
000048  4632              MOV      r2,r6
00004a  a10d              ADR      r1,|L10.128|
;;;944                   break;
00004c  e003              B        |L10.86|
                  |L10.78|
00004e  2609              MOVS     r6,#9                 ;930
000050  1960              ADDS     r0,r4,r5              ;931
000052  4632              MOV      r2,r6                 ;931
000054  a10d              ADR      r1,|L10.140|
                  |L10.86|
000056  f7fffffe          BL       __aeabi_memmove
;;;945    	    }
;;;946    	    i+=len;
00005a  19a8              ADDS     r0,r5,r6
00005c  b280              UXTH     r0,r0
;;;947    		buf[i++] = ChrEndR;
00005e  210d              MOVS     r1,#0xd
000060  5421              STRB     r1,[r4,r0]
000062  1c40              ADDS     r0,r0,#1
000064  b280              UXTH     r0,r0
;;;948    		buf[i++] = ChrEndS;
000066  210a              MOVS     r1,#0xa
000068  5421              STRB     r1,[r4,r0]
00006a  1c40              ADDS     r0,r0,#1
00006c  b280              UXTH     r0,r0
;;;949    		return i;
;;;950    }
00006e  bdf8              POP      {r3-r7,pc}
                  |L10.112|
000070  2608              MOVS     r6,#8                 ;938
000072  1960              ADDS     r0,r4,r5              ;939
000074  4632              MOV      r2,r6                 ;939
000076  a108              ADR      r1,|L10.152|
000078  e7ed              B        |L10.86|
;;;951    
                          ENDP

00007a  0000              DCW      0x0000
                  |L10.124|
00007c  256400            DCB      "%d",0
00007f  00                DCB      0
                  |L10.128|
000080  434d4420          DCB      "CMD ERR!",0
000084  45525221
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L10.140|
00008c  50415241          DCB      "PARA ERR!",0
000090  20455252
000094  2100    
000096  00                DCB      0
000097  00                DCB      0
                  |L10.152|
000098  52454d20          DCB      "REM ERR!",0
00009c  45525221
0000a0  00      
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0

                          AREA ||i.SetListPC||, CODE, READONLY, ALIGN=2

                  SetListPC PROC
;;;158    
;;;159    void SetListPC(void)
000000  4804              LDR      r0,|L11.20|
;;;160    {
000002  b510              PUSH     {r4,lr}
;;;161    	SetPowerC(Para.CDC_Limit_C);
000004  f8b00066          LDRH     r0,[r0,#0x66]  ; Para
000008  f7fffffe          BL       SetPowerC
;;;162    	listsend = 3;
00000c  4902              LDR      r1,|L11.24|
00000e  2003              MOVS     r0,#3
000010  7248              STRB     r0,[r1,#9]
;;;163    }
000012  bd10              POP      {r4,pc}
;;;164    
                          ENDP

                  |L11.20|
                          DCD      Para
                  |L11.24|
                          DCD      ||.data||

                          AREA ||i.SetListPS||, CODE, READONLY, ALIGN=2

                  SetListPS PROC
;;;165    
;;;166    void SetListPS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;167    {
;;;168    	if(mainswitch == 1)
000002  4c0d              LDR      r4,|L12.56|
000004  79a0              LDRB     r0,[r4,#6]  ; mainswitch
;;;169    	{
;;;170    		GPIO_SetBits(GPIOE,GPIO_Pin_2);
000006  4d0d              LDR      r5,|L12.60|
000008  2801              CMP      r0,#1                 ;168
00000a  d106              BNE      |L12.26|
00000c  2104              MOVS     r1,#4
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       GPIO_SetBits
;;;171    		Delay_ms(POWER_SW_DELAY);
000014  200a              MOVS     r0,#0xa
000016  f7fffffe          BL       Delay_ms
                  |L12.26|
;;;172    	}
;;;173    	
;;;174    	if(mainswitch == 0)
00001a  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00001c  b930              CBNZ     r0,|L12.44|
;;;175    	{
;;;176    		Delay_ms(POWER_SW_DELAY);
00001e  200a              MOVS     r0,#0xa
000020  f7fffffe          BL       Delay_ms
;;;177    		GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
000024  2104              MOVS     r1,#4
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       GPIO_ResetBits
                  |L12.44|
;;;178    	}
;;;179    	PowerSwitch(mainswitch);
00002c  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00002e  f7fffffe          BL       PowerSwitch
;;;180    	listsend = 0;
000032  2000              MOVS     r0,#0
000034  7260              STRB     r0,[r4,#9]
;;;181    }
000036  bd70              POP      {r4-r6,pc}
;;;182    
                          ENDP

                  |L12.56|
                          DCD      ||.data||
                  |L12.60|
                          DCD      0x40021000

                          AREA ||i.SetListPV||, CODE, READONLY, ALIGN=2

                  SetListPV PROC
;;;152    }
;;;153    void SetListPV(void)
000000  4804              LDR      r0,|L13.20|
;;;154    {
000002  b510              PUSH     {r4,lr}
;;;155    	SetPowerV(Para.CDC_OutPut_V);
000004  f8b00064          LDRH     r0,[r0,#0x64]  ; Para
000008  f7fffffe          BL       SetPowerV
;;;156    	listsend = 2;
00000c  4902              LDR      r1,|L13.24|
00000e  2002              MOVS     r0,#2
000010  7248              STRB     r0,[r1,#9]
;;;157    }
000012  bd10              POP      {r4,pc}
;;;158    
                          ENDP

                  |L13.20|
                          DCD      Para
                  |L13.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerC||, CODE, READONLY, ALIGN=2

                  SetPowerC PROC
;;;113    
;;;114    void SetPowerC(vu16 powc)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;115    {
;;;116    	MasterSendbuf[0] = 0x01;
000002  4c12              LDR      r4,|L14.76|
000004  2001              MOVS     r0,#1
000006  7020              STRB     r0,[r4,#0]
;;;117    	MasterSendbuf[1] = 0x06;
000008  2006              MOVS     r0,#6
00000a  7060              STRB     r0,[r4,#1]
;;;118    	MasterSendbuf[2] = 0x00;
00000c  2000              MOVS     r0,#0
00000e  70a0              STRB     r0,[r4,#2]
;;;119    	MasterSendbuf[3] = 0x31;
000010  2031              MOVS     r0,#0x31
000012  70e0              STRB     r0,[r4,#3]
;;;120    	MasterSendbuf[4] = (u8)(powc/10>>8);
000014  f8bd1000          LDRH     r1,[sp,#0]
000018  200a              MOVS     r0,#0xa
00001a  fbb1f1f0          UDIV     r1,r1,r0
00001e  0a09              LSRS     r1,r1,#8
000020  7121              STRB     r1,[r4,#4]
;;;121    	MasterSendbuf[5] = (u8)(powc/10);
000022  f8bd1000          LDRH     r1,[sp,#0]
000026  fbb1f0f0          UDIV     r0,r1,r0
00002a  7160              STRB     r0,[r4,#5]
;;;122    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00002c  2106              MOVS     r1,#6
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       Hardware_CRC
000034  71a0              STRB     r0,[r4,#6]
;;;123    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000036  2106              MOVS     r1,#6
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       Hardware_CRC
00003e  0a00              LSRS     r0,r0,#8
000040  71e0              STRB     r0,[r4,#7]
;;;124    	USART3WriteDMA(8);
000042  e8bd4038          POP      {r3-r5,lr}
000046  2008              MOVS     r0,#8
000048  f7ffbffe          B.W      USART3WriteDMA
;;;125    }
;;;126    
                          ENDP

                  |L14.76|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.SetPowerModeC||, CODE, READONLY, ALIGN=2

                  SetPowerModeC PROC
;;;132    
;;;133    void SetPowerModeC(void)
000000  4804              LDR      r0,|L15.20|
;;;134    {
000002  b510              PUSH     {r4,lr}
;;;135    	SetPowerC(Para.POWER_Limit_C);
000004  f8b00056          LDRH     r0,[r0,#0x56]  ; Para
000008  f7fffffe          BL       SetPowerC
;;;136    	sendwait = 3;
00000c  4902              LDR      r1,|L15.24|
00000e  2003              MOVS     r0,#3
000010  7208              STRB     r0,[r1,#8]
;;;137    }
000012  bd10              POP      {r4,pc}
;;;138    
                          ENDP

                  |L15.20|
                          DCD      Para
                  |L15.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerModeS||, CODE, READONLY, ALIGN=2

                  SetPowerModeS PROC
;;;138    
;;;139    void SetPowerModeS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;140    {
;;;141    	if(mainswitch == 1)
000002  4c0e              LDR      r4,|L16.60|
000004  79a1              LDRB     r1,[r4,#6]  ; mainswitch
;;;142    	{
;;;143    		GPIO_SetBits(GPIOE,GPIO_Pin_2);
000006  4d0e              LDR      r5,|L16.64|
000008  2901              CMP      r1,#1                 ;141
00000a  d002              BEQ      |L16.18|
;;;144    		Delay_ms(POWER_SW_DELAY);
;;;145    	}else if(mainswitch == 0)
00000c  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00000e  b140              CBZ      r0,|L16.34|
000010  e00e              B        |L16.48|
                  |L16.18|
000012  2104              MOVS     r1,#4                 ;143
000014  4628              MOV      r0,r5                 ;143
000016  f7fffffe          BL       GPIO_SetBits
00001a  200a              MOVS     r0,#0xa               ;144
00001c  f7fffffe          BL       Delay_ms
000020  e006              B        |L16.48|
                  |L16.34|
;;;146    	{
;;;147    		Delay_ms(POWER_SW_DELAY);
000022  200a              MOVS     r0,#0xa
000024  f7fffffe          BL       Delay_ms
;;;148    		GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
000028  2104              MOVS     r1,#4
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       GPIO_ResetBits
                  |L16.48|
;;;149    	}
;;;150    	PowerSwitch(mainswitch);
000030  79a0              LDRB     r0,[r4,#6]  ; mainswitch
000032  f7fffffe          BL       PowerSwitch
;;;151    	sendwait = 0;
000036  2000              MOVS     r0,#0
000038  7220              STRB     r0,[r4,#8]
;;;152    }
00003a  bd70              POP      {r4-r6,pc}
;;;153    void SetListPV(void)
                          ENDP

                  |L16.60|
                          DCD      ||.data||
                  |L16.64|
                          DCD      0x40021000

                          AREA ||i.SetPowerModeV||, CODE, READONLY, ALIGN=2

                  SetPowerModeV PROC
;;;126    
;;;127    void SetPowerModeV(void)
000000  4804              LDR      r0,|L17.20|
;;;128    {
000002  b510              PUSH     {r4,lr}
;;;129    	SetPowerV(Para.POWER_OutPut_V);
000004  f8b00054          LDRH     r0,[r0,#0x54]  ; Para
000008  f7fffffe          BL       SetPowerV
;;;130    	sendwait = 2;
00000c  4902              LDR      r1,|L17.24|
00000e  2002              MOVS     r0,#2
000010  7208              STRB     r0,[r1,#8]
;;;131    }
000012  bd10              POP      {r4,pc}
;;;132    
                          ENDP

                  |L17.20|
                          DCD      Para
                  |L17.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerV||, CODE, READONLY, ALIGN=2

                  SetPowerV PROC
;;;100    }
;;;101    void SetPowerV(vu16 powv)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;102    {
;;;103    	MasterSendbuf[0] = 0x01;
000002  4c12              LDR      r4,|L18.76|
000004  2001              MOVS     r0,#1
000006  7020              STRB     r0,[r4,#0]
;;;104    	MasterSendbuf[1] = 0x06;
000008  2006              MOVS     r0,#6
00000a  7060              STRB     r0,[r4,#1]
;;;105    	MasterSendbuf[2] = 0x00;
00000c  2000              MOVS     r0,#0
00000e  70a0              STRB     r0,[r4,#2]
;;;106    	MasterSendbuf[3] = 0x30;
000010  2030              MOVS     r0,#0x30
000012  70e0              STRB     r0,[r4,#3]
;;;107    	MasterSendbuf[4] = (u8)(powv/10>>8);
000014  f8bd1000          LDRH     r1,[sp,#0]
000018  200a              MOVS     r0,#0xa
00001a  fbb1f1f0          UDIV     r1,r1,r0
00001e  0a09              LSRS     r1,r1,#8
000020  7121              STRB     r1,[r4,#4]
;;;108    	MasterSendbuf[5] = (u8)(powv/10);
000022  f8bd1000          LDRH     r1,[sp,#0]
000026  fbb1f0f0          UDIV     r0,r1,r0
00002a  7160              STRB     r0,[r4,#5]
;;;109    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00002c  2106              MOVS     r1,#6
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       Hardware_CRC
000034  71a0              STRB     r0,[r4,#6]
;;;110    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000036  2106              MOVS     r1,#6
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       Hardware_CRC
00003e  0a00              LSRS     r0,r0,#8
000040  71e0              STRB     r0,[r4,#7]
;;;111    	USART3WriteDMA(8);
000042  e8bd4038          POP      {r3-r5,lr}
000046  2008              MOVS     r0,#8
000048  f7ffbffe          B.W      USART3WriteDMA
;;;112    }
;;;113    
                          ENDP

                  |L18.76|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.UART1_Send||, CODE, READONLY, ALIGN=2

                  UART1_Send PROC
;;;2331   
;;;2332   void UART1_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2333   {
;;;2334   	static vu8 UART_Buffer_Send_pointer=0;
;;;2335   		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L19.72|
000004  78e0              LDRB     r0,[r4,#3]  ; UART_Buffer_Send_pointer
000006  7921              LDRB     r1,[r4,#4]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L19.56|
;;;2336            {
;;;2337   				 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L19.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L19.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L19.54|
;;;2338   				 {
;;;2339   					USART_SendData(USART1,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  78e1              LDRB     r1,[r4,#3]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  4d0d              LDR      r5,|L19.84|
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       USART_SendData
                  |L19.36|
;;;2340   					while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);//等待发送完成
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L19.36|
;;;2341   					UART_Buffer_Send_pointer++;
000030  78e0              LDRB     r0,[r4,#3]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  70e0              STRB     r0,[r4,#3]
                  |L19.54|
;;;2342   				 }
;;;2343            }
;;;2344   		else 
;;;2345   		{
;;;2346   			UART_Buffer_Send_pointer=0;
;;;2347   			UART_SEND_flag=0;//发送完成一帧数据
;;;2348   		}
;;;2349   }
000036  bd70              POP      {r4-r6,pc}
                  |L19.56|
000038  2000              MOVS     r0,#0                 ;2346
00003a  70e0              STRB     r0,[r4,#3]            ;2346
00003c  4806              LDR      r0,|L19.88|
00003e  6801              LDR      r1,[r0,#0]            ;2347  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;2347
000044  6001              STR      r1,[r0,#0]            ;2347  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;2350   
                          ENDP

                  |L19.72|
                          DCD      ||.data||
                  |L19.76|
                          DCD      ||area_number.31||
                  |L19.80|
                          DCD      ADDR
                  |L19.84|
                          DCD      0x40011000
                  |L19.88|
                          DCD      flagA

                          AREA ||i.UART2_Send||, CODE, READONLY, ALIGN=2

                  UART2_Send PROC
;;;2312   }
;;;2313   void UART2_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2314   {
;;;2315   	static vu8 UART_Buffer_Send_pointer=0;
;;;2316   		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L20.72|
000004  78a0              LDRB     r0,[r4,#2]  ; UART_Buffer_Send_pointer
000006  7921              LDRB     r1,[r4,#4]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L20.56|
;;;2317            {
;;;2318   					 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L20.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L20.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L20.54|
;;;2319   					 {
;;;2320   						USART_SendData(USART2,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  78a1              LDRB     r1,[r4,#2]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  480d              LDR      r0,|L20.84|
00001e  f7fffffe          BL       USART_SendData
;;;2321   						while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);//等待发送完成
000022  4d0d              LDR      r5,|L20.88|
                  |L20.36|
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L20.36|
;;;2322   						UART_Buffer_Send_pointer++;
000030  78a0              LDRB     r0,[r4,#2]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  70a0              STRB     r0,[r4,#2]
                  |L20.54|
;;;2323   					}
;;;2324            }
;;;2325   		else 
;;;2326   		{
;;;2327   			UART_Buffer_Send_pointer=0;
;;;2328   			UART_SEND_flag=0;//发送完成一帧数据
;;;2329   		}
;;;2330   }
000036  bd70              POP      {r4-r6,pc}
                  |L20.56|
000038  2000              MOVS     r0,#0                 ;2327
00003a  70a0              STRB     r0,[r4,#2]            ;2327
00003c  4807              LDR      r0,|L20.92|
00003e  6801              LDR      r1,[r0,#0]            ;2328  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;2328
000044  6001              STR      r1,[r0,#0]            ;2328  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;2331   
                          ENDP

                  |L20.72|
                          DCD      ||.data||
                  |L20.76|
                          DCD      ||area_number.31||
                  |L20.80|
                          DCD      ADDR
                  |L20.84|
                          DCD      0x40004400
                  |L20.88|
                          DCD      0x40011000
                  |L20.92|
                          DCD      flagA

                          AREA ||i.USART2_Configuration||, CODE, READONLY, ALIGN=2

                  USART2_Configuration PROC
;;;2008   
;;;2009   void USART2_Configuration(void)//串口初始化函数
000000  b570              PUSH     {r4-r6,lr}
;;;2010   {  
;;;2011   	GPIO_InitTypeDef GPIO_InitStructure;
;;;2012   	USART_InitTypeDef USART_InitStructure;
;;;2013   	
;;;2014   	/* config USART1 clock */
;;;2015   	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
000002  2101              MOVS     r1,#1
000004  b088              SUB      sp,sp,#0x20           ;2010
000006  0448              LSLS     r0,r1,#17
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;2016   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);
00000c  4e2a              LDR      r6,|L21.184|
00000e  2207              MOVS     r2,#7
000010  2102              MOVS     r1,#2
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2017   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);
000018  2207              MOVS     r2,#7
00001a  2103              MOVS     r1,#3
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2018   	/* USART1 GPIO config */
;;;2019   	/* Configure USART1 Tx (PA.02) as alternate function push-pull */
;;;2020   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;2021   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000022  2502              MOVS     r5,#2
000024  2004              MOVS     r0,#4                 ;2020
000026  f88d5004          STRB     r5,[sp,#4]
;;;2022   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
00002c  9000              STR      r0,[sp,#0]            ;2021
00002e  f88d4006          STRB     r4,[sp,#6]
;;;2023   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f88d5005          STRB     r5,[sp,#5]
;;;2024   	GPIO_Init(GPIOA, &GPIO_InitStructure);    
000036  4669              MOV      r1,sp
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GPIO_Init
;;;2025   	/* Configure USART1 Rx (PA.03) as input floating */
;;;2026   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
00003e  2008              MOVS     r0,#8
;;;2027   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000040  9000              STR      r0,[sp,#0]
000042  f88d5004          STRB     r5,[sp,#4]
;;;2028   	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;2029   	
;;;2030   	/* USART1 mode config */
;;;2031   	USART_InitStructure.USART_BaudRate = 115200;
00004e  f44f30e1          MOV      r0,#0x1c200
;;;2032   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000052  9002              STR      r0,[sp,#8]
;;;2033   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2034   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000054  f8ad4010          STRH     r4,[sp,#0x10]
;;;2035   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2036   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
;;;2037   	USART_Init(USART2, &USART_InitStructure);
00005a  4d18              LDR      r5,|L21.188|
00005c  f8ad400c          STRH     r4,[sp,#0xc]          ;2032
000060  f8ad0012          STRH     r0,[sp,#0x12]         ;2036
000064  f8ad400e          STRH     r4,[sp,#0xe]          ;2033
000068  f8ad4014          STRH     r4,[sp,#0x14]         ;2035
00006c  a902              ADD      r1,sp,#8
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       USART_Init
;;;2038   	
;;;2039   	/******使能串口接收中断******************/
;;;2040   	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
000074  2201              MOVS     r2,#1
000076  f2405125          MOV      r1,#0x525
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_ITConfig
;;;2041   //	USART_ITConfig(USART2, USART_IT_ORE, ENABLE);	
;;;2042   	USART_Cmd(USART2, ENABLE);//使能串口1
000080  2101              MOVS     r1,#1
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USART_Cmd
;;;2043     USART_ClearFlag(USART2, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       USART_ClearFlag
000090  f44f60e0          MOV      r0,#0x700
000094  f7fffffe          BL       NVIC_PriorityGroupConfig
000098  2026              MOVS     r0,#0x26
00009a  f88d0018          STRB     r0,[sp,#0x18]
00009e  f88d4019          STRB     r4,[sp,#0x19]
0000a2  2001              MOVS     r0,#1
0000a4  f88d001a          STRB     r0,[sp,#0x1a]
0000a8  f88d001b          STRB     r0,[sp,#0x1b]
0000ac  a806              ADD      r0,sp,#0x18
0000ae  f7fffffe          BL       NVIC_Init
;;;2044     
;;;2045     USART2_NVIC_Config();//串口中断配置
;;;2046   }
0000b2  b008              ADD      sp,sp,#0x20
0000b4  bd70              POP      {r4-r6,pc}
;;;2047   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L21.184|
                          DCD      0x40020000
                  |L21.188|
                          DCD      0x40004400

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;2270   
;;;2271   void USART2_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2272   {
;;;2273   	u8 Res;
;;;2274    	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
000002  4c1c              LDR      r4,|L22.116|
000004  f2405525          MOV      r5,#0x525
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       USART_GetITStatus
000010  2800              CMP      r0,#0
000012  d013              BEQ      |L22.60|
;;;2275   	{
;;;2276   		USART_ClearITPendingBit(USART2,USART_IT_RXNE);
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       USART_ClearITPendingBit
;;;2277   		Res=USART_ReceiveData(USART2);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       USART_ReceiveData
;;;2278   
;;;2279   		if((USART_RX_STA&0x8000)==0)//接收未完成
000022  4a15              LDR      r2,|L22.120|
000024  b2c1              UXTB     r1,r0                 ;2277
000026  8950              LDRH     r0,[r2,#0xa]  ; USART_RX_STA
000028  0403              LSLS     r3,r0,#16
00002a  d407              BMI      |L22.60|
;;;2280   		{
;;;2281   		if(USART_RX_STA&0x4000)//接收到了0x0d
;;;2282   		{
;;;2283   			if(Res!=0x0a)
;;;2284   				USART_RX_STA=0;//接收错误,重新开始
;;;2285   			else 
;;;2286   			{
;;;2287   		//		SerialRemoteHandleL(USART_RX_STA,USART_RX_BUF);
;;;2288   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
00002c  4b13              LDR      r3,|L22.124|
00002e  0445              LSLS     r5,r0,#17             ;2281
000030  f04f0400          MOV      r4,#0                 ;2281
000034  d50b              BPL      |L22.78|
000036  290a              CMP      r1,#0xa               ;2283
000038  d001              BEQ      |L22.62|
                  |L22.58|
00003a  8154              STRH     r4,[r2,#0xa]          ;2284
                  |L22.60|
;;;2289   				USART_RX_STA++;
;;;2290   				USART_RX_CNT = USART_RX_STA;
;;;2291   				USART_RX_STA|=0x8000;	//接收完成了 			  //接收到回车的后字节  置位状态寄存器 
;;;2292   			}
;;;2293   		}
;;;2294   		else //还没收到0X0D
;;;2295   		{	
;;;2296   			if(Res==0x0d)
;;;2297   			{
;;;2298   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
;;;2299   				USART_RX_STA++;	
;;;2300   				USART_RX_STA|=0x4000;					 //接收到回车的前一字节  置位状态寄存器
;;;2301   			}
;;;2302   			else
;;;2303   				{
;;;2304   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
;;;2305   					USART_RX_STA++;									//长度+1 为下一次做准备
;;;2306   				if(USART_RX_STA>(USART_REC_LEN-1))
;;;2307   					USART_RX_STA=0;//接收数据错误,重新开始接收	  
;;;2308   				}		 
;;;2309   			}
;;;2310   		} 
;;;2311   	}
;;;2312   }
00003c  bd70              POP      {r4-r6,pc}
                  |L22.62|
00003e  f3c0040d          UBFX     r4,r0,#0,#14          ;2288
000042  1c40              ADDS     r0,r0,#1              ;2288
000044  5519              STRB     r1,[r3,r4]            ;2288
000046  8190              STRH     r0,[r2,#0xc]          ;2290
000048  f4404000          ORR      r0,r0,#0x8000         ;2291
00004c  e010              B        |L22.112|
                  |L22.78|
00004e  290d              CMP      r1,#0xd               ;2296
000050  d008              BEQ      |L22.100|
000052  f3c0050d          UBFX     r5,r0,#0,#14          ;2304
000056  1c40              ADDS     r0,r0,#1              ;2304
000058  b280              UXTH     r0,r0                 ;2305
00005a  5559              STRB     r1,[r3,r5]            ;2304
00005c  8150              STRH     r0,[r2,#0xa]          ;2305
00005e  28c7              CMP      r0,#0xc7              ;2306
000060  d8eb              BHI      |L22.58|
000062  bd70              POP      {r4-r6,pc}
                  |L22.100|
000064  f3c0040d          UBFX     r4,r0,#0,#14          ;2298
000068  1c40              ADDS     r0,r0,#1              ;2298
00006a  5519              STRB     r1,[r3,r4]            ;2298
00006c  f4404080          ORR      r0,r0,#0x4000         ;2300
                  |L22.112|
000070  8150              STRH     r0,[r2,#0xa]          ;2291
000072  bd70              POP      {r4-r6,pc}
;;;2313   void UART2_Send(void)
                          ENDP

                  |L22.116|
                          DCD      0x40004400
                  |L22.120|
                          DCD      ||.data||
                  |L22.124|
                          DCD      ||area_number.31||+0x14

                          AREA ||i.USART3HANDLE||, CODE, READONLY, ALIGN=2

                  USART3HANDLE PROC
;;;208    
;;;209    void USART3HANDLE(void)
000000  b538              PUSH     {r3-r5,lr}
;;;210    {
;;;211    	vu16 crcres;
;;;212    
;;;213    	if(MasterRecbuf[0] == 0x01)
000002  4c28              LDR      r4,|L23.164|
;;;214    	{
;;;215    		if(MasterRecbuf[1] == 0x03)
;;;216    		{
;;;217    			crcres = (MasterRecbuf[8] << 8) + MasterRecbuf[7];
;;;218    			if(crcres == Hardware_CRC(MasterRecbuf,7))
;;;219    			{
;;;220    				 
;;;221    				Para.CPOW_Voltage = (MasterRecbuf[3] << 8) + MasterRecbuf[4];
;;;222    				Para.CCurrent = (MasterRecbuf[5] << 8) + MasterRecbuf[6];
;;;223    				memset(MasterRecbuf,0,sizeof(MasterRecbuf));
;;;224    			}
;;;225    				if(sendwait == 3)
000004  4d28              LDR      r5,|L23.168|
000006  7820              LDRB     r0,[r4,#0]            ;213  ; MasterRecbuf
000008  2801              CMP      r0,#1                 ;213
00000a  d148              BNE      |L23.158|
00000c  7860              LDRB     r0,[r4,#1]            ;215  ; MasterRecbuf
00000e  2803              CMP      r0,#3                 ;215
000010  d002              BEQ      |L23.24|
;;;226    				{
;;;227    					SetPowerModeS();
;;;228    				}
;;;229    				if(sendwait == 2)
;;;230    				{
;;;231    					SetPowerModeC();
;;;232    				}
;;;233    				if(sendwait == 1)
;;;234    				{
;;;235    					SetPowerModeV();
;;;236    				}
;;;237    				if(listsend == 3)
;;;238    				{
;;;239    					SetListPS();
;;;240    				}
;;;241    				if(listsend == 2)
;;;242    				{
;;;243    					SetListPC();
;;;244    				}
;;;245    				if(listsend == 1)
;;;246    				{
;;;247    					SetListPV();
;;;248    				}
;;;249    		}else if(MasterRecbuf[1] == 0x06){
000012  2806              CMP      r0,#6
000014  d03c              BEQ      |L23.144|
000016  e042              B        |L23.158|
                  |L23.24|
000018  79e1              LDRB     r1,[r4,#7]            ;217  ; MasterRecbuf
00001a  7a20              LDRB     r0,[r4,#8]            ;217  ; MasterRecbuf
00001c  eb012000          ADD      r0,r1,r0,LSL #8       ;217
000020  f8ad0000          STRH     r0,[sp,#0]            ;217
000024  2107              MOVS     r1,#7                 ;218
000026  481f              LDR      r0,|L23.164|
000028  f7fffffe          BL       Hardware_CRC
00002c  f8bd1000          LDRH     r1,[sp,#0]            ;218
000030  4288              CMP      r0,r1                 ;218
000032  d10e              BNE      |L23.82|
000034  7920              LDRB     r0,[r4,#4]            ;221  ; MasterRecbuf
000036  78e1              LDRB     r1,[r4,#3]            ;221  ; MasterRecbuf
000038  eb002101          ADD      r1,r0,r1,LSL #8       ;221
00003c  481b              LDR      r0,|L23.172|
00003e  6281              STR      r1,[r0,#0x28]         ;221  ; Para
000040  79a1              LDRB     r1,[r4,#6]            ;222  ; MasterRecbuf
000042  7962              LDRB     r2,[r4,#5]            ;222  ; MasterRecbuf
000044  eb012102          ADD      r1,r1,r2,LSL #8       ;222
000048  6301              STR      r1,[r0,#0x30]         ;222  ; Para
00004a  2180              MOVS     r1,#0x80              ;223
00004c  4815              LDR      r0,|L23.164|
00004e  f7fffffe          BL       __aeabi_memclr
                  |L23.82|
000052  7a28              LDRB     r0,[r5,#8]            ;225  ; sendwait
000054  2803              CMP      r0,#3                 ;225
000056  d101              BNE      |L23.92|
000058  f7fffffe          BL       SetPowerModeS
                  |L23.92|
00005c  7a28              LDRB     r0,[r5,#8]            ;229  ; sendwait
00005e  2802              CMP      r0,#2                 ;229
000060  d101              BNE      |L23.102|
000062  f7fffffe          BL       SetPowerModeC
                  |L23.102|
000066  7a28              LDRB     r0,[r5,#8]            ;233  ; sendwait
000068  2801              CMP      r0,#1                 ;233
00006a  d101              BNE      |L23.112|
00006c  f7fffffe          BL       SetPowerModeV
                  |L23.112|
000070  7a68              LDRB     r0,[r5,#9]            ;237  ; listsend
000072  2803              CMP      r0,#3                 ;237
000074  d101              BNE      |L23.122|
000076  f7fffffe          BL       SetListPS
                  |L23.122|
00007a  7a68              LDRB     r0,[r5,#9]            ;241  ; listsend
00007c  2802              CMP      r0,#2                 ;241
00007e  d101              BNE      |L23.132|
000080  f7fffffe          BL       SetListPC
                  |L23.132|
000084  7a68              LDRB     r0,[r5,#9]            ;245  ; listsend
000086  2801              CMP      r0,#1                 ;245
000088  d109              BNE      |L23.158|
00008a  f7fffffe          BL       SetListPV
00008e  e006              B        |L23.158|
                  |L23.144|
;;;250    			memset(MasterRecbuf,0,sizeof(MasterRecbuf));
000090  2180              MOVS     r1,#0x80
000092  4804              LDR      r0,|L23.164|
000094  f7fffffe          BL       __aeabi_memclr
;;;251    			watchtest ++;
000098  6b28              LDR      r0,[r5,#0x30]  ; watchtest
00009a  1c40              ADDS     r0,r0,#1
00009c  6328              STR      r0,[r5,#0x30]  ; watchtest
                  |L23.158|
;;;252    		}
;;;253    	}	
;;;254    
;;;255    	
;;;256    	USART3_Recive_flg = 0;
00009e  2000              MOVS     r0,#0
0000a0  7068              STRB     r0,[r5,#1]
;;;257    }
0000a2  bd38              POP      {r3-r5,pc}
;;;258    
                          ENDP

                  |L23.164|
                          DCD      ||area_number.31||+0x15c
                  |L23.168|
                          DCD      ||.data||
                  |L23.172|
                          DCD      Para

                          AREA ||i.USART3WriteDMA||, CODE, READONLY, ALIGN=2

                  USART3WriteDMA PROC
;;;2213   
;;;2214   void USART3WriteDMA(u16 len)
000000  b570              PUSH     {r4-r6,lr}
;;;2215   {
000002  4605              MOV      r5,r0
;;;2216       USART_ClearFlag(USART3, USART_FLAG_TC);     //串口发送准备
000004  2140              MOVS     r1,#0x40
000006  4809              LDR      r0,|L24.44|
000008  f7fffffe          BL       USART_ClearFlag
;;;2217   	DMA_Cmd(DMA1_Stream3, DISABLE);//关闭DMA 数据流3
00000c  4c08              LDR      r4,|L24.48|
00000e  2100              MOVS     r1,#0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       DMA_Cmd
;;;2218       DMA_SetCurrDataCounter(DMA1_Stream3,len);//设置DMA发生长度
000016  4629              MOV      r1,r5
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       DMA_SetCurrDataCounter
;;;2219   	DMA_Cmd(DMA1_Stream3, ENABLE);// 打开DMA 数据流3
00001e  4620              MOV      r0,r4
000020  e8bd4070          POP      {r4-r6,lr}
000024  2101              MOVS     r1,#1
000026  f7ffbffe          B.W      DMA_Cmd
;;;2220      
;;;2221   }
;;;2222   
                          ENDP

00002a  0000              DCW      0x0000
                  |L24.44|
                          DCD      0x40004800
                  |L24.48|
                          DCD      0x40026058

                          AREA ||i.USART3_Configuration||, CODE, READONLY, ALIGN=2

                  USART3_Configuration PROC
;;;2160   
;;;2161   void USART3_Configuration()//???????
000000  b570              PUSH     {r4-r6,lr}
;;;2162   {  
;;;2163       GPIO_InitTypeDef GPIO_InitStructure;
;;;2164   	USART_InitTypeDef USART_InitStructure;
;;;2165   	
;;;2166   	/* config USART1 clock */
;;;2167   	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
000002  2101              MOVS     r1,#1
000004  b088              SUB      sp,sp,#0x20           ;2162
000006  0488              LSLS     r0,r1,#18
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;2168   //    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE); //?? GPIOA ??
;;;2169       
;;;2170   	GPIO_PinAFConfig(GPIOD,GPIO_PinSource8,GPIO_AF_USART3);
00000c  4c2a              LDR      r4,|L25.184|
00000e  2207              MOVS     r2,#7
000010  2108              MOVS     r1,#8
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2171   	GPIO_PinAFConfig(GPIOD,GPIO_PinSource9,GPIO_AF_USART3);
000018  2207              MOVS     r2,#7
00001a  2109              MOVS     r1,#9
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2172       
;;;2173   
;;;2174       
;;;2175       
;;;2176   	/* USART1 GPIO config */
;;;2177   	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;2178   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
000022  15a0              ASRS     r0,r4,#22
;;;2179   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000024  2502              MOVS     r5,#2
000026  9004              STR      r0,[sp,#0x10]
000028  f88d5014          STRB     r5,[sp,#0x14]
;;;2180   //     GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //??????
;;;2181   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00002c  f88d5015          STRB     r5,[sp,#0x15]
;;;2182   	GPIO_Init(GPIOD, &GPIO_InitStructure);    
000030  a904              ADD      r1,sp,#0x10
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       GPIO_Init
;;;2183   	/* Configure USART1 Rx (PA.10) as input floating */
;;;2184   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
000038  1560              ASRS     r0,r4,#21
;;;2185       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00003a  9004              STR      r0,[sp,#0x10]
00003c  f88d5014          STRB     r5,[sp,#0x14]
;;;2186   	GPIO_Init(GPIOD, &GPIO_InitStructure);
000040  a904              ADD      r1,sp,#0x10
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       GPIO_Init
;;;2187       
;;;2188   
;;;2189   	
;;;2190   	/* USART1 mode config */
;;;2191   	USART_InitStructure.USART_BaudRate = 9600;
;;;2192   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000048  2400              MOVS     r4,#0
00004a  f44f5016          MOV      r0,#0x2580            ;2191
00004e  9000              STR      r0,[sp,#0]
;;;2193   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2194   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000050  f8ad4008          STRH     r4,[sp,#8]
;;;2195   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2196   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000054  200c              MOVS     r0,#0xc
;;;2197   	USART_Init(USART3, &USART_InitStructure);
000056  4e19              LDR      r6,|L25.188|
000058  f8ad4004          STRH     r4,[sp,#4]            ;2192
00005c  f8ad000a          STRH     r0,[sp,#0xa]          ;2196
000060  f8ad4006          STRH     r4,[sp,#6]            ;2193
000064  f8ad400c          STRH     r4,[sp,#0xc]          ;2195
000068  4669              MOV      r1,sp
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       USART_Init
;;;2198       
;;;2199   
;;;2200   	
;;;2201   	/******????????******************/
;;;2202   	USART_ITConfig(USART3, USART_IT_IDLE, ENABLE);
000070  2201              MOVS     r2,#1
000072  f2404124          MOV      r1,#0x424
000076  4630              MOV      r0,r6
000078  f7fffffe          BL       USART_ITConfig
00007c  f44f60e0          MOV      r0,#0x700
000080  f7fffffe          BL       NVIC_PriorityGroupConfig
000084  2027              MOVS     r0,#0x27
000086  f88d0018          STRB     r0,[sp,#0x18]
00008a  f88d4019          STRB     r4,[sp,#0x19]
00008e  f88d501a          STRB     r5,[sp,#0x1a]
000092  2001              MOVS     r0,#1
000094  f88d001b          STRB     r0,[sp,#0x1b]
000098  a806              ADD      r0,sp,#0x18
00009a  f7fffffe          BL       NVIC_Init
;;;2203   	USART3_NVIC_Config();//??????
;;;2204   	USART3_DMA_init();
00009e  f7fffffe          BL       USART3_DMA_init
;;;2205   	USART_Cmd(USART3, ENABLE);//????1
0000a2  2101              MOVS     r1,#1
0000a4  4630              MOV      r0,r6
0000a6  f7fffffe          BL       USART_Cmd
;;;2206       USART_ClearFlag(USART3, USART_FLAG_TC);
0000aa  2140              MOVS     r1,#0x40
0000ac  4630              MOV      r0,r6
0000ae  f7fffffe          BL       USART_ClearFlag
;;;2207       
;;;2208     
;;;2209       
;;;2210   	
;;;2211   }
0000b2  b008              ADD      sp,sp,#0x20
0000b4  bd70              POP      {r4-r6,pc}
;;;2212   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L25.184|
                          DCD      0x40020c00
                  |L25.188|
                          DCD      0x40004800

                          AREA ||i.USART3_DMA_init||, CODE, READONLY, ALIGN=2

                  USART3_DMA_init PROC
;;;2061   
;;;2062   static void USART3_DMA_init(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2063   {
;;;2064       DMA_InitTypeDef DMA_InitStructure;
;;;2065       NVIC_InitTypeDef NVIC_InitStructure;
;;;2066   	
;;;2067   	//串口3使用DMA1 发送为数据流3  通道4   
;;;2068       //F4与F1DMA多了一个数据流的说法详细参考中文数据手册DMA 表35
;;;2069       /* 1.使能DMA2时钟 */
;;;2070   	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
000004  2101              MOVS     r1,#1
000006  b091              SUB      sp,sp,#0x44           ;2063
000008  0548              LSLS     r0,r1,#21
00000a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;2071   	
;;;2072   	//串口发送DMA配置
;;;2073       /* 2.配置使用DMA发送数据 */
;;;2074       DMA_DeInit(DMA1_Stream3); //DMA1 数据流 3
00000e  f8dfa0d8          LDR      r10,|L26.232|
000012  4650              MOV      r0,r10
000014  f7fffffe          BL       DMA_DeInit
;;;2075       DMA_InitStructure.DMA_Channel = DMA_Channel_4;  /* 配置DMA1通道4 */
000018  f04f6600          MOV      r6,#0x8000000
;;;2076       DMA_InitStructure.DMA_PeripheralBaseAddr  = (uint32_t)(&(USART3->DR)); /* 目的 */
;;;2077       DMA_InitStructure.DMA_Memory0BaseAddr     = (uint32_t)MasterSendbuf; /*源内存地址*/
00001c  4834              LDR      r0,|L26.240|
00001e  4f33              LDR      r7,|L26.236|
000020  9600              STR      r6,[sp,#0]
000022  e9cd7001          STRD     r7,r0,[sp,#4]
;;;2078       DMA_InitStructure.DMA_DIR                 = DMA_DIR_MemoryToPeripheral;  /*方向内            
;;;2079                                                                               存到外设*/
;;;2080       DMA_InitStructure.DMA_BufferSize          = MAXRxTxLen;                    
;;;2081       /* 长度 */                  
;;;2082       DMA_InitStructure.DMA_PeripheralInc       = DMA_PeripheralInc_Disable;    
000026  2400              MOVS     r4,#0
000028  2040              MOVS     r0,#0x40              ;2078
00002a  f04f0880          MOV      r8,#0x80              ;2080
;;;2083       /* 外设地址是否自增 */
;;;2084       DMA_InitStructure.DMA_MemoryInc           = DMA_MemoryInc_Enable;        
00002e  f44f6980          MOV      r9,#0x400
000032  9003              STR      r0,[sp,#0xc]
000034  e9cd8404          STRD     r8,r4,[sp,#0x10]
000038  e9cd9406          STRD     r9,r4,[sp,#0x18]
;;;2085       /* 内存地址是否自增 */
;;;2086       DMA_InitStructure.DMA_PeripheralDataSize  = DMA_PeripheralDataSize_Byte;  
;;;2087       /* 目的数据带宽 */
;;;2088       DMA_InitStructure.DMA_MemoryDataSize      = DMA_MemoryDataSize_Byte;      
;;;2089       /* 源数据宽度 */
;;;2090       DMA_InitStructure.DMA_Mode                = DMA_Mode_Normal;             
;;;2091       /* 单次传输模式/循环传输模式 */
;;;2092       DMA_InitStructure.DMA_Priority            = DMA_Priority_High;             
00003c  02c0              LSLS     r0,r0,#11
00003e  9408              STR      r4,[sp,#0x20]
000040  e9cd4009          STRD     r4,r0,[sp,#0x24]
;;;2093       /* DMA优先级 */
;;;2094       DMA_InitStructure.DMA_FIFOMode            = DMA_FIFOMode_Disable;          
;;;2095       /* FIFO模式/直接模式 */
;;;2096       DMA_InitStructure.DMA_FIFOThreshold       = DMA_FIFOThreshold_HalfFull; 
000044  2501              MOVS     r5,#1
000046  e9cd450b          STRD     r4,r5,[sp,#0x2c]
;;;2097       /* FIFO大小 */
;;;2098       DMA_InitStructure.DMA_MemoryBurst         = DMA_MemoryBurst_Single;      
;;;2099        /* 单次传输 */
;;;2100       DMA_InitStructure.DMA_PeripheralBurst     = DMA_PeripheralBurst_Single;
00004a  940d              STR      r4,[sp,#0x34]
;;;2101       /* 3. 配置DMA */
;;;2102       DMA_Init(DMA1_Stream3, &DMA_InitStructure);
00004c  4669              MOV      r1,sp
00004e  4650              MOV      r0,r10
000050  940e              STR      r4,[sp,#0x38]
000052  f7fffffe          BL       DMA_Init
;;;2103       /* 4.使能DMA中断 */
;;;2104       DMA_ITConfig(DMA1_Stream3, DMA_IT_TC, ENABLE);
000056  2201              MOVS     r2,#1
000058  2110              MOVS     r1,#0x10
00005a  4650              MOV      r0,r10
00005c  f7fffffe          BL       DMA_ITConfig
;;;2105       /* 5.使能串口的DMA发送接口 */
;;;2106       USART_DMACmd(USART3, USART_DMAReq_Tx, ENABLE);
000060  f1a70b04          SUB      r11,r7,#4
000064  2201              MOVS     r2,#1
000066  2180              MOVS     r1,#0x80
000068  4658              MOV      r0,r11
00006a  f7fffffe          BL       USART_DMACmd
;;;2107       /* 6. 配置DMA中断优先级 */
;;;2108       NVIC_InitStructure.NVIC_IRQChannel                   = DMA1_Stream3_IRQn;  
00006e  200e              MOVS     r0,#0xe
000070  f88d003c          STRB     r0,[sp,#0x3c]
;;;2109       //  DMA发生中断         
;;;2110       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;          
000074  f88d403d          STRB     r4,[sp,#0x3d]
;;;2111       NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 4; 
000078  2004              MOVS     r0,#4
00007a  f88d003e          STRB     r0,[sp,#0x3e]
;;;2112       NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;
00007e  f88d503f          STRB     r5,[sp,#0x3f]
;;;2113       NVIC_Init(&NVIC_InitStructure);
000082  a80f              ADD      r0,sp,#0x3c
000084  f7fffffe          BL       NVIC_Init
;;;2114   	
;;;2115       /* 7.不使能DMA */                  
;;;2116       DMA_Cmd(DMA1_Stream3, DISABLE);// 数据流2
000088  2100              MOVS     r1,#0
00008a  4650              MOV      r0,r10
00008c  f7fffffe          BL       DMA_Cmd
;;;2117   	//************************DMA接收***********************//
;;;2118   	/* 2.配置使用DMA接收数据 */
;;;2119       DMA_DeInit(DMA1_Stream1); 
000090  f8dfa054          LDR      r10,|L26.232|
000094  f1aa0a30          SUB      r10,r10,#0x30
000098  4650              MOV      r0,r10
00009a  f7fffffe          BL       DMA_DeInit
;;;2120       DMA_InitStructure.DMA_Channel             = DMA_Channel_4;               
;;;2121       /* 配置DMA通道 */
;;;2122       DMA_InitStructure.DMA_PeripheralBaseAddr  = (uint32_t)(&(USART3->DR));   
;;;2123       /* 源地址 */
;;;2124       DMA_InitStructure.DMA_Memory0BaseAddr     = (uint32_t)MasterRecbuf;    
00009e  4814              LDR      r0,|L26.240|
0000a0  a902              ADD      r1,sp,#8
0000a2  3080              ADDS     r0,r0,#0x80
0000a4  e8810111          STM      r1,{r0,r4,r8}
0000a8  e9cd4905          STRD     r4,r9,[sp,#0x14]
;;;2125       /* 目标地址 */
;;;2126       DMA_InitStructure.DMA_DIR                 = DMA_DIR_PeripheralToMemory;    
;;;2127       /* 方向外设向内存  */
;;;2128       DMA_InitStructure.DMA_BufferSize          = MAXRxTxLen;                    		
;;;2129       /* 长度 */                  
;;;2130       DMA_InitStructure.DMA_PeripheralInc       = DMA_PeripheralInc_Disable;    
;;;2131         /* 外设地址是否自增 */
;;;2132       DMA_InitStructure.DMA_MemoryInc           = DMA_MemoryInc_Enable;         
;;;2133       /* 内存地址是否自增 */
;;;2134       DMA_InitStructure.DMA_PeripheralDataSize  = DMA_MemoryDataSize_Byte;     
;;;2135       /* 目的数据带宽 */
;;;2136       DMA_InitStructure.DMA_MemoryDataSize      = DMA_MemoryDataSize_Byte;      
;;;2137       /* 源数据宽度 */
;;;2138       DMA_InitStructure.DMA_Mode                = DMA_Mode_Circular;             
0000ac  0228              LSLS     r0,r5,#8
0000ae  e9cd4008          STRD     r4,r0,[sp,#0x20]
;;;2139       /*循环传输模式 */
;;;2140       DMA_InitStructure.DMA_Priority            = DMA_Priority_VeryHigh;        
0000b2  a90a              ADD      r1,sp,#0x28
0000b4  9407              STR      r4,[sp,#0x1c]         ;2138
0000b6  f44f3040          MOV      r0,#0x30000
0000ba  e8810031          STM      r1,{r0,r4,r5}
;;;2141       /* DMA优先级 */
;;;2142       DMA_InitStructure.DMA_FIFOMode            = DMA_FIFOMode_Disable;         
;;;2143        /* FIFO模式/直接模式 */
;;;2144       DMA_InitStructure.DMA_FIFOThreshold       = DMA_FIFOThreshold_HalfFull; 
;;;2145       /* FIFO大小 */
;;;2146       DMA_InitStructure.DMA_MemoryBurst         = DMA_MemoryBurst_Single;       
;;;2147       /* 单次传输 */
;;;2148       DMA_InitStructure.DMA_PeripheralBurst     = DMA_PeripheralBurst_Single;
0000be  940d              STR      r4,[sp,#0x34]
;;;2149       /* 3. 配置DMA */
;;;2150       DMA_Init(DMA1_Stream1, &DMA_InitStructure);
0000c0  4669              MOV      r1,sp
0000c2  4650              MOV      r0,r10
0000c4  940e              STR      r4,[sp,#0x38]
0000c6  e9cd6700          STRD     r6,r7,[sp,#0]
0000ca  f7fffffe          BL       DMA_Init
;;;2151       /* 4.由于接收不需要DMA中断，故不设置DMA中断 */
;;;2152       /* 5.使能串口的DMA接收 */
;;;2153       USART_DMACmd(USART3,USART_DMAReq_Rx,ENABLE);
0000ce  2201              MOVS     r2,#1
0000d0  2140              MOVS     r1,#0x40
0000d2  4658              MOV      r0,r11
0000d4  f7fffffe          BL       USART_DMACmd
;;;2154       /* 6. 由于接收不需要DMA中断，故不能配置DMA中断优先级 */
;;;2155       /* 7.使能DMA */ 
;;;2156       DMA_Cmd(DMA1_Stream1,ENABLE);
0000d8  2101              MOVS     r1,#1
0000da  4650              MOV      r0,r10
0000dc  f7fffffe          BL       DMA_Cmd
;;;2157   }
0000e0  b011              ADD      sp,sp,#0x44
0000e2  e8bd8ff0          POP      {r4-r11,pc}
;;;2158   
                          ENDP

0000e6  0000              DCW      0x0000
                  |L26.232|
                          DCD      0x40026058
                  |L26.236|
                          DCD      0x40004804
                  |L26.240|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;2238   
;;;2239   void USART3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2240   {
;;;2241       u8 Clear = Clear;
;;;2242       u16 num = 0;
;;;2243            
;;;2244       if(USART_GetITStatus(USART3, USART_IT_IDLE) != RESET)
000002  4c18              LDR      r4,|L27.100|
000004  f2404124          MOV      r1,#0x424
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USART_GetITStatus
00000e  2800              CMP      r0,#0
000010  d024              BEQ      |L27.92|
;;;2245       {
;;;2246           Clear = USART3->SR;  //读SR寄存器清除                                                            
000012  8820              LDRH     r0,[r4,#0]
;;;2247          
;;;2248           Clear = USART3->DR;  //读DR寄存器清除                                                        
000014  1d20              ADDS     r0,r4,#4
000016  8800              LDRH     r0,[r0,#0]
;;;2249           DMA_Cmd(DMA1_Stream1,DISABLE);   //关闭DMA
000018  4d13              LDR      r5,|L27.104|
00001a  2100              MOVS     r1,#0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       DMA_Cmd
;;;2250   		DMA_ClearFlag(DMA1_Stream1,DMA_FLAG_TCIF2);
000022  f04f5181          MOV      r1,#0x10200000
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       DMA_ClearFlag
;;;2251           num = DMA_GetCurrDataCounter(DMA1_Stream1); //得到真正接收数据个数
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       DMA_GetCurrDataCounter
;;;2252           if(num < MAXRxTxLen)
;;;2253           {
;;;2254               USART3_Recive_leng   = MAXRxTxLen - num;
000032  4c0e              LDR      r4,|L27.108|
000034  2880              CMP      r0,#0x80              ;2252
000036  d212              BCS      |L27.94|
000038  f1c00080          RSB      r0,r0,#0x80
00003c  b2c0              UXTB     r0,r0
00003e  7020              STRB     r0,[r4,#0]
;;;2255           }else
;;;2256           {
;;;2257               USART3_Recive_leng = MAXRxTxLen;
;;;2258           }
;;;2259            
;;;2260           if(USART3_Recive_leng > MAXRxTxLen)
000040  2880              CMP      r0,#0x80
000042  d901              BLS      |L27.72|
;;;2261           {
;;;2262               USART3_Recive_leng = 0;  //避免接收数据超界                                               
000044  2000              MOVS     r0,#0
                  |L27.70|
000046  7020              STRB     r0,[r4,#0]            ;2257
                  |L27.72|
;;;2263           }
;;;2264           DMA_SetCurrDataCounter(DMA1_Stream1,MAXRxTxLen);//设置DMA传输长度                                                        
000048  2180              MOVS     r1,#0x80
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       DMA_SetCurrDataCounter
;;;2265           DMA_Cmd(DMA1_Stream1,ENABLE);  //开启DMA
000050  2101              MOVS     r1,#1
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       DMA_Cmd
;;;2266           USART3_Recive_flg = 1;    //数据接收成功                                                  
000058  2001              MOVS     r0,#1
00005a  7060              STRB     r0,[r4,#1]
                  |L27.92|
;;;2267           
;;;2268       } 
;;;2269   }
00005c  bd70              POP      {r4-r6,pc}
                  |L27.94|
00005e  2080              MOVS     r0,#0x80              ;2257
000060  e7f1              B        |L27.70|
;;;2270   
                          ENDP

000062  0000              DCW      0x0000
                  |L27.100|
                          DCD      0x40004800
                  |L27.104|
                          DCD      0x40026028
                  |L27.108|
                          DCD      ||.data||

                          AREA ||i.USART_Configuration||, CODE, READONLY, ALIGN=2

                  USART_Configuration PROC
;;;1955   
;;;1956   void USART_Configuration(void)//串口初始化函数
000000  b570              PUSH     {r4-r6,lr}
;;;1957   {  
000002  b088              SUB      sp,sp,#0x20
;;;1958   	GPIO_InitTypeDef GPIO_InitStructure;
;;;1959   	USART_InitTypeDef USART_InitStructure;
;;;1960   	
;;;1961   	/* config USART1 clock */
;;;1962   	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
000004  2101              MOVS     r1,#1
000006  2010              MOVS     r0,#0x10
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;1963   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1);
00000c  4e2a              LDR      r6,|L28.184|
00000e  2207              MOVS     r2,#7
000010  2109              MOVS     r1,#9
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;1964   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1);
000018  2207              MOVS     r2,#7
00001a  210a              MOVS     r1,#0xa
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;1965   	/* USART1 GPIO config */
;;;1966   	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;1967   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
;;;1968   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000022  2502              MOVS     r5,#2
000024  1570              ASRS     r0,r6,#21             ;1967
000026  f88d5004          STRB     r5,[sp,#4]
;;;1969   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
00002c  9000              STR      r0,[sp,#0]            ;1968
00002e  f88d4006          STRB     r4,[sp,#6]
;;;1970   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f88d5005          STRB     r5,[sp,#5]
;;;1971   	GPIO_Init(GPIOA, &GPIO_InitStructure);    
000036  4669              MOV      r1,sp
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GPIO_Init
;;;1972   	/* Configure USART1 Rx (PA.10) as input floating */
;;;1973   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
00003e  0268              LSLS     r0,r5,#9
;;;1974   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000040  9000              STR      r0,[sp,#0]
000042  f88d5004          STRB     r5,[sp,#4]
;;;1975   	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;1976   	
;;;1977   	/* USART1 mode config */
;;;1978   	USART_InitStructure.USART_BaudRate = 9600;
00004e  f44f5016          MOV      r0,#0x2580
;;;1979   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000052  9002              STR      r0,[sp,#8]
;;;1980   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;1981   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000054  f8ad4010          STRH     r4,[sp,#0x10]
;;;1982   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;1983   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
;;;1984   	USART_Init(USART1, &USART_InitStructure);
00005a  4d18              LDR      r5,|L28.188|
00005c  f8ad400c          STRH     r4,[sp,#0xc]          ;1979
000060  f8ad0012          STRH     r0,[sp,#0x12]         ;1983
000064  f8ad400e          STRH     r4,[sp,#0xe]          ;1980
000068  f8ad4014          STRH     r4,[sp,#0x14]         ;1982
00006c  a902              ADD      r1,sp,#8
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       USART_Init
;;;1985   	
;;;1986   	/******使能串口接收中断******************/
;;;1987   	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	
000074  2201              MOVS     r2,#1
000076  f2405125          MOV      r1,#0x525
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_ITConfig
;;;1988   	USART_Cmd(USART1, ENABLE);//使能串口1
000080  2101              MOVS     r1,#1
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USART_Cmd
;;;1989   	USART_ClearFlag(USART1, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       USART_ClearFlag
000090  f44f60e0          MOV      r0,#0x700
000094  f7fffffe          BL       NVIC_PriorityGroupConfig
000098  2025              MOVS     r0,#0x25
00009a  f88d0018          STRB     r0,[sp,#0x18]
00009e  f88d4019          STRB     r4,[sp,#0x19]
0000a2  2004              MOVS     r0,#4
0000a4  f88d001a          STRB     r0,[sp,#0x1a]
0000a8  2001              MOVS     r0,#1
0000aa  f88d001b          STRB     r0,[sp,#0x1b]
0000ae  a806              ADD      r0,sp,#0x18
0000b0  f7fffffe          BL       NVIC_Init
;;;1990     
;;;1991   	USART1_NVIC_Config();//串口中断配置
;;;1992   }			
0000b4  b008              ADD      sp,sp,#0x20
0000b6  bd70              POP      {r4-r6,pc}
;;;1993   
                          ENDP

                  |L28.184|
                          DCD      0x40020000
                  |L28.188|
                          DCD      0x40011000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UART_Buffer_Rece
                          %        16

                          AREA ||area_number.31||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.31||, ||.bss||
                  UART_Buffer_Send
                          %        20
                  USART_RX_BUF
                          %        200
                  MasterSendbuf
                          %        128
                  MasterRecbuf
                          %        128

                          AREA ||.data||, DATA, ALIGN=2

                  USART3_Recive_leng
000000  00                DCB      0x00
                  USART3_Recive_flg
000001  00                DCB      0x00
                  UART_Buffer_Send_pointer
000002  00                DCB      0x00
                  |symbol_number.103|
000003  00                DCB      0x00
                  Transmit_BUFFERsize
000004  00                DCB      0x00
                  MODE
000005  00                DCB      0x00
                  mainswitch
000006  00                DCB      0x00
                  Rraly
000007  00                DCB      0x00
                  sendwait
000008  00                DCB      0x00
                  listsend
000009  00                DCB      0x00
                  USART_RX_STA
00000a  0000              DCW      0x0000
                  USART_RX_CNT
00000c  0000              DCW      0x0000
00000e  0000              DCB      0x00,0x00
                  ||x1||
                          DCD      0x00000000
                  ||y1||
                          DCD      0x00000000
                  ||x2||
                          DCD      0x00000000
                  ||y2||
                          DCD      0x00000000
                  ||x3||
                          DCD      0x00000000
                  ||y3||
                          DCD      0x00000000
                  ||x4||
                          DCD      0x00000000
                  ||y4||
                          DCD      0x00000000
                  watchtest
                          DCD      0x00000000
                  CmdStr
000034  53544154          DCB      0x53,0x54,0x41,0x54
000038  55535f00          DCB      0x55,0x53,0x5f,0x00
00003c  004d4f44          DCB      0x00,0x4d,0x4f,0x44
000040  5f000000          DCB      0x5f,0x00,0x00,0x00
000044  00005452          DCB      0x00,0x00,0x54,0x52
000048  49475f00          DCB      0x49,0x47,0x5f,0x00
00004c  00000053          DCB      0x00,0x00,0x00,0x53
000050  45545041          DCB      0x45,0x54,0x50,0x41
000054  52415f00          DCB      0x52,0x41,0x5f,0x00
000058  5345544c          DCB      0x53,0x45,0x54,0x4c
00005c  4953545f          DCB      0x49,0x53,0x54,0x5f
000060  00504f57          DCB      0x00,0x50,0x4f,0x57
000064  565f0000          DCB      0x56,0x5f,0x00,0x00
000068  0000504f          DCB      0x00,0x00,0x50,0x4f
00006c  57495f00          DCB      0x57,0x49,0x5f,0x00
000070  00000041          DCB      0x00,0x00,0x00,0x41
000074  4443565f          DCB      0x44,0x43,0x56,0x5f
000078  00000000          DCB      0x00,0x00,0x00,0x00
00007c  4c4f5749          DCB      0x4c,0x4f,0x57,0x49
000080  5f000000          DCB      0x5f,0x00,0x00,0x00
000084  00484f52          DCB      0x00,0x48,0x4f,0x52
000088  4c5f0000          DCB      0x4c,0x5f,0x00,0x00
00008c  00004c56          DCB      0x00,0x00,0x4c,0x56
000090  4c5f0000          DCB      0x4c,0x5f,0x00,0x00
000094  00000053          DCB      0x00,0x00,0x00,0x53
000098  57495443          DCB      0x57,0x49,0x54,0x43
00009c  485f0000          DCB      0x48,0x5f,0x00,0x00
0000a0  43414c56          DCB      0x43,0x41,0x4c,0x56
0000a4  5f000000          DCB      0x5f,0x00,0x00,0x00
0000a8  0043414c          DCB      0x00,0x43,0x41,0x4c
0000ac  495f0000          DCB      0x49,0x5f,0x00,0x00
0000b0  00004341          DCB      0x00,0x00,0x43,0x41
0000b4  4c525f00          DCB      0x4c,0x52,0x5f,0x00
0000b8  00000044          DCB      0x00,0x00,0x00,0x44
0000bc  41435f00          DCB      0x41,0x43,0x5f,0x00
0000c0  00000000          DCB      0x00,0x00,0x00,0x00
0000c4  4f564552          DCB      0x4f,0x56,0x45,0x52
0000c8  5f000000          DCB      0x5f,0x00,0x00,0x00
0000cc  0054454d          DCB      0x00,0x54,0x45,0x4d
0000d0  505f0000          DCB      0x50,0x5f,0x00,0x00
0000d4  0000424f          DCB      0x00,0x00,0x42,0x4f
0000d8  4f545f00          DCB      0x4f,0x54,0x5f,0x00
0000dc  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.34||, DATA, ALIGN=0

                          EXPORTAS ||area_number.34||, ||.data||
                  UART_Buffer_Size
000000  00                DCB      0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  t_USART
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.data||
                  powsetdelay
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\drive\\usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REV16|
#line 129 "E:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_usart_c_7cc17ae7____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REVSH|
#line 144
|__asm___7_usart_c_7cc17ae7____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
