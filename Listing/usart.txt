; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\usart.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\usart.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=525 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\usart.crf --no_multibyte_chars ..\drive\usart.c]
                          THUMB

                          AREA ||i.CalHandle||, CODE, READONLY, ALIGN=2

                  CalHandle PROC
;;;482    //校准处理
;;;483    void CalHandle(u8 mode,u8 range,u32 data)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;484    {
;;;485    	if(mode == 0)//测量电压
;;;486    	{
;;;487    		if(range == 0)//低档位低段
;;;488    		{
;;;489    			calflag = 1;
;;;490    			LOAD_V_SW = 0;
;;;491    			x1 = Vmon_Load_value;
000004  4dfc              LDR      r5,|L1.1016|
;;;492    			y1 = data;
;;;493    		}else if(range == 1){//低档位高段
;;;494    			x2 = Vmon_Load_value;
;;;495    			y2 = data;
;;;496    			CalPara.TestLV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;497    			CalPara.OffsetLV[0] = (float)y2 - CalPara.TestLV[0]*(float)x2;
;;;498    			
;;;499    			Flag_DAC_OFF=0;
000006  f8dfc3f8          LDR      r12,|L1.1024|
00000a  4614              MOV      r4,r2                 ;484
00000c  2300              MOVS     r3,#0                 ;484
00000e  f8dc2000          LDR      r2,[r12,#0]
000012  4ef7              LDR      r6,|L1.1008|
000014  f8df93dc          LDR      r9,|L1.1012|
000018  f8df83e0          LDR      r8,|L1.1020|
;;;500    			calflag = 0;
;;;501    		}else if(range == 2){//高档位低段
;;;502    			calflag = 1;
;;;503    			LOAD_V_SW = 1;
;;;504    			x1 = Vmon_Load_value;
;;;505    			y1 = data;
;;;506    		}else if(range == 3){//高档位高段
;;;507    			
;;;508    			x2 = Vmon_Load_value;
;;;509    			y2 = data;
;;;510    			CalPara.TestLV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;511    			CalPara.OffsetLV[1] = (float)y2 - CalPara.TestLV[1]*(float)x2;
;;;512    				//参数写进FLASH
;;;513    			Flag_DAC_OFF=0;
;;;514    			calflag = 0;
;;;515    		}else if(range == 4){//电源控制电压和测量1
;;;516    			calflag = 1;
;;;517    			Contr_Voltage = 3500;
00001c  f8dfe3e4          LDR      lr,|L1.1028|
;;;518    			Contr_Current = 5000;
000020  f8dfb3e4          LDR      r11,|L1.1032|
;;;519    			OnOff_GPOI_ResetSet(0,1);
;;;520    		}else if(range == 5){//电源控制电压和测量2
;;;521    			x1 = data;
;;;522    			y1 = Contr_Voltage;
;;;523    			x3 = Vmon_POWE_value;
;;;524    			y3 = data;
;;;525    			Contr_Voltage = 10000;
;;;526    			Contr_Current = 5000;
;;;527    		}else if(range == 6){//电源控制电压和测量3
;;;528    			x2 = data;
;;;529    			y2 = Contr_Voltage;
;;;530    			x4 = Vmon_POWE_value;
;;;531    			y4 = data;
;;;532    			
;;;533    			CalPara.SetPV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;534    			CalPara.OffsetSetPV[0] = (float)y2 - CalPara.SetPV[0]*(float)x2;
;;;535    			
;;;536    			CalPara.TestPV[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;537    			CalPara.OffsetPV[0] = (float)y4 - CalPara.TestPV[0]*(float)x4;
;;;538    			
;;;539    			Flag_DAC_OFF=0;
;;;540    			calflag = 0;
;;;541    			Off_GPOI_ResetSet();
;;;542    		}else if(range == 7){//CV控制低档1
;;;543    			LOAD_MODE = 1;
;;;544    			LOAD_V_SW=0;
;;;545    			GPIO_ResetBits(GPIOB,GPIO_Pin_1);//电压档位为低档
;;;546    			calflag = 1;
;;;547    			Contr_Laod = 1000;
000024  f8dfa3e4          LDR      r10,|L1.1036|
000028  edd50a04          VLDR     s1,[r5,#0x10]         ;491
00002c  ed950a05          VLDR     s0,[r5,#0x14]         ;491
000030  edd51a08          VLDR     s3,[r5,#0x20]         ;491
000034  ed951a09          VLDR     s2,[r5,#0x24]         ;491
000038  2701              MOVS     r7,#1                 ;489
00003a  f0220208          BIC      r2,r2,#8              ;499
00003e  b120              CBZ      r0,|L1.74|
;;;548    			OnOff_GPOI_ResetSet(2,1);
;;;549    		}else if(range == 8){//CV控制低档2
;;;550    			LOAD_MODE = 1;
;;;551    			LOAD_V_SW=0;
;;;552    			GPIO_ResetBits(GPIOB,GPIO_Pin_1);//电压档位为低档
;;;553    			x1 = data;
;;;554    			y1 = Contr_Laod;
;;;555    			Contr_Laod = 8000;
;;;556    //			OnOff_GPOI_ResetSet(2,1);
;;;557    		}else if(range == 9){//CV控制低档3
;;;558    			x2 = data;
;;;559    			y2 = Contr_Laod;
;;;560    			CalPara.SetCV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;561    			CalPara.OffsetCV[0] = (float)y2 - CalPara.SetCV[0]*(float)x2;
;;;562    				//参数写进FLASH
;;;563    			Flag_DAC_OFF=0;
;;;564    			calflag = 0;
;;;565    			Off_GPOI_ResetSet();
;;;566    		}else if(range == 10){//CV控制高档1
;;;567    			LOAD_MODE = 1;
;;;568    			LOAD_V_SW=1;
;;;569    			GPIO_SetBits(GPIOB,GPIO_Pin_1);//电压档位为高档
;;;570    			calflag = 1;
;;;571    			Contr_Laod = 1000;
;;;572    			OnOff_GPOI_ResetSet(2,1);
;;;573    		}else if(range == 11){//CV控制高档2
;;;574    			LOAD_MODE = 1;
;;;575    			LOAD_V_SW=1;
;;;576    			GPIO_SetBits(GPIOB,GPIO_Pin_1);//电压档位为高档
;;;577    			x1 = data;
;;;578    			y1 = Contr_Laod;
;;;579    			Contr_Laod = 8000;
;;;580    //			OnOff_GPOI_ResetSet(2,1);
;;;581    		}else if(range == 12){//CV控制高档3
;;;582    			x2 = data;
;;;583    			y2 = Contr_Laod;
;;;584    			CalPara.SetCV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;585    			CalPara.OffsetCV[1] = (float)y2 - CalPara.SetCV[1]*(float)x2;
;;;586    				//参数写进FLASH
;;;587    			Flag_DAC_OFF=0;
;;;588    			calflag = 0;
;;;589    			Off_GPOI_ResetSet();
;;;590    		}
;;;591    	}else if(mode == 1){
000040  2801              CMP      r0,#1
000042  d073              BEQ      |L1.300|
;;;592    		if(range == 0)//负载电流低档位1
;;;593    		{		
;;;594    			LOAD_I_SW = 0;
;;;595    			Contr_Laod = 7000;
;;;596    			calflag = 1;
;;;597    			OnOff_GPOI_ResetSet(2,1);
;;;598    		}
;;;599    		else if(range == 1)//负载电流低档位2
;;;600    		{
;;;601    			LOAD_I_SW = 0;			
;;;602    			x1 = data;
;;;603    			y1 = Contr_Laod;
;;;604    			x3 = Imon_Load_value;
;;;605    			y3 = data;
;;;606    			Contr_Laod = 56000;
;;;607    		}else if(range == 2){//负载电流低档位3
;;;608    			
;;;609    			x2 = data;
;;;610    			y2 = Contr_Laod;
;;;611    			x4 = Imon_Load_value;
;;;612    			y4 = data;
;;;613    			
;;;614    			CalPara.SetLC[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;615    			CalPara.OffsetLC[0] = (float)y2 - CalPara.SetLC[0]*(float)x2;
;;;616    			
;;;617    			CalPara.TestLC[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;618    			CalPara.OffsetTestLC[0] = (float)y4 - CalPara.TestLC[0]*(float)x4;
;;;619    				
;;;620    			Flag_DAC_OFF =0;
;;;621    			calflag = 0;
;;;622    			Off_GPOI_ResetSet();
;;;623    		}else if(range == 3){//负载电流高档位1
;;;624    			LOAD_I_SW = 1;
;;;625    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;626    			Contr_Laod = 8000;
;;;627    			calflag = 1;
;;;628    			OnOff_GPOI_ResetSet(2,1);
;;;629    		}else if(range == 4){//负载电流高档位2
;;;630    			
;;;631    			LOAD_I_SW = 1;
;;;632    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;633    			x1 = data;
;;;634    			y1 = Contr_Laod;
;;;635    			x3 = Imon_Load_value;
;;;636    			y3 = data;
;;;637    			Contr_Laod = 33000;
;;;638    		}else if(range == 5){//负载电流高档位3
;;;639    			
;;;640    			x2 = data;
;;;641    			y2 = Contr_Laod;
;;;642    			x4 = Imon_Load_value;
;;;643    			y4 = data;
;;;644    			
;;;645    			CalPara.SetLC[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;646    			CalPara.OffsetLC[1] = (float)y2 - CalPara.SetLC[1]*(float)x2;
;;;647    			
;;;648    			CalPara.TestLC[1] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;649    			CalPara.OffsetTestLC[1] = (float)y4 - CalPara.TestLC[1]*(float)x4;
;;;650    				
;;;651    			Flag_DAC_OFF =0;
;;;652    			calflag = 0;
;;;653    			Off_GPOI_ResetSet();
;;;654    		}else if(range == 6){//电源电流1
;;;655    			Contr_Voltage = 3500;
;;;656    			Contr_Current = 4000;
;;;657    			calflag = 1;
;;;658    			OnOff_GPOI_ResetSet(0,1);
;;;659    		}else if(range == 7){//电源电流2
;;;660    			
;;;661    			x1 = data;
;;;662    			y1 = Contr_Current;
;;;663    			x3 = Imon_POWE_value;
;;;664    			y3 = data;
;;;665    			Contr_Voltage = 3500;
;;;666    			Contr_Current = 14000;
;;;667    		}else if(range == 8){//电源电流3
;;;668    			
;;;669    			x2 = data;
;;;670    			y2 = Contr_Current;
;;;671    			x4 = Imon_POWE_value;
;;;672    			y4 = data;
;;;673    			
;;;674    			CalPara.SetPC[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;675    			CalPara.OffsetPC[0] = (float)y2 - CalPara.SetPC[0]*(float)x2;
;;;676    			
;;;677    			CalPara.TestPC[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;678    			CalPara.OffsetTestPC[0] = (float)y4 - CalPara.TestPC[0]*(float)x4;
;;;679    			
;;;680    			Flag_DAC_OFF=0;
;;;681    			calflag = 0;
;;;682    			Off_GPOI_ResetSet();
;;;683    		}
;;;684    	}else if(mode == 2){
000044  2802              CMP      r0,#2
000046  d072              BEQ      |L1.302|
000048  e3b4              B        |L1.1972|
                  |L1.74|
00004a  48f1              LDR      r0,|L1.1040|
00004c  b1e9              CBZ      r1,|L1.138|
00004e  2901              CMP      r1,#1                 ;493
000050  d01f              BEQ      |L1.146|
000052  2902              CMP      r1,#2                 ;501
000054  d041              BEQ      |L1.218|
000056  2903              CMP      r1,#3                 ;506
000058  d044              BEQ      |L1.228|
00005a  f2413088          MOV      r0,#0x1388            ;518
00005e  2904              CMP      r1,#4                 ;515
000060  d066              BEQ      |L1.304|
000062  2905              CMP      r1,#5                 ;520
000064  d06c              BEQ      |L1.320|
000066  2906              CMP      r1,#6                 ;527
000068  d07f              BEQ      |L1.362|
00006a  48ea              LDR      r0,|L1.1044|
00006c  f44f7b7a          MOV      r11,#0x3e8            ;547
000070  2907              CMP      r1,#7                 ;542
000072  d074              BEQ      |L1.350|
000074  2908              CMP      r1,#8                 ;549
000076  d073              BEQ      |L1.352|
000078  2909              CMP      r1,#9                 ;557
00007a  d072              BEQ      |L1.354|
00007c  290a              CMP      r1,#0xa               ;566
00007e  d071              BEQ      |L1.356|
000080  290b              CMP      r1,#0xb               ;573
000082  d070              BEQ      |L1.358|
000084  290c              CMP      r1,#0xc               ;581
000086  d06f              BEQ      |L1.360|
000088  e394              B        |L1.1972|
                  |L1.138|
00008a  7037              STRB     r7,[r6,#0]            ;489
00008c  f8c9301c          STR      r3,[r9,#0x1c]         ;490  ; Run_Control
000090  e026              B        |L1.224|
                  |L1.146|
000092  8800              LDRH     r0,[r0,#0]            ;494  ; Vmon_Load_value
000094  ee014a10          VMOV     s2,r4                 ;496
000098  eeb80a40          VCVT.F32.U32 s0,s0                 ;496
00009c  eef80a60          VCVT.F32.U32 s1,s1                 ;496
0000a0  eeb81a41          VCVT.F32.U32 s2,s2                 ;496
0000a4  e9c50406          STRD     r0,r4,[r5,#0x18]      ;494
0000a8  ee311a40          VSUB.F32 s2,s2,s0              ;496
0000ac  ee000a10          VMOV     s0,r0                 ;496
0000b0  eeb80a40          VCVT.F32.U32 s0,s0                 ;496
0000b4  ee700a60          VSUB.F32 s1,s0,s1              ;496
0000b8  ee810a20          VDIV.F32 s0,s2,s1              ;496
0000bc  ee000a90          VMOV     s1,r0                 ;497
0000c0  eeb81a60          VCVT.F32.U32 s2,s1                 ;497
0000c4  ee004a90          VMOV     s1,r4                 ;497
0000c8  eef80a60          VCVT.F32.U32 s1,s1                 ;497
0000cc  ed880a00          VSTR     s0,[r8,#0]            ;496
0000d0  ee400a41          VMLS.F32 s1,s0,s2              ;497
0000d4  edc80a04          VSTR     s1,[r8,#0x10]         ;497
0000d8  e369              B        |L1.1966|
                  |L1.218|
0000da  7037              STRB     r7,[r6,#0]            ;502
0000dc  f8c9701c          STR      r7,[r9,#0x1c]         ;503  ; Run_Control
                  |L1.224|
0000e0  8800              LDRH     r0,[r0,#0]            ;491  ; Vmon_Load_value
0000e2  e2da              B        |L1.1690|
                  |L1.228|
0000e4  8800              LDRH     r0,[r0,#0]            ;508  ; Vmon_Load_value
0000e6  ee014a10          VMOV     s2,r4                 ;510
0000ea  eeb80a40          VCVT.F32.U32 s0,s0                 ;510
0000ee  eef80a60          VCVT.F32.U32 s1,s1                 ;510
0000f2  eeb81a41          VCVT.F32.U32 s2,s2                 ;510
0000f6  e9c50406          STRD     r0,r4,[r5,#0x18]      ;508
0000fa  ee311a40          VSUB.F32 s2,s2,s0              ;510
0000fe  ee000a10          VMOV     s0,r0                 ;510
000102  eeb80a40          VCVT.F32.U32 s0,s0                 ;510
000106  ee700a60          VSUB.F32 s1,s0,s1              ;510
00010a  ee810a20          VDIV.F32 s0,s2,s1              ;510
00010e  ee000a90          VMOV     s1,r0                 ;511
000112  eeb81a60          VCVT.F32.U32 s2,s1                 ;511
000116  ee004a90          VMOV     s1,r4                 ;511
00011a  eef80a60          VCVT.F32.U32 s1,s1                 ;511
00011e  ed880a01          VSTR     s0,[r8,#4]            ;510
000122  ee400a41          VMLS.F32 s1,s0,s2              ;511
000126  edc80a05          VSTR     s1,[r8,#0x14]         ;511
00012a  e340              B        |L1.1966|
                  |L1.300|
00012c  e0dc              B        |L1.744|
                  |L1.302|
00012e  e242              B        |L1.1462|
                  |L1.304|
000130  7037              STRB     r7,[r6,#0]            ;516
000132  f64052ac          MOV      r2,#0xdac             ;517
000136  f8ae2000          STRH     r2,[lr,#0]            ;517
00013a  f8ab0000          STRH     r0,[r11,#0]           ;518
00013e  e1e0              B        |L1.1282|
                  |L1.320|
000140  612c              STR      r4,[r5,#0x10]         ;522  ; x1
000142  f8be2000          LDRH     r2,[lr,#0]            ;522  ; Contr_Voltage
000146  616a              STR      r2,[r5,#0x14]         ;523  ; y1
000148  4ab3              LDR      r2,|L1.1048|
00014a  8812              LDRH     r2,[r2,#0]            ;523  ; Vmon_POWE_value
00014c  e9c52408          STRD     r2,r4,[r5,#0x20]      ;523
000150  f2427210          MOV      r2,#0x2710            ;525
000154  f8ae2000          STRH     r2,[lr,#0]            ;525
000158  4659              MOV      r1,r11                ;526
00015a  e1e2              B        |L1.1314|
00015c  e005              B        |L1.362|
                  |L1.350|
00015e  e04d              B        |L1.508|
                  |L1.352|
000160  e054              B        |L1.524|
                  |L1.354|
000162  e05b              B        |L1.540|
                  |L1.356|
000164  e07f              B        |L1.614|
                  |L1.358|
000166  e08b              B        |L1.640|
                  |L1.360|
000168  e099              B        |L1.670|
                  |L1.362|
00016a  61ac              STR      r4,[r5,#0x18]         ;529  ; x2
00016c  f8be1000          LDRH     r1,[lr,#0]            ;529  ; Contr_Voltage
000170  48a9              LDR      r0,|L1.1048|
000172  61e9              STR      r1,[r5,#0x1c]         ;530  ; y2
000174  8800              LDRH     r0,[r0,#0]            ;530  ; Vmon_POWE_value
000176  ee021a10          VMOV     s4,r1                 ;533
00017a  eeb80a40          VCVT.F32.U32 s0,s0                 ;533
00017e  eef80a60          VCVT.F32.U32 s1,s1                 ;533
000182  eeb82a42          VCVT.F32.U32 s4,s4                 ;533
000186  e9c5040a          STRD     r0,r4,[r5,#0x28]      ;530
00018a  ee322a40          VSUB.F32 s4,s4,s0              ;533
00018e  ee004a10          VMOV     s0,r4                 ;533
000192  eeb80a40          VCVT.F32.U32 s0,s0                 ;533
000196  ee700a60          VSUB.F32 s1,s0,s1              ;533
00019a  ee820a20          VDIV.F32 s0,s4,s1              ;533
00019e  ee004a90          VMOV     s1,r4                 ;534
0001a2  eeb82a60          VCVT.F32.U32 s4,s1                 ;534
0001a6  ee001a90          VMOV     s1,r1                 ;534
0001aa  eef80a60          VCVT.F32.U32 s1,s1                 ;534
0001ae  ed880a02          VSTR     s0,[r8,#8]            ;533
0001b2  ee400a42          VMLS.F32 s1,s0,s4              ;534
0001b6  ee004a10          VMOV     s0,r4                 ;536
0001ba  eeb80a40          VCVT.F32.U32 s0,s0                 ;536
0001be  edc80a06          VSTR     s1,[r8,#0x18]         ;534
0001c2  eef80a41          VCVT.F32.U32 s1,s2                 ;536
0001c6  eeb81a61          VCVT.F32.U32 s2,s3                 ;536
0001ca  ee700a60          VSUB.F32 s1,s0,s1              ;536
0001ce  ee000a10          VMOV     s0,r0                 ;536
0001d2  eeb80a40          VCVT.F32.U32 s0,s0                 ;536
0001d6  ee301a41          VSUB.F32 s2,s0,s2              ;536
0001da  ee800a81          VDIV.F32 s0,s1,s2              ;536
0001de  ee000a90          VMOV     s1,r0                 ;537
0001e2  eeb81a60          VCVT.F32.U32 s2,s1                 ;537
0001e6  ee004a90          VMOV     s1,r4                 ;537
0001ea  eef80a60          VCVT.F32.U32 s1,s1                 ;537
0001ee  ed880a03          VSTR     s0,[r8,#0xc]          ;536
0001f2  ee400a41          VMLS.F32 s1,s0,s2              ;537
0001f6  edc80a07          VSTR     s1,[r8,#0x1c]         ;537
0001fa  e173              B        |L1.1252|
                  |L1.508|
0001fc  f8c97018          STR      r7,[r9,#0x18]         ;543  ; Run_Control
000200  f8c9301c          STR      r3,[r9,#0x1c]         ;544  ; Run_Control
000204  2102              MOVS     r1,#2                 ;545
000206  f7fffffe          BL       GPIO_ResetBits
00020a  e033              B        |L1.628|
                  |L1.524|
00020c  f8c97018          STR      r7,[r9,#0x18]         ;550  ; Run_Control
000210  f8c9301c          STR      r3,[r9,#0x1c]         ;551  ; Run_Control
000214  2102              MOVS     r1,#2                 ;552
000216  f7fffffe          BL       GPIO_ResetBits
00021a  e038              B        |L1.654|
                  |L1.540|
00021c  61ac              STR      r4,[r5,#0x18]         ;559  ; x2
00021e  f8ba0000          LDRH     r0,[r10,#0]           ;559  ; Contr_Laod
000222  eeb80a40          VCVT.F32.U32 s0,s0                 ;560
000226  ee010a10          VMOV     s2,r0                 ;560
00022a  eef80a60          VCVT.F32.U32 s1,s1                 ;560
00022e  61e8              STR      r0,[r5,#0x1c]         ;560  ; y2
000230  eeb81a41          VCVT.F32.U32 s2,s2                 ;560
000234  ee311a40          VSUB.F32 s2,s2,s0              ;560
000238  ee004a10          VMOV     s0,r4                 ;560
00023c  eeb80a40          VCVT.F32.U32 s0,s0                 ;560
000240  ee700a60          VSUB.F32 s1,s0,s1              ;560
000244  ee810a20          VDIV.F32 s0,s2,s1              ;560
000248  ee004a90          VMOV     s1,r4                 ;561
00024c  eeb81a60          VCVT.F32.U32 s2,s1                 ;561
000250  ee000a90          VMOV     s1,r0                 ;561
000254  eef80a60          VCVT.F32.U32 s1,s1                 ;561
000258  ed880a0a          VSTR     s0,[r8,#0x28]         ;560
00025c  ee400a41          VMLS.F32 s1,s0,s2              ;561
000260  edc80a12          VSTR     s1,[r8,#0x48]         ;561
000264  e13e              B        |L1.1252|
                  |L1.614|
000266  f8c97018          STR      r7,[r9,#0x18]         ;567  ; Run_Control
00026a  f8c9701c          STR      r7,[r9,#0x1c]         ;568  ; Run_Control
00026e  2102              MOVS     r1,#2                 ;569
000270  f7fffffe          BL       GPIO_SetBits
                  |L1.628|
000274  7037              STRB     r7,[r6,#0]            ;546
000276  f8aab000          STRH     r11,[r10,#0]          ;547
                  |L1.634|
00027a  2101              MOVS     r1,#1                 ;548
00027c  2002              MOVS     r0,#2                 ;548
00027e  e0d3              B        |L1.1064|
                  |L1.640|
000280  f8c97018          STR      r7,[r9,#0x18]         ;574  ; Run_Control
000284  f8c9701c          STR      r7,[r9,#0x1c]         ;575  ; Run_Control
000288  2102              MOVS     r1,#2                 ;576
00028a  f7fffffe          BL       GPIO_SetBits
                  |L1.654|
00028e  612c              STR      r4,[r5,#0x10]         ;554  ; x1
000290  f8ba1000          LDRH     r1,[r10,#0]           ;554  ; Contr_Laod
000294  4650              MOV      r0,r10                ;554
000296  6169              STR      r1,[r5,#0x14]         ;555  ; y1
000298  f44f51fa          MOV      r1,#0x1f40            ;555
00029c  e0d8              B        |L1.1104|
                  |L1.670|
00029e  61ac              STR      r4,[r5,#0x18]         ;583  ; x2
0002a0  f8ba0000          LDRH     r0,[r10,#0]           ;583  ; Contr_Laod
0002a4  eeb80a40          VCVT.F32.U32 s0,s0                 ;584
0002a8  ee010a10          VMOV     s2,r0                 ;584
0002ac  eef80a60          VCVT.F32.U32 s1,s1                 ;584
0002b0  61e8              STR      r0,[r5,#0x1c]         ;584  ; y2
0002b2  eeb81a41          VCVT.F32.U32 s2,s2                 ;584
0002b6  ee311a40          VSUB.F32 s2,s2,s0              ;584
0002ba  ee004a10          VMOV     s0,r4                 ;584
0002be  eeb80a40          VCVT.F32.U32 s0,s0                 ;584
0002c2  ee700a60          VSUB.F32 s1,s0,s1              ;584
0002c6  ee810a20          VDIV.F32 s0,s2,s1              ;584
0002ca  ee004a90          VMOV     s1,r4                 ;585
0002ce  eeb81a60          VCVT.F32.U32 s2,s1                 ;585
0002d2  ee000a90          VMOV     s1,r0                 ;585
0002d6  eef80a60          VCVT.F32.U32 s1,s1                 ;585
0002da  ed880a0b          VSTR     s0,[r8,#0x2c]         ;584
0002de  ee400a41          VMLS.F32 s1,s0,s2              ;585
0002e2  edc80a13          VSTR     s1,[r8,#0x4c]         ;585
0002e6  e0fd              B        |L1.1252|
                  |L1.744|
0002e8  b199              CBZ      r1,|L1.786|
0002ea  2901              CMP      r1,#1                 ;599
0002ec  d018              BEQ      |L1.800|
0002ee  2902              CMP      r1,#2                 ;607
0002f0  d024              BEQ      |L1.828|
0002f2  f44f6000          MOV      r0,#0x800             ;625
0002f6  2903              CMP      r1,#3                 ;623
0002f8  d069              BEQ      |L1.974|
0002fa  2904              CMP      r1,#4                 ;629
0002fc  d073              BEQ      |L1.998|
0002fe  2905              CMP      r1,#5                 ;638
000300  d072              BEQ      |L1.1000|
000302  2906              CMP      r1,#6                 ;654
000304  d071              BEQ      |L1.1002|
000306  4845              LDR      r0,|L1.1052|
000308  2907              CMP      r1,#7                 ;659
00030a  d06f              BEQ      |L1.1004|
00030c  2908              CMP      r1,#8                 ;667
00030e  d06e              BEQ      |L1.1006|
000310  e250              B        |L1.1972|
                  |L1.786|
000312  f8c93020          STR      r3,[r9,#0x20]         ;594  ; Run_Control
000316  f6413158          MOV      r1,#0x1b58            ;595
00031a  f8aa1000          STRH     r1,[r10,#0]           ;595
00031e  e060              B        |L1.994|
                  |L1.800|
000320  f8c93020          STR      r3,[r9,#0x20]         ;601  ; Run_Control
000324  612c              STR      r4,[r5,#0x10]         ;603  ; x1
000326  f8ba1000          LDRH     r1,[r10,#0]           ;603  ; Contr_Laod
00032a  4650              MOV      r0,r10                ;603
00032c  6169              STR      r1,[r5,#0x14]         ;604  ; y1
00032e  493c              LDR      r1,|L1.1056|
000330  8809              LDRH     r1,[r1,#0]            ;604  ; Imon_Load_value
000332  e9c51408          STRD     r1,r4,[r5,#0x20]      ;604
000336  f64d21c0          MOV      r1,#0xdac0            ;606
00033a  e089              B        |L1.1104|
                  |L1.828|
00033c  61ac              STR      r4,[r5,#0x18]         ;610  ; x2
00033e  f8ba1000          LDRH     r1,[r10,#0]           ;610  ; Contr_Laod
000342  4837              LDR      r0,|L1.1056|
000344  61e9              STR      r1,[r5,#0x1c]         ;611  ; y2
000346  8800              LDRH     r0,[r0,#0]            ;611  ; Imon_Load_value
000348  ee021a10          VMOV     s4,r1                 ;614
00034c  eeb80a40          VCVT.F32.U32 s0,s0                 ;614
000350  eef80a60          VCVT.F32.U32 s1,s1                 ;614
000354  eeb82a42          VCVT.F32.U32 s4,s4                 ;614
000358  e9c5040a          STRD     r0,r4,[r5,#0x28]      ;611
00035c  ee322a40          VSUB.F32 s4,s4,s0              ;614
000360  ee004a10          VMOV     s0,r4                 ;614
000364  eeb80a40          VCVT.F32.U32 s0,s0                 ;614
000368  ee700a60          VSUB.F32 s1,s0,s1              ;614
00036c  ee820a20          VDIV.F32 s0,s4,s1              ;614
000370  ee004a90          VMOV     s1,r4                 ;615
000374  eeb82a60          VCVT.F32.U32 s4,s1                 ;615
000378  ee001a90          VMOV     s1,r1                 ;615
00037c  eef80a60          VCVT.F32.U32 s1,s1                 ;615
000380  ed880a08          VSTR     s0,[r8,#0x20]         ;614
000384  ee400a42          VMLS.F32 s1,s0,s4              ;615
000388  ee004a10          VMOV     s0,r4                 ;617
00038c  eeb80a40          VCVT.F32.U32 s0,s0                 ;617
000390  edc80a10          VSTR     s1,[r8,#0x40]         ;615
000394  eef80a41          VCVT.F32.U32 s1,s2                 ;617
000398  eeb81a61          VCVT.F32.U32 s2,s3                 ;617
00039c  ee700a60          VSUB.F32 s1,s0,s1              ;617
0003a0  ee000a10          VMOV     s0,r0                 ;617
0003a4  eeb80a40          VCVT.F32.U32 s0,s0                 ;617
0003a8  ee301a41          VSUB.F32 s2,s0,s2              ;617
0003ac  ee800a81          VDIV.F32 s0,s1,s2              ;617
0003b0  ee000a90          VMOV     s1,r0                 ;618
0003b4  eeb81a60          VCVT.F32.U32 s2,s1                 ;618
0003b8  ee004a90          VMOV     s1,r4                 ;618
0003bc  eef80a60          VCVT.F32.U32 s1,s1                 ;618
0003c0  ed880a0c          VSTR     s0,[r8,#0x30]         ;617
0003c4  ee400a41          VMLS.F32 s1,s0,s2              ;618
0003c8  edc80a14          VSTR     s1,[r8,#0x50]         ;618
0003cc  e08a              B        |L1.1252|
                  |L1.974|
0003ce  f8c97020          STR      r7,[r9,#0x20]         ;624  ; Run_Control
0003d2  4601              MOV      r1,r0                 ;625
0003d4  4813              LDR      r0,|L1.1060|
0003d6  f7fffffe          BL       GPIO_ResetBits
0003da  f44f50fa          MOV      r0,#0x1f40            ;626
0003de  f8aa0000          STRH     r0,[r10,#0]           ;626
                  |L1.994|
0003e2  7037              STRB     r7,[r6,#0]            ;596
0003e4  e749              B        |L1.634|
                  |L1.998|
0003e6  e022              B        |L1.1070|
                  |L1.1000|
0003e8  e034              B        |L1.1108|
                  |L1.1002|
0003ea  e081              B        |L1.1264|
                  |L1.1004|
0003ec  e08c              B        |L1.1288|
                  |L1.1006|
0003ee  e09a              B        |L1.1318|
                  |L1.1008|
                          DCD      calflag
                  |L1.1012|
                          DCD      Run_Control
                  |L1.1016|
                          DCD      ||.data||
                  |L1.1020|
                          DCD      CalPara
                  |L1.1024|
                          DCD      flagB
                  |L1.1028|
                          DCD      Contr_Voltage
                  |L1.1032|
                          DCD      Contr_Current
                  |L1.1036|
                          DCD      Contr_Laod
                  |L1.1040|
                          DCD      Vmon_Load_value
                  |L1.1044|
                          DCD      0x40020400
                  |L1.1048|
                          DCD      Vmon_POWE_value
                  |L1.1052|
                          DCD      Imon_POWE_value
                  |L1.1056|
                          DCD      Imon_Load_value
                  |L1.1060|
                          DCD      0x40020800
                  |L1.1064|
000428  f7fffffe          BL       OnOff_GPOI_ResetSet
00042c  e1c2              B        |L1.1972|
                  |L1.1070|
00042e  f8c97020          STR      r7,[r9,#0x20]         ;631  ; Run_Control
000432  4601              MOV      r1,r0                 ;632
000434  48e1              LDR      r0,|L1.1980|
000436  f7fffffe          BL       GPIO_ResetBits
00043a  612c              STR      r4,[r5,#0x10]         ;634  ; x1
00043c  f8ba1000          LDRH     r1,[r10,#0]           ;634  ; Contr_Laod
000440  4650              MOV      r0,r10                ;634
000442  6169              STR      r1,[r5,#0x14]         ;635  ; y1
000444  49de              LDR      r1,|L1.1984|
000446  8809              LDRH     r1,[r1,#0]            ;635  ; Imon_Load_value
000448  e9c51408          STRD     r1,r4,[r5,#0x20]      ;635
00044c  f24801e8          MOV      r1,#0x80e8            ;637
                  |L1.1104|
000450  8001              STRH     r1,[r0,#0]            ;606
000452  e1af              B        |L1.1972|
                  |L1.1108|
000454  61ac              STR      r4,[r5,#0x18]         ;641  ; x2
000456  f8ba1000          LDRH     r1,[r10,#0]           ;641  ; Contr_Laod
00045a  48d9              LDR      r0,|L1.1984|
00045c  61e9              STR      r1,[r5,#0x1c]         ;642  ; y2
00045e  8800              LDRH     r0,[r0,#0]            ;642  ; Imon_Load_value
000460  ee021a10          VMOV     s4,r1                 ;645
000464  eeb80a40          VCVT.F32.U32 s0,s0                 ;645
000468  eef80a60          VCVT.F32.U32 s1,s1                 ;645
00046c  eeb82a42          VCVT.F32.U32 s4,s4                 ;645
000470  e9c5040a          STRD     r0,r4,[r5,#0x28]      ;642
000474  ee322a40          VSUB.F32 s4,s4,s0              ;645
000478  ee004a10          VMOV     s0,r4                 ;645
00047c  eeb80a40          VCVT.F32.U32 s0,s0                 ;645
000480  ee700a60          VSUB.F32 s1,s0,s1              ;645
000484  ee820a20          VDIV.F32 s0,s4,s1              ;645
000488  ee004a90          VMOV     s1,r4                 ;646
00048c  eeb82a60          VCVT.F32.U32 s4,s1                 ;646
000490  ee001a90          VMOV     s1,r1                 ;646
000494  eef80a60          VCVT.F32.U32 s1,s1                 ;646
000498  ed880a09          VSTR     s0,[r8,#0x24]         ;645
00049c  ee400a42          VMLS.F32 s1,s0,s4              ;646
0004a0  ee004a10          VMOV     s0,r4                 ;648
0004a4  eeb80a40          VCVT.F32.U32 s0,s0                 ;648
0004a8  edc80a11          VSTR     s1,[r8,#0x44]         ;646
0004ac  eef80a41          VCVT.F32.U32 s1,s2                 ;648
0004b0  eeb81a61          VCVT.F32.U32 s2,s3                 ;648
0004b4  ee700a60          VSUB.F32 s1,s0,s1              ;648
0004b8  ee000a10          VMOV     s0,r0                 ;648
0004bc  eeb80a40          VCVT.F32.U32 s0,s0                 ;648
0004c0  ee301a41          VSUB.F32 s2,s0,s2              ;648
0004c4  ee800a81          VDIV.F32 s0,s1,s2              ;648
0004c8  ee000a90          VMOV     s1,r0                 ;649
0004cc  eeb81a60          VCVT.F32.U32 s2,s1                 ;649
0004d0  ee004a90          VMOV     s1,r4                 ;649
0004d4  eef80a60          VCVT.F32.U32 s1,s1                 ;649
0004d8  ed880a0d          VSTR     s0,[r8,#0x34]         ;648
0004dc  ee400a41          VMLS.F32 s1,s0,s2              ;649
0004e0  edc80a15          VSTR     s1,[r8,#0x54]         ;649
                  |L1.1252|
0004e4  f8cc2000          STR      r2,[r12,#0]           ;621  ; flagB
0004e8  7033              STRB     r3,[r6,#0]            ;621
0004ea  f7fffffe          BL       Off_GPOI_ResetSet
0004ee  e161              B        |L1.1972|
                  |L1.1264|
0004f0  f64050ac          MOV      r0,#0xdac             ;655
0004f4  f8ae0000          STRH     r0,[lr,#0]            ;655
0004f8  f44f617a          MOV      r1,#0xfa0             ;656
0004fc  f8ab1000          STRH     r1,[r11,#0]           ;656
000500  7037              STRB     r7,[r6,#0]            ;657
                  |L1.1282|
000502  2101              MOVS     r1,#1                 ;519
000504  2000              MOVS     r0,#0                 ;519
000506  e78f              B        |L1.1064|
                  |L1.1288|
000508  612c              STR      r4,[r5,#0x10]         ;662  ; x1
00050a  f8bb2000          LDRH     r2,[r11,#0]           ;662  ; Contr_Current
00050e  4659              MOV      r1,r11                ;662
000510  616a              STR      r2,[r5,#0x14]         ;663  ; y1
000512  8800              LDRH     r0,[r0,#0]            ;663  ; Imon_POWE_value
000514  e9c50408          STRD     r0,r4,[r5,#0x20]      ;663
000518  f64050ac          MOV      r0,#0xdac             ;665
00051c  f8ae0000          STRH     r0,[lr,#0]            ;665
000520  0080              LSLS     r0,r0,#2              ;666
                  |L1.1314|
000522  8008              STRH     r0,[r1,#0]            ;666
000524  e146              B        |L1.1972|
                  |L1.1318|
000526  61ac              STR      r4,[r5,#0x18]         ;670  ; x2
000528  f8bb1000          LDRH     r1,[r11,#0]           ;670  ; Contr_Current
00052c  61e9              STR      r1,[r5,#0x1c]         ;671  ; y2
00052e  8800              LDRH     r0,[r0,#0]            ;671  ; Imon_POWE_value
000530  ee021a10          VMOV     s4,r1                 ;674
000534  eeb80a40          VCVT.F32.U32 s0,s0                 ;674
000538  eef80a60          VCVT.F32.U32 s1,s1                 ;674
00053c  eeb82a42          VCVT.F32.U32 s4,s4                 ;674
000540  e9c5040a          STRD     r0,r4,[r5,#0x28]      ;671
000544  ee322a40          VSUB.F32 s4,s4,s0              ;674
000548  ee004a10          VMOV     s0,r4                 ;674
00054c  eeb80a40          VCVT.F32.U32 s0,s0                 ;674
000550  ee700a60          VSUB.F32 s1,s0,s1              ;674
000554  ee820a20          VDIV.F32 s0,s4,s1              ;674
000558  ee004a90          VMOV     s1,r4                 ;675
00055c  eeb82a60          VCVT.F32.U32 s4,s1                 ;675
000560  ee001a90          VMOV     s1,r1                 ;675
000564  eef80a60          VCVT.F32.U32 s1,s1                 ;675
000568  ed880a0e          VSTR     s0,[r8,#0x38]         ;674
00056c  ee400a42          VMLS.F32 s1,s0,s4              ;675
000570  ee004a10          VMOV     s0,r4                 ;677
000574  eeb80a40          VCVT.F32.U32 s0,s0                 ;677
000578  edc80a16          VSTR     s1,[r8,#0x58]         ;675
00057c  eef80a41          VCVT.F32.U32 s1,s2                 ;677
000580  eeb81a61          VCVT.F32.U32 s2,s3                 ;677
000584  ee700a60          VSUB.F32 s1,s0,s1              ;677
000588  ee000a10          VMOV     s0,r0                 ;677
00058c  eeb80a40          VCVT.F32.U32 s0,s0                 ;677
000590  ee301a41          VSUB.F32 s2,s0,s2              ;677
000594  ee800a81          VDIV.F32 s0,s1,s2              ;677
000598  ee000a90          VMOV     s1,r0                 ;678
00059c  eeb81a60          VCVT.F32.U32 s2,s1                 ;678
0005a0  ee004a90          VMOV     s1,r4                 ;678
0005a4  eef80a60          VCVT.F32.U32 s1,s1                 ;678
0005a8  ed880a0f          VSTR     s0,[r8,#0x3c]         ;677
0005ac  ee400a41          VMLS.F32 s1,s0,s2              ;678
0005b0  edc80a17          VSTR     s1,[r8,#0x5c]         ;678
0005b4  e796              B        |L1.1252|
                  |L1.1462|
;;;685    		if(range == 0)//内阻低档位低段
;;;686    		{
;;;687    			RCONT_SW = 0;
;;;688    			calflag = 1;
;;;689    			x1 = Rmon_value;
0005b6  4883              LDR      r0,|L1.1988|
0005b8  b1c1              CBZ      r1,|L1.1516|
;;;690    			y1 = data;
;;;691    			
;;;692    //			Modify_A_READ=0;
;;;693    //			Modify_A_ACT=0;
;;;694    //			Modify_A_READ = Rmon_value;//测量电阻值
;;;695    //			Modify_A_ACT = data;//读取低段
;;;696    		}else if (range == 1)//内阻低档位高段
0005ba  2901              CMP      r1,#1
0005bc  d019              BEQ      |L1.1522|
;;;697    		{
;;;698    
;;;699    			x2 = Rmon_value;
;;;700    			y2 = data;
;;;701    			CalPara.TestR[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;702    			CalPara.OffsetR[0] = (float)y2 - CalPara.TestR[0]*(float)x2;
;;;703    				//参数写进FLASH
;;;704    			Flag_DAC_OFF=0;
;;;705    			calflag = 0;
;;;706    		}else if(range == 2)//内阻高档位低段
0005be  2902              CMP      r1,#2
0005c0  d07e              BEQ      |L1.1728|
;;;707    		{
;;;708    			RCONT_SW = 1;
;;;709    			calflag = 1;
;;;710    			x1 = Rmon_value;
;;;711    			y1 = data;
;;;712    		}else if (range == 3)//内阻高档位高段
0005c2  2903              CMP      r1,#3
0005c4  d039              BEQ      |L1.1594|
;;;713    		{
;;;714    			
;;;715    			x2 = Rmon_value;
;;;716    			y2 = data;
;;;717    			CalPara.TestR[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;718    			CalPara.OffsetR[1] = (float)y2 - CalPara.TestR[1]*(float)x2;
;;;719    				//参数写进FLASH
;;;720    			Flag_DAC_OFF=0;
;;;721    			calflag = 0;
;;;722    		}else if(range == 4)//识别电阻1低段
;;;723    		{
;;;724    			calflag = 1;
;;;725    //			x1 = (R1mon_value*1000)/(65535-R1mon_value);
;;;726    			x1 = (R1mon_value*1000)/(65535-R1mon_value);
0005c6  f8dfb200          LDR      r11,|L1.1992|
0005ca  f64f7aff          MOV      r10,#0xffff
0005ce  2904              CMP      r1,#4                 ;722
0005d0  d057              BEQ      |L1.1666|
;;;727    			y1 = data;
;;;728    		}else if (range == 5)//识别电阻1高段
0005d2  2905              CMP      r1,#5
0005d4  d064              BEQ      |L1.1696|
;;;729    		{
;;;730    			
;;;731    //			x2 = (R1mon_value*1000)/(65535-R1mon_value);
;;;732    			x2 = (R1mon_value*1000)/(65535-R1mon_value);
;;;733    			y2 = data;
;;;734    			CalPara.TestR1[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;735    			CalPara.OffsetR1[0] = (float)y2 - CalPara.TestR1[0]*(float)x2;
;;;736    				//参数写进FLASH
;;;737    			Flag_DAC_OFF=0;
;;;738    			calflag = 0;
;;;739    		}else if(range == 6)//识别电阻2低段
;;;740    		{
;;;741    			calflag = 1;
;;;742    			x1 = (R2mon_value*1000)/(65535-R2mon_value);
0005d6  f8dfb1f4          LDR      r11,|L1.1996|
0005da  2906              CMP      r1,#6                 ;739
0005dc  d051              BEQ      |L1.1666|
;;;743    			y1 = data;
;;;744    		}else if (range == 7)//识别电阻2高段
0005de  2907              CMP      r1,#7
0005e0  d06f              BEQ      |L1.1730|
;;;745    		{
;;;746    			
;;;747    			x2 = (R2mon_value*1000)/(65535-R2mon_value);
;;;748    			y2 = data;
;;;749    			CalPara.TestR2[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;750    			CalPara.OffsetR2[0] = (float)y2 - CalPara.TestR2[0]*(float)x2;
;;;751    				//参数写进FLASH
;;;752    			Flag_DAC_OFF=0;
;;;753    			calflag = 0;
;;;754    		}else if(range == 8)//内阻高档位低段
0005e2  2908              CMP      r1,#8
0005e4  d06c              BEQ      |L1.1728|
;;;755    		{
;;;756    			RCONT_SW = 1;
;;;757    			calflag = 1;
;;;758    			x1 = Rmon_value;
;;;759    			y1 = data;
;;;760    		}else if (range == 9)//内阻高档位高段
0005e6  2909              CMP      r1,#9
0005e8  d06c              BEQ      |L1.1732|
0005ea  e0e3              B        |L1.1972|
                  |L1.1516|
0005ec  f8c93024          STR      r3,[r9,#0x24]         ;687  ; Run_Control
0005f0  e0b8              B        |L1.1892|
                  |L1.1522|
0005f2  8800              LDRH     r0,[r0,#0]            ;699  ; Rmon_value
0005f4  ee014a10          VMOV     s2,r4                 ;701
0005f8  eeb80a40          VCVT.F32.U32 s0,s0                 ;701
0005fc  eef80a60          VCVT.F32.U32 s1,s1                 ;701
000600  eeb81a41          VCVT.F32.U32 s2,s2                 ;701
000604  e9c50406          STRD     r0,r4,[r5,#0x18]      ;699
000608  ee311a40          VSUB.F32 s2,s2,s0              ;701
00060c  ee000a10          VMOV     s0,r0                 ;701
000610  eeb80a40          VCVT.F32.U32 s0,s0                 ;701
000614  ee700a60          VSUB.F32 s1,s0,s1              ;701
000618  ee810a20          VDIV.F32 s0,s2,s1              ;701
00061c  ee000a90          VMOV     s1,r0                 ;702
000620  eeb81a60          VCVT.F32.U32 s2,s1                 ;702
000624  ee004a90          VMOV     s1,r4                 ;702
000628  eef80a60          VCVT.F32.U32 s1,s1                 ;702
00062c  ed880a18          VSTR     s0,[r8,#0x60]         ;701
000630  ee400a41          VMLS.F32 s1,s0,s2              ;702
000634  edc80a1d          VSTR     s1,[r8,#0x74]         ;702
000638  e0b9              B        |L1.1966|
                  |L1.1594|
00063a  8800              LDRH     r0,[r0,#0]            ;715  ; Rmon_value
00063c  ee014a10          VMOV     s2,r4                 ;717
000640  eeb80a40          VCVT.F32.U32 s0,s0                 ;717
000644  eef80a60          VCVT.F32.U32 s1,s1                 ;717
000648  eeb81a41          VCVT.F32.U32 s2,s2                 ;717
00064c  e9c50406          STRD     r0,r4,[r5,#0x18]      ;715
000650  ee311a40          VSUB.F32 s2,s2,s0              ;717
000654  ee000a10          VMOV     s0,r0                 ;717
000658  eeb80a40          VCVT.F32.U32 s0,s0                 ;717
00065c  ee700a60          VSUB.F32 s1,s0,s1              ;717
000660  ee810a20          VDIV.F32 s0,s2,s1              ;717
000664  ee000a90          VMOV     s1,r0                 ;718
000668  eeb81a60          VCVT.F32.U32 s2,s1                 ;718
00066c  ee004a90          VMOV     s1,r4                 ;718
000670  eef80a60          VCVT.F32.U32 s1,s1                 ;718
000674  ed880a19          VSTR     s0,[r8,#0x64]         ;717
000678  ee400a41          VMLS.F32 s1,s0,s2              ;718
00067c  edc80a1e          VSTR     s1,[r8,#0x78]         ;718
000680  e095              B        |L1.1966|
                  |L1.1666|
000682  7037              STRB     r7,[r6,#0]            ;724
000684  f8bb1000          LDRH     r1,[r11,#0]           ;726  ; R1mon_value
000688  f44f727a          MOV      r2,#0x3e8             ;726
00068c  4351              MULS     r1,r2,r1              ;726
00068e  f8bb2000          LDRH     r2,[r11,#0]           ;726  ; R1mon_value
000692  ebaa0002          SUB      r0,r10,r2             ;726
000696  fbb1f0f0          UDIV     r0,r1,r0              ;726
                  |L1.1690|
00069a  e9c50404          STRD     r0,r4,[r5,#0x10]      ;726
00069e  e089              B        |L1.1972|
                  |L1.1696|
0006a0  f8bb1000          LDRH     r1,[r11,#0]           ;732  ; R1mon_value
0006a4  f44f777a          MOV      r7,#0x3e8             ;732
0006a8  4379              MULS     r1,r7,r1              ;732
0006aa  f8bb7000          LDRH     r7,[r11,#0]           ;732  ; R1mon_value
0006ae  ee014a10          VMOV     s2,r4                 ;734
0006b2  ebaa0007          SUB      r0,r10,r7             ;732
0006b6  fbb1f0f0          UDIV     r0,r1,r0              ;732
0006ba  e9c50406          STRD     r0,r4,[r5,#0x18]      ;732
0006be  e002              B        |L1.1734|
                  |L1.1728|
0006c0  e04e              B        |L1.1888|
                  |L1.1730|
0006c2  e01f              B        |L1.1796|
                  |L1.1732|
0006c4  e050              B        |L1.1896|
                  |L1.1734|
0006c6  eeb81a41          VCVT.F32.U32 s2,s2                 ;734
0006ca  eeb80a40          VCVT.F32.U32 s0,s0                 ;734
0006ce  eef80a60          VCVT.F32.U32 s1,s1                 ;734
0006d2  ee311a40          VSUB.F32 s2,s2,s0              ;734
0006d6  ee000a10          VMOV     s0,r0                 ;734
0006da  eeb80a40          VCVT.F32.U32 s0,s0                 ;734
0006de  ee700a60          VSUB.F32 s1,s0,s1              ;734
0006e2  ee810a20          VDIV.F32 s0,s2,s1              ;734
0006e6  ee000a90          VMOV     s1,r0                 ;735
0006ea  eeb81a60          VCVT.F32.U32 s2,s1                 ;735
0006ee  ee004a90          VMOV     s1,r4                 ;735
0006f2  eef80a60          VCVT.F32.U32 s1,s1                 ;735
0006f6  ed880a1b          VSTR     s0,[r8,#0x6c]         ;734
0006fa  ee400a41          VMLS.F32 s1,s0,s2              ;735
0006fe  edc80a20          VSTR     s1,[r8,#0x80]         ;735
000702  e054              B        |L1.1966|
                  |L1.1796|
000704  f8bb1000          LDRH     r1,[r11,#0]           ;747  ; R2mon_value
000708  f44f777a          MOV      r7,#0x3e8             ;747
00070c  4379              MULS     r1,r7,r1              ;747
00070e  f8bb7000          LDRH     r7,[r11,#0]           ;747  ; R2mon_value
000712  ee014a10          VMOV     s2,r4                 ;749
000716  ebaa0007          SUB      r0,r10,r7             ;747
00071a  fbb1f0f0          UDIV     r0,r1,r0              ;747
00071e  eeb81a41          VCVT.F32.U32 s2,s2                 ;749
000722  eeb80a40          VCVT.F32.U32 s0,s0                 ;749
000726  eef80a60          VCVT.F32.U32 s1,s1                 ;749
00072a  e9c50406          STRD     r0,r4,[r5,#0x18]      ;747
00072e  ee311a40          VSUB.F32 s2,s2,s0              ;749
000732  ee000a10          VMOV     s0,r0                 ;749
000736  eeb80a40          VCVT.F32.U32 s0,s0                 ;749
00073a  ee700a60          VSUB.F32 s1,s0,s1              ;749
00073e  ee810a20          VDIV.F32 s0,s2,s1              ;749
000742  ee000a90          VMOV     s1,r0                 ;750
000746  eeb81a60          VCVT.F32.U32 s2,s1                 ;750
00074a  ee004a90          VMOV     s1,r4                 ;750
00074e  eef80a60          VCVT.F32.U32 s1,s1                 ;750
000752  ed880a1c          VSTR     s0,[r8,#0x70]         ;749
000756  ee400a41          VMLS.F32 s1,s0,s2              ;750
00075a  edc80a21          VSTR     s1,[r8,#0x84]         ;750
00075e  e026              B        |L1.1966|
                  |L1.1888|
000760  f8c97024          STR      r7,[r9,#0x24]         ;756  ; Run_Control
                  |L1.1892|
000764  7037              STRB     r7,[r6,#0]            ;757
000766  e4bb              B        |L1.224|
                  |L1.1896|
;;;761    		{
;;;762    			
;;;763    			x2 = Rmon_value;
000768  8800              LDRH     r0,[r0,#0]  ; Rmon_value
;;;764    			y2 = data;
;;;765    			CalPara.TestR[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
00076a  ee014a10          VMOV     s2,r4
00076e  eeb80a40          VCVT.F32.U32 s0,s0
000772  eef80a60          VCVT.F32.U32 s1,s1
000776  eeb81a41          VCVT.F32.U32 s2,s2
00077a  e9c50406          STRD     r0,r4,[r5,#0x18]      ;763
00077e  ee311a40          VSUB.F32 s2,s2,s0
000782  ee000a10          VMOV     s0,r0
000786  eeb80a40          VCVT.F32.U32 s0,s0
00078a  ee700a60          VSUB.F32 s1,s0,s1
00078e  ee810a20          VDIV.F32 s0,s2,s1
;;;766    			CalPara.OffsetR[2] = (float)y2 - CalPara.TestR[2]*(float)x2;
000792  ee000a90          VMOV     s1,r0
000796  eeb81a60          VCVT.F32.U32 s2,s1
00079a  ee004a90          VMOV     s1,r4
00079e  eef80a60          VCVT.F32.U32 s1,s1
0007a2  ed880a1a          VSTR     s0,[r8,#0x68]         ;765
0007a6  ee400a41          VMLS.F32 s1,s0,s2
0007aa  edc80a1f          VSTR     s1,[r8,#0x7c]
                  |L1.1966|
;;;767    				//参数写进FLASH
;;;768    			Flag_DAC_OFF=0;
;;;769    			calflag = 0;
0007ae  f8cc2000          STR      r2,[r12,#0]  ; flagB
0007b2  7033              STRB     r3,[r6,#0]
                  |L1.1972|
;;;770    		}
;;;771    		
;;;772    	}
;;;773    		
;;;774    
;;;775    	Write_Flash_Bytes();
0007b4  e8bd5ff0          POP      {r4-r12,lr}
0007b8  f7ffbffe          B.W      Write_Flash_Bytes
;;;776    //	else if(mode == 1){//测量电流
;;;777    //		if(range == 1)
;;;778    //		{
;;;779    //			x1 = abs(I_CS);
;;;780    //			y1 = data;
;;;781    //		}else if(range == 2){
;;;782    //			x2 = abs(I_CS);
;;;783    //			y2 = data;
;;;784    //			SaveDebug.TestIcal[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;785    //			SaveDebug.OffsetI[1] = (float)y2 - SaveDebug.TestIcal[1]*(float)x2;
;;;786    //		}else if(range == 4){
;;;787    //			x1 = abs(I_CS);
;;;788    //			y1 = data;
;;;789    //		}else if(range == 5){
;;;790    //			x2 = abs(I_CS);
;;;791    //			y2 = data;
;;;792    //			SaveDebug.TestIcal[4] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;793    //			SaveDebug.OffsetI[3] = (float)y2 - SaveDebug.TestIcal[4]*(float)x2;
;;;794    //		}else if(range == 0){
;;;795    //			SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[0]);
;;;796    //		}else if(range == 3){
;;;797    //			SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[0]));
;;;798    //		}
;;;799    ////		else if(range == 4){
;;;800    ////			x1 = V_CS;
;;;801    ////			y1 = data;
;;;802    ////		}else if(range == 5){
;;;803    ////			x2 = V_CS;
;;;804    ////			y2 = data;
;;;805    ////			SaveDebug.TestVcal[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;806    ////			SaveDebug.OffsetV[2] = (float)y2 - SaveDebug.TestVcal[2]*(float)x2;
;;;807    ////		}
;;;808    //		
;;;809    ////		if(range < 3)
;;;810    ////		{
;;;811    ////			if(range == 0)
;;;812    ////			{
;;;813    ////				SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[0]);
;;;814    ////			}else{
;;;815    ////				SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[1]);
;;;816    ////			}			
;;;817    ////		}else{
;;;818    ////			if(range == 3)
;;;819    ////			{
;;;820    ////				SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[0]));
;;;821    ////			}else{
;;;822    ////				SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[1]));
;;;823    ////			}
;;;824    ////		}
;;;825    ////		calflag = 1;
;;;826    //	}else if(mode == 2){//控制电压
;;;827    //		if(range == 0)
;;;828    //		{
;;;829    //			_D_ = 1000;
;;;830    //			x1 = data;
;;;831    //			y1 = _D_;
;;;832    //		}else if(range == 1){
;;;833    //			_D_ = 7000;
;;;834    //			x2 = data;
;;;835    //			y2 = _D_;
;;;836    //			SaveDebug.ControlV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;837    //			SaveDebug.OffsetCV[0] = (float)y2 - SaveDebug.ControlV[0]*(float)x2;
;;;838    //		}else if(range == 2){
;;;839    //			_D_ = 10000;
;;;840    //			x1 = data;
;;;841    //			y1 = _D_;
;;;842    //		}else if(range == 3){
;;;843    //			_D_ = 13000;
;;;844    //			x2 = data;
;;;845    //			y2 = _D_;
;;;846    //			SaveDebug.ControlV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;847    //			SaveDebug.OffsetCV[1] = (float)y2 - SaveDebug.ControlV[1]*(float)x2;
;;;848    //		}else if(range == 4){
;;;849    //			_D_ = 17000;
;;;850    //			x1 = data;
;;;851    //			y1 = _D_;
;;;852    //		}else if(range == 5){
;;;853    //			_D_ = 20000;
;;;854    //			x2 = data;
;;;855    //			y2 = _D_;
;;;856    //			SaveDebug.ControlV[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;857    //			SaveDebug.OffsetCV[2] = (float)y2 - SaveDebug.ControlV[2]*(float)x2;
;;;858    //		}else if(range == 6){
;;;859    //			_D_ = 24000;
;;;860    //			x1 = data;
;;;861    //			y1 = _D_;
;;;862    //		}else if(range == 7){
;;;863    //			_D_ = 27000;
;;;864    //			x2 = data;
;;;865    //			y2 = _D_;
;;;866    //			SaveDebug.ControlV[3] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;867    //			SaveDebug.OffsetCV[3] = (float)y2 - SaveDebug.ControlV[3]*(float)x2;
;;;868    //		}
;;;869    //		
;;;870    ////		if(range == 0)
;;;871    ////		{
;;;872    ////			SaveDebug.ControlV[range] = (float)1000/(float)data;
;;;873    ////		}else if(range == 1){
;;;874    ////			SaveDebug.ControlV[range] = (float)10000/(float)data;
;;;875    ////		}else if(range == 2){
;;;876    ////			SaveDebug.ControlV[range] = (float)15000/(float)data;
;;;877    ////		}else if(range == 3){
;;;878    ////			SaveDebug.ControlV[range] = (float)19000/(float)data;
;;;879    ////		}
;;;880    ////		calflag = 1;
;;;881    //	}else if(mode == 3){//电流清零
;;;882    //		SaveDebug.ClearI[range] = I_CS;
;;;883    ////		calflag = 1;
;;;884    //	}
;;;885    	
;;;886    }
;;;887    
                          ENDP

                  |L1.1980|
                          DCD      0x40020800
                  |L1.1984|
                          DCD      Imon_Load_value
                  |L1.1988|
                          DCD      Rmon_value
                  |L1.1992|
                          DCD      R1mon_value
                  |L1.1996|
                          DCD      R2mon_value

                          AREA ||i.DMA1_Stream3_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Stream3_IRQHandler PROC
;;;2193   
;;;2194   void DMA1_Stream3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2195   {
;;;2196   	//----DMA1 通道3完成中断，对应的中断也需要清除
;;;2197   	if(DMA_GetITStatus(DMA1_Stream3,DMA_IT_TCIF3) != RESET)   
000002  4d0c              LDR      r5,|L2.52|
000004  4c0c              LDR      r4,|L2.56|
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       DMA_GetITStatus
00000e  2800              CMP      r0,#0
000010  d00e              BEQ      |L2.48|
;;;2198       {
;;;2199   		/* 清除标志位 */
;;;2200   		DMA_ClearFlag(DMA1_Stream3,DMA_IT_TCIF3); 
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       DMA_ClearFlag
;;;2201   		/* 关闭DMA */
;;;2202   		DMA_Cmd(DMA1_Stream3,DISABLE);
00001a  2100              MOVS     r1,#0
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       DMA_Cmd
;;;2203   		
;;;2204   		while (!(USART3->SR & USART_FLAG_TC));  //硬件数据发送完毕
000022  4806              LDR      r0,|L2.60|
                  |L2.36|
000024  8801              LDRH     r1,[r0,#0]
000026  0649              LSLS     r1,r1,#25
000028  d5fc              BPL      |L2.36|
                  |L2.42|
;;;2205   		while (!(USART3->SR & USART_FLAG_TXE)); //等待数据从软件拷贝到硬件进行发送
00002a  8801              LDRH     r1,[r0,#0]
00002c  0609              LSLS     r1,r1,#24
00002e  d5fc              BPL      |L2.42|
                  |L2.48|
;;;2206   	}
;;;2207   }
000030  bd70              POP      {r4-r6,pc}
;;;2208   
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      0x18008000
                  |L2.56|
                          DCD      0x40026058
                  |L2.60|
                          DCD      0x40004800

                          AREA ||i.IsDigitChar||, CODE, READONLY, ALIGN=1

                  IsDigitChar PROC
;;;87     /*****************************************************************/
;;;88     unsigned short IsDigitChar(unsigned char a)             //如果a的值是数字的话返回1，否则返回0
000000  3830              SUBS     r0,r0,#0x30
;;;89     {
;;;90     	int b;
;;;91       if(a<0x30 || a>0x39)                     //数字1-9
000002  280a              CMP      r0,#0xa
000004  d301              BCC      |L3.10|
;;;92       	{
;;;93       	   b=0;
000006  2000              MOVS     r0,#0
;;;94       	}
;;;95       else
;;;96       	{
;;;97       	   b=1;
;;;98       	}
;;;99       return b;
;;;100    }
000008  4770              BX       lr
                  |L3.10|
00000a  2001              MOVS     r0,#1                 ;97
00000c  4770              BX       lr
;;;101    void SetPowerV(vu16 powv)
                          ENDP


                          AREA ||i.LIST_ONOFF||, CODE, READONLY, ALIGN=2

                  LIST_ONOFF PROC
;;;332    
;;;333    void LIST_ONOFF(vu8 value)
000000  e92d43f1          PUSH     {r0,r4-r9,lr}
;;;334    {
;;;335    	switch(MODE)
000004  4f51              LDR      r7,|L4.332|
000006  ed2d8b02          VPUSH    {d8}                  ;334
00000a  f897c005          LDRB     r12,[r7,#5]  ; MODE
;;;336    	{
;;;337    		case 0://电子负载ON/OFF
;;;338    		{
;;;339    			if( value == 0 ){
;;;340    				
;;;341    				Flag_Swtich_ON = 0;
00000e  4950              LDR      r1,|L4.336|
000010  2600              MOVS     r6,#0                 ;335
;;;342    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
000012  4d50              LDR      r5,|L4.340|
000014  6808              LDR      r0,[r1,#0]            ;341
;;;343    			}
;;;344    			else if( value == 1 ){
;;;345    				
;;;346    				Flag_Swtich_ON = 1;
;;;347    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;348    			}
;;;349    		}break;
;;;350    		case 1://稳压电源ON/OFF
;;;351    		{
;;;352    			if( value == 0 ){
;;;353    				listsend = 1;
000016  2301              MOVS     r3,#1
;;;354    //				PowerSwitch(0);
;;;355    //				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;356    //				Para.CSET_Voltage = 0;
;;;357    //				Para.CSET_Current = 0;
;;;358    //				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;359    			}
;;;360    			else if( value == 1 ){
;;;361    				listsend = 1;
;;;362    //				PowerSwitch(1);
;;;363    //				Para.CSET_Voltage = Para.CDC_OutPut_V;
;;;364    //				Para.CSET_Current = Para.CDC_Limit_C;
;;;365    //				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;366    //				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;367    			}
;;;368    		}break;
;;;369    		case 2://过流测试ON/OFF
;;;370    		{
;;;371    			if( value == 0 ){
;;;372    				
;;;373    				Off_GPOI_ResetSet();
;;;374    				trig_flag_state = 0;
;;;375    				max_discahrgeNum = 0;
;;;376    				Para.CSET_Current_Laod =  Para.IR_Start_C;
000018  4c4f              LDR      r4,|L4.344|
00001a  f0200240          BIC      r2,r0,#0x40           ;341
00001e  f0400040          ORR      r0,r0,#0x40           ;346
000022  f1bc0f05          CMP      r12,#5                ;335
000026  d217              BCS      |L4.88|
000028  e8dff00c          TBB      [pc,r12]              ;335
00002c  8a0e1a62          DCB      0x8a,0x0e,0x1a,0x62
000030  8a00              DCB      0x8a,0x00
                  |L4.50|
000032  600a              STR      r2,[r1,#0]            ;342  ; flagA
000034  2180              MOVS     r1,#0x80              ;342
000036  e06e              B        |L4.278|
                  |L4.56|
000038  f89d2008          LDRB     r2,[sp,#8]            ;344
00003c  2a01              CMP      r2,#1                 ;344
00003e  d10b              BNE      |L4.88|
000040  6008              STR      r0,[r1,#0]            ;347  ; flagA
000042  2180              MOVS     r1,#0x80              ;347
000044  4628              MOV      r0,r5                 ;347
000046  e075              B        |L4.308|
000048  f89d0008          LDRB     r0,[sp,#8]            ;352
00004c  b118              CBZ      r0,|L4.86|
00004e  f89d0008          LDRB     r0,[sp,#8]            ;360
000052  2801              CMP      r0,#1                 ;360
000054  d100              BNE      |L4.88|
                  |L4.86|
000056  727b              STRB     r3,[r7,#9]            ;353
                  |L4.88|
;;;377    			}
;;;378    			else if( value == 1 ){
;;;379    				LOAD_I_SW = 1;
;;;380    				testv = DISS_Voltage;
;;;381    				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
;;;382    				Para.CSET_Current = 1000;
;;;383    				Para.CSET_Current_Laod =  Para.IR_Start_C;
;;;384    				shorttime = 0;
;;;385    				old_I = 0;
;;;386    				max_discahrgeNum = 0;
;;;387    				trig_flag_state = 1;
;;;388    				C_DISCHARGE = 1;        	
;;;389    				Flag_Swtich_ON = 1;
;;;390    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
;;;391    				max_discahrgeNum = (float)Para.IR_Start_C / 1000;				
;;;392    //				testv = DISS_Voltage;
;;;393    //				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
;;;394    //				Para.CSET_Current = 1000;
;;;395    //				Para.CSET_Current_Laod = Para.IR_Start_C;
;;;396    //				shorttime = 0;
;;;397    //				old_I = 0;
;;;398    //				max_discahrgeNum = 0;
;;;399    //				trig_flag_state = 1;
;;;400    //				C_DISCHARGE = 1;
;;;401    //				Flag_Swtich_ON = 1;
;;;402    //				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
;;;403    //				max_discahrgeNum = (float)Para.IR_Start_C / 1000;
;;;404    			}
;;;405    		}break;
;;;406    		case 3://过充测试ON/OFF
;;;407    		{
;;;408    			if( value == 0 ){
;;;409    				
;;;410    				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;411    				Para.CSET_Voltage = 0;
;;;412    				Para.CSET_Current = 0;
;;;413    				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;414    			}
;;;415    			else if( value == 1 ){
;;;416    				Para.CSET_Voltage = Para.CDC_OutPut_V;
;;;417    				Para.CSET_Current = Para.CDC_Limit_C;
;;;418    				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;419    				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;420    			}
;;;421    		}break;
;;;422    		case 4://电子负载ON/OFF
;;;423    		{
;;;424    			if( value == 0 ){
;;;425    				
;;;426    				Flag_Swtich_ON = 0;
;;;427    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
;;;428    			}
;;;429    			else if( value == 1 ){
;;;430    				
;;;431    				Flag_Swtich_ON = 1;
;;;432    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;433    			}
;;;434    		}break;
;;;435    	}
;;;436    }
000058  ecbd8b02          VPOP     {d8}
00005c  e8bd83f8          POP      {r3-r9,pc}
000060  f89d2008          LDRB     r2,[sp,#8]            ;371
000064  f8df80f4          LDR      r8,|L4.348|
000068  ed9f8a3d          VLDR     s16,|L4.352|
00006c  4f3d              LDR      r7,|L4.356|
00006e  b3aa              CBZ      r2,|L4.220|
000070  f89d2008          LDRB     r2,[sp,#8]            ;378
000074  2a01              CMP      r2,#1                 ;378
000076  d1ef              BNE      |L4.88|
000078  4a3b              LDR      r2,|L4.360|
00007a  6213              STR      r3,[r2,#0x20]         ;379  ; Run_Control
00007c  4a3b              LDR      r2,|L4.364|
00007e  eddf8a3d          VLDR     s17,|L4.372|
000082  ed920a00          VLDR     s0,[r2,#0]            ;380
000086  4a3a              LDR      r2,|L4.368|
000088  ed820a00          VSTR     s0,[r2,#0]            ;380
00008c  ee200a28          VMUL.F32 s0,s0,s17             ;381
000090  eebd0ac0          VCVT.S32.F32 s0,s0                 ;381
000094  ee102a10          VMOV     r2,s0                 ;381
000098  f502727a          ADD      r2,r2,#0x3e8          ;381
00009c  60a2              STR      r2,[r4,#8]            ;381  ; Para
00009e  f44f727a          MOV      r2,#0x3e8             ;382
0000a2  60e2              STR      r2,[r4,#0xc]          ;382  ; Para
0000a4  6c62              LDR      r2,[r4,#0x44]         ;383  ; Para
0000a6  6162              STR      r2,[r4,#0x14]         ;383  ; Para
0000a8  4a33              LDR      r2,|L4.376|
0000aa  7016              STRB     r6,[r2,#0]            ;384
0000ac  4a33              LDR      r2,|L4.380|
0000ae  ed828a00          VSTR     s16,[r2,#0]           ;385
0000b2  ed878a00          VSTR     s16,[r7,#0]           ;386
0000b6  f8883000          STRB     r3,[r8,#0]            ;387
0000ba  4a31              LDR      r2,|L4.384|
0000bc  7013              STRB     r3,[r2,#0]            ;388
0000be  6008              STR      r0,[r1,#0]            ;390  ; flagA
0000c0  2180              MOVS     r1,#0x80              ;390
0000c2  4628              MOV      r0,r5                 ;390
0000c4  f7fffffe          BL       GPIO_ResetBits
0000c8  6c60              LDR      r0,[r4,#0x44]         ;391  ; Para
0000ca  ee000a10          VMOV     s0,r0                 ;391
0000ce  eeb80a40          VCVT.F32.U32 s0,s0                 ;391
0000d2  eec00a28          VDIV.F32 s1,s0,s17             ;391
0000d6  edc70a00          VSTR     s1,[r7,#0]            ;391
0000da  e7bd              B        |L4.88|
                  |L4.220|
0000dc  e7ff              B        |L4.222|
                  |L4.222|
0000de  f7fffffe          BL       Off_GPOI_ResetSet
0000e2  f8886000          STRB     r6,[r8,#0]            ;374
0000e6  ed878a00          VSTR     s16,[r7,#0]           ;375
0000ea  6c60              LDR      r0,[r4,#0x44]         ;376  ; Para
0000ec  6160              STR      r0,[r4,#0x14]         ;376  ; Para
0000ee  e7b3              B        |L4.88|
0000f0  f89d0008          LDRB     r0,[sp,#8]            ;408
0000f4  4f23              LDR      r7,|L4.388|
0000f6  b1a8              CBZ      r0,|L4.292|
0000f8  f89d0008          LDRB     r0,[sp,#8]            ;415
0000fc  2801              CMP      r0,#1                 ;415
0000fe  d1ab              BNE      |L4.88|
000100  f8b40064          LDRH     r0,[r4,#0x64]         ;416  ; Para
000104  60a0              STR      r0,[r4,#8]            ;416  ; Para
000106  f8b40066          LDRH     r0,[r4,#0x66]         ;417  ; Para
00010a  60e0              STR      r0,[r4,#0xc]          ;417  ; Para
00010c  2104              MOVS     r1,#4                 ;418
00010e  4638              MOV      r0,r7                 ;418
000110  f7fffffe          BL       GPIO_SetBits
000114  2102              MOVS     r1,#2                 ;419
                  |L4.278|
000116  ecbd8b02          VPOP     {d8}                  ;427
00011a  4628              MOV      r0,r5                 ;427
00011c  e8bd43f8          POP      {r3-r9,lr}            ;427
000120  f7ffbffe          B.W      GPIO_SetBits
                  |L4.292|
000124  2102              MOVS     r1,#2                 ;410
000126  4628              MOV      r0,r5                 ;410
000128  f7fffffe          BL       GPIO_ResetBits
00012c  60a6              STR      r6,[r4,#8]            ;411  ; Para
00012e  60e6              STR      r6,[r4,#0xc]          ;412  ; Para
000130  2104              MOVS     r1,#4                 ;413
000132  4638              MOV      r0,r7                 ;413
                  |L4.308|
000134  ecbd8b02          VPOP     {d8}                  ;432
000138  e8bd43f8          POP      {r3-r9,lr}            ;432
00013c  f7ffbffe          B.W      GPIO_ResetBits
000140  f89d3008          LDRB     r3,[sp,#8]            ;424
000144  2b00              CMP      r3,#0                 ;424
000146  f47faf77          BNE      |L4.56|
00014a  e772              B        |L4.50|
;;;437    
                          ENDP

                  |L4.332|
                          DCD      ||.data||
                  |L4.336|
                          DCD      flagA
                  |L4.340|
                          DCD      0x40020800
                  |L4.344|
                          DCD      Para
                  |L4.348|
                          DCD      trig_flag_state
                  |L4.352|
000160  00000000          DCFS     0x00000000 ; 0
                  |L4.356|
                          DCD      max_discahrgeNum
                  |L4.360|
                          DCD      Run_Control
                  |L4.364|
                          DCD      DISS_Voltage
                  |L4.368|
                          DCD      testv
                  |L4.372|
000174  447a0000          DCFS     0x447a0000 ; 1000
                  |L4.376|
                          DCD      shorttime
                  |L4.380|
                          DCD      old_I
                  |L4.384|
                          DCD      C_DISCHARGE
                  |L4.388|
                          DCD      0x40021000

                          AREA ||i.MODE_ONOFF||, CODE, READONLY, ALIGN=2

                  MODE_ONOFF PROC
;;;258    
;;;259    void MODE_ONOFF(vu8 value)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;260    {
;;;261    	switch(MODE)
000004  4a41              LDR      r2,|L5.268|
000006  ed2d8b02          VPUSH    {d8}                  ;260
00000a  7951              LDRB     r1,[r2,#5]  ; MODE
;;;262    	{
;;;263    		case 0://电子负载ON/OFF
;;;264    		{
;;;265    			if( value == 0 ){
;;;266    				
;;;267    				Flag_Swtich_ON = 0;
00000c  4d40              LDR      r5,|L5.272|
;;;268    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
00000e  4841              LDR      r0,|L5.276|
000010  b3e9              CBZ      r1,|L5.142|
;;;269    			}
;;;270    			else if( value == 1 ){
;;;271    				
;;;272    				Flag_Swtich_ON = 1;
;;;273    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;274    			}
;;;275    		}break;
;;;276    		case 1://稳压电源ON/OFF
;;;277    		{
;;;278    			sendwait = 1;
000012  2601              MOVS     r6,#1
000014  2901              CMP      r1,#1                 ;261
000016  d06d              BEQ      |L5.244|
000018  2902              CMP      r1,#2                 ;261
00001a  d14a              BNE      |L5.178|
;;;279    //			if( value == 0 ){
;;;280    //				sendwait = 1;
;;;281    ////				PowerSwitch(0);//关闭电源输出
;;;282    ////				Delay_ms(1000);
;;;283    ////				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;284    ////				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;285    //////				Delay_ms(1000);
;;;286    ////				Para.CSET_Voltage = 0;
;;;287    ////				Para.CSET_Current = 0;
;;;288    //////				Delay_ms(1000);
;;;289    ////				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;290    //			}
;;;291    //			else if( value == 1 ){
;;;292    ////				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;293    //////				Delay_ms(1000);
;;;294    ////				PowerSwitch(1);//打开电源输出
;;;295    //				
;;;296    //////				
;;;297    ////				Para.CSET_Voltage = Para.POWER_OutPut_V;
;;;298    ////				Para.CSET_Current = Para.POWER_Limit_C;
;;;299    //////				Delay_ms(1000);
;;;300    ////				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;301    //				
;;;302    //			}
;;;303    		}break;
;;;304    		case 2://过流测试ON/OFF
;;;305    		{
;;;306    			if( value == 0 ){
00001c  f89d1008          LDRB     r1,[sp,#8]
;;;307    				
;;;308    				Off_GPOI_ResetSet();
;;;309    				trig_flag_state = 0;
000020  f8df90f4          LDR      r9,|L5.280|
;;;310    				max_discahrgeNum = 0;
000024  ed9f8a3d          VLDR     s16,|L5.284|
000028  f8df80f4          LDR      r8,|L5.288|
;;;311    				Para.CSET_Current_Laod =  Para.IR_Start_C;
00002c  4c3d              LDR      r4,|L5.292|
00002e  2700              MOVS     r7,#0                 ;306
000030  b371              CBZ      r1,|L5.144|
;;;312    			}
;;;313    			else if( value == 1 ){
000032  f89d1008          LDRB     r1,[sp,#8]
000036  2901              CMP      r1,#1
000038  d13b              BNE      |L5.178|
;;;314    				LOAD_MODE = 0;
00003a  493b              LDR      r1,|L5.296|
00003c  618f              STR      r7,[r1,#0x18]  ; Run_Control
;;;315    				GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
00003e  1481              ASRS     r1,r0,#18
000040  4682              MOV      r10,r0
000042  f7fffffe          BL       GPIO_ResetBits
;;;316    				Para.CSET_Current_Laod =  Para.IR_Start_C;
000046  6c60              LDR      r0,[r4,#0x44]  ; Para
000048  6160              STR      r0,[r4,#0x14]  ; Para
;;;317    				testv = DISS_Voltage;
00004a  4838              LDR      r0,|L5.300|
;;;318    				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
00004c  eddf8a39          VLDR     s17,|L5.308|
000050  ed900a00          VLDR     s0,[r0,#0]            ;317
000054  4836              LDR      r0,|L5.304|
000056  ed800a00          VSTR     s0,[r0,#0]            ;317
00005a  ee200a28          VMUL.F32 s0,s0,s17
00005e  eebd0ac0          VCVT.S32.F32 s0,s0
000062  ee100a10          VMOV     r0,s0
000066  f500707a          ADD      r0,r0,#0x3e8
00006a  60a0              STR      r0,[r4,#8]  ; Para
;;;319    				Para.CSET_Current = 1000;
00006c  f44f707a          MOV      r0,#0x3e8
000070  60e0              STR      r0,[r4,#0xc]  ; Para
;;;320    				shorttime = 0;
000072  4831              LDR      r0,|L5.312|
000074  7007              STRB     r7,[r0,#0]
;;;321    				old_I = 0;
000076  4831              LDR      r0,|L5.316|
;;;322    				max_discahrgeNum = 0;
000078  4647              MOV      r7,r8
00007a  ed808a00          VSTR     s16,[r0,#0]           ;321
00007e  ed888a00          VSTR     s16,[r8,#0]
;;;323    				trig_flag_state = 1;
000082  f8896000          STRB     r6,[r9,#0]
;;;324    				C_DISCHARGE = 1;        	
000086  482e              LDR      r0,|L5.320|
000088  7006              STRB     r6,[r0,#0]
;;;325    				Flag_Swtich_ON = 1;
00008a  6828              LDR      r0,[r5,#0]  ; flagA
00008c  e001              B        |L5.146|
                  |L5.142|
00008e  e014              B        |L5.186|
                  |L5.144|
000090  e032              B        |L5.248|
                  |L5.146|
000092  f0400040          ORR      r0,r0,#0x40
;;;326    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
000096  6028              STR      r0,[r5,#0]  ; flagA
000098  2180              MOVS     r1,#0x80
00009a  4650              MOV      r0,r10
00009c  f7fffffe          BL       GPIO_ResetBits
;;;327    				max_discahrgeNum = (float)Para.IR_Start_C / 1000;
0000a0  6c60              LDR      r0,[r4,#0x44]  ; Para
0000a2  ee000a10          VMOV     s0,r0
0000a6  eeb80a40          VCVT.F32.U32 s0,s0
0000aa  eec00a28          VDIV.F32 s1,s0,s17
0000ae  edc70a00          VSTR     s1,[r7,#0]
                  |L5.178|
;;;328    			}
;;;329    		}break;
;;;330    	}
;;;331    }
0000b2  ecbd8b02          VPOP     {d8}
0000b6  e8bd8ff8          POP      {r3-r11,pc}
                  |L5.186|
0000ba  f89d2008          LDRB     r2,[sp,#8]            ;265
0000be  4914              LDR      r1,|L5.272|
0000c0  6809              LDR      r1,[r1,#0]            ;267
0000c2  b16a              CBZ      r2,|L5.224|
0000c4  f89d2008          LDRB     r2,[sp,#8]            ;270
0000c8  2a01              CMP      r2,#1                 ;270
0000ca  d1f2              BNE      |L5.178|
0000cc  f0410140          ORR      r1,r1,#0x40           ;272
0000d0  6029              STR      r1,[r5,#0]            ;273  ; flagA
0000d2  2180              MOVS     r1,#0x80              ;273
0000d4  ecbd8b02          VPOP     {d8}                  ;273
0000d8  e8bd4ff8          POP      {r3-r11,lr}           ;273
0000dc  f7ffbffe          B.W      GPIO_ResetBits
                  |L5.224|
0000e0  f0210140          BIC      r1,r1,#0x40           ;267
0000e4  6029              STR      r1,[r5,#0]            ;268  ; flagA
0000e6  2180              MOVS     r1,#0x80              ;268
0000e8  ecbd8b02          VPOP     {d8}                  ;268
0000ec  e8bd4ff8          POP      {r3-r11,lr}           ;268
0000f0  f7ffbffe          B.W      GPIO_SetBits
                  |L5.244|
0000f4  7216              STRB     r6,[r2,#8]            ;278
0000f6  e7dc              B        |L5.178|
                  |L5.248|
0000f8  f7fffffe          BL       Off_GPOI_ResetSet
0000fc  f8897000          STRB     r7,[r9,#0]            ;309
000100  ed888a00          VSTR     s16,[r8,#0]           ;310
000104  6c60              LDR      r0,[r4,#0x44]         ;311  ; Para
000106  6160              STR      r0,[r4,#0x14]         ;311  ; Para
000108  e7d3              B        |L5.178|
;;;332    
                          ENDP

00010a  0000              DCW      0x0000
                  |L5.268|
                          DCD      ||.data||
                  |L5.272|
                          DCD      flagA
                  |L5.276|
                          DCD      0x40020800
                  |L5.280|
                          DCD      trig_flag_state
                  |L5.284|
00011c  00000000          DCFS     0x00000000 ; 0
                  |L5.288|
                          DCD      max_discahrgeNum
                  |L5.292|
                          DCD      Para
                  |L5.296|
                          DCD      Run_Control
                  |L5.300|
                          DCD      DISS_Voltage
                  |L5.304|
                          DCD      testv
                  |L5.308|
000134  447a0000          DCFS     0x447a0000 ; 1000
                  |L5.312|
                          DCD      shorttime
                  |L5.316|
                          DCD      old_I
                  |L5.320|
                          DCD      C_DISCHARGE

                          AREA ||i.MODE_PARASET||, CODE, READONLY, ALIGN=2

                  MODE_PARASET PROC
;;;437    
;;;438    void MODE_PARASET(vu8 value)
000000  b530              PUSH     {r4,r5,lr}
;;;439    {
;;;440    	switch(MODE)
000002  4d13              LDR      r5,|L6.80|
000004  7968              LDRB     r0,[r5,#5]  ; MODE
000006  2400              MOVS     r4,#0
;;;441    	{
;;;442    		case 0://电子负载
;;;443    		{
;;;444    			Para.CSET_Current_Laod = Para.LOAD_C;
000008  4912              LDR      r1,|L6.84|
;;;445    			Para.CSET_Voltage_Laod = Para.LOAD_V;
;;;446    			if(Para.CSET_Current_Laod > 20000)
;;;447    			{
;;;448    				LOAD_I_SW = 1;
00000a  4a13              LDR      r2,|L6.88|
00000c  2301              MOVS     r3,#1
00000e  b138              CBZ      r0,|L6.32|
000010  2801              CMP      r0,#1                 ;440
000012  d013              BEQ      |L6.60|
000014  2802              CMP      r0,#2                 ;440
000016  d013              BEQ      |L6.64|
000018  2803              CMP      r0,#3                 ;440
00001a  d10c              BNE      |L6.54|
;;;449    			}else{
;;;450    				LOAD_I_SW = 0;
;;;451    			}
;;;452    		}break;
;;;453    		case 1://稳压电源
;;;454    		{
;;;455    //			if(USART3_Recive_flg == 1)
;;;456    //			{
;;;457    				sendwait = 1;
;;;458    //			}else{
;;;459    //				SetPowerMode();
;;;460    //			}
;;;461    //			Para.CSET_Voltage = Para.POWER_OutPut_V;
;;;462    //			SetPowerV(Para.POWER_OutPut_V);
;;;463    //	//			Para.CSET_Current = Para.POWER_Limit_C;
;;;464    //			SetPowerC(Para.POWER_Limit_C);
;;;465    		}break;
;;;466    		case 2://过流测试
;;;467    		{
;;;468    			LOAD_MODE = 0;
;;;469    			LOAD_I_SW = 1;
;;;470    			Para.CSET_Current = 1000;
;;;471    			Para.CSET_Current_Laod = Para.IR_Start_C;
;;;472    		}break;
;;;473    		case 3://列表
;;;474    		{
;;;475    			LOAD_MODE = 0;
00001c  6194              STR      r4,[r2,#0x18]  ; Run_Control
;;;476    			LOAD_I_SW = 1;
;;;477    //			Para.CSET_Current = 1000;
;;;478    		}break;
00001e  e009              B        |L6.52|
                  |L6.32|
000020  6dc8              LDR      r0,[r1,#0x5c]         ;444  ; Para
000022  6148              STR      r0,[r1,#0x14]         ;444  ; Para
000024  f8b10060          LDRH     r0,[r1,#0x60]         ;445  ; Para
000028  6108              STR      r0,[r1,#0x10]         ;445  ; Para
00002a  6948              LDR      r0,[r1,#0x14]         ;446  ; Para
00002c  f6446120          MOV      r1,#0x4e20            ;446
000030  4288              CMP      r0,r1                 ;446
000032  d901              BLS      |L6.56|
                  |L6.52|
000034  6213              STR      r3,[r2,#0x20]         ;448  ; Run_Control
                  |L6.54|
;;;479    	}
;;;480    }
000036  bd30              POP      {r4,r5,pc}
                  |L6.56|
000038  6214              STR      r4,[r2,#0x20]         ;450  ; Run_Control
00003a  bd30              POP      {r4,r5,pc}
                  |L6.60|
00003c  722b              STRB     r3,[r5,#8]            ;457
00003e  bd30              POP      {r4,r5,pc}
                  |L6.64|
000040  6194              STR      r4,[r2,#0x18]         ;468  ; Run_Control
000042  6213              STR      r3,[r2,#0x20]         ;469  ; Run_Control
000044  f44f707a          MOV      r0,#0x3e8             ;470
000048  60c8              STR      r0,[r1,#0xc]          ;470  ; Para
00004a  6c48              LDR      r0,[r1,#0x44]         ;471  ; Para
00004c  6148              STR      r0,[r1,#0x14]         ;471  ; Para
00004e  bd30              POP      {r4,r5,pc}
;;;481    
                          ENDP

                  |L6.80|
                          DCD      ||.data||
                  |L6.84|
                          DCD      Para
                  |L6.88|
                          DCD      Run_Control

                          AREA ||i.PowerSwitch||, CODE, READONLY, ALIGN=2

                  PowerSwitch PROC
;;;182    
;;;183    void PowerSwitch(vu8 bit)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;184    {
;;;185    	MasterSendbuf[0] = 0x01;
000002  4c0f              LDR      r4,|L7.64|
000004  2001              MOVS     r0,#1
;;;186    	MasterSendbuf[1] = 0x06;
000006  2106              MOVS     r1,#6
000008  7020              STRB     r0,[r4,#0]            ;185
00000a  7061              STRB     r1,[r4,#1]
;;;187    	MasterSendbuf[2] = 0x00;
00000c  2100              MOVS     r1,#0
00000e  70a1              STRB     r1,[r4,#2]
;;;188    	MasterSendbuf[3] = 0x01;
000010  70e0              STRB     r0,[r4,#3]
;;;189    	MasterSendbuf[4] = (u8)(bit>>8);
000012  f89d0000          LDRB     r0,[sp,#0]
000016  7121              STRB     r1,[r4,#4]
;;;190    	MasterSendbuf[5] = (u8)(bit);
000018  f89d0000          LDRB     r0,[sp,#0]
00001c  7160              STRB     r0,[r4,#5]
;;;191    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00001e  2106              MOVS     r1,#6
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       Hardware_CRC
000026  71a0              STRB     r0,[r4,#6]
;;;192    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000028  2106              MOVS     r1,#6
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       Hardware_CRC
000030  0a00              LSRS     r0,r0,#8
000032  71e0              STRB     r0,[r4,#7]
;;;193    	USART3WriteDMA(8);
000034  e8bd4038          POP      {r3-r5,lr}
000038  2008              MOVS     r0,#8
00003a  f7ffbffe          B.W      USART3WriteDMA
;;;194    }
;;;195    
                          ENDP

00003e  0000              DCW      0x0000
                  |L7.64|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.ReadPowData||, CODE, READONLY, ALIGN=2

                  ReadPowData PROC
;;;195    
;;;196    void ReadPowData(void)
000000  b510              PUSH     {r4,lr}
;;;197    {
;;;198    	MasterSendbuf[0] = 0x01;
000002  4c0e              LDR      r4,|L8.60|
000004  2001              MOVS     r0,#1
;;;199    	MasterSendbuf[1] = 0x03;
;;;200    	MasterSendbuf[2] = 0x00;
;;;201    	MasterSendbuf[3] = 0x10;
000006  2110              MOVS     r1,#0x10
000008  7020              STRB     r0,[r4,#0]            ;198
00000a  2003              MOVS     r0,#3                 ;199
00000c  7060              STRB     r0,[r4,#1]            ;199
00000e  2000              MOVS     r0,#0                 ;200
000010  70a0              STRB     r0,[r4,#2]            ;200
000012  70e1              STRB     r1,[r4,#3]
;;;202    	MasterSendbuf[4] = 0x00;
000014  7120              STRB     r0,[r4,#4]
;;;203    	MasterSendbuf[5] = 0x02;
000016  2002              MOVS     r0,#2
000018  7160              STRB     r0,[r4,#5]
;;;204    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00001a  2106              MOVS     r1,#6
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       Hardware_CRC
000022  71a0              STRB     r0,[r4,#6]
;;;205    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000024  2106              MOVS     r1,#6
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       Hardware_CRC
00002c  0a00              LSRS     r0,r0,#8
00002e  71e0              STRB     r0,[r4,#7]
;;;206    	USART3WriteDMA(8);
000030  e8bd4010          POP      {r4,lr}
000034  2008              MOVS     r0,#8
000036  f7ffbffe          B.W      USART3WriteDMA
;;;207    }
;;;208    
                          ENDP

00003a  0000              DCW      0x0000
                  |L8.60|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.SerialRemoteHandleL||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  SerialRemoteHandleL PROC
;;;925    
;;;926    u16 SerialRemoteHandleL(u8 len,char* buf)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;927    {
000004  ed2d8b02          VPUSH    {d8}
000008  b0b3              SUB      sp,sp,#0xcc
00000a  4605              MOV      r5,r0
;;;928    
;;;929      
;;;930        u16 currCharNum;
;;;931        u32 temp1;
;;;932      u8 Gmode_Vale;
;;;933    	u8 i,j;
;;;934    	
;;;935    	u8 addr = 0;
00000c  2000              MOVS     r0,#0
00000e  460c              MOV      r4,r1                 ;927
;;;936    	char str[200]={0};
000010  9032              STR      r0,[sp,#0xc8]
000012  21c8              MOVS     r1,#0xc8
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       __aeabi_memclr4
;;;937    	int cmd_flag=255;
;;;938    	u8 templen =0;
;;;939    	u8 tmpFg;
;;;940    	u8 LM_S_Vale,LOW_I_Vale,H_L_Vale,SWITCH_Vale;
;;;941    	u16 I_ADC_Vale,V_ADC_Vale;
;;;942    	int32_t V_CS_Vale,I_CS_Vale;
;;;943    	float Lvl_Vale,fadcx,fsingal, fVale;
;;;944     
;;;945    //	u8 len = 11;
;;;946    	u8 pntlen = 0;
;;;947    
;;;948    
;;;949    	
;;;950    	currCharNum=0;
;;;951    	if((buf[currCharNum] != ChrStartR) || (buf[len-2] != ChrEndR)||(buf[len-1] != ChrEndS))
00001a  7820              LDRB     r0,[r4,#0]
00001c  283c              CMP      r0,#0x3c
00001e  d108              BNE      |L9.50|
000020  1960              ADDS     r0,r4,r5
000022  f8101c02          LDRB     r1,[r0,#-2]
000026  290d              CMP      r1,#0xd
000028  d103              BNE      |L9.50|
00002a  f8100c01          LDRB     r0,[r0,#-1]
00002e  280a              CMP      r0,#0xa
000030  d001              BEQ      |L9.54|
                  |L9.50|
;;;952        {
;;;953    		return SetErr_ACK(buf,addr ,CMD_ERR); 
000032  2202              MOVS     r2,#2
000034  e161              B        |L9.762|
                  |L9.54|
;;;954        } 
;;;955    	str[currCharNum++] = ChrStartR;
000036  213c              MOVS     r1,#0x3c
000038  f88d1000          STRB     r1,[sp,#0]
;;;956    	sprintf(&str[currCharNum],"%d",addr);
00003c  a1fe              ADR      r1,|L9.1080|
00003e  f10d0001          ADD      r0,sp,#1
000042  9a32              LDR      r2,[sp,#0xc8]
000044  f7fffffe          BL       __2sprintf
;;;957    	strncat(str,"/",1);
000048  2201              MOVS     r2,#1
00004a  a1fc              ADR      r1,|L9.1084|
00004c  4668              MOV      r0,sp
00004e  f7fffffe          BL       strncat
;;;958    	currCharNum =strlen(str);
000052  4668              MOV      r0,sp
000054  f7fffffe          BL       strlen
000058  fa1ffa80          UXTH     r10,r0
;;;959    	cmd_flag=strncmp(buf,str,strlen(str));
00005c  4668              MOV      r0,sp
00005e  f7fffffe          BL       strlen
000062  4602              MOV      r2,r0
000064  4669              MOV      r1,sp
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       strncmp
;;;960    	//testflag = cmd_flag;
;;;961    	if(0!=cmd_flag)
00006c  2800              CMP      r0,#0
00006e  d1e0              BNE      |L9.50|
;;;962    	{
;;;963    		return SetErr_ACK(buf, addr ,CMD_ERR);
;;;964    		
;;;965    	}
;;;966    	for (j=0;j<CmdNumb;j++)
;;;967        {
;;;968    		templen = strlen(CmdStr[j]);
000070  f8dfb3cc          LDR      r11,|L9.1088|
000074  4680              MOV      r8,r0                 ;966
;;;969    		cmd_flag=strncmp(&buf[currCharNum],CmdStr[j],templen);
000076  eb04050a          ADD      r5,r4,r10
                  |L9.122|
00007a  eb0801c8          ADD      r1,r8,r8,LSL #3       ;968
00007e  eb01000b          ADD      r0,r1,r11             ;968
000082  4606              MOV      r6,r0                 ;968
000084  f7fffffe          BL       strlen
000088  f00009ff          AND      r9,r0,#0xff           ;968
00008c  4631              MOV      r1,r6                 ;968
00008e  4628              MOV      r0,r5                 ;968
000090  464a              MOV      r2,r9
000092  f7fffffe          BL       strncmp
;;;970    	    if(0==cmd_flag)
000096  b138              CBZ      r0,|L9.168|
000098  f1080001          ADD      r0,r8,#1              ;966
00009c  f00008ff          AND      r8,r0,#0xff           ;966
0000a0  f1b80f13          CMP      r8,#0x13              ;966
0000a4  d3e9              BCC      |L9.122|
0000a6  e7c4              B        |L9.50|
                  |L9.168|
;;;971    	    {
;;;972    
;;;973    		  buf[0] = ChrStartS;
0000a8  203e              MOVS     r0,#0x3e
0000aa  7020              STRB     r0,[r4,#0]
;;;974    		  currCharNum+=templen;
0000ac  eb0a0009          ADD      r0,r10,r9
0000b0  b285              UXTH     r5,r0
;;;975    		  switch(j)
;;;976              {
;;;977    			case 0:
;;;978    				pntlen = 5;    //
;;;979    				if(buf[currCharNum]=='?')
;;;980    				{
;;;981    
;;;982    					
;;;983    					sprintf(&buf[currCharNum],"%05d",Para.CVoltage);
;;;984    					currCharNum+=pntlen;
;;;985    					
;;;986    					buf[currCharNum++]=(',');
;;;987    					sprintf(&buf[currCharNum],"%06d",Para.CLaod_Current);
;;;988    					currCharNum+=6;
;;;989    					
;;;990    					buf[currCharNum++]=(',');
;;;991    					sprintf(&buf[currCharNum],"%05d",Para.CPOW_Voltage);
;;;992    					currCharNum+=pntlen;
;;;993    					
;;;994    					buf[currCharNum++]=(',');
;;;995    					sprintf(&buf[currCharNum],"%05d",Para.CCurrent);
;;;996    					currCharNum+=pntlen;
;;;997    					
;;;998    					buf[currCharNum++]=(',');
;;;999    					sprintf(&buf[currCharNum],"%05d",Para.CR_VLUE);
;;;1000   					currCharNum+=pntlen;
;;;1001   					
;;;1002   					buf[currCharNum++]=(',');
;;;1003   					sprintf(&buf[currCharNum],"%04d",Para.CR1_VLUE);
;;;1004   					currCharNum+=4;
;;;1005   					
;;;1006   					buf[currCharNum++]=(',');
;;;1007   					sprintf(&buf[currCharNum],"%04d",Para.CR2_VLUE);
;;;1008   					currCharNum+=4;
;;;1009   
;;;1010   					buf[currCharNum++]=(',');
;;;1011   					sprintf(&buf[currCharNum],"%06d",(int)(max_discahrgeNum*1000));
;;;1012   					currCharNum+=6;
;;;1013   					
;;;1014   					buf[currCharNum++]=(',');
;;;1015   					sprintf(&buf[currCharNum],"%03d",shorttime);
;;;1016   					currCharNum+=3;
;;;1017   					
;;;1018   					buf[currCharNum++]=(',');
;;;1019   					sprintf(&buf[currCharNum],"%1d",mainswitch);
;;;1020   					currCharNum+=1;
;;;1021   					
;;;1022   					buf[currCharNum++]=(',');
;;;1023   					sprintf(&buf[currCharNum],"%1d",finishflag);
;;;1024   					currCharNum+=1;
;;;1025   					
;;;1026   					buf[currCharNum++]=(',');
;;;1027   					sprintf(&buf[currCharNum],"%1d",lockflag);
;;;1028   					currCharNum+=1;
;;;1029   					
;;;1030   					buf[currCharNum++]=(',');
;;;1031   					sprintf(&buf[currCharNum],"%2d",version);
;;;1032   					currCharNum+=2;
;;;1033   					
;;;1034   					buf[currCharNum++]=(',');
;;;1035   					sprintf(&buf[currCharNum],"%03d",Temperature);
;;;1036   					currCharNum+=3;
;;;1037   //					buf[currCharNum++]=(',');
;;;1038   //					sprintf(&buf[currCharNum],"%d",H_L);
;;;1039   //					currCharNum++;
;;;1040   					
;;;1041   //					buf[currCharNum++]=(',');
;;;1042   //					sprintf(&buf[currCharNum],"%d",LM_S);
;;;1043   //					currCharNum++;
;;;1044   					
;;;1045   //					buf[currCharNum++]=(',');
;;;1046   //					sprintf(&buf[currCharNum],"%02d",(int)temperature);
;;;1047   //					currCharNum+=2;
;;;1048   					
;;;1049   				  buf[currCharNum++ ] = ChrEndR;
;;;1050   				  buf[currCharNum++ ] = ChrEndS;
;;;1051   				}
;;;1052   				else
;;;1053   				{
;;;1054   					return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1055   				}
;;;1056   				break;
;;;1057   			case 1:
;;;1058   				pntlen = 1;
;;;1059   				if(buf[currCharNum]=='?')
;;;1060   				{
;;;1061   					  sprintf(&buf[currCharNum],"%1d",MODE);
;;;1062   				    currCharNum+=pntlen;
;;;1063   				    buf[currCharNum ++] = ChrEndS;
;;;1064   					
;;;1065   				}
;;;1066   				else
;;;1067   				{
;;;1068   					pntlen = 1;				
;;;1069   					for(i=0,temp1=0;i<pntlen;i++)
;;;1070   					{
;;;1071   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1072   					}		                   
;;;1073   //					if(temp1>1)
;;;1074   //					{
;;;1075   //						return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1076   //					}
;;;1077   					MODE=temp1;
;;;1078   					MODE_PARASET(MODE);
;;;1079   	//				Change_LM_Val(LM_S_Vale);
;;;1080   					buf[currCharNum++] = ChrEndR;
;;;1081   				}
;;;1082   				break;
;;;1083   				case 2:
;;;1084   				pntlen = 1;
;;;1085   				if(buf[currCharNum]=='?')
;;;1086   				{
;;;1087   					sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
0000b2  49e4              LDR      r1,|L9.1092|
0000b4  f8dfb390          LDR      r11,|L9.1096|
;;;1088   				    currCharNum+=pntlen;
;;;1089   				    buf[currCharNum ++] = ChrEndS;
;;;1090   					
;;;1091   				}
;;;1092   				else
;;;1093   				{
;;;1094   					pntlen = 1;				
;;;1095   					for(i=0,temp1=0;i<pntlen;i++)
;;;1096   					{
;;;1097   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1098   					}		                   
;;;1099   					if(temp1>1)
;;;1100   					{
;;;1101   						return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1102   					}
;;;1103   //					MODE=temp1;
;;;1104   					
;;;1105   					
;;;1106   					mainswitch = temp1;
;;;1107   //						Para.CSET_Voltage = 5000;
;;;1108   //						Para.CSET_Current = 1000;
;;;1109   					
;;;1110   						
;;;1111   					MODE_ONOFF(mainswitch);
;;;1112   	//				Change_LM_Val(LM_S_Vale);
;;;1113   					buf[currCharNum++] = ChrEndR;
;;;1114   		        }
;;;1115   				break;
;;;1116   				case 3:
;;;1117   				pntlen = 1;
;;;1118   				if(buf[currCharNum]=='?')
;;;1119   				{
;;;1120   					  sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1121   				    currCharNum+=pntlen;
;;;1122   				    buf[currCharNum ++] = ChrEndS;
;;;1123   					
;;;1124   				}
;;;1125   				else
;;;1126   				{
;;;1127   					if(currCharNum == 0x0b)
;;;1128   					{						
;;;1129   						for(i=0,temp1=0;i<5;i++)
;;;1130   						{
;;;1131   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1132   						}
;;;1133   					}		
;;;1134   					Para.IR_Start_C = temp1;//起始电流
;;;1135   					temp1 = 0;
;;;1136   					
;;;1137   					if(buf[currCharNum++] == ',')
;;;1138   					{
;;;1139   						for(i=0,temp1=0;i<5;i++)
;;;1140   						{
;;;1141   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1142   						}
;;;1143   					}	
;;;1144   					Para.IR_Step_C = temp1;//步进电流
;;;1145   					temp1 = 0;
;;;1146   					 
;;;1147   					if(buf[currCharNum++] == ',')
;;;1148   					{
;;;1149   						for(i=0,temp1=0;i<5;i++)
;;;1150   						{
;;;1151   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1152   						}
;;;1153   					}	
;;;1154   					Para.IR_Threshold_V = temp1;//门槛电压
;;;1155   					temp1 = 0;
;;;1156   					
;;;1157   					if(buf[currCharNum++] == ',')
;;;1158   					{
;;;1159   						for(i=0,temp1=0;i<3;i++)
;;;1160   						{
;;;1161   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1162   						}
;;;1163   					}	
;;;1164   					Para.IR_Step_Time = temp1;//步进时间
;;;1165   					temp1 = 0;
;;;1166   					
;;;1167   					if(buf[currCharNum++] == ',')
;;;1168   					{
;;;1169   						for(i=0,temp1=0;i<5;i++)
;;;1170   						{
;;;1171   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1172   						}
;;;1173   					}	
;;;1174   					Para.POWER_OutPut_V = temp1;//电源电压
;;;1175   					temp1 = 0;
;;;1176   					
;;;1177   					if(buf[currCharNum++] == ',')
;;;1178   					{
;;;1179   						for(i=0,temp1=0;i<5;i++)
;;;1180   						{
;;;1181   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1182   						}
;;;1183   					}	
;;;1184   					Para.POWER_Limit_C = temp1;//电源电流
;;;1185   					temp1 = 0;
;;;1186   					
;;;1187   					if(buf[currCharNum++] == ',')
;;;1188   					{
;;;1189   						for(i=0,temp1=0;i<5;i++)
;;;1190   						{
;;;1191   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1192   						}
;;;1193   					}	
;;;1194   					Para.POWER_Cutoff_C = temp1;//设置充电截止电流
;;;1195   					temp1 = 0;
;;;1196   					
;;;1197   					if(buf[currCharNum++] == ',')
;;;1198   					{
;;;1199   						for(i=0,temp1=0;i<5;i++)
;;;1200   						{
;;;1201   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1202   						}
;;;1203   					}	
;;;1204   					Para.LOAD_V = temp1;//负载电压
;;;1205   					temp1 = 0;
;;;1206   					
;;;1207   					if(buf[currCharNum++] == ',')
;;;1208   					{
;;;1209   						for(i=0,temp1=0;i<5;i++)
;;;1210   						{
;;;1211   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1212   						}
;;;1213   					}	
;;;1214   					Para.LOAD_C = temp1;//负载电流
;;;1215   					temp1 = 0;
;;;1216   					
;;;1217   					if(buf[currCharNum++] == ',')
;;;1218   					{
;;;1219   						for(i=0,temp1=0;i<5;i++)
;;;1220   						{
;;;1221   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1222   						}
;;;1223   					}	
;;;1224   					Para.LOAD_Cutoff_V = temp1;//设置负载截止电压
;;;1225   					temp1 = 0;
;;;1226   					
;;;1227   					if(buf[currCharNum++] == ',')
;;;1228   					{
;;;1229   						for(i=0,temp1=0;i<5;i++)
;;;1230   						{
;;;1231   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1232   						}
;;;1233   					}	
;;;1234   					Para.CDC_OutPut_V = temp1;//设置容量测试充电电压
;;;1235   					temp1 = 0;
;;;1236   					
;;;1237   					if(buf[currCharNum++] == ',')
;;;1238   					{
;;;1239   						for(i=0,temp1=0;i<5;i++)
;;;1240   						{
;;;1241   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1242   						}
;;;1243   					}	
;;;1244   					Para.CDC_Limit_C = temp1;//设置容量测试充电限制电流
;;;1245   					temp1 = 0;
;;;1246   					
;;;1247   					if(buf[currCharNum++] == ',')
;;;1248   					{
;;;1249   						for(i=0,temp1=0;i<5;i++)
;;;1250   						{
;;;1251   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1252   						}
;;;1253   					}	
;;;1254   					Para.CDC_Ccutoff_V = temp1;//设置容量测试充电截止电压
;;;1255   					temp1 = 0;
;;;1256   					
;;;1257   					if(buf[currCharNum++] == ',')
;;;1258   					{
;;;1259   						for(i=0,temp1=0;i<5;i++)
;;;1260   						{
;;;1261   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1262   						}
;;;1263   					}	
;;;1264   					Para.CDC_Ccutoff_C = temp1;//设置容量测试充电截止电流
;;;1265   					temp1 = 0;
;;;1266   					
;;;1267   					if(buf[currCharNum++] == ',')
;;;1268   					{
;;;1269   						for(i=0,temp1=0;i<5;i++)
;;;1270   						{
;;;1271   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1272   						}
;;;1273   					}	
;;;1274   					Para.CDC_Load_C = temp1;//设置容量测试放电电流
;;;1275   					temp1 = 0;
;;;1276   					
;;;1277   					if(buf[currCharNum++] == ',')
;;;1278   					{
;;;1279   						for(i=0,temp1=0;i<5;i++)
;;;1280   						{
;;;1281   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1282   						}
;;;1283   					}	
;;;1284   					Para.CDC_Dcutoff_V = temp1;//设置容量测试放电截止电压
;;;1285   					temp1 = 0;
;;;1286   					
;;;1287   					if(buf[currCharNum++] == ',')
;;;1288   					{
;;;1289   						for(i=0,temp1=0;i<3;i++)
;;;1290   						{
;;;1291   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1292   						}
;;;1293   					}	
;;;1294   					Para.CDC_Cycle_Time = temp1;//循环次数
;;;1295   					temp1 = 0;
;;;1296   					
;;;1297   					if(buf[currCharNum++] == ',')
;;;1298   					{
;;;1299   						for(i=0,temp1=0;i<3;i++)
;;;1300   						{
;;;1301   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1302   						}
;;;1303   					}	
;;;1304   					if(MODE == 0)
;;;1305   					{
;;;1306   						LOAD_MODE = temp1;//负载模式
0000b8  f8dfa390          LDR      r10,|L9.1100|
0000bc  4640              MOV      r0,r8                 ;975
0000be  f04f090a          MOV      r9,#0xa               ;951
0000c2  f06f062f          MVN      r6,#0x2f              ;1071
0000c6  f1b80f04          CMP      r8,#4                 ;975
0000ca  d07c              BEQ      |L9.454|
0000cc  dc0d              BGT      |L9.234|
0000ce  b350              CBZ      r0,|L9.294|
0000d0  2801              CMP      r0,#1                 ;975
0000d2  d079              BEQ      |L9.456|
0000d4  2802              CMP      r0,#2                 ;975
0000d6  d078              BEQ      |L9.458|
0000d8  f1b80f03          CMP      r8,#3                 ;975
0000dc  d1a9              BNE      |L9.50|
0000de  5d60              LDRB     r0,[r4,r5]            ;1118
0000e0  283f              CMP      r0,#0x3f              ;1118
0000e2  d073              BEQ      |L9.460|
0000e4  2d0b              CMP      r5,#0xb               ;1127
0000e6  d072              BEQ      |L9.462|
0000e8  e12e              B        |L9.840|
                  |L9.234|
0000ea  280c              CMP      r0,#0xc               ;975
0000ec  d070              BEQ      |L9.464|
0000ee  280d              CMP      r0,#0xd               ;975
0000f0  d06f              BEQ      |L9.466|
0000f2  280e              CMP      r0,#0xe               ;975
0000f4  d06e              BEQ      |L9.468|
0000f6  f1b80f12          CMP      r8,#0x12              ;975
0000fa  d19a              BNE      |L9.50|
;;;1307   					}
;;;1308   					temp1 = 0;
;;;1309   //					MODE_PARASET(MODE);
;;;1310   					
;;;1311   					if(buf[currCharNum++] == ',')
;;;1312   					{
;;;1313   						for(i=0,temp1=0;i<3;i++)
;;;1314   						{
;;;1315   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1316   						}
;;;1317   					}	
;;;1318   					Rraly = temp1;//内阻档位
;;;1319   					temp1 = 0;
;;;1320   					
;;;1321   					if(buf[currCharNum++] == ',')
;;;1322   					{
;;;1323   						for(i=0,temp1=0;i<3;i++)
;;;1324   						{
;;;1325   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1326   						}
;;;1327   					}	
;;;1328   					Para.ACT_DELAY = temp1;//激活延时
;;;1329   					temp1 = 0;
;;;1330   					
;;;1331   					MODE_PARASET(MODE);
;;;1332   					
;;;1333   					 buf[currCharNum++] = ChrEndS;
;;;1334   		        }
;;;1335   				break;
;;;1336   				case 4:
;;;1337   				pntlen = 1;
;;;1338   				if(buf[currCharNum]=='?')
;;;1339   				{
;;;1340   					  sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1341   				    currCharNum+=pntlen;
;;;1342   				    buf[currCharNum ++] = ChrEndS;
;;;1343   					
;;;1344   				}
;;;1345   				else
;;;1346   				{
;;;1347   					if(currCharNum == 0x0b)
;;;1348   					{						
;;;1349   						for(i=0,temp1=0;i<2;i++)
;;;1350   						{
;;;1351   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1352   						}
;;;1353   					}
;;;1354   					MODE = temp1;//项目
;;;1355   					temp1 = 0;
;;;1356   					
;;;1357   					if(MODE == 0)
;;;1358   					{
;;;1359   						if(buf[currCharNum++] == ',')
;;;1360   						{
;;;1361   							for(i=0,temp1=0;i<5;i++)
;;;1362   							{
;;;1363   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1364   							}
;;;1365   						}	
;;;1366   						
;;;1367   						temp1 = 0;
;;;1368   						
;;;1369   						if(buf[currCharNum++] == ',')
;;;1370   						{
;;;1371   							for(i=0,temp1=0;i<5;i++)
;;;1372   							{
;;;1373   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1374   							}
;;;1375   						}	
;;;1376   						Para.CSET_Current_Laod = temp1;//负载电流
;;;1377   						temp1 = 0;
;;;1378   						
;;;1379   	
;;;1380   						if(Para.CSET_Current_Laod > 20000)
;;;1381   						{
;;;1382   							LOAD_I_SW = 1;
;;;1383   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1384   						}else{
;;;1385   							LOAD_I_SW = 0;
;;;1386   							GPIO_SetBits(GPIOC,GPIO_Pin_11);//电流测量为低档位
;;;1387   						}
;;;1388   						if(buf[currCharNum++] == ',')
;;;1389   						{
;;;1390   							for(i=0,temp1=0;i<1;i++)
;;;1391   							{
;;;1392   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1393   							}
;;;1394   						}
;;;1395   						mainswitch = temp1;//开关
;;;1396   						if(mainswitch == 0)
;;;1397   						{
;;;1398   							LOAD_I_SW = 1;
;;;1399   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1400   						}
;;;1401   					}else if(MODE == 1){
;;;1402   						if(buf[currCharNum++] == ',')
;;;1403   						{
;;;1404   							for(i=0,temp1=0;i<5;i++)
;;;1405   							{
;;;1406   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1407   							}
;;;1408   						}	
;;;1409   						Para.CDC_OutPut_V = temp1;//电源电压
;;;1410   						temp1 = 0;
;;;1411   						
;;;1412   						if(buf[currCharNum++] == ',')
;;;1413   						{
;;;1414   							for(i=0,temp1=0;i<5;i++)
;;;1415   							{
;;;1416   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1417   							}
;;;1418   						}	
;;;1419   						Para.CDC_Limit_C = temp1;//电源电流
;;;1420   						temp1 = 0;
;;;1421   						
;;;1422   						if(buf[currCharNum++] == ',')
;;;1423   						{
;;;1424   							for(i=0,temp1=0;i<1;i++)
;;;1425   							{
;;;1426   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1427   							}
;;;1428   						}
;;;1429   						mainswitch = temp1;//开关
;;;1430   					}else if(MODE == 2){
;;;1431   						LOAD_I_SW = 1;
;;;1432   						GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1433   						if(buf[currCharNum++] == ',')
;;;1434   						{
;;;1435   							for(i=0,temp1=0;i<5;i++)
;;;1436   							{
;;;1437   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1438   							}
;;;1439   						}	
;;;1440   						Para.IR_Start_C = temp1;//起始电流
;;;1441   						temp1 = 0;
;;;1442   						
;;;1443   						if(buf[currCharNum++] == ',')
;;;1444   						{
;;;1445   							for(i=0,temp1=0;i<5;i++)
;;;1446   							{
;;;1447   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1448   							}
;;;1449   						}	
;;;1450   						Para.IR_Step_C = temp1;//步进电流
;;;1451   						temp1 = 0;
;;;1452   						
;;;1453   						if(buf[currCharNum++] == ',')
;;;1454   						{
;;;1455   							for(i=0,temp1=0;i<1;i++)
;;;1456   							{
;;;1457   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1458   							}
;;;1459   						}
;;;1460   						mainswitch = temp1;//开关
;;;1461   						finishflag = 0;
;;;1462   					}else if(MODE == 3){
;;;1463   						if(buf[currCharNum++] == ',')
;;;1464   						{
;;;1465   							for(i=0,temp1=0;i<5;i++)
;;;1466   							{
;;;1467   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1468   							}
;;;1469   						}	
;;;1470   						Para.CDC_OutPut_V = temp1;//电源电压
;;;1471   						temp1 = 0;
;;;1472   						
;;;1473   						
;;;1474   						if(buf[currCharNum++] == ',')
;;;1475   						{
;;;1476   							for(i=0,temp1=0;i<5;i++)
;;;1477   							{
;;;1478   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1479   							}
;;;1480   						}	
;;;1481   						Para.CDC_Limit_C = temp1;//电源电流
;;;1482   						temp1 = 0;
;;;1483   						
;;;1484   						if(buf[currCharNum++] == ',')
;;;1485   						{
;;;1486   							for(i=0,temp1=0;i<1;i++)
;;;1487   							{
;;;1488   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1489   							}
;;;1490   						}
;;;1491   						mainswitch = temp1;//开关
;;;1492   						
;;;1493   						
;;;1494   					}else if(MODE == 4){
;;;1495   						if(buf[currCharNum++] == ',')
;;;1496   						{
;;;1497   							for(i=0,temp1=0;i<5;i++)
;;;1498   							{
;;;1499   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1500   							}
;;;1501   						}	
;;;1502   						
;;;1503   						temp1 = 0;
;;;1504   						
;;;1505   						if(buf[currCharNum++] == ',')
;;;1506   						{
;;;1507   							for(i=0,temp1=0;i<5;i++)
;;;1508   							{
;;;1509   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1510   							}
;;;1511   						}	
;;;1512   						Para.CSET_Current_Laod = temp1;//负载电流
;;;1513   						temp1 = 0;
;;;1514   						
;;;1515   	
;;;1516   						if(Para.CSET_Current_Laod > 20000)
;;;1517   						{
;;;1518   							LOAD_I_SW = 1;
;;;1519   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1520   						}else{
;;;1521   							LOAD_I_SW = 0;
;;;1522   							GPIO_SetBits(GPIOC,GPIO_Pin_11);//电流测量为低档位
;;;1523   						}
;;;1524   						if(buf[currCharNum++] == ',')
;;;1525   						{
;;;1526   							for(i=0,temp1=0;i<1;i++)
;;;1527   							{
;;;1528   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1529   							}
;;;1530   						}
;;;1531   						mainswitch = temp1;//开关
;;;1532   						if(mainswitch == 0)
;;;1533   						{
;;;1534   							LOAD_I_SW = 1;
;;;1535   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1536   						}
;;;1537   					}else if(MODE == 5){
;;;1538   						if(buf[currCharNum++] == ',')
;;;1539   						{
;;;1540   							for(i=0,temp1=0;i<5;i++)
;;;1541   							{
;;;1542   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1543   							}
;;;1544   						}	
;;;1545   						temp1 = 0;
;;;1546   						
;;;1547   						if(buf[currCharNum++] == ',')
;;;1548   						{
;;;1549   							for(i=0,temp1=0;i<5;i++)
;;;1550   							{
;;;1551   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1552   							}
;;;1553   						}	
;;;1554   						temp1 = 0;
;;;1555   						
;;;1556   						if(buf[currCharNum++] == ',')
;;;1557   						{
;;;1558   							for(i=0,temp1=0;i<1;i++)
;;;1559   							{
;;;1560   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1561   							}
;;;1562   						}
;;;1563   						mainswitch = temp1;//开关
;;;1564   						if(mainswitch == 0)
;;;1565   						{
;;;1566   							mainswitch = 0;
;;;1567   						}
;;;1568   					}else if(MODE == 6){
;;;1569   						if(buf[currCharNum++] == ',')
;;;1570   						{
;;;1571   							for(i=0,temp1=0;i<5;i++)
;;;1572   							{
;;;1573   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1574   							}
;;;1575   						}	
;;;1576   						temp1 = 0;
;;;1577   						
;;;1578   						if(buf[currCharNum++] == ',')
;;;1579   						{
;;;1580   							for(i=0,temp1=0;i<5;i++)
;;;1581   							{
;;;1582   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1583   							}
;;;1584   						}	
;;;1585   						temp1 = 0;
;;;1586   						
;;;1587   						if(buf[currCharNum++] == ',')
;;;1588   						{
;;;1589   							for(i=0,temp1=0;i<1;i++)
;;;1590   							{
;;;1591   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1592   							}
;;;1593   						}
;;;1594   						mainswitch = temp1;//开关
;;;1595   					}
;;;1596   					
;;;1597   					temp1 = 0;
;;;1598   //					MODE_PARASET(MODE);
;;;1599   					Off_GPOI_ResetSet();
;;;1600   					LIST_ONOFF(mainswitch);
;;;1601   					buf[currCharNum++] = ChrEndS;
;;;1602   		        }
;;;1603   				break;
;;;1604   				case 12://电压校准
;;;1605   				{
;;;1606   					pntlen = 8;
;;;1607   					if(buf[currCharNum]=='?')
;;;1608   					{
;;;1609   						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1610   						sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1611   						currCharNum+=pntlen;
;;;1612   						buf[currCharNum++ ] = ChrEndS;
;;;1613   					}
;;;1614   					else
;;;1615   					{
;;;1616   						tmpFg = 1;
;;;1617   						for(i=0;i<pntlen;i++)
;;;1618   						{
;;;1619   						   if(i==0||i==4)
;;;1620   							  continue;
;;;1621   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1622   						   {
;;;1623   							  tmpFg = (tmpFg&0x01);
;;;1624   						   }
;;;1625   						   else
;;;1626   						   {
;;;1627   							  tmpFg = 0;
;;;1628   						   }
;;;1629   						}
;;;1630   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1631   						{
;;;1632   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1633   							
;;;1634   						}
;;;1635   						temp1=0;
;;;1636   						for(i=0;i<pntlen;i++)
;;;1637   						{
;;;1638   						   if(i==0)
;;;1639   						   {
;;;1640   							   fsingal = buf[currCharNum++]-0x30;
;;;1641   							   continue; 
;;;1642   						   } 
;;;1643   						   else if(i==4)
;;;1644   						   {
;;;1645   							   currCharNum++;
;;;1646   							   continue; 
;;;1647   						   }
;;;1648   						   else									 
;;;1649   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1650   						}	
;;;1651   						CalHandle(0,fsingal,temp1);
;;;1652   						
;;;1653   					}
;;;1654   				}break;
;;;1655   				case 13://电流校准
;;;1656   				{
;;;1657   					pntlen = 8;
;;;1658   					if(buf[currCharNum]=='?')
;;;1659   					{
;;;1660   //						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1661   //									sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1662   //						currCharNum+=pntlen;
;;;1663   //						buf[currCharNum++ ] = ChrEndS;
;;;1664   					}
;;;1665   					else
;;;1666   					{
;;;1667   						tmpFg = 1;
;;;1668   						for(i=0;i<pntlen;i++)
;;;1669   						{
;;;1670   						   if(i==0||i==4)
;;;1671   							  continue;
;;;1672   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1673   						   {
;;;1674   							  tmpFg = (tmpFg&0x01);
;;;1675   						   }
;;;1676   						   else
;;;1677   						   {
;;;1678   							  tmpFg = 0;
;;;1679   						   }
;;;1680   						}
;;;1681   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1682   						{
;;;1683   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1684   							
;;;1685   						}
;;;1686   						temp1=0;
;;;1687   						for(i=0;i<pntlen;i++)
;;;1688   						{
;;;1689   						   if(i==0)
;;;1690   						   {
;;;1691   							   fsingal = buf[currCharNum++]-0x30;
;;;1692   							   continue; 
;;;1693   						   } 
;;;1694   						   else if(i==4)
;;;1695   						   {
;;;1696   							   currCharNum++;
;;;1697   							   continue; 
;;;1698   						   }
;;;1699   						   else									 
;;;1700   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1701   						}	
;;;1702   						CalHandle(1,fsingal,temp1);
;;;1703   						
;;;1704   					}
;;;1705   				}break;
;;;1706   				case 14://电阻校准
;;;1707   				{
;;;1708   					pntlen = 6;
;;;1709   					if(buf[currCharNum]=='?')
;;;1710   					{
;;;1711   						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1712   									sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1713   						currCharNum+=pntlen;
;;;1714   						buf[currCharNum++ ] = ChrEndS;
;;;1715   					}
;;;1716   					else
;;;1717   					{
;;;1718   						tmpFg = 1;
;;;1719   						for(i=0;i<pntlen;i++)
;;;1720   						{
;;;1721   						   if(i==0||i==4)
;;;1722   							  continue;
;;;1723   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1724   						   {
;;;1725   							  tmpFg = (tmpFg&0x01);
;;;1726   						   }
;;;1727   						   else
;;;1728   						   {
;;;1729   							  tmpFg = 0;
;;;1730   						   }
;;;1731   						}
;;;1732   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1733   						{
;;;1734   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1735   							
;;;1736   						}
;;;1737   						temp1=0;
;;;1738   						for(i=0;i<pntlen;i++)
;;;1739   						{
;;;1740   						   if(i==0)
;;;1741   						   {
;;;1742   							   fsingal = buf[currCharNum++]-0x30;
;;;1743   							   continue; 
;;;1744   						   } 
;;;1745   //						   else if(i==4)
;;;1746   //						   {
;;;1747   //							   currCharNum++;
;;;1748   //							   continue; 
;;;1749   //						   }
;;;1750   //						   else									 
;;;1751   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1752   						}
;;;1753   						CalHandle(2,fsingal,temp1);
;;;1754   						
;;;1755   					}
;;;1756   				}break;
;;;1757   				case 18:
;;;1758   				{
;;;1759   					if(buf[currCharNum]=='?')
0000fc  5d60              LDRB     r0,[r4,r5]
0000fe  283f              CMP      r0,#0x3f
000100  d069              BEQ      |L9.470|
;;;1760   					{
;;;1761   //						sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1762   //						currCharNum+=pntlen;
;;;1763   //						buf[currCharNum ++] = ChrEndS;
;;;1764   						
;;;1765   					}
;;;1766   					else
;;;1767   					{
;;;1768   						pntlen = 1;				
000102  2101              MOVS     r1,#1
;;;1769   						for(i=0,temp1=0;i<pntlen;i++)
000104  2000              MOVS     r0,#0
000106  4607              MOV      r7,r0
                  |L9.264|
;;;1770   						{
;;;1771   							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
000108  5d62              LDRB     r2,[r4,r5]
00010a  eb070387          ADD      r3,r7,r7,LSL #2
00010e  eb060343          ADD      r3,r6,r3,LSL #1
000112  1c6d              ADDS     r5,r5,#1
000114  1c40              ADDS     r0,r0,#1
000116  18d7              ADDS     r7,r2,r3
000118  b2c0              UXTB     r0,r0                 ;1769
00011a  b2ad              UXTH     r5,r5
00011c  4288              CMP      r0,r1                 ;1769
00011e  d3f3              BCC      |L9.264|
;;;1772   						}		                   
;;;1773   						if(temp1>1)
000120  2f01              CMP      r7,#1
000122  d87d              BHI      |L9.544|
000124  e3fd              B        |L9.2338|
                  |L9.294|
000126  5d60              LDRB     r0,[r4,r5]            ;979
000128  283f              CMP      r0,#0x3f              ;979
00012a  d182              BNE      |L9.50|
00012c  f8db202c          LDR      r2,[r11,#0x2c]        ;983  ; Para
000130  465e              MOV      r6,r11                ;983
000132  1960              ADDS     r0,r4,r5              ;983
000134  a1c6              ADR      r1,|L9.1104|
000136  f7fffffe          BL       __2sprintf
00013a  1d6d              ADDS     r5,r5,#5              ;983
00013c  b2a8              UXTH     r0,r5                 ;984
00013e  252c              MOVS     r5,#0x2c              ;986
000140  5425              STRB     r5,[r4,r0]            ;986
000142  1c40              ADDS     r0,r0,#1              ;986
000144  6b72              LDR      r2,[r6,#0x34]         ;987  ; Para
000146  b287              UXTH     r7,r0                 ;986
000148  19e0              ADDS     r0,r4,r7              ;987
00014a  a1c3              ADR      r1,|L9.1112|
00014c  f7fffffe          BL       __2sprintf
000150  1dbf              ADDS     r7,r7,#6              ;987
000152  b2b8              UXTH     r0,r7                 ;988
000154  5425              STRB     r5,[r4,r0]            ;990
000156  1c40              ADDS     r0,r0,#1              ;990
000158  6ab2              LDR      r2,[r6,#0x28]         ;991  ; Para
00015a  b287              UXTH     r7,r0                 ;990
00015c  19e0              ADDS     r0,r4,r7              ;991
00015e  a1bc              ADR      r1,|L9.1104|
000160  f7fffffe          BL       __2sprintf
000164  1d7f              ADDS     r7,r7,#5              ;991
000166  b2b8              UXTH     r0,r7                 ;992
000168  5425              STRB     r5,[r4,r0]            ;994
00016a  1c40              ADDS     r0,r0,#1              ;994
00016c  6b32              LDR      r2,[r6,#0x30]         ;995  ; Para
00016e  b287              UXTH     r7,r0                 ;994
000170  19e0              ADDS     r0,r4,r7              ;995
000172  a1b7              ADR      r1,|L9.1104|
000174  f7fffffe          BL       __2sprintf
000178  1d7f              ADDS     r7,r7,#5              ;995
00017a  b2b8              UXTH     r0,r7                 ;996
00017c  5425              STRB     r5,[r4,r0]            ;998
00017e  1c40              ADDS     r0,r0,#1              ;998
000180  6bb2              LDR      r2,[r6,#0x38]         ;999  ; Para
000182  b287              UXTH     r7,r0                 ;998
000184  19e0              ADDS     r0,r4,r7              ;999
000186  a1b2              ADR      r1,|L9.1104|
000188  f7fffffe          BL       __2sprintf
00018c  1d7f              ADDS     r7,r7,#5              ;999
00018e  b2b8              UXTH     r0,r7                 ;1000
000190  5425              STRB     r5,[r4,r0]            ;1002
000192  1c40              ADDS     r0,r0,#1              ;1002
000194  6bf2              LDR      r2,[r6,#0x3c]         ;1003  ; Para
000196  b287              UXTH     r7,r0                 ;1002
000198  19e0              ADDS     r0,r4,r7              ;1003
00019a  a1b1              ADR      r1,|L9.1120|
00019c  f7fffffe          BL       __2sprintf
0001a0  1d3f              ADDS     r7,r7,#4              ;1003
0001a2  b2b8              UXTH     r0,r7                 ;1004
0001a4  5425              STRB     r5,[r4,r0]            ;1006
0001a6  1c40              ADDS     r0,r0,#1              ;1006
0001a8  6c32              LDR      r2,[r6,#0x40]         ;1007  ; Para
0001aa  b287              UXTH     r7,r0                 ;1006
0001ac  19e0              ADDS     r0,r4,r7              ;1007
0001ae  a1ac              ADR      r1,|L9.1120|
0001b0  f7fffffe          BL       __2sprintf
0001b4  1d3f              ADDS     r7,r7,#4              ;1007
0001b6  b2b8              UXTH     r0,r7                 ;1008
0001b8  5425              STRB     r5,[r4,r0]            ;1010
0001ba  1c40              ADDS     r0,r0,#1              ;1010
0001bc  b286              UXTH     r6,r0                 ;1010
0001be  48aa              LDR      r0,|L9.1128|
0001c0  ed900a00          VLDR     s0,[r0,#0]            ;1011
0001c4  e008              B        |L9.472|
                  |L9.454|
0001c6  e283              B        |L9.1744|
                  |L9.456|
0001c8  e05f              B        |L9.650|
                  |L9.458|
0001ca  e081              B        |L9.720|
                  |L9.460|
0001cc  e102              B        |L9.980|
                  |L9.462|
0001ce  e0ad              B        |L9.812|
                  |L9.464|
0001d0  e3f7              B        |L9.2498|
                  |L9.466|
0001d2  e3f7              B        |L9.2500|
                  |L9.468|
0001d4  e3f7              B        |L9.2502|
                  |L9.470|
0001d6  e3f7              B        |L9.2504|
                  |L9.472|
0001d8  eddf0aa4          VLDR     s1,|L9.1132|
0001dc  19a0              ADDS     r0,r4,r6              ;1011
0001de  a19e              ADR      r1,|L9.1112|
0001e0  ee200a20          VMUL.F32 s0,s0,s1              ;1011
0001e4  eebd0ac0          VCVT.S32.F32 s0,s0                 ;1011
0001e8  ee102a10          VMOV     r2,s0                 ;1011
0001ec  f7fffffe          BL       __2sprintf
0001f0  1db6              ADDS     r6,r6,#6              ;1011
0001f2  b2b0              UXTH     r0,r6                 ;1012
0001f4  499e              LDR      r1,|L9.1136|
0001f6  5425              STRB     r5,[r4,r0]            ;1014
0001f8  1c40              ADDS     r0,r0,#1              ;1014
0001fa  b286              UXTH     r6,r0                 ;1014
0001fc  780a              LDRB     r2,[r1,#0]            ;1015  ; shorttime
0001fe  19a0              ADDS     r0,r4,r6              ;1015
000200  a19c              ADR      r1,|L9.1140|
000202  f7fffffe          BL       __2sprintf
000206  1cf6              ADDS     r6,r6,#3              ;1015
000208  b2b0              UXTH     r0,r6                 ;1016
00020a  498d              LDR      r1,|L9.1088|
00020c  5425              STRB     r5,[r4,r0]            ;1018
00020e  1c40              ADDS     r0,r0,#1              ;1018
000210  b286              UXTH     r6,r0                 ;1018
000212  19a0              ADDS     r0,r4,r6              ;1019
000214  3934              SUBS     r1,r1,#0x34           ;1019
000216  798a              LDRB     r2,[r1,#6]            ;1019  ; mainswitch
000218  a198              ADR      r1,|L9.1148|
00021a  f7fffffe          BL       __2sprintf
00021e  e000              B        |L9.546|
                  |L9.544|
000220  e06a              B        |L9.760|
                  |L9.546|
000222  1c76              ADDS     r6,r6,#1              ;1019
000224  b2b0              UXTH     r0,r6                 ;1020
000226  4996              LDR      r1,|L9.1152|
000228  5425              STRB     r5,[r4,r0]            ;1022
00022a  1c40              ADDS     r0,r0,#1              ;1022
00022c  b286              UXTH     r6,r0                 ;1022
00022e  780a              LDRB     r2,[r1,#0]            ;1023  ; finishflag
000230  19a0              ADDS     r0,r4,r6              ;1023
000232  a192              ADR      r1,|L9.1148|
000234  f7fffffe          BL       __2sprintf
000238  1c76              ADDS     r6,r6,#1              ;1023
00023a  b2b0              UXTH     r0,r6                 ;1024
00023c  4991              LDR      r1,|L9.1156|
00023e  5425              STRB     r5,[r4,r0]            ;1026
000240  1c40              ADDS     r0,r0,#1              ;1026
000242  b286              UXTH     r6,r0                 ;1026
000244  780a              LDRB     r2,[r1,#0]            ;1027  ; lockflag
000246  19a0              ADDS     r0,r4,r6              ;1027
000248  a18c              ADR      r1,|L9.1148|
00024a  f7fffffe          BL       __2sprintf
00024e  1c76              ADDS     r6,r6,#1              ;1027
000250  b2b0              UXTH     r0,r6                 ;1028
000252  498d              LDR      r1,|L9.1160|
000254  5425              STRB     r5,[r4,r0]            ;1030
000256  1c40              ADDS     r0,r0,#1              ;1030
000258  b286              UXTH     r6,r0                 ;1030
00025a  780a              LDRB     r2,[r1,#0]            ;1031  ; version
00025c  19a0              ADDS     r0,r4,r6              ;1031
00025e  a18b              ADR      r1,|L9.1164|
000260  f7fffffe          BL       __2sprintf
000264  1cb6              ADDS     r6,r6,#2              ;1031
000266  b2b0              UXTH     r0,r6                 ;1032
000268  4989              LDR      r1,|L9.1168|
00026a  5425              STRB     r5,[r4,r0]            ;1034
00026c  1c40              ADDS     r0,r0,#1              ;1034
00026e  b285              UXTH     r5,r0                 ;1034
000270  f9b12000          LDRSH    r2,[r1,#0]            ;1035  ; Temperature
000274  1960              ADDS     r0,r4,r5              ;1035
000276  a17f              ADR      r1,|L9.1140|
000278  f7fffffe          BL       __2sprintf
00027c  1ced              ADDS     r5,r5,#3              ;1035
00027e  b2a8              UXTH     r0,r5                 ;1036
000280  210d              MOVS     r1,#0xd               ;1049
000282  5421              STRB     r1,[r4,r0]            ;1049
000284  1c40              ADDS     r0,r0,#1              ;1049
000286  b280              UXTH     r0,r0                 ;1049
000288  e01d              B        |L9.710|
                  |L9.650|
00028a  5d60              LDRB     r0,[r4,r5]            ;1059
00028c  2201              MOVS     r2,#1                 ;1058
00028e  283f              CMP      r0,#0x3f              ;1059
000290  d014              BEQ      |L9.700|
000292  2000              MOVS     r0,#0                 ;1069
000294  4601              MOV      r1,r0                 ;1069
                  |L9.662|
000296  5d63              LDRB     r3,[r4,r5]            ;1071
000298  eb010181          ADD      r1,r1,r1,LSL #2       ;1071
00029c  1c6d              ADDS     r5,r5,#1              ;1071
00029e  1c40              ADDS     r0,r0,#1              ;1071
0002a0  eb060141          ADD      r1,r6,r1,LSL #1       ;1071
0002a4  b2c0              UXTB     r0,r0                 ;1069
0002a6  4419              ADD      r1,r1,r3              ;1071
0002a8  b2ad              UXTH     r5,r5                 ;1071
0002aa  4290              CMP      r0,r2                 ;1069
0002ac  d3f3              BCC      |L9.662|
0002ae  4864              LDR      r0,|L9.1088|
0002b0  3834              SUBS     r0,r0,#0x34           ;1077
0002b2  7141              STRB     r1,[r0,#5]            ;1077
0002b4  7940              LDRB     r0,[r0,#5]            ;1078  ; MODE
0002b6  f7fffffe          BL       MODE_PARASET
0002ba  e032              B        |L9.802|
                  |L9.700|
0002bc  4960              LDR      r1,|L9.1088|
0002be  1960              ADDS     r0,r4,r5              ;1061
0002c0  3934              SUBS     r1,r1,#0x34           ;1061
0002c2  794a              LDRB     r2,[r1,#5]            ;1061  ; MODE
0002c4  e022              B        |L9.780|
                  |L9.710|
0002c6  f8049000          STRB     r9,[r4,r0]            ;1050
0002ca  1c40              ADDS     r0,r0,#1              ;1050
0002cc  b285              UXTH     r5,r0                 ;1050
0002ce  e37b              B        |L9.2504|
                  |L9.720|
0002d0  5d60              LDRB     r0,[r4,r5]            ;1085
0002d2  2201              MOVS     r2,#1                 ;1084
0002d4  283f              CMP      r0,#0x3f              ;1085
0002d6  d07d              BEQ      |L9.980|
0002d8  2100              MOVS     r1,#0                 ;1095
0002da  4608              MOV      r0,r1                 ;1095
                  |L9.732|
0002dc  5d63              LDRB     r3,[r4,r5]            ;1097
0002de  eb000080          ADD      r0,r0,r0,LSL #2       ;1097
0002e2  1c6d              ADDS     r5,r5,#1              ;1097
0002e4  1c49              ADDS     r1,r1,#1              ;1097
0002e6  eb060040          ADD      r0,r6,r0,LSL #1       ;1097
0002ea  b2c9              UXTB     r1,r1                 ;1095
0002ec  4418              ADD      r0,r0,r3              ;1097
0002ee  b2ad              UXTH     r5,r5                 ;1097
0002f0  4291              CMP      r1,r2                 ;1095
0002f2  d3f3              BCC      |L9.732|
0002f4  2801              CMP      r0,#1                 ;1099
0002f6  d90e              BLS      |L9.790|
                  |L9.760|
0002f8  2201              MOVS     r2,#1                 ;1101
                  |L9.762|
;;;1774   						{
;;;1775   							return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1776   						}
;;;1777   	//					MODE=temp1;
;;;1778   						
;;;1779   						bootflag = 1;
;;;1780   						Write_Boot_Flag();
;;;1781   						if(temp1 == 1)
;;;1782   						{
;;;1783   							JumpBoot(55);
;;;1784   						}
;;;1785   					}
;;;1786   				}break;
;;;1787   //				case 15:
;;;1788   //				{
;;;1789   //					pntlen = 1;
;;;1790   //					if(buf[currCharNum]=='?')
;;;1791   //					{
;;;1792   //						sprintf(&buf[currCharNum],"%1d",Gmode_Vale);
;;;1793   //						currCharNum+=pntlen;
;;;1794   //						buf[currCharNum] = ChrEndR;
;;;1795   //						currCharNum++;
;;;1796   //	//				    buf[currCharNum ++] = ChrEndS;
;;;1797   //						
;;;1798   //					}
;;;1799   //					else
;;;1800   //					{
;;;1801   //						tmpFg = 1;
;;;1802   //						for(i=0;i<pntlen;i++)
;;;1803   //						{
;;;1804   //						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1805   //						   {
;;;1806   //							  tmpFg = (tmpFg&0x01);
;;;1807   //						   }
;;;1808   //						   else
;;;1809   //						   {
;;;1810   //							  tmpFg = 0;
;;;1811   //						   }
;;;1812   //						}
;;;1813   //						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1814   //						{
;;;1815   //							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1816   //							
;;;1817   //						}					
;;;1818   //						for(i=0,temp1=0;i<pntlen;i++)
;;;1819   //						{
;;;1820   //							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1821   //						}		                   
;;;1822   //						if(temp1 >Mode_H)
;;;1823   //						 {
;;;1824   //							 return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1825   //							 
;;;1826   //						 }
;;;1827   //						 if(H_L == 1)
;;;1828   //						 {
;;;1829   //							CalHandle(3,1,temp1);
;;;1830   //						 }else{
;;;1831   //							 CalHandle(3,0,temp1);
;;;1832   //						 }
;;;1833   //						 
;;;1834   ////								 Mode=temp1;
;;;1835   ////								Change_MODE_Val(Mode);
;;;1836   ////						 buf[currCharNum++] = ChrEndS;
;;;1837   //					}
;;;1838   //					break;
;;;1839   //				}break;
;;;1840   //				case 16:
;;;1841   //				{
;;;1842   //					pntlen = 3;
;;;1843   //					if(buf[currCharNum]=='?')
;;;1844   //					{
;;;1845   //						sprintf(&buf[currCharNum],"%1d",Gmode_Vale);
;;;1846   //						currCharNum+=pntlen;
;;;1847   //						buf[currCharNum] = ChrEndR;
;;;1848   //						currCharNum++;
;;;1849   //	//				    buf[currCharNum ++] = ChrEndS;
;;;1850   //						
;;;1851   //					}
;;;1852   //					else
;;;1853   //					{
;;;1854   //						tmpFg = 1;
;;;1855   //						for(i=0;i<pntlen;i++)
;;;1856   //						{
;;;1857   //						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1858   //						   {
;;;1859   //							  tmpFg = (tmpFg&0x01);
;;;1860   //						   }
;;;1861   //						   else
;;;1862   //						   {
;;;1863   //							  tmpFg = 0;
;;;1864   //						   }
;;;1865   //						}
;;;1866   //						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1867   //						{
;;;1868   //							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1869   //							
;;;1870   //						}					
;;;1871   //						for(i=0,temp1=0;i<pntlen;i++)
;;;1872   //						{
;;;1873   //							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1874   //						}		                   
;;;1875   //						 overflag = temp1;
;;;1876   //						 
;;;1877   ////								 Mode=temp1;
;;;1878   ////								Change_MODE_Val(Mode);
;;;1879   ////						 buf[currCharNum++] = ChrEndS;
;;;1880   //					}
;;;1881   //					break;
;;;1882   //				}break;
;;;1883   //				case 17:
;;;1884   //				{
;;;1885   //					pntlen = 2;
;;;1886   //					if(buf[currCharNum]=='?')
;;;1887   //					{
;;;1888   ////						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1889   //									sprintf(&buf[currCharNum],"%02d",(int)temperature);
;;;1890   //						currCharNum+=pntlen;
;;;1891   //						buf[currCharNum++ ] = ChrEndR;
;;;1892   //						buf[currCharNum++ ] = ChrEndS;
;;;1893   //					}
;;;1894   //				}break;
;;;1895   			default:    //ERR
;;;1896              		 return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1897   	 			  
;;;1898   		  }
;;;1899   		  break;
;;;1900   		}
;;;1901   		
;;;1902   	}
;;;1903   	if(j>=CmdNumb)
;;;1904   	{
;;;1905   		return SetErr_ACK(buf, addr ,CMD_ERR);			  
0002fa  4620              MOV      r0,r4
0002fc  9932              LDR      r1,[sp,#0xc8]
0002fe  f7fffffe          BL       SetErr_ACK
;;;1906   	}
;;;1907   	return currCharNum+1;
;;;1908   }
000302  b033              ADD      sp,sp,#0xcc
000304  ecbd8b02          VPOP     {d8}
000308  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.780|
00030c  a15b              ADR      r1,|L9.1148|
00030e  f7fffffe          BL       __2sprintf
000312  1c6d              ADDS     r5,r5,#1              ;1061
000314  e3fe              B        |L9.2836|
                  |L9.790|
000316  494a              LDR      r1,|L9.1088|
000318  3934              SUBS     r1,r1,#0x34           ;1106
00031a  7188              STRB     r0,[r1,#6]            ;1106
00031c  7988              LDRB     r0,[r1,#6]            ;1111  ; mainswitch
00031e  f7fffffe          BL       MODE_ONOFF
                  |L9.802|
000322  200d              MOVS     r0,#0xd               ;1080
000324  5560              STRB     r0,[r4,r5]            ;1080
                  |L9.806|
000326  1c6d              ADDS     r5,r5,#1              ;1080
000328  b2ad              UXTH     r5,r5                 ;1080
00032a  e34d              B        |L9.2504|
                  |L9.812|
00032c  2000              MOVS     r0,#0                 ;1129
00032e  4607              MOV      r7,r0                 ;1129
                  |L9.816|
000330  5d61              LDRB     r1,[r4,r5]            ;1131
000332  eb070287          ADD      r2,r7,r7,LSL #2       ;1131
000336  eb060242          ADD      r2,r6,r2,LSL #1       ;1131
00033a  1c6d              ADDS     r5,r5,#1              ;1131
00033c  1c40              ADDS     r0,r0,#1              ;1131
00033e  188f              ADDS     r7,r1,r2              ;1131
000340  b2c0              UXTB     r0,r0                 ;1129
000342  b2ad              UXTH     r5,r5                 ;1131
000344  2805              CMP      r0,#5                 ;1129
000346  d3f3              BCC      |L9.816|
                  |L9.840|
000348  4659              MOV      r1,r11                ;1134
00034a  f8cb7044          STR      r7,[r11,#0x44]        ;1134  ; Para
00034e  5d62              LDRB     r2,[r4,r5]            ;1137
000350  1c6d              ADDS     r5,r5,#1              ;1137
000352  2300              MOVS     r3,#0                 ;1135
000354  b2a8              UXTH     r0,r5                 ;1137
000356  2a2c              CMP      r2,#0x2c              ;1137
000358  d10c              BNE      |L9.884|
00035a  2200              MOVS     r2,#0                 ;1139
                  |L9.860|
00035c  5c25              LDRB     r5,[r4,r0]            ;1141
00035e  eb030383          ADD      r3,r3,r3,LSL #2       ;1141
000362  1c40              ADDS     r0,r0,#1              ;1141
000364  1c52              ADDS     r2,r2,#1              ;1141
000366  eb060343          ADD      r3,r6,r3,LSL #1       ;1141
00036a  b2d2              UXTB     r2,r2                 ;1139
00036c  442b              ADD      r3,r3,r5              ;1141
00036e  b280              UXTH     r0,r0                 ;1141
000370  2a05              CMP      r2,#5                 ;1139
000372  d3f3              BCC      |L9.860|
                  |L9.884|
000374  f8a13048          STRH     r3,[r1,#0x48]         ;1144
000378  5c22              LDRB     r2,[r4,r0]            ;1147
00037a  1c40              ADDS     r0,r0,#1              ;1147
00037c  2300              MOVS     r3,#0                 ;1145
00037e  b280              UXTH     r0,r0                 ;1147
000380  2a2c              CMP      r2,#0x2c              ;1147
000382  d10c              BNE      |L9.926|
000384  2200              MOVS     r2,#0                 ;1149
                  |L9.902|
000386  5c25              LDRB     r5,[r4,r0]            ;1151
000388  eb030383          ADD      r3,r3,r3,LSL #2       ;1151
00038c  1c40              ADDS     r0,r0,#1              ;1151
00038e  1c52              ADDS     r2,r2,#1              ;1151
000390  eb060343          ADD      r3,r6,r3,LSL #1       ;1151
000394  b2d2              UXTB     r2,r2                 ;1149
000396  442b              ADD      r3,r3,r5              ;1151
000398  b280              UXTH     r0,r0                 ;1151
00039a  2a05              CMP      r2,#5                 ;1149
00039c  d3f3              BCC      |L9.902|
                  |L9.926|
00039e  64cb              STR      r3,[r1,#0x4c]         ;1154  ; Para
0003a0  5c22              LDRB     r2,[r4,r0]            ;1157
0003a2  1c40              ADDS     r0,r0,#1              ;1157
0003a4  2300              MOVS     r3,#0                 ;1155
0003a6  b280              UXTH     r0,r0                 ;1157
0003a8  2a2c              CMP      r2,#0x2c              ;1157
0003aa  d10c              BNE      |L9.966|
0003ac  2200              MOVS     r2,#0                 ;1159
                  |L9.942|
0003ae  5c25              LDRB     r5,[r4,r0]            ;1161
0003b0  eb030383          ADD      r3,r3,r3,LSL #2       ;1161
0003b4  1c40              ADDS     r0,r0,#1              ;1161
0003b6  1c52              ADDS     r2,r2,#1              ;1161
0003b8  eb060343          ADD      r3,r6,r3,LSL #1       ;1161
0003bc  b2d2              UXTB     r2,r2                 ;1159
0003be  442b              ADD      r3,r3,r5              ;1161
0003c0  b280              UXTH     r0,r0                 ;1161
0003c2  2a03              CMP      r2,#3                 ;1159
0003c4  d3f3              BCC      |L9.942|
                  |L9.966|
0003c6  f8a13050          STRH     r3,[r1,#0x50]         ;1164
0003ca  2300              MOVS     r3,#0                 ;1165
0003cc  5c22              LDRB     r2,[r4,r0]            ;1167
0003ce  1c40              ADDS     r0,r0,#1              ;1167
0003d0  b280              UXTH     r0,r0                 ;1167
0003d2  e000              B        |L9.982|
                  |L9.980|
0003d4  e182              B        |L9.1756|
                  |L9.982|
0003d6  2a2c              CMP      r2,#0x2c              ;1167
0003d8  d10c              BNE      |L9.1012|
0003da  2200              MOVS     r2,#0                 ;1169
                  |L9.988|
0003dc  5c25              LDRB     r5,[r4,r0]            ;1171
0003de  eb030383          ADD      r3,r3,r3,LSL #2       ;1171
0003e2  1c40              ADDS     r0,r0,#1              ;1171
0003e4  1c52              ADDS     r2,r2,#1              ;1171
0003e6  eb060343          ADD      r3,r6,r3,LSL #1       ;1171
0003ea  b2d2              UXTB     r2,r2                 ;1169
0003ec  442b              ADD      r3,r3,r5              ;1171
0003ee  b280              UXTH     r0,r0                 ;1171
0003f0  2a05              CMP      r2,#5                 ;1169
0003f2  d3f3              BCC      |L9.988|
                  |L9.1012|
0003f4  f8a13054          STRH     r3,[r1,#0x54]         ;1174
0003f8  5c22              LDRB     r2,[r4,r0]            ;1177
0003fa  1c40              ADDS     r0,r0,#1              ;1177
0003fc  2300              MOVS     r3,#0                 ;1175
0003fe  b280              UXTH     r0,r0                 ;1177
000400  2a2c              CMP      r2,#0x2c              ;1177
000402  d10c              BNE      |L9.1054|
000404  2200              MOVS     r2,#0                 ;1179
                  |L9.1030|
000406  5c25              LDRB     r5,[r4,r0]            ;1181
000408  eb030383          ADD      r3,r3,r3,LSL #2       ;1181
00040c  1c40              ADDS     r0,r0,#1              ;1181
00040e  1c52              ADDS     r2,r2,#1              ;1181
000410  eb060343          ADD      r3,r6,r3,LSL #1       ;1181
000414  b2d2              UXTB     r2,r2                 ;1179
000416  442b              ADD      r3,r3,r5              ;1181
000418  b280              UXTH     r0,r0                 ;1181
00041a  2a05              CMP      r2,#5                 ;1179
00041c  d3f3              BCC      |L9.1030|
                  |L9.1054|
00041e  f8a13056          STRH     r3,[r1,#0x56]         ;1184
000422  5c22              LDRB     r2,[r4,r0]            ;1187
000424  1c40              ADDS     r0,r0,#1              ;1187
000426  2300              MOVS     r3,#0                 ;1185
000428  b280              UXTH     r0,r0                 ;1187
00042a  2a2c              CMP      r2,#0x2c              ;1187
00042c  d13b              BNE      |L9.1190|
00042e  2200              MOVS     r2,#0                 ;1189
                  |L9.1072|
000430  5c25              LDRB     r5,[r4,r0]            ;1191
000432  eb030383          ADD      r3,r3,r3,LSL #2       ;1191
000436  e02d              B        |L9.1172|
                  |L9.1080|
000438  256400            DCB      "%d",0
00043b  00                DCB      0
                  |L9.1084|
00043c  2f00              DCB      "/",0
00043e  00                DCB      0
00043f  00                DCB      0
                  |L9.1088|
                          DCD      ||.data||+0x34
                  |L9.1092|
                          DCD      C_DISCHARGE
                  |L9.1096|
                          DCD      Para
                  |L9.1100|
                          DCD      Run_Control
                  |L9.1104|
000450  25303564          DCB      "%05d",0
000454  00      
000455  00                DCB      0
000456  00                DCB      0
000457  00                DCB      0
                  |L9.1112|
000458  25303664          DCB      "%06d",0
00045c  00      
00045d  00                DCB      0
00045e  00                DCB      0
00045f  00                DCB      0
                  |L9.1120|
000460  25303464          DCB      "%04d",0
000464  00      
000465  00                DCB      0
000466  00                DCB      0
000467  00                DCB      0
                  |L9.1128|
                          DCD      max_discahrgeNum
                  |L9.1132|
00046c  447a0000          DCFS     0x447a0000 ; 1000
                  |L9.1136|
                          DCD      shorttime
                  |L9.1140|
000474  25303364          DCB      "%03d",0
000478  00      
000479  00                DCB      0
00047a  00                DCB      0
00047b  00                DCB      0
                  |L9.1148|
00047c  25316400          DCB      "%1d",0
                  |L9.1152|
                          DCD      finishflag
                  |L9.1156|
                          DCD      lockflag
                  |L9.1160|
                          DCD      version
                  |L9.1164|
00048c  25326400          DCB      "%2d",0
                  |L9.1168|
                          DCD      Temperature
                  |L9.1172|
000494  1c40              ADDS     r0,r0,#1              ;1191
000496  1c52              ADDS     r2,r2,#1              ;1191
000498  eb060343          ADD      r3,r6,r3,LSL #1       ;1191
00049c  b2d2              UXTB     r2,r2                 ;1189
00049e  442b              ADD      r3,r3,r5              ;1191
0004a0  b280              UXTH     r0,r0                 ;1191
0004a2  2a05              CMP      r2,#5                 ;1189
0004a4  d3c4              BCC      |L9.1072|
                  |L9.1190|
0004a6  f8a13058          STRH     r3,[r1,#0x58]         ;1194
0004aa  5c22              LDRB     r2,[r4,r0]            ;1197
0004ac  1c40              ADDS     r0,r0,#1              ;1197
0004ae  2300              MOVS     r3,#0                 ;1195
0004b0  b280              UXTH     r0,r0                 ;1197
0004b2  2a2c              CMP      r2,#0x2c              ;1197
0004b4  d10c              BNE      |L9.1232|
0004b6  2200              MOVS     r2,#0                 ;1199
                  |L9.1208|
0004b8  5c25              LDRB     r5,[r4,r0]            ;1201
0004ba  eb030383          ADD      r3,r3,r3,LSL #2       ;1201
0004be  1c40              ADDS     r0,r0,#1              ;1201
0004c0  1c52              ADDS     r2,r2,#1              ;1201
0004c2  eb060343          ADD      r3,r6,r3,LSL #1       ;1201
0004c6  b2d2              UXTB     r2,r2                 ;1199
0004c8  442b              ADD      r3,r3,r5              ;1201
0004ca  b280              UXTH     r0,r0                 ;1201
0004cc  2a05              CMP      r2,#5                 ;1199
0004ce  d3f3              BCC      |L9.1208|
                  |L9.1232|
0004d0  f8a13060          STRH     r3,[r1,#0x60]         ;1204
0004d4  5c22              LDRB     r2,[r4,r0]            ;1207
0004d6  1c40              ADDS     r0,r0,#1              ;1207
0004d8  2300              MOVS     r3,#0                 ;1205
0004da  b280              UXTH     r0,r0                 ;1207
0004dc  2a2c              CMP      r2,#0x2c              ;1207
0004de  d10c              BNE      |L9.1274|
0004e0  2200              MOVS     r2,#0                 ;1209
                  |L9.1250|
0004e2  5c25              LDRB     r5,[r4,r0]            ;1211
0004e4  eb030383          ADD      r3,r3,r3,LSL #2       ;1211
0004e8  1c40              ADDS     r0,r0,#1              ;1211
0004ea  1c52              ADDS     r2,r2,#1              ;1211
0004ec  eb060343          ADD      r3,r6,r3,LSL #1       ;1211
0004f0  b2d2              UXTB     r2,r2                 ;1209
0004f2  442b              ADD      r3,r3,r5              ;1211
0004f4  b280              UXTH     r0,r0                 ;1211
0004f6  2a05              CMP      r2,#5                 ;1209
0004f8  d3f3              BCC      |L9.1250|
                  |L9.1274|
0004fa  65cb              STR      r3,[r1,#0x5c]         ;1214  ; Para
0004fc  5c22              LDRB     r2,[r4,r0]            ;1217
0004fe  1c40              ADDS     r0,r0,#1              ;1217
000500  2300              MOVS     r3,#0                 ;1215
000502  b280              UXTH     r0,r0                 ;1217
000504  2a2c              CMP      r2,#0x2c              ;1217
000506  d10c              BNE      |L9.1314|
000508  2200              MOVS     r2,#0                 ;1219
                  |L9.1290|
00050a  5c25              LDRB     r5,[r4,r0]            ;1221
00050c  eb030383          ADD      r3,r3,r3,LSL #2       ;1221
000510  1c40              ADDS     r0,r0,#1              ;1221
000512  1c52              ADDS     r2,r2,#1              ;1221
000514  eb060343          ADD      r3,r6,r3,LSL #1       ;1221
000518  b2d2              UXTB     r2,r2                 ;1219
00051a  442b              ADD      r3,r3,r5              ;1221
00051c  b280              UXTH     r0,r0                 ;1221
00051e  2a05              CMP      r2,#5                 ;1219
000520  d3f3              BCC      |L9.1290|
                  |L9.1314|
000522  f8a13062          STRH     r3,[r1,#0x62]         ;1224
000526  5c22              LDRB     r2,[r4,r0]            ;1227
000528  1c40              ADDS     r0,r0,#1              ;1227
00052a  2300              MOVS     r3,#0                 ;1225
00052c  b280              UXTH     r0,r0                 ;1227
00052e  2a2c              CMP      r2,#0x2c              ;1227
000530  d10c              BNE      |L9.1356|
000532  2200              MOVS     r2,#0                 ;1229
                  |L9.1332|
000534  5c25              LDRB     r5,[r4,r0]            ;1231
000536  eb030383          ADD      r3,r3,r3,LSL #2       ;1231
00053a  1c40              ADDS     r0,r0,#1              ;1231
00053c  1c52              ADDS     r2,r2,#1              ;1231
00053e  eb060343          ADD      r3,r6,r3,LSL #1       ;1231
000542  b2d2              UXTB     r2,r2                 ;1229
000544  442b              ADD      r3,r3,r5              ;1231
000546  b280              UXTH     r0,r0                 ;1231
000548  2a05              CMP      r2,#5                 ;1229
00054a  d3f3              BCC      |L9.1332|
                  |L9.1356|
00054c  f8a13064          STRH     r3,[r1,#0x64]         ;1234
000550  5c22              LDRB     r2,[r4,r0]            ;1237
000552  1c40              ADDS     r0,r0,#1              ;1237
000554  2300              MOVS     r3,#0                 ;1235
000556  b280              UXTH     r0,r0                 ;1237
000558  2a2c              CMP      r2,#0x2c              ;1237
00055a  d10c              BNE      |L9.1398|
00055c  2200              MOVS     r2,#0                 ;1239
                  |L9.1374|
00055e  5c25              LDRB     r5,[r4,r0]            ;1241
000560  eb030383          ADD      r3,r3,r3,LSL #2       ;1241
000564  1c40              ADDS     r0,r0,#1              ;1241
000566  1c52              ADDS     r2,r2,#1              ;1241
000568  eb060343          ADD      r3,r6,r3,LSL #1       ;1241
00056c  b2d2              UXTB     r2,r2                 ;1239
00056e  442b              ADD      r3,r3,r5              ;1241
000570  b280              UXTH     r0,r0                 ;1241
000572  2a05              CMP      r2,#5                 ;1239
000574  d3f3              BCC      |L9.1374|
                  |L9.1398|
000576  f8a13066          STRH     r3,[r1,#0x66]         ;1244
00057a  5c22              LDRB     r2,[r4,r0]            ;1247
00057c  1c40              ADDS     r0,r0,#1              ;1247
00057e  2300              MOVS     r3,#0                 ;1245
000580  b280              UXTH     r0,r0                 ;1247
000582  2a2c              CMP      r2,#0x2c              ;1247
000584  d10c              BNE      |L9.1440|
000586  2200              MOVS     r2,#0                 ;1249
                  |L9.1416|
000588  5c25              LDRB     r5,[r4,r0]            ;1251
00058a  eb030383          ADD      r3,r3,r3,LSL #2       ;1251
00058e  1c40              ADDS     r0,r0,#1              ;1251
000590  1c52              ADDS     r2,r2,#1              ;1251
000592  eb060343          ADD      r3,r6,r3,LSL #1       ;1251
000596  b2d2              UXTB     r2,r2                 ;1249
000598  442b              ADD      r3,r3,r5              ;1251
00059a  b280              UXTH     r0,r0                 ;1251
00059c  2a05              CMP      r2,#5                 ;1249
00059e  d3f3              BCC      |L9.1416|
                  |L9.1440|
0005a0  668b              STR      r3,[r1,#0x68]         ;1254  ; Para
0005a2  5c22              LDRB     r2,[r4,r0]            ;1257
0005a4  1c40              ADDS     r0,r0,#1              ;1257
0005a6  2300              MOVS     r3,#0                 ;1255
0005a8  b280              UXTH     r0,r0                 ;1257
0005aa  2a2c              CMP      r2,#0x2c              ;1257
0005ac  d10c              BNE      |L9.1480|
0005ae  2200              MOVS     r2,#0                 ;1259
                  |L9.1456|
0005b0  5c25              LDRB     r5,[r4,r0]            ;1261
0005b2  eb030383          ADD      r3,r3,r3,LSL #2       ;1261
0005b6  1c40              ADDS     r0,r0,#1              ;1261
0005b8  1c52              ADDS     r2,r2,#1              ;1261
0005ba  eb060343          ADD      r3,r6,r3,LSL #1       ;1261
0005be  b2d2              UXTB     r2,r2                 ;1259
0005c0  442b              ADD      r3,r3,r5              ;1261
0005c2  b280              UXTH     r0,r0                 ;1261
0005c4  2a05              CMP      r2,#5                 ;1259
0005c6  d3f3              BCC      |L9.1456|
                  |L9.1480|
0005c8  f8a1306c          STRH     r3,[r1,#0x6c]         ;1264
0005cc  5c22              LDRB     r2,[r4,r0]            ;1267
0005ce  1c40              ADDS     r0,r0,#1              ;1267
0005d0  2300              MOVS     r3,#0                 ;1265
0005d2  b280              UXTH     r0,r0                 ;1267
0005d4  2a2c              CMP      r2,#0x2c              ;1267
0005d6  d10c              BNE      |L9.1522|
0005d8  2200              MOVS     r2,#0                 ;1269
                  |L9.1498|
0005da  5c25              LDRB     r5,[r4,r0]            ;1271
0005dc  eb030383          ADD      r3,r3,r3,LSL #2       ;1271
0005e0  1c40              ADDS     r0,r0,#1              ;1271
0005e2  1c52              ADDS     r2,r2,#1              ;1271
0005e4  eb060343          ADD      r3,r6,r3,LSL #1       ;1271
0005e8  b2d2              UXTB     r2,r2                 ;1269
0005ea  442b              ADD      r3,r3,r5              ;1271
0005ec  b280              UXTH     r0,r0                 ;1271
0005ee  2a05              CMP      r2,#5                 ;1269
0005f0  d3f3              BCC      |L9.1498|
                  |L9.1522|
0005f2  670b              STR      r3,[r1,#0x70]         ;1274  ; Para
0005f4  5c22              LDRB     r2,[r4,r0]            ;1277
0005f6  1c40              ADDS     r0,r0,#1              ;1277
0005f8  2300              MOVS     r3,#0                 ;1275
0005fa  b280              UXTH     r0,r0                 ;1277
0005fc  2a2c              CMP      r2,#0x2c              ;1277
0005fe  d10c              BNE      |L9.1562|
000600  2200              MOVS     r2,#0                 ;1279
                  |L9.1538|
000602  5c25              LDRB     r5,[r4,r0]            ;1281
000604  eb030383          ADD      r3,r3,r3,LSL #2       ;1281
000608  1c40              ADDS     r0,r0,#1              ;1281
00060a  1c52              ADDS     r2,r2,#1              ;1281
00060c  eb060343          ADD      r3,r6,r3,LSL #1       ;1281
000610  b2d2              UXTB     r2,r2                 ;1279
000612  442b              ADD      r3,r3,r5              ;1281
000614  b280              UXTH     r0,r0                 ;1281
000616  2a05              CMP      r2,#5                 ;1279
000618  d3f3              BCC      |L9.1538|
                  |L9.1562|
00061a  674b              STR      r3,[r1,#0x74]         ;1284  ; Para
00061c  5c22              LDRB     r2,[r4,r0]            ;1287
00061e  1c40              ADDS     r0,r0,#1              ;1287
000620  2300              MOVS     r3,#0                 ;1285
000622  b280              UXTH     r0,r0                 ;1287
000624  2a2c              CMP      r2,#0x2c              ;1287
000626  d10c              BNE      |L9.1602|
000628  2200              MOVS     r2,#0                 ;1289
                  |L9.1578|
00062a  5c25              LDRB     r5,[r4,r0]            ;1291
00062c  eb030383          ADD      r3,r3,r3,LSL #2       ;1291
000630  1c40              ADDS     r0,r0,#1              ;1291
000632  1c52              ADDS     r2,r2,#1              ;1291
000634  eb060343          ADD      r3,r6,r3,LSL #1       ;1291
000638  b2d2              UXTB     r2,r2                 ;1289
00063a  442b              ADD      r3,r3,r5              ;1291
00063c  b280              UXTH     r0,r0                 ;1291
00063e  2a03              CMP      r2,#3                 ;1289
000640  d3f3              BCC      |L9.1578|
                  |L9.1602|
000642  f8813078          STRB     r3,[r1,#0x78]         ;1294
000646  5c22              LDRB     r2,[r4,r0]            ;1297
000648  1c40              ADDS     r0,r0,#1              ;1297
00064a  2300              MOVS     r3,#0                 ;1295
00064c  b280              UXTH     r0,r0                 ;1297
00064e  2a2c              CMP      r2,#0x2c              ;1297
000650  d10c              BNE      |L9.1644|
000652  2200              MOVS     r2,#0                 ;1299
                  |L9.1620|
000654  5c25              LDRB     r5,[r4,r0]            ;1301
000656  eb030383          ADD      r3,r3,r3,LSL #2       ;1301
00065a  1c40              ADDS     r0,r0,#1              ;1301
00065c  1c52              ADDS     r2,r2,#1              ;1301
00065e  eb060343          ADD      r3,r6,r3,LSL #1       ;1301
000662  b2d2              UXTB     r2,r2                 ;1299
000664  442b              ADD      r3,r3,r5              ;1301
000666  b280              UXTH     r0,r0                 ;1301
000668  2a03              CMP      r2,#3                 ;1299
00066a  d3f3              BCC      |L9.1620|
                  |L9.1644|
00066c  4ffe              LDR      r7,|L9.2664|
00066e  797a              LDRB     r2,[r7,#5]            ;1304  ; MODE
000670  b90a              CBNZ     r2,|L9.1654|
000672  f8ca3018          STR      r3,[r10,#0x18]        ;1306  ; Run_Control
                  |L9.1654|
000676  5c22              LDRB     r2,[r4,r0]            ;1311
000678  1c40              ADDS     r0,r0,#1              ;1311
00067a  2300              MOVS     r3,#0                 ;1308
00067c  b280              UXTH     r0,r0                 ;1311
00067e  2a2c              CMP      r2,#0x2c              ;1311
000680  d10c              BNE      |L9.1692|
000682  2200              MOVS     r2,#0                 ;1313
                  |L9.1668|
000684  5c25              LDRB     r5,[r4,r0]            ;1315
000686  eb030383          ADD      r3,r3,r3,LSL #2       ;1315
00068a  1c40              ADDS     r0,r0,#1              ;1315
00068c  1c52              ADDS     r2,r2,#1              ;1315
00068e  eb060343          ADD      r3,r6,r3,LSL #1       ;1315
000692  b2d2              UXTB     r2,r2                 ;1313
000694  442b              ADD      r3,r3,r5              ;1315
000696  b280              UXTH     r0,r0                 ;1315
000698  2a03              CMP      r2,#3                 ;1313
00069a  d3f3              BCC      |L9.1668|
                  |L9.1692|
00069c  71fb              STRB     r3,[r7,#7]            ;1318
00069e  5c23              LDRB     r3,[r4,r0]            ;1321
0006a0  1c40              ADDS     r0,r0,#1              ;1321
0006a2  2200              MOVS     r2,#0                 ;1319
0006a4  b285              UXTH     r5,r0                 ;1321
0006a6  2b2c              CMP      r3,#0x2c              ;1321
0006a8  d10c              BNE      |L9.1732|
0006aa  2000              MOVS     r0,#0                 ;1323
                  |L9.1708|
0006ac  5d63              LDRB     r3,[r4,r5]            ;1325
0006ae  eb020282          ADD      r2,r2,r2,LSL #2       ;1325
0006b2  1c6d              ADDS     r5,r5,#1              ;1325
0006b4  1c40              ADDS     r0,r0,#1              ;1325
0006b6  eb060242          ADD      r2,r6,r2,LSL #1       ;1325
0006ba  b2c0              UXTB     r0,r0                 ;1323
0006bc  441a              ADD      r2,r2,r3              ;1325
0006be  b2ad              UXTH     r5,r5                 ;1325
0006c0  2803              CMP      r0,#3                 ;1323
0006c2  d3f3              BCC      |L9.1708|
                  |L9.1732|
0006c4  f8812052          STRB     r2,[r1,#0x52]         ;1328
0006c8  7978              LDRB     r0,[r7,#5]            ;1331  ; MODE
0006ca  f7fffffe          BL       MODE_PARASET
0006ce  e20d              B        |L9.2796|
                  |L9.1744|
0006d0  5d60              LDRB     r0,[r4,r5]            ;1338
0006d2  283f              CMP      r0,#0x3f              ;1338
0006d4  d002              BEQ      |L9.1756|
0006d6  2d0b              CMP      r5,#0xb               ;1347
0006d8  d003              BEQ      |L9.1762|
0006da  e010              B        |L9.1790|
                  |L9.1756|
0006dc  1960              ADDS     r0,r4,r5              ;1340
0006de  780a              LDRB     r2,[r1,#0]            ;1340  ; C_DISCHARGE
0006e0  e614              B        |L9.780|
                  |L9.1762|
0006e2  2000              MOVS     r0,#0                 ;1349
0006e4  4607              MOV      r7,r0                 ;1349
                  |L9.1766|
0006e6  5d61              LDRB     r1,[r4,r5]            ;1351
0006e8  eb070287          ADD      r2,r7,r7,LSL #2       ;1351
0006ec  eb060242          ADD      r2,r6,r2,LSL #1       ;1351
0006f0  1c6d              ADDS     r5,r5,#1              ;1351
0006f2  1c40              ADDS     r0,r0,#1              ;1351
0006f4  188f              ADDS     r7,r1,r2              ;1351
0006f6  b2c0              UXTB     r0,r0                 ;1349
0006f8  b2ad              UXTH     r5,r5                 ;1351
0006fa  2802              CMP      r0,#2                 ;1349
0006fc  d3f3              BCC      |L9.1766|
                  |L9.1790|
0006fe  48da              LDR      r0,|L9.2664|
000700  7147              STRB     r7,[r0,#5]            ;1354
000702  7940              LDRB     r0,[r0,#5]            ;1357  ; MODE
000704  2700              MOVS     r7,#0                 ;1355
000706  f6446120          MOV      r1,#0x4e20            ;1380
00070a  b1a8              CBZ      r0,|L9.1848|
00070c  4ad6              LDR      r2,|L9.2664|
00070e  7950              LDRB     r0,[r2,#5]            ;1401  ; MODE
000710  2801              CMP      r0,#1                 ;1401
000712  d05a              BEQ      |L9.1994|
000714  4610              MOV      r0,r2                 ;1430
000716  7940              LDRB     r0,[r0,#5]            ;1430  ; MODE
000718  2802              CMP      r0,#2                 ;1430
00071a  d07d              BEQ      |L9.2072|
00071c  7950              LDRB     r0,[r2,#5]            ;1462  ; MODE
00071e  2803              CMP      r0,#3                 ;1462
000720  d07b              BEQ      |L9.2074|
000722  4610              MOV      r0,r2                 ;1494
000724  7940              LDRB     r0,[r0,#5]            ;1494  ; MODE
000726  2804              CMP      r0,#4                 ;1494
000728  d078              BEQ      |L9.2076|
00072a  7950              LDRB     r0,[r2,#5]            ;1537  ; MODE
00072c  2805              CMP      r0,#5                 ;1537
00072e  d076              BEQ      |L9.2078|
000730  7950              LDRB     r0,[r2,#5]            ;1568  ; MODE
000732  2806              CMP      r0,#6                 ;1568
000734  d074              BEQ      |L9.2080|
000736  e1d3              B        |L9.2784|
                  |L9.1848|
000738  5d62              LDRB     r2,[r4,r5]            ;1359
00073a  1c6d              ADDS     r5,r5,#1              ;1359
00073c  b2a8              UXTH     r0,r5                 ;1359
00073e  2a2c              CMP      r2,#0x2c              ;1359
000740  d106              BNE      |L9.1872|
000742  2200              MOVS     r2,#0                 ;1361
                  |L9.1860|
000744  1c40              ADDS     r0,r0,#1              ;1361
000746  1c52              ADDS     r2,r2,#1              ;1363
000748  b2d2              UXTB     r2,r2                 ;1361
00074a  b280              UXTH     r0,r0                 ;1363
00074c  2a05              CMP      r2,#5                 ;1361
00074e  d3f9              BCC      |L9.1860|
                  |L9.1872|
000750  5c23              LDRB     r3,[r4,r0]            ;1369
000752  1c40              ADDS     r0,r0,#1              ;1369
000754  2200              MOVS     r2,#0                 ;1367
000756  b285              UXTH     r5,r0                 ;1369
000758  2b2c              CMP      r3,#0x2c              ;1369
00075a  d10c              BNE      |L9.1910|
00075c  2000              MOVS     r0,#0                 ;1371
                  |L9.1886|
00075e  5d63              LDRB     r3,[r4,r5]            ;1373
000760  eb020282          ADD      r2,r2,r2,LSL #2       ;1373
000764  1c6d              ADDS     r5,r5,#1              ;1373
000766  1c40              ADDS     r0,r0,#1              ;1373
000768  eb060242          ADD      r2,r6,r2,LSL #1       ;1373
00076c  b2c0              UXTB     r0,r0                 ;1371
00076e  441a              ADD      r2,r2,r3              ;1373
000770  b2ad              UXTH     r5,r5                 ;1373
000772  2805              CMP      r0,#5                 ;1371
000774  d3f3              BCC      |L9.1886|
                  |L9.1910|
000776  f8cb2014          STR      r2,[r11,#0x14]        ;1376  ; Para
00077a  f8db0014          LDR      r0,[r11,#0x14]        ;1380  ; Para
00077e  2700              MOVS     r7,#0                 ;1377
000780  4288              CMP      r0,r1                 ;1380
000782  d907              BLS      |L9.1940|
000784  2101              MOVS     r1,#1                 ;1382
000786  f8ca1020          STR      r1,[r10,#0x20]        ;1382  ; Run_Control
00078a  02c9              LSLS     r1,r1,#11             ;1383
00078c  48b7              LDR      r0,|L9.2668|
00078e  f7fffffe          BL       GPIO_ResetBits
000792  e007              B        |L9.1956|
                  |L9.1940|
000794  2100              MOVS     r1,#0                 ;1385
000796  f8ca1020          STR      r1,[r10,#0x20]        ;1385  ; Run_Control
00079a  f44f6100          MOV      r1,#0x800             ;1386
00079e  48b3              LDR      r0,|L9.2668|
0007a0  f7fffffe          BL       GPIO_SetBits
                  |L9.1956|
0007a4  5d60              LDRB     r0,[r4,r5]            ;1388
0007a6  1c6d              ADDS     r5,r5,#1              ;1388
0007a8  b2ad              UXTH     r5,r5                 ;1388
0007aa  282c              CMP      r0,#0x2c              ;1388
0007ac  d10c              BNE      |L9.1992|
0007ae  2000              MOVS     r0,#0                 ;1390
                  |L9.1968|
0007b0  5d61              LDRB     r1,[r4,r5]            ;1392
0007b2  eb070287          ADD      r2,r7,r7,LSL #2       ;1392
0007b6  eb060242          ADD      r2,r6,r2,LSL #1       ;1392
0007ba  1c6d              ADDS     r5,r5,#1              ;1392
0007bc  188f              ADDS     r7,r1,r2              ;1392
0007be  1c40              ADDS     r0,r0,#1              ;1392
0007c0  b2ad              UXTH     r5,r5                 ;1392
0007c2  f01000ff          ANDS     r0,r0,#0xff           ;1390
0007c6  d0f3              BEQ      |L9.1968|
                  |L9.1992|
0007c8  e119              B        |L9.2558|
                  |L9.1994|
0007ca  5d61              LDRB     r1,[r4,r5]            ;1402
0007cc  1c6d              ADDS     r5,r5,#1              ;1402
0007ce  b2a8              UXTH     r0,r5                 ;1402
0007d0  292c              CMP      r1,#0x2c              ;1402
0007d2  d10c              BNE      |L9.2030|
0007d4  2100              MOVS     r1,#0                 ;1404
                  |L9.2006|
0007d6  5c23              LDRB     r3,[r4,r0]            ;1406
0007d8  eb070587          ADD      r5,r7,r7,LSL #2       ;1406
0007dc  eb060545          ADD      r5,r6,r5,LSL #1       ;1406
0007e0  1c40              ADDS     r0,r0,#1              ;1406
0007e2  1c49              ADDS     r1,r1,#1              ;1406
0007e4  195f              ADDS     r7,r3,r5              ;1406
0007e6  b2c9              UXTB     r1,r1                 ;1404
0007e8  b280              UXTH     r0,r0                 ;1406
0007ea  2905              CMP      r1,#5                 ;1404
0007ec  d3f3              BCC      |L9.2006|
                  |L9.2030|
0007ee  465d              MOV      r5,r11                ;1409
0007f0  f8ab7064          STRH     r7,[r11,#0x64]        ;1409
0007f4  5c21              LDRB     r1,[r4,r0]            ;1412
0007f6  1c40              ADDS     r0,r0,#1              ;1412
0007f8  2300              MOVS     r3,#0                 ;1410
0007fa  b280              UXTH     r0,r0                 ;1412
0007fc  292c              CMP      r1,#0x2c              ;1412
0007fe  d112              BNE      |L9.2086|
000800  2100              MOVS     r1,#0                 ;1414
                  |L9.2050|
000802  5c27              LDRB     r7,[r4,r0]            ;1416
000804  1c40              ADDS     r0,r0,#1              ;1416
000806  eb030383          ADD      r3,r3,r3,LSL #2       ;1416
00080a  eb060343          ADD      r3,r6,r3,LSL #1       ;1416
00080e  1c49              ADDS     r1,r1,#1              ;1416
000810  443b              ADD      r3,r3,r7              ;1416
000812  b280              UXTH     r0,r0                 ;1416
000814  b2c9              UXTB     r1,r1                 ;1414
000816  e004              B        |L9.2082|
                  |L9.2072|
000818  e01b              B        |L9.2130|
                  |L9.2074|
00081a  e064              B        |L9.2278|
                  |L9.2076|
00081c  e0a3              B        |L9.2406|
                  |L9.2078|
00081e  e0fa              B        |L9.2582|
                  |L9.2080|
000820  e132              B        |L9.2696|
                  |L9.2082|
000822  2905              CMP      r1,#5                 ;1414
000824  d3ed              BCC      |L9.2050|
                  |L9.2086|
000826  f8a53066          STRH     r3,[r5,#0x66]         ;1419
00082a  5c23              LDRB     r3,[r4,r0]            ;1422
00082c  1c40              ADDS     r0,r0,#1              ;1422
00082e  2100              MOVS     r1,#0                 ;1420
000830  b285              UXTH     r5,r0                 ;1422
000832  2b2c              CMP      r3,#0x2c              ;1422
000834  d10c              BNE      |L9.2128|
000836  2000              MOVS     r0,#0                 ;1424
                  |L9.2104|
000838  5d63              LDRB     r3,[r4,r5]            ;1426
00083a  1c6d              ADDS     r5,r5,#1              ;1426
00083c  eb010181          ADD      r1,r1,r1,LSL #2       ;1426
000840  eb060141          ADD      r1,r6,r1,LSL #1       ;1426
000844  1c40              ADDS     r0,r0,#1              ;1426
000846  4419              ADD      r1,r1,r3              ;1426
000848  b2ad              UXTH     r5,r5                 ;1426
00084a  f01000ff          ANDS     r0,r0,#0xff           ;1424
00084e  d0f3              BEQ      |L9.2104|
                  |L9.2128|
000850  e145              B        |L9.2782|
                  |L9.2130|
000852  2001              MOVS     r0,#1                 ;1431
000854  f8ca0020          STR      r0,[r10,#0x20]        ;1431  ; Run_Control
000858  02c1              LSLS     r1,r0,#11             ;1432
00085a  4884              LDR      r0,|L9.2668|
00085c  f7fffffe          BL       GPIO_ResetBits
000860  5d61              LDRB     r1,[r4,r5]            ;1433
000862  1c6d              ADDS     r5,r5,#1              ;1433
000864  b2a8              UXTH     r0,r5                 ;1433
000866  292c              CMP      r1,#0x2c              ;1433
000868  d10c              BNE      |L9.2180|
00086a  2100              MOVS     r1,#0                 ;1435
                  |L9.2156|
00086c  5c22              LDRB     r2,[r4,r0]            ;1437
00086e  eb070387          ADD      r3,r7,r7,LSL #2       ;1437
000872  eb060343          ADD      r3,r6,r3,LSL #1       ;1437
000876  1c40              ADDS     r0,r0,#1              ;1437
000878  1c49              ADDS     r1,r1,#1              ;1437
00087a  18d7              ADDS     r7,r2,r3              ;1437
00087c  b2c9              UXTB     r1,r1                 ;1435
00087e  b280              UXTH     r0,r0                 ;1437
000880  2905              CMP      r1,#5                 ;1435
000882  d3f3              BCC      |L9.2156|
                  |L9.2180|
000884  465b              MOV      r3,r11                ;1440
000886  f8cb7044          STR      r7,[r11,#0x44]        ;1440  ; Para
00088a  5c21              LDRB     r1,[r4,r0]            ;1443
00088c  1c40              ADDS     r0,r0,#1              ;1443
00088e  2200              MOVS     r2,#0                 ;1441
000890  b280              UXTH     r0,r0                 ;1443
000892  292c              CMP      r1,#0x2c              ;1443
000894  d10c              BNE      |L9.2224|
000896  2100              MOVS     r1,#0                 ;1445
                  |L9.2200|
000898  5c25              LDRB     r5,[r4,r0]            ;1447
00089a  eb020282          ADD      r2,r2,r2,LSL #2       ;1447
00089e  1c40              ADDS     r0,r0,#1              ;1447
0008a0  1c49              ADDS     r1,r1,#1              ;1447
0008a2  eb060242          ADD      r2,r6,r2,LSL #1       ;1447
0008a6  b2c9              UXTB     r1,r1                 ;1445
0008a8  442a              ADD      r2,r2,r5              ;1447
0008aa  b280              UXTH     r0,r0                 ;1447
0008ac  2905              CMP      r1,#5                 ;1445
0008ae  d3f3              BCC      |L9.2200|
                  |L9.2224|
0008b0  f8a32048          STRH     r2,[r3,#0x48]         ;1450
0008b4  5c22              LDRB     r2,[r4,r0]            ;1453
0008b6  1c40              ADDS     r0,r0,#1              ;1453
0008b8  2100              MOVS     r1,#0                 ;1451
0008ba  b285              UXTH     r5,r0                 ;1453
0008bc  2a2c              CMP      r2,#0x2c              ;1453
0008be  d10c              BNE      |L9.2266|
0008c0  2000              MOVS     r0,#0                 ;1455
                  |L9.2242|
0008c2  5d62              LDRB     r2,[r4,r5]            ;1457
0008c4  1c6d              ADDS     r5,r5,#1              ;1457
0008c6  eb010181          ADD      r1,r1,r1,LSL #2       ;1457
0008ca  eb060141          ADD      r1,r6,r1,LSL #1       ;1457
0008ce  1c40              ADDS     r0,r0,#1              ;1457
0008d0  4411              ADD      r1,r1,r2              ;1457
0008d2  b2ad              UXTH     r5,r5                 ;1457
0008d4  f01000ff          ANDS     r0,r0,#0xff           ;1455
0008d8  d0f3              BEQ      |L9.2242|
                  |L9.2266|
0008da  4863              LDR      r0,|L9.2664|
0008dc  7181              STRB     r1,[r0,#6]            ;1460
0008de  4964              LDR      r1,|L9.2672|
0008e0  2000              MOVS     r0,#0                 ;1461
0008e2  7008              STRB     r0,[r1,#0]            ;1461
0008e4  e0fc              B        |L9.2784|
                  |L9.2278|
0008e6  5d61              LDRB     r1,[r4,r5]            ;1463
0008e8  1c6d              ADDS     r5,r5,#1              ;1463
0008ea  b2a8              UXTH     r0,r5                 ;1463
0008ec  292c              CMP      r1,#0x2c              ;1463
0008ee  d10c              BNE      |L9.2314|
0008f0  2100              MOVS     r1,#0                 ;1465
                  |L9.2290|
0008f2  5c23              LDRB     r3,[r4,r0]            ;1467
0008f4  eb070587          ADD      r5,r7,r7,LSL #2       ;1467
0008f8  eb060545          ADD      r5,r6,r5,LSL #1       ;1467
0008fc  1c40              ADDS     r0,r0,#1              ;1467
0008fe  1c49              ADDS     r1,r1,#1              ;1467
000900  195f              ADDS     r7,r3,r5              ;1467
000902  b2c9              UXTB     r1,r1                 ;1465
000904  b280              UXTH     r0,r0                 ;1467
000906  2905              CMP      r1,#5                 ;1465
000908  d3f3              BCC      |L9.2290|
                  |L9.2314|
00090a  465d              MOV      r5,r11                ;1470
00090c  f8ab7064          STRH     r7,[r11,#0x64]        ;1470
000910  5c21              LDRB     r1,[r4,r0]            ;1474
000912  1c40              ADDS     r0,r0,#1              ;1474
000914  2300              MOVS     r3,#0                 ;1471
000916  b280              UXTH     r0,r0                 ;1474
000918  292c              CMP      r1,#0x2c              ;1474
00091a  d10e              BNE      |L9.2362|
00091c  2100              MOVS     r1,#0                 ;1476
                  |L9.2334|
00091e  5c27              LDRB     r7,[r4,r0]            ;1478
000920  e000              B        |L9.2340|
                  |L9.2338|
000922  e1d9              B        |L9.3288|
                  |L9.2340|
000924  eb030383          ADD      r3,r3,r3,LSL #2       ;1478
000928  1c40              ADDS     r0,r0,#1              ;1478
00092a  1c49              ADDS     r1,r1,#1              ;1478
00092c  eb060343          ADD      r3,r6,r3,LSL #1       ;1478
000930  b2c9              UXTB     r1,r1                 ;1476
000932  443b              ADD      r3,r3,r7              ;1478
000934  b280              UXTH     r0,r0                 ;1478
000936  2905              CMP      r1,#5                 ;1476
000938  d3f1              BCC      |L9.2334|
                  |L9.2362|
00093a  f8a53066          STRH     r3,[r5,#0x66]         ;1481
00093e  5c23              LDRB     r3,[r4,r0]            ;1484
000940  1c40              ADDS     r0,r0,#1              ;1484
000942  2100              MOVS     r1,#0                 ;1482
000944  b285              UXTH     r5,r0                 ;1484
000946  2b2c              CMP      r3,#0x2c              ;1484
000948  d10c              BNE      |L9.2404|
00094a  2000              MOVS     r0,#0                 ;1486
                  |L9.2380|
00094c  5d63              LDRB     r3,[r4,r5]            ;1488
00094e  1c6d              ADDS     r5,r5,#1              ;1488
000950  eb010181          ADD      r1,r1,r1,LSL #2       ;1488
000954  eb060141          ADD      r1,r6,r1,LSL #1       ;1488
000958  1c40              ADDS     r0,r0,#1              ;1488
00095a  4419              ADD      r1,r1,r3              ;1488
00095c  b2ad              UXTH     r5,r5                 ;1488
00095e  f01000ff          ANDS     r0,r0,#0xff           ;1486
000962  d0f3              BEQ      |L9.2380|
                  |L9.2404|
000964  e0bb              B        |L9.2782|
                  |L9.2406|
000966  5d62              LDRB     r2,[r4,r5]            ;1495
000968  1c6d              ADDS     r5,r5,#1              ;1495
00096a  b2a8              UXTH     r0,r5                 ;1495
00096c  2a2c              CMP      r2,#0x2c              ;1495
00096e  d106              BNE      |L9.2430|
000970  2200              MOVS     r2,#0                 ;1497
                  |L9.2418|
000972  1c40              ADDS     r0,r0,#1              ;1497
000974  1c52              ADDS     r2,r2,#1              ;1499
000976  b2d2              UXTB     r2,r2                 ;1497
000978  b280              UXTH     r0,r0                 ;1499
00097a  2a05              CMP      r2,#5                 ;1497
00097c  d3f9              BCC      |L9.2418|
                  |L9.2430|
00097e  5c23              LDRB     r3,[r4,r0]            ;1505
000980  1c40              ADDS     r0,r0,#1              ;1505
000982  2200              MOVS     r2,#0                 ;1503
000984  b285              UXTH     r5,r0                 ;1505
000986  2b2c              CMP      r3,#0x2c              ;1505
000988  d10c              BNE      |L9.2468|
00098a  2000              MOVS     r0,#0                 ;1507
                  |L9.2444|
00098c  5d63              LDRB     r3,[r4,r5]            ;1509
00098e  eb020282          ADD      r2,r2,r2,LSL #2       ;1509
000992  1c6d              ADDS     r5,r5,#1              ;1509
000994  1c40              ADDS     r0,r0,#1              ;1509
000996  eb060242          ADD      r2,r6,r2,LSL #1       ;1509
00099a  b2c0              UXTB     r0,r0                 ;1507
00099c  441a              ADD      r2,r2,r3              ;1509
00099e  b2ad              UXTH     r5,r5                 ;1509
0009a0  2805              CMP      r0,#5                 ;1507
0009a2  d3f3              BCC      |L9.2444|
                  |L9.2468|
0009a4  f8cb2014          STR      r2,[r11,#0x14]        ;1512  ; Para
0009a8  f8db0014          LDR      r0,[r11,#0x14]        ;1516  ; Para
0009ac  2700              MOVS     r7,#0                 ;1513
0009ae  4288              CMP      r0,r1                 ;1516
0009b0  d90b              BLS      |L9.2506|
0009b2  2001              MOVS     r0,#1                 ;1518
0009b4  f8ca0020          STR      r0,[r10,#0x20]        ;1518  ; Run_Control
0009b8  02c1              LSLS     r1,r0,#11             ;1519
0009ba  482c              LDR      r0,|L9.2668|
0009bc  f7fffffe          BL       GPIO_ResetBits
0009c0  e00b              B        |L9.2522|
                  |L9.2498|
0009c2  e096              B        |L9.2802|
                  |L9.2500|
0009c4  e0f0              B        |L9.2984|
                  |L9.2502|
0009c6  e130              B        |L9.3114|
                  |L9.2504|
0009c8  e12e              B        |L9.3112|
                  |L9.2506|
0009ca  2000              MOVS     r0,#0                 ;1521
0009cc  f8ca0020          STR      r0,[r10,#0x20]        ;1521  ; Run_Control
0009d0  f44f6100          MOV      r1,#0x800             ;1522
0009d4  4825              LDR      r0,|L9.2668|
0009d6  f7fffffe          BL       GPIO_SetBits
                  |L9.2522|
0009da  5d60              LDRB     r0,[r4,r5]            ;1524
0009dc  1c6d              ADDS     r5,r5,#1              ;1524
0009de  b2ad              UXTH     r5,r5                 ;1524
0009e0  282c              CMP      r0,#0x2c              ;1524
0009e2  d10c              BNE      |L9.2558|
0009e4  2000              MOVS     r0,#0                 ;1526
                  |L9.2534|
0009e6  5d61              LDRB     r1,[r4,r5]            ;1528
0009e8  eb070287          ADD      r2,r7,r7,LSL #2       ;1528
0009ec  eb060242          ADD      r2,r6,r2,LSL #1       ;1528
0009f0  1c6d              ADDS     r5,r5,#1              ;1528
0009f2  188f              ADDS     r7,r1,r2              ;1528
0009f4  1c40              ADDS     r0,r0,#1              ;1528
0009f6  b2ad              UXTH     r5,r5                 ;1528
0009f8  f01000ff          ANDS     r0,r0,#0xff           ;1526
0009fc  d0f3              BEQ      |L9.2534|
                  |L9.2558|
0009fe  481a              LDR      r0,|L9.2664|
000a00  7187              STRB     r7,[r0,#6]            ;1531
000a02  7980              LDRB     r0,[r0,#6]            ;1532  ; mainswitch
000a04  bbb0              CBNZ     r0,|L9.2676|
000a06  2001              MOVS     r0,#1                 ;1534
000a08  f8ca0020          STR      r0,[r10,#0x20]        ;1534  ; Run_Control
000a0c  02c1              LSLS     r1,r0,#11             ;1535
000a0e  4817              LDR      r0,|L9.2668|
000a10  f7fffffe          BL       GPIO_ResetBits
000a14  e064              B        |L9.2784|
                  |L9.2582|
000a16  5d61              LDRB     r1,[r4,r5]            ;1538
000a18  1c6d              ADDS     r5,r5,#1              ;1538
000a1a  b2a8              UXTH     r0,r5                 ;1538
000a1c  292c              CMP      r1,#0x2c              ;1538
000a1e  d106              BNE      |L9.2606|
000a20  2100              MOVS     r1,#0                 ;1540
                  |L9.2594|
000a22  1c40              ADDS     r0,r0,#1              ;1540
000a24  1c49              ADDS     r1,r1,#1              ;1542
000a26  b2c9              UXTB     r1,r1                 ;1540
000a28  b280              UXTH     r0,r0                 ;1542
000a2a  2905              CMP      r1,#5                 ;1540
000a2c  d3f9              BCC      |L9.2594|
                  |L9.2606|
000a2e  5c21              LDRB     r1,[r4,r0]            ;1547
000a30  1c40              ADDS     r0,r0,#1              ;1547
000a32  b280              UXTH     r0,r0                 ;1547
000a34  292c              CMP      r1,#0x2c              ;1547
000a36  d106              BNE      |L9.2630|
000a38  2100              MOVS     r1,#0                 ;1549
                  |L9.2618|
000a3a  1c40              ADDS     r0,r0,#1              ;1549
000a3c  1c49              ADDS     r1,r1,#1              ;1551
000a3e  b2c9              UXTB     r1,r1                 ;1549
000a40  b280              UXTH     r0,r0                 ;1551
000a42  2905              CMP      r1,#5                 ;1549
000a44  d3f9              BCC      |L9.2618|
                  |L9.2630|
000a46  5c23              LDRB     r3,[r4,r0]            ;1556
000a48  1c40              ADDS     r0,r0,#1              ;1556
000a4a  2100              MOVS     r1,#0                 ;1554
000a4c  b285              UXTH     r5,r0                 ;1556
000a4e  2b2c              CMP      r3,#0x2c              ;1556
000a50  d114              BNE      |L9.2684|
000a52  2000              MOVS     r0,#0                 ;1558
                  |L9.2644|
000a54  5d63              LDRB     r3,[r4,r5]            ;1560
000a56  eb010181          ADD      r1,r1,r1,LSL #2       ;1560
000a5a  1c6d              ADDS     r5,r5,#1              ;1560
000a5c  eb060141          ADD      r1,r6,r1,LSL #1       ;1560
000a60  4419              ADD      r1,r1,r3              ;1560
000a62  b2ad              UXTH     r5,r5                 ;1560
000a64  1c40              ADDS     r0,r0,#1              ;1560
000a66  e006              B        |L9.2678|
                  |L9.2664|
                          DCD      ||.data||
                  |L9.2668|
                          DCD      0x40020800
                  |L9.2672|
                          DCD      finishflag
                  |L9.2676|
000a74  e034              B        |L9.2784|
                  |L9.2678|
000a76  f01000ff          ANDS     r0,r0,#0xff           ;1558
000a7a  d0eb              BEQ      |L9.2644|
                  |L9.2684|
000a7c  7191              STRB     r1,[r2,#6]            ;1563
000a7e  7990              LDRB     r0,[r2,#6]            ;1564  ; mainswitch
000a80  bb70              CBNZ     r0,|L9.2784|
000a82  2000              MOVS     r0,#0                 ;1566
000a84  7190              STRB     r0,[r2,#6]            ;1566
000a86  e02b              B        |L9.2784|
                  |L9.2696|
000a88  5d61              LDRB     r1,[r4,r5]            ;1569
000a8a  1c6d              ADDS     r5,r5,#1              ;1569
000a8c  b2a8              UXTH     r0,r5                 ;1569
000a8e  292c              CMP      r1,#0x2c              ;1569
000a90  d106              BNE      |L9.2720|
000a92  2100              MOVS     r1,#0                 ;1571
                  |L9.2708|
000a94  1c40              ADDS     r0,r0,#1              ;1571
000a96  1c49              ADDS     r1,r1,#1              ;1573
000a98  b2c9              UXTB     r1,r1                 ;1571
000a9a  b280              UXTH     r0,r0                 ;1573
000a9c  2905              CMP      r1,#5                 ;1571
000a9e  d3f9              BCC      |L9.2708|
                  |L9.2720|
000aa0  5c21              LDRB     r1,[r4,r0]            ;1578
000aa2  1c40              ADDS     r0,r0,#1              ;1578
000aa4  b280              UXTH     r0,r0                 ;1578
000aa6  292c              CMP      r1,#0x2c              ;1578
000aa8  d106              BNE      |L9.2744|
000aaa  2100              MOVS     r1,#0                 ;1580
                  |L9.2732|
000aac  1c40              ADDS     r0,r0,#1              ;1580
000aae  1c49              ADDS     r1,r1,#1              ;1582
000ab0  b2c9              UXTB     r1,r1                 ;1580
000ab2  b280              UXTH     r0,r0                 ;1582
000ab4  2905              CMP      r1,#5                 ;1580
000ab6  d3f9              BCC      |L9.2732|
                  |L9.2744|
000ab8  5c23              LDRB     r3,[r4,r0]            ;1587
000aba  1c40              ADDS     r0,r0,#1              ;1587
000abc  2100              MOVS     r1,#0                 ;1585
000abe  b285              UXTH     r5,r0                 ;1587
000ac0  2b2c              CMP      r3,#0x2c              ;1587
000ac2  d10c              BNE      |L9.2782|
000ac4  2000              MOVS     r0,#0                 ;1589
                  |L9.2758|
000ac6  5d63              LDRB     r3,[r4,r5]            ;1591
000ac8  1c6d              ADDS     r5,r5,#1              ;1591
000aca  eb010181          ADD      r1,r1,r1,LSL #2       ;1591
000ace  eb060141          ADD      r1,r6,r1,LSL #1       ;1591
000ad2  1c40              ADDS     r0,r0,#1              ;1591
000ad4  4419              ADD      r1,r1,r3              ;1591
000ad6  b2ad              UXTH     r5,r5                 ;1591
000ad8  f01000ff          ANDS     r0,r0,#0xff           ;1589
000adc  d0f3              BEQ      |L9.2758|
                  |L9.2782|
000ade  7191              STRB     r1,[r2,#6]            ;1594
                  |L9.2784|
000ae0  f7fffffe          BL       Off_GPOI_ResetSet
000ae4  4887              LDR      r0,|L9.3332|
000ae6  7980              LDRB     r0,[r0,#6]            ;1600  ; mainswitch
000ae8  f7fffffe          BL       LIST_ONOFF
                  |L9.2796|
000aec  f8049005          STRB     r9,[r4,r5]            ;1601
000af0  e419              B        |L9.806|
                  |L9.2802|
000af2  5d60              LDRB     r0,[r4,r5]            ;1607
000af4  2308              MOVS     r3,#8                 ;1606
000af6  283f              CMP      r0,#0x3f              ;1607
000af8  d01b              BEQ      |L9.2866|
000afa  2201              MOVS     r2,#1                 ;1616
000afc  2100              MOVS     r1,#0                 ;1617
                  |L9.2814|
000afe  b141              CBZ      r1,|L9.2834|
000b00  2904              CMP      r1,#4                 ;1619
000b02  d006              BEQ      |L9.2834|
000b04  1868              ADDS     r0,r5,r1              ;1621
000b06  5c20              LDRB     r0,[r4,r0]            ;1621
000b08  f7fffffe          BL       IsDigitChar
000b0c  2801              CMP      r0,#1                 ;1621
000b0e  d029              BEQ      |L9.2916|
000b10  2200              MOVS     r2,#0                 ;1627
                  |L9.2834|
000b12  e000              B        |L9.2838|
                  |L9.2836|
000b14  e0be              B        |L9.3220|
                  |L9.2838|
000b16  1c49              ADDS     r1,r1,#1              ;1627
000b18  b2c9              UXTB     r1,r1                 ;1617
000b1a  4299              CMP      r1,r3                 ;1617
000b1c  d3ef              BCC      |L9.2814|
000b1e  2a01              CMP      r2,#1                 ;1630
                  |L9.2848|
000b20  f47faa87          BNE      |L9.50|
000b24  18e8              ADDS     r0,r5,r3              ;1630
000b26  5c20              LDRB     r0,[r4,r0]            ;1630
000b28  280d              CMP      r0,#0xd               ;1630
000b2a  d1f9              BNE      |L9.2848|
000b2c  2200              MOVS     r2,#0                 ;1635
000b2e  4610              MOV      r0,r2                 ;1636
000b30  e031              B        |L9.2966|
                  |L9.2866|
000b32  eeb58ac0          VCMPE.F32 s16,#0.0              ;1609
000b36  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1609
000b3a  db01              BLT      |L9.2880|
000b3c  202b              MOVS     r0,#0x2b              ;1609
000b3e  e000              B        |L9.2882|
                  |L9.2880|
000b40  202d              MOVS     r0,#0x2d              ;1609
                  |L9.2882|
000b42  5560              STRB     r0,[r4,r5]            ;1609
000b44  1c6d              ADDS     r5,r5,#1              ;1609
000b46  b2ad              UXTH     r5,r5                 ;1609
000b48  ee180a10          VMOV     r0,s16                ;1610
000b4c  f7fffffe          BL       __aeabi_f2d
000b50  ec410b10          VMOV     d0,r0,r1              ;1610
000b54  1960              ADDS     r0,r4,r5              ;1610
000b56  ec532b10          VMOV     r2,r3,d0              ;1610
000b5a  a16b              ADR      r1,|L9.3336|
000b5c  f7fffffe          BL       __2sprintf
000b60  3508              ADDS     r5,r5,#8              ;1610
000b62  e097              B        |L9.3220|
                  |L9.2916|
000b64  f0020201          AND      r2,r2,#1              ;1623
000b68  e7d3              B        |L9.2834|
                  |L9.2922|
000b6a  b150              CBZ      r0,|L9.2946|
000b6c  2804              CMP      r0,#4                 ;1643
000b6e  d005              BEQ      |L9.2940|
000b70  5d61              LDRB     r1,[r4,r5]            ;1649
000b72  eb020282          ADD      r2,r2,r2,LSL #2       ;1649
000b76  eb060242          ADD      r2,r6,r2,LSL #1       ;1649
000b7a  440a              ADD      r2,r2,r1              ;1649
                  |L9.2940|
000b7c  1c6d              ADDS     r5,r5,#1              ;1649
000b7e  b2ad              UXTH     r5,r5                 ;1645
000b80  e007              B        |L9.2962|
                  |L9.2946|
000b82  5d61              LDRB     r1,[r4,r5]            ;1640
000b84  1c6d              ADDS     r5,r5,#1              ;1640
000b86  3930              SUBS     r1,r1,#0x30           ;1640
000b88  ee001a10          VMOV     s0,r1                 ;1640
000b8c  b2ad              UXTH     r5,r5                 ;1640
000b8e  eeb88ac0          VCVT.F32.S32 s16,s0                ;1640
                  |L9.2962|
000b92  1c40              ADDS     r0,r0,#1              ;1640
000b94  b2c0              UXTB     r0,r0                 ;1636
                  |L9.2966|
000b96  4298              CMP      r0,r3                 ;1636
000b98  d3e7              BCC      |L9.2922|
000b9a  eebc0ac8          VCVT.U32.F32 s0,s16                ;1651
000b9e  ee100a10          VMOV     r0,s0                 ;1651
000ba2  b2c1              UXTB     r1,r0                 ;1651
000ba4  2000              MOVS     r0,#0                 ;1651
000ba6  e03d              B        |L9.3108|
                  |L9.2984|
000ba8  5d60              LDRB     r0,[r4,r5]            ;1658
000baa  2308              MOVS     r3,#8                 ;1657
000bac  283f              CMP      r0,#0x3f              ;1658
000bae  d03b              BEQ      |L9.3112|
000bb0  2201              MOVS     r2,#1                 ;1667
000bb2  2100              MOVS     r1,#0                 ;1668
                  |L9.2996|
000bb4  b141              CBZ      r1,|L9.3016|
000bb6  2904              CMP      r1,#4                 ;1670
000bb8  d006              BEQ      |L9.3016|
000bba  1868              ADDS     r0,r5,r1              ;1672
000bbc  5c20              LDRB     r0,[r4,r0]            ;1672
000bbe  f7fffffe          BL       IsDigitChar
000bc2  2801              CMP      r0,#1                 ;1672
000bc4  d00d              BEQ      |L9.3042|
000bc6  2200              MOVS     r2,#0                 ;1678
                  |L9.3016|
000bc8  1c49              ADDS     r1,r1,#1              ;1678
000bca  b2c9              UXTB     r1,r1                 ;1668
000bcc  4299              CMP      r1,r3                 ;1668
000bce  d3f1              BCC      |L9.2996|
000bd0  2a01              CMP      r2,#1                 ;1681
                  |L9.3026|
000bd2  d1a5              BNE      |L9.2848|
000bd4  18e8              ADDS     r0,r5,r3              ;1681
000bd6  5c20              LDRB     r0,[r4,r0]            ;1681
000bd8  280d              CMP      r0,#0xd               ;1681
000bda  d1a1              BNE      |L9.2848|
000bdc  2200              MOVS     r2,#0                 ;1686
000bde  4610              MOV      r0,r2                 ;1687
000be0  e018              B        |L9.3092|
                  |L9.3042|
000be2  f0020201          AND      r2,r2,#1              ;1674
000be6  e7ef              B        |L9.3016|
                  |L9.3048|
000be8  b150              CBZ      r0,|L9.3072|
000bea  2804              CMP      r0,#4                 ;1694
000bec  d005              BEQ      |L9.3066|
000bee  5d61              LDRB     r1,[r4,r5]            ;1700
000bf0  eb020282          ADD      r2,r2,r2,LSL #2       ;1700
000bf4  eb060242          ADD      r2,r6,r2,LSL #1       ;1700
000bf8  440a              ADD      r2,r2,r1              ;1700
                  |L9.3066|
000bfa  1c6d              ADDS     r5,r5,#1              ;1700
000bfc  b2ad              UXTH     r5,r5                 ;1696
000bfe  e007              B        |L9.3088|
                  |L9.3072|
000c00  5d61              LDRB     r1,[r4,r5]            ;1691
000c02  1c6d              ADDS     r5,r5,#1              ;1691
000c04  3930              SUBS     r1,r1,#0x30           ;1691
000c06  ee001a10          VMOV     s0,r1                 ;1691
000c0a  b2ad              UXTH     r5,r5                 ;1691
000c0c  eeb88ac0          VCVT.F32.S32 s16,s0                ;1691
                  |L9.3088|
000c10  1c40              ADDS     r0,r0,#1              ;1691
000c12  b2c0              UXTB     r0,r0                 ;1687
                  |L9.3092|
000c14  4298              CMP      r0,r3                 ;1687
000c16  d3e7              BCC      |L9.3048|
000c18  eebc0ac8          VCVT.U32.F32 s0,s16                ;1702
000c1c  ee100a10          VMOV     r0,s0                 ;1702
000c20  b2c1              UXTB     r1,r0                 ;1702
000c22  2001              MOVS     r0,#1                 ;1702
                  |L9.3108|
000c24  f7fffffe          BL       CalHandle
                  |L9.3112|
000c28  e060              B        |L9.3308|
                  |L9.3114|
000c2a  5d60              LDRB     r0,[r4,r5]            ;1709
000c2c  2306              MOVS     r3,#6                 ;1708
000c2e  283f              CMP      r0,#0x3f              ;1709
000c30  d018              BEQ      |L9.3172|
000c32  2201              MOVS     r2,#1                 ;1718
000c34  2100              MOVS     r1,#0                 ;1719
                  |L9.3126|
000c36  b141              CBZ      r1,|L9.3146|
000c38  2904              CMP      r1,#4                 ;1721
000c3a  d006              BEQ      |L9.3146|
000c3c  1868              ADDS     r0,r5,r1              ;1723
000c3e  5c20              LDRB     r0,[r4,r0]            ;1723
000c40  f7fffffe          BL       IsDigitChar
000c44  2801              CMP      r0,#1                 ;1723
000c46  d028              BEQ      |L9.3226|
000c48  2200              MOVS     r2,#0                 ;1729
                  |L9.3146|
000c4a  1c49              ADDS     r1,r1,#1              ;1729
000c4c  b2c9              UXTB     r1,r1                 ;1719
000c4e  4299              CMP      r1,r3                 ;1719
000c50  d3f1              BCC      |L9.3126|
000c52  2a01              CMP      r2,#1                 ;1732
000c54  d1bd              BNE      |L9.3026|
000c56  18e8              ADDS     r0,r5,r3              ;1732
000c58  5c20              LDRB     r0,[r4,r0]            ;1732
000c5a  280d              CMP      r0,#0xd               ;1732
000c5c  d1b9              BNE      |L9.3026|
000c5e  2200              MOVS     r2,#0                 ;1737
000c60  4610              MOV      r0,r2                 ;1738
000c62  e028              B        |L9.3254|
                  |L9.3172|
000c64  eeb58ac0          VCMPE.F32 s16,#0.0              ;1711
000c68  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1711
000c6c  db01              BLT      |L9.3186|
000c6e  202b              MOVS     r0,#0x2b              ;1711
000c70  e000              B        |L9.3188|
                  |L9.3186|
000c72  202d              MOVS     r0,#0x2d              ;1711
                  |L9.3188|
000c74  5560              STRB     r0,[r4,r5]            ;1711
000c76  1c6d              ADDS     r5,r5,#1              ;1711
000c78  b2ad              UXTH     r5,r5                 ;1711
000c7a  ee180a10          VMOV     r0,s16                ;1712
000c7e  f7fffffe          BL       __aeabi_f2d
000c82  ec410b10          VMOV     d0,r0,r1              ;1712
000c86  1960              ADDS     r0,r4,r5              ;1712
000c88  ec532b10          VMOV     r2,r3,d0              ;1712
000c8c  a11e              ADR      r1,|L9.3336|
000c8e  f7fffffe          BL       __2sprintf
000c92  1dad              ADDS     r5,r5,#6              ;1712
                  |L9.3220|
000c94  b2a8              UXTH     r0,r5                 ;1713
000c96  f7ffbb16          B        |L9.710|
                  |L9.3226|
000c9a  f0020201          AND      r2,r2,#1              ;1725
000c9e  e7d4              B        |L9.3146|
                  |L9.3232|
000ca0  5d61              LDRB     r1,[r4,r5]            ;1751
000ca2  b188              CBZ      r0,|L9.3272|
000ca4  eb020282          ADD      r2,r2,r2,LSL #2       ;1751
000ca8  eb060242          ADD      r2,r6,r2,LSL #1       ;1751
000cac  1c6d              ADDS     r5,r5,#1              ;1751
000cae  440a              ADD      r2,r2,r1              ;1751
000cb0  b2ad              UXTH     r5,r5                 ;1751
                  |L9.3250|
000cb2  1c40              ADDS     r0,r0,#1              ;1751
000cb4  b2c0              UXTB     r0,r0                 ;1738
                  |L9.3254|
000cb6  4298              CMP      r0,r3                 ;1738
000cb8  d3f2              BCC      |L9.3232|
000cba  eebc0ac8          VCVT.U32.F32 s0,s16                ;1753
000cbe  ee100a10          VMOV     r0,s0                 ;1753
000cc2  b2c1              UXTB     r1,r0                 ;1753
000cc4  2002              MOVS     r0,#2                 ;1753
000cc6  e7ad              B        |L9.3108|
                  |L9.3272|
000cc8  1c6d              ADDS     r5,r5,#1              ;1753
000cca  3930              SUBS     r1,r1,#0x30           ;1742
000ccc  ee001a10          VMOV     s0,r1                 ;1742
000cd0  b2ad              UXTH     r5,r5                 ;1742
000cd2  eeb88ac0          VCVT.F32.S32 s16,s0                ;1742
000cd6  e7ec              B        |L9.3250|
                  |L9.3288|
000cd8  490d              LDR      r1,|L9.3344|
000cda  2001              MOVS     r0,#1                 ;1779
000cdc  7008              STRB     r0,[r1,#0]            ;1779
000cde  f7fffffe          BL       Write_Boot_Flag
000ce2  2f01              CMP      r7,#1                 ;1781
000ce4  d102              BNE      |L9.3308|
000ce6  2037              MOVS     r0,#0x37              ;1783
000ce8  f7fffffe          BL       JumpBoot
                  |L9.3308|
000cec  f1b80f13          CMP      r8,#0x13              ;1903
000cf0  f4bfa99f          BCS      |L9.50|
000cf4  b033              ADD      sp,sp,#0xcc
000cf6  1c6d              ADDS     r5,r5,#1              ;1903
000cf8  ecbd8b02          VPOP     {d8}
000cfc  b2a8              UXTH     r0,r5                 ;1907
000cfe  e8bd8ff0          POP      {r4-r11,pc}
;;;1909   
                          ENDP

000d02  0000              DCW      0x0000
                  |L9.3332|
                          DCD      ||.data||
                  |L9.3336|
000d08  2530332e          DCB      "%03.3f",0
000d0c  336600  
000d0f  00                DCB      0
                  |L9.3344|
                          DCD      bootflag

                          AREA ||i.SetErr_ACK||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  SetErr_ACK PROC
;;;887    
;;;888    u16 SetErr_ACK(char *buf, u8 addr ,u8 ucErr)
000000  b5f8              PUSH     {r3-r7,lr}
;;;889    {
000002  4604              MOV      r4,r0
;;;890    		u16 i=0;
;;;891    		u8 len = 0;
;;;892    		char stradd[3] = {0};
000004  2000              MOVS     r0,#0
;;;893    		int addlen=0;
;;;894    		memset(buf,0,sizeof(buf));
000006  9000              STR      r0,[sp,#0]
000008  6020              STR      r0,[r4,#0]
00000a  4616              MOV      r6,r2                 ;889
;;;895        	buf[i++] = ChrStartS;
00000c  203e              MOVS     r0,#0x3e
00000e  7020              STRB     r0,[r4,#0]
;;;896    		sprintf(stradd,"%d",addr);
000010  460a              MOV      r2,r1
000012  a11a              ADR      r1,|L10.124|
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       __2sprintf
;;;897    		addlen=strlen(stradd);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       strlen
000020  4605              MOV      r5,r0
;;;898    		strncat(&buf[i],stradd,addlen);
000022  1c60              ADDS     r0,r4,#1
000024  462a              MOV      r2,r5
000026  4669              MOV      r1,sp
000028  f7fffffe          BL       strncat
00002c  1c6d              ADDS     r5,r5,#1
;;;899    		i+=addlen;
00002e  b2a8              UXTH     r0,r5
;;;900    		buf[i++] = '/';
000030  212f              MOVS     r1,#0x2f
000032  5421              STRB     r1,[r4,r0]
000034  1c40              ADDS     r0,r0,#1
000036  b285              UXTH     r5,r0
;;;901    		switch(ucErr)
000038  2e01              CMP      r6,#1
00003a  d008              BEQ      |L10.78|
00003c  2e02              CMP      r6,#2
00003e  d001              BEQ      |L10.68|
000040  2e03              CMP      r6,#3
000042  d015              BEQ      |L10.112|
                  |L10.68|
;;;902            {
;;;903              case 1:         //
;;;904              	   len = 9;
;;;905              	   memmove(&buf[i],"PARA ERR!",len);   
;;;906              	   break;
;;;907    	      case 2:         //
;;;908              	   len = 8;
;;;909              	   memmove(&buf[i],"CMD ERR!",len);   
;;;910              	   break;
;;;911    	      case 3:         //
;;;912              	   len = 8;
;;;913              	   memmove(&buf[i],"REM ERR!",len);   
;;;914              	   break;
;;;915    		  default:    
;;;916                   len = 8;
000044  2608              MOVS     r6,#8
;;;917              	   memmove(&buf[i],"CMD ERR!",len);   
000046  1960              ADDS     r0,r4,r5
000048  4632              MOV      r2,r6
00004a  a10d              ADR      r1,|L10.128|
;;;918                   break;
00004c  e003              B        |L10.86|
                  |L10.78|
00004e  2609              MOVS     r6,#9                 ;904
000050  1960              ADDS     r0,r4,r5              ;905
000052  4632              MOV      r2,r6                 ;905
000054  a10d              ADR      r1,|L10.140|
                  |L10.86|
000056  f7fffffe          BL       __aeabi_memmove
;;;919    	    }
;;;920    	    i+=len;
00005a  19a8              ADDS     r0,r5,r6
00005c  b280              UXTH     r0,r0
;;;921    		buf[i++] = ChrEndR;
00005e  210d              MOVS     r1,#0xd
000060  5421              STRB     r1,[r4,r0]
000062  1c40              ADDS     r0,r0,#1
000064  b280              UXTH     r0,r0
;;;922    		buf[i++] = ChrEndS;
000066  210a              MOVS     r1,#0xa
000068  5421              STRB     r1,[r4,r0]
00006a  1c40              ADDS     r0,r0,#1
00006c  b280              UXTH     r0,r0
;;;923    		return i;
;;;924    }
00006e  bdf8              POP      {r3-r7,pc}
                  |L10.112|
000070  2608              MOVS     r6,#8                 ;912
000072  1960              ADDS     r0,r4,r5              ;913
000074  4632              MOV      r2,r6                 ;913
000076  a108              ADR      r1,|L10.152|
000078  e7ed              B        |L10.86|
;;;925    
                          ENDP

00007a  0000              DCW      0x0000
                  |L10.124|
00007c  256400            DCB      "%d",0
00007f  00                DCB      0
                  |L10.128|
000080  434d4420          DCB      "CMD ERR!",0
000084  45525221
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L10.140|
00008c  50415241          DCB      "PARA ERR!",0
000090  20455252
000094  2100    
000096  00                DCB      0
000097  00                DCB      0
                  |L10.152|
000098  52454d20          DCB      "REM ERR!",0
00009c  45525221
0000a0  00      
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0

                          AREA ||i.SetListPC||, CODE, READONLY, ALIGN=2

                  SetListPC PROC
;;;158    
;;;159    void SetListPC(void)
000000  4804              LDR      r0,|L11.20|
;;;160    {
000002  b510              PUSH     {r4,lr}
;;;161    	SetPowerC(Para.CDC_Limit_C);
000004  f8b00066          LDRH     r0,[r0,#0x66]  ; Para
000008  f7fffffe          BL       SetPowerC
;;;162    	listsend = 3;
00000c  4902              LDR      r1,|L11.24|
00000e  2003              MOVS     r0,#3
000010  7248              STRB     r0,[r1,#9]
;;;163    }
000012  bd10              POP      {r4,pc}
;;;164    
                          ENDP

                  |L11.20|
                          DCD      Para
                  |L11.24|
                          DCD      ||.data||

                          AREA ||i.SetListPS||, CODE, READONLY, ALIGN=2

                  SetListPS PROC
;;;165    
;;;166    void SetListPS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;167    {
;;;168    	if(mainswitch == 1)
000002  4c0d              LDR      r4,|L12.56|
000004  79a0              LDRB     r0,[r4,#6]  ; mainswitch
;;;169    	{
;;;170    		GPIO_SetBits(GPIOE,GPIO_Pin_2);
000006  4d0d              LDR      r5,|L12.60|
000008  2801              CMP      r0,#1                 ;168
00000a  d106              BNE      |L12.26|
00000c  2104              MOVS     r1,#4
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       GPIO_SetBits
;;;171    		Delay_ms(POWER_SW_DELAY);
000014  200a              MOVS     r0,#0xa
000016  f7fffffe          BL       Delay_ms
                  |L12.26|
;;;172    	}
;;;173    	
;;;174    	if(mainswitch == 0)
00001a  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00001c  b930              CBNZ     r0,|L12.44|
;;;175    	{
;;;176    		Delay_ms(POWER_SW_DELAY);
00001e  200a              MOVS     r0,#0xa
000020  f7fffffe          BL       Delay_ms
;;;177    		GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
000024  2104              MOVS     r1,#4
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       GPIO_ResetBits
                  |L12.44|
;;;178    	}
;;;179    	PowerSwitch(mainswitch);
00002c  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00002e  f7fffffe          BL       PowerSwitch
;;;180    	listsend = 0;
000032  2000              MOVS     r0,#0
000034  7260              STRB     r0,[r4,#9]
;;;181    }
000036  bd70              POP      {r4-r6,pc}
;;;182    
                          ENDP

                  |L12.56|
                          DCD      ||.data||
                  |L12.60|
                          DCD      0x40021000

                          AREA ||i.SetListPV||, CODE, READONLY, ALIGN=2

                  SetListPV PROC
;;;152    }
;;;153    void SetListPV(void)
000000  4804              LDR      r0,|L13.20|
;;;154    {
000002  b510              PUSH     {r4,lr}
;;;155    	SetPowerV(Para.CDC_OutPut_V);
000004  f8b00064          LDRH     r0,[r0,#0x64]  ; Para
000008  f7fffffe          BL       SetPowerV
;;;156    	listsend = 2;
00000c  4902              LDR      r1,|L13.24|
00000e  2002              MOVS     r0,#2
000010  7248              STRB     r0,[r1,#9]
;;;157    }
000012  bd10              POP      {r4,pc}
;;;158    
                          ENDP

                  |L13.20|
                          DCD      Para
                  |L13.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerC||, CODE, READONLY, ALIGN=2

                  SetPowerC PROC
;;;113    
;;;114    void SetPowerC(vu16 powc)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;115    {
;;;116    	MasterSendbuf[0] = 0x01;
000002  4c12              LDR      r4,|L14.76|
000004  2001              MOVS     r0,#1
000006  7020              STRB     r0,[r4,#0]
;;;117    	MasterSendbuf[1] = 0x06;
000008  2006              MOVS     r0,#6
00000a  7060              STRB     r0,[r4,#1]
;;;118    	MasterSendbuf[2] = 0x00;
00000c  2000              MOVS     r0,#0
00000e  70a0              STRB     r0,[r4,#2]
;;;119    	MasterSendbuf[3] = 0x31;
000010  2031              MOVS     r0,#0x31
000012  70e0              STRB     r0,[r4,#3]
;;;120    	MasterSendbuf[4] = (u8)(powc/10>>8);
000014  f8bd1000          LDRH     r1,[sp,#0]
000018  200a              MOVS     r0,#0xa
00001a  fbb1f1f0          UDIV     r1,r1,r0
00001e  0a09              LSRS     r1,r1,#8
000020  7121              STRB     r1,[r4,#4]
;;;121    	MasterSendbuf[5] = (u8)(powc/10);
000022  f8bd1000          LDRH     r1,[sp,#0]
000026  fbb1f0f0          UDIV     r0,r1,r0
00002a  7160              STRB     r0,[r4,#5]
;;;122    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00002c  2106              MOVS     r1,#6
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       Hardware_CRC
000034  71a0              STRB     r0,[r4,#6]
;;;123    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000036  2106              MOVS     r1,#6
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       Hardware_CRC
00003e  0a00              LSRS     r0,r0,#8
000040  71e0              STRB     r0,[r4,#7]
;;;124    	USART3WriteDMA(8);
000042  e8bd4038          POP      {r3-r5,lr}
000046  2008              MOVS     r0,#8
000048  f7ffbffe          B.W      USART3WriteDMA
;;;125    }
;;;126    
                          ENDP

                  |L14.76|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.SetPowerModeC||, CODE, READONLY, ALIGN=2

                  SetPowerModeC PROC
;;;132    
;;;133    void SetPowerModeC(void)
000000  4804              LDR      r0,|L15.20|
;;;134    {
000002  b510              PUSH     {r4,lr}
;;;135    	SetPowerC(Para.POWER_Limit_C);
000004  f8b00056          LDRH     r0,[r0,#0x56]  ; Para
000008  f7fffffe          BL       SetPowerC
;;;136    	sendwait = 3;
00000c  4902              LDR      r1,|L15.24|
00000e  2003              MOVS     r0,#3
000010  7208              STRB     r0,[r1,#8]
;;;137    }
000012  bd10              POP      {r4,pc}
;;;138    
                          ENDP

                  |L15.20|
                          DCD      Para
                  |L15.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerModeS||, CODE, READONLY, ALIGN=2

                  SetPowerModeS PROC
;;;138    
;;;139    void SetPowerModeS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;140    {
;;;141    	if(mainswitch == 1)
000002  4c0e              LDR      r4,|L16.60|
000004  79a1              LDRB     r1,[r4,#6]  ; mainswitch
;;;142    	{
;;;143    		GPIO_SetBits(GPIOE,GPIO_Pin_2);
000006  4d0e              LDR      r5,|L16.64|
000008  2901              CMP      r1,#1                 ;141
00000a  d002              BEQ      |L16.18|
;;;144    		Delay_ms(POWER_SW_DELAY);
;;;145    	}else if(mainswitch == 0)
00000c  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00000e  b140              CBZ      r0,|L16.34|
000010  e00e              B        |L16.48|
                  |L16.18|
000012  2104              MOVS     r1,#4                 ;143
000014  4628              MOV      r0,r5                 ;143
000016  f7fffffe          BL       GPIO_SetBits
00001a  200a              MOVS     r0,#0xa               ;144
00001c  f7fffffe          BL       Delay_ms
000020  e006              B        |L16.48|
                  |L16.34|
;;;146    	{
;;;147    		Delay_ms(POWER_SW_DELAY);
000022  200a              MOVS     r0,#0xa
000024  f7fffffe          BL       Delay_ms
;;;148    		GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
000028  2104              MOVS     r1,#4
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       GPIO_ResetBits
                  |L16.48|
;;;149    	}
;;;150    	PowerSwitch(mainswitch);
000030  79a0              LDRB     r0,[r4,#6]  ; mainswitch
000032  f7fffffe          BL       PowerSwitch
;;;151    	sendwait = 0;
000036  2000              MOVS     r0,#0
000038  7220              STRB     r0,[r4,#8]
;;;152    }
00003a  bd70              POP      {r4-r6,pc}
;;;153    void SetListPV(void)
                          ENDP

                  |L16.60|
                          DCD      ||.data||
                  |L16.64|
                          DCD      0x40021000

                          AREA ||i.SetPowerModeV||, CODE, READONLY, ALIGN=2

                  SetPowerModeV PROC
;;;126    
;;;127    void SetPowerModeV(void)
000000  4804              LDR      r0,|L17.20|
;;;128    {
000002  b510              PUSH     {r4,lr}
;;;129    	SetPowerV(Para.POWER_OutPut_V);
000004  f8b00054          LDRH     r0,[r0,#0x54]  ; Para
000008  f7fffffe          BL       SetPowerV
;;;130    	sendwait = 2;
00000c  4902              LDR      r1,|L17.24|
00000e  2002              MOVS     r0,#2
000010  7208              STRB     r0,[r1,#8]
;;;131    }
000012  bd10              POP      {r4,pc}
;;;132    
                          ENDP

                  |L17.20|
                          DCD      Para
                  |L17.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerV||, CODE, READONLY, ALIGN=2

                  SetPowerV PROC
;;;100    }
;;;101    void SetPowerV(vu16 powv)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;102    {
;;;103    	MasterSendbuf[0] = 0x01;
000002  4c12              LDR      r4,|L18.76|
000004  2001              MOVS     r0,#1
000006  7020              STRB     r0,[r4,#0]
;;;104    	MasterSendbuf[1] = 0x06;
000008  2006              MOVS     r0,#6
00000a  7060              STRB     r0,[r4,#1]
;;;105    	MasterSendbuf[2] = 0x00;
00000c  2000              MOVS     r0,#0
00000e  70a0              STRB     r0,[r4,#2]
;;;106    	MasterSendbuf[3] = 0x30;
000010  2030              MOVS     r0,#0x30
000012  70e0              STRB     r0,[r4,#3]
;;;107    	MasterSendbuf[4] = (u8)(powv/10>>8);
000014  f8bd1000          LDRH     r1,[sp,#0]
000018  200a              MOVS     r0,#0xa
00001a  fbb1f1f0          UDIV     r1,r1,r0
00001e  0a09              LSRS     r1,r1,#8
000020  7121              STRB     r1,[r4,#4]
;;;108    	MasterSendbuf[5] = (u8)(powv/10);
000022  f8bd1000          LDRH     r1,[sp,#0]
000026  fbb1f0f0          UDIV     r0,r1,r0
00002a  7160              STRB     r0,[r4,#5]
;;;109    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00002c  2106              MOVS     r1,#6
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       Hardware_CRC
000034  71a0              STRB     r0,[r4,#6]
;;;110    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000036  2106              MOVS     r1,#6
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       Hardware_CRC
00003e  0a00              LSRS     r0,r0,#8
000040  71e0              STRB     r0,[r4,#7]
;;;111    	USART3WriteDMA(8);
000042  e8bd4038          POP      {r3-r5,lr}
000046  2008              MOVS     r0,#8
000048  f7ffbffe          B.W      USART3WriteDMA
;;;112    }
;;;113    
                          ENDP

                  |L18.76|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.UART1_Send||, CODE, READONLY, ALIGN=2

                  UART1_Send PROC
;;;2301   
;;;2302   void UART1_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2303   {
;;;2304   	static vu8 UART_Buffer_Send_pointer=0;
;;;2305   		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L19.72|
000004  78e0              LDRB     r0,[r4,#3]  ; UART_Buffer_Send_pointer
000006  7921              LDRB     r1,[r4,#4]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L19.56|
;;;2306            {
;;;2307   				 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L19.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L19.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L19.54|
;;;2308   				 {
;;;2309   					USART_SendData(USART1,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  78e1              LDRB     r1,[r4,#3]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  4d0d              LDR      r5,|L19.84|
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       USART_SendData
                  |L19.36|
;;;2310   					while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);//等待发送完成
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L19.36|
;;;2311   					UART_Buffer_Send_pointer++;
000030  78e0              LDRB     r0,[r4,#3]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  70e0              STRB     r0,[r4,#3]
                  |L19.54|
;;;2312   				 }
;;;2313            }
;;;2314   		else 
;;;2315   		{
;;;2316   			UART_Buffer_Send_pointer=0;
;;;2317   			UART_SEND_flag=0;//发送完成一帧数据
;;;2318   		}
;;;2319   }
000036  bd70              POP      {r4-r6,pc}
                  |L19.56|
000038  2000              MOVS     r0,#0                 ;2316
00003a  70e0              STRB     r0,[r4,#3]            ;2316
00003c  4806              LDR      r0,|L19.88|
00003e  6801              LDR      r1,[r0,#0]            ;2317  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;2317
000044  6001              STR      r1,[r0,#0]            ;2317  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;2320   
                          ENDP

                  |L19.72|
                          DCD      ||.data||
                  |L19.76|
                          DCD      ||area_number.31||
                  |L19.80|
                          DCD      ADDR
                  |L19.84|
                          DCD      0x40011000
                  |L19.88|
                          DCD      flagA

                          AREA ||i.UART2_Send||, CODE, READONLY, ALIGN=2

                  UART2_Send PROC
;;;2282   }
;;;2283   void UART2_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2284   {
;;;2285   	static vu8 UART_Buffer_Send_pointer=0;
;;;2286   		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L20.72|
000004  78a0              LDRB     r0,[r4,#2]  ; UART_Buffer_Send_pointer
000006  7921              LDRB     r1,[r4,#4]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L20.56|
;;;2287            {
;;;2288   					 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L20.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L20.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L20.54|
;;;2289   					 {
;;;2290   						USART_SendData(USART2,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  78a1              LDRB     r1,[r4,#2]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  480d              LDR      r0,|L20.84|
00001e  f7fffffe          BL       USART_SendData
;;;2291   						while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);//等待发送完成
000022  4d0d              LDR      r5,|L20.88|
                  |L20.36|
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L20.36|
;;;2292   						UART_Buffer_Send_pointer++;
000030  78a0              LDRB     r0,[r4,#2]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  70a0              STRB     r0,[r4,#2]
                  |L20.54|
;;;2293   					}
;;;2294            }
;;;2295   		else 
;;;2296   		{
;;;2297   			UART_Buffer_Send_pointer=0;
;;;2298   			UART_SEND_flag=0;//发送完成一帧数据
;;;2299   		}
;;;2300   }
000036  bd70              POP      {r4-r6,pc}
                  |L20.56|
000038  2000              MOVS     r0,#0                 ;2297
00003a  70a0              STRB     r0,[r4,#2]            ;2297
00003c  4807              LDR      r0,|L20.92|
00003e  6801              LDR      r1,[r0,#0]            ;2298  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;2298
000044  6001              STR      r1,[r0,#0]            ;2298  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;2301   
                          ENDP

                  |L20.72|
                          DCD      ||.data||
                  |L20.76|
                          DCD      ||area_number.31||
                  |L20.80|
                          DCD      ADDR
                  |L20.84|
                          DCD      0x40004400
                  |L20.88|
                          DCD      0x40011000
                  |L20.92|
                          DCD      flagA

                          AREA ||i.USART2_Configuration||, CODE, READONLY, ALIGN=2

                  USART2_Configuration PROC
;;;1978   
;;;1979   void USART2_Configuration(void)//串口初始化函数
000000  b570              PUSH     {r4-r6,lr}
;;;1980   {  
;;;1981   	GPIO_InitTypeDef GPIO_InitStructure;
;;;1982   	USART_InitTypeDef USART_InitStructure;
;;;1983   	
;;;1984   	/* config USART1 clock */
;;;1985   	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
000002  2101              MOVS     r1,#1
000004  b088              SUB      sp,sp,#0x20           ;1980
000006  0448              LSLS     r0,r1,#17
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;1986   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);
00000c  4e2a              LDR      r6,|L21.184|
00000e  2207              MOVS     r2,#7
000010  2102              MOVS     r1,#2
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;1987   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);
000018  2207              MOVS     r2,#7
00001a  2103              MOVS     r1,#3
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;1988   	/* USART1 GPIO config */
;;;1989   	/* Configure USART1 Tx (PA.02) as alternate function push-pull */
;;;1990   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;1991   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000022  2502              MOVS     r5,#2
000024  2004              MOVS     r0,#4                 ;1990
000026  f88d5004          STRB     r5,[sp,#4]
;;;1992   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
00002c  9000              STR      r0,[sp,#0]            ;1991
00002e  f88d4006          STRB     r4,[sp,#6]
;;;1993   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f88d5005          STRB     r5,[sp,#5]
;;;1994   	GPIO_Init(GPIOA, &GPIO_InitStructure);    
000036  4669              MOV      r1,sp
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GPIO_Init
;;;1995   	/* Configure USART1 Rx (PA.03) as input floating */
;;;1996   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
00003e  2008              MOVS     r0,#8
;;;1997   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000040  9000              STR      r0,[sp,#0]
000042  f88d5004          STRB     r5,[sp,#4]
;;;1998   	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;1999   	
;;;2000   	/* USART1 mode config */
;;;2001   	USART_InitStructure.USART_BaudRate = 115200;
00004e  f44f30e1          MOV      r0,#0x1c200
;;;2002   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000052  9002              STR      r0,[sp,#8]
;;;2003   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2004   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000054  f8ad4010          STRH     r4,[sp,#0x10]
;;;2005   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2006   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
;;;2007   	USART_Init(USART2, &USART_InitStructure);
00005a  4d18              LDR      r5,|L21.188|
00005c  f8ad400c          STRH     r4,[sp,#0xc]          ;2002
000060  f8ad0012          STRH     r0,[sp,#0x12]         ;2006
000064  f8ad400e          STRH     r4,[sp,#0xe]          ;2003
000068  f8ad4014          STRH     r4,[sp,#0x14]         ;2005
00006c  a902              ADD      r1,sp,#8
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       USART_Init
;;;2008   	
;;;2009   	/******使能串口接收中断******************/
;;;2010   	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
000074  2201              MOVS     r2,#1
000076  f2405125          MOV      r1,#0x525
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_ITConfig
;;;2011   //	USART_ITConfig(USART2, USART_IT_ORE, ENABLE);	
;;;2012   	USART_Cmd(USART2, ENABLE);//使能串口1
000080  2101              MOVS     r1,#1
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USART_Cmd
;;;2013     USART_ClearFlag(USART2, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       USART_ClearFlag
000090  f44f60e0          MOV      r0,#0x700
000094  f7fffffe          BL       NVIC_PriorityGroupConfig
000098  2026              MOVS     r0,#0x26
00009a  f88d0018          STRB     r0,[sp,#0x18]
00009e  f88d4019          STRB     r4,[sp,#0x19]
0000a2  2001              MOVS     r0,#1
0000a4  f88d001a          STRB     r0,[sp,#0x1a]
0000a8  f88d001b          STRB     r0,[sp,#0x1b]
0000ac  a806              ADD      r0,sp,#0x18
0000ae  f7fffffe          BL       NVIC_Init
;;;2014     
;;;2015     USART2_NVIC_Config();//串口中断配置
;;;2016   }
0000b2  b008              ADD      sp,sp,#0x20
0000b4  bd70              POP      {r4-r6,pc}
;;;2017   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L21.184|
                          DCD      0x40020000
                  |L21.188|
                          DCD      0x40004400

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;2240   
;;;2241   void USART2_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2242   {
;;;2243   	u8 Res;
;;;2244    	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
000002  4c1c              LDR      r4,|L22.116|
000004  f2405525          MOV      r5,#0x525
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       USART_GetITStatus
000010  2800              CMP      r0,#0
000012  d013              BEQ      |L22.60|
;;;2245   	{
;;;2246   		USART_ClearITPendingBit(USART2,USART_IT_RXNE);
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       USART_ClearITPendingBit
;;;2247   		Res=USART_ReceiveData(USART2);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       USART_ReceiveData
;;;2248   
;;;2249   		if((USART_RX_STA&0x8000)==0)//接收未完成
000022  4a15              LDR      r2,|L22.120|
000024  b2c1              UXTB     r1,r0                 ;2247
000026  8950              LDRH     r0,[r2,#0xa]  ; USART_RX_STA
000028  0403              LSLS     r3,r0,#16
00002a  d407              BMI      |L22.60|
;;;2250   		{
;;;2251   		if(USART_RX_STA&0x4000)//接收到了0x0d
;;;2252   		{
;;;2253   			if(Res!=0x0a)
;;;2254   				USART_RX_STA=0;//接收错误,重新开始
;;;2255   			else 
;;;2256   			{
;;;2257   		//		SerialRemoteHandleL(USART_RX_STA,USART_RX_BUF);
;;;2258   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
00002c  4b13              LDR      r3,|L22.124|
00002e  0445              LSLS     r5,r0,#17             ;2251
000030  f04f0400          MOV      r4,#0                 ;2251
000034  d50b              BPL      |L22.78|
000036  290a              CMP      r1,#0xa               ;2253
000038  d001              BEQ      |L22.62|
                  |L22.58|
00003a  8154              STRH     r4,[r2,#0xa]          ;2254
                  |L22.60|
;;;2259   				USART_RX_STA++;
;;;2260   				USART_RX_CNT = USART_RX_STA;
;;;2261   				USART_RX_STA|=0x8000;	//接收完成了 			  //接收到回车的后字节  置位状态寄存器 
;;;2262   			}
;;;2263   		}
;;;2264   		else //还没收到0X0D
;;;2265   		{	
;;;2266   			if(Res==0x0d)
;;;2267   			{
;;;2268   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
;;;2269   				USART_RX_STA++;	
;;;2270   				USART_RX_STA|=0x4000;					 //接收到回车的前一字节  置位状态寄存器
;;;2271   			}
;;;2272   			else
;;;2273   				{
;;;2274   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
;;;2275   					USART_RX_STA++;									//长度+1 为下一次做准备
;;;2276   				if(USART_RX_STA>(USART_REC_LEN-1))
;;;2277   					USART_RX_STA=0;//接收数据错误,重新开始接收	  
;;;2278   				}		 
;;;2279   			}
;;;2280   		} 
;;;2281   	}
;;;2282   }
00003c  bd70              POP      {r4-r6,pc}
                  |L22.62|
00003e  f3c0040d          UBFX     r4,r0,#0,#14          ;2258
000042  1c40              ADDS     r0,r0,#1              ;2258
000044  5519              STRB     r1,[r3,r4]            ;2258
000046  8190              STRH     r0,[r2,#0xc]          ;2260
000048  f4404000          ORR      r0,r0,#0x8000         ;2261
00004c  e010              B        |L22.112|
                  |L22.78|
00004e  290d              CMP      r1,#0xd               ;2266
000050  d008              BEQ      |L22.100|
000052  f3c0050d          UBFX     r5,r0,#0,#14          ;2274
000056  1c40              ADDS     r0,r0,#1              ;2274
000058  b280              UXTH     r0,r0                 ;2275
00005a  5559              STRB     r1,[r3,r5]            ;2274
00005c  8150              STRH     r0,[r2,#0xa]          ;2275
00005e  28c7              CMP      r0,#0xc7              ;2276
000060  d8eb              BHI      |L22.58|
000062  bd70              POP      {r4-r6,pc}
                  |L22.100|
000064  f3c0040d          UBFX     r4,r0,#0,#14          ;2268
000068  1c40              ADDS     r0,r0,#1              ;2268
00006a  5519              STRB     r1,[r3,r4]            ;2268
00006c  f4404080          ORR      r0,r0,#0x4000         ;2270
                  |L22.112|
000070  8150              STRH     r0,[r2,#0xa]          ;2261
000072  bd70              POP      {r4-r6,pc}
;;;2283   void UART2_Send(void)
                          ENDP

                  |L22.116|
                          DCD      0x40004400
                  |L22.120|
                          DCD      ||.data||
                  |L22.124|
                          DCD      ||area_number.31||+0x14

                          AREA ||i.USART3HANDLE||, CODE, READONLY, ALIGN=2

                  USART3HANDLE PROC
;;;208    
;;;209    void USART3HANDLE(void)
000000  b538              PUSH     {r3-r5,lr}
;;;210    {
;;;211    	vu16 crcres;
;;;212    
;;;213    	if(MasterRecbuf[0] == 0x01)
000002  4c28              LDR      r4,|L23.164|
;;;214    	{
;;;215    		if(MasterRecbuf[1] == 0x03)
;;;216    		{
;;;217    			crcres = (MasterRecbuf[8] << 8) + MasterRecbuf[7];
;;;218    			if(crcres == Hardware_CRC(MasterRecbuf,7))
;;;219    			{
;;;220    				 
;;;221    				Para.CPOW_Voltage = (MasterRecbuf[3] << 8) + MasterRecbuf[4];
;;;222    				Para.CCurrent = (MasterRecbuf[5] << 8) + MasterRecbuf[6];
;;;223    				memset(MasterRecbuf,0,sizeof(MasterRecbuf));
;;;224    			}
;;;225    				if(sendwait == 3)
000004  4d28              LDR      r5,|L23.168|
000006  7820              LDRB     r0,[r4,#0]            ;213  ; MasterRecbuf
000008  2801              CMP      r0,#1                 ;213
00000a  d148              BNE      |L23.158|
00000c  7860              LDRB     r0,[r4,#1]            ;215  ; MasterRecbuf
00000e  2803              CMP      r0,#3                 ;215
000010  d002              BEQ      |L23.24|
;;;226    				{
;;;227    					SetPowerModeS();
;;;228    				}
;;;229    				if(sendwait == 2)
;;;230    				{
;;;231    					SetPowerModeC();
;;;232    				}
;;;233    				if(sendwait == 1)
;;;234    				{
;;;235    					SetPowerModeV();
;;;236    				}
;;;237    				if(listsend == 3)
;;;238    				{
;;;239    					SetListPS();
;;;240    				}
;;;241    				if(listsend == 2)
;;;242    				{
;;;243    					SetListPC();
;;;244    				}
;;;245    				if(listsend == 1)
;;;246    				{
;;;247    					SetListPV();
;;;248    				}
;;;249    		}else if(MasterRecbuf[1] == 0x06){
000012  2806              CMP      r0,#6
000014  d03c              BEQ      |L23.144|
000016  e042              B        |L23.158|
                  |L23.24|
000018  79e1              LDRB     r1,[r4,#7]            ;217  ; MasterRecbuf
00001a  7a20              LDRB     r0,[r4,#8]            ;217  ; MasterRecbuf
00001c  eb012000          ADD      r0,r1,r0,LSL #8       ;217
000020  f8ad0000          STRH     r0,[sp,#0]            ;217
000024  2107              MOVS     r1,#7                 ;218
000026  481f              LDR      r0,|L23.164|
000028  f7fffffe          BL       Hardware_CRC
00002c  f8bd1000          LDRH     r1,[sp,#0]            ;218
000030  4288              CMP      r0,r1                 ;218
000032  d10e              BNE      |L23.82|
000034  7920              LDRB     r0,[r4,#4]            ;221  ; MasterRecbuf
000036  78e1              LDRB     r1,[r4,#3]            ;221  ; MasterRecbuf
000038  eb002101          ADD      r1,r0,r1,LSL #8       ;221
00003c  481b              LDR      r0,|L23.172|
00003e  6281              STR      r1,[r0,#0x28]         ;221  ; Para
000040  79a1              LDRB     r1,[r4,#6]            ;222  ; MasterRecbuf
000042  7962              LDRB     r2,[r4,#5]            ;222  ; MasterRecbuf
000044  eb012102          ADD      r1,r1,r2,LSL #8       ;222
000048  6301              STR      r1,[r0,#0x30]         ;222  ; Para
00004a  2180              MOVS     r1,#0x80              ;223
00004c  4815              LDR      r0,|L23.164|
00004e  f7fffffe          BL       __aeabi_memclr
                  |L23.82|
000052  7a28              LDRB     r0,[r5,#8]            ;225  ; sendwait
000054  2803              CMP      r0,#3                 ;225
000056  d101              BNE      |L23.92|
000058  f7fffffe          BL       SetPowerModeS
                  |L23.92|
00005c  7a28              LDRB     r0,[r5,#8]            ;229  ; sendwait
00005e  2802              CMP      r0,#2                 ;229
000060  d101              BNE      |L23.102|
000062  f7fffffe          BL       SetPowerModeC
                  |L23.102|
000066  7a28              LDRB     r0,[r5,#8]            ;233  ; sendwait
000068  2801              CMP      r0,#1                 ;233
00006a  d101              BNE      |L23.112|
00006c  f7fffffe          BL       SetPowerModeV
                  |L23.112|
000070  7a68              LDRB     r0,[r5,#9]            ;237  ; listsend
000072  2803              CMP      r0,#3                 ;237
000074  d101              BNE      |L23.122|
000076  f7fffffe          BL       SetListPS
                  |L23.122|
00007a  7a68              LDRB     r0,[r5,#9]            ;241  ; listsend
00007c  2802              CMP      r0,#2                 ;241
00007e  d101              BNE      |L23.132|
000080  f7fffffe          BL       SetListPC
                  |L23.132|
000084  7a68              LDRB     r0,[r5,#9]            ;245  ; listsend
000086  2801              CMP      r0,#1                 ;245
000088  d109              BNE      |L23.158|
00008a  f7fffffe          BL       SetListPV
00008e  e006              B        |L23.158|
                  |L23.144|
;;;250    			memset(MasterRecbuf,0,sizeof(MasterRecbuf));
000090  2180              MOVS     r1,#0x80
000092  4804              LDR      r0,|L23.164|
000094  f7fffffe          BL       __aeabi_memclr
;;;251    			watchtest ++;
000098  6b28              LDR      r0,[r5,#0x30]  ; watchtest
00009a  1c40              ADDS     r0,r0,#1
00009c  6328              STR      r0,[r5,#0x30]  ; watchtest
                  |L23.158|
;;;252    		}
;;;253    	}	
;;;254    
;;;255    	
;;;256    	USART3_Recive_flg = 0;
00009e  2000              MOVS     r0,#0
0000a0  7068              STRB     r0,[r5,#1]
;;;257    }
0000a2  bd38              POP      {r3-r5,pc}
;;;258    
                          ENDP

                  |L23.164|
                          DCD      ||area_number.31||+0x15c
                  |L23.168|
                          DCD      ||.data||
                  |L23.172|
                          DCD      Para

                          AREA ||i.USART3WriteDMA||, CODE, READONLY, ALIGN=2

                  USART3WriteDMA PROC
;;;2183   
;;;2184   void USART3WriteDMA(u16 len)
000000  b570              PUSH     {r4-r6,lr}
;;;2185   {
000002  4605              MOV      r5,r0
;;;2186       USART_ClearFlag(USART3, USART_FLAG_TC);     //串口发送准备
000004  2140              MOVS     r1,#0x40
000006  4809              LDR      r0,|L24.44|
000008  f7fffffe          BL       USART_ClearFlag
;;;2187   	DMA_Cmd(DMA1_Stream3, DISABLE);//关闭DMA 数据流3
00000c  4c08              LDR      r4,|L24.48|
00000e  2100              MOVS     r1,#0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       DMA_Cmd
;;;2188       DMA_SetCurrDataCounter(DMA1_Stream3,len);//设置DMA发生长度
000016  4629              MOV      r1,r5
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       DMA_SetCurrDataCounter
;;;2189   	DMA_Cmd(DMA1_Stream3, ENABLE);// 打开DMA 数据流3
00001e  4620              MOV      r0,r4
000020  e8bd4070          POP      {r4-r6,lr}
000024  2101              MOVS     r1,#1
000026  f7ffbffe          B.W      DMA_Cmd
;;;2190      
;;;2191   }
;;;2192   
                          ENDP

00002a  0000              DCW      0x0000
                  |L24.44|
                          DCD      0x40004800
                  |L24.48|
                          DCD      0x40026058

                          AREA ||i.USART3_Configuration||, CODE, READONLY, ALIGN=2

                  USART3_Configuration PROC
;;;2130   
;;;2131   void USART3_Configuration()//???????
000000  b570              PUSH     {r4-r6,lr}
;;;2132   {  
;;;2133       GPIO_InitTypeDef GPIO_InitStructure;
;;;2134   	USART_InitTypeDef USART_InitStructure;
;;;2135   	
;;;2136   	/* config USART1 clock */
;;;2137   	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
000002  2101              MOVS     r1,#1
000004  b088              SUB      sp,sp,#0x20           ;2132
000006  0488              LSLS     r0,r1,#18
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;2138   //    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE); //?? GPIOA ??
;;;2139       
;;;2140   	GPIO_PinAFConfig(GPIOD,GPIO_PinSource8,GPIO_AF_USART3);
00000c  4c2a              LDR      r4,|L25.184|
00000e  2207              MOVS     r2,#7
000010  2108              MOVS     r1,#8
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2141   	GPIO_PinAFConfig(GPIOD,GPIO_PinSource9,GPIO_AF_USART3);
000018  2207              MOVS     r2,#7
00001a  2109              MOVS     r1,#9
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2142       
;;;2143   
;;;2144       
;;;2145       
;;;2146   	/* USART1 GPIO config */
;;;2147   	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;2148   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
000022  15a0              ASRS     r0,r4,#22
;;;2149   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000024  2502              MOVS     r5,#2
000026  9004              STR      r0,[sp,#0x10]
000028  f88d5014          STRB     r5,[sp,#0x14]
;;;2150   //     GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //??????
;;;2151   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00002c  f88d5015          STRB     r5,[sp,#0x15]
;;;2152   	GPIO_Init(GPIOD, &GPIO_InitStructure);    
000030  a904              ADD      r1,sp,#0x10
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       GPIO_Init
;;;2153   	/* Configure USART1 Rx (PA.10) as input floating */
;;;2154   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
000038  1560              ASRS     r0,r4,#21
;;;2155       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00003a  9004              STR      r0,[sp,#0x10]
00003c  f88d5014          STRB     r5,[sp,#0x14]
;;;2156   	GPIO_Init(GPIOD, &GPIO_InitStructure);
000040  a904              ADD      r1,sp,#0x10
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       GPIO_Init
;;;2157       
;;;2158   
;;;2159   	
;;;2160   	/* USART1 mode config */
;;;2161   	USART_InitStructure.USART_BaudRate = 9600;
;;;2162   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000048  2400              MOVS     r4,#0
00004a  f44f5016          MOV      r0,#0x2580            ;2161
00004e  9000              STR      r0,[sp,#0]
;;;2163   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2164   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000050  f8ad4008          STRH     r4,[sp,#8]
;;;2165   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2166   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000054  200c              MOVS     r0,#0xc
;;;2167   	USART_Init(USART3, &USART_InitStructure);
000056  4e19              LDR      r6,|L25.188|
000058  f8ad4004          STRH     r4,[sp,#4]            ;2162
00005c  f8ad000a          STRH     r0,[sp,#0xa]          ;2166
000060  f8ad4006          STRH     r4,[sp,#6]            ;2163
000064  f8ad400c          STRH     r4,[sp,#0xc]          ;2165
000068  4669              MOV      r1,sp
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       USART_Init
;;;2168       
;;;2169   
;;;2170   	
;;;2171   	/******????????******************/
;;;2172   	USART_ITConfig(USART3, USART_IT_IDLE, ENABLE);
000070  2201              MOVS     r2,#1
000072  f2404124          MOV      r1,#0x424
000076  4630              MOV      r0,r6
000078  f7fffffe          BL       USART_ITConfig
00007c  f44f60e0          MOV      r0,#0x700
000080  f7fffffe          BL       NVIC_PriorityGroupConfig
000084  2027              MOVS     r0,#0x27
000086  f88d0018          STRB     r0,[sp,#0x18]
00008a  f88d4019          STRB     r4,[sp,#0x19]
00008e  f88d501a          STRB     r5,[sp,#0x1a]
000092  2001              MOVS     r0,#1
000094  f88d001b          STRB     r0,[sp,#0x1b]
000098  a806              ADD      r0,sp,#0x18
00009a  f7fffffe          BL       NVIC_Init
;;;2173   	USART3_NVIC_Config();//??????
;;;2174   	USART3_DMA_init();
00009e  f7fffffe          BL       USART3_DMA_init
;;;2175   	USART_Cmd(USART3, ENABLE);//????1
0000a2  2101              MOVS     r1,#1
0000a4  4630              MOV      r0,r6
0000a6  f7fffffe          BL       USART_Cmd
;;;2176       USART_ClearFlag(USART3, USART_FLAG_TC);
0000aa  2140              MOVS     r1,#0x40
0000ac  4630              MOV      r0,r6
0000ae  f7fffffe          BL       USART_ClearFlag
;;;2177       
;;;2178     
;;;2179       
;;;2180   	
;;;2181   }
0000b2  b008              ADD      sp,sp,#0x20
0000b4  bd70              POP      {r4-r6,pc}
;;;2182   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L25.184|
                          DCD      0x40020c00
                  |L25.188|
                          DCD      0x40004800

                          AREA ||i.USART3_DMA_init||, CODE, READONLY, ALIGN=2

                  USART3_DMA_init PROC
;;;2031   
;;;2032   static void USART3_DMA_init(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2033   {
;;;2034       DMA_InitTypeDef DMA_InitStructure;
;;;2035       NVIC_InitTypeDef NVIC_InitStructure;
;;;2036   	
;;;2037   	//串口3使用DMA1 发送为数据流3  通道4   
;;;2038       //F4与F1DMA多了一个数据流的说法详细参考中文数据手册DMA 表35
;;;2039       /* 1.使能DMA2时钟 */
;;;2040   	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
000004  2101              MOVS     r1,#1
000006  b091              SUB      sp,sp,#0x44           ;2033
000008  0548              LSLS     r0,r1,#21
00000a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;2041   	
;;;2042   	//串口发送DMA配置
;;;2043       /* 2.配置使用DMA发送数据 */
;;;2044       DMA_DeInit(DMA1_Stream3); //DMA1 数据流 3
00000e  f8dfa0d8          LDR      r10,|L26.232|
000012  4650              MOV      r0,r10
000014  f7fffffe          BL       DMA_DeInit
;;;2045       DMA_InitStructure.DMA_Channel = DMA_Channel_4;  /* 配置DMA1通道4 */
000018  f04f6600          MOV      r6,#0x8000000
;;;2046       DMA_InitStructure.DMA_PeripheralBaseAddr  = (uint32_t)(&(USART3->DR)); /* 目的 */
;;;2047       DMA_InitStructure.DMA_Memory0BaseAddr     = (uint32_t)MasterSendbuf; /*源内存地址*/
00001c  4834              LDR      r0,|L26.240|
00001e  4f33              LDR      r7,|L26.236|
000020  9600              STR      r6,[sp,#0]
000022  e9cd7001          STRD     r7,r0,[sp,#4]
;;;2048       DMA_InitStructure.DMA_DIR                 = DMA_DIR_MemoryToPeripheral;  /*方向内            
;;;2049                                                                               存到外设*/
;;;2050       DMA_InitStructure.DMA_BufferSize          = MAXRxTxLen;                    
;;;2051       /* 长度 */                  
;;;2052       DMA_InitStructure.DMA_PeripheralInc       = DMA_PeripheralInc_Disable;    
000026  2400              MOVS     r4,#0
000028  2040              MOVS     r0,#0x40              ;2048
00002a  f04f0880          MOV      r8,#0x80              ;2050
;;;2053       /* 外设地址是否自增 */
;;;2054       DMA_InitStructure.DMA_MemoryInc           = DMA_MemoryInc_Enable;        
00002e  f44f6980          MOV      r9,#0x400
000032  9003              STR      r0,[sp,#0xc]
000034  e9cd8404          STRD     r8,r4,[sp,#0x10]
000038  e9cd9406          STRD     r9,r4,[sp,#0x18]
;;;2055       /* 内存地址是否自增 */
;;;2056       DMA_InitStructure.DMA_PeripheralDataSize  = DMA_PeripheralDataSize_Byte;  
;;;2057       /* 目的数据带宽 */
;;;2058       DMA_InitStructure.DMA_MemoryDataSize      = DMA_MemoryDataSize_Byte;      
;;;2059       /* 源数据宽度 */
;;;2060       DMA_InitStructure.DMA_Mode                = DMA_Mode_Normal;             
;;;2061       /* 单次传输模式/循环传输模式 */
;;;2062       DMA_InitStructure.DMA_Priority            = DMA_Priority_High;             
00003c  02c0              LSLS     r0,r0,#11
00003e  9408              STR      r4,[sp,#0x20]
000040  e9cd4009          STRD     r4,r0,[sp,#0x24]
;;;2063       /* DMA优先级 */
;;;2064       DMA_InitStructure.DMA_FIFOMode            = DMA_FIFOMode_Disable;          
;;;2065       /* FIFO模式/直接模式 */
;;;2066       DMA_InitStructure.DMA_FIFOThreshold       = DMA_FIFOThreshold_HalfFull; 
000044  2501              MOVS     r5,#1
000046  e9cd450b          STRD     r4,r5,[sp,#0x2c]
;;;2067       /* FIFO大小 */
;;;2068       DMA_InitStructure.DMA_MemoryBurst         = DMA_MemoryBurst_Single;      
;;;2069        /* 单次传输 */
;;;2070       DMA_InitStructure.DMA_PeripheralBurst     = DMA_PeripheralBurst_Single;
00004a  940d              STR      r4,[sp,#0x34]
;;;2071       /* 3. 配置DMA */
;;;2072       DMA_Init(DMA1_Stream3, &DMA_InitStructure);
00004c  4669              MOV      r1,sp
00004e  4650              MOV      r0,r10
000050  940e              STR      r4,[sp,#0x38]
000052  f7fffffe          BL       DMA_Init
;;;2073       /* 4.使能DMA中断 */
;;;2074       DMA_ITConfig(DMA1_Stream3, DMA_IT_TC, ENABLE);
000056  2201              MOVS     r2,#1
000058  2110              MOVS     r1,#0x10
00005a  4650              MOV      r0,r10
00005c  f7fffffe          BL       DMA_ITConfig
;;;2075       /* 5.使能串口的DMA发送接口 */
;;;2076       USART_DMACmd(USART3, USART_DMAReq_Tx, ENABLE);
000060  f1a70b04          SUB      r11,r7,#4
000064  2201              MOVS     r2,#1
000066  2180              MOVS     r1,#0x80
000068  4658              MOV      r0,r11
00006a  f7fffffe          BL       USART_DMACmd
;;;2077       /* 6. 配置DMA中断优先级 */
;;;2078       NVIC_InitStructure.NVIC_IRQChannel                   = DMA1_Stream3_IRQn;  
00006e  200e              MOVS     r0,#0xe
000070  f88d003c          STRB     r0,[sp,#0x3c]
;;;2079       //  DMA发生中断         
;;;2080       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;          
000074  f88d403d          STRB     r4,[sp,#0x3d]
;;;2081       NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 4; 
000078  2004              MOVS     r0,#4
00007a  f88d003e          STRB     r0,[sp,#0x3e]
;;;2082       NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;
00007e  f88d503f          STRB     r5,[sp,#0x3f]
;;;2083       NVIC_Init(&NVIC_InitStructure);
000082  a80f              ADD      r0,sp,#0x3c
000084  f7fffffe          BL       NVIC_Init
;;;2084   	
;;;2085       /* 7.不使能DMA */                  
;;;2086       DMA_Cmd(DMA1_Stream3, DISABLE);// 数据流2
000088  2100              MOVS     r1,#0
00008a  4650              MOV      r0,r10
00008c  f7fffffe          BL       DMA_Cmd
;;;2087   	//************************DMA接收***********************//
;;;2088   	/* 2.配置使用DMA接收数据 */
;;;2089       DMA_DeInit(DMA1_Stream1); 
000090  f8dfa054          LDR      r10,|L26.232|
000094  f1aa0a30          SUB      r10,r10,#0x30
000098  4650              MOV      r0,r10
00009a  f7fffffe          BL       DMA_DeInit
;;;2090       DMA_InitStructure.DMA_Channel             = DMA_Channel_4;               
;;;2091       /* 配置DMA通道 */
;;;2092       DMA_InitStructure.DMA_PeripheralBaseAddr  = (uint32_t)(&(USART3->DR));   
;;;2093       /* 源地址 */
;;;2094       DMA_InitStructure.DMA_Memory0BaseAddr     = (uint32_t)MasterRecbuf;    
00009e  4814              LDR      r0,|L26.240|
0000a0  a902              ADD      r1,sp,#8
0000a2  3080              ADDS     r0,r0,#0x80
0000a4  e8810111          STM      r1,{r0,r4,r8}
0000a8  e9cd4905          STRD     r4,r9,[sp,#0x14]
;;;2095       /* 目标地址 */
;;;2096       DMA_InitStructure.DMA_DIR                 = DMA_DIR_PeripheralToMemory;    
;;;2097       /* 方向外设向内存  */
;;;2098       DMA_InitStructure.DMA_BufferSize          = MAXRxTxLen;                    		
;;;2099       /* 长度 */                  
;;;2100       DMA_InitStructure.DMA_PeripheralInc       = DMA_PeripheralInc_Disable;    
;;;2101         /* 外设地址是否自增 */
;;;2102       DMA_InitStructure.DMA_MemoryInc           = DMA_MemoryInc_Enable;         
;;;2103       /* 内存地址是否自增 */
;;;2104       DMA_InitStructure.DMA_PeripheralDataSize  = DMA_MemoryDataSize_Byte;     
;;;2105       /* 目的数据带宽 */
;;;2106       DMA_InitStructure.DMA_MemoryDataSize      = DMA_MemoryDataSize_Byte;      
;;;2107       /* 源数据宽度 */
;;;2108       DMA_InitStructure.DMA_Mode                = DMA_Mode_Circular;             
0000ac  0228              LSLS     r0,r5,#8
0000ae  e9cd4008          STRD     r4,r0,[sp,#0x20]
;;;2109       /*循环传输模式 */
;;;2110       DMA_InitStructure.DMA_Priority            = DMA_Priority_VeryHigh;        
0000b2  a90a              ADD      r1,sp,#0x28
0000b4  9407              STR      r4,[sp,#0x1c]         ;2108
0000b6  f44f3040          MOV      r0,#0x30000
0000ba  e8810031          STM      r1,{r0,r4,r5}
;;;2111       /* DMA优先级 */
;;;2112       DMA_InitStructure.DMA_FIFOMode            = DMA_FIFOMode_Disable;         
;;;2113        /* FIFO模式/直接模式 */
;;;2114       DMA_InitStructure.DMA_FIFOThreshold       = DMA_FIFOThreshold_HalfFull; 
;;;2115       /* FIFO大小 */
;;;2116       DMA_InitStructure.DMA_MemoryBurst         = DMA_MemoryBurst_Single;       
;;;2117       /* 单次传输 */
;;;2118       DMA_InitStructure.DMA_PeripheralBurst     = DMA_PeripheralBurst_Single;
0000be  940d              STR      r4,[sp,#0x34]
;;;2119       /* 3. 配置DMA */
;;;2120       DMA_Init(DMA1_Stream1, &DMA_InitStructure);
0000c0  4669              MOV      r1,sp
0000c2  4650              MOV      r0,r10
0000c4  940e              STR      r4,[sp,#0x38]
0000c6  e9cd6700          STRD     r6,r7,[sp,#0]
0000ca  f7fffffe          BL       DMA_Init
;;;2121       /* 4.由于接收不需要DMA中断，故不设置DMA中断 */
;;;2122       /* 5.使能串口的DMA接收 */
;;;2123       USART_DMACmd(USART3,USART_DMAReq_Rx,ENABLE);
0000ce  2201              MOVS     r2,#1
0000d0  2140              MOVS     r1,#0x40
0000d2  4658              MOV      r0,r11
0000d4  f7fffffe          BL       USART_DMACmd
;;;2124       /* 6. 由于接收不需要DMA中断，故不能配置DMA中断优先级 */
;;;2125       /* 7.使能DMA */ 
;;;2126       DMA_Cmd(DMA1_Stream1,ENABLE);
0000d8  2101              MOVS     r1,#1
0000da  4650              MOV      r0,r10
0000dc  f7fffffe          BL       DMA_Cmd
;;;2127   }
0000e0  b011              ADD      sp,sp,#0x44
0000e2  e8bd8ff0          POP      {r4-r11,pc}
;;;2128   
                          ENDP

0000e6  0000              DCW      0x0000
                  |L26.232|
                          DCD      0x40026058
                  |L26.236|
                          DCD      0x40004804
                  |L26.240|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;2208   
;;;2209   void USART3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2210   {
;;;2211       u8 Clear = Clear;
;;;2212       u16 num = 0;
;;;2213            
;;;2214       if(USART_GetITStatus(USART3, USART_IT_IDLE) != RESET)
000002  4c18              LDR      r4,|L27.100|
000004  f2404124          MOV      r1,#0x424
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USART_GetITStatus
00000e  2800              CMP      r0,#0
000010  d024              BEQ      |L27.92|
;;;2215       {
;;;2216           Clear = USART3->SR;  //读SR寄存器清除                                                            
000012  8820              LDRH     r0,[r4,#0]
;;;2217          
;;;2218           Clear = USART3->DR;  //读DR寄存器清除                                                        
000014  1d20              ADDS     r0,r4,#4
000016  8800              LDRH     r0,[r0,#0]
;;;2219           DMA_Cmd(DMA1_Stream1,DISABLE);   //关闭DMA
000018  4d13              LDR      r5,|L27.104|
00001a  2100              MOVS     r1,#0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       DMA_Cmd
;;;2220   		DMA_ClearFlag(DMA1_Stream1,DMA_FLAG_TCIF2);
000022  f04f5181          MOV      r1,#0x10200000
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       DMA_ClearFlag
;;;2221           num = DMA_GetCurrDataCounter(DMA1_Stream1); //得到真正接收数据个数
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       DMA_GetCurrDataCounter
;;;2222           if(num < MAXRxTxLen)
;;;2223           {
;;;2224               USART3_Recive_leng   = MAXRxTxLen - num;
000032  4c0e              LDR      r4,|L27.108|
000034  2880              CMP      r0,#0x80              ;2222
000036  d212              BCS      |L27.94|
000038  f1c00080          RSB      r0,r0,#0x80
00003c  b2c0              UXTB     r0,r0
00003e  7020              STRB     r0,[r4,#0]
;;;2225           }else
;;;2226           {
;;;2227               USART3_Recive_leng = MAXRxTxLen;
;;;2228           }
;;;2229            
;;;2230           if(USART3_Recive_leng > MAXRxTxLen)
000040  2880              CMP      r0,#0x80
000042  d901              BLS      |L27.72|
;;;2231           {
;;;2232               USART3_Recive_leng = 0;  //避免接收数据超界                                               
000044  2000              MOVS     r0,#0
                  |L27.70|
000046  7020              STRB     r0,[r4,#0]            ;2227
                  |L27.72|
;;;2233           }
;;;2234           DMA_SetCurrDataCounter(DMA1_Stream1,MAXRxTxLen);//设置DMA传输长度                                                        
000048  2180              MOVS     r1,#0x80
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       DMA_SetCurrDataCounter
;;;2235           DMA_Cmd(DMA1_Stream1,ENABLE);  //开启DMA
000050  2101              MOVS     r1,#1
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       DMA_Cmd
;;;2236           USART3_Recive_flg = 1;    //数据接收成功                                                  
000058  2001              MOVS     r0,#1
00005a  7060              STRB     r0,[r4,#1]
                  |L27.92|
;;;2237           
;;;2238       } 
;;;2239   }
00005c  bd70              POP      {r4-r6,pc}
                  |L27.94|
00005e  2080              MOVS     r0,#0x80              ;2227
000060  e7f1              B        |L27.70|
;;;2240   
                          ENDP

000062  0000              DCW      0x0000
                  |L27.100|
                          DCD      0x40004800
                  |L27.104|
                          DCD      0x40026028
                  |L27.108|
                          DCD      ||.data||

                          AREA ||i.USART_Configuration||, CODE, READONLY, ALIGN=2

                  USART_Configuration PROC
;;;1925   
;;;1926   void USART_Configuration(void)//串口初始化函数
000000  b570              PUSH     {r4-r6,lr}
;;;1927   {  
000002  b088              SUB      sp,sp,#0x20
;;;1928   	GPIO_InitTypeDef GPIO_InitStructure;
;;;1929   	USART_InitTypeDef USART_InitStructure;
;;;1930   	
;;;1931   	/* config USART1 clock */
;;;1932   	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
000004  2101              MOVS     r1,#1
000006  2010              MOVS     r0,#0x10
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;1933   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1);
00000c  4e2a              LDR      r6,|L28.184|
00000e  2207              MOVS     r2,#7
000010  2109              MOVS     r1,#9
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;1934   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1);
000018  2207              MOVS     r2,#7
00001a  210a              MOVS     r1,#0xa
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;1935   	/* USART1 GPIO config */
;;;1936   	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;1937   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
;;;1938   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000022  2502              MOVS     r5,#2
000024  1570              ASRS     r0,r6,#21             ;1937
000026  f88d5004          STRB     r5,[sp,#4]
;;;1939   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
00002c  9000              STR      r0,[sp,#0]            ;1938
00002e  f88d4006          STRB     r4,[sp,#6]
;;;1940   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f88d5005          STRB     r5,[sp,#5]
;;;1941   	GPIO_Init(GPIOA, &GPIO_InitStructure);    
000036  4669              MOV      r1,sp
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GPIO_Init
;;;1942   	/* Configure USART1 Rx (PA.10) as input floating */
;;;1943   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
00003e  0268              LSLS     r0,r5,#9
;;;1944   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000040  9000              STR      r0,[sp,#0]
000042  f88d5004          STRB     r5,[sp,#4]
;;;1945   	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;1946   	
;;;1947   	/* USART1 mode config */
;;;1948   	USART_InitStructure.USART_BaudRate = 9600;
00004e  f44f5016          MOV      r0,#0x2580
;;;1949   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000052  9002              STR      r0,[sp,#8]
;;;1950   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;1951   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000054  f8ad4010          STRH     r4,[sp,#0x10]
;;;1952   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;1953   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
;;;1954   	USART_Init(USART1, &USART_InitStructure);
00005a  4d18              LDR      r5,|L28.188|
00005c  f8ad400c          STRH     r4,[sp,#0xc]          ;1949
000060  f8ad0012          STRH     r0,[sp,#0x12]         ;1953
000064  f8ad400e          STRH     r4,[sp,#0xe]          ;1950
000068  f8ad4014          STRH     r4,[sp,#0x14]         ;1952
00006c  a902              ADD      r1,sp,#8
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       USART_Init
;;;1955   	
;;;1956   	/******使能串口接收中断******************/
;;;1957   	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	
000074  2201              MOVS     r2,#1
000076  f2405125          MOV      r1,#0x525
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_ITConfig
;;;1958   	USART_Cmd(USART1, ENABLE);//使能串口1
000080  2101              MOVS     r1,#1
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USART_Cmd
;;;1959   	USART_ClearFlag(USART1, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       USART_ClearFlag
000090  f44f60e0          MOV      r0,#0x700
000094  f7fffffe          BL       NVIC_PriorityGroupConfig
000098  2025              MOVS     r0,#0x25
00009a  f88d0018          STRB     r0,[sp,#0x18]
00009e  f88d4019          STRB     r4,[sp,#0x19]
0000a2  2004              MOVS     r0,#4
0000a4  f88d001a          STRB     r0,[sp,#0x1a]
0000a8  2001              MOVS     r0,#1
0000aa  f88d001b          STRB     r0,[sp,#0x1b]
0000ae  a806              ADD      r0,sp,#0x18
0000b0  f7fffffe          BL       NVIC_Init
;;;1960     
;;;1961   	USART1_NVIC_Config();//串口中断配置
;;;1962   }			
0000b4  b008              ADD      sp,sp,#0x20
0000b6  bd70              POP      {r4-r6,pc}
;;;1963   
                          ENDP

                  |L28.184|
                          DCD      0x40020000
                  |L28.188|
                          DCD      0x40011000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UART_Buffer_Rece
                          %        16

                          AREA ||area_number.31||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.31||, ||.bss||
                  UART_Buffer_Send
                          %        20
                  USART_RX_BUF
                          %        200
                  MasterSendbuf
                          %        128
                  MasterRecbuf
                          %        128

                          AREA ||.data||, DATA, ALIGN=2

                  USART3_Recive_leng
000000  00                DCB      0x00
                  USART3_Recive_flg
000001  00                DCB      0x00
                  UART_Buffer_Send_pointer
000002  00                DCB      0x00
                  |symbol_number.101|
000003  00                DCB      0x00
                  Transmit_BUFFERsize
000004  00                DCB      0x00
                  MODE
000005  00                DCB      0x00
                  mainswitch
000006  00                DCB      0x00
                  Rraly
000007  00                DCB      0x00
                  sendwait
000008  00                DCB      0x00
                  listsend
000009  00                DCB      0x00
                  USART_RX_STA
00000a  0000              DCW      0x0000
                  USART_RX_CNT
00000c  0000              DCW      0x0000
00000e  0000              DCB      0x00,0x00
                  ||x1||
                          DCD      0x00000000
                  ||y1||
                          DCD      0x00000000
                  ||x2||
                          DCD      0x00000000
                  ||y2||
                          DCD      0x00000000
                  ||x3||
                          DCD      0x00000000
                  ||y3||
                          DCD      0x00000000
                  ||x4||
                          DCD      0x00000000
                  ||y4||
                          DCD      0x00000000
                  watchtest
                          DCD      0x00000000
                  CmdStr
000034  53544154          DCB      0x53,0x54,0x41,0x54
000038  55535f00          DCB      0x55,0x53,0x5f,0x00
00003c  004d4f44          DCB      0x00,0x4d,0x4f,0x44
000040  5f000000          DCB      0x5f,0x00,0x00,0x00
000044  00005452          DCB      0x00,0x00,0x54,0x52
000048  49475f00          DCB      0x49,0x47,0x5f,0x00
00004c  00000053          DCB      0x00,0x00,0x00,0x53
000050  45545041          DCB      0x45,0x54,0x50,0x41
000054  52415f00          DCB      0x52,0x41,0x5f,0x00
000058  5345544c          DCB      0x53,0x45,0x54,0x4c
00005c  4953545f          DCB      0x49,0x53,0x54,0x5f
000060  00504f57          DCB      0x00,0x50,0x4f,0x57
000064  565f0000          DCB      0x56,0x5f,0x00,0x00
000068  0000504f          DCB      0x00,0x00,0x50,0x4f
00006c  57495f00          DCB      0x57,0x49,0x5f,0x00
000070  00000041          DCB      0x00,0x00,0x00,0x41
000074  4443565f          DCB      0x44,0x43,0x56,0x5f
000078  00000000          DCB      0x00,0x00,0x00,0x00
00007c  4c4f5749          DCB      0x4c,0x4f,0x57,0x49
000080  5f000000          DCB      0x5f,0x00,0x00,0x00
000084  00484f52          DCB      0x00,0x48,0x4f,0x52
000088  4c5f0000          DCB      0x4c,0x5f,0x00,0x00
00008c  00004c56          DCB      0x00,0x00,0x4c,0x56
000090  4c5f0000          DCB      0x4c,0x5f,0x00,0x00
000094  00000053          DCB      0x00,0x00,0x00,0x53
000098  57495443          DCB      0x57,0x49,0x54,0x43
00009c  485f0000          DCB      0x48,0x5f,0x00,0x00
0000a0  43414c56          DCB      0x43,0x41,0x4c,0x56
0000a4  5f000000          DCB      0x5f,0x00,0x00,0x00
0000a8  0043414c          DCB      0x00,0x43,0x41,0x4c
0000ac  495f0000          DCB      0x49,0x5f,0x00,0x00
0000b0  00004341          DCB      0x00,0x00,0x43,0x41
0000b4  4c525f00          DCB      0x4c,0x52,0x5f,0x00
0000b8  00000044          DCB      0x00,0x00,0x00,0x44
0000bc  41435f00          DCB      0x41,0x43,0x5f,0x00
0000c0  00000000          DCB      0x00,0x00,0x00,0x00
0000c4  4f564552          DCB      0x4f,0x56,0x45,0x52
0000c8  5f000000          DCB      0x5f,0x00,0x00,0x00
0000cc  0054454d          DCB      0x00,0x54,0x45,0x4d
0000d0  505f0000          DCB      0x50,0x5f,0x00,0x00
0000d4  0000424f          DCB      0x00,0x00,0x42,0x4f
0000d8  4f545f00          DCB      0x4f,0x54,0x5f,0x00
0000dc  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.34||, DATA, ALIGN=0

                          EXPORTAS ||area_number.34||, ||.data||
                  UART_Buffer_Size
000000  00                DCB      0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  t_USART
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.data||
                  powsetdelay
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\drive\\usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REV16|
#line 129 "E:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_usart_c_7cc17ae7____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REVSH|
#line 144
|__asm___7_usart_c_7cc17ae7____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
