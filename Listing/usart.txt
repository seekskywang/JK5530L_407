; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\usart.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\usart.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=525 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\usart.crf --no_multibyte_chars ..\drive\usart.c]
                          THUMB

                          AREA ||i.CalHandle||, CODE, READONLY, ALIGN=2

                  CalHandle PROC
;;;515    //校准处理
;;;516    void CalHandle(u8 mode,u8 range,u32 data)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;517    {
000004  2300              MOVS     r3,#0
;;;518    	if(mode == 0)//测量电压
;;;519    	{
;;;520    		if(range == 0)//低档位低段
;;;521    		{
;;;522    			calflag = 1;
000006  4eff              LDR      r6,|L1.1028|
;;;523    			LOAD_V_SW = 0;
000008  f8dfc3fc          LDR      r12,|L1.1032|
00000c  4614              MOV      r4,r2                 ;517
00000e  2701              MOVS     r7,#1                 ;522
;;;524    			x1 = Vmon_Load_value;
000010  4dfe              LDR      r5,|L1.1036|
;;;525    			y1 = data;
;;;526    		}else if(range == 1){//低档位高段
;;;527    			
;;;528    			x2 = Vmon_Load_value;
;;;529    			y2 = data;
;;;530    			CalPara.TestLV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;531    			CalPara.OffsetLV[0] = (float)y2 - CalPara.TestLV[0]*(float)x2;
;;;532    			
;;;533    			Flag_DAC_OFF=0;
000012  f8dfa400          LDR      r10,|L1.1044|
000016  f8dfb3f8          LDR      r11,|L1.1040|
;;;534    			calflag = 0;
;;;535    		}else if(range == 2){//高档位低段
;;;536    			calflag = 1;
;;;537    			LOAD_V_SW = 1;
;;;538    			x1 = Vmon_Load_value;
;;;539    			y1 = data;
;;;540    		}else if(range == 3){//高档位高段
;;;541    			
;;;542    			x2 = Vmon_Load_value;
;;;543    			y2 = data;
;;;544    			CalPara.TestLV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;545    			CalPara.OffsetLV[1] = (float)y2 - CalPara.TestLV[1]*(float)x2;
;;;546    				//参数写进FLASH
;;;547    			Flag_DAC_OFF=0;
;;;548    			calflag = 0;
;;;549    		}else if(range == 4){//电源控制电压和测量1
;;;550    			calflag = 1;
;;;551    			Contr_Voltage = 3500;
;;;552    			Contr_Current = 5000;
00001a  f8dfe3fc          LDR      lr,|L1.1048|
00001e  f8da2000          LDR      r2,[r10,#0]           ;533
;;;553    			OnOff_GPOI_ResetSet(0,1);
;;;554    		}else if(range == 5){//电源控制电压和测量2
;;;555    			x1 = data;
;;;556    			y1 = Contr_Voltage;
;;;557    			x3 = Vmon_POWE_value;
;;;558    			y3 = data;
;;;559    			Contr_Voltage = 10000;
;;;560    			Contr_Current = 5000;
;;;561    		}else if(range == 6){//电源控制电压和测量3
;;;562    			x2 = data;
;;;563    			y2 = Contr_Voltage;
;;;564    			x4 = Vmon_POWE_value;
;;;565    			y4 = data;
;;;566    			
;;;567    			CalPara.SetPV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;568    			CalPara.OffsetSetPV[0] = (float)y2 - CalPara.SetPV[0]*(float)x2;
;;;569    			
;;;570    			CalPara.TestPV[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;571    			CalPara.OffsetPV[0] = (float)y4 - CalPara.TestPV[0]*(float)x4;
;;;572    			
;;;573    			Flag_DAC_OFF=0;
;;;574    			calflag = 0;
;;;575    			Off_GPOI_ResetSet();
;;;576    		}else if(range == 7){//CV控制低档1
;;;577    			LOAD_MODE = 1;
;;;578    			LOAD_V_SW=0;
;;;579    			GPIO_ResetBits(GPIOB,GPIO_Pin_1);//电压档位为低档
;;;580    			calflag = 1;
;;;581    			Contr_Laod = 1000;
000022  f8df93f8          LDR      r9,|L1.1052|
000026  edd50a05          VLDR     s1,[r5,#0x14]         ;524
00002a  ed950a06          VLDR     s0,[r5,#0x18]         ;524
00002e  edd52a0a          VLDR     s5,[r5,#0x28]         ;524
000032  ed952a09          VLDR     s4,[r5,#0x24]         ;524
000036  f0220208          BIC      r2,r2,#8              ;533
00003a  b120              CBZ      r0,|L1.70|
;;;582    			OnOff_GPOI_ResetSet(2,1);
;;;583    		}else if(range == 8){//CV控制低档2
;;;584    			LOAD_MODE = 1;
;;;585    			LOAD_V_SW=0;
;;;586    			GPIO_ResetBits(GPIOB,GPIO_Pin_1);//电压档位为低档
;;;587    			x1 = data;
;;;588    			y1 = Contr_Laod;
;;;589    			Contr_Laod = 8000;
;;;590    //			OnOff_GPOI_ResetSet(2,1);
;;;591    		}else if(range == 9){//CV控制低档3
;;;592    			x2 = data;
;;;593    			y2 = Contr_Laod;
;;;594    			CalPara.SetCV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;595    			CalPara.OffsetCV[0] = (float)y2 - CalPara.SetCV[0]*(float)x2;
;;;596    				//参数写进FLASH
;;;597    			Flag_DAC_OFF=0;
;;;598    			calflag = 0;
;;;599    			Off_GPOI_ResetSet();
;;;600    		}else if(range == 10){//CV控制高档1
;;;601    			LOAD_MODE = 1;
;;;602    			LOAD_V_SW=1;
;;;603    			GPIO_SetBits(GPIOB,GPIO_Pin_1);//电压档位为高档
;;;604    			calflag = 1;
;;;605    			Contr_Laod = 1000;
;;;606    			OnOff_GPOI_ResetSet(2,1);
;;;607    		}else if(range == 11){//CV控制高档2
;;;608    			LOAD_MODE = 1;
;;;609    			LOAD_V_SW=1;
;;;610    			GPIO_SetBits(GPIOB,GPIO_Pin_1);//电压档位为高档
;;;611    			x1 = data;
;;;612    			y1 = Contr_Laod;
;;;613    			Contr_Laod = 8000;
;;;614    //			OnOff_GPOI_ResetSet(2,1);
;;;615    		}else if(range == 12){//CV控制高档3
;;;616    			x2 = data;
;;;617    			y2 = Contr_Laod;
;;;618    			CalPara.SetCV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;619    			CalPara.OffsetCV[1] = (float)y2 - CalPara.SetCV[1]*(float)x2;
;;;620    				//参数写进FLASH
;;;621    			Flag_DAC_OFF=0;
;;;622    			calflag = 0;
;;;623    			Off_GPOI_ResetSet();
;;;624    		}
;;;625    	}else if(mode == 1){
00003c  2801              CMP      r0,#1
00003e  d074              BEQ      |L1.298|
;;;626    		if(range == 0)//负载电流低档位1
;;;627    		{		
;;;628    			LOAD_I_SW = 0;
;;;629    			Contr_Laod = 6000;
;;;630    			calflag = 1;
;;;631    			OnOff_GPOI_ResetSet(2,1);
;;;632    		}
;;;633    		else if(range == 1)//负载电流低档位2
;;;634    		{
;;;635    			LOAD_I_SW = 0;			
;;;636    			x1 = data;
;;;637    			y1 = Contr_Laod;
;;;638    			x4 = Imon_Load_value;
;;;639    			y4 = data;
;;;640    			Contr_Laod = 23000;
;;;641    		}else if(range == 2)//负载电流低档位3
;;;642    		{
;;;643    			LOAD_I_SW = 0;			
;;;644    			x2 = data;
;;;645    			y2 = Contr_Laod;
;;;646    			x5 = Imon_Load_value;
;;;647    			y5 = data;
;;;648    			Contr_Laod = 56000;
;;;649    		}else if(range == 3){//负载电流低档位4
;;;650    			
;;;651    			x3 = data;
;;;652    			y3 = Contr_Laod;
;;;653    			x6 = Imon_Load_value;
;;;654    			y6 = data;
;;;655    			
;;;656    			CalPara.SetLC[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;657    			CalPara.OffsetLC[0] = (float)y2 - CalPara.SetLC[0]*(float)x2;
;;;658    			CalPara.SetLC[1] = ((float)y3 - (float)y2)/((float)x3 - (float)x2);
;;;659    			CalPara.OffsetLC[1] = (float)y3 - CalPara.SetLC[1]*(float)x3;
;;;660    			
;;;661    			CalPara.TestLC[0] = ((float)y5 - (float)y4)/((float)x5 - (float)x4);
;;;662    			CalPara.OffsetTestLC[0] = (float)y5 - CalPara.TestLC[0]*(float)x5;
;;;663    			CalPara.TestLC[1] = ((float)y6 - (float)y5)/((float)x6 - (float)x5);
;;;664    			CalPara.OffsetTestLC[1] = (float)y6 - CalPara.TestLC[1]*(float)x6;
;;;665    				
;;;666    			Flag_DAC_OFF =0;
;;;667    			calflag = 0;
;;;668    			Off_GPOI_ResetSet();
;;;669    		}else if(range == 4){//负载电流高档位1
;;;670    			LOAD_I_SW = 1;
;;;671    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;672    			Contr_Laod = 6500;
;;;673    			calflag = 1;
;;;674    			OnOff_GPOI_ResetSet(2,1);
;;;675    		}else if(range == 5){//负载电流高档位2
;;;676    			
;;;677    			LOAD_I_SW = 1;
;;;678    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;679    			x1 = data;
;;;680    			y1 = Contr_Laod;
;;;681    			x5 = Imon_Load_value;
;;;682    			y5 = data;
;;;683    			Contr_Laod = 12000;
;;;684    		}else if(range == 6){//负载电流高档位3
;;;685    			
;;;686    			LOAD_I_SW = 1;
;;;687    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;688    			x2 = data;
;;;689    			y2 = Contr_Laod;
;;;690    			x6 = Imon_Load_value;
;;;691    			y6 = data;
;;;692    			Contr_Laod = 20000;
;;;693    		}else if(range == 7){//负载电流高档位4
;;;694    			
;;;695    			LOAD_I_SW = 1;
;;;696    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;697    			x3 = data;
;;;698    			y3 = Contr_Laod;
;;;699    			x7 = Imon_Load_value;
;;;700    			y7 = data;
;;;701    			Contr_Laod = 27000;
;;;702    		}else if(range == 8){//负载电流高档位5
;;;703    			
;;;704    			x4 = data;
;;;705    			y4 = Contr_Laod;
;;;706    			x8 = Imon_Load_value;
;;;707    			y8 = data;
;;;708    			
;;;709    			CalPara.SetLC[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;710    			CalPara.OffsetLC[2] = (float)y2 - CalPara.SetLC[2]*(float)x2;
;;;711    			CalPara.SetLC[3] = ((float)y3 - (float)y2)/((float)x3 - (float)x2);
;;;712    			CalPara.OffsetLC[3] = (float)y3 - CalPara.SetLC[3]*(float)x3;
;;;713    			CalPara.SetLC[4] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;714    			CalPara.OffsetLC[4] = (float)y4 - CalPara.SetLC[4]*(float)x4;
;;;715    			
;;;716    			CalPara.TestLC[2] = ((float)y6 - (float)y5)/((float)x6 - (float)x5);
;;;717    			CalPara.OffsetTestLC[2] = (float)y6 - CalPara.TestLC[2]*(float)x6;
;;;718    			CalPara.TestLC[3] = ((float)y7 - (float)y6)/((float)x7 - (float)x6);
;;;719    			CalPara.OffsetTestLC[3] = (float)y7 - CalPara.TestLC[3]*(float)x7;
;;;720    			CalPara.TestLC[4] = ((float)y8 - (float)y7)/((float)x8 - (float)x7);
;;;721    			CalPara.OffsetTestLC[4] = (float)y8 - CalPara.TestLC[4]*(float)x8;
;;;722    				
;;;723    			Flag_DAC_OFF =0;
;;;724    			calflag = 0;
;;;725    			Off_GPOI_ResetSet();
;;;726    		}else if(range == 9){//电源电流1
;;;727    			Contr_Voltage = 3500;
;;;728    			Contr_Current = 4000;
;;;729    			calflag = 1;
;;;730    			OnOff_GPOI_ResetSet(0,1);
;;;731    		}else if(range == 10){//电源电流2
;;;732    			
;;;733    			x1 = data;
;;;734    			y1 = Contr_Current;
;;;735    			x3 = Imon_POWE_value;
;;;736    			y3 = data;
;;;737    			Contr_Voltage = 3500;
;;;738    			Contr_Current = 14000;
;;;739    		}else if(range == 11){//电源电流3
;;;740    			
;;;741    			x2 = data;
;;;742    			y2 = Contr_Current;
;;;743    			x4 = Imon_POWE_value;
;;;744    			y4 = data;
;;;745    			
;;;746    			CalPara.SetPC[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;747    			CalPara.OffsetPC[0] = (float)y2 - CalPara.SetPC[0]*(float)x2;
;;;748    			
;;;749    			CalPara.TestPC[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;750    			CalPara.OffsetTestPC[0] = (float)y4 - CalPara.TestPC[0]*(float)x4;
;;;751    			
;;;752    			Flag_DAC_OFF=0;
;;;753    			calflag = 0;
;;;754    			Off_GPOI_ResetSet();
;;;755    		}
;;;756    	}else if(mode == 2){
000040  2802              CMP      r0,#2
000042  d073              BEQ      |L1.300|
000044  e24a              B        |L1.1244|
                  |L1.70|
000046  48f6              LDR      r0,|L1.1056|
000048  b1f1              CBZ      r1,|L1.136|
00004a  2901              CMP      r1,#1                 ;526
00004c  d020              BEQ      |L1.144|
00004e  2902              CMP      r1,#2                 ;535
000050  d042              BEQ      |L1.216|
000052  2903              CMP      r1,#3                 ;540
000054  d045              BEQ      |L1.226|
000056  f2413888          MOV      r8,#0x1388            ;552
00005a  2904              CMP      r1,#4                 ;549
00005c  d068              BEQ      |L1.304|
00005e  48f1              LDR      r0,|L1.1060|
000060  2905              CMP      r1,#5                 ;554
000062  d06d              BEQ      |L1.320|
000064  2906              CMP      r1,#6                 ;561
000066  d07f              BEQ      |L1.360|
000068  48ef              LDR      r0,|L1.1064|
00006a  f44f787a          MOV      r8,#0x3e8             ;581
00006e  2907              CMP      r1,#7                 ;576
000070  d074              BEQ      |L1.348|
000072  2908              CMP      r1,#8                 ;583
000074  d073              BEQ      |L1.350|
000076  2909              CMP      r1,#9                 ;591
000078  d072              BEQ      |L1.352|
00007a  290a              CMP      r1,#0xa               ;600
00007c  d071              BEQ      |L1.354|
00007e  290b              CMP      r1,#0xb               ;607
000080  d070              BEQ      |L1.356|
000082  290c              CMP      r1,#0xc               ;615
000084  d06f              BEQ      |L1.358|
000086  e229              B        |L1.1244|
                  |L1.136|
000088  7037              STRB     r7,[r6,#0]            ;522
00008a  f8cc301c          STR      r3,[r12,#0x1c]        ;523  ; Run_Control
00008e  e026              B        |L1.222|
                  |L1.144|
000090  8800              LDRH     r0,[r0,#0]            ;528  ; Vmon_Load_value
000092  ee014a10          VMOV     s2,r4                 ;530
000096  eeb80a40          VCVT.F32.U32 s0,s0                 ;530
00009a  eef80a60          VCVT.F32.U32 s1,s1                 ;530
00009e  eeb81a41          VCVT.F32.U32 s2,s2                 ;530
0000a2  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;528
0000a6  ee311a40          VSUB.F32 s2,s2,s0              ;530
0000aa  ee000a10          VMOV     s0,r0                 ;530
0000ae  eeb80a40          VCVT.F32.U32 s0,s0                 ;530
0000b2  ee700a60          VSUB.F32 s1,s0,s1              ;530
0000b6  ee810a20          VDIV.F32 s0,s2,s1              ;530
0000ba  ee000a90          VMOV     s1,r0                 ;531
0000be  eeb81a60          VCVT.F32.U32 s2,s1                 ;531
0000c2  ee004a90          VMOV     s1,r4                 ;531
0000c6  eef80a60          VCVT.F32.U32 s1,s1                 ;531
0000ca  ed8b0a00          VSTR     s0,[r11,#0]           ;530
0000ce  ee400a41          VMLS.F32 s1,s0,s2              ;531
0000d2  edcb0a04          VSTR     s1,[r11,#0x10]        ;531
0000d6  e390              B        |L1.2042|
                  |L1.216|
0000d8  7037              STRB     r7,[r6,#0]            ;536
0000da  f8cc701c          STR      r7,[r12,#0x1c]        ;537  ; Run_Control
                  |L1.222|
0000de  8800              LDRH     r0,[r0,#0]            ;524  ; Vmon_Load_value
0000e0  e3bc              B        |L1.2140|
                  |L1.226|
0000e2  8800              LDRH     r0,[r0,#0]            ;542  ; Vmon_Load_value
0000e4  ee014a10          VMOV     s2,r4                 ;544
0000e8  eeb80a40          VCVT.F32.U32 s0,s0                 ;544
0000ec  eef80a60          VCVT.F32.U32 s1,s1                 ;544
0000f0  eeb81a41          VCVT.F32.U32 s2,s2                 ;544
0000f4  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;542
0000f8  ee311a40          VSUB.F32 s2,s2,s0              ;544
0000fc  ee000a10          VMOV     s0,r0                 ;544
000100  eeb80a40          VCVT.F32.U32 s0,s0                 ;544
000104  ee700a60          VSUB.F32 s1,s0,s1              ;544
000108  ee810a20          VDIV.F32 s0,s2,s1              ;544
00010c  ee000a90          VMOV     s1,r0                 ;545
000110  eeb81a60          VCVT.F32.U32 s2,s1                 ;545
000114  ee004a90          VMOV     s1,r4                 ;545
000118  eef80a60          VCVT.F32.U32 s1,s1                 ;545
00011c  ed8b0a01          VSTR     s0,[r11,#4]           ;544
000120  ee400a41          VMLS.F32 s1,s0,s2              ;545
000124  edcb0a05          VSTR     s1,[r11,#0x14]        ;545
000128  e367              B        |L1.2042|
                  |L1.298|
00012a  e0df              B        |L1.748|
                  |L1.300|
00012c  e324              B        |L1.1912|
00012e  e7ff              B        |L1.304|
                  |L1.304|
000130  7037              STRB     r7,[r6,#0]            ;550
000132  48be              LDR      r0,|L1.1068|
000134  f64051ac          MOV      r1,#0xdac             ;551
000138  8001              STRH     r1,[r0,#0]            ;551
00013a  f8ae8000          STRH     r8,[lr,#0]            ;552
00013e  e2c1              B        |L1.1732|
                  |L1.320|
000140  49ba              LDR      r1,|L1.1068|
000142  616c              STR      r4,[r5,#0x14]         ;556  ; x1
000144  880a              LDRH     r2,[r1,#0]            ;556  ; Contr_Voltage
000146  61aa              STR      r2,[r5,#0x18]         ;557  ; y1
000148  8800              LDRH     r0,[r0,#0]            ;557  ; Vmon_POWE_value
00014a  e9c50409          STRD     r0,r4,[r5,#0x24]      ;557
00014e  f2427010          MOV      r0,#0x2710            ;559
000152  8008              STRH     r0,[r1,#0]            ;559
000154  f8ae8000          STRH     r8,[lr,#0]            ;560
000158  e1c0              B        |L1.1244|
00015a  e005              B        |L1.360|
                  |L1.348|
00015c  e04d              B        |L1.506|
                  |L1.350|
00015e  e057              B        |L1.528|
                  |L1.352|
000160  e05e              B        |L1.544|
                  |L1.354|
000162  e082              B        |L1.618|
                  |L1.356|
000164  e08e              B        |L1.644|
                  |L1.358|
000166  e09c              B        |L1.674|
                  |L1.360|
000168  49b0              LDR      r1,|L1.1068|
00016a  61ec              STR      r4,[r5,#0x1c]         ;563  ; x2
00016c  8809              LDRH     r1,[r1,#0]            ;563  ; Contr_Voltage
00016e  6229              STR      r1,[r5,#0x20]         ;564  ; y2
000170  8800              LDRH     r0,[r0,#0]            ;564  ; Vmon_POWE_value
000172  ee011a10          VMOV     s2,r1                 ;567
000176  eeb80a40          VCVT.F32.U32 s0,s0                 ;567
00017a  eef80a60          VCVT.F32.U32 s1,s1                 ;567
00017e  eeb81a41          VCVT.F32.U32 s2,s2                 ;567
000182  e9c5040b          STRD     r0,r4,[r5,#0x2c]      ;564
000186  ee311a40          VSUB.F32 s2,s2,s0              ;567
00018a  ee004a10          VMOV     s0,r4                 ;567
00018e  465d              MOV      r5,r11                ;567
000190  eeb80a40          VCVT.F32.U32 s0,s0                 ;567
000194  ee700a60          VSUB.F32 s1,s0,s1              ;567
000198  ee810a20          VDIV.F32 s0,s2,s1              ;567
00019c  ee004a90          VMOV     s1,r4                 ;568
0001a0  eeb81a60          VCVT.F32.U32 s2,s1                 ;568
0001a4  ee001a90          VMOV     s1,r1                 ;568
0001a8  eef80a60          VCVT.F32.U32 s1,s1                 ;568
0001ac  ed8b0a02          VSTR     s0,[r11,#8]           ;567
0001b0  ee400a41          VMLS.F32 s1,s0,s2              ;568
0001b4  ee004a10          VMOV     s0,r4                 ;570
0001b8  eeb81a42          VCVT.F32.U32 s2,s4                 ;570
0001bc  eeb80a40          VCVT.F32.U32 s0,s0                 ;570
0001c0  edcb0a06          VSTR     s1,[r11,#0x18]        ;568
0001c4  eef80a62          VCVT.F32.U32 s1,s5                 ;570
0001c8  ee700a60          VSUB.F32 s1,s0,s1              ;570
0001cc  ee000a10          VMOV     s0,r0                 ;570
0001d0  eeb80a40          VCVT.F32.U32 s0,s0                 ;570
0001d4  ee301a41          VSUB.F32 s2,s0,s2              ;570
0001d8  ee800a81          VDIV.F32 s0,s1,s2              ;570
0001dc  ee000a90          VMOV     s1,r0                 ;571
0001e0  eeb81a60          VCVT.F32.U32 s2,s1                 ;571
0001e4  ee004a90          VMOV     s1,r4                 ;571
0001e8  eef80a60          VCVT.F32.U32 s1,s1                 ;571
0001ec  ed850a03          VSTR     s0,[r5,#0xc]          ;570
0001f0  ee400a41          VMLS.F32 s1,s0,s2              ;571
0001f4  edcb0a07          VSTR     s1,[r11,#0x1c]        ;571
0001f8  e255              B        |L1.1702|
                  |L1.506|
0001fa  f8cc7018          STR      r7,[r12,#0x18]        ;577  ; Run_Control
0001fe  f8cc301c          STR      r3,[r12,#0x1c]        ;578  ; Run_Control
000202  2102              MOVS     r1,#2                 ;579
000204  f7fffffe          BL       GPIO_ResetBits
000208  7037              STRB     r7,[r6,#0]            ;580
00020a  f8a98000          STRH     r8,[r9,#0]            ;581
00020e  e036              B        |L1.638|
                  |L1.528|
000210  f8cc7018          STR      r7,[r12,#0x18]        ;584  ; Run_Control
000214  f8cc301c          STR      r3,[r12,#0x1c]        ;585  ; Run_Control
000218  2102              MOVS     r1,#2                 ;586
00021a  f7fffffe          BL       GPIO_ResetBits
00021e  e038              B        |L1.658|
                  |L1.544|
000220  61ec              STR      r4,[r5,#0x1c]         ;593  ; x2
000222  f8b90000          LDRH     r0,[r9,#0]            ;593  ; Contr_Laod
000226  eeb80a40          VCVT.F32.U32 s0,s0                 ;594
00022a  ee010a10          VMOV     s2,r0                 ;594
00022e  eef80a60          VCVT.F32.U32 s1,s1                 ;594
000232  6228              STR      r0,[r5,#0x20]         ;594  ; y2
000234  eeb81a41          VCVT.F32.U32 s2,s2                 ;594
000238  ee311a40          VSUB.F32 s2,s2,s0              ;594
00023c  ee004a10          VMOV     s0,r4                 ;594
000240  eeb80a40          VCVT.F32.U32 s0,s0                 ;594
000244  ee700a60          VSUB.F32 s1,s0,s1              ;594
000248  ee810a20          VDIV.F32 s0,s2,s1              ;594
00024c  ee004a90          VMOV     s1,r4                 ;595
000250  eeb81a60          VCVT.F32.U32 s2,s1                 ;595
000254  ee000a90          VMOV     s1,r0                 ;595
000258  eef80a60          VCVT.F32.U32 s1,s1                 ;595
00025c  ed8b0a0d          VSTR     s0,[r11,#0x34]        ;594
000260  ee400a41          VMLS.F32 s1,s0,s2              ;595
000264  edcb0a1b          VSTR     s1,[r11,#0x6c]        ;595
000268  e21d              B        |L1.1702|
                  |L1.618|
00026a  f8cc7018          STR      r7,[r12,#0x18]        ;601  ; Run_Control
00026e  f8cc701c          STR      r7,[r12,#0x1c]        ;602  ; Run_Control
000272  2102              MOVS     r1,#2                 ;603
000274  f7fffffe          BL       GPIO_SetBits
000278  7037              STRB     r7,[r6,#0]            ;604
00027a  f8a98000          STRH     r8,[r9,#0]            ;605
                  |L1.638|
00027e  2101              MOVS     r1,#1                 ;582
000280  2002              MOVS     r0,#2                 ;582
000282  e129              B        |L1.1240|
                  |L1.644|
000284  f8cc7018          STR      r7,[r12,#0x18]        ;608  ; Run_Control
000288  f8cc701c          STR      r7,[r12,#0x1c]        ;609  ; Run_Control
00028c  2102              MOVS     r1,#2                 ;610
00028e  f7fffffe          BL       GPIO_SetBits
                  |L1.658|
000292  616c              STR      r4,[r5,#0x14]         ;588  ; x1
000294  f8b91000          LDRH     r1,[r9,#0]            ;588  ; Contr_Laod
000298  4648              MOV      r0,r9                 ;588
00029a  61a9              STR      r1,[r5,#0x18]         ;589  ; y1
00029c  f44f51fa          MOV      r1,#0x1f40            ;589
0002a0  e06a              B        |L1.888|
                  |L1.674|
0002a2  61ec              STR      r4,[r5,#0x1c]         ;617  ; x2
0002a4  f8b90000          LDRH     r0,[r9,#0]            ;617  ; Contr_Laod
0002a8  eeb80a40          VCVT.F32.U32 s0,s0                 ;618
0002ac  ee010a10          VMOV     s2,r0                 ;618
0002b0  eef80a60          VCVT.F32.U32 s1,s1                 ;618
0002b4  6228              STR      r0,[r5,#0x20]         ;618  ; y2
0002b6  eeb81a41          VCVT.F32.U32 s2,s2                 ;618
0002ba  ee311a40          VSUB.F32 s2,s2,s0              ;618
0002be  ee004a10          VMOV     s0,r4                 ;618
0002c2  eeb80a40          VCVT.F32.U32 s0,s0                 ;618
0002c6  ee700a60          VSUB.F32 s1,s0,s1              ;618
0002ca  ee810a20          VDIV.F32 s0,s2,s1              ;618
0002ce  ee004a90          VMOV     s1,r4                 ;619
0002d2  eeb81a60          VCVT.F32.U32 s2,s1                 ;619
0002d6  ee000a90          VMOV     s1,r0                 ;619
0002da  eef80a60          VCVT.F32.U32 s1,s1                 ;619
0002de  ed8b0a0e          VSTR     s0,[r11,#0x38]        ;618
0002e2  ee400a41          VMLS.F32 s1,s0,s2              ;619
0002e6  edcb0a1c          VSTR     s1,[r11,#0x70]        ;619
0002ea  e1dc              B        |L1.1702|
                  |L1.748|
0002ec  b321              CBZ      r1,|L1.824|
0002ee  2901              CMP      r1,#1                 ;633
0002f0  d027              BEQ      |L1.834|
0002f2  2902              CMP      r1,#2                 ;641
0002f4  d033              BEQ      |L1.862|
0002f6  f8df8114          LDR      r8,|L1.1036|
0002fa  2903              CMP      r1,#3                 ;649
0002fc  edd83a0e          VLDR     s7,[r8,#0x38]         ;524
000300  ed983a0d          VLDR     s6,[r8,#0x34]         ;524
000304  edd81a08          VLDR     s3,[r8,#0x20]         ;524
000308  ed981a07          VLDR     s2,[r8,#0x1c]         ;524
00030c  d036              BEQ      |L1.892|
00030e  4848              LDR      r0,|L1.1072|
000310  f44f6800          MOV      r8,#0x800             ;671
000314  2904              CMP      r1,#4                 ;669
000316  d06d              BEQ      |L1.1012|
000318  2905              CMP      r1,#5                 ;675
00031a  d06c              BEQ      |L1.1014|
00031c  2906              CMP      r1,#6                 ;684
00031e  d06b              BEQ      |L1.1016|
000320  2907              CMP      r1,#7                 ;693
000322  d06a              BEQ      |L1.1018|
000324  2908              CMP      r1,#8                 ;702
000326  d069              BEQ      |L1.1020|
000328  2909              CMP      r1,#9                 ;726
00032a  d068              BEQ      |L1.1022|
00032c  4f41              LDR      r7,|L1.1076|
00032e  290a              CMP      r1,#0xa               ;731
000330  d066              BEQ      |L1.1024|
000332  290b              CMP      r1,#0xb               ;739
000334  d065              BEQ      |L1.1026|
000336  e32b              B        |L1.2448|
                  |L1.824|
000338  f8cc3020          STR      r3,[r12,#0x20]        ;628  ; Run_Control
00033c  f2417170          MOV      r1,#0x1770            ;629
000340  e0c6              B        |L1.1232|
                  |L1.834|
000342  f8cc3020          STR      r3,[r12,#0x20]        ;635  ; Run_Control
000346  616c              STR      r4,[r5,#0x14]         ;637  ; x1
000348  f8b91000          LDRH     r1,[r9,#0]            ;637  ; Contr_Laod
00034c  4648              MOV      r0,r9                 ;637
00034e  61a9              STR      r1,[r5,#0x18]         ;638  ; y1
000350  4939              LDR      r1,|L1.1080|
000352  8809              LDRH     r1,[r1,#0]            ;638  ; Imon_Load_value
000354  e9c5140b          STRD     r1,r4,[r5,#0x2c]      ;638
000358  f64511d8          MOV      r1,#0x59d8            ;640
00035c  e00c              B        |L1.888|
                  |L1.862|
00035e  f8cc3020          STR      r3,[r12,#0x20]        ;643  ; Run_Control
000362  61ec              STR      r4,[r5,#0x1c]         ;645  ; x2
000364  f8b91000          LDRH     r1,[r9,#0]            ;645  ; Contr_Laod
000368  4648              MOV      r0,r9                 ;645
00036a  6229              STR      r1,[r5,#0x20]         ;646  ; y2
00036c  4932              LDR      r1,|L1.1080|
00036e  8809              LDRH     r1,[r1,#0]            ;646  ; Imon_Load_value
000370  e9c5140d          STRD     r1,r4,[r5,#0x34]      ;646
000374  f64d21c0          MOV      r1,#0xdac0            ;648
                  |L1.888|
000378  8001              STRH     r1,[r0,#0]            ;640
00037a  e309              B        |L1.2448|
                  |L1.892|
00037c  626c              STR      r4,[r5,#0x24]         ;652  ; x3
00037e  f8b97000          LDRH     r7,[r9,#0]            ;652  ; Contr_Laod
000382  482d              LDR      r0,|L1.1080|
000384  62af              STR      r7,[r5,#0x28]         ;653  ; y3
000386  8801              LDRH     r1,[r0,#0]            ;653  ; Imon_Load_value
000388  eeb82a61          VCVT.F32.U32 s4,s3                 ;656
00038c  eeb80a40          VCVT.F32.U32 s0,s0                 ;656
000390  eef80a60          VCVT.F32.U32 s1,s1                 ;656
000394  e9c5140f          STRD     r1,r4,[r5,#0x3c]      ;656
000398  ee322a40          VSUB.F32 s4,s4,s0              ;656
00039c  eeb80a41          VCVT.F32.U32 s0,s2                 ;656
0003a0  4658              MOV      r0,r11                ;656
0003a2  ee700a60          VSUB.F32 s1,s0,s1              ;656
0003a6  ee820a20          VDIV.F32 s0,s4,s1              ;656
0003aa  eeb82a41          VCVT.F32.U32 s4,s2                 ;657
0003ae  eef80a61          VCVT.F32.U32 s1,s3                 ;657
0003b2  eeb81a41          VCVT.F32.U32 s2,s2                 ;658
0003b6  ed8b0a08          VSTR     s0,[r11,#0x20]        ;656
0003ba  ee400a42          VMLS.F32 s1,s0,s4              ;657
0003be  ee007a10          VMOV     s0,r7                 ;658
0003c2  eeb80a40          VCVT.F32.U32 s0,s0                 ;658
0003c6  edcb0a16          VSTR     s1,[r11,#0x58]        ;657
0003ca  eef80a61          VCVT.F32.U32 s1,s3                 ;658
0003ce  ee700a60          VSUB.F32 s1,s0,s1              ;658
0003d2  ee004a10          VMOV     s0,r4                 ;658
0003d6  eeb80a40          VCVT.F32.U32 s0,s0                 ;658
0003da  ee301a41          VSUB.F32 s2,s0,s2              ;658
0003de  ee800a81          VDIV.F32 s0,s1,s2              ;658
0003e2  ee004a90          VMOV     s1,r4                 ;659
0003e6  eeb81a60          VCVT.F32.U32 s2,s1                 ;659
0003ea  ee007a90          VMOV     s1,r7                 ;659
0003ee  ed8b0a09          VSTR     s0,[r11,#0x24]        ;658
0003f2  e023              B        |L1.1084|
                  |L1.1012|
0003f4  e065              B        |L1.1218|
                  |L1.1014|
0003f6  e072              B        |L1.1246|
                  |L1.1016|
0003f8  e082              B        |L1.1280|
                  |L1.1018|
0003fa  e092              B        |L1.1314|
                  |L1.1020|
0003fc  e0a2              B        |L1.1348|
                  |L1.1022|
0003fe  e158              B        |L1.1714|
                  |L1.1024|
000400  e163              B        |L1.1738|
                  |L1.1026|
000402  e170              B        |L1.1766|
                  |L1.1028|
                          DCD      calflag
                  |L1.1032|
                          DCD      Run_Control
                  |L1.1036|
                          DCD      ||.data||
                  |L1.1040|
                          DCD      CalPara
                  |L1.1044|
                          DCD      flagB
                  |L1.1048|
                          DCD      Contr_Current
                  |L1.1052|
                          DCD      Contr_Laod
                  |L1.1056|
                          DCD      Vmon_Load_value
                  |L1.1060|
                          DCD      Vmon_POWE_value
                  |L1.1064|
                          DCD      0x40020400
                  |L1.1068|
                          DCD      Contr_Voltage
                  |L1.1072|
                          DCD      0x40020800
                  |L1.1076|
                          DCD      Imon_POWE_value
                  |L1.1080|
                          DCD      Imon_Load_value
                  |L1.1084|
00043c  eef80a60          VCVT.F32.U32 s1,s1                 ;659
000440  ee400a41          VMLS.F32 s1,s0,s2              ;659
000444  eeb81a43          VCVT.F32.U32 s2,s6                 ;661
000448  edc00a17          VSTR     s1,[r0,#0x5c]         ;659
00044c  ed950a0c          VLDR     s0,[r5,#0x30]         ;661
000450  eef80a63          VCVT.F32.U32 s1,s7                 ;661
000454  eeb80a40          VCVT.F32.U32 s0,s0                 ;661
000458  ee700ac0          VSUB.F32 s1,s1,s0              ;661
00045c  ed950a0b          VLDR     s0,[r5,#0x2c]         ;661
000460  eeb80a40          VCVT.F32.U32 s0,s0                 ;661
000464  ee311a40          VSUB.F32 s2,s2,s0              ;661
000468  ee800a81          VDIV.F32 s0,s1,s2              ;661
00046c  eeb81a43          VCVT.F32.U32 s2,s6                 ;662
000470  eef80a63          VCVT.F32.U32 s1,s7                 ;662
000474  ed800a0f          VSTR     s0,[r0,#0x3c]         ;661
000478  ee400a41          VMLS.F32 s1,s0,s2              ;662
00047c  ee004a10          VMOV     s0,r4                 ;663
000480  eeb81a43          VCVT.F32.U32 s2,s6                 ;663
000484  eeb80a40          VCVT.F32.U32 s0,s0                 ;663
000488  edc00a1d          VSTR     s1,[r0,#0x74]         ;662
00048c  eef80a63          VCVT.F32.U32 s1,s7                 ;663
000490  ee700a60          VSUB.F32 s1,s0,s1              ;663
000494  ee001a10          VMOV     s0,r1                 ;663
000498  eeb80a40          VCVT.F32.U32 s0,s0                 ;663
00049c  ee301a41          VSUB.F32 s2,s0,s2              ;663
0004a0  ee800a81          VDIV.F32 s0,s1,s2              ;663
0004a4  ee001a90          VMOV     s1,r1                 ;664
0004a8  eeb81a60          VCVT.F32.U32 s2,s1                 ;664
0004ac  ee004a90          VMOV     s1,r4                 ;664
0004b0  eef80a60          VCVT.F32.U32 s1,s1                 ;664
0004b4  ed800a10          VSTR     s0,[r0,#0x40]         ;663
0004b8  ee400a41          VMLS.F32 s1,s0,s2              ;664
0004bc  edcb0a1e          VSTR     s1,[r11,#0x78]        ;664
0004c0  e0f1              B        |L1.1702|
                  |L1.1218|
0004c2  f8cc7020          STR      r7,[r12,#0x20]        ;670  ; Run_Control
0004c6  4641              MOV      r1,r8                 ;671
0004c8  f7fffffe          BL       GPIO_ResetBits
0004cc  f6411164          MOV      r1,#0x1964            ;672
                  |L1.1232|
0004d0  f8a91000          STRH     r1,[r9,#0]            ;629
0004d4  7037              STRB     r7,[r6,#0]            ;630
0004d6  e6d2              B        |L1.638|
                  |L1.1240|
0004d8  f7fffffe          BL       OnOff_GPOI_ResetSet
                  |L1.1244|
0004dc  e258              B        |L1.2448|
                  |L1.1246|
0004de  f8cc7020          STR      r7,[r12,#0x20]        ;677  ; Run_Control
0004e2  4641              MOV      r1,r8                 ;678
0004e4  f7fffffe          BL       GPIO_ResetBits
0004e8  616c              STR      r4,[r5,#0x14]         ;680  ; x1
0004ea  f8b91000          LDRH     r1,[r9,#0]            ;680  ; Contr_Laod
0004ee  4648              MOV      r0,r9                 ;680
0004f0  61a9              STR      r1,[r5,#0x18]         ;681  ; y1
0004f2  49fe              LDR      r1,|L1.2284|
0004f4  8809              LDRH     r1,[r1,#0]            ;681  ; Imon_Load_value
0004f6  e9c5140d          STRD     r1,r4,[r5,#0x34]      ;681
0004fa  f64261e0          MOV      r1,#0x2ee0            ;683
0004fe  e73b              B        |L1.888|
                  |L1.1280|
000500  f8cc7020          STR      r7,[r12,#0x20]        ;686  ; Run_Control
000504  4641              MOV      r1,r8                 ;687
000506  f7fffffe          BL       GPIO_ResetBits
00050a  61ec              STR      r4,[r5,#0x1c]         ;689  ; x2
00050c  f8b91000          LDRH     r1,[r9,#0]            ;689  ; Contr_Laod
000510  4648              MOV      r0,r9                 ;689
000512  6229              STR      r1,[r5,#0x20]         ;690  ; y2
000514  49f5              LDR      r1,|L1.2284|
000516  8809              LDRH     r1,[r1,#0]            ;690  ; Imon_Load_value
000518  e9c5140f          STRD     r1,r4,[r5,#0x3c]      ;690
00051c  f6446120          MOV      r1,#0x4e20            ;692
000520  e72a              B        |L1.888|
                  |L1.1314|
000522  f8cc7020          STR      r7,[r12,#0x20]        ;695  ; Run_Control
000526  4641              MOV      r1,r8                 ;696
000528  f7fffffe          BL       GPIO_ResetBits
00052c  626c              STR      r4,[r5,#0x24]         ;698  ; x3
00052e  f8b91000          LDRH     r1,[r9,#0]            ;698  ; Contr_Laod
000532  4648              MOV      r0,r9                 ;698
000534  62a9              STR      r1,[r5,#0x28]         ;699  ; y3
000536  49ed              LDR      r1,|L1.2284|
000538  8809              LDRH     r1,[r1,#0]            ;699  ; Imon_Load_value
00053a  e9c51411          STRD     r1,r4,[r5,#0x44]      ;699
00053e  f6461178          MOV      r1,#0x6978            ;701
000542  e719              B        |L1.888|
                  |L1.1348|
000544  62ec              STR      r4,[r5,#0x2c]         ;705  ; x4
000546  f8b97000          LDRH     r7,[r9,#0]            ;705  ; Contr_Laod
00054a  48e8              LDR      r0,|L1.2284|
00054c  632f              STR      r7,[r5,#0x30]         ;706  ; y4
00054e  8801              LDRH     r1,[r0,#0]            ;706  ; Imon_Load_value
000550  eeb84a61          VCVT.F32.U32 s8,s3                 ;709
000554  eeb80a40          VCVT.F32.U32 s0,s0                 ;709
000558  eef80a60          VCVT.F32.U32 s1,s1                 ;709
00055c  e9c51413          STRD     r1,r4,[r5,#0x4c]      ;709
000560  ee344a40          VSUB.F32 s8,s8,s0              ;709
000564  eeb80a41          VCVT.F32.U32 s0,s2                 ;709
000568  4658              MOV      r0,r11                ;709
00056a  ee700a60          VSUB.F32 s1,s0,s1              ;709
00056e  ee840a20          VDIV.F32 s0,s8,s1              ;709
000572  eeb84a41          VCVT.F32.U32 s8,s2                 ;710
000576  eef80a61          VCVT.F32.U32 s1,s3                 ;710
00057a  eeb81a41          VCVT.F32.U32 s2,s2                 ;711
00057e  ed8b0a0a          VSTR     s0,[r11,#0x28]        ;709
000582  ee400a44          VMLS.F32 s1,s0,s8              ;710
000586  eeb80a62          VCVT.F32.U32 s0,s5                 ;711
00058a  edcb0a18          VSTR     s1,[r11,#0x60]        ;710
00058e  eef80a61          VCVT.F32.U32 s1,s3                 ;711
000592  ee700a60          VSUB.F32 s1,s0,s1              ;711
000596  eeb80a42          VCVT.F32.U32 s0,s4                 ;711
00059a  ee301a41          VSUB.F32 s2,s0,s2              ;711
00059e  ee800a81          VDIV.F32 s0,s1,s2              ;711
0005a2  eeb81a42          VCVT.F32.U32 s2,s4                 ;712
0005a6  eef80a62          VCVT.F32.U32 s1,s5                 ;712
0005aa  ed8b0a0b          VSTR     s0,[r11,#0x2c]        ;711
0005ae  ee400a41          VMLS.F32 s1,s0,s2              ;712
0005b2  ee007a10          VMOV     s0,r7                 ;713
0005b6  eeb81a42          VCVT.F32.U32 s2,s4                 ;713
0005ba  eeb82a43          VCVT.F32.U32 s4,s6                 ;716
0005be  eeb80a40          VCVT.F32.U32 s0,s0                 ;713
0005c2  edc00a19          VSTR     s1,[r0,#0x64]         ;712
0005c6  eef80a62          VCVT.F32.U32 s1,s5                 ;713
0005ca  ee700a60          VSUB.F32 s1,s0,s1              ;713
0005ce  ee004a10          VMOV     s0,r4                 ;713
0005d2  eeb80a40          VCVT.F32.U32 s0,s0                 ;713
0005d6  ee301a41          VSUB.F32 s2,s0,s2              ;713
0005da  ee800a81          VDIV.F32 s0,s1,s2              ;713
0005de  ee004a90          VMOV     s1,r4                 ;714
0005e2  eeb81a60          VCVT.F32.U32 s2,s1                 ;714
0005e6  ee007a90          VMOV     s1,r7                 ;714
0005ea  eef80a60          VCVT.F32.U32 s1,s1                 ;714
0005ee  ed800a0c          VSTR     s0,[r0,#0x30]         ;713
0005f2  ee400a41          VMLS.F32 s1,s0,s2              ;714
0005f6  eeb81a63          VCVT.F32.U32 s2,s7                 ;716
0005fa  edc00a1a          VSTR     s1,[r0,#0x68]         ;714
0005fe  ed950a10          VLDR     s0,[r5,#0x40]         ;716
000602  eef80a40          VCVT.F32.U32 s1,s0                 ;716
000606  ee701ac1          VSUB.F32 s3,s1,s2              ;716
00060a  edd50a0f          VLDR     s1,[r5,#0x3c]         ;716
00060e  eeb81a60          VCVT.F32.U32 s2,s1                 ;716
000612  ee312a42          VSUB.F32 s4,s2,s4              ;716
000616  ee811a82          VDIV.F32 s2,s3,s4              ;716
00061a  eeb82a60          VCVT.F32.U32 s4,s1                 ;717
00061e  eef81a40          VCVT.F32.U32 s3,s0                 ;717
000622  eeb80a40          VCVT.F32.U32 s0,s0                 ;718
000626  eef80a60          VCVT.F32.U32 s1,s1                 ;718
00062a  ed801a11          VSTR     s2,[r0,#0x44]         ;716
00062e  ee411a42          VMLS.F32 s3,s2,s4              ;717
000632  edc01a1f          VSTR     s3,[r0,#0x7c]         ;717
000636  ed951a12          VLDR     s2,[r5,#0x48]         ;718
00063a  eef81a41          VCVT.F32.U32 s3,s2                 ;718
00063e  ee711ac0          VSUB.F32 s3,s3,s0              ;718
000642  ed950a11          VLDR     s0,[r5,#0x44]         ;718
000646  eeb82a40          VCVT.F32.U32 s4,s0                 ;718
00064a  ee322a60          VSUB.F32 s4,s4,s1              ;718
00064e  eec10a82          VDIV.F32 s1,s3,s4              ;718
000652  eeb82a40          VCVT.F32.U32 s4,s0                 ;719
000656  eef81a41          VCVT.F32.U32 s3,s2                 ;719
00065a  eeb81a41          VCVT.F32.U32 s2,s2                 ;720
00065e  edc00a12          VSTR     s1,[r0,#0x48]         ;718
000662  ee401ac2          VMLS.F32 s3,s1,s4              ;719
000666  ee004a90          VMOV     s1,r4                 ;720
00066a  eef80a60          VCVT.F32.U32 s1,s1                 ;720
00066e  edc01a20          VSTR     s3,[r0,#0x80]         ;719
000672  ee301ac1          VSUB.F32 s2,s1,s2              ;720
000676  ee001a90          VMOV     s1,r1                 ;720
00067a  eeb80a40          VCVT.F32.U32 s0,s0                 ;720
00067e  eef80a60          VCVT.F32.U32 s1,s1                 ;720
000682  ee700ac0          VSUB.F32 s1,s1,s0              ;720
000686  ee810a20          VDIV.F32 s0,s2,s1              ;720
00068a  ee001a90          VMOV     s1,r1                 ;721
00068e  eeb81a60          VCVT.F32.U32 s2,s1                 ;721
000692  ee004a90          VMOV     s1,r4                 ;721
000696  eef80a60          VCVT.F32.U32 s1,s1                 ;721
00069a  ed800a13          VSTR     s0,[r0,#0x4c]         ;720
00069e  ee400a41          VMLS.F32 s1,s0,s2              ;721
0006a2  edcb0a21          VSTR     s1,[r11,#0x84]        ;721
                  |L1.1702|
0006a6  f8ca2000          STR      r2,[r10,#0]           ;667  ; flagB
0006aa  7033              STRB     r3,[r6,#0]            ;667
0006ac  f7fffffe          BL       Off_GPOI_ResetSet
0006b0  e16e              B        |L1.2448|
                  |L1.1714|
0006b2  498f              LDR      r1,|L1.2288|
0006b4  f64050ac          MOV      r0,#0xdac             ;727
0006b8  8008              STRH     r0,[r1,#0]            ;727
0006ba  f44f617a          MOV      r1,#0xfa0             ;728
0006be  f8ae1000          STRH     r1,[lr,#0]            ;728
0006c2  7037              STRB     r7,[r6,#0]            ;729
                  |L1.1732|
0006c4  2101              MOVS     r1,#1                 ;553
0006c6  2000              MOVS     r0,#0                 ;553
0006c8  e706              B        |L1.1240|
                  |L1.1738|
0006ca  616c              STR      r4,[r5,#0x14]         ;734  ; x1
0006cc  f8be1000          LDRH     r1,[lr,#0]            ;734  ; Contr_Current
0006d0  4670              MOV      r0,lr                 ;734
0006d2  61a9              STR      r1,[r5,#0x18]         ;735  ; y1
0006d4  8839              LDRH     r1,[r7,#0]            ;735  ; Imon_POWE_value
0006d6  e9c51409          STRD     r1,r4,[r5,#0x24]      ;735
0006da  4985              LDR      r1,|L1.2288|
0006dc  f64052ac          MOV      r2,#0xdac             ;737
0006e0  800a              STRH     r2,[r1,#0]            ;737
0006e2  0091              LSLS     r1,r2,#2              ;738
0006e4  e648              B        |L1.888|
                  |L1.1766|
0006e6  61ec              STR      r4,[r5,#0x1c]         ;742  ; x2
0006e8  f8be0000          LDRH     r0,[lr,#0]            ;742  ; Contr_Current
0006ec  6228              STR      r0,[r5,#0x20]         ;743  ; y2
0006ee  8839              LDRH     r1,[r7,#0]            ;743  ; Imon_POWE_value
0006f0  ee010a10          VMOV     s2,r0                 ;746
0006f4  eeb80a40          VCVT.F32.U32 s0,s0                 ;746
0006f8  eef80a60          VCVT.F32.U32 s1,s1                 ;746
0006fc  eeb81a41          VCVT.F32.U32 s2,s2                 ;746
000700  e9c5140b          STRD     r1,r4,[r5,#0x2c]      ;743
000704  ee311a40          VSUB.F32 s2,s2,s0              ;746
000708  ee004a10          VMOV     s0,r4                 ;746
00070c  465d              MOV      r5,r11                ;746
00070e  eeb80a40          VCVT.F32.U32 s0,s0                 ;746
000712  ee700a60          VSUB.F32 s1,s0,s1              ;746
000716  ee810a20          VDIV.F32 s0,s2,s1              ;746
00071a  ee004a90          VMOV     s1,r4                 ;747
00071e  eeb81a60          VCVT.F32.U32 s2,s1                 ;747
000722  ee000a90          VMOV     s1,r0                 ;747
000726  eef80a60          VCVT.F32.U32 s1,s1                 ;747
00072a  ed8b0a14          VSTR     s0,[r11,#0x50]        ;746
00072e  ee400a41          VMLS.F32 s1,s0,s2              ;747
000732  ee004a10          VMOV     s0,r4                 ;749
000736  eeb81a42          VCVT.F32.U32 s2,s4                 ;749
00073a  eeb80a40          VCVT.F32.U32 s0,s0                 ;749
00073e  edcb0a22          VSTR     s1,[r11,#0x88]        ;747
000742  eef80a62          VCVT.F32.U32 s1,s5                 ;749
000746  ee700a60          VSUB.F32 s1,s0,s1              ;749
00074a  ee001a10          VMOV     s0,r1                 ;749
00074e  eeb80a40          VCVT.F32.U32 s0,s0                 ;749
000752  ee301a41          VSUB.F32 s2,s0,s2              ;749
000756  ee800a81          VDIV.F32 s0,s1,s2              ;749
00075a  ee001a90          VMOV     s1,r1                 ;750
00075e  eeb81a60          VCVT.F32.U32 s2,s1                 ;750
000762  ee004a90          VMOV     s1,r4                 ;750
000766  eef80a60          VCVT.F32.U32 s1,s1                 ;750
00076a  ed850a15          VSTR     s0,[r5,#0x54]         ;749
00076e  ee400a41          VMLS.F32 s1,s0,s2              ;750
000772  edcb0a23          VSTR     s1,[r11,#0x8c]        ;750
000776  e796              B        |L1.1702|
                  |L1.1912|
;;;757    		if(range == 0)//内阻低档位低段
;;;758    		{
;;;759    			RCONT_SW = 0;
;;;760    			calflag = 1;
;;;761    			x1 = Rmon_value;
000778  485e              LDR      r0,|L1.2292|
00077a  b1c1              CBZ      r1,|L1.1966|
;;;762    			y1 = data;
;;;763    			
;;;764    //			Modify_A_READ=0;
;;;765    //			Modify_A_ACT=0;
;;;766    //			Modify_A_READ = Rmon_value;//测量电阻值
;;;767    //			Modify_A_ACT = data;//读取低段
;;;768    		}else if (range == 1)//内阻低档位高段
00077c  2901              CMP      r1,#1
00077e  d019              BEQ      |L1.1972|
;;;769    		{
;;;770    
;;;771    			x2 = Rmon_value;
;;;772    			y2 = data;
;;;773    			CalPara.TestR[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;774    			CalPara.OffsetR[0] = (float)y2 - CalPara.TestR[0]*(float)x2;
;;;775    				//参数写进FLASH
;;;776    			Flag_DAC_OFF=0;
;;;777    			calflag = 0;
;;;778    		}else if(range == 2)//内阻高档位低段
000780  2902              CMP      r1,#2
000782  d06e              BEQ      |L1.2146|
;;;779    		{
;;;780    			RCONT_SW = 1;
;;;781    			calflag = 1;
;;;782    			x1 = Rmon_value;
;;;783    			y1 = data;
;;;784    		}else if (range == 3)//内阻高档位高段
000784  2903              CMP      r1,#3
000786  d039              BEQ      |L1.2044|
;;;785    		{
;;;786    			
;;;787    			x2 = Rmon_value;
;;;788    			y2 = data;
;;;789    			CalPara.TestR[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;790    			CalPara.OffsetR[1] = (float)y2 - CalPara.TestR[1]*(float)x2;
;;;791    				//参数写进FLASH
;;;792    			Flag_DAC_OFF=0;
;;;793    			calflag = 0;
;;;794    		}else if(range == 4)//识别电阻1低段
;;;795    		{
;;;796    			calflag = 1;
;;;797    //			x1 = (R1mon_value*1000)/(65535-R1mon_value);
;;;798    			x1 = (R1mon_value*1000)/(65535-R1mon_value);
000788  f8df916c          LDR      r9,|L1.2296|
00078c  f64f78ff          MOV      r8,#0xffff
000790  2904              CMP      r1,#4                 ;794
000792  d057              BEQ      |L1.2116|
;;;799    			y1 = data;
;;;800    		}else if (range == 5)//识别电阻1高段
000794  2905              CMP      r1,#5
000796  d065              BEQ      |L1.2148|
;;;801    		{
;;;802    			
;;;803    //			x2 = (R1mon_value*1000)/(65535-R1mon_value);
;;;804    			x2 = (R1mon_value*1000)/(65535-R1mon_value);
;;;805    			y2 = data;
;;;806    			CalPara.TestR1[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;807    			CalPara.OffsetR1[0] = (float)y2 - CalPara.TestR1[0]*(float)x2;
;;;808    				//参数写进FLASH
;;;809    			Flag_DAC_OFF=0;
;;;810    			calflag = 0;
;;;811    		}else if(range == 6)//识别电阻2低段
;;;812    		{
;;;813    			calflag = 1;
;;;814    			x1 = (R2mon_value*1000)/(65535-R2mon_value);
000798  f8df9160          LDR      r9,|L1.2300|
00079c  2906              CMP      r1,#6                 ;811
00079e  d051              BEQ      |L1.2116|
;;;815    			y1 = data;
;;;816    		}else if (range == 7)//识别电阻2高段
0007a0  2907              CMP      r1,#7
0007a2  d07d              BEQ      |L1.2208|
;;;817    		{
;;;818    			
;;;819    			x2 = (R2mon_value*1000)/(65535-R2mon_value);
;;;820    			y2 = data;
;;;821    			CalPara.TestR2[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;822    			CalPara.OffsetR2[0] = (float)y2 - CalPara.TestR2[0]*(float)x2;
;;;823    				//参数写进FLASH
;;;824    			Flag_DAC_OFF=0;
;;;825    			calflag = 0;
;;;826    		}else if(range == 8)//内阻高档位低段
0007a4  2908              CMP      r1,#8
0007a6  d05c              BEQ      |L1.2146|
;;;827    		{
;;;828    			RCONT_SW = 1;
;;;829    			calflag = 1;
;;;830    			x1 = Rmon_value;
;;;831    			y1 = data;
;;;832    		}else if (range == 9)//内阻高档位高段
0007a8  2909              CMP      r1,#9
0007aa  d07a              BEQ      |L1.2210|
0007ac  e0f0              B        |L1.2448|
                  |L1.1966|
0007ae  f8cc3024          STR      r3,[r12,#0x24]        ;759  ; Run_Control
0007b2  e0c4              B        |L1.2366|
                  |L1.1972|
0007b4  8800              LDRH     r0,[r0,#0]            ;771  ; Rmon_value
0007b6  ee014a10          VMOV     s2,r4                 ;773
0007ba  eeb80a40          VCVT.F32.U32 s0,s0                 ;773
0007be  eef80a60          VCVT.F32.U32 s1,s1                 ;773
0007c2  eeb81a41          VCVT.F32.U32 s2,s2                 ;773
0007c6  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;771
0007ca  ee311a40          VSUB.F32 s2,s2,s0              ;773
0007ce  ee000a10          VMOV     s0,r0                 ;773
0007d2  eeb80a40          VCVT.F32.U32 s0,s0                 ;773
0007d6  ee700a60          VSUB.F32 s1,s0,s1              ;773
0007da  ee810a20          VDIV.F32 s0,s2,s1              ;773
0007de  ee000a90          VMOV     s1,r0                 ;774
0007e2  eeb81a60          VCVT.F32.U32 s2,s1                 ;774
0007e6  ee004a90          VMOV     s1,r4                 ;774
0007ea  eef80a60          VCVT.F32.U32 s1,s1                 ;774
0007ee  ed8b0a24          VSTR     s0,[r11,#0x90]        ;773
0007f2  ee400a41          VMLS.F32 s1,s0,s2              ;774
0007f6  edcb0a29          VSTR     s1,[r11,#0xa4]        ;774
                  |L1.2042|
0007fa  e0c6              B        |L1.2442|
                  |L1.2044|
0007fc  8800              LDRH     r0,[r0,#0]            ;787  ; Rmon_value
0007fe  ee014a10          VMOV     s2,r4                 ;789
000802  eeb80a40          VCVT.F32.U32 s0,s0                 ;789
000806  eef80a60          VCVT.F32.U32 s1,s1                 ;789
00080a  eeb81a41          VCVT.F32.U32 s2,s2                 ;789
00080e  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;787
000812  ee311a40          VSUB.F32 s2,s2,s0              ;789
000816  ee000a10          VMOV     s0,r0                 ;789
00081a  eeb80a40          VCVT.F32.U32 s0,s0                 ;789
00081e  ee700a60          VSUB.F32 s1,s0,s1              ;789
000822  ee810a20          VDIV.F32 s0,s2,s1              ;789
000826  ee000a90          VMOV     s1,r0                 ;790
00082a  eeb81a60          VCVT.F32.U32 s2,s1                 ;790
00082e  ee004a90          VMOV     s1,r4                 ;790
000832  eef80a60          VCVT.F32.U32 s1,s1                 ;790
000836  ed8b0a25          VSTR     s0,[r11,#0x94]        ;789
00083a  ee400a41          VMLS.F32 s1,s0,s2              ;790
00083e  edcb0a2a          VSTR     s1,[r11,#0xa8]        ;790
000842  e0a2              B        |L1.2442|
                  |L1.2116|
000844  7037              STRB     r7,[r6,#0]            ;796
000846  f8b90000          LDRH     r0,[r9,#0]            ;798  ; R1mon_value
00084a  f44f727a          MOV      r2,#0x3e8             ;798
00084e  f8b91000          LDRH     r1,[r9,#0]            ;798  ; R1mon_value
000852  4350              MULS     r0,r2,r0              ;798
000854  eba80101          SUB      r1,r8,r1              ;798
000858  fbb0f0f1          UDIV     r0,r0,r1              ;798
                  |L1.2140|
00085c  e9c50405          STRD     r0,r4,[r5,#0x14]      ;798
000860  e096              B        |L1.2448|
                  |L1.2146|
000862  e06a              B        |L1.2362|
                  |L1.2148|
000864  f8b91000          LDRH     r1,[r9,#0]            ;804  ; R1mon_value
000868  f44f777a          MOV      r7,#0x3e8             ;804
00086c  f8b90000          LDRH     r0,[r9,#0]            ;804  ; R1mon_value
000870  4379              MULS     r1,r7,r1              ;804
000872  ee014a10          VMOV     s2,r4                 ;806
000876  eba80000          SUB      r0,r8,r0              ;804
00087a  fbb1f0f0          UDIV     r0,r1,r0              ;804
00087e  eeb81a41          VCVT.F32.U32 s2,s2                 ;806
000882  eeb80a40          VCVT.F32.U32 s0,s0                 ;806
000886  eef80a60          VCVT.F32.U32 s1,s1                 ;806
00088a  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;804
00088e  ee311a40          VSUB.F32 s2,s2,s0              ;806
000892  ee000a10          VMOV     s0,r0                 ;806
000896  eeb80a40          VCVT.F32.U32 s0,s0                 ;806
00089a  ee700a60          VSUB.F32 s1,s0,s1              ;806
00089e  e001              B        |L1.2212|
                  |L1.2208|
0008a0  e011              B        |L1.2246|
                  |L1.2210|
0008a2  e04f              B        |L1.2372|
                  |L1.2212|
0008a4  ee810a20          VDIV.F32 s0,s2,s1              ;806
0008a8  ee000a90          VMOV     s1,r0                 ;807
0008ac  eeb81a60          VCVT.F32.U32 s2,s1                 ;807
0008b0  ee004a90          VMOV     s1,r4                 ;807
0008b4  eef80a60          VCVT.F32.U32 s1,s1                 ;807
0008b8  ed8b0a27          VSTR     s0,[r11,#0x9c]        ;806
0008bc  ee400a41          VMLS.F32 s1,s0,s2              ;807
0008c0  edcb0a2c          VSTR     s1,[r11,#0xb0]        ;807
0008c4  e061              B        |L1.2442|
                  |L1.2246|
0008c6  f8b91000          LDRH     r1,[r9,#0]            ;819  ; R2mon_value
0008ca  f44f777a          MOV      r7,#0x3e8             ;819
0008ce  f8b90000          LDRH     r0,[r9,#0]            ;819  ; R2mon_value
0008d2  4379              MULS     r1,r7,r1              ;819
0008d4  eba80000          SUB      r0,r8,r0              ;819
0008d8  fbb1f0f0          UDIV     r0,r1,r0              ;819
0008dc  ee014a10          VMOV     s2,r4                 ;821
0008e0  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;819
0008e4  eeb81a41          VCVT.F32.U32 s2,s2                 ;821
0008e8  e00a              B        |L1.2304|
0008ea  0000              DCW      0x0000
                  |L1.2284|
                          DCD      Imon_Load_value
                  |L1.2288|
                          DCD      Contr_Voltage
                  |L1.2292|
                          DCD      Rmon_value
                  |L1.2296|
                          DCD      R1mon_value
                  |L1.2300|
                          DCD      R2mon_value
                  |L1.2304|
000900  eeb80a40          VCVT.F32.U32 s0,s0                 ;821
000904  eef80a60          VCVT.F32.U32 s1,s1                 ;821
000908  ee311a40          VSUB.F32 s2,s2,s0              ;821
00090c  ee000a10          VMOV     s0,r0                 ;821
000910  eeb80a40          VCVT.F32.U32 s0,s0                 ;821
000914  ee700a60          VSUB.F32 s1,s0,s1              ;821
000918  ee810a20          VDIV.F32 s0,s2,s1              ;821
00091c  ee000a90          VMOV     s1,r0                 ;822
000920  eeb81a60          VCVT.F32.U32 s2,s1                 ;822
000924  ee004a90          VMOV     s1,r4                 ;822
000928  eef80a60          VCVT.F32.U32 s1,s1                 ;822
00092c  ed8b0a28          VSTR     s0,[r11,#0xa0]        ;821
000930  ee400a41          VMLS.F32 s1,s0,s2              ;822
000934  edcb0a2d          VSTR     s1,[r11,#0xb4]        ;822
000938  e027              B        |L1.2442|
                  |L1.2362|
00093a  f8cc7024          STR      r7,[r12,#0x24]        ;828  ; Run_Control
                  |L1.2366|
00093e  7037              STRB     r7,[r6,#0]            ;829
000940  f7ffbbcd          B        |L1.222|
                  |L1.2372|
;;;833    		{
;;;834    			
;;;835    			x2 = Rmon_value;
000944  8800              LDRH     r0,[r0,#0]  ; Rmon_value
;;;836    			y2 = data;
;;;837    			CalPara.TestR[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
000946  ee014a10          VMOV     s2,r4
00094a  eeb80a40          VCVT.F32.U32 s0,s0
00094e  eef80a60          VCVT.F32.U32 s1,s1
000952  eeb81a41          VCVT.F32.U32 s2,s2
000956  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;835
00095a  ee311a40          VSUB.F32 s2,s2,s0
00095e  ee000a10          VMOV     s0,r0
000962  eeb80a40          VCVT.F32.U32 s0,s0
000966  ee700a60          VSUB.F32 s1,s0,s1
00096a  ee810a20          VDIV.F32 s0,s2,s1
;;;838    			CalPara.OffsetR[2] = (float)y2 - CalPara.TestR[2]*(float)x2;
00096e  ee000a90          VMOV     s1,r0
000972  eeb81a60          VCVT.F32.U32 s2,s1
000976  ee004a90          VMOV     s1,r4
00097a  eef80a60          VCVT.F32.U32 s1,s1
00097e  ed8b0a26          VSTR     s0,[r11,#0x98]        ;837
000982  ee400a41          VMLS.F32 s1,s0,s2
000986  edcb0a2b          VSTR     s1,[r11,#0xac]
                  |L1.2442|
;;;839    				//参数写进FLASH
;;;840    			Flag_DAC_OFF=0;
;;;841    			calflag = 0;
00098a  f8ca2000          STR      r2,[r10,#0]  ; flagB
00098e  7033              STRB     r3,[r6,#0]
                  |L1.2448|
;;;842    		}
;;;843    		
;;;844    	}
;;;845    		
;;;846    
;;;847    	Write_Flash_Bytes();
000990  e8bd5ff0          POP      {r4-r12,lr}
000994  f7ffbffe          B.W      Write_Flash_Bytes
;;;848    //	else if(mode == 1){//测量电流
;;;849    //		if(range == 1)
;;;850    //		{
;;;851    //			x1 = abs(I_CS);
;;;852    //			y1 = data;
;;;853    //		}else if(range == 2){
;;;854    //			x2 = abs(I_CS);
;;;855    //			y2 = data;
;;;856    //			SaveDebug.TestIcal[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;857    //			SaveDebug.OffsetI[1] = (float)y2 - SaveDebug.TestIcal[1]*(float)x2;
;;;858    //		}else if(range == 4){
;;;859    //			x1 = abs(I_CS);
;;;860    //			y1 = data;
;;;861    //		}else if(range == 5){
;;;862    //			x2 = abs(I_CS);
;;;863    //			y2 = data;
;;;864    //			SaveDebug.TestIcal[4] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;865    //			SaveDebug.OffsetI[3] = (float)y2 - SaveDebug.TestIcal[4]*(float)x2;
;;;866    //		}else if(range == 0){
;;;867    //			SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[0]);
;;;868    //		}else if(range == 3){
;;;869    //			SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[0]));
;;;870    //		}
;;;871    ////		else if(range == 4){
;;;872    ////			x1 = V_CS;
;;;873    ////			y1 = data;
;;;874    ////		}else if(range == 5){
;;;875    ////			x2 = V_CS;
;;;876    ////			y2 = data;
;;;877    ////			SaveDebug.TestVcal[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;878    ////			SaveDebug.OffsetV[2] = (float)y2 - SaveDebug.TestVcal[2]*(float)x2;
;;;879    ////		}
;;;880    //		
;;;881    ////		if(range < 3)
;;;882    ////		{
;;;883    ////			if(range == 0)
;;;884    ////			{
;;;885    ////				SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[0]);
;;;886    ////			}else{
;;;887    ////				SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[1]);
;;;888    ////			}			
;;;889    ////		}else{
;;;890    ////			if(range == 3)
;;;891    ////			{
;;;892    ////				SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[0]));
;;;893    ////			}else{
;;;894    ////				SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[1]));
;;;895    ////			}
;;;896    ////		}
;;;897    ////		calflag = 1;
;;;898    //	}else if(mode == 2){//控制电压
;;;899    //		if(range == 0)
;;;900    //		{
;;;901    //			_D_ = 1000;
;;;902    //			x1 = data;
;;;903    //			y1 = _D_;
;;;904    //		}else if(range == 1){
;;;905    //			_D_ = 7000;
;;;906    //			x2 = data;
;;;907    //			y2 = _D_;
;;;908    //			SaveDebug.ControlV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;909    //			SaveDebug.OffsetCV[0] = (float)y2 - SaveDebug.ControlV[0]*(float)x2;
;;;910    //		}else if(range == 2){
;;;911    //			_D_ = 10000;
;;;912    //			x1 = data;
;;;913    //			y1 = _D_;
;;;914    //		}else if(range == 3){
;;;915    //			_D_ = 13000;
;;;916    //			x2 = data;
;;;917    //			y2 = _D_;
;;;918    //			SaveDebug.ControlV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;919    //			SaveDebug.OffsetCV[1] = (float)y2 - SaveDebug.ControlV[1]*(float)x2;
;;;920    //		}else if(range == 4){
;;;921    //			_D_ = 17000;
;;;922    //			x1 = data;
;;;923    //			y1 = _D_;
;;;924    //		}else if(range == 5){
;;;925    //			_D_ = 20000;
;;;926    //			x2 = data;
;;;927    //			y2 = _D_;
;;;928    //			SaveDebug.ControlV[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;929    //			SaveDebug.OffsetCV[2] = (float)y2 - SaveDebug.ControlV[2]*(float)x2;
;;;930    //		}else if(range == 6){
;;;931    //			_D_ = 24000;
;;;932    //			x1 = data;
;;;933    //			y1 = _D_;
;;;934    //		}else if(range == 7){
;;;935    //			_D_ = 27000;
;;;936    //			x2 = data;
;;;937    //			y2 = _D_;
;;;938    //			SaveDebug.ControlV[3] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;939    //			SaveDebug.OffsetCV[3] = (float)y2 - SaveDebug.ControlV[3]*(float)x2;
;;;940    //		}
;;;941    //		
;;;942    ////		if(range == 0)
;;;943    ////		{
;;;944    ////			SaveDebug.ControlV[range] = (float)1000/(float)data;
;;;945    ////		}else if(range == 1){
;;;946    ////			SaveDebug.ControlV[range] = (float)10000/(float)data;
;;;947    ////		}else if(range == 2){
;;;948    ////			SaveDebug.ControlV[range] = (float)15000/(float)data;
;;;949    ////		}else if(range == 3){
;;;950    ////			SaveDebug.ControlV[range] = (float)19000/(float)data;
;;;951    ////		}
;;;952    ////		calflag = 1;
;;;953    //	}else if(mode == 3){//电流清零
;;;954    //		SaveDebug.ClearI[range] = I_CS;
;;;955    ////		calflag = 1;
;;;956    //	}
;;;957    	
;;;958    }
;;;959    
                          ENDP


                          AREA ||i.DMA1_Stream3_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Stream3_IRQHandler PROC
;;;2310   
;;;2311   void DMA1_Stream3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2312   {
;;;2313   	//----DMA1 通道3完成中断，对应的中断也需要清除
;;;2314   	if(DMA_GetITStatus(DMA1_Stream3,DMA_IT_TCIF3) != RESET)   
000002  4d0c              LDR      r5,|L2.52|
000004  4c0c              LDR      r4,|L2.56|
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       DMA_GetITStatus
00000e  2800              CMP      r0,#0
000010  d00e              BEQ      |L2.48|
;;;2315       {
;;;2316   		/* 清除标志位 */
;;;2317   		DMA_ClearFlag(DMA1_Stream3,DMA_IT_TCIF3); 
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       DMA_ClearFlag
;;;2318   		/* 关闭DMA */
;;;2319   		DMA_Cmd(DMA1_Stream3,DISABLE);
00001a  2100              MOVS     r1,#0
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       DMA_Cmd
;;;2320   		
;;;2321   		while (!(USART3->SR & USART_FLAG_TC));  //硬件数据发送完毕
000022  4806              LDR      r0,|L2.60|
                  |L2.36|
000024  8801              LDRH     r1,[r0,#0]
000026  0649              LSLS     r1,r1,#25
000028  d5fc              BPL      |L2.36|
                  |L2.42|
;;;2322   		while (!(USART3->SR & USART_FLAG_TXE)); //等待数据从软件拷贝到硬件进行发送
00002a  8801              LDRH     r1,[r0,#0]
00002c  0609              LSLS     r1,r1,#24
00002e  d5fc              BPL      |L2.42|
                  |L2.48|
;;;2323   	}
;;;2324   }
000030  bd70              POP      {r4-r6,pc}
;;;2325   
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      0x18008000
                  |L2.56|
                          DCD      0x40026058
                  |L2.60|
                          DCD      0x40004800

                          AREA ||i.IsDigitChar||, CODE, READONLY, ALIGN=1

                  IsDigitChar PROC
;;;88     /*****************************************************************/
;;;89     unsigned short IsDigitChar(unsigned char a)             //如果a的值是数字的话返回1，否则返回0
000000  3830              SUBS     r0,r0,#0x30
;;;90     {
;;;91     	int b;
;;;92       if(a<0x30 || a>0x39)                     //数字1-9
000002  280a              CMP      r0,#0xa
000004  d301              BCC      |L3.10|
;;;93       	{
;;;94       	   b=0;
000006  2000              MOVS     r0,#0
;;;95       	}
;;;96       else
;;;97       	{
;;;98       	   b=1;
;;;99       	}
;;;100      return b;
;;;101    }
000008  4770              BX       lr
                  |L3.10|
00000a  2001              MOVS     r0,#1                 ;98
00000c  4770              BX       lr
;;;102    void SetPowerV(vu16 powv)
                          ENDP


                          AREA ||i.LIST_ONOFF||, CODE, READONLY, ALIGN=2

                  LIST_ONOFF PROC
;;;337    
;;;338    void LIST_ONOFF(vu8 value)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;339    {
;;;340    	switch(MODE)
000004  4a63              LDR      r2,|L4.404|
000006  ed2d8b02          VPUSH    {d8}                  ;339
00000a  f892c005          LDRB     r12,[r2,#5]  ; MODE
;;;341    	{
;;;342    		case 0://电子负载ON/OFF
;;;343    		{
;;;344    			LOAD_MODE=0;
;;;345    			GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
;;;346    			if( value == 0 ){
;;;347    				
;;;348    				Flag_Swtich_ON = 0;
00000e  4c63              LDR      r4,|L4.412|
000010  2600              MOVS     r6,#0                 ;340
000012  f8df9184          LDR      r9,|L4.408|
;;;349    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
;;;350    			}
;;;351    			else if( value == 1 ){
;;;352    				
;;;353    				Flag_Swtich_ON = 1;
000016  6821              LDR      r1,[r4,#0]
;;;354    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;355    			}
;;;356    		}break;
;;;357    		case 1://稳压电源ON/OFF
;;;358    		{
;;;359    			if( value == 0 ){
;;;360    				listsend = 3;
;;;361    				listpowwatch1 ++;
;;;362    //				PowerSwitch(0);
;;;363    //				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;364    //				Para.CSET_Voltage = 0;
;;;365    //				Para.CSET_Current = 0;
;;;366    //				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;367    			}
;;;368    			else if( value == 1 ){
;;;369    				listsend = 1;
000018  2301              MOVS     r3,#1
;;;370    				listpowwatch2 ++;
;;;371    //				PowerSwitch(1);
;;;372    //				Para.CSET_Voltage = Para.CDC_OutPut_V;
;;;373    //				Para.CSET_Current = Para.CDC_Limit_C;
;;;374    //				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;375    //				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;376    			}
;;;377    		}break;
;;;378    		case 2://过流测试ON/OFF
;;;379    		{
;;;380    			listocwatch++;
;;;381    			if( value == 0 ){
;;;382    				
;;;383    				Off_GPOI_ResetSet();
;;;384    				trig_flag_state = 0;
;;;385    				max_discahrgeNum = 0;
;;;386    				Para.CSET_Current_Laod =  Para.IR_Start_C;
00001a  4d61              LDR      r5,|L4.416|
00001c  4f61              LDR      r7,|L4.420|
00001e  f0410040          ORR      r0,r1,#0x40           ;353
000022  f1bc0f05          CMP      r12,#5                ;340
000026  d225              BCS      |L4.116|
000028  e8dff00c          TBB      [pc,r12]              ;340
00002c  03192e7b          DCB      0x03,0x19,0x2e,0x7b
000030  9800              DCB      0x98,0x00
000032  f8c96018          STR      r6,[r9,#0x18]         ;344  ; Run_Control
000036  f44f5180          MOV      r1,#0x1000            ;345
00003a  4638              MOV      r0,r7                 ;345
00003c  f7fffffe          BL       GPIO_ResetBits
000040  f89d0008          LDRB     r0,[sp,#8]            ;346
000044  b138              CBZ      r0,|L4.86|
000046  f89d0008          LDRB     r0,[sp,#8]            ;351
00004a  2801              CMP      r0,#1                 ;351
00004c  d112              BNE      |L4.116|
00004e  6820              LDR      r0,[r4,#0]            ;353  ; flagA
000050  f0400040          ORR      r0,r0,#0x40           ;353
000054  e089              B        |L4.362|
                  |L4.86|
000056  6820              LDR      r0,[r4,#0]            ;348  ; flagA
000058  f0200040          BIC      r0,r0,#0x40           ;348
00005c  e090              B        |L4.384|
00005e  f89d0008          LDRB     r0,[sp,#8]            ;359
000062  b158              CBZ      r0,|L4.124|
000064  f89d0008          LDRB     r0,[sp,#8]            ;368
000068  2801              CMP      r0,#1                 ;368
00006a  d103              BNE      |L4.116|
00006c  7253              STRB     r3,[r2,#9]            ;369
00006e  7b10              LDRB     r0,[r2,#0xc]          ;370  ; listpowwatch2
000070  1c40              ADDS     r0,r0,#1              ;370
000072  7310              STRB     r0,[r2,#0xc]          ;370
                  |L4.116|
;;;387    			}
;;;388    			else if( value == 1 ){
;;;389    				LOAD_I_SW = 1;
;;;390    				testv = DISS_Voltage;
;;;391    				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
;;;392    				Para.CSET_Current = 1000;
;;;393    				Para.CSET_Current_Laod =  Para.IR_Start_C;
;;;394    				shorttime = 0;
;;;395    				old_I = 0;
;;;396    				max_discahrgeNum = 0;
;;;397    				trig_flag_state = 1;
;;;398    				C_DISCHARGE = 1;        	
;;;399    				Flag_Swtich_ON = 1;
;;;400    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
;;;401    				max_discahrgeNum = (float)Para.IR_Start_C / 1000;				
;;;402    //				testv = DISS_Voltage;
;;;403    //				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
;;;404    //				Para.CSET_Current = 1000;
;;;405    //				Para.CSET_Current_Laod = Para.IR_Start_C;
;;;406    //				shorttime = 0;
;;;407    //				old_I = 0;
;;;408    //				max_discahrgeNum = 0;
;;;409    //				trig_flag_state = 1;
;;;410    //				C_DISCHARGE = 1;
;;;411    //				Flag_Swtich_ON = 1;
;;;412    //				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
;;;413    //				max_discahrgeNum = (float)Para.IR_Start_C / 1000;
;;;414    			}
;;;415    		}break;
;;;416    		case 3://过充测试ON/OFF
;;;417    		{
;;;418    			if( value == 0 ){
;;;419    				
;;;420    				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;421    				Para.CSET_Voltage = 0;
;;;422    				Para.CSET_Current = 0;
;;;423    				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;424    			}
;;;425    			else if( value == 1 ){
;;;426    				Para.CSET_Voltage = Para.CDC_OutPut_V;
;;;427    				Para.CSET_Current = Para.CDC_Limit_C;
;;;428    				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;429    				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;430    			}
;;;431    		}break;
;;;432    		case 4://电子负载ON/OFF
;;;433    		{
;;;434    			if( value == 0 ){
;;;435    				
;;;436    				Flag_Swtich_ON = 0;
;;;437    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
;;;438    			}
;;;439    			else if( value == 1 ){
;;;440    				
;;;441    				Flag_Swtich_ON = 1;
;;;442    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;443    			}
;;;444    		}break;
;;;445    	}
;;;446    }
000074  ecbd8b02          VPOP     {d8}
000078  e8bd8ff8          POP      {r3-r11,pc}
                  |L4.124|
00007c  2003              MOVS     r0,#3                 ;360
00007e  7250              STRB     r0,[r2,#9]            ;360
000080  7ad0              LDRB     r0,[r2,#0xb]          ;361  ; listpowwatch1
000082  1c40              ADDS     r0,r0,#1              ;361
000084  72d0              STRB     r0,[r2,#0xb]          ;361
000086  e7f5              B        |L4.116|
000088  7a91              LDRB     r1,[r2,#0xa]          ;380  ; listocwatch
00008a  1c49              ADDS     r1,r1,#1              ;380
00008c  7291              STRB     r1,[r2,#0xa]          ;380
00008e  f89d1008          LDRB     r1,[sp,#8]            ;381
000092  f8dfa114          LDR      r10,|L4.424|
000096  ed9f8a45          VLDR     s16,|L4.428|
00009a  f8df8114          LDR      r8,|L4.432|
00009e  b3b1              CBZ      r1,|L4.270|
0000a0  f89d1008          LDRB     r1,[sp,#8]            ;388
0000a4  2901              CMP      r1,#1                 ;388
0000a6  d1e5              BNE      |L4.116|
0000a8  f8c93020          STR      r3,[r9,#0x20]         ;389  ; Run_Control
0000ac  4941              LDR      r1,|L4.436|
0000ae  ed910a00          VLDR     s0,[r1,#0]            ;390
0000b2  4941              LDR      r1,|L4.440|
0000b4  ed810a00          VSTR     s0,[r1,#0]            ;390
0000b8  eddf8a40          VLDR     s17,|L4.444|
0000bc  ee200a28          VMUL.F32 s0,s0,s17             ;391
0000c0  eebd0ac0          VCVT.S32.F32 s0,s0                 ;391
0000c4  ee101a10          VMOV     r1,s0                 ;391
0000c8  f501717a          ADD      r1,r1,#0x3e8          ;391
0000cc  60a9              STR      r1,[r5,#8]            ;391  ; Para
0000ce  f44f717a          MOV      r1,#0x3e8             ;392
0000d2  60e9              STR      r1,[r5,#0xc]          ;392  ; Para
0000d4  6c69              LDR      r1,[r5,#0x44]         ;393  ; Para
0000d6  6169              STR      r1,[r5,#0x14]         ;393  ; Para
0000d8  4939              LDR      r1,|L4.448|
0000da  700e              STRB     r6,[r1,#0]            ;394
0000dc  4939              LDR      r1,|L4.452|
0000de  4646              MOV      r6,r8                 ;396
0000e0  ed818a00          VSTR     s16,[r1,#0]           ;395
0000e4  ed888a00          VSTR     s16,[r8,#0]           ;396
0000e8  f88a3000          STRB     r3,[r10,#0]           ;397
0000ec  4936              LDR      r1,|L4.456|
0000ee  700b              STRB     r3,[r1,#0]            ;398
0000f0  6020              STR      r0,[r4,#0]            ;400  ; flagA
0000f2  2180              MOVS     r1,#0x80              ;400
0000f4  4638              MOV      r0,r7                 ;400
0000f6  f7fffffe          BL       GPIO_ResetBits
0000fa  6c68              LDR      r0,[r5,#0x44]         ;401  ; Para
0000fc  ee000a10          VMOV     s0,r0                 ;401
000100  eeb80a40          VCVT.F32.U32 s0,s0                 ;401
000104  eec00a28          VDIV.F32 s1,s0,s17             ;401
000108  edc60a00          VSTR     s1,[r6,#0]            ;401
00010c  e7b2              B        |L4.116|
                  |L4.270|
00010e  e7ff              B        |L4.272|
                  |L4.272|
000110  f7fffffe          BL       Off_GPOI_ResetSet
000114  f88a6000          STRB     r6,[r10,#0]           ;384
000118  ed888a00          VSTR     s16,[r8,#0]           ;385
00011c  6c68              LDR      r0,[r5,#0x44]         ;386  ; Para
00011e  6168              STR      r0,[r5,#0x14]         ;386  ; Para
000120  e7a8              B        |L4.116|
000122  f89d0008          LDRB     r0,[sp,#8]            ;418
000126  4c29              LDR      r4,|L4.460|
000128  b178              CBZ      r0,|L4.330|
00012a  f89d0008          LDRB     r0,[sp,#8]            ;425
00012e  2801              CMP      r0,#1                 ;425
000130  d1a0              BNE      |L4.116|
000132  f8b50064          LDRH     r0,[r5,#0x64]         ;426  ; Para
000136  60a8              STR      r0,[r5,#8]            ;426  ; Para
000138  f8b50066          LDRH     r0,[r5,#0x66]         ;427  ; Para
00013c  60e8              STR      r0,[r5,#0xc]          ;427  ; Para
00013e  2104              MOVS     r1,#4                 ;428
000140  4620              MOV      r0,r4                 ;428
000142  f7fffffe          BL       GPIO_SetBits
000146  2102              MOVS     r1,#2                 ;429
000148  e01c              B        |L4.388|
                  |L4.330|
00014a  2102              MOVS     r1,#2                 ;420
00014c  4638              MOV      r0,r7                 ;420
00014e  f7fffffe          BL       GPIO_ResetBits
000152  60ae              STR      r6,[r5,#8]            ;421  ; Para
000154  60ee              STR      r6,[r5,#0xc]          ;422  ; Para
000156  2104              MOVS     r1,#4                 ;423
000158  4620              MOV      r0,r4                 ;423
00015a  e009              B        |L4.368|
00015c  f89d2008          LDRB     r2,[sp,#8]            ;434
000160  b162              CBZ      r2,|L4.380|
000162  f89d1008          LDRB     r1,[sp,#8]            ;439
000166  2901              CMP      r1,#1                 ;439
000168  d184              BNE      |L4.116|
                  |L4.362|
00016a  6020              STR      r0,[r4,#0]            ;442  ; flagA
00016c  2180              MOVS     r1,#0x80              ;442
00016e  4638              MOV      r0,r7                 ;442
                  |L4.368|
000170  ecbd8b02          VPOP     {d8}                  ;442
000174  e8bd4ff8          POP      {r3-r11,lr}           ;442
000178  f7ffbffe          B.W      GPIO_ResetBits
                  |L4.380|
00017c  f0210040          BIC      r0,r1,#0x40           ;436
                  |L4.384|
000180  2180              MOVS     r1,#0x80              ;349
000182  6020              STR      r0,[r4,#0]            ;349  ; flagA
                  |L4.388|
000184  4638              MOV      r0,r7                 ;437
000186  ecbd8b02          VPOP     {d8}                  ;437
00018a  e8bd4ff8          POP      {r3-r11,lr}           ;437
00018e  f7ffbffe          B.W      GPIO_SetBits
;;;447    
                          ENDP

000192  0000              DCW      0x0000
                  |L4.404|
                          DCD      ||.data||
                  |L4.408|
                          DCD      Run_Control
                  |L4.412|
                          DCD      flagA
                  |L4.416|
                          DCD      Para
                  |L4.420|
                          DCD      0x40020800
                  |L4.424|
                          DCD      trig_flag_state
                  |L4.428|
0001ac  00000000          DCFS     0x00000000 ; 0
                  |L4.432|
                          DCD      max_discahrgeNum
                  |L4.436|
                          DCD      DISS_Voltage
                  |L4.440|
                          DCD      testv
                  |L4.444|
0001bc  447a0000          DCFS     0x447a0000 ; 1000
                  |L4.448|
                          DCD      shorttime
                  |L4.452|
                          DCD      old_I
                  |L4.456|
                          DCD      C_DISCHARGE
                  |L4.460|
                          DCD      0x40021000

                          AREA ||i.MODE_ONOFF||, CODE, READONLY, ALIGN=2

                  MODE_ONOFF PROC
;;;263    
;;;264    void MODE_ONOFF(vu8 value)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;265    {
;;;266    	switch(MODE)
000004  4a41              LDR      r2,|L5.268|
000006  ed2d8b02          VPUSH    {d8}                  ;265
00000a  7951              LDRB     r1,[r2,#5]  ; MODE
;;;267    	{
;;;268    		case 0://电子负载ON/OFF
;;;269    		{
;;;270    			if( value == 0 ){
;;;271    				
;;;272    				Flag_Swtich_ON = 0;
00000c  4d40              LDR      r5,|L5.272|
;;;273    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
00000e  4841              LDR      r0,|L5.276|
000010  b3e9              CBZ      r1,|L5.142|
;;;274    			}
;;;275    			else if( value == 1 ){
;;;276    				
;;;277    				Flag_Swtich_ON = 1;
;;;278    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;279    			}
;;;280    		}break;
;;;281    		case 1://稳压电源ON/OFF
;;;282    		{
;;;283    			sendwait = 1;
000012  2601              MOVS     r6,#1
000014  2901              CMP      r1,#1                 ;266
000016  d06d              BEQ      |L5.244|
000018  2902              CMP      r1,#2                 ;266
00001a  d14a              BNE      |L5.178|
;;;284    //			if( value == 0 ){
;;;285    //				sendwait = 1;
;;;286    ////				PowerSwitch(0);//关闭电源输出
;;;287    ////				Delay_ms(1000);
;;;288    ////				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;289    ////				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;290    //////				Delay_ms(1000);
;;;291    ////				Para.CSET_Voltage = 0;
;;;292    ////				Para.CSET_Current = 0;
;;;293    //////				Delay_ms(1000);
;;;294    ////				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;295    //			}
;;;296    //			else if( value == 1 ){
;;;297    ////				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;298    //////				Delay_ms(1000);
;;;299    ////				PowerSwitch(1);//打开电源输出
;;;300    //				
;;;301    //////				
;;;302    ////				Para.CSET_Voltage = Para.POWER_OutPut_V;
;;;303    ////				Para.CSET_Current = Para.POWER_Limit_C;
;;;304    //////				Delay_ms(1000);
;;;305    ////				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;306    //				
;;;307    //			}
;;;308    		}break;
;;;309    		case 2://过流测试ON/OFF
;;;310    		{
;;;311    			if( value == 0 ){
00001c  f89d1008          LDRB     r1,[sp,#8]
;;;312    				
;;;313    				Off_GPOI_ResetSet();
;;;314    				trig_flag_state = 0;
000020  f8df90f4          LDR      r9,|L5.280|
;;;315    				max_discahrgeNum = 0;
000024  ed9f8a3d          VLDR     s16,|L5.284|
000028  f8df80f4          LDR      r8,|L5.288|
;;;316    				Para.CSET_Current_Laod =  Para.IR_Start_C;
00002c  4c3d              LDR      r4,|L5.292|
00002e  2700              MOVS     r7,#0                 ;311
000030  b371              CBZ      r1,|L5.144|
;;;317    			}
;;;318    			else if( value == 1 ){
000032  f89d1008          LDRB     r1,[sp,#8]
000036  2901              CMP      r1,#1
000038  d13b              BNE      |L5.178|
;;;319    				LOAD_MODE = 0;
00003a  493b              LDR      r1,|L5.296|
00003c  618f              STR      r7,[r1,#0x18]  ; Run_Control
;;;320    				GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
00003e  1481              ASRS     r1,r0,#18
000040  4682              MOV      r10,r0
000042  f7fffffe          BL       GPIO_ResetBits
;;;321    				Para.CSET_Current_Laod =  Para.IR_Start_C;
000046  6c60              LDR      r0,[r4,#0x44]  ; Para
000048  6160              STR      r0,[r4,#0x14]  ; Para
;;;322    				testv = DISS_Voltage;
00004a  4838              LDR      r0,|L5.300|
;;;323    				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
00004c  eddf8a39          VLDR     s17,|L5.308|
000050  ed900a00          VLDR     s0,[r0,#0]            ;322
000054  4836              LDR      r0,|L5.304|
000056  ed800a00          VSTR     s0,[r0,#0]            ;322
00005a  ee200a28          VMUL.F32 s0,s0,s17
00005e  eebd0ac0          VCVT.S32.F32 s0,s0
000062  ee100a10          VMOV     r0,s0
000066  f500707a          ADD      r0,r0,#0x3e8
00006a  60a0              STR      r0,[r4,#8]  ; Para
;;;324    				Para.CSET_Current = 1000;
00006c  f44f707a          MOV      r0,#0x3e8
000070  60e0              STR      r0,[r4,#0xc]  ; Para
;;;325    				shorttime = 0;
000072  4831              LDR      r0,|L5.312|
000074  7007              STRB     r7,[r0,#0]
;;;326    				old_I = 0;
000076  4831              LDR      r0,|L5.316|
;;;327    				max_discahrgeNum = 0;
000078  4647              MOV      r7,r8
00007a  ed808a00          VSTR     s16,[r0,#0]           ;326
00007e  ed888a00          VSTR     s16,[r8,#0]
;;;328    				trig_flag_state = 1;
000082  f8896000          STRB     r6,[r9,#0]
;;;329    				C_DISCHARGE = 1;        	
000086  482e              LDR      r0,|L5.320|
000088  7006              STRB     r6,[r0,#0]
;;;330    				Flag_Swtich_ON = 1;
00008a  6828              LDR      r0,[r5,#0]  ; flagA
00008c  e001              B        |L5.146|
                  |L5.142|
00008e  e014              B        |L5.186|
                  |L5.144|
000090  e032              B        |L5.248|
                  |L5.146|
000092  f0400040          ORR      r0,r0,#0x40
;;;331    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
000096  6028              STR      r0,[r5,#0]  ; flagA
000098  2180              MOVS     r1,#0x80
00009a  4650              MOV      r0,r10
00009c  f7fffffe          BL       GPIO_ResetBits
;;;332    				max_discahrgeNum = (float)Para.IR_Start_C / 1000;
0000a0  6c60              LDR      r0,[r4,#0x44]  ; Para
0000a2  ee000a10          VMOV     s0,r0
0000a6  eeb80a40          VCVT.F32.U32 s0,s0
0000aa  eec00a28          VDIV.F32 s1,s0,s17
0000ae  edc70a00          VSTR     s1,[r7,#0]
                  |L5.178|
;;;333    			}
;;;334    		}break;
;;;335    	}
;;;336    }
0000b2  ecbd8b02          VPOP     {d8}
0000b6  e8bd8ff8          POP      {r3-r11,pc}
                  |L5.186|
0000ba  f89d2008          LDRB     r2,[sp,#8]            ;270
0000be  4914              LDR      r1,|L5.272|
0000c0  6809              LDR      r1,[r1,#0]            ;272
0000c2  b16a              CBZ      r2,|L5.224|
0000c4  f89d2008          LDRB     r2,[sp,#8]            ;275
0000c8  2a01              CMP      r2,#1                 ;275
0000ca  d1f2              BNE      |L5.178|
0000cc  f0410140          ORR      r1,r1,#0x40           ;277
0000d0  6029              STR      r1,[r5,#0]            ;278  ; flagA
0000d2  2180              MOVS     r1,#0x80              ;278
0000d4  ecbd8b02          VPOP     {d8}                  ;278
0000d8  e8bd4ff8          POP      {r3-r11,lr}           ;278
0000dc  f7ffbffe          B.W      GPIO_ResetBits
                  |L5.224|
0000e0  f0210140          BIC      r1,r1,#0x40           ;272
0000e4  6029              STR      r1,[r5,#0]            ;273  ; flagA
0000e6  2180              MOVS     r1,#0x80              ;273
0000e8  ecbd8b02          VPOP     {d8}                  ;273
0000ec  e8bd4ff8          POP      {r3-r11,lr}           ;273
0000f0  f7ffbffe          B.W      GPIO_SetBits
                  |L5.244|
0000f4  7216              STRB     r6,[r2,#8]            ;283
0000f6  e7dc              B        |L5.178|
                  |L5.248|
0000f8  f7fffffe          BL       Off_GPOI_ResetSet
0000fc  f8897000          STRB     r7,[r9,#0]            ;314
000100  ed888a00          VSTR     s16,[r8,#0]           ;315
000104  6c60              LDR      r0,[r4,#0x44]         ;316  ; Para
000106  6160              STR      r0,[r4,#0x14]         ;316  ; Para
000108  e7d3              B        |L5.178|
;;;337    
                          ENDP

00010a  0000              DCW      0x0000
                  |L5.268|
                          DCD      ||.data||
                  |L5.272|
                          DCD      flagA
                  |L5.276|
                          DCD      0x40020800
                  |L5.280|
                          DCD      trig_flag_state
                  |L5.284|
00011c  00000000          DCFS     0x00000000 ; 0
                  |L5.288|
                          DCD      max_discahrgeNum
                  |L5.292|
                          DCD      Para
                  |L5.296|
                          DCD      Run_Control
                  |L5.300|
                          DCD      DISS_Voltage
                  |L5.304|
                          DCD      testv
                  |L5.308|
000134  447a0000          DCFS     0x447a0000 ; 1000
                  |L5.312|
                          DCD      shorttime
                  |L5.316|
                          DCD      old_I
                  |L5.320|
                          DCD      C_DISCHARGE

                          AREA ||i.MODE_PARASET||, CODE, READONLY, ALIGN=2

                  MODE_PARASET PROC
;;;447    
;;;448    void MODE_PARASET(vu8 value)
000000  b570              PUSH     {r4-r6,lr}
;;;449    {
;;;450    	switch(MODE)
000002  4a17              LDR      r2,|L6.96|
000004  7953              LDRB     r3,[r2,#5]  ; MODE
000006  2100              MOVS     r1,#0
;;;451    	{
;;;452    		case 0://电子负载
;;;453    		{
;;;454    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;455    //			mainswitch = 0;
;;;456    //			sendwait = 3;
;;;457    			LOAD_MODE = Para.CLOAD_MODE;
000008  4816              LDR      r0,|L6.100|
;;;458    			Para.CSET_Current_Laod = Para.LOAD_C;
;;;459    			Para.CSET_Voltage_Laod = Para.LOAD_V;
;;;460    			if(Para.CSET_Current_Laod > 20000)
;;;461    			{
;;;462    				LOAD_I_SW = 1;
00000a  2401              MOVS     r4,#1
00000c  4d16              LDR      r5,|L6.104|
00000e  2b05              CMP      r3,#5                 ;450
000010  d211              BCS      |L6.54|
000012  e8dff003          TBB      [pc,r3]               ;450
000016  0322              DCB      0x03,0x22
000018  131b2200          DCB      0x13,0x1b,0x22,0x00
00001c  6982              LDR      r2,[r0,#0x18]         ;457  ; Para
00001e  61aa              STR      r2,[r5,#0x18]         ;457  ; Run_Control
000020  6dc2              LDR      r2,[r0,#0x5c]         ;458  ; Para
000022  6142              STR      r2,[r0,#0x14]         ;458  ; Para
000024  f8b02060          LDRH     r2,[r0,#0x60]         ;459  ; Para
000028  6102              STR      r2,[r0,#0x10]         ;459  ; Para
00002a  6940              LDR      r0,[r0,#0x14]         ;460  ; Para
00002c  f6446220          MOV      r2,#0x4e20            ;460
000030  4290              CMP      r0,r2                 ;460
000032  d901              BLS      |L6.56|
                  |L6.52|
000034  622c              STR      r4,[r5,#0x20]  ; Run_Control
                  |L6.54|
;;;463    			}else{
;;;464    				LOAD_I_SW = 0;
;;;465    			}
;;;466    		}break;
;;;467    		case 1://稳压电源
;;;468    		{
;;;469    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;470    //			mainswitch = 0;
;;;471    //			if(USART3_Recive_flg == 1)
;;;472    //			{
;;;473    				sendwait = 1;
;;;474    //			}else{
;;;475    //				SetPowerMode();
;;;476    //			}
;;;477    //			Para.CSET_Voltage = Para.POWER_OutPut_V;
;;;478    //			SetPowerV(Para.POWER_OutPut_V);
;;;479    //	//			Para.CSET_Current = Para.POWER_Limit_C;
;;;480    //			SetPowerC(Para.POWER_Limit_C);
;;;481    		}break;
;;;482    		case 2://放电过流测试
;;;483    		{
;;;484    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;485    //			mainswitch = 0;
;;;486    //			sendwait = 3;
;;;487    			
;;;488    			LOAD_MODE = 0;
;;;489    			LOAD_I_SW = 1;
;;;490    			Para.CSET_Current = 1000;
;;;491    			Para.CSET_Current_Laod = Para.IR_Start_C;
;;;492    		}break;
;;;493    		case 3://列表
;;;494    		{
;;;495    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;496    //			mainswitch = 0;
;;;497    //			sendwait = 3;
;;;498    			
;;;499    			LOAD_MODE = 0;
;;;500    			GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
;;;501    			LOAD_I_SW = 1;
;;;502    //			Para.CSET_Current = 1000;
;;;503    		}break;
;;;504    		case 4://充电过流测试
;;;505    		{
;;;506    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;507    //			mainswitch = 0;
;;;508    //			sendwait = 3;
;;;509    			
;;;510    			sendwait = 1;
;;;511    		}break;
;;;512    	}
;;;513    }
000036  bd70              POP      {r4-r6,pc}
                  |L6.56|
000038  6229              STR      r1,[r5,#0x20]         ;464  ; Run_Control
00003a  bd70              POP      {r4-r6,pc}
00003c  61a9              STR      r1,[r5,#0x18]         ;488  ; Run_Control
00003e  622c              STR      r4,[r5,#0x20]         ;489  ; Run_Control
000040  f44f717a          MOV      r1,#0x3e8             ;490
000044  60c1              STR      r1,[r0,#0xc]          ;490  ; Para
000046  6c41              LDR      r1,[r0,#0x44]         ;491  ; Para
000048  6141              STR      r1,[r0,#0x14]         ;491  ; Para
00004a  bd70              POP      {r4-r6,pc}
00004c  61a9              STR      r1,[r5,#0x18]         ;499  ; Run_Control
00004e  f44f5180          MOV      r1,#0x1000            ;500
000052  4806              LDR      r0,|L6.108|
000054  f7fffffe          BL       GPIO_ResetBits
000058  e7ec              B        |L6.52|
00005a  7214              STRB     r4,[r2,#8]            ;510
00005c  bd70              POP      {r4-r6,pc}
;;;514    
                          ENDP

00005e  0000              DCW      0x0000
                  |L6.96|
                          DCD      ||.data||
                  |L6.100|
                          DCD      Para
                  |L6.104|
                          DCD      Run_Control
                  |L6.108|
                          DCD      0x40020800

                          AREA ||i.PowerSwitch||, CODE, READONLY, ALIGN=2

                  PowerSwitch PROC
;;;187    
;;;188    void PowerSwitch(vu8 bit)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;189    {
;;;190    	MasterSendbuf[0] = 0x01;
000002  4c0f              LDR      r4,|L7.64|
000004  2001              MOVS     r0,#1
;;;191    	MasterSendbuf[1] = 0x06;
000006  2106              MOVS     r1,#6
000008  7020              STRB     r0,[r4,#0]            ;190
00000a  7061              STRB     r1,[r4,#1]
;;;192    	MasterSendbuf[2] = 0x00;
00000c  2100              MOVS     r1,#0
00000e  70a1              STRB     r1,[r4,#2]
;;;193    	MasterSendbuf[3] = 0x01;
000010  70e0              STRB     r0,[r4,#3]
;;;194    	MasterSendbuf[4] = (u8)(bit>>8);
000012  f89d0000          LDRB     r0,[sp,#0]
000016  7121              STRB     r1,[r4,#4]
;;;195    	MasterSendbuf[5] = (u8)(bit);
000018  f89d0000          LDRB     r0,[sp,#0]
00001c  7160              STRB     r0,[r4,#5]
;;;196    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00001e  2106              MOVS     r1,#6
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       Hardware_CRC
000026  71a0              STRB     r0,[r4,#6]
;;;197    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000028  2106              MOVS     r1,#6
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       Hardware_CRC
000030  0a00              LSRS     r0,r0,#8
000032  71e0              STRB     r0,[r4,#7]
;;;198    	USART3WriteDMA(8);
000034  e8bd4038          POP      {r3-r5,lr}
000038  2008              MOVS     r0,#8
00003a  f7ffbffe          B.W      USART3WriteDMA
;;;199    }
;;;200    
                          ENDP

00003e  0000              DCW      0x0000
                  |L7.64|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.ReadPowData||, CODE, READONLY, ALIGN=2

                  ReadPowData PROC
;;;200    
;;;201    void ReadPowData(void)
000000  b510              PUSH     {r4,lr}
;;;202    {
;;;203    	MasterSendbuf[0] = 0x01;
000002  4c0e              LDR      r4,|L8.60|
000004  2001              MOVS     r0,#1
;;;204    	MasterSendbuf[1] = 0x03;
;;;205    	MasterSendbuf[2] = 0x00;
;;;206    	MasterSendbuf[3] = 0x10;
000006  2110              MOVS     r1,#0x10
000008  7020              STRB     r0,[r4,#0]            ;203
00000a  2003              MOVS     r0,#3                 ;204
00000c  7060              STRB     r0,[r4,#1]            ;204
00000e  2000              MOVS     r0,#0                 ;205
000010  70a0              STRB     r0,[r4,#2]            ;205
000012  70e1              STRB     r1,[r4,#3]
;;;207    	MasterSendbuf[4] = 0x00;
000014  7120              STRB     r0,[r4,#4]
;;;208    	MasterSendbuf[5] = 0x02;
000016  2002              MOVS     r0,#2
000018  7160              STRB     r0,[r4,#5]
;;;209    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00001a  2106              MOVS     r1,#6
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       Hardware_CRC
000022  71a0              STRB     r0,[r4,#6]
;;;210    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000024  2106              MOVS     r1,#6
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       Hardware_CRC
00002c  0a00              LSRS     r0,r0,#8
00002e  71e0              STRB     r0,[r4,#7]
;;;211    	USART3WriteDMA(8);
000030  e8bd4010          POP      {r4,lr}
000034  2008              MOVS     r0,#8
000036  f7ffbffe          B.W      USART3WriteDMA
;;;212    }
;;;213    
                          ENDP

00003a  0000              DCW      0x0000
                  |L8.60|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.SerialRemoteHandleL||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  SerialRemoteHandleL PROC
;;;997    
;;;998    u16 SerialRemoteHandleL(u8 len,char* buf)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;999    {
000004  ed2d8b02          VPUSH    {d8}
000008  b0b3              SUB      sp,sp,#0xcc
00000a  4605              MOV      r5,r0
;;;1000   
;;;1001     
;;;1002       u16 currCharNum;
;;;1003       u32 temp1;
;;;1004     u8 Gmode_Vale;
;;;1005   	u8 i,j;
;;;1006   	
;;;1007   	u8 addr = 0;
00000c  2000              MOVS     r0,#0
00000e  460c              MOV      r4,r1                 ;999
;;;1008   	char str[200]={0};
000010  9032              STR      r0,[sp,#0xc8]
000012  21c8              MOVS     r1,#0xc8
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       __aeabi_memclr4
;;;1009   	int cmd_flag=255;
;;;1010   	u8 templen =0;
;;;1011   	u8 tmpFg;
;;;1012   	u8 LM_S_Vale,LOW_I_Vale,H_L_Vale,SWITCH_Vale;
;;;1013   	u16 I_ADC_Vale,V_ADC_Vale;
;;;1014   	int32_t V_CS_Vale,I_CS_Vale;
;;;1015   	float Lvl_Vale,fadcx,fsingal, fVale;
;;;1016    
;;;1017   //	u8 len = 11;
;;;1018   	u8 pntlen = 0;
;;;1019   
;;;1020   
;;;1021   	
;;;1022   	currCharNum=0;
;;;1023   	if((buf[currCharNum] != ChrStartR) || (buf[len-2] != ChrEndR)||(buf[len-1] != ChrEndS))
00001a  7820              LDRB     r0,[r4,#0]
00001c  283c              CMP      r0,#0x3c
00001e  d108              BNE      |L9.50|
000020  1960              ADDS     r0,r4,r5
000022  f8101c02          LDRB     r1,[r0,#-2]
000026  290d              CMP      r1,#0xd
000028  d103              BNE      |L9.50|
00002a  f8100c01          LDRB     r0,[r0,#-1]
00002e  280a              CMP      r0,#0xa
000030  d001              BEQ      |L9.54|
                  |L9.50|
;;;1024       {
;;;1025   		return SetErr_ACK(buf,addr ,CMD_ERR); 
000032  2202              MOVS     r2,#2
000034  e14e              B        |L9.724|
                  |L9.54|
;;;1026       } 
;;;1027   	str[currCharNum++] = ChrStartR;
000036  213c              MOVS     r1,#0x3c
000038  f88d1000          STRB     r1,[sp,#0]
;;;1028   	sprintf(&str[currCharNum],"%d",addr);
00003c  a1fe              ADR      r1,|L9.1080|
00003e  f10d0001          ADD      r0,sp,#1
000042  9a32              LDR      r2,[sp,#0xc8]
000044  f7fffffe          BL       __2sprintf
;;;1029   	strncat(str,"/",1);
000048  2201              MOVS     r2,#1
00004a  a1fc              ADR      r1,|L9.1084|
00004c  4668              MOV      r0,sp
00004e  f7fffffe          BL       strncat
;;;1030   	currCharNum =strlen(str);
000052  4668              MOV      r0,sp
000054  f7fffffe          BL       strlen
000058  fa1ffa80          UXTH     r10,r0
;;;1031   	cmd_flag=strncmp(buf,str,strlen(str));
00005c  4668              MOV      r0,sp
00005e  f7fffffe          BL       strlen
000062  4602              MOV      r2,r0
000064  4669              MOV      r1,sp
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       strncmp
;;;1032   	//testflag = cmd_flag;
;;;1033   	if(0!=cmd_flag)
00006c  2800              CMP      r0,#0
00006e  d1e0              BNE      |L9.50|
;;;1034   	{
;;;1035   		return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1036   		
;;;1037   	}
;;;1038   	for (j=0;j<CmdNumb;j++)
;;;1039       {
;;;1040   		templen = strlen(CmdStr[j]);
000070  f8dfb3cc          LDR      r11,|L9.1088|
000074  4680              MOV      r8,r0                 ;1038
;;;1041   		cmd_flag=strncmp(&buf[currCharNum],CmdStr[j],templen);
000076  eb04050a          ADD      r5,r4,r10
                  |L9.122|
00007a  eb0801c8          ADD      r1,r8,r8,LSL #3       ;1040
00007e  eb01000b          ADD      r0,r1,r11             ;1040
000082  4606              MOV      r6,r0                 ;1040
000084  f7fffffe          BL       strlen
000088  f00009ff          AND      r9,r0,#0xff           ;1040
00008c  4631              MOV      r1,r6                 ;1040
00008e  4628              MOV      r0,r5                 ;1040
000090  464a              MOV      r2,r9
000092  f7fffffe          BL       strncmp
;;;1042   	    if(0==cmd_flag)
000096  b138              CBZ      r0,|L9.168|
000098  f1080001          ADD      r0,r8,#1              ;1038
00009c  f00008ff          AND      r8,r0,#0xff           ;1038
0000a0  f1b80f13          CMP      r8,#0x13              ;1038
0000a4  d3e9              BCC      |L9.122|
0000a6  e7c4              B        |L9.50|
                  |L9.168|
;;;1043   	    {
;;;1044   
;;;1045   		  buf[0] = ChrStartS;
0000a8  203e              MOVS     r0,#0x3e
0000aa  7020              STRB     r0,[r4,#0]
;;;1046   		  currCharNum+=templen;
0000ac  eb0a0009          ADD      r0,r10,r9
0000b0  b285              UXTH     r5,r0
;;;1047   		  switch(j)
;;;1048             {
;;;1049   			case 0:
;;;1050   				pntlen = 5;    //
;;;1051   				if(buf[currCharNum]=='?')
;;;1052   				{
;;;1053   
;;;1054   					
;;;1055   					sprintf(&buf[currCharNum],"%05d",Para.CVoltage);
;;;1056   					currCharNum+=pntlen;
;;;1057   					
;;;1058   					buf[currCharNum++]=(',');
;;;1059   					sprintf(&buf[currCharNum],"%06d",Para.CLaod_Current);
;;;1060   					currCharNum+=6;
;;;1061   					
;;;1062   					buf[currCharNum++]=(',');
;;;1063   					sprintf(&buf[currCharNum],"%05d",Para.CPOW_Voltage);
;;;1064   					currCharNum+=pntlen;
;;;1065   					
;;;1066   					buf[currCharNum++]=(',');
;;;1067   					sprintf(&buf[currCharNum],"%05d",Para.CCurrent);
;;;1068   					currCharNum+=pntlen;
;;;1069   					
;;;1070   					buf[currCharNum++]=(',');
;;;1071   					sprintf(&buf[currCharNum],"%05d",Para.CR_VLUE);
;;;1072   					currCharNum+=pntlen;
;;;1073   					
;;;1074   					buf[currCharNum++]=(',');
;;;1075   					sprintf(&buf[currCharNum],"%04d",Para.CR1_VLUE);
;;;1076   					currCharNum+=4;
;;;1077   					
;;;1078   					buf[currCharNum++]=(',');
;;;1079   					sprintf(&buf[currCharNum],"%04d",Para.CR2_VLUE);
;;;1080   					currCharNum+=4;
;;;1081   
;;;1082   					buf[currCharNum++]=(',');
;;;1083   					sprintf(&buf[currCharNum],"%06d",(int)(max_discahrgeNum*1000));
;;;1084   					currCharNum+=6;
;;;1085   					
;;;1086   					buf[currCharNum++]=(',');
;;;1087   					sprintf(&buf[currCharNum],"%03d",shorttime);
;;;1088   					currCharNum+=3;
;;;1089   					
;;;1090   					buf[currCharNum++]=(',');
;;;1091   					sprintf(&buf[currCharNum],"%1d",mainswitch);
0000b2  f8dfb38c          LDR      r11,|L9.1088|
;;;1092   					currCharNum+=1;
;;;1093   					
;;;1094   					buf[currCharNum++]=(',');
;;;1095   					sprintf(&buf[currCharNum],"%1d",finishflag);
;;;1096   					currCharNum+=1;
;;;1097   					
;;;1098   					buf[currCharNum++]=(',');
;;;1099   					sprintf(&buf[currCharNum],"%1d",lockflag);
;;;1100   					currCharNum+=1;
;;;1101   					
;;;1102   					buf[currCharNum++]=(',');
;;;1103   					sprintf(&buf[currCharNum],"%2d",version);
;;;1104   					currCharNum+=2;
;;;1105   					
;;;1106   					buf[currCharNum++]=(',');
;;;1107   					sprintf(&buf[currCharNum],"%03d",Temperature);
;;;1108   					currCharNum+=3;
;;;1109   					
;;;1110   					buf[currCharNum++]=(',');
;;;1111   					sprintf(&buf[currCharNum],"%1d",overflag);
;;;1112   					currCharNum+=1;
;;;1113   //					buf[currCharNum++]=(',');
;;;1114   //					sprintf(&buf[currCharNum],"%d",H_L);
;;;1115   //					currCharNum++;
;;;1116   					
;;;1117   //					buf[currCharNum++]=(',');
;;;1118   //					sprintf(&buf[currCharNum],"%d",LM_S);
;;;1119   //					currCharNum++;
;;;1120   					
;;;1121   //					buf[currCharNum++]=(',');
;;;1122   //					sprintf(&buf[currCharNum],"%02d",(int)temperature);
;;;1123   //					currCharNum+=2;
;;;1124   					
;;;1125   				  buf[currCharNum++ ] = ChrEndR;
;;;1126   				  buf[currCharNum++ ] = ChrEndS;
;;;1127   				}
;;;1128   				else
;;;1129   				{
;;;1130   					return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1131   				}
;;;1132   				break;
;;;1133   			case 1:
;;;1134   				pntlen = 1;
;;;1135   				if(buf[currCharNum]=='?')
;;;1136   				{
;;;1137   					  sprintf(&buf[currCharNum],"%1d",MODE);
;;;1138   				    currCharNum+=pntlen;
;;;1139   				    buf[currCharNum ++] = ChrEndS;
;;;1140   					
;;;1141   				}
;;;1142   				else
;;;1143   				{
;;;1144   					pntlen = 1;				
;;;1145   					for(i=0,temp1=0;i<pntlen;i++)
;;;1146   					{
;;;1147   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1148   					}		                   
;;;1149   //					if(temp1>1)
;;;1150   //					{
;;;1151   //						return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1152   //					}
;;;1153   					MODE=temp1;
;;;1154   //					Off_GPOI_ResetSet();
;;;1155   					OnOff_GPOI_ResetSet( 2, 0 );
;;;1156   					mainswitch = 0;
;;;1157   					sendwait = 3;
;;;1158   					MODE_PARASET(MODE);
;;;1159   	//				Change_LM_Val(LM_S_Vale);
;;;1160   					buf[currCharNum++] = ChrEndR;
;;;1161   				}
;;;1162   				break;
;;;1163   				case 2:
;;;1164   				pntlen = 1;
;;;1165   				if(buf[currCharNum]=='?')
;;;1166   				{
;;;1167   					sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
0000b6  48e3              LDR      r0,|L9.1092|
0000b8  f8dfa38c          LDR      r10,|L9.1096|
0000bc  f04f090a          MOV      r9,#0xa               ;1023
0000c0  f1ab0b58          SUB      r11,r11,#0x58         ;1091
0000c4  f06f062f          MVN      r6,#0x2f              ;1147
0000c8  f1b80f13          CMP      r8,#0x13              ;1047
0000cc  d2b1              BCS      |L9.50|
0000ce  e8dff008          TBB      [pc,r8]               ;1047
0000d2  0bbb              DCB      0x0b,0xbb
0000d4  e4fdfcfb          DCB      0xe4,0xfd,0xfc,0xfb
0000d8  0a0a0a0a          DCB      0x0a,0x0a,0x0a,0x0a
0000dc  0a0afaf9          DCB      0x0a,0x0a,0xfa,0xf9
0000e0  f80a0a0a          DCB      0xf8,0x0a,0x0a,0x0a
0000e4  f700              DCB      0xf7,0x00
0000e6  e7a4              B        |L9.50|
0000e8  5d60              LDRB     r0,[r4,r5]            ;1051
0000ea  283f              CMP      r0,#0x3f              ;1051
0000ec  d1a1              BNE      |L9.50|
0000ee  f8da202c          LDR      r2,[r10,#0x2c]        ;1055  ; Para
0000f2  4656              MOV      r6,r10                ;1055
0000f4  1960              ADDS     r0,r4,r5              ;1055
0000f6  a1d5              ADR      r1,|L9.1100|
0000f8  f7fffffe          BL       __2sprintf
0000fc  1d6d              ADDS     r5,r5,#5              ;1055
0000fe  b2a8              UXTH     r0,r5                 ;1056
000100  252c              MOVS     r5,#0x2c              ;1058
000102  5425              STRB     r5,[r4,r0]            ;1058
000104  1c40              ADDS     r0,r0,#1              ;1058
000106  6b72              LDR      r2,[r6,#0x34]         ;1059  ; Para
000108  b287              UXTH     r7,r0                 ;1058
00010a  19e0              ADDS     r0,r4,r7              ;1059
00010c  a1d1              ADR      r1,|L9.1108|
00010e  f7fffffe          BL       __2sprintf
000112  1dbf              ADDS     r7,r7,#6              ;1059
000114  b2b8              UXTH     r0,r7                 ;1060
000116  5425              STRB     r5,[r4,r0]            ;1062
000118  1c40              ADDS     r0,r0,#1              ;1062
00011a  6ab2              LDR      r2,[r6,#0x28]         ;1063  ; Para
00011c  b287              UXTH     r7,r0                 ;1062
00011e  19e0              ADDS     r0,r4,r7              ;1063
000120  a1ca              ADR      r1,|L9.1100|
000122  f7fffffe          BL       __2sprintf
000126  1d7f              ADDS     r7,r7,#5              ;1063
000128  b2b8              UXTH     r0,r7                 ;1064
00012a  5425              STRB     r5,[r4,r0]            ;1066
00012c  1c40              ADDS     r0,r0,#1              ;1066
00012e  6b32              LDR      r2,[r6,#0x30]         ;1067  ; Para
000130  b287              UXTH     r7,r0                 ;1066
000132  19e0              ADDS     r0,r4,r7              ;1067
000134  a1c5              ADR      r1,|L9.1100|
000136  f7fffffe          BL       __2sprintf
00013a  1d7f              ADDS     r7,r7,#5              ;1067
00013c  b2b8              UXTH     r0,r7                 ;1068
00013e  5425              STRB     r5,[r4,r0]            ;1070
000140  1c40              ADDS     r0,r0,#1              ;1070
000142  6bb2              LDR      r2,[r6,#0x38]         ;1071  ; Para
000144  b287              UXTH     r7,r0                 ;1070
000146  19e0              ADDS     r0,r4,r7              ;1071
000148  a1c0              ADR      r1,|L9.1100|
00014a  f7fffffe          BL       __2sprintf
00014e  1d7f              ADDS     r7,r7,#5              ;1071
000150  b2b8              UXTH     r0,r7                 ;1072
000152  5425              STRB     r5,[r4,r0]            ;1074
000154  1c40              ADDS     r0,r0,#1              ;1074
000156  6bf2              LDR      r2,[r6,#0x3c]         ;1075  ; Para
000158  b287              UXTH     r7,r0                 ;1074
00015a  19e0              ADDS     r0,r4,r7              ;1075
00015c  a1bf              ADR      r1,|L9.1116|
00015e  f7fffffe          BL       __2sprintf
000162  1d3f              ADDS     r7,r7,#4              ;1075
000164  b2b8              UXTH     r0,r7                 ;1076
000166  5425              STRB     r5,[r4,r0]            ;1078
000168  1c40              ADDS     r0,r0,#1              ;1078
00016a  6c32              LDR      r2,[r6,#0x40]         ;1079  ; Para
00016c  b287              UXTH     r7,r0                 ;1078
00016e  19e0              ADDS     r0,r4,r7              ;1079
000170  a1ba              ADR      r1,|L9.1116|
000172  f7fffffe          BL       __2sprintf
000176  1d3f              ADDS     r7,r7,#4              ;1079
000178  b2b8              UXTH     r0,r7                 ;1080
00017a  5425              STRB     r5,[r4,r0]            ;1082
00017c  1c40              ADDS     r0,r0,#1              ;1082
00017e  b286              UXTH     r6,r0                 ;1082
000180  48b8              LDR      r0,|L9.1124|
000182  ed900a00          VLDR     s0,[r0,#0]            ;1083
000186  eddf0ab8          VLDR     s1,|L9.1128|
00018a  19a0              ADDS     r0,r4,r6              ;1083
00018c  a1b1              ADR      r1,|L9.1108|
00018e  ee200a20          VMUL.F32 s0,s0,s1              ;1083
000192  eebd0ac0          VCVT.S32.F32 s0,s0                 ;1083
000196  ee102a10          VMOV     r2,s0                 ;1083
00019a  f7fffffe          BL       __2sprintf
00019e  1db6              ADDS     r6,r6,#6              ;1083
0001a0  b2b0              UXTH     r0,r6                 ;1084
0001a2  49b2              LDR      r1,|L9.1132|
0001a4  5425              STRB     r5,[r4,r0]            ;1086
0001a6  1c40              ADDS     r0,r0,#1              ;1086
0001a8  b286              UXTH     r6,r0                 ;1086
0001aa  780a              LDRB     r2,[r1,#0]            ;1087  ; shorttime
0001ac  19a0              ADDS     r0,r4,r6              ;1087
0001ae  a1b0              ADR      r1,|L9.1136|
0001b0  f7fffffe          BL       __2sprintf
0001b4  1cf6              ADDS     r6,r6,#3              ;1087
0001b6  b2b0              UXTH     r0,r6                 ;1088
0001b8  5425              STRB     r5,[r4,r0]            ;1090
0001ba  1c40              ADDS     r0,r0,#1              ;1090
0001bc  b286              UXTH     r6,r0                 ;1090
0001be  f89b2006          LDRB     r2,[r11,#6]           ;1091  ; mainswitch
0001c2  19a0              ADDS     r0,r4,r6              ;1091
0001c4  a1ac              ADR      r1,|L9.1144|
0001c6  f7fffffe          BL       __2sprintf
0001ca  1c76              ADDS     r6,r6,#1              ;1091
0001cc  b2b0              UXTH     r0,r6                 ;1092
0001ce  49ab              LDR      r1,|L9.1148|
0001d0  5425              STRB     r5,[r4,r0]            ;1094
0001d2  1c40              ADDS     r0,r0,#1              ;1094
0001d4  b286              UXTH     r6,r0                 ;1094
0001d6  780a              LDRB     r2,[r1,#0]            ;1095  ; finishflag
0001d8  19a0              ADDS     r0,r4,r6              ;1095
0001da  a1a7              ADR      r1,|L9.1144|
0001dc  f7fffffe          BL       __2sprintf
0001e0  1c76              ADDS     r6,r6,#1              ;1095
0001e2  b2b0              UXTH     r0,r6                 ;1096
0001e4  49a6              LDR      r1,|L9.1152|
0001e6  5425              STRB     r5,[r4,r0]            ;1098
0001e8  1c40              ADDS     r0,r0,#1              ;1098
0001ea  b286              UXTH     r6,r0                 ;1098
0001ec  780a              LDRB     r2,[r1,#0]            ;1099  ; lockflag
0001ee  19a0              ADDS     r0,r4,r6              ;1099
0001f0  a1a1              ADR      r1,|L9.1144|
0001f2  f7fffffe          BL       __2sprintf
0001f6  1c76              ADDS     r6,r6,#1              ;1099
0001f8  b2b0              UXTH     r0,r6                 ;1100
0001fa  49a2              LDR      r1,|L9.1156|
0001fc  5425              STRB     r5,[r4,r0]            ;1102
0001fe  1c40              ADDS     r0,r0,#1              ;1102
000200  b286              UXTH     r6,r0                 ;1102
000202  780a              LDRB     r2,[r1,#0]            ;1103  ; version
000204  19a0              ADDS     r0,r4,r6              ;1103
000206  a1a0              ADR      r1,|L9.1160|
000208  f7fffffe          BL       __2sprintf
00020c  1cb6              ADDS     r6,r6,#2              ;1103
00020e  b2b0              UXTH     r0,r6                 ;1104
000210  499e              LDR      r1,|L9.1164|
000212  5425              STRB     r5,[r4,r0]            ;1106
000214  1c40              ADDS     r0,r0,#1              ;1106
000216  b286              UXTH     r6,r0                 ;1106
000218  f9b12000          LDRSH    r2,[r1,#0]            ;1107  ; Temperature
00021c  19a0              ADDS     r0,r4,r6              ;1107
00021e  a194              ADR      r1,|L9.1136|
000220  f7fffffe          BL       __2sprintf
000224  1cf6              ADDS     r6,r6,#3              ;1107
000226  b2b0              UXTH     r0,r6                 ;1108
000228  4999              LDR      r1,|L9.1168|
00022a  5425              STRB     r5,[r4,r0]            ;1110
00022c  1c40              ADDS     r0,r0,#1              ;1110
00022e  b285              UXTH     r5,r0                 ;1110
000230  780a              LDRB     r2,[r1,#0]            ;1111  ; overflag
000232  1960              ADDS     r0,r4,r5              ;1111
000234  a190              ADR      r1,|L9.1144|
000236  f7fffffe          BL       __2sprintf
00023a  1c6d              ADDS     r5,r5,#1              ;1111
00023c  b2a8              UXTH     r0,r5                 ;1112
00023e  210d              MOVS     r1,#0xd               ;1125
000240  5421              STRB     r1,[r4,r0]            ;1125
000242  1c40              ADDS     r0,r0,#1              ;1125
000244  b280              UXTH     r0,r0                 ;1125
000246  e023              B        |L9.656|
000248  5d60              LDRB     r0,[r4,r5]            ;1135
00024a  2201              MOVS     r2,#1                 ;1134
00024c  283f              CMP      r0,#0x3f              ;1135
00024e  d01a              BEQ      |L9.646|
000250  2000              MOVS     r0,#0                 ;1145
000252  4601              MOV      r1,r0                 ;1145
                  |L9.596|
000254  5d63              LDRB     r3,[r4,r5]            ;1147
000256  eb010181          ADD      r1,r1,r1,LSL #2       ;1147
00025a  1c6d              ADDS     r5,r5,#1              ;1147
00025c  1c40              ADDS     r0,r0,#1              ;1147
00025e  eb060141          ADD      r1,r6,r1,LSL #1       ;1147
000262  b2c0              UXTB     r0,r0                 ;1145
000264  4419              ADD      r1,r1,r3              ;1147
000266  b2ad              UXTH     r5,r5                 ;1147
000268  4290              CMP      r0,r2                 ;1145
00026a  d3f3              BCC      |L9.596|
00026c  465e              MOV      r6,r11                ;1153
00026e  f88b1005          STRB     r1,[r11,#5]           ;1153
000272  2100              MOVS     r1,#0                 ;1155
000274  2002              MOVS     r0,#2                 ;1155
000276  f7fffffe          BL       OnOff_GPOI_ResetSet
00027a  2000              MOVS     r0,#0                 ;1156
00027c  71b0              STRB     r0,[r6,#6]            ;1156
00027e  2003              MOVS     r0,#3                 ;1157
000280  7230              STRB     r0,[r6,#8]            ;1157
000282  7970              LDRB     r0,[r6,#5]            ;1158  ; MODE
000284  e212              B        |L9.1708|
                  |L9.646|
000286  f89b2005          LDRB     r2,[r11,#5]           ;1137  ; MODE
00028a  1960              ADDS     r0,r4,r5              ;1137
00028c  a17a              ADR      r1,|L9.1144|
00028e  e02a              B        |L9.742|
                  |L9.656|
000290  f8049000          STRB     r9,[r4,r0]            ;1126
000294  1c40              ADDS     r0,r0,#1              ;1126
000296  b285              UXTH     r5,r0                 ;1126
000298  e3fe              B        |L9.2712|
00029a  5d61              LDRB     r1,[r4,r5]            ;1165
00029c  2201              MOVS     r2,#1                 ;1164
00029e  293f              CMP      r1,#0x3f              ;1165
                  |L9.672|
0002a0  d07e              BEQ      |L9.928|
;;;1168   				    currCharNum+=pntlen;
;;;1169   				    buf[currCharNum ++] = ChrEndS;
;;;1170   					
;;;1171   				}
;;;1172   				else
;;;1173   				{
;;;1174   					pntlen = 1;				
;;;1175   					for(i=0,temp1=0;i<pntlen;i++)
0002a2  2100              MOVS     r1,#0
0002a4  4608              MOV      r0,r1
                  |L9.678|
;;;1176   					{
;;;1177   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
0002a6  5d63              LDRB     r3,[r4,r5]
0002a8  eb000080          ADD      r0,r0,r0,LSL #2
0002ac  1c6d              ADDS     r5,r5,#1
0002ae  1c49              ADDS     r1,r1,#1
0002b0  eb060040          ADD      r0,r6,r0,LSL #1
0002b4  b2c9              UXTB     r1,r1                 ;1175
0002b6  4418              ADD      r0,r0,r3
0002b8  b2ad              UXTH     r5,r5
0002ba  4291              CMP      r1,r2                 ;1175
0002bc  d3f3              BCC      |L9.678|
;;;1178   					}		                   
;;;1179   					if(temp1>1)
0002be  e006              B        |L9.718|
0002c0  e3eb              B        |L9.2714|
0002c2  e3eb              B        |L9.2716|
0002c4  e3eb              B        |L9.2718|
0002c6  e3eb              B        |L9.2720|
0002c8  e3eb              B        |L9.2722|
0002ca  e1f2              B        |L9.1714|
0002cc  e01a              B        |L9.772|
                  |L9.718|
0002ce  2801              CMP      r0,#1
0002d0  d90d              BLS      |L9.750|
                  |L9.722|
;;;1180   					{
;;;1181   						return SetErr_ACK(buf, addr ,PARA_ERR);
0002d2  2201              MOVS     r2,#1
                  |L9.724|
;;;1182   					}
;;;1183   //					MODE=temp1;
;;;1184   					
;;;1185   					
;;;1186   					mainswitch = temp1;
;;;1187   //						Para.CSET_Voltage = 5000;
;;;1188   //						Para.CSET_Current = 1000;
;;;1189   					
;;;1190   						
;;;1191   					MODE_ONOFF(mainswitch);
;;;1192   	//				Change_LM_Val(LM_S_Vale);
;;;1193   					buf[currCharNum++] = ChrEndR;
;;;1194   		        }
;;;1195   				break;
;;;1196   				case 3:
;;;1197   				pntlen = 1;
;;;1198   				if(buf[currCharNum]=='?')
;;;1199   				{
;;;1200   					  sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1201   				    currCharNum+=pntlen;
;;;1202   				    buf[currCharNum ++] = ChrEndS;
;;;1203   					
;;;1204   				}
;;;1205   				else
;;;1206   				{
;;;1207   					if(currCharNum == 0x0b)
;;;1208   					{						
;;;1209   						for(i=0,temp1=0;i<5;i++)
;;;1210   						{
;;;1211   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1212   						}
;;;1213   					}		
;;;1214   					Para.IR_Start_C = temp1;//起始电流
;;;1215   					temp1 = 0;
;;;1216   					
;;;1217   					if(buf[currCharNum++] == ',')
;;;1218   					{
;;;1219   						for(i=0,temp1=0;i<5;i++)
;;;1220   						{
;;;1221   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1222   						}
;;;1223   					}	
;;;1224   					Para.IR_Step_C = temp1;//步进电流
;;;1225   					temp1 = 0;
;;;1226   					 
;;;1227   					if(buf[currCharNum++] == ',')
;;;1228   					{
;;;1229   						for(i=0,temp1=0;i<5;i++)
;;;1230   						{
;;;1231   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1232   						}
;;;1233   					}	
;;;1234   					Para.IR_Threshold_V = temp1;//门槛电压
;;;1235   					temp1 = 0;
;;;1236   					
;;;1237   					if(buf[currCharNum++] == ',')
;;;1238   					{
;;;1239   						for(i=0,temp1=0;i<3;i++)
;;;1240   						{
;;;1241   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1242   						}
;;;1243   					}	
;;;1244   					Para.IR_Step_Time = temp1;//步进时间
;;;1245   					temp1 = 0;
;;;1246   					
;;;1247   					if(buf[currCharNum++] == ',')
;;;1248   					{
;;;1249   						for(i=0,temp1=0;i<5;i++)
;;;1250   						{
;;;1251   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1252   						}
;;;1253   					}	
;;;1254   					Para.POWER_OutPut_V = temp1;//电源电压
;;;1255   					temp1 = 0;
;;;1256   					
;;;1257   					if(buf[currCharNum++] == ',')
;;;1258   					{
;;;1259   						for(i=0,temp1=0;i<5;i++)
;;;1260   						{
;;;1261   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1262   						}
;;;1263   					}	
;;;1264   					Para.POWER_Limit_C = temp1;//电源电流
;;;1265   					temp1 = 0;
;;;1266   					
;;;1267   					if(buf[currCharNum++] == ',')
;;;1268   					{
;;;1269   						for(i=0,temp1=0;i<5;i++)
;;;1270   						{
;;;1271   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1272   						}
;;;1273   					}	
;;;1274   					Para.POWER_Cutoff_C = temp1;//设置充电截止电流
;;;1275   					temp1 = 0;
;;;1276   					
;;;1277   					if(buf[currCharNum++] == ',')
;;;1278   					{
;;;1279   						for(i=0,temp1=0;i<5;i++)
;;;1280   						{
;;;1281   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1282   						}
;;;1283   					}	
;;;1284   					Para.LOAD_V = temp1;//负载电压
;;;1285   					temp1 = 0;
;;;1286   					
;;;1287   					if(buf[currCharNum++] == ',')
;;;1288   					{
;;;1289   						for(i=0,temp1=0;i<5;i++)
;;;1290   						{
;;;1291   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1292   						}
;;;1293   					}	
;;;1294   					Para.LOAD_C = temp1;//负载电流
;;;1295   					temp1 = 0;
;;;1296   					
;;;1297   					if(buf[currCharNum++] == ',')
;;;1298   					{
;;;1299   						for(i=0,temp1=0;i<5;i++)
;;;1300   						{
;;;1301   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1302   						}
;;;1303   					}	
;;;1304   					Para.LOAD_Cutoff_V = temp1;//设置负载截止电压
;;;1305   					temp1 = 0;
;;;1306   					
;;;1307   					if(buf[currCharNum++] == ',')
;;;1308   					{
;;;1309   						for(i=0,temp1=0;i<5;i++)
;;;1310   						{
;;;1311   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1312   						}
;;;1313   					}	
;;;1314   					Para.CDC_OutPut_V = temp1;//设置容量测试充电电压
;;;1315   					temp1 = 0;
;;;1316   					
;;;1317   					if(buf[currCharNum++] == ',')
;;;1318   					{
;;;1319   						for(i=0,temp1=0;i<5;i++)
;;;1320   						{
;;;1321   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1322   						}
;;;1323   					}	
;;;1324   					Para.CDC_Limit_C = temp1;//设置容量测试充电限制电流
;;;1325   					temp1 = 0;
;;;1326   					
;;;1327   					if(buf[currCharNum++] == ',')
;;;1328   					{
;;;1329   						for(i=0,temp1=0;i<5;i++)
;;;1330   						{
;;;1331   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1332   						}
;;;1333   					}	
;;;1334   					Para.CDC_Ccutoff_V = temp1;//设置容量测试充电截止电压
;;;1335   					temp1 = 0;
;;;1336   					
;;;1337   					if(buf[currCharNum++] == ',')
;;;1338   					{
;;;1339   						for(i=0,temp1=0;i<5;i++)
;;;1340   						{
;;;1341   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1342   						}
;;;1343   					}	
;;;1344   					Para.CDC_Ccutoff_C = temp1;//设置容量测试充电截止电流
;;;1345   					temp1 = 0;
;;;1346   					
;;;1347   					if(buf[currCharNum++] == ',')
;;;1348   					{
;;;1349   						for(i=0,temp1=0;i<5;i++)
;;;1350   						{
;;;1351   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1352   						}
;;;1353   					}	
;;;1354   					Para.CDC_Load_C = temp1;//设置容量测试放电电流
;;;1355   					temp1 = 0;
;;;1356   					
;;;1357   					if(buf[currCharNum++] == ',')
;;;1358   					{
;;;1359   						for(i=0,temp1=0;i<5;i++)
;;;1360   						{
;;;1361   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1362   						}
;;;1363   					}	
;;;1364   					Para.CDC_Dcutoff_V = temp1;//设置容量测试放电截止电压
;;;1365   					temp1 = 0;
;;;1366   					
;;;1367   					if(buf[currCharNum++] == ',')
;;;1368   					{
;;;1369   						for(i=0,temp1=0;i<3;i++)
;;;1370   						{
;;;1371   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1372   						}
;;;1373   					}	
;;;1374   					Para.CDC_Cycle_Time = temp1;//循环次数
;;;1375   					temp1 = 0;
;;;1376   					
;;;1377   					if(buf[currCharNum++] == ',')
;;;1378   					{
;;;1379   						for(i=0,temp1=0;i<3;i++)
;;;1380   						{
;;;1381   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1382   						}
;;;1383   					}	
;;;1384   					if(MODE == 0)
;;;1385   					{
;;;1386   						Para.CLOAD_MODE = temp1;//负载模式
;;;1387   					}
;;;1388   					temp1 = 0;
;;;1389   //					MODE_PARASET(MODE);
;;;1390   					
;;;1391   					if(buf[currCharNum++] == ',')
;;;1392   					{
;;;1393   						for(i=0,temp1=0;i<3;i++)
;;;1394   						{
;;;1395   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1396   						}
;;;1397   					}	
;;;1398   					Rraly = temp1;//内阻档位
;;;1399   					temp1 = 0;
;;;1400   					
;;;1401   					if(buf[currCharNum++] == ',')
;;;1402   					{
;;;1403   						for(i=0,temp1=0;i<3;i++)
;;;1404   						{
;;;1405   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1406   						}
;;;1407   					}	
;;;1408   					Para.ACT_DELAY = temp1;//激活延时
;;;1409   					temp1 = 0;
;;;1410   					
;;;1411   					MODE_PARASET(MODE);
;;;1412   					
;;;1413   					 buf[currCharNum++] = ChrEndR;
;;;1414   		        }
;;;1415   				break;
;;;1416   				case 4:
;;;1417   				pntlen = 1;
;;;1418   				if(buf[currCharNum]=='?')
;;;1419   				{
;;;1420   					  sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1421   				    currCharNum+=pntlen;
;;;1422   				    buf[currCharNum ++] = ChrEndS;
;;;1423   					
;;;1424   				}
;;;1425   				else
;;;1426   				{
;;;1427   					if(currCharNum == 0x0b)
;;;1428   					{						
;;;1429   						for(i=0,temp1=0;i<2;i++)
;;;1430   						{
;;;1431   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1432   						}
;;;1433   					}
;;;1434   					MODE = temp1;//项目
;;;1435   					temp1 = 0;
;;;1436   					
;;;1437   					if(MODE == 0)
;;;1438   					{
;;;1439   						if(buf[currCharNum++] == ',')
;;;1440   						{
;;;1441   							for(i=0,temp1=0;i<5;i++)
;;;1442   							{
;;;1443   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1444   							}
;;;1445   						}	
;;;1446   						
;;;1447   						temp1 = 0;
;;;1448   						
;;;1449   						if(buf[currCharNum++] == ',')
;;;1450   						{
;;;1451   							for(i=0,temp1=0;i<5;i++)
;;;1452   							{
;;;1453   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1454   							}
;;;1455   						}	
;;;1456   						Para.CSET_Current_Laod = temp1;//负载电流
;;;1457   						temp1 = 0;
;;;1458   						
;;;1459   	
;;;1460   						if(Para.CSET_Current_Laod > 20000)
;;;1461   						{
;;;1462   							LOAD_I_SW = 1;
;;;1463   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1464   						}else{
;;;1465   							LOAD_I_SW = 0;
;;;1466   							GPIO_SetBits(GPIOC,GPIO_Pin_11);//电流测量为低档位
;;;1467   						}
;;;1468   						if(buf[currCharNum++] == ',')
;;;1469   						{
;;;1470   							for(i=0,temp1=0;i<1;i++)
;;;1471   							{
;;;1472   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1473   							}
;;;1474   						}
;;;1475   						mainswitch = temp1;//开关
;;;1476   						if(mainswitch == 0)
;;;1477   						{
;;;1478   							LOAD_I_SW = 1;
;;;1479   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1480   						}
;;;1481   					}else if(MODE == 1){
;;;1482   						if(buf[currCharNum++] == ',')
;;;1483   						{
;;;1484   							for(i=0,temp1=0;i<5;i++)
;;;1485   							{
;;;1486   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1487   							}
;;;1488   						}	
;;;1489   						Para.CDC_OutPut_V = temp1;//电源电压
;;;1490   						temp1 = 0;
;;;1491   						
;;;1492   						if(buf[currCharNum++] == ',')
;;;1493   						{
;;;1494   							for(i=0,temp1=0;i<5;i++)
;;;1495   							{
;;;1496   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1497   							}
;;;1498   						}	
;;;1499   						Para.CDC_Limit_C = temp1;//电源电流
;;;1500   						temp1 = 0;
;;;1501   						
;;;1502   						if(buf[currCharNum++] == ',')
;;;1503   						{
;;;1504   							for(i=0,temp1=0;i<1;i++)
;;;1505   							{
;;;1506   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1507   							}
;;;1508   						}
;;;1509   						mainswitch = temp1;//开关
;;;1510   					}else if(MODE == 2){
;;;1511   						LOAD_I_SW = 1;
;;;1512   						GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1513   						if(buf[currCharNum++] == ',')
;;;1514   						{
;;;1515   							for(i=0,temp1=0;i<5;i++)
;;;1516   							{
;;;1517   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1518   							}
;;;1519   						}	
;;;1520   						Para.IR_Start_C = temp1;//起始电流
;;;1521   						temp1 = 0;
;;;1522   						
;;;1523   						if(buf[currCharNum++] == ',')
;;;1524   						{
;;;1525   							for(i=0,temp1=0;i<5;i++)
;;;1526   							{
;;;1527   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1528   							}
;;;1529   						}	
;;;1530   						Para.IR_Step_C = temp1;//步进电流
;;;1531   						temp1 = 0;
;;;1532   						
;;;1533   						if(buf[currCharNum++] == ',')
;;;1534   						{
;;;1535   							for(i=0,temp1=0;i<1;i++)
;;;1536   							{
;;;1537   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1538   							}
;;;1539   						}
;;;1540   						mainswitch = temp1;//开关
;;;1541   						
;;;1542   						if(mainswitch == 1)
;;;1543   						{
;;;1544   							finishflag = 0;
;;;1545   						}
;;;1546   					}else if(MODE == 3){
;;;1547   						if(buf[currCharNum++] == ',')
;;;1548   						{
;;;1549   							for(i=0,temp1=0;i<5;i++)
;;;1550   							{
;;;1551   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1552   							}
;;;1553   						}	
;;;1554   						Para.CDC_OutPut_V = temp1;//电源电压
;;;1555   						temp1 = 0;
;;;1556   						
;;;1557   						
;;;1558   						if(buf[currCharNum++] == ',')
;;;1559   						{
;;;1560   							for(i=0,temp1=0;i<5;i++)
;;;1561   							{
;;;1562   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1563   							}
;;;1564   						}	
;;;1565   						Para.CDC_Limit_C = temp1;//电源电流
;;;1566   						temp1 = 0;
;;;1567   						
;;;1568   						if(buf[currCharNum++] == ',')
;;;1569   						{
;;;1570   							for(i=0,temp1=0;i<1;i++)
;;;1571   							{
;;;1572   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1573   							}
;;;1574   						}
;;;1575   						mainswitch = temp1;//开关
;;;1576   						
;;;1577   						
;;;1578   					}else if(MODE == 4){
;;;1579   						if(buf[currCharNum++] == ',')
;;;1580   						{
;;;1581   							for(i=0,temp1=0;i<5;i++)
;;;1582   							{
;;;1583   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1584   							}
;;;1585   						}	
;;;1586   						
;;;1587   						temp1 = 0;
;;;1588   						
;;;1589   						if(buf[currCharNum++] == ',')
;;;1590   						{
;;;1591   							for(i=0,temp1=0;i<5;i++)
;;;1592   							{
;;;1593   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1594   							}
;;;1595   						}	
;;;1596   						Para.CSET_Current_Laod = temp1;//负载电流
;;;1597   						temp1 = 0;
;;;1598   						
;;;1599   	
;;;1600   						if(Para.CSET_Current_Laod > 20000)
;;;1601   						{
;;;1602   							LOAD_I_SW = 1;
;;;1603   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1604   						}else{
;;;1605   							LOAD_I_SW = 0;
;;;1606   							GPIO_SetBits(GPIOC,GPIO_Pin_11);//电流测量为低档位
;;;1607   						}
;;;1608   						if(buf[currCharNum++] == ',')
;;;1609   						{
;;;1610   							for(i=0,temp1=0;i<1;i++)
;;;1611   							{
;;;1612   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1613   							}
;;;1614   						}
;;;1615   						mainswitch = temp1;//开关
;;;1616   						if(mainswitch == 0)
;;;1617   						{
;;;1618   							LOAD_I_SW = 1;
;;;1619   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1620   						}
;;;1621   					}else if(MODE == 5){
;;;1622   						if(buf[currCharNum++] == ',')
;;;1623   						{
;;;1624   							for(i=0,temp1=0;i<5;i++)
;;;1625   							{
;;;1626   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1627   							}
;;;1628   						}	
;;;1629   						temp1 = 0;
;;;1630   						
;;;1631   						if(buf[currCharNum++] == ',')
;;;1632   						{
;;;1633   							for(i=0,temp1=0;i<5;i++)
;;;1634   							{
;;;1635   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1636   							}
;;;1637   						}	
;;;1638   						temp1 = 0;
;;;1639   						
;;;1640   						if(buf[currCharNum++] == ',')
;;;1641   						{
;;;1642   							for(i=0,temp1=0;i<1;i++)
;;;1643   							{
;;;1644   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1645   							}
;;;1646   						}
;;;1647   						mainswitch = temp1;//开关
;;;1648   						if(mainswitch == 0)
;;;1649   						{
;;;1650   							mainswitch = 0;
;;;1651   						}
;;;1652   					}else if(MODE == 6){
;;;1653   						if(buf[currCharNum++] == ',')
;;;1654   						{
;;;1655   							for(i=0,temp1=0;i<5;i++)
;;;1656   							{
;;;1657   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1658   							}
;;;1659   						}	
;;;1660   						temp1 = 0;
;;;1661   						
;;;1662   						if(buf[currCharNum++] == ',')
;;;1663   						{
;;;1664   							for(i=0,temp1=0;i<5;i++)
;;;1665   							{
;;;1666   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1667   							}
;;;1668   						}	
;;;1669   						temp1 = 0;
;;;1670   						
;;;1671   						if(buf[currCharNum++] == ',')
;;;1672   						{
;;;1673   							for(i=0,temp1=0;i<1;i++)
;;;1674   							{
;;;1675   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1676   							}
;;;1677   						}
;;;1678   						mainswitch = temp1;//开关
;;;1679   					}
;;;1680   					
;;;1681   					temp1 = 0;
;;;1682   //					MODE_PARASET(MODE);
;;;1683   					Off_GPOI_ResetSet();
;;;1684   					LIST_ONOFF(mainswitch);
;;;1685   					buf[currCharNum++] = ChrEndR;
;;;1686   		        }
;;;1687   				break;
;;;1688   				case 12://电压校准
;;;1689   				{
;;;1690   					pntlen = 8;
;;;1691   					if(buf[currCharNum]=='?')
;;;1692   					{
;;;1693   						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1694   						sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1695   						currCharNum+=pntlen;
;;;1696   						buf[currCharNum++ ] = ChrEndS;
;;;1697   					}
;;;1698   					else
;;;1699   					{
;;;1700   						tmpFg = 1;
;;;1701   						for(i=0;i<pntlen;i++)
;;;1702   						{
;;;1703   						   if(i==0||i==4)
;;;1704   							  continue;
;;;1705   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1706   						   {
;;;1707   							  tmpFg = (tmpFg&0x01);
;;;1708   						   }
;;;1709   						   else
;;;1710   						   {
;;;1711   							  tmpFg = 0;
;;;1712   						   }
;;;1713   						}
;;;1714   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1715   						{
;;;1716   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1717   							
;;;1718   						}
;;;1719   						temp1=0;
;;;1720   						for(i=0;i<pntlen;i++)
;;;1721   						{
;;;1722   						   if(i==0)
;;;1723   						   {
;;;1724   							   fsingal = buf[currCharNum++]-0x30;
;;;1725   							   continue; 
;;;1726   						   } 
;;;1727   						   else if(i==4)
;;;1728   						   {
;;;1729   							   currCharNum++;
;;;1730   							   continue; 
;;;1731   						   }
;;;1732   						   else									 
;;;1733   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1734   						}	
;;;1735   						CalHandle(0,fsingal,temp1);
;;;1736   						
;;;1737   					}
;;;1738   				}break;
;;;1739   				case 5:
;;;1740   				pntlen = 1;
;;;1741   				if(buf[currCharNum]=='?')
;;;1742   				{
;;;1743   					sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1744   				    currCharNum+=pntlen;
;;;1745   				    buf[currCharNum ++] = ChrEndS;
;;;1746   					
;;;1747   				}
;;;1748   				else
;;;1749   				{
;;;1750   					pntlen = 1;				
;;;1751   					for(i=0,temp1=0;i<pntlen;i++)
;;;1752   					{
;;;1753   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1754   					}		                   
;;;1755   					if(temp1>1)
;;;1756   					{
;;;1757   						return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1758   					}
;;;1759   //					MODE=temp1;
;;;1760   					
;;;1761   					
;;;1762   					overflag = temp1;
;;;1763   //						Para.CSET_Voltage = 5000;
;;;1764   //						Para.CSET_Current = 1000;
;;;1765   					
;;;1766   						
;;;1767   //					MODE_ONOFF(mainswitch);
;;;1768   	//				Change_LM_Val(LM_S_Vale);
;;;1769   					buf[currCharNum++] = ChrEndR;
;;;1770   		        }
;;;1771   				break;
;;;1772   				case 13://电流校准
;;;1773   				{
;;;1774   					pntlen = 8;
;;;1775   					if(buf[currCharNum]=='?')
;;;1776   					{
;;;1777   //						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1778   //									sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1779   //						currCharNum+=pntlen;
;;;1780   //						buf[currCharNum++ ] = ChrEndS;
;;;1781   					}
;;;1782   					else
;;;1783   					{
;;;1784   						tmpFg = 1;
;;;1785   						for(i=0;i<pntlen;i++)
;;;1786   						{
;;;1787   						   if(i==0||i==4)
;;;1788   							  continue;
;;;1789   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1790   						   {
;;;1791   							  tmpFg = (tmpFg&0x01);
;;;1792   						   }
;;;1793   						   else
;;;1794   						   {
;;;1795   							  tmpFg = 0;
;;;1796   						   }
;;;1797   						}
;;;1798   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1799   						{
;;;1800   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1801   							
;;;1802   						}
;;;1803   						temp1=0;
;;;1804   						for(i=0;i<pntlen;i++)
;;;1805   						{
;;;1806   						   if(i==0)
;;;1807   						   {
;;;1808   							   fsingal = buf[currCharNum++]-0x30;
;;;1809   							   continue; 
;;;1810   						   } 
;;;1811   						   else if(i==4)
;;;1812   						   {
;;;1813   							   currCharNum++;
;;;1814   							   continue; 
;;;1815   						   }
;;;1816   						   else									 
;;;1817   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1818   						}	
;;;1819   						CalHandle(1,fsingal,temp1);
;;;1820   						
;;;1821   					}
;;;1822   				}break;
;;;1823   				case 14://电阻校准
;;;1824   				{
;;;1825   					pntlen = 6;
;;;1826   					if(buf[currCharNum]=='?')
;;;1827   					{
;;;1828   						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1829   									sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1830   						currCharNum+=pntlen;
;;;1831   						buf[currCharNum++ ] = ChrEndS;
;;;1832   					}
;;;1833   					else
;;;1834   					{
;;;1835   						tmpFg = 1;
;;;1836   						for(i=0;i<pntlen;i++)
;;;1837   						{
;;;1838   						   if(i==0||i==4)
;;;1839   							  continue;
;;;1840   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1841   						   {
;;;1842   							  tmpFg = (tmpFg&0x01);
;;;1843   						   }
;;;1844   						   else
;;;1845   						   {
;;;1846   							  tmpFg = 0;
;;;1847   						   }
;;;1848   						}
;;;1849   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1850   						{
;;;1851   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1852   							
;;;1853   						}
;;;1854   						temp1=0;
;;;1855   						for(i=0;i<pntlen;i++)
;;;1856   						{
;;;1857   						   if(i==0)
;;;1858   						   {
;;;1859   							   fsingal = buf[currCharNum++]-0x30;
;;;1860   							   continue; 
;;;1861   						   } 
;;;1862   //						   else if(i==4)
;;;1863   //						   {
;;;1864   //							   currCharNum++;
;;;1865   //							   continue; 
;;;1866   //						   }
;;;1867   //						   else									 
;;;1868   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1869   						}
;;;1870   						CalHandle(2,fsingal,temp1);
;;;1871   						
;;;1872   					}
;;;1873   				}break;
;;;1874   				case 18:
;;;1875   				{
;;;1876   					if(buf[currCharNum]=='?')
;;;1877   					{
;;;1878   //						sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1879   //						currCharNum+=pntlen;
;;;1880   //						buf[currCharNum ++] = ChrEndS;
;;;1881   						
;;;1882   					}
;;;1883   					else
;;;1884   					{
;;;1885   						pntlen = 1;				
;;;1886   						for(i=0,temp1=0;i<pntlen;i++)
;;;1887   						{
;;;1888   							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1889   						}		                   
;;;1890   						if(temp1>1)
;;;1891   						{
;;;1892   							return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1893   						}
;;;1894   	//					MODE=temp1;
;;;1895   						
;;;1896   						bootflag = 1;
;;;1897   						Write_Boot_Flag();
;;;1898   						if(temp1 == 1)
;;;1899   						{
;;;1900   							JumpBoot(55);
;;;1901   						}
;;;1902   					}
;;;1903   				}break;
;;;1904   //				case 15:
;;;1905   //				{
;;;1906   //					pntlen = 1;
;;;1907   //					if(buf[currCharNum]=='?')
;;;1908   //					{
;;;1909   //						sprintf(&buf[currCharNum],"%1d",Gmode_Vale);
;;;1910   //						currCharNum+=pntlen;
;;;1911   //						buf[currCharNum] = ChrEndR;
;;;1912   //						currCharNum++;
;;;1913   //	//				    buf[currCharNum ++] = ChrEndS;
;;;1914   //						
;;;1915   //					}
;;;1916   //					else
;;;1917   //					{
;;;1918   //						tmpFg = 1;
;;;1919   //						for(i=0;i<pntlen;i++)
;;;1920   //						{
;;;1921   //						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1922   //						   {
;;;1923   //							  tmpFg = (tmpFg&0x01);
;;;1924   //						   }
;;;1925   //						   else
;;;1926   //						   {
;;;1927   //							  tmpFg = 0;
;;;1928   //						   }
;;;1929   //						}
;;;1930   //						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1931   //						{
;;;1932   //							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1933   //							
;;;1934   //						}					
;;;1935   //						for(i=0,temp1=0;i<pntlen;i++)
;;;1936   //						{
;;;1937   //							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1938   //						}		                   
;;;1939   //						if(temp1 >Mode_H)
;;;1940   //						 {
;;;1941   //							 return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1942   //							 
;;;1943   //						 }
;;;1944   //						 if(H_L == 1)
;;;1945   //						 {
;;;1946   //							CalHandle(3,1,temp1);
;;;1947   //						 }else{
;;;1948   //							 CalHandle(3,0,temp1);
;;;1949   //						 }
;;;1950   //						 
;;;1951   ////								 Mode=temp1;
;;;1952   ////								Change_MODE_Val(Mode);
;;;1953   ////						 buf[currCharNum++] = ChrEndS;
;;;1954   //					}
;;;1955   //					break;
;;;1956   //				}break;
;;;1957   //				case 16:
;;;1958   //				{
;;;1959   //					pntlen = 3;
;;;1960   //					if(buf[currCharNum]=='?')
;;;1961   //					{
;;;1962   //						sprintf(&buf[currCharNum],"%1d",Gmode_Vale);
;;;1963   //						currCharNum+=pntlen;
;;;1964   //						buf[currCharNum] = ChrEndR;
;;;1965   //						currCharNum++;
;;;1966   //	//				    buf[currCharNum ++] = ChrEndS;
;;;1967   //						
;;;1968   //					}
;;;1969   //					else
;;;1970   //					{
;;;1971   //						tmpFg = 1;
;;;1972   //						for(i=0;i<pntlen;i++)
;;;1973   //						{
;;;1974   //						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1975   //						   {
;;;1976   //							  tmpFg = (tmpFg&0x01);
;;;1977   //						   }
;;;1978   //						   else
;;;1979   //						   {
;;;1980   //							  tmpFg = 0;
;;;1981   //						   }
;;;1982   //						}
;;;1983   //						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1984   //						{
;;;1985   //							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1986   //							
;;;1987   //						}					
;;;1988   //						for(i=0,temp1=0;i<pntlen;i++)
;;;1989   //						{
;;;1990   //							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1991   //						}		                   
;;;1992   //						 overflag = temp1;
;;;1993   //						 
;;;1994   ////								 Mode=temp1;
;;;1995   ////								Change_MODE_Val(Mode);
;;;1996   ////						 buf[currCharNum++] = ChrEndS;
;;;1997   //					}
;;;1998   //					break;
;;;1999   //				}break;
;;;2000   //				case 17:
;;;2001   //				{
;;;2002   //					pntlen = 2;
;;;2003   //					if(buf[currCharNum]=='?')
;;;2004   //					{
;;;2005   ////						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;2006   //									sprintf(&buf[currCharNum],"%02d",(int)temperature);
;;;2007   //						currCharNum+=pntlen;
;;;2008   //						buf[currCharNum++ ] = ChrEndR;
;;;2009   //						buf[currCharNum++ ] = ChrEndS;
;;;2010   //					}
;;;2011   //				}break;
;;;2012   			default:    //ERR
;;;2013              		 return SetErr_ACK(buf, addr ,CMD_ERR);
;;;2014   	 			  
;;;2015   		  }
;;;2016   		  break;
;;;2017   		}
;;;2018   		
;;;2019   	}
;;;2020   	if(j>=CmdNumb)
;;;2021   	{
;;;2022   		return SetErr_ACK(buf, addr ,CMD_ERR);			  
0002d4  4620              MOV      r0,r4
0002d6  9932              LDR      r1,[sp,#0xc8]
0002d8  f7fffffe          BL       SetErr_ACK
;;;2023   	}
;;;2024   	return currCharNum+1;
;;;2025   }
0002dc  b033              ADD      sp,sp,#0xcc
0002de  ecbd8b02          VPOP     {d8}
0002e2  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.742|
0002e6  f7fffffe          BL       __2sprintf
0002ea  1c6d              ADDS     r5,r5,#1              ;1137
0002ec  e3fa              B        |L9.2788|
                  |L9.750|
0002ee  f88b0006          STRB     r0,[r11,#6]           ;1186
0002f2  f89b0006          LDRB     r0,[r11,#6]           ;1191  ; mainswitch
0002f6  f7fffffe          BL       MODE_ONOFF
                  |L9.762|
0002fa  200d              MOVS     r0,#0xd               ;1160
0002fc  5560              STRB     r0,[r4,r5]            ;1160
0002fe  1c6d              ADDS     r5,r5,#1              ;1160
000300  b2ad              UXTH     r5,r5                 ;1160
000302  e3f0              B        |L9.2790|
                  |L9.772|
000304  5d61              LDRB     r1,[r4,r5]            ;1198
000306  293f              CMP      r1,#0x3f              ;1198
000308  d0ca              BEQ      |L9.672|
00030a  2d0b              CMP      r5,#0xb               ;1207
00030c  d10d              BNE      |L9.810|
00030e  2000              MOVS     r0,#0                 ;1209
000310  4607              MOV      r7,r0                 ;1209
                  |L9.786|
000312  5d61              LDRB     r1,[r4,r5]            ;1211
000314  eb070287          ADD      r2,r7,r7,LSL #2       ;1211
000318  eb060242          ADD      r2,r6,r2,LSL #1       ;1211
00031c  1c6d              ADDS     r5,r5,#1              ;1211
00031e  1c40              ADDS     r0,r0,#1              ;1211
000320  188f              ADDS     r7,r1,r2              ;1211
000322  b2c0              UXTB     r0,r0                 ;1209
000324  b2ad              UXTH     r5,r5                 ;1211
000326  2805              CMP      r0,#5                 ;1209
000328  d3f3              BCC      |L9.786|
                  |L9.810|
00032a  4651              MOV      r1,r10                ;1214
00032c  f8ca7044          STR      r7,[r10,#0x44]        ;1214  ; Para
000330  5d62              LDRB     r2,[r4,r5]            ;1217
000332  1c6d              ADDS     r5,r5,#1              ;1217
000334  2300              MOVS     r3,#0                 ;1215
000336  b2a8              UXTH     r0,r5                 ;1217
000338  2a2c              CMP      r2,#0x2c              ;1217
00033a  d10c              BNE      |L9.854|
00033c  2200              MOVS     r2,#0                 ;1219
                  |L9.830|
00033e  5c25              LDRB     r5,[r4,r0]            ;1221
000340  eb030383          ADD      r3,r3,r3,LSL #2       ;1221
000344  1c40              ADDS     r0,r0,#1              ;1221
000346  1c52              ADDS     r2,r2,#1              ;1221
000348  eb060343          ADD      r3,r6,r3,LSL #1       ;1221
00034c  b2d2              UXTB     r2,r2                 ;1219
00034e  442b              ADD      r3,r3,r5              ;1221
000350  b280              UXTH     r0,r0                 ;1221
000352  2a05              CMP      r2,#5                 ;1219
000354  d3f3              BCC      |L9.830|
                  |L9.854|
000356  f8a13048          STRH     r3,[r1,#0x48]         ;1224
00035a  5c22              LDRB     r2,[r4,r0]            ;1227
00035c  1c40              ADDS     r0,r0,#1              ;1227
00035e  2300              MOVS     r3,#0                 ;1225
000360  b280              UXTH     r0,r0                 ;1227
000362  2a2c              CMP      r2,#0x2c              ;1227
000364  d10c              BNE      |L9.896|
000366  2200              MOVS     r2,#0                 ;1229
                  |L9.872|
000368  5c25              LDRB     r5,[r4,r0]            ;1231
00036a  eb030383          ADD      r3,r3,r3,LSL #2       ;1231
00036e  1c40              ADDS     r0,r0,#1              ;1231
000370  1c52              ADDS     r2,r2,#1              ;1231
000372  eb060343          ADD      r3,r6,r3,LSL #1       ;1231
000376  b2d2              UXTB     r2,r2                 ;1229
000378  442b              ADD      r3,r3,r5              ;1231
00037a  b280              UXTH     r0,r0                 ;1231
00037c  2a05              CMP      r2,#5                 ;1229
00037e  d3f3              BCC      |L9.872|
                  |L9.896|
000380  64cb              STR      r3,[r1,#0x4c]         ;1234  ; Para
000382  5c22              LDRB     r2,[r4,r0]            ;1237
000384  1c40              ADDS     r0,r0,#1              ;1237
000386  2300              MOVS     r3,#0                 ;1235
000388  b280              UXTH     r0,r0                 ;1237
00038a  2a2c              CMP      r2,#0x2c              ;1237
00038c  d10e              BNE      |L9.940|
00038e  2200              MOVS     r2,#0                 ;1239
                  |L9.912|
000390  5c25              LDRB     r5,[r4,r0]            ;1241
000392  eb030383          ADD      r3,r3,r3,LSL #2       ;1241
000396  eb060343          ADD      r3,r6,r3,LSL #1       ;1241
00039a  442b              ADD      r3,r3,r5              ;1241
00039c  1c40              ADDS     r0,r0,#1              ;1241
00039e  e000              B        |L9.930|
                  |L9.928|
0003a0  e208              B        |L9.1972|
                  |L9.930|
0003a2  1c52              ADDS     r2,r2,#1              ;1241
0003a4  b2d2              UXTB     r2,r2                 ;1239
0003a6  b280              UXTH     r0,r0                 ;1241
0003a8  2a03              CMP      r2,#3                 ;1239
0003aa  d3f1              BCC      |L9.912|
                  |L9.940|
0003ac  f8a13050          STRH     r3,[r1,#0x50]         ;1244
0003b0  5c22              LDRB     r2,[r4,r0]            ;1247
0003b2  1c40              ADDS     r0,r0,#1              ;1247
0003b4  2300              MOVS     r3,#0                 ;1245
0003b6  b280              UXTH     r0,r0                 ;1247
0003b8  2a2c              CMP      r2,#0x2c              ;1247
0003ba  d10c              BNE      |L9.982|
0003bc  2200              MOVS     r2,#0                 ;1249
                  |L9.958|
0003be  5c25              LDRB     r5,[r4,r0]            ;1251
0003c0  eb030383          ADD      r3,r3,r3,LSL #2       ;1251
0003c4  1c40              ADDS     r0,r0,#1              ;1251
0003c6  1c52              ADDS     r2,r2,#1              ;1251
0003c8  eb060343          ADD      r3,r6,r3,LSL #1       ;1251
0003cc  b2d2              UXTB     r2,r2                 ;1249
0003ce  442b              ADD      r3,r3,r5              ;1251
0003d0  b280              UXTH     r0,r0                 ;1251
0003d2  2a05              CMP      r2,#5                 ;1249
0003d4  d3f3              BCC      |L9.958|
                  |L9.982|
0003d6  f8a13054          STRH     r3,[r1,#0x54]         ;1254
0003da  5c22              LDRB     r2,[r4,r0]            ;1257
0003dc  1c40              ADDS     r0,r0,#1              ;1257
0003de  2300              MOVS     r3,#0                 ;1255
0003e0  b280              UXTH     r0,r0                 ;1257
0003e2  2a2c              CMP      r2,#0x2c              ;1257
0003e4  d10c              BNE      |L9.1024|
0003e6  2200              MOVS     r2,#0                 ;1259
                  |L9.1000|
0003e8  5c25              LDRB     r5,[r4,r0]            ;1261
0003ea  eb030383          ADD      r3,r3,r3,LSL #2       ;1261
0003ee  1c40              ADDS     r0,r0,#1              ;1261
0003f0  1c52              ADDS     r2,r2,#1              ;1261
0003f2  eb060343          ADD      r3,r6,r3,LSL #1       ;1261
0003f6  b2d2              UXTB     r2,r2                 ;1259
0003f8  442b              ADD      r3,r3,r5              ;1261
0003fa  b280              UXTH     r0,r0                 ;1261
0003fc  2a05              CMP      r2,#5                 ;1259
0003fe  d3f3              BCC      |L9.1000|
                  |L9.1024|
000400  f8a13056          STRH     r3,[r1,#0x56]         ;1264
000404  5c22              LDRB     r2,[r4,r0]            ;1267
000406  1c40              ADDS     r0,r0,#1              ;1267
000408  2300              MOVS     r3,#0                 ;1265
00040a  b280              UXTH     r0,r0                 ;1267
00040c  2a2c              CMP      r2,#0x2c              ;1267
00040e  d10c              BNE      |L9.1066|
000410  2200              MOVS     r2,#0                 ;1269
                  |L9.1042|
000412  5c25              LDRB     r5,[r4,r0]            ;1271
000414  eb030383          ADD      r3,r3,r3,LSL #2       ;1271
000418  1c40              ADDS     r0,r0,#1              ;1271
00041a  1c52              ADDS     r2,r2,#1              ;1271
00041c  eb060343          ADD      r3,r6,r3,LSL #1       ;1271
000420  b2d2              UXTB     r2,r2                 ;1269
000422  442b              ADD      r3,r3,r5              ;1271
000424  b280              UXTH     r0,r0                 ;1271
000426  2a05              CMP      r2,#5                 ;1269
000428  d3f3              BCC      |L9.1042|
                  |L9.1066|
00042a  f8a13058          STRH     r3,[r1,#0x58]         ;1274
00042e  2300              MOVS     r3,#0                 ;1275
000430  5c22              LDRB     r2,[r4,r0]            ;1277
000432  1c40              ADDS     r0,r0,#1              ;1277
000434  b280              UXTH     r0,r0                 ;1277
000436  e02d              B        |L9.1172|
                  |L9.1080|
000438  256400            DCB      "%d",0
00043b  00                DCB      0
                  |L9.1084|
00043c  2f00              DCB      "/",0
00043e  00                DCB      0
00043f  00                DCB      0
                  |L9.1088|
                          DCD      ||.data||+0x58
                  |L9.1092|
                          DCD      C_DISCHARGE
                  |L9.1096|
                          DCD      Para
                  |L9.1100|
00044c  25303564          DCB      "%05d",0
000450  00      
000451  00                DCB      0
000452  00                DCB      0
000453  00                DCB      0
                  |L9.1108|
000454  25303664          DCB      "%06d",0
000458  00      
000459  00                DCB      0
00045a  00                DCB      0
00045b  00                DCB      0
                  |L9.1116|
00045c  25303464          DCB      "%04d",0
000460  00      
000461  00                DCB      0
000462  00                DCB      0
000463  00                DCB      0
                  |L9.1124|
                          DCD      max_discahrgeNum
                  |L9.1128|
000468  447a0000          DCFS     0x447a0000 ; 1000
                  |L9.1132|
                          DCD      shorttime
                  |L9.1136|
000470  25303364          DCB      "%03d",0
000474  00      
000475  00                DCB      0
000476  00                DCB      0
000477  00                DCB      0
                  |L9.1144|
000478  25316400          DCB      "%1d",0
                  |L9.1148|
                          DCD      finishflag
                  |L9.1152|
                          DCD      lockflag
                  |L9.1156|
                          DCD      version
                  |L9.1160|
000488  25326400          DCB      "%2d",0
                  |L9.1164|
                          DCD      Temperature
                  |L9.1168|
                          DCD      overflag
                  |L9.1172|
000494  2a2c              CMP      r2,#0x2c              ;1277
000496  d10c              BNE      |L9.1202|
000498  2200              MOVS     r2,#0                 ;1279
                  |L9.1178|
00049a  5c25              LDRB     r5,[r4,r0]            ;1281
00049c  eb030383          ADD      r3,r3,r3,LSL #2       ;1281
0004a0  1c40              ADDS     r0,r0,#1              ;1281
0004a2  1c52              ADDS     r2,r2,#1              ;1281
0004a4  eb060343          ADD      r3,r6,r3,LSL #1       ;1281
0004a8  b2d2              UXTB     r2,r2                 ;1279
0004aa  442b              ADD      r3,r3,r5              ;1281
0004ac  b280              UXTH     r0,r0                 ;1281
0004ae  2a05              CMP      r2,#5                 ;1279
0004b0  d3f3              BCC      |L9.1178|
                  |L9.1202|
0004b2  f8a13060          STRH     r3,[r1,#0x60]         ;1284
0004b6  5c22              LDRB     r2,[r4,r0]            ;1287
0004b8  1c40              ADDS     r0,r0,#1              ;1287
0004ba  2300              MOVS     r3,#0                 ;1285
0004bc  b280              UXTH     r0,r0                 ;1287
0004be  2a2c              CMP      r2,#0x2c              ;1287
0004c0  d10c              BNE      |L9.1244|
0004c2  2200              MOVS     r2,#0                 ;1289
                  |L9.1220|
0004c4  5c25              LDRB     r5,[r4,r0]            ;1291
0004c6  eb030383          ADD      r3,r3,r3,LSL #2       ;1291
0004ca  1c40              ADDS     r0,r0,#1              ;1291
0004cc  1c52              ADDS     r2,r2,#1              ;1291
0004ce  eb060343          ADD      r3,r6,r3,LSL #1       ;1291
0004d2  b2d2              UXTB     r2,r2                 ;1289
0004d4  442b              ADD      r3,r3,r5              ;1291
0004d6  b280              UXTH     r0,r0                 ;1291
0004d8  2a05              CMP      r2,#5                 ;1289
0004da  d3f3              BCC      |L9.1220|
                  |L9.1244|
0004dc  65cb              STR      r3,[r1,#0x5c]         ;1294  ; Para
0004de  5c22              LDRB     r2,[r4,r0]            ;1297
0004e0  1c40              ADDS     r0,r0,#1              ;1297
0004e2  2300              MOVS     r3,#0                 ;1295
0004e4  b280              UXTH     r0,r0                 ;1297
0004e6  2a2c              CMP      r2,#0x2c              ;1297
0004e8  d10c              BNE      |L9.1284|
0004ea  2200              MOVS     r2,#0                 ;1299
                  |L9.1260|
0004ec  5c25              LDRB     r5,[r4,r0]            ;1301
0004ee  eb030383          ADD      r3,r3,r3,LSL #2       ;1301
0004f2  1c40              ADDS     r0,r0,#1              ;1301
0004f4  1c52              ADDS     r2,r2,#1              ;1301
0004f6  eb060343          ADD      r3,r6,r3,LSL #1       ;1301
0004fa  b2d2              UXTB     r2,r2                 ;1299
0004fc  442b              ADD      r3,r3,r5              ;1301
0004fe  b280              UXTH     r0,r0                 ;1301
000500  2a05              CMP      r2,#5                 ;1299
000502  d3f3              BCC      |L9.1260|
                  |L9.1284|
000504  f8a13062          STRH     r3,[r1,#0x62]         ;1304
000508  5c22              LDRB     r2,[r4,r0]            ;1307
00050a  1c40              ADDS     r0,r0,#1              ;1307
00050c  2300              MOVS     r3,#0                 ;1305
00050e  b280              UXTH     r0,r0                 ;1307
000510  2a2c              CMP      r2,#0x2c              ;1307
000512  d10c              BNE      |L9.1326|
000514  2200              MOVS     r2,#0                 ;1309
                  |L9.1302|
000516  5c25              LDRB     r5,[r4,r0]            ;1311
000518  eb030383          ADD      r3,r3,r3,LSL #2       ;1311
00051c  1c40              ADDS     r0,r0,#1              ;1311
00051e  1c52              ADDS     r2,r2,#1              ;1311
000520  eb060343          ADD      r3,r6,r3,LSL #1       ;1311
000524  b2d2              UXTB     r2,r2                 ;1309
000526  442b              ADD      r3,r3,r5              ;1311
000528  b280              UXTH     r0,r0                 ;1311
00052a  2a05              CMP      r2,#5                 ;1309
00052c  d3f3              BCC      |L9.1302|
                  |L9.1326|
00052e  f8a13064          STRH     r3,[r1,#0x64]         ;1314
000532  5c22              LDRB     r2,[r4,r0]            ;1317
000534  1c40              ADDS     r0,r0,#1              ;1317
000536  2300              MOVS     r3,#0                 ;1315
000538  b280              UXTH     r0,r0                 ;1317
00053a  2a2c              CMP      r2,#0x2c              ;1317
00053c  d10c              BNE      |L9.1368|
00053e  2200              MOVS     r2,#0                 ;1319
                  |L9.1344|
000540  5c25              LDRB     r5,[r4,r0]            ;1321
000542  eb030383          ADD      r3,r3,r3,LSL #2       ;1321
000546  1c40              ADDS     r0,r0,#1              ;1321
000548  1c52              ADDS     r2,r2,#1              ;1321
00054a  eb060343          ADD      r3,r6,r3,LSL #1       ;1321
00054e  b2d2              UXTB     r2,r2                 ;1319
000550  442b              ADD      r3,r3,r5              ;1321
000552  b280              UXTH     r0,r0                 ;1321
000554  2a05              CMP      r2,#5                 ;1319
000556  d3f3              BCC      |L9.1344|
                  |L9.1368|
000558  f8a13066          STRH     r3,[r1,#0x66]         ;1324
00055c  5c22              LDRB     r2,[r4,r0]            ;1327
00055e  1c40              ADDS     r0,r0,#1              ;1327
000560  2300              MOVS     r3,#0                 ;1325
000562  b280              UXTH     r0,r0                 ;1327
000564  2a2c              CMP      r2,#0x2c              ;1327
000566  d10c              BNE      |L9.1410|
000568  2200              MOVS     r2,#0                 ;1329
                  |L9.1386|
00056a  5c25              LDRB     r5,[r4,r0]            ;1331
00056c  eb030383          ADD      r3,r3,r3,LSL #2       ;1331
000570  1c40              ADDS     r0,r0,#1              ;1331
000572  1c52              ADDS     r2,r2,#1              ;1331
000574  eb060343          ADD      r3,r6,r3,LSL #1       ;1331
000578  b2d2              UXTB     r2,r2                 ;1329
00057a  442b              ADD      r3,r3,r5              ;1331
00057c  b280              UXTH     r0,r0                 ;1331
00057e  2a05              CMP      r2,#5                 ;1329
000580  d3f3              BCC      |L9.1386|
                  |L9.1410|
000582  668b              STR      r3,[r1,#0x68]         ;1334  ; Para
000584  5c22              LDRB     r2,[r4,r0]            ;1337
000586  1c40              ADDS     r0,r0,#1              ;1337
000588  2300              MOVS     r3,#0                 ;1335
00058a  b280              UXTH     r0,r0                 ;1337
00058c  2a2c              CMP      r2,#0x2c              ;1337
00058e  d10c              BNE      |L9.1450|
000590  2200              MOVS     r2,#0                 ;1339
                  |L9.1426|
000592  5c25              LDRB     r5,[r4,r0]            ;1341
000594  eb030383          ADD      r3,r3,r3,LSL #2       ;1341
000598  1c40              ADDS     r0,r0,#1              ;1341
00059a  1c52              ADDS     r2,r2,#1              ;1341
00059c  eb060343          ADD      r3,r6,r3,LSL #1       ;1341
0005a0  b2d2              UXTB     r2,r2                 ;1339
0005a2  442b              ADD      r3,r3,r5              ;1341
0005a4  b280              UXTH     r0,r0                 ;1341
0005a6  2a05              CMP      r2,#5                 ;1339
0005a8  d3f3              BCC      |L9.1426|
                  |L9.1450|
0005aa  f8a1306c          STRH     r3,[r1,#0x6c]         ;1344
0005ae  5c22              LDRB     r2,[r4,r0]            ;1347
0005b0  1c40              ADDS     r0,r0,#1              ;1347
0005b2  2300              MOVS     r3,#0                 ;1345
0005b4  b280              UXTH     r0,r0                 ;1347
0005b6  2a2c              CMP      r2,#0x2c              ;1347
0005b8  d10c              BNE      |L9.1492|
0005ba  2200              MOVS     r2,#0                 ;1349
                  |L9.1468|
0005bc  5c25              LDRB     r5,[r4,r0]            ;1351
0005be  eb030383          ADD      r3,r3,r3,LSL #2       ;1351
0005c2  1c40              ADDS     r0,r0,#1              ;1351
0005c4  1c52              ADDS     r2,r2,#1              ;1351
0005c6  eb060343          ADD      r3,r6,r3,LSL #1       ;1351
0005ca  b2d2              UXTB     r2,r2                 ;1349
0005cc  442b              ADD      r3,r3,r5              ;1351
0005ce  b280              UXTH     r0,r0                 ;1351
0005d0  2a05              CMP      r2,#5                 ;1349
0005d2  d3f3              BCC      |L9.1468|
                  |L9.1492|
0005d4  670b              STR      r3,[r1,#0x70]         ;1354  ; Para
0005d6  5c22              LDRB     r2,[r4,r0]            ;1357
0005d8  1c40              ADDS     r0,r0,#1              ;1357
0005da  2300              MOVS     r3,#0                 ;1355
0005dc  b280              UXTH     r0,r0                 ;1357
0005de  2a2c              CMP      r2,#0x2c              ;1357
0005e0  d10c              BNE      |L9.1532|
0005e2  2200              MOVS     r2,#0                 ;1359
                  |L9.1508|
0005e4  5c25              LDRB     r5,[r4,r0]            ;1361
0005e6  eb030383          ADD      r3,r3,r3,LSL #2       ;1361
0005ea  1c40              ADDS     r0,r0,#1              ;1361
0005ec  1c52              ADDS     r2,r2,#1              ;1361
0005ee  eb060343          ADD      r3,r6,r3,LSL #1       ;1361
0005f2  b2d2              UXTB     r2,r2                 ;1359
0005f4  442b              ADD      r3,r3,r5              ;1361
0005f6  b280              UXTH     r0,r0                 ;1361
0005f8  2a05              CMP      r2,#5                 ;1359
0005fa  d3f3              BCC      |L9.1508|
                  |L9.1532|
0005fc  674b              STR      r3,[r1,#0x74]         ;1364  ; Para
0005fe  5c22              LDRB     r2,[r4,r0]            ;1367
000600  1c40              ADDS     r0,r0,#1              ;1367
000602  2300              MOVS     r3,#0                 ;1365
000604  b280              UXTH     r0,r0                 ;1367
000606  2a2c              CMP      r2,#0x2c              ;1367
000608  d10c              BNE      |L9.1572|
00060a  2200              MOVS     r2,#0                 ;1369
                  |L9.1548|
00060c  5c25              LDRB     r5,[r4,r0]            ;1371
00060e  eb030383          ADD      r3,r3,r3,LSL #2       ;1371
000612  1c40              ADDS     r0,r0,#1              ;1371
000614  1c52              ADDS     r2,r2,#1              ;1371
000616  eb060343          ADD      r3,r6,r3,LSL #1       ;1371
00061a  b2d2              UXTB     r2,r2                 ;1369
00061c  442b              ADD      r3,r3,r5              ;1371
00061e  b280              UXTH     r0,r0                 ;1371
000620  2a03              CMP      r2,#3                 ;1369
000622  d3f3              BCC      |L9.1548|
                  |L9.1572|
000624  f8813078          STRB     r3,[r1,#0x78]         ;1374
000628  5c22              LDRB     r2,[r4,r0]            ;1377
00062a  1c40              ADDS     r0,r0,#1              ;1377
00062c  2300              MOVS     r3,#0                 ;1375
00062e  b280              UXTH     r0,r0                 ;1377
000630  2a2c              CMP      r2,#0x2c              ;1377
000632  d10c              BNE      |L9.1614|
000634  2200              MOVS     r2,#0                 ;1379
                  |L9.1590|
000636  5c25              LDRB     r5,[r4,r0]            ;1381
000638  eb030383          ADD      r3,r3,r3,LSL #2       ;1381
00063c  1c40              ADDS     r0,r0,#1              ;1381
00063e  1c52              ADDS     r2,r2,#1              ;1381
000640  eb060343          ADD      r3,r6,r3,LSL #1       ;1381
000644  b2d2              UXTB     r2,r2                 ;1379
000646  442b              ADD      r3,r3,r5              ;1381
000648  b280              UXTH     r0,r0                 ;1381
00064a  2a03              CMP      r2,#3                 ;1379
00064c  d3f3              BCC      |L9.1590|
                  |L9.1614|
00064e  f89b2005          LDRB     r2,[r11,#5]           ;1384  ; MODE
000652  465f              MOV      r7,r11                ;1384
000654  b902              CBNZ     r2,|L9.1624|
000656  618b              STR      r3,[r1,#0x18]         ;1386  ; Para
                  |L9.1624|
000658  5c22              LDRB     r2,[r4,r0]            ;1391
00065a  1c40              ADDS     r0,r0,#1              ;1391
00065c  2300              MOVS     r3,#0                 ;1388
00065e  b280              UXTH     r0,r0                 ;1391
000660  2a2c              CMP      r2,#0x2c              ;1391
000662  d10c              BNE      |L9.1662|
000664  2200              MOVS     r2,#0                 ;1393
                  |L9.1638|
000666  5c25              LDRB     r5,[r4,r0]            ;1395
000668  eb030383          ADD      r3,r3,r3,LSL #2       ;1395
00066c  1c40              ADDS     r0,r0,#1              ;1395
00066e  1c52              ADDS     r2,r2,#1              ;1395
000670  eb060343          ADD      r3,r6,r3,LSL #1       ;1395
000674  b2d2              UXTB     r2,r2                 ;1393
000676  442b              ADD      r3,r3,r5              ;1395
000678  b280              UXTH     r0,r0                 ;1395
00067a  2a03              CMP      r2,#3                 ;1393
00067c  d3f3              BCC      |L9.1638|
                  |L9.1662|
00067e  71fb              STRB     r3,[r7,#7]            ;1398
000680  5c23              LDRB     r3,[r4,r0]            ;1401
000682  1c40              ADDS     r0,r0,#1              ;1401
000684  2200              MOVS     r2,#0                 ;1399
000686  b285              UXTH     r5,r0                 ;1401
000688  2b2c              CMP      r3,#0x2c              ;1401
00068a  d10c              BNE      |L9.1702|
00068c  2000              MOVS     r0,#0                 ;1403
                  |L9.1678|
00068e  5d63              LDRB     r3,[r4,r5]            ;1405
000690  eb020282          ADD      r2,r2,r2,LSL #2       ;1405
000694  1c6d              ADDS     r5,r5,#1              ;1405
000696  1c40              ADDS     r0,r0,#1              ;1405
000698  eb060242          ADD      r2,r6,r2,LSL #1       ;1405
00069c  b2c0              UXTB     r0,r0                 ;1403
00069e  441a              ADD      r2,r2,r3              ;1405
0006a0  b2ad              UXTH     r5,r5                 ;1405
0006a2  2803              CMP      r0,#3                 ;1403
0006a4  d3f3              BCC      |L9.1678|
                  |L9.1702|
0006a6  f8812052          STRB     r2,[r1,#0x52]         ;1408
0006aa  7978              LDRB     r0,[r7,#5]            ;1411  ; MODE
                  |L9.1708|
0006ac  f7fffffe          BL       MODE_PARASET
                  |L9.1712|
0006b0  e623              B        |L9.762|
                  |L9.1714|
0006b2  5d61              LDRB     r1,[r4,r5]            ;1418
0006b4  293f              CMP      r1,#0x3f              ;1418
0006b6  d07d              BEQ      |L9.1972|
0006b8  2d0b              CMP      r5,#0xb               ;1427
0006ba  d10d              BNE      |L9.1752|
0006bc  2000              MOVS     r0,#0                 ;1429
0006be  4607              MOV      r7,r0                 ;1429
                  |L9.1728|
0006c0  5d61              LDRB     r1,[r4,r5]            ;1431
0006c2  eb070287          ADD      r2,r7,r7,LSL #2       ;1431
0006c6  eb060242          ADD      r2,r6,r2,LSL #1       ;1431
0006ca  1c6d              ADDS     r5,r5,#1              ;1431
0006cc  1c40              ADDS     r0,r0,#1              ;1431
0006ce  188f              ADDS     r7,r1,r2              ;1431
0006d0  b2c0              UXTB     r0,r0                 ;1429
0006d2  b2ad              UXTH     r5,r5                 ;1431
0006d4  2802              CMP      r0,#2                 ;1429
0006d6  d3f3              BCC      |L9.1728|
                  |L9.1752|
0006d8  f88b7005          STRB     r7,[r11,#5]           ;1434
0006dc  f89b0005          LDRB     r0,[r11,#5]           ;1437  ; MODE
0006e0  2700              MOVS     r7,#0                 ;1435
0006e2  f8df9474          LDR      r9,|L9.2904|
0006e6  f6446120          MOV      r1,#0x4e20            ;1460
0006ea  b1b0              CBZ      r0,|L9.1818|
0006ec  f89b0005          LDRB     r0,[r11,#5]           ;1481  ; MODE
0006f0  465a              MOV      r2,r11                ;1481
0006f2  2801              CMP      r0,#1                 ;1481
0006f4  d065              BEQ      |L9.1986|
0006f6  7950              LDRB     r0,[r2,#5]            ;1510  ; MODE
0006f8  2802              CMP      r0,#2                 ;1510
0006fa  d07d              BEQ      |L9.2040|
0006fc  f89b0005          LDRB     r0,[r11,#5]           ;1546  ; MODE
000700  2803              CMP      r0,#3                 ;1546
000702  d07a              BEQ      |L9.2042|
000704  7950              LDRB     r0,[r2,#5]            ;1578  ; MODE
000706  2804              CMP      r0,#4                 ;1578
000708  d078              BEQ      |L9.2044|
00070a  f89b0005          LDRB     r0,[r11,#5]           ;1621  ; MODE
00070e  2805              CMP      r0,#5                 ;1621
000710  d075              BEQ      |L9.2046|
000712  7950              LDRB     r0,[r2,#5]            ;1652  ; MODE
000714  2806              CMP      r0,#6                 ;1652
000716  d073              BEQ      |L9.2048|
                  |L9.1816|
000718  e1dd              B        |L9.2774|
                  |L9.1818|
00071a  5d62              LDRB     r2,[r4,r5]            ;1439
00071c  1c6d              ADDS     r5,r5,#1              ;1439
00071e  b2a8              UXTH     r0,r5                 ;1439
000720  2a2c              CMP      r2,#0x2c              ;1439
000722  d106              BNE      |L9.1842|
000724  2200              MOVS     r2,#0                 ;1441
                  |L9.1830|
000726  1c40              ADDS     r0,r0,#1              ;1441
000728  1c52              ADDS     r2,r2,#1              ;1443
00072a  b2d2              UXTB     r2,r2                 ;1441
00072c  b280              UXTH     r0,r0                 ;1443
00072e  2a05              CMP      r2,#5                 ;1441
000730  d3f9              BCC      |L9.1830|
                  |L9.1842|
000732  5c23              LDRB     r3,[r4,r0]            ;1449
000734  1c40              ADDS     r0,r0,#1              ;1449
000736  2200              MOVS     r2,#0                 ;1447
000738  b285              UXTH     r5,r0                 ;1449
00073a  2b2c              CMP      r3,#0x2c              ;1449
00073c  d10c              BNE      |L9.1880|
00073e  2000              MOVS     r0,#0                 ;1451
                  |L9.1856|
000740  5d63              LDRB     r3,[r4,r5]            ;1453
000742  eb020282          ADD      r2,r2,r2,LSL #2       ;1453
000746  1c6d              ADDS     r5,r5,#1              ;1453
000748  1c40              ADDS     r0,r0,#1              ;1453
00074a  eb060242          ADD      r2,r6,r2,LSL #1       ;1453
00074e  b2c0              UXTB     r0,r0                 ;1451
000750  441a              ADD      r2,r2,r3              ;1453
000752  b2ad              UXTH     r5,r5                 ;1453
000754  2805              CMP      r0,#5                 ;1451
000756  d3f3              BCC      |L9.1856|
                  |L9.1880|
000758  f8ca2014          STR      r2,[r10,#0x14]        ;1456  ; Para
00075c  f8da0014          LDR      r0,[r10,#0x14]        ;1460  ; Para
000760  2700              MOVS     r7,#0                 ;1457
000762  4288              CMP      r0,r1                 ;1460
000764  d907              BLS      |L9.1910|
000766  2001              MOVS     r0,#1                 ;1462
000768  f8c90020          STR      r0,[r9,#0x20]         ;1462  ; Run_Control
00076c  02c1              LSLS     r1,r0,#11             ;1463
00076e  48fb              LDR      r0,|L9.2908|
000770  f7fffffe          BL       GPIO_ResetBits
000774  e007              B        |L9.1926|
                  |L9.1910|
000776  2000              MOVS     r0,#0                 ;1465
000778  f8c90020          STR      r0,[r9,#0x20]         ;1465  ; Run_Control
00077c  f44f6100          MOV      r1,#0x800             ;1466
000780  48f6              LDR      r0,|L9.2908|
000782  f7fffffe          BL       GPIO_SetBits
                  |L9.1926|
000786  5d60              LDRB     r0,[r4,r5]            ;1468
000788  1c6d              ADDS     r5,r5,#1              ;1468
00078a  b2ad              UXTH     r5,r5                 ;1468
00078c  282c              CMP      r0,#0x2c              ;1468
00078e  d10c              BNE      |L9.1962|
000790  2000              MOVS     r0,#0                 ;1470
                  |L9.1938|
000792  5d61              LDRB     r1,[r4,r5]            ;1472
000794  eb070287          ADD      r2,r7,r7,LSL #2       ;1472
000798  eb060242          ADD      r2,r6,r2,LSL #1       ;1472
00079c  1c6d              ADDS     r5,r5,#1              ;1472
00079e  188f              ADDS     r7,r1,r2              ;1472
0007a0  1c40              ADDS     r0,r0,#1              ;1472
0007a2  b2ad              UXTH     r5,r5                 ;1472
0007a4  f01000ff          ANDS     r0,r0,#0xff           ;1470
0007a8  d0f3              BEQ      |L9.1938|
                  |L9.1962|
0007aa  f88b7006          STRB     r7,[r11,#6]           ;1475
0007ae  f89b0006          LDRB     r0,[r11,#6]           ;1476  ; mainswitch
0007b2  e000              B        |L9.1974|
                  |L9.1972|
0007b4  e214              B        |L9.3040|
                  |L9.1974|
0007b6  2800              CMP      r0,#0                 ;1476
0007b8  d1ae              BNE      |L9.1816|
0007ba  2001              MOVS     r0,#1                 ;1478
0007bc  f8c90020          STR      r0,[r9,#0x20]         ;1478  ; Run_Control
0007c0  e11f              B        |L9.2562|
                  |L9.1986|
0007c2  5d61              LDRB     r1,[r4,r5]            ;1482
0007c4  1c6d              ADDS     r5,r5,#1              ;1482
0007c6  b2a8              UXTH     r0,r5                 ;1482
0007c8  292c              CMP      r1,#0x2c              ;1482
0007ca  d10c              BNE      |L9.2022|
0007cc  2100              MOVS     r1,#0                 ;1484
                  |L9.1998|
0007ce  5c23              LDRB     r3,[r4,r0]            ;1486
0007d0  eb070587          ADD      r5,r7,r7,LSL #2       ;1486
0007d4  eb060545          ADD      r5,r6,r5,LSL #1       ;1486
0007d8  1c40              ADDS     r0,r0,#1              ;1486
0007da  1c49              ADDS     r1,r1,#1              ;1486
0007dc  195f              ADDS     r7,r3,r5              ;1486
0007de  b2c9              UXTB     r1,r1                 ;1484
0007e0  b280              UXTH     r0,r0                 ;1486
0007e2  2905              CMP      r1,#5                 ;1484
0007e4  d3f3              BCC      |L9.1998|
                  |L9.2022|
0007e6  4655              MOV      r5,r10                ;1489
0007e8  f8aa7064          STRH     r7,[r10,#0x64]        ;1489
0007ec  5c21              LDRB     r1,[r4,r0]            ;1492
0007ee  1c40              ADDS     r0,r0,#1              ;1492
0007f0  2300              MOVS     r3,#0                 ;1490
0007f2  b280              UXTH     r0,r0                 ;1492
0007f4  292c              CMP      r1,#0x2c              ;1492
0007f6  e004              B        |L9.2050|
                  |L9.2040|
0007f8  e027              B        |L9.2122|
                  |L9.2042|
0007fa  e074              B        |L9.2278|
                  |L9.2044|
0007fc  e0b1              B        |L9.2402|
                  |L9.2046|
0007fe  e106              B        |L9.2574|
                  |L9.2048|
000800  e136              B        |L9.2672|
                  |L9.2050|
000802  d10c              BNE      |L9.2078|
000804  2100              MOVS     r1,#0                 ;1494
                  |L9.2054|
000806  5c27              LDRB     r7,[r4,r0]            ;1496
000808  eb030383          ADD      r3,r3,r3,LSL #2       ;1496
00080c  1c40              ADDS     r0,r0,#1              ;1496
00080e  1c49              ADDS     r1,r1,#1              ;1496
000810  eb060343          ADD      r3,r6,r3,LSL #1       ;1496
000814  b2c9              UXTB     r1,r1                 ;1494
000816  443b              ADD      r3,r3,r7              ;1496
000818  b280              UXTH     r0,r0                 ;1496
00081a  2905              CMP      r1,#5                 ;1494
00081c  d3f3              BCC      |L9.2054|
                  |L9.2078|
00081e  f8a53066          STRH     r3,[r5,#0x66]         ;1499
000822  5c23              LDRB     r3,[r4,r0]            ;1502
000824  1c40              ADDS     r0,r0,#1              ;1502
000826  2100              MOVS     r1,#0                 ;1500
000828  b285              UXTH     r5,r0                 ;1502
00082a  2b2c              CMP      r3,#0x2c              ;1502
00082c  d10c              BNE      |L9.2120|
00082e  2000              MOVS     r0,#0                 ;1504
                  |L9.2096|
000830  5d63              LDRB     r3,[r4,r5]            ;1506
000832  1c6d              ADDS     r5,r5,#1              ;1506
000834  eb010181          ADD      r1,r1,r1,LSL #2       ;1506
000838  eb060141          ADD      r1,r6,r1,LSL #1       ;1506
00083c  1c40              ADDS     r0,r0,#1              ;1506
00083e  4419              ADD      r1,r1,r3              ;1506
000840  b2ad              UXTH     r5,r5                 ;1506
000842  f01000ff          ANDS     r0,r0,#0xff           ;1504
000846  d0f3              BEQ      |L9.2096|
                  |L9.2120|
000848  e144              B        |L9.2772|
                  |L9.2122|
00084a  2001              MOVS     r0,#1                 ;1511
00084c  f8c90020          STR      r0,[r9,#0x20]         ;1511  ; Run_Control
000850  02c1              LSLS     r1,r0,#11             ;1512
000852  48c2              LDR      r0,|L9.2908|
000854  f7fffffe          BL       GPIO_ResetBits
000858  5d61              LDRB     r1,[r4,r5]            ;1513
00085a  1c6d              ADDS     r5,r5,#1              ;1513
00085c  b2a8              UXTH     r0,r5                 ;1513
00085e  292c              CMP      r1,#0x2c              ;1513
000860  d10c              BNE      |L9.2172|
000862  2100              MOVS     r1,#0                 ;1515
                  |L9.2148|
000864  5c22              LDRB     r2,[r4,r0]            ;1517
000866  eb070387          ADD      r3,r7,r7,LSL #2       ;1517
00086a  eb060343          ADD      r3,r6,r3,LSL #1       ;1517
00086e  1c40              ADDS     r0,r0,#1              ;1517
000870  1c49              ADDS     r1,r1,#1              ;1517
000872  18d7              ADDS     r7,r2,r3              ;1517
000874  b2c9              UXTB     r1,r1                 ;1515
000876  b280              UXTH     r0,r0                 ;1517
000878  2905              CMP      r1,#5                 ;1515
00087a  d3f3              BCC      |L9.2148|
                  |L9.2172|
00087c  4653              MOV      r3,r10                ;1520
00087e  f8ca7044          STR      r7,[r10,#0x44]        ;1520  ; Para
000882  5c21              LDRB     r1,[r4,r0]            ;1523
000884  1c40              ADDS     r0,r0,#1              ;1523
000886  2200              MOVS     r2,#0                 ;1521
000888  b280              UXTH     r0,r0                 ;1523
00088a  292c              CMP      r1,#0x2c              ;1523
00088c  d10c              BNE      |L9.2216|
00088e  2100              MOVS     r1,#0                 ;1525
                  |L9.2192|
000890  5c25              LDRB     r5,[r4,r0]            ;1527
000892  eb020282          ADD      r2,r2,r2,LSL #2       ;1527
000896  1c40              ADDS     r0,r0,#1              ;1527
000898  1c49              ADDS     r1,r1,#1              ;1527
00089a  eb060242          ADD      r2,r6,r2,LSL #1       ;1527
00089e  b2c9              UXTB     r1,r1                 ;1525
0008a0  442a              ADD      r2,r2,r5              ;1527
0008a2  b280              UXTH     r0,r0                 ;1527
0008a4  2905              CMP      r1,#5                 ;1525
0008a6  d3f3              BCC      |L9.2192|
                  |L9.2216|
0008a8  f8a32048          STRH     r2,[r3,#0x48]         ;1530
0008ac  5c22              LDRB     r2,[r4,r0]            ;1533
0008ae  1c40              ADDS     r0,r0,#1              ;1533
0008b0  2100              MOVS     r1,#0                 ;1531
0008b2  b285              UXTH     r5,r0                 ;1533
0008b4  2a2c              CMP      r2,#0x2c              ;1533
0008b6  d10c              BNE      |L9.2258|
0008b8  2000              MOVS     r0,#0                 ;1535
                  |L9.2234|
0008ba  5d62              LDRB     r2,[r4,r5]            ;1537
0008bc  1c6d              ADDS     r5,r5,#1              ;1537
0008be  eb010181          ADD      r1,r1,r1,LSL #2       ;1537
0008c2  eb060141          ADD      r1,r6,r1,LSL #1       ;1537
0008c6  1c40              ADDS     r0,r0,#1              ;1537
0008c8  4411              ADD      r1,r1,r2              ;1537
0008ca  b2ad              UXTH     r5,r5                 ;1537
0008cc  f01000ff          ANDS     r0,r0,#0xff           ;1535
0008d0  d0f3              BEQ      |L9.2234|
                  |L9.2258|
0008d2  f88b1006          STRB     r1,[r11,#6]           ;1540
0008d6  f89b0006          LDRB     r0,[r11,#6]           ;1542  ; mainswitch
0008da  2801              CMP      r0,#1                 ;1542
0008dc  d102              BNE      |L9.2276|
0008de  49a0              LDR      r1,|L9.2912|
0008e0  2000              MOVS     r0,#0                 ;1544
0008e2  7008              STRB     r0,[r1,#0]            ;1544
                  |L9.2276|
0008e4  e0f7              B        |L9.2774|
                  |L9.2278|
0008e6  5d61              LDRB     r1,[r4,r5]            ;1547
0008e8  1c6d              ADDS     r5,r5,#1              ;1547
0008ea  b2a8              UXTH     r0,r5                 ;1547
0008ec  292c              CMP      r1,#0x2c              ;1547
0008ee  d10c              BNE      |L9.2314|
0008f0  2100              MOVS     r1,#0                 ;1549
                  |L9.2290|
0008f2  5c23              LDRB     r3,[r4,r0]            ;1551
0008f4  eb070587          ADD      r5,r7,r7,LSL #2       ;1551
0008f8  eb060545          ADD      r5,r6,r5,LSL #1       ;1551
0008fc  1c40              ADDS     r0,r0,#1              ;1551
0008fe  1c49              ADDS     r1,r1,#1              ;1551
000900  195f              ADDS     r7,r3,r5              ;1551
000902  b2c9              UXTB     r1,r1                 ;1549
000904  b280              UXTH     r0,r0                 ;1551
000906  2905              CMP      r1,#5                 ;1549
000908  d3f3              BCC      |L9.2290|
                  |L9.2314|
00090a  4655              MOV      r5,r10                ;1554
00090c  f8aa7064          STRH     r7,[r10,#0x64]        ;1554
000910  5c21              LDRB     r1,[r4,r0]            ;1558
000912  1c40              ADDS     r0,r0,#1              ;1558
000914  2300              MOVS     r3,#0                 ;1555
000916  b280              UXTH     r0,r0                 ;1558
000918  292c              CMP      r1,#0x2c              ;1558
00091a  d10c              BNE      |L9.2358|
00091c  2100              MOVS     r1,#0                 ;1560
                  |L9.2334|
00091e  5c27              LDRB     r7,[r4,r0]            ;1562
000920  eb030383          ADD      r3,r3,r3,LSL #2       ;1562
000924  1c40              ADDS     r0,r0,#1              ;1562
000926  1c49              ADDS     r1,r1,#1              ;1562
000928  eb060343          ADD      r3,r6,r3,LSL #1       ;1562
00092c  b2c9              UXTB     r1,r1                 ;1560
00092e  443b              ADD      r3,r3,r7              ;1562
000930  b280              UXTH     r0,r0                 ;1562
000932  2905              CMP      r1,#5                 ;1560
000934  d3f3              BCC      |L9.2334|
                  |L9.2358|
000936  f8a53066          STRH     r3,[r5,#0x66]         ;1565
00093a  5c23              LDRB     r3,[r4,r0]            ;1568
00093c  1c40              ADDS     r0,r0,#1              ;1568
00093e  2100              MOVS     r1,#0                 ;1566
000940  b285              UXTH     r5,r0                 ;1568
000942  2b2c              CMP      r3,#0x2c              ;1568
000944  d10c              BNE      |L9.2400|
000946  2000              MOVS     r0,#0                 ;1570
                  |L9.2376|
000948  5d63              LDRB     r3,[r4,r5]            ;1572
00094a  1c6d              ADDS     r5,r5,#1              ;1572
00094c  eb010181          ADD      r1,r1,r1,LSL #2       ;1572
000950  eb060141          ADD      r1,r6,r1,LSL #1       ;1572
000954  1c40              ADDS     r0,r0,#1              ;1572
000956  4419              ADD      r1,r1,r3              ;1572
000958  b2ad              UXTH     r5,r5                 ;1572
00095a  f01000ff          ANDS     r0,r0,#0xff           ;1570
00095e  d0f3              BEQ      |L9.2376|
                  |L9.2400|
000960  e0b8              B        |L9.2772|
                  |L9.2402|
000962  5d62              LDRB     r2,[r4,r5]            ;1579
000964  1c6d              ADDS     r5,r5,#1              ;1579
000966  b2a8              UXTH     r0,r5                 ;1579
000968  2a2c              CMP      r2,#0x2c              ;1579
00096a  d106              BNE      |L9.2426|
00096c  2200              MOVS     r2,#0                 ;1581
                  |L9.2414|
00096e  1c40              ADDS     r0,r0,#1              ;1581
000970  1c52              ADDS     r2,r2,#1              ;1583
000972  b2d2              UXTB     r2,r2                 ;1581
000974  b280              UXTH     r0,r0                 ;1583
000976  2a05              CMP      r2,#5                 ;1581
000978  d3f9              BCC      |L9.2414|
                  |L9.2426|
00097a  5c23              LDRB     r3,[r4,r0]            ;1589
00097c  1c40              ADDS     r0,r0,#1              ;1589
00097e  2200              MOVS     r2,#0                 ;1587
000980  b285              UXTH     r5,r0                 ;1589
000982  2b2c              CMP      r3,#0x2c              ;1589
000984  d10c              BNE      |L9.2464|
000986  2000              MOVS     r0,#0                 ;1591
                  |L9.2440|
000988  5d63              LDRB     r3,[r4,r5]            ;1593
00098a  eb020282          ADD      r2,r2,r2,LSL #2       ;1593
00098e  1c6d              ADDS     r5,r5,#1              ;1593
000990  1c40              ADDS     r0,r0,#1              ;1593
000992  eb060242          ADD      r2,r6,r2,LSL #1       ;1593
000996  b2c0              UXTB     r0,r0                 ;1591
000998  441a              ADD      r2,r2,r3              ;1593
00099a  b2ad              UXTH     r5,r5                 ;1593
00099c  2805              CMP      r0,#5                 ;1591
00099e  d3f3              BCC      |L9.2440|
                  |L9.2464|
0009a0  f8ca2014          STR      r2,[r10,#0x14]        ;1596  ; Para
0009a4  f8da0014          LDR      r0,[r10,#0x14]        ;1600  ; Para
0009a8  2700              MOVS     r7,#0                 ;1597
0009aa  4288              CMP      r0,r1                 ;1600
0009ac  d907              BLS      |L9.2494|
0009ae  2001              MOVS     r0,#1                 ;1602
0009b0  f8c90020          STR      r0,[r9,#0x20]         ;1602  ; Run_Control
0009b4  02c1              LSLS     r1,r0,#11             ;1603
0009b6  4869              LDR      r0,|L9.2908|
0009b8  f7fffffe          BL       GPIO_ResetBits
0009bc  e007              B        |L9.2510|
                  |L9.2494|
0009be  2000              MOVS     r0,#0                 ;1605
0009c0  f8c90020          STR      r0,[r9,#0x20]         ;1605  ; Run_Control
0009c4  f44f6100          MOV      r1,#0x800             ;1606
0009c8  4864              LDR      r0,|L9.2908|
0009ca  f7fffffe          BL       GPIO_SetBits
                  |L9.2510|
0009ce  5d60              LDRB     r0,[r4,r5]            ;1608
0009d0  1c6d              ADDS     r5,r5,#1              ;1608
0009d2  b2ad              UXTH     r5,r5                 ;1608
0009d4  282c              CMP      r0,#0x2c              ;1608
0009d6  d10c              BNE      |L9.2546|
0009d8  2000              MOVS     r0,#0                 ;1610
                  |L9.2522|
0009da  5d61              LDRB     r1,[r4,r5]            ;1612
0009dc  eb070287          ADD      r2,r7,r7,LSL #2       ;1612
0009e0  eb060242          ADD      r2,r6,r2,LSL #1       ;1612
0009e4  1c6d              ADDS     r5,r5,#1              ;1612
0009e6  188f              ADDS     r7,r1,r2              ;1612
0009e8  1c40              ADDS     r0,r0,#1              ;1612
0009ea  b2ad              UXTH     r5,r5                 ;1612
0009ec  f01000ff          ANDS     r0,r0,#0xff           ;1610
0009f0  d0f3              BEQ      |L9.2522|
                  |L9.2546|
0009f2  f88b7006          STRB     r7,[r11,#6]           ;1615
0009f6  f89b0006          LDRB     r0,[r11,#6]           ;1616  ; mainswitch
0009fa  bbc0              CBNZ     r0,|L9.2670|
0009fc  2101              MOVS     r1,#1                 ;1618
0009fe  f8c91020          STR      r1,[r9,#0x20]         ;1618  ; Run_Control
                  |L9.2562|
000a02  f44f6100          MOV      r1,#0x800             ;1619
000a06  4855              LDR      r0,|L9.2908|
000a08  f7fffffe          BL       GPIO_ResetBits
000a0c  e063              B        |L9.2774|
                  |L9.2574|
000a0e  5d61              LDRB     r1,[r4,r5]            ;1622
000a10  1c6d              ADDS     r5,r5,#1              ;1622
000a12  b2a8              UXTH     r0,r5                 ;1622
000a14  292c              CMP      r1,#0x2c              ;1622
000a16  d106              BNE      |L9.2598|
000a18  2100              MOVS     r1,#0                 ;1624
                  |L9.2586|
000a1a  1c40              ADDS     r0,r0,#1              ;1624
000a1c  1c49              ADDS     r1,r1,#1              ;1626
000a1e  b2c9              UXTB     r1,r1                 ;1624
000a20  b280              UXTH     r0,r0                 ;1626
000a22  2905              CMP      r1,#5                 ;1624
000a24  d3f9              BCC      |L9.2586|
                  |L9.2598|
000a26  5c21              LDRB     r1,[r4,r0]            ;1631
000a28  1c40              ADDS     r0,r0,#1              ;1631
000a2a  b280              UXTH     r0,r0                 ;1631
000a2c  292c              CMP      r1,#0x2c              ;1631
000a2e  d106              BNE      |L9.2622|
000a30  2100              MOVS     r1,#0                 ;1633
                  |L9.2610|
000a32  1c40              ADDS     r0,r0,#1              ;1633
000a34  1c49              ADDS     r1,r1,#1              ;1635
000a36  b2c9              UXTB     r1,r1                 ;1633
000a38  b280              UXTH     r0,r0                 ;1635
000a3a  2905              CMP      r1,#5                 ;1633
000a3c  d3f9              BCC      |L9.2610|
                  |L9.2622|
000a3e  5c23              LDRB     r3,[r4,r0]            ;1640
000a40  1c40              ADDS     r0,r0,#1              ;1640
000a42  2100              MOVS     r1,#0                 ;1638
000a44  b285              UXTH     r5,r0                 ;1640
000a46  2b2c              CMP      r3,#0x2c              ;1640
000a48  d10c              BNE      |L9.2660|
000a4a  2000              MOVS     r0,#0                 ;1642
                  |L9.2636|
000a4c  5d63              LDRB     r3,[r4,r5]            ;1644
000a4e  1c6d              ADDS     r5,r5,#1              ;1644
000a50  eb010181          ADD      r1,r1,r1,LSL #2       ;1644
000a54  eb060141          ADD      r1,r6,r1,LSL #1       ;1644
000a58  1c40              ADDS     r0,r0,#1              ;1644
000a5a  4419              ADD      r1,r1,r3              ;1644
000a5c  b2ad              UXTH     r5,r5                 ;1644
000a5e  f01000ff          ANDS     r0,r0,#0xff           ;1642
000a62  d0f3              BEQ      |L9.2636|
                  |L9.2660|
000a64  7191              STRB     r1,[r2,#6]            ;1647
000a66  7990              LDRB     r0,[r2,#6]            ;1648  ; mainswitch
000a68  b908              CBNZ     r0,|L9.2670|
000a6a  2000              MOVS     r0,#0                 ;1650
000a6c  7190              STRB     r0,[r2,#6]            ;1650
                  |L9.2670|
000a6e  e032              B        |L9.2774|
                  |L9.2672|
000a70  5d61              LDRB     r1,[r4,r5]            ;1653
000a72  1c6d              ADDS     r5,r5,#1              ;1653
000a74  b2a8              UXTH     r0,r5                 ;1653
000a76  292c              CMP      r1,#0x2c              ;1653
000a78  d106              BNE      |L9.2696|
000a7a  2100              MOVS     r1,#0                 ;1655
                  |L9.2684|
000a7c  1c40              ADDS     r0,r0,#1              ;1655
000a7e  1c49              ADDS     r1,r1,#1              ;1657
000a80  b2c9              UXTB     r1,r1                 ;1655
000a82  b280              UXTH     r0,r0                 ;1657
000a84  2905              CMP      r1,#5                 ;1655
000a86  d3f9              BCC      |L9.2684|
                  |L9.2696|
000a88  5c21              LDRB     r1,[r4,r0]            ;1662
000a8a  1c40              ADDS     r0,r0,#1              ;1662
000a8c  b280              UXTH     r0,r0                 ;1662
000a8e  292c              CMP      r1,#0x2c              ;1662
000a90  d10d              BNE      |L9.2734|
000a92  2100              MOVS     r1,#0                 ;1664
                  |L9.2708|
000a94  1c40              ADDS     r0,r0,#1              ;1664
000a96  e005              B        |L9.2724|
                  |L9.2712|
000a98  e124              B        |L9.3300|
                  |L9.2714|
000a9a  e143              B        |L9.3364|
                  |L9.2716|
000a9c  e0e9              B        |L9.3186|
                  |L9.2718|
000a9e  e0a6              B        |L9.3054|
                  |L9.2720|
000aa0  e022              B        |L9.2792|
                  |L9.2722|
000aa2  e085              B        |L9.2992|
                  |L9.2724|
000aa4  1c49              ADDS     r1,r1,#1              ;1666
000aa6  b2c9              UXTB     r1,r1                 ;1664
000aa8  b280              UXTH     r0,r0                 ;1666
000aaa  2905              CMP      r1,#5                 ;1664
000aac  d3f2              BCC      |L9.2708|
                  |L9.2734|
000aae  5c23              LDRB     r3,[r4,r0]            ;1671
000ab0  1c40              ADDS     r0,r0,#1              ;1671
000ab2  2100              MOVS     r1,#0                 ;1669
000ab4  b285              UXTH     r5,r0                 ;1671
000ab6  2b2c              CMP      r3,#0x2c              ;1671
000ab8  d10c              BNE      |L9.2772|
000aba  2000              MOVS     r0,#0                 ;1673
                  |L9.2748|
000abc  5d63              LDRB     r3,[r4,r5]            ;1675
000abe  1c6d              ADDS     r5,r5,#1              ;1675
000ac0  eb010181          ADD      r1,r1,r1,LSL #2       ;1675
000ac4  eb060141          ADD      r1,r6,r1,LSL #1       ;1675
000ac8  1c40              ADDS     r0,r0,#1              ;1675
000aca  4419              ADD      r1,r1,r3              ;1675
000acc  b2ad              UXTH     r5,r5                 ;1675
000ace  f01000ff          ANDS     r0,r0,#0xff           ;1673
000ad2  d0f3              BEQ      |L9.2748|
                  |L9.2772|
000ad4  7191              STRB     r1,[r2,#6]            ;1678
                  |L9.2774|
000ad6  f7fffffe          BL       Off_GPOI_ResetSet
000ada  f89b0006          LDRB     r0,[r11,#6]           ;1684  ; mainswitch
000ade  f7fffffe          BL       LIST_ONOFF
000ae2  e40a              B        |L9.762|
                  |L9.2788|
000ae4  e0fb              B        |L9.3294|
                  |L9.2790|
000ae6  e13c              B        |L9.3426|
                  |L9.2792|
000ae8  5d60              LDRB     r0,[r4,r5]            ;1691
000aea  2308              MOVS     r3,#8                 ;1690
000aec  283f              CMP      r0,#0x3f              ;1691
000aee  d019              BEQ      |L9.2852|
000af0  2201              MOVS     r2,#1                 ;1700
000af2  2100              MOVS     r1,#0                 ;1701
                  |L9.2804|
000af4  b141              CBZ      r1,|L9.2824|
000af6  2904              CMP      r1,#4                 ;1703
000af8  d006              BEQ      |L9.2824|
000afa  1868              ADDS     r0,r5,r1              ;1705
000afc  5c20              LDRB     r0,[r4,r0]            ;1705
000afe  f7fffffe          BL       IsDigitChar
000b02  2801              CMP      r0,#1                 ;1705
000b04  d032              BEQ      |L9.2924|
000b06  2200              MOVS     r2,#0                 ;1711
                  |L9.2824|
000b08  1c49              ADDS     r1,r1,#1              ;1711
000b0a  b2c9              UXTB     r1,r1                 ;1701
000b0c  4299              CMP      r1,r3                 ;1701
000b0e  d3f1              BCC      |L9.2804|
000b10  2a01              CMP      r2,#1                 ;1714
                  |L9.2834|
000b12  f47faa8e          BNE      |L9.50|
000b16  18e8              ADDS     r0,r5,r3              ;1714
000b18  5c20              LDRB     r0,[r4,r0]            ;1714
000b1a  280d              CMP      r0,#0xd               ;1714
000b1c  d1f9              BNE      |L9.2834|
000b1e  2200              MOVS     r2,#0                 ;1719
000b20  4610              MOV      r0,r2                 ;1720
000b22  e03c              B        |L9.2974|
                  |L9.2852|
000b24  eeb58ac0          VCMPE.F32 s16,#0.0              ;1693
000b28  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1693
000b2c  db01              BLT      |L9.2866|
000b2e  202b              MOVS     r0,#0x2b              ;1693
000b30  e000              B        |L9.2868|
                  |L9.2866|
000b32  202d              MOVS     r0,#0x2d              ;1693
                  |L9.2868|
000b34  5560              STRB     r0,[r4,r5]            ;1693
000b36  1c6d              ADDS     r5,r5,#1              ;1693
000b38  b2ad              UXTH     r5,r5                 ;1693
000b3a  ee180a10          VMOV     r0,s16                ;1694
000b3e  f7fffffe          BL       __aeabi_f2d
000b42  ec410b10          VMOV     d0,r0,r1              ;1694
000b46  1960              ADDS     r0,r4,r5              ;1694
000b48  ec532b10          VMOV     r2,r3,d0              ;1694
000b4c  a105              ADR      r1,|L9.2916|
000b4e  f7fffffe          BL       __2sprintf
000b52  3508              ADDS     r5,r5,#8              ;1694
000b54  e0c3              B        |L9.3294|
000b56  0000              DCW      0x0000
                  |L9.2904|
                          DCD      Run_Control
                  |L9.2908|
                          DCD      0x40020800
                  |L9.2912|
                          DCD      finishflag
                  |L9.2916|
000b64  2530332e          DCB      "%03.3f",0
000b68  336600  
000b6b  00                DCB      0
                  |L9.2924|
000b6c  f0020201          AND      r2,r2,#1              ;1707
000b70  e7ca              B        |L9.2824|
                  |L9.2930|
000b72  b150              CBZ      r0,|L9.2954|
000b74  2804              CMP      r0,#4                 ;1727
000b76  d005              BEQ      |L9.2948|
000b78  5d61              LDRB     r1,[r4,r5]            ;1733
000b7a  eb020282          ADD      r2,r2,r2,LSL #2       ;1733
000b7e  eb060242          ADD      r2,r6,r2,LSL #1       ;1733
000b82  440a              ADD      r2,r2,r1              ;1733
                  |L9.2948|
000b84  1c6d              ADDS     r5,r5,#1              ;1733
000b86  b2ad              UXTH     r5,r5                 ;1729
000b88  e007              B        |L9.2970|
                  |L9.2954|
000b8a  5d61              LDRB     r1,[r4,r5]            ;1724
000b8c  1c6d              ADDS     r5,r5,#1              ;1724
000b8e  3930              SUBS     r1,r1,#0x30           ;1724
000b90  ee001a10          VMOV     s0,r1                 ;1724
000b94  b2ad              UXTH     r5,r5                 ;1724
000b96  eeb88ac0          VCVT.F32.S32 s16,s0                ;1724
                  |L9.2970|
000b9a  1c40              ADDS     r0,r0,#1              ;1724
000b9c  b2c0              UXTB     r0,r0                 ;1720
                  |L9.2974|
000b9e  4298              CMP      r0,r3                 ;1720
000ba0  d3e7              BCC      |L9.2930|
000ba2  eebc0ac8          VCVT.U32.F32 s0,s16                ;1735
000ba6  ee100a10          VMOV     r0,s0                 ;1735
000baa  b2c1              UXTB     r1,r0                 ;1735
000bac  2000              MOVS     r0,#0                 ;1735
000bae  e05d              B        |L9.3180|
                  |L9.2992|
000bb0  5d61              LDRB     r1,[r4,r5]            ;1741
000bb2  2201              MOVS     r2,#1                 ;1740
000bb4  293f              CMP      r1,#0x3f              ;1741
000bb6  d013              BEQ      |L9.3040|
000bb8  2100              MOVS     r1,#0                 ;1751
000bba  4608              MOV      r0,r1                 ;1751
                  |L9.3004|
000bbc  5d63              LDRB     r3,[r4,r5]            ;1753
000bbe  eb000080          ADD      r0,r0,r0,LSL #2       ;1753
000bc2  1c6d              ADDS     r5,r5,#1              ;1753
000bc4  1c49              ADDS     r1,r1,#1              ;1753
000bc6  eb060040          ADD      r0,r6,r0,LSL #1       ;1753
000bca  b2c9              UXTB     r1,r1                 ;1751
000bcc  4418              ADD      r0,r0,r3              ;1753
000bce  b2ad              UXTH     r5,r5                 ;1753
000bd0  4291              CMP      r1,r2                 ;1751
000bd2  d3f3              BCC      |L9.3004|
000bd4  2801              CMP      r0,#1                 ;1755
000bd6  f63fab7c          BHI      |L9.722|
000bda  4967              LDR      r1,|L9.3448|
000bdc  7008              STRB     r0,[r1,#0]            ;1762
000bde  e567              B        |L9.1712|
                  |L9.3040|
000be0  7802              LDRB     r2,[r0,#0]            ;1743  ; C_DISCHARGE
000be2  1963              ADDS     r3,r4,r5              ;1743
000be4  f2af7170          ADR      r1,|L9.1144|
000be8  4618              MOV      r0,r3                 ;1743
000bea  f7ffbb7c          B        |L9.742|
                  |L9.3054|
000bee  5d60              LDRB     r0,[r4,r5]            ;1775
000bf0  2308              MOVS     r3,#8                 ;1774
000bf2  283f              CMP      r0,#0x3f              ;1775
000bf4  d076              BEQ      |L9.3300|
000bf6  2201              MOVS     r2,#1                 ;1784
000bf8  2100              MOVS     r1,#0                 ;1785
                  |L9.3066|
000bfa  b141              CBZ      r1,|L9.3086|
000bfc  2904              CMP      r1,#4                 ;1787
000bfe  d006              BEQ      |L9.3086|
000c00  1868              ADDS     r0,r5,r1              ;1789
000c02  5c20              LDRB     r0,[r4,r0]            ;1789
000c04  f7fffffe          BL       IsDigitChar
000c08  2801              CMP      r0,#1                 ;1789
000c0a  d00e              BEQ      |L9.3114|
000c0c  2200              MOVS     r2,#0                 ;1795
                  |L9.3086|
000c0e  1c49              ADDS     r1,r1,#1              ;1795
000c10  b2c9              UXTB     r1,r1                 ;1785
000c12  4299              CMP      r1,r3                 ;1785
000c14  d3f1              BCC      |L9.3066|
000c16  2a01              CMP      r2,#1                 ;1798
                  |L9.3096|
000c18  f47faa0b          BNE      |L9.50|
000c1c  18e8              ADDS     r0,r5,r3              ;1798
000c1e  5c20              LDRB     r0,[r4,r0]            ;1798
000c20  280d              CMP      r0,#0xd               ;1798
000c22  d1f9              BNE      |L9.3096|
000c24  2200              MOVS     r2,#0                 ;1803
000c26  4610              MOV      r0,r2                 ;1804
000c28  e018              B        |L9.3164|
                  |L9.3114|
000c2a  f0020201          AND      r2,r2,#1              ;1791
000c2e  e7ee              B        |L9.3086|
                  |L9.3120|
000c30  b150              CBZ      r0,|L9.3144|
000c32  2804              CMP      r0,#4                 ;1811
000c34  d005              BEQ      |L9.3138|
000c36  5d61              LDRB     r1,[r4,r5]            ;1817
000c38  eb020282          ADD      r2,r2,r2,LSL #2       ;1817
000c3c  eb060242          ADD      r2,r6,r2,LSL #1       ;1817
000c40  440a              ADD      r2,r2,r1              ;1817
                  |L9.3138|
000c42  1c6d              ADDS     r5,r5,#1              ;1817
000c44  b2ad              UXTH     r5,r5                 ;1813
000c46  e007              B        |L9.3160|
                  |L9.3144|
000c48  5d61              LDRB     r1,[r4,r5]            ;1808
000c4a  1c6d              ADDS     r5,r5,#1              ;1808
000c4c  3930              SUBS     r1,r1,#0x30           ;1808
000c4e  ee001a10          VMOV     s0,r1                 ;1808
000c52  b2ad              UXTH     r5,r5                 ;1808
000c54  eeb88ac0          VCVT.F32.S32 s16,s0                ;1808
                  |L9.3160|
000c58  1c40              ADDS     r0,r0,#1              ;1808
000c5a  b2c0              UXTB     r0,r0                 ;1804
                  |L9.3164|
000c5c  4298              CMP      r0,r3                 ;1804
000c5e  d3e7              BCC      |L9.3120|
000c60  eebc0ac8          VCVT.U32.F32 s0,s16                ;1819
000c64  ee100a10          VMOV     r0,s0                 ;1819
000c68  b2c1              UXTB     r1,r0                 ;1819
000c6a  2001              MOVS     r0,#1                 ;1819
                  |L9.3180|
000c6c  f7fffffe          BL       CalHandle
000c70  e077              B        |L9.3426|
                  |L9.3186|
000c72  5d60              LDRB     r0,[r4,r5]            ;1826
000c74  2306              MOVS     r3,#6                 ;1825
000c76  283f              CMP      r0,#0x3f              ;1826
000c78  d018              BEQ      |L9.3244|
000c7a  2201              MOVS     r2,#1                 ;1835
000c7c  2100              MOVS     r1,#0                 ;1836
                  |L9.3198|
000c7e  b141              CBZ      r1,|L9.3218|
000c80  2904              CMP      r1,#4                 ;1838
000c82  d006              BEQ      |L9.3218|
000c84  1868              ADDS     r0,r5,r1              ;1840
000c86  5c20              LDRB     r0,[r4,r0]            ;1840
000c88  f7fffffe          BL       IsDigitChar
000c8c  2801              CMP      r0,#1                 ;1840
000c8e  d02a              BEQ      |L9.3302|
000c90  2200              MOVS     r2,#0                 ;1846
                  |L9.3218|
000c92  1c49              ADDS     r1,r1,#1              ;1846
000c94  b2c9              UXTB     r1,r1                 ;1836
000c96  4299              CMP      r1,r3                 ;1836
000c98  d3f1              BCC      |L9.3198|
000c9a  2a01              CMP      r2,#1                 ;1849
000c9c  d1bc              BNE      |L9.3096|
000c9e  18e8              ADDS     r0,r5,r3              ;1849
000ca0  5c20              LDRB     r0,[r4,r0]            ;1849
000ca2  280d              CMP      r0,#0xd               ;1849
000ca4  d1b8              BNE      |L9.3096|
000ca6  2200              MOVS     r2,#0                 ;1854
000ca8  4610              MOV      r0,r2                 ;1855
000caa  e02a              B        |L9.3330|
                  |L9.3244|
000cac  eeb58ac0          VCMPE.F32 s16,#0.0              ;1828
000cb0  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1828
000cb4  db01              BLT      |L9.3258|
000cb6  202b              MOVS     r0,#0x2b              ;1828
000cb8  e000              B        |L9.3260|
                  |L9.3258|
000cba  202d              MOVS     r0,#0x2d              ;1828
                  |L9.3260|
000cbc  5560              STRB     r0,[r4,r5]            ;1828
000cbe  1c6d              ADDS     r5,r5,#1              ;1828
000cc0  b2ad              UXTH     r5,r5                 ;1828
000cc2  ee180a10          VMOV     r0,s16                ;1829
000cc6  f7fffffe          BL       __aeabi_f2d
000cca  ec410b10          VMOV     d0,r0,r1              ;1829
000cce  1960              ADDS     r0,r4,r5              ;1829
000cd0  ec532b10          VMOV     r2,r3,d0              ;1829
000cd4  f2af1174          ADR      r1,|L9.2916|
000cd8  f7fffffe          BL       __2sprintf
000cdc  1dad              ADDS     r5,r5,#6              ;1829
                  |L9.3294|
000cde  b2a8              UXTH     r0,r5                 ;1830
000ce0  f7ffbad6          B        |L9.656|
                  |L9.3300|
000ce4  e041              B        |L9.3434|
                  |L9.3302|
000ce6  f0020201          AND      r2,r2,#1              ;1842
000cea  e7d2              B        |L9.3218|
                  |L9.3308|
000cec  5d61              LDRB     r1,[r4,r5]            ;1868
000cee  b188              CBZ      r0,|L9.3348|
000cf0  eb020282          ADD      r2,r2,r2,LSL #2       ;1868
000cf4  eb060242          ADD      r2,r6,r2,LSL #1       ;1868
000cf8  1c6d              ADDS     r5,r5,#1              ;1868
000cfa  440a              ADD      r2,r2,r1              ;1868
000cfc  b2ad              UXTH     r5,r5                 ;1868
                  |L9.3326|
000cfe  1c40              ADDS     r0,r0,#1              ;1868
000d00  b2c0              UXTB     r0,r0                 ;1855
                  |L9.3330|
000d02  4298              CMP      r0,r3                 ;1855
000d04  d3f2              BCC      |L9.3308|
000d06  eebc0ac8          VCVT.U32.F32 s0,s16                ;1870
000d0a  ee100a10          VMOV     r0,s0                 ;1870
000d0e  b2c1              UXTB     r1,r0                 ;1870
000d10  2002              MOVS     r0,#2                 ;1870
000d12  e7ab              B        |L9.3180|
                  |L9.3348|
000d14  1c6d              ADDS     r5,r5,#1              ;1870
000d16  3930              SUBS     r1,r1,#0x30           ;1859
000d18  ee001a10          VMOV     s0,r1                 ;1859
000d1c  b2ad              UXTH     r5,r5                 ;1859
000d1e  eeb88ac0          VCVT.F32.S32 s16,s0                ;1859
000d22  e7ec              B        |L9.3326|
                  |L9.3364|
000d24  5d60              LDRB     r0,[r4,r5]            ;1876
000d26  283f              CMP      r0,#0x3f              ;1876
000d28  d01f              BEQ      |L9.3434|
000d2a  2101              MOVS     r1,#1                 ;1885
000d2c  2000              MOVS     r0,#0                 ;1886
000d2e  4607              MOV      r7,r0                 ;1886
                  |L9.3376|
000d30  5d62              LDRB     r2,[r4,r5]            ;1888
000d32  eb070387          ADD      r3,r7,r7,LSL #2       ;1888
000d36  eb060343          ADD      r3,r6,r3,LSL #1       ;1888
000d3a  1c6d              ADDS     r5,r5,#1              ;1888
000d3c  1c40              ADDS     r0,r0,#1              ;1888
000d3e  18d7              ADDS     r7,r2,r3              ;1888
000d40  b2c0              UXTB     r0,r0                 ;1886
000d42  b2ad              UXTH     r5,r5                 ;1888
000d44  4288              CMP      r0,r1                 ;1886
000d46  d3f3              BCC      |L9.3376|
000d48  2f01              CMP      r7,#1                 ;1890
000d4a  f63faac2          BHI      |L9.722|
000d4e  490b              LDR      r1,|L9.3452|
000d50  2001              MOVS     r0,#1                 ;1896
000d52  7008              STRB     r0,[r1,#0]            ;1896
000d54  f7fffffe          BL       Write_Boot_Flag
000d58  2f01              CMP      r7,#1                 ;1898
000d5a  d102              BNE      |L9.3426|
000d5c  2037              MOVS     r0,#0x37              ;1900
000d5e  f7fffffe          BL       JumpBoot
                  |L9.3426|
000d62  f1b80f13          CMP      r8,#0x13              ;2020
000d66  f4bfa964          BCS      |L9.50|
                  |L9.3434|
000d6a  b033              ADD      sp,sp,#0xcc
000d6c  1c6d              ADDS     r5,r5,#1              ;2020
000d6e  ecbd8b02          VPOP     {d8}
000d72  b2a8              UXTH     r0,r5                 ;2024
000d74  e8bd8ff0          POP      {r4-r11,pc}
;;;2026   
                          ENDP

                  |L9.3448|
                          DCD      overflag
                  |L9.3452|
                          DCD      bootflag

                          AREA ||i.SetErr_ACK||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  SetErr_ACK PROC
;;;959    
;;;960    u16 SetErr_ACK(char *buf, u8 addr ,u8 ucErr)
000000  b5f8              PUSH     {r3-r7,lr}
;;;961    {
000002  4604              MOV      r4,r0
;;;962    		u16 i=0;
;;;963    		u8 len = 0;
;;;964    		char stradd[3] = {0};
000004  2000              MOVS     r0,#0
;;;965    		int addlen=0;
;;;966    		memset(buf,0,sizeof(buf));
000006  9000              STR      r0,[sp,#0]
000008  6020              STR      r0,[r4,#0]
00000a  4616              MOV      r6,r2                 ;961
;;;967        	buf[i++] = ChrStartS;
00000c  203e              MOVS     r0,#0x3e
00000e  7020              STRB     r0,[r4,#0]
;;;968    		sprintf(stradd,"%d",addr);
000010  460a              MOV      r2,r1
000012  a11a              ADR      r1,|L10.124|
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       __2sprintf
;;;969    		addlen=strlen(stradd);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       strlen
000020  4605              MOV      r5,r0
;;;970    		strncat(&buf[i],stradd,addlen);
000022  1c60              ADDS     r0,r4,#1
000024  462a              MOV      r2,r5
000026  4669              MOV      r1,sp
000028  f7fffffe          BL       strncat
00002c  1c6d              ADDS     r5,r5,#1
;;;971    		i+=addlen;
00002e  b2a8              UXTH     r0,r5
;;;972    		buf[i++] = '/';
000030  212f              MOVS     r1,#0x2f
000032  5421              STRB     r1,[r4,r0]
000034  1c40              ADDS     r0,r0,#1
000036  b285              UXTH     r5,r0
;;;973    		switch(ucErr)
000038  2e01              CMP      r6,#1
00003a  d008              BEQ      |L10.78|
00003c  2e02              CMP      r6,#2
00003e  d001              BEQ      |L10.68|
000040  2e03              CMP      r6,#3
000042  d015              BEQ      |L10.112|
                  |L10.68|
;;;974            {
;;;975              case 1:         //
;;;976              	   len = 9;
;;;977              	   memmove(&buf[i],"PARA ERR!",len);   
;;;978              	   break;
;;;979    	      case 2:         //
;;;980              	   len = 8;
;;;981              	   memmove(&buf[i],"CMD ERR!",len);   
;;;982              	   break;
;;;983    	      case 3:         //
;;;984              	   len = 8;
;;;985              	   memmove(&buf[i],"REM ERR!",len);   
;;;986              	   break;
;;;987    		  default:    
;;;988                   len = 8;
000044  2608              MOVS     r6,#8
;;;989              	   memmove(&buf[i],"CMD ERR!",len);   
000046  1960              ADDS     r0,r4,r5
000048  4632              MOV      r2,r6
00004a  a10d              ADR      r1,|L10.128|
;;;990                   break;
00004c  e003              B        |L10.86|
                  |L10.78|
00004e  2609              MOVS     r6,#9                 ;976
000050  1960              ADDS     r0,r4,r5              ;977
000052  4632              MOV      r2,r6                 ;977
000054  a10d              ADR      r1,|L10.140|
                  |L10.86|
000056  f7fffffe          BL       __aeabi_memmove
;;;991    	    }
;;;992    	    i+=len;
00005a  19a8              ADDS     r0,r5,r6
00005c  b280              UXTH     r0,r0
;;;993    		buf[i++] = ChrEndR;
00005e  210d              MOVS     r1,#0xd
000060  5421              STRB     r1,[r4,r0]
000062  1c40              ADDS     r0,r0,#1
000064  b280              UXTH     r0,r0
;;;994    		buf[i++] = ChrEndS;
000066  210a              MOVS     r1,#0xa
000068  5421              STRB     r1,[r4,r0]
00006a  1c40              ADDS     r0,r0,#1
00006c  b280              UXTH     r0,r0
;;;995    		return i;
;;;996    }
00006e  bdf8              POP      {r3-r7,pc}
                  |L10.112|
000070  2608              MOVS     r6,#8                 ;984
000072  1960              ADDS     r0,r4,r5              ;985
000074  4632              MOV      r2,r6                 ;985
000076  a108              ADR      r1,|L10.152|
000078  e7ed              B        |L10.86|
;;;997    
                          ENDP

00007a  0000              DCW      0x0000
                  |L10.124|
00007c  256400            DCB      "%d",0
00007f  00                DCB      0
                  |L10.128|
000080  434d4420          DCB      "CMD ERR!",0
000084  45525221
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L10.140|
00008c  50415241          DCB      "PARA ERR!",0
000090  20455252
000094  2100    
000096  00                DCB      0
000097  00                DCB      0
                  |L10.152|
000098  52454d20          DCB      "REM ERR!",0
00009c  45525221
0000a0  00      
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0

                          AREA ||i.SetListPC||, CODE, READONLY, ALIGN=2

                  SetListPC PROC
;;;161    
;;;162    void SetListPC(void)
000000  4804              LDR      r0,|L11.20|
;;;163    {
000002  b510              PUSH     {r4,lr}
;;;164    	SetPowerC(Para.CDC_Limit_C);
000004  f8b00066          LDRH     r0,[r0,#0x66]  ; Para
000008  f7fffffe          BL       SetPowerC
;;;165    	listsend = 3;
00000c  4902              LDR      r1,|L11.24|
00000e  2003              MOVS     r0,#3
000010  7248              STRB     r0,[r1,#9]
;;;166    }
000012  bd10              POP      {r4,pc}
;;;167    
                          ENDP

                  |L11.20|
                          DCD      Para
                  |L11.24|
                          DCD      ||.data||

                          AREA ||i.SetListPS||, CODE, READONLY, ALIGN=2

                  SetListPS PROC
;;;168    
;;;169    void SetListPS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;170    {
;;;171    	if(mainswitch == 1)
000002  4c0f              LDR      r4,|L12.64|
000004  79a0              LDRB     r0,[r4,#6]  ; mainswitch
;;;172    	{
;;;173    		GPIO_SetBits(GPIOE,GPIO_Pin_2);
000006  4d0f              LDR      r5,|L12.68|
000008  2801              CMP      r0,#1                 ;171
00000a  d109              BNE      |L12.32|
00000c  2104              MOVS     r1,#4
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       GPIO_SetBits
;;;174    		Delay_ms(POWER_SW_DELAY);
000014  200a              MOVS     r0,#0xa
000016  f7fffffe          BL       Delay_ms
;;;175    		PowerSwitch(mainswitch);
00001a  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00001c  f7fffffe          BL       PowerSwitch
                  |L12.32|
;;;176    	}
;;;177    	
;;;178    	if(mainswitch == 0)
000020  79a0              LDRB     r0,[r4,#6]  ; mainswitch
000022  b948              CBNZ     r0,|L12.56|
;;;179    	{
;;;180    		PowerSwitch(mainswitch);
000024  79a0              LDRB     r0,[r4,#6]  ; mainswitch
000026  f7fffffe          BL       PowerSwitch
;;;181    		Delay_ms(POWER_SW_DELAY);
00002a  200a              MOVS     r0,#0xa
00002c  f7fffffe          BL       Delay_ms
;;;182    		GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
000030  2104              MOVS     r1,#4
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       GPIO_ResetBits
                  |L12.56|
;;;183    	}
;;;184    	
;;;185    	listsend = 0;
000038  2000              MOVS     r0,#0
00003a  7260              STRB     r0,[r4,#9]
;;;186    }
00003c  bd70              POP      {r4-r6,pc}
;;;187    
                          ENDP

00003e  0000              DCW      0x0000
                  |L12.64|
                          DCD      ||.data||
                  |L12.68|
                          DCD      0x40021000

                          AREA ||i.SetListPV||, CODE, READONLY, ALIGN=2

                  SetListPV PROC
;;;155    }
;;;156    void SetListPV(void)
000000  4804              LDR      r0,|L13.20|
;;;157    {
000002  b510              PUSH     {r4,lr}
;;;158    	SetPowerV(Para.CDC_OutPut_V);
000004  f8b00064          LDRH     r0,[r0,#0x64]  ; Para
000008  f7fffffe          BL       SetPowerV
;;;159    	listsend = 2;
00000c  4902              LDR      r1,|L13.24|
00000e  2002              MOVS     r0,#2
000010  7248              STRB     r0,[r1,#9]
;;;160    }
000012  bd10              POP      {r4,pc}
;;;161    
                          ENDP

                  |L13.20|
                          DCD      Para
                  |L13.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerC||, CODE, READONLY, ALIGN=2

                  SetPowerC PROC
;;;114    
;;;115    void SetPowerC(vu16 powc)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;116    {
;;;117    	MasterSendbuf[0] = 0x01;
000002  4c12              LDR      r4,|L14.76|
000004  2001              MOVS     r0,#1
000006  7020              STRB     r0,[r4,#0]
;;;118    	MasterSendbuf[1] = 0x06;
000008  2006              MOVS     r0,#6
00000a  7060              STRB     r0,[r4,#1]
;;;119    	MasterSendbuf[2] = 0x00;
00000c  2000              MOVS     r0,#0
00000e  70a0              STRB     r0,[r4,#2]
;;;120    	MasterSendbuf[3] = 0x31;
000010  2031              MOVS     r0,#0x31
000012  70e0              STRB     r0,[r4,#3]
;;;121    	MasterSendbuf[4] = (u8)(powc/10>>8);
000014  f8bd1000          LDRH     r1,[sp,#0]
000018  200a              MOVS     r0,#0xa
00001a  fbb1f1f0          UDIV     r1,r1,r0
00001e  0a09              LSRS     r1,r1,#8
000020  7121              STRB     r1,[r4,#4]
;;;122    	MasterSendbuf[5] = (u8)(powc/10);
000022  f8bd1000          LDRH     r1,[sp,#0]
000026  fbb1f0f0          UDIV     r0,r1,r0
00002a  7160              STRB     r0,[r4,#5]
;;;123    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00002c  2106              MOVS     r1,#6
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       Hardware_CRC
000034  71a0              STRB     r0,[r4,#6]
;;;124    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000036  2106              MOVS     r1,#6
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       Hardware_CRC
00003e  0a00              LSRS     r0,r0,#8
000040  71e0              STRB     r0,[r4,#7]
;;;125    	USART3WriteDMA(8);
000042  e8bd4038          POP      {r3-r5,lr}
000046  2008              MOVS     r0,#8
000048  f7ffbffe          B.W      USART3WriteDMA
;;;126    }
;;;127    
                          ENDP

                  |L14.76|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.SetPowerModeC||, CODE, READONLY, ALIGN=2

                  SetPowerModeC PROC
;;;133    
;;;134    void SetPowerModeC(void)
000000  4804              LDR      r0,|L15.20|
;;;135    {
000002  b510              PUSH     {r4,lr}
;;;136    	SetPowerC(Para.POWER_Limit_C);
000004  f8b00056          LDRH     r0,[r0,#0x56]  ; Para
000008  f7fffffe          BL       SetPowerC
;;;137    	sendwait = 3;
00000c  4902              LDR      r1,|L15.24|
00000e  2003              MOVS     r0,#3
000010  7208              STRB     r0,[r1,#8]
;;;138    }
000012  bd10              POP      {r4,pc}
;;;139    
                          ENDP

                  |L15.20|
                          DCD      Para
                  |L15.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerModeS||, CODE, READONLY, ALIGN=2

                  SetPowerModeS PROC
;;;139    
;;;140    void SetPowerModeS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;141    {
;;;142    	if(mainswitch == 1)
000002  4c10              LDR      r4,|L16.68|
000004  79a0              LDRB     r0,[r4,#6]  ; mainswitch
;;;143    	{
;;;144    		GPIO_SetBits(GPIOE,GPIO_Pin_2);
000006  4d10              LDR      r5,|L16.72|
000008  2801              CMP      r0,#1                 ;142
00000a  d002              BEQ      |L16.18|
;;;145    		Delay_ms(POWER_SW_DELAY);
;;;146    		PowerSwitch(mainswitch);
;;;147    	}else if(mainswitch == 0)
00000c  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00000e  b158              CBZ      r0,|L16.40|
000010  e014              B        |L16.60|
                  |L16.18|
000012  2104              MOVS     r1,#4                 ;144
000014  4628              MOV      r0,r5                 ;144
000016  f7fffffe          BL       GPIO_SetBits
00001a  200a              MOVS     r0,#0xa               ;145
00001c  f7fffffe          BL       Delay_ms
000020  79a0              LDRB     r0,[r4,#6]            ;146  ; mainswitch
000022  f7fffffe          BL       PowerSwitch
000026  e009              B        |L16.60|
                  |L16.40|
;;;148    	{
;;;149    		PowerSwitch(mainswitch);
000028  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00002a  f7fffffe          BL       PowerSwitch
;;;150    		Delay_ms(POWER_SW_DELAY);
00002e  200a              MOVS     r0,#0xa
000030  f7fffffe          BL       Delay_ms
;;;151    		GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
000034  2104              MOVS     r1,#4
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       GPIO_ResetBits
                  |L16.60|
;;;152    	}
;;;153    	
;;;154    	sendwait = 0;
00003c  2000              MOVS     r0,#0
00003e  7220              STRB     r0,[r4,#8]
;;;155    }
000040  bd70              POP      {r4-r6,pc}
;;;156    void SetListPV(void)
                          ENDP

000042  0000              DCW      0x0000
                  |L16.68|
                          DCD      ||.data||
                  |L16.72|
                          DCD      0x40021000

                          AREA ||i.SetPowerModeV||, CODE, READONLY, ALIGN=2

                  SetPowerModeV PROC
;;;127    
;;;128    void SetPowerModeV(void)
000000  4804              LDR      r0,|L17.20|
;;;129    {
000002  b510              PUSH     {r4,lr}
;;;130    	SetPowerV(Para.POWER_OutPut_V);
000004  f8b00054          LDRH     r0,[r0,#0x54]  ; Para
000008  f7fffffe          BL       SetPowerV
;;;131    	sendwait = 2;
00000c  4902              LDR      r1,|L17.24|
00000e  2002              MOVS     r0,#2
000010  7208              STRB     r0,[r1,#8]
;;;132    }
000012  bd10              POP      {r4,pc}
;;;133    
                          ENDP

                  |L17.20|
                          DCD      Para
                  |L17.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerV||, CODE, READONLY, ALIGN=2

                  SetPowerV PROC
;;;101    }
;;;102    void SetPowerV(vu16 powv)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;103    {
;;;104    	MasterSendbuf[0] = 0x01;
000002  4c12              LDR      r4,|L18.76|
000004  2001              MOVS     r0,#1
000006  7020              STRB     r0,[r4,#0]
;;;105    	MasterSendbuf[1] = 0x06;
000008  2006              MOVS     r0,#6
00000a  7060              STRB     r0,[r4,#1]
;;;106    	MasterSendbuf[2] = 0x00;
00000c  2000              MOVS     r0,#0
00000e  70a0              STRB     r0,[r4,#2]
;;;107    	MasterSendbuf[3] = 0x30;
000010  2030              MOVS     r0,#0x30
000012  70e0              STRB     r0,[r4,#3]
;;;108    	MasterSendbuf[4] = (u8)(powv/10>>8);
000014  f8bd1000          LDRH     r1,[sp,#0]
000018  200a              MOVS     r0,#0xa
00001a  fbb1f1f0          UDIV     r1,r1,r0
00001e  0a09              LSRS     r1,r1,#8
000020  7121              STRB     r1,[r4,#4]
;;;109    	MasterSendbuf[5] = (u8)(powv/10);
000022  f8bd1000          LDRH     r1,[sp,#0]
000026  fbb1f0f0          UDIV     r0,r1,r0
00002a  7160              STRB     r0,[r4,#5]
;;;110    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00002c  2106              MOVS     r1,#6
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       Hardware_CRC
000034  71a0              STRB     r0,[r4,#6]
;;;111    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000036  2106              MOVS     r1,#6
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       Hardware_CRC
00003e  0a00              LSRS     r0,r0,#8
000040  71e0              STRB     r0,[r4,#7]
;;;112    	USART3WriteDMA(8);
000042  e8bd4038          POP      {r3-r5,lr}
000046  2008              MOVS     r0,#8
000048  f7ffbffe          B.W      USART3WriteDMA
;;;113    }
;;;114    
                          ENDP

                  |L18.76|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.UART1_Send||, CODE, READONLY, ALIGN=2

                  UART1_Send PROC
;;;2418   
;;;2419   void UART1_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2420   {
;;;2421   	static vu8 UART_Buffer_Send_pointer=0;
;;;2422   		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L19.72|
000004  78e0              LDRB     r0,[r4,#3]  ; UART_Buffer_Send_pointer
000006  7921              LDRB     r1,[r4,#4]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L19.56|
;;;2423            {
;;;2424   				 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L19.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L19.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L19.54|
;;;2425   				 {
;;;2426   					USART_SendData(USART1,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  78e1              LDRB     r1,[r4,#3]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  4d0d              LDR      r5,|L19.84|
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       USART_SendData
                  |L19.36|
;;;2427   					while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);//等待发送完成
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L19.36|
;;;2428   					UART_Buffer_Send_pointer++;
000030  78e0              LDRB     r0,[r4,#3]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  70e0              STRB     r0,[r4,#3]
                  |L19.54|
;;;2429   				 }
;;;2430            }
;;;2431   		else 
;;;2432   		{
;;;2433   			UART_Buffer_Send_pointer=0;
;;;2434   			UART_SEND_flag=0;//发送完成一帧数据
;;;2435   		}
;;;2436   }
000036  bd70              POP      {r4-r6,pc}
                  |L19.56|
000038  2000              MOVS     r0,#0                 ;2433
00003a  70e0              STRB     r0,[r4,#3]            ;2433
00003c  4806              LDR      r0,|L19.88|
00003e  6801              LDR      r1,[r0,#0]            ;2434  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;2434
000044  6001              STR      r1,[r0,#0]            ;2434  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;2437   
                          ENDP

                  |L19.72|
                          DCD      ||.data||
                  |L19.76|
                          DCD      ||area_number.31||
                  |L19.80|
                          DCD      ADDR
                  |L19.84|
                          DCD      0x40011000
                  |L19.88|
                          DCD      flagA

                          AREA ||i.UART2_Send||, CODE, READONLY, ALIGN=2

                  UART2_Send PROC
;;;2399   }
;;;2400   void UART2_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2401   {
;;;2402   	static vu8 UART_Buffer_Send_pointer=0;
;;;2403   		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L20.72|
000004  78a0              LDRB     r0,[r4,#2]  ; UART_Buffer_Send_pointer
000006  7921              LDRB     r1,[r4,#4]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L20.56|
;;;2404            {
;;;2405   					 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L20.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L20.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L20.54|
;;;2406   					 {
;;;2407   						USART_SendData(USART2,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  78a1              LDRB     r1,[r4,#2]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  480d              LDR      r0,|L20.84|
00001e  f7fffffe          BL       USART_SendData
;;;2408   						while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);//等待发送完成
000022  4d0d              LDR      r5,|L20.88|
                  |L20.36|
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L20.36|
;;;2409   						UART_Buffer_Send_pointer++;
000030  78a0              LDRB     r0,[r4,#2]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  70a0              STRB     r0,[r4,#2]
                  |L20.54|
;;;2410   					}
;;;2411            }
;;;2412   		else 
;;;2413   		{
;;;2414   			UART_Buffer_Send_pointer=0;
;;;2415   			UART_SEND_flag=0;//发送完成一帧数据
;;;2416   		}
;;;2417   }
000036  bd70              POP      {r4-r6,pc}
                  |L20.56|
000038  2000              MOVS     r0,#0                 ;2414
00003a  70a0              STRB     r0,[r4,#2]            ;2414
00003c  4807              LDR      r0,|L20.92|
00003e  6801              LDR      r1,[r0,#0]            ;2415  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;2415
000044  6001              STR      r1,[r0,#0]            ;2415  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;2418   
                          ENDP

                  |L20.72|
                          DCD      ||.data||
                  |L20.76|
                          DCD      ||area_number.31||
                  |L20.80|
                          DCD      ADDR
                  |L20.84|
                          DCD      0x40004400
                  |L20.88|
                          DCD      0x40011000
                  |L20.92|
                          DCD      flagA

                          AREA ||i.USART2_Configuration||, CODE, READONLY, ALIGN=2

                  USART2_Configuration PROC
;;;2095   
;;;2096   void USART2_Configuration(void)//串口初始化函数
000000  b570              PUSH     {r4-r6,lr}
;;;2097   {  
;;;2098   	GPIO_InitTypeDef GPIO_InitStructure;
;;;2099   	USART_InitTypeDef USART_InitStructure;
;;;2100   	
;;;2101   	/* config USART1 clock */
;;;2102   	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
000002  2101              MOVS     r1,#1
000004  b088              SUB      sp,sp,#0x20           ;2097
000006  0448              LSLS     r0,r1,#17
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;2103   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);
00000c  4e2a              LDR      r6,|L21.184|
00000e  2207              MOVS     r2,#7
000010  2102              MOVS     r1,#2
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2104   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);
000018  2207              MOVS     r2,#7
00001a  2103              MOVS     r1,#3
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2105   	/* USART1 GPIO config */
;;;2106   	/* Configure USART1 Tx (PA.02) as alternate function push-pull */
;;;2107   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;2108   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000022  2502              MOVS     r5,#2
000024  2004              MOVS     r0,#4                 ;2107
000026  f88d5004          STRB     r5,[sp,#4]
;;;2109   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
00002c  9000              STR      r0,[sp,#0]            ;2108
00002e  f88d4006          STRB     r4,[sp,#6]
;;;2110   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f88d5005          STRB     r5,[sp,#5]
;;;2111   	GPIO_Init(GPIOA, &GPIO_InitStructure);    
000036  4669              MOV      r1,sp
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GPIO_Init
;;;2112   	/* Configure USART1 Rx (PA.03) as input floating */
;;;2113   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
00003e  2008              MOVS     r0,#8
;;;2114   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000040  9000              STR      r0,[sp,#0]
000042  f88d5004          STRB     r5,[sp,#4]
;;;2115   	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;2116   	
;;;2117   	/* USART1 mode config */
;;;2118   	USART_InitStructure.USART_BaudRate = 115200;
00004e  f44f30e1          MOV      r0,#0x1c200
;;;2119   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000052  9002              STR      r0,[sp,#8]
;;;2120   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2121   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000054  f8ad4010          STRH     r4,[sp,#0x10]
;;;2122   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2123   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
;;;2124   	USART_Init(USART2, &USART_InitStructure);
00005a  4d18              LDR      r5,|L21.188|
00005c  f8ad400c          STRH     r4,[sp,#0xc]          ;2119
000060  f8ad0012          STRH     r0,[sp,#0x12]         ;2123
000064  f8ad400e          STRH     r4,[sp,#0xe]          ;2120
000068  f8ad4014          STRH     r4,[sp,#0x14]         ;2122
00006c  a902              ADD      r1,sp,#8
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       USART_Init
;;;2125   	
;;;2126   	/******使能串口接收中断******************/
;;;2127   	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
000074  2201              MOVS     r2,#1
000076  f2405125          MOV      r1,#0x525
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_ITConfig
;;;2128   //	USART_ITConfig(USART2, USART_IT_ORE, ENABLE);	
;;;2129   	USART_Cmd(USART2, ENABLE);//使能串口1
000080  2101              MOVS     r1,#1
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USART_Cmd
;;;2130     USART_ClearFlag(USART2, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       USART_ClearFlag
000090  f44f60e0          MOV      r0,#0x700
000094  f7fffffe          BL       NVIC_PriorityGroupConfig
000098  2026              MOVS     r0,#0x26
00009a  f88d0018          STRB     r0,[sp,#0x18]
00009e  f88d4019          STRB     r4,[sp,#0x19]
0000a2  2001              MOVS     r0,#1
0000a4  f88d001a          STRB     r0,[sp,#0x1a]
0000a8  f88d001b          STRB     r0,[sp,#0x1b]
0000ac  a806              ADD      r0,sp,#0x18
0000ae  f7fffffe          BL       NVIC_Init
;;;2131     
;;;2132     USART2_NVIC_Config();//串口中断配置
;;;2133   }
0000b2  b008              ADD      sp,sp,#0x20
0000b4  bd70              POP      {r4-r6,pc}
;;;2134   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L21.184|
                          DCD      0x40020000
                  |L21.188|
                          DCD      0x40004400

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;2357   
;;;2358   void USART2_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2359   {
;;;2360   	u8 Res;
;;;2361    	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
000002  4c1c              LDR      r4,|L22.116|
000004  f2405525          MOV      r5,#0x525
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       USART_GetITStatus
000010  2800              CMP      r0,#0
000012  d013              BEQ      |L22.60|
;;;2362   	{
;;;2363   		USART_ClearITPendingBit(USART2,USART_IT_RXNE);
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       USART_ClearITPendingBit
;;;2364   		Res=USART_ReceiveData(USART2);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       USART_ReceiveData
;;;2365   
;;;2366   		if((USART_RX_STA&0x8000)==0)//接收未完成
000022  4a15              LDR      r2,|L22.120|
000024  b2c1              UXTB     r1,r0                 ;2364
000026  89d0              LDRH     r0,[r2,#0xe]  ; USART_RX_STA
000028  0403              LSLS     r3,r0,#16
00002a  d407              BMI      |L22.60|
;;;2367   		{
;;;2368   		if(USART_RX_STA&0x4000)//接收到了0x0d
;;;2369   		{
;;;2370   			if(Res!=0x0a)
;;;2371   				USART_RX_STA=0;//接收错误,重新开始
;;;2372   			else 
;;;2373   			{
;;;2374   		//		SerialRemoteHandleL(USART_RX_STA,USART_RX_BUF);
;;;2375   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
00002c  4b13              LDR      r3,|L22.124|
00002e  0445              LSLS     r5,r0,#17             ;2368
000030  f04f0400          MOV      r4,#0                 ;2368
000034  d50b              BPL      |L22.78|
000036  290a              CMP      r1,#0xa               ;2370
000038  d001              BEQ      |L22.62|
                  |L22.58|
00003a  81d4              STRH     r4,[r2,#0xe]          ;2371
                  |L22.60|
;;;2376   				USART_RX_STA++;
;;;2377   				USART_RX_CNT = USART_RX_STA;
;;;2378   				USART_RX_STA|=0x8000;	//接收完成了 			  //接收到回车的后字节  置位状态寄存器 
;;;2379   			}
;;;2380   		}
;;;2381   		else //还没收到0X0D
;;;2382   		{	
;;;2383   			if(Res==0x0d)
;;;2384   			{
;;;2385   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
;;;2386   				USART_RX_STA++;	
;;;2387   				USART_RX_STA|=0x4000;					 //接收到回车的前一字节  置位状态寄存器
;;;2388   			}
;;;2389   			else
;;;2390   				{
;;;2391   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
;;;2392   					USART_RX_STA++;									//长度+1 为下一次做准备
;;;2393   				if(USART_RX_STA>(USART_REC_LEN-1))
;;;2394   					USART_RX_STA=0;//接收数据错误,重新开始接收	  
;;;2395   				}		 
;;;2396   			}
;;;2397   		} 
;;;2398   	}
;;;2399   }
00003c  bd70              POP      {r4-r6,pc}
                  |L22.62|
00003e  f3c0040d          UBFX     r4,r0,#0,#14          ;2375
000042  1c40              ADDS     r0,r0,#1              ;2375
000044  5519              STRB     r1,[r3,r4]            ;2375
000046  8210              STRH     r0,[r2,#0x10]         ;2377
000048  f4404000          ORR      r0,r0,#0x8000         ;2378
00004c  e010              B        |L22.112|
                  |L22.78|
00004e  290d              CMP      r1,#0xd               ;2383
000050  d008              BEQ      |L22.100|
000052  f3c0050d          UBFX     r5,r0,#0,#14          ;2391
000056  1c40              ADDS     r0,r0,#1              ;2391
000058  b280              UXTH     r0,r0                 ;2392
00005a  5559              STRB     r1,[r3,r5]            ;2391
00005c  81d0              STRH     r0,[r2,#0xe]          ;2392
00005e  28c7              CMP      r0,#0xc7              ;2393
000060  d8eb              BHI      |L22.58|
000062  bd70              POP      {r4-r6,pc}
                  |L22.100|
000064  f3c0040d          UBFX     r4,r0,#0,#14          ;2385
000068  1c40              ADDS     r0,r0,#1              ;2385
00006a  5519              STRB     r1,[r3,r4]            ;2385
00006c  f4404080          ORR      r0,r0,#0x4000         ;2387
                  |L22.112|
000070  81d0              STRH     r0,[r2,#0xe]          ;2378
000072  bd70              POP      {r4-r6,pc}
;;;2400   void UART2_Send(void)
                          ENDP

                  |L22.116|
                          DCD      0x40004400
                  |L22.120|
                          DCD      ||.data||
                  |L22.124|
                          DCD      ||area_number.31||+0x14

                          AREA ||i.USART3HANDLE||, CODE, READONLY, ALIGN=2

                  USART3HANDLE PROC
;;;213    
;;;214    void USART3HANDLE(void)
000000  b538              PUSH     {r3-r5,lr}
;;;215    {
;;;216    	vu16 crcres;
;;;217    
;;;218    	if(MasterRecbuf[0] == 0x01)
000002  4c28              LDR      r4,|L23.164|
;;;219    	{
;;;220    		if(MasterRecbuf[1] == 0x03)
;;;221    		{
;;;222    			crcres = (MasterRecbuf[8] << 8) + MasterRecbuf[7];
;;;223    			if(crcres == Hardware_CRC(MasterRecbuf,7))
;;;224    			{
;;;225    				 
;;;226    				Para.CPOW_Voltage = (MasterRecbuf[3] << 8) + MasterRecbuf[4];
;;;227    				Para.CCurrent = (MasterRecbuf[5] << 8) + MasterRecbuf[6];
;;;228    				memset(MasterRecbuf,0,sizeof(MasterRecbuf));
;;;229    			}
;;;230    				if(sendwait == 3)
000004  4d28              LDR      r5,|L23.168|
000006  7820              LDRB     r0,[r4,#0]            ;218  ; MasterRecbuf
000008  2801              CMP      r0,#1                 ;218
00000a  d148              BNE      |L23.158|
00000c  7860              LDRB     r0,[r4,#1]            ;220  ; MasterRecbuf
00000e  2803              CMP      r0,#3                 ;220
000010  d002              BEQ      |L23.24|
;;;231    				{
;;;232    					SetPowerModeS();
;;;233    				}
;;;234    				if(sendwait == 2)
;;;235    				{
;;;236    					SetPowerModeC();
;;;237    				}
;;;238    				if(sendwait == 1)
;;;239    				{
;;;240    					SetPowerModeV();
;;;241    				}
;;;242    				if(listsend == 3)
;;;243    				{
;;;244    					SetListPS();
;;;245    				}
;;;246    				if(listsend == 2)
;;;247    				{
;;;248    					SetListPC();
;;;249    				}
;;;250    				if(listsend == 1)
;;;251    				{
;;;252    					SetListPV();
;;;253    				}
;;;254    		}else if(MasterRecbuf[1] == 0x06){
000012  2806              CMP      r0,#6
000014  d03c              BEQ      |L23.144|
000016  e042              B        |L23.158|
                  |L23.24|
000018  79e1              LDRB     r1,[r4,#7]            ;222  ; MasterRecbuf
00001a  7a20              LDRB     r0,[r4,#8]            ;222  ; MasterRecbuf
00001c  eb012000          ADD      r0,r1,r0,LSL #8       ;222
000020  f8ad0000          STRH     r0,[sp,#0]            ;222
000024  2107              MOVS     r1,#7                 ;223
000026  481f              LDR      r0,|L23.164|
000028  f7fffffe          BL       Hardware_CRC
00002c  f8bd1000          LDRH     r1,[sp,#0]            ;223
000030  4288              CMP      r0,r1                 ;223
000032  d10e              BNE      |L23.82|
000034  7920              LDRB     r0,[r4,#4]            ;226  ; MasterRecbuf
000036  78e1              LDRB     r1,[r4,#3]            ;226  ; MasterRecbuf
000038  eb002101          ADD      r1,r0,r1,LSL #8       ;226
00003c  481b              LDR      r0,|L23.172|
00003e  6281              STR      r1,[r0,#0x28]         ;226  ; Para
000040  79a1              LDRB     r1,[r4,#6]            ;227  ; MasterRecbuf
000042  7962              LDRB     r2,[r4,#5]            ;227  ; MasterRecbuf
000044  eb012102          ADD      r1,r1,r2,LSL #8       ;227
000048  6301              STR      r1,[r0,#0x30]         ;227  ; Para
00004a  2180              MOVS     r1,#0x80              ;228
00004c  4815              LDR      r0,|L23.164|
00004e  f7fffffe          BL       __aeabi_memclr
                  |L23.82|
000052  7a28              LDRB     r0,[r5,#8]            ;230  ; sendwait
000054  2803              CMP      r0,#3                 ;230
000056  d101              BNE      |L23.92|
000058  f7fffffe          BL       SetPowerModeS
                  |L23.92|
00005c  7a28              LDRB     r0,[r5,#8]            ;234  ; sendwait
00005e  2802              CMP      r0,#2                 ;234
000060  d101              BNE      |L23.102|
000062  f7fffffe          BL       SetPowerModeC
                  |L23.102|
000066  7a28              LDRB     r0,[r5,#8]            ;238  ; sendwait
000068  2801              CMP      r0,#1                 ;238
00006a  d101              BNE      |L23.112|
00006c  f7fffffe          BL       SetPowerModeV
                  |L23.112|
000070  7a68              LDRB     r0,[r5,#9]            ;242  ; listsend
000072  2803              CMP      r0,#3                 ;242
000074  d101              BNE      |L23.122|
000076  f7fffffe          BL       SetListPS
                  |L23.122|
00007a  7a68              LDRB     r0,[r5,#9]            ;246  ; listsend
00007c  2802              CMP      r0,#2                 ;246
00007e  d101              BNE      |L23.132|
000080  f7fffffe          BL       SetListPC
                  |L23.132|
000084  7a68              LDRB     r0,[r5,#9]            ;250  ; listsend
000086  2801              CMP      r0,#1                 ;250
000088  d109              BNE      |L23.158|
00008a  f7fffffe          BL       SetListPV
00008e  e006              B        |L23.158|
                  |L23.144|
;;;255    			memset(MasterRecbuf,0,sizeof(MasterRecbuf));
000090  2180              MOVS     r1,#0x80
000092  4804              LDR      r0,|L23.164|
000094  f7fffffe          BL       __aeabi_memclr
;;;256    			watchtest ++;
000098  6d68              LDR      r0,[r5,#0x54]  ; watchtest
00009a  1c40              ADDS     r0,r0,#1
00009c  6568              STR      r0,[r5,#0x54]  ; watchtest
                  |L23.158|
;;;257    		}
;;;258    	}	
;;;259    
;;;260    	
;;;261    	USART3_Recive_flg = 0;
00009e  2000              MOVS     r0,#0
0000a0  7068              STRB     r0,[r5,#1]
;;;262    }
0000a2  bd38              POP      {r3-r5,pc}
;;;263    
                          ENDP

                  |L23.164|
                          DCD      ||area_number.31||+0x15c
                  |L23.168|
                          DCD      ||.data||
                  |L23.172|
                          DCD      Para

                          AREA ||i.USART3WriteDMA||, CODE, READONLY, ALIGN=2

                  USART3WriteDMA PROC
;;;2300   
;;;2301   void USART3WriteDMA(u16 len)
000000  b570              PUSH     {r4-r6,lr}
;;;2302   {
000002  4605              MOV      r5,r0
;;;2303       USART_ClearFlag(USART3, USART_FLAG_TC);     //串口发送准备
000004  2140              MOVS     r1,#0x40
000006  4809              LDR      r0,|L24.44|
000008  f7fffffe          BL       USART_ClearFlag
;;;2304   	DMA_Cmd(DMA1_Stream3, DISABLE);//关闭DMA 数据流3
00000c  4c08              LDR      r4,|L24.48|
00000e  2100              MOVS     r1,#0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       DMA_Cmd
;;;2305       DMA_SetCurrDataCounter(DMA1_Stream3,len);//设置DMA发生长度
000016  4629              MOV      r1,r5
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       DMA_SetCurrDataCounter
;;;2306   	DMA_Cmd(DMA1_Stream3, ENABLE);// 打开DMA 数据流3
00001e  4620              MOV      r0,r4
000020  e8bd4070          POP      {r4-r6,lr}
000024  2101              MOVS     r1,#1
000026  f7ffbffe          B.W      DMA_Cmd
;;;2307      
;;;2308   }
;;;2309   
                          ENDP

00002a  0000              DCW      0x0000
                  |L24.44|
                          DCD      0x40004800
                  |L24.48|
                          DCD      0x40026058

                          AREA ||i.USART3_Configuration||, CODE, READONLY, ALIGN=2

                  USART3_Configuration PROC
;;;2247   
;;;2248   void USART3_Configuration()//???????
000000  b570              PUSH     {r4-r6,lr}
;;;2249   {  
;;;2250       GPIO_InitTypeDef GPIO_InitStructure;
;;;2251   	USART_InitTypeDef USART_InitStructure;
;;;2252   	
;;;2253   	/* config USART1 clock */
;;;2254   	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
000002  2101              MOVS     r1,#1
000004  b088              SUB      sp,sp,#0x20           ;2249
000006  0488              LSLS     r0,r1,#18
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;2255   //    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE); //?? GPIOA ??
;;;2256       
;;;2257   	GPIO_PinAFConfig(GPIOD,GPIO_PinSource8,GPIO_AF_USART3);
00000c  4c2a              LDR      r4,|L25.184|
00000e  2207              MOVS     r2,#7
000010  2108              MOVS     r1,#8
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2258   	GPIO_PinAFConfig(GPIOD,GPIO_PinSource9,GPIO_AF_USART3);
000018  2207              MOVS     r2,#7
00001a  2109              MOVS     r1,#9
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2259       
;;;2260   
;;;2261       
;;;2262       
;;;2263   	/* USART1 GPIO config */
;;;2264   	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;2265   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
000022  15a0              ASRS     r0,r4,#22
;;;2266   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000024  2502              MOVS     r5,#2
000026  9004              STR      r0,[sp,#0x10]
000028  f88d5014          STRB     r5,[sp,#0x14]
;;;2267   //     GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //??????
;;;2268   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00002c  f88d5015          STRB     r5,[sp,#0x15]
;;;2269   	GPIO_Init(GPIOD, &GPIO_InitStructure);    
000030  a904              ADD      r1,sp,#0x10
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       GPIO_Init
;;;2270   	/* Configure USART1 Rx (PA.10) as input floating */
;;;2271   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
000038  1560              ASRS     r0,r4,#21
;;;2272       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00003a  9004              STR      r0,[sp,#0x10]
00003c  f88d5014          STRB     r5,[sp,#0x14]
;;;2273   	GPIO_Init(GPIOD, &GPIO_InitStructure);
000040  a904              ADD      r1,sp,#0x10
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       GPIO_Init
;;;2274       
;;;2275   
;;;2276   	
;;;2277   	/* USART1 mode config */
;;;2278   	USART_InitStructure.USART_BaudRate = 9600;
;;;2279   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000048  2400              MOVS     r4,#0
00004a  f44f5016          MOV      r0,#0x2580            ;2278
00004e  9000              STR      r0,[sp,#0]
;;;2280   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2281   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000050  f8ad4008          STRH     r4,[sp,#8]
;;;2282   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2283   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000054  200c              MOVS     r0,#0xc
;;;2284   	USART_Init(USART3, &USART_InitStructure);
000056  4e19              LDR      r6,|L25.188|
000058  f8ad4004          STRH     r4,[sp,#4]            ;2279
00005c  f8ad000a          STRH     r0,[sp,#0xa]          ;2283
000060  f8ad4006          STRH     r4,[sp,#6]            ;2280
000064  f8ad400c          STRH     r4,[sp,#0xc]          ;2282
000068  4669              MOV      r1,sp
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       USART_Init
;;;2285       
;;;2286   
;;;2287   	
;;;2288   	/******????????******************/
;;;2289   	USART_ITConfig(USART3, USART_IT_IDLE, ENABLE);
000070  2201              MOVS     r2,#1
000072  f2404124          MOV      r1,#0x424
000076  4630              MOV      r0,r6
000078  f7fffffe          BL       USART_ITConfig
00007c  f44f60e0          MOV      r0,#0x700
000080  f7fffffe          BL       NVIC_PriorityGroupConfig
000084  2027              MOVS     r0,#0x27
000086  f88d0018          STRB     r0,[sp,#0x18]
00008a  f88d4019          STRB     r4,[sp,#0x19]
00008e  f88d501a          STRB     r5,[sp,#0x1a]
000092  2001              MOVS     r0,#1
000094  f88d001b          STRB     r0,[sp,#0x1b]
000098  a806              ADD      r0,sp,#0x18
00009a  f7fffffe          BL       NVIC_Init
;;;2290   	USART3_NVIC_Config();//??????
;;;2291   	USART3_DMA_init();
00009e  f7fffffe          BL       USART3_DMA_init
;;;2292   	USART_Cmd(USART3, ENABLE);//????1
0000a2  2101              MOVS     r1,#1
0000a4  4630              MOV      r0,r6
0000a6  f7fffffe          BL       USART_Cmd
;;;2293       USART_ClearFlag(USART3, USART_FLAG_TC);
0000aa  2140              MOVS     r1,#0x40
0000ac  4630              MOV      r0,r6
0000ae  f7fffffe          BL       USART_ClearFlag
;;;2294       
;;;2295     
;;;2296       
;;;2297   	
;;;2298   }
0000b2  b008              ADD      sp,sp,#0x20
0000b4  bd70              POP      {r4-r6,pc}
;;;2299   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L25.184|
                          DCD      0x40020c00
                  |L25.188|
                          DCD      0x40004800

                          AREA ||i.USART3_DMA_init||, CODE, READONLY, ALIGN=2

                  USART3_DMA_init PROC
;;;2148   
;;;2149   static void USART3_DMA_init(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2150   {
;;;2151       DMA_InitTypeDef DMA_InitStructure;
;;;2152       NVIC_InitTypeDef NVIC_InitStructure;
;;;2153   	
;;;2154   	//串口3使用DMA1 发送为数据流3  通道4   
;;;2155       //F4与F1DMA多了一个数据流的说法详细参考中文数据手册DMA 表35
;;;2156       /* 1.使能DMA2时钟 */
;;;2157   	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
000004  2101              MOVS     r1,#1
000006  b091              SUB      sp,sp,#0x44           ;2150
000008  0548              LSLS     r0,r1,#21
00000a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;2158   	
;;;2159   	//串口发送DMA配置
;;;2160       /* 2.配置使用DMA发送数据 */
;;;2161       DMA_DeInit(DMA1_Stream3); //DMA1 数据流 3
00000e  f8dfa0d8          LDR      r10,|L26.232|
000012  4650              MOV      r0,r10
000014  f7fffffe          BL       DMA_DeInit
;;;2162       DMA_InitStructure.DMA_Channel = DMA_Channel_4;  /* 配置DMA1通道4 */
000018  f04f6600          MOV      r6,#0x8000000
;;;2163       DMA_InitStructure.DMA_PeripheralBaseAddr  = (uint32_t)(&(USART3->DR)); /* 目的 */
;;;2164       DMA_InitStructure.DMA_Memory0BaseAddr     = (uint32_t)MasterSendbuf; /*源内存地址*/
00001c  4834              LDR      r0,|L26.240|
00001e  4f33              LDR      r7,|L26.236|
000020  9600              STR      r6,[sp,#0]
000022  e9cd7001          STRD     r7,r0,[sp,#4]
;;;2165       DMA_InitStructure.DMA_DIR                 = DMA_DIR_MemoryToPeripheral;  /*方向内            
;;;2166                                                                               存到外设*/
;;;2167       DMA_InitStructure.DMA_BufferSize          = MAXRxTxLen;                    
;;;2168       /* 长度 */                  
;;;2169       DMA_InitStructure.DMA_PeripheralInc       = DMA_PeripheralInc_Disable;    
000026  2400              MOVS     r4,#0
000028  2040              MOVS     r0,#0x40              ;2165
00002a  f04f0880          MOV      r8,#0x80              ;2167
;;;2170       /* 外设地址是否自增 */
;;;2171       DMA_InitStructure.DMA_MemoryInc           = DMA_MemoryInc_Enable;        
00002e  f44f6980          MOV      r9,#0x400
000032  9003              STR      r0,[sp,#0xc]
000034  e9cd8404          STRD     r8,r4,[sp,#0x10]
000038  e9cd9406          STRD     r9,r4,[sp,#0x18]
;;;2172       /* 内存地址是否自增 */
;;;2173       DMA_InitStructure.DMA_PeripheralDataSize  = DMA_PeripheralDataSize_Byte;  
;;;2174       /* 目的数据带宽 */
;;;2175       DMA_InitStructure.DMA_MemoryDataSize      = DMA_MemoryDataSize_Byte;      
;;;2176       /* 源数据宽度 */
;;;2177       DMA_InitStructure.DMA_Mode                = DMA_Mode_Normal;             
;;;2178       /* 单次传输模式/循环传输模式 */
;;;2179       DMA_InitStructure.DMA_Priority            = DMA_Priority_High;             
00003c  02c0              LSLS     r0,r0,#11
00003e  9408              STR      r4,[sp,#0x20]
000040  e9cd4009          STRD     r4,r0,[sp,#0x24]
;;;2180       /* DMA优先级 */
;;;2181       DMA_InitStructure.DMA_FIFOMode            = DMA_FIFOMode_Disable;          
;;;2182       /* FIFO模式/直接模式 */
;;;2183       DMA_InitStructure.DMA_FIFOThreshold       = DMA_FIFOThreshold_HalfFull; 
000044  2501              MOVS     r5,#1
000046  e9cd450b          STRD     r4,r5,[sp,#0x2c]
;;;2184       /* FIFO大小 */
;;;2185       DMA_InitStructure.DMA_MemoryBurst         = DMA_MemoryBurst_Single;      
;;;2186        /* 单次传输 */
;;;2187       DMA_InitStructure.DMA_PeripheralBurst     = DMA_PeripheralBurst_Single;
00004a  940d              STR      r4,[sp,#0x34]
;;;2188       /* 3. 配置DMA */
;;;2189       DMA_Init(DMA1_Stream3, &DMA_InitStructure);
00004c  4669              MOV      r1,sp
00004e  4650              MOV      r0,r10
000050  940e              STR      r4,[sp,#0x38]
000052  f7fffffe          BL       DMA_Init
;;;2190       /* 4.使能DMA中断 */
;;;2191       DMA_ITConfig(DMA1_Stream3, DMA_IT_TC, ENABLE);
000056  2201              MOVS     r2,#1
000058  2110              MOVS     r1,#0x10
00005a  4650              MOV      r0,r10
00005c  f7fffffe          BL       DMA_ITConfig
;;;2192       /* 5.使能串口的DMA发送接口 */
;;;2193       USART_DMACmd(USART3, USART_DMAReq_Tx, ENABLE);
000060  f1a70b04          SUB      r11,r7,#4
000064  2201              MOVS     r2,#1
000066  2180              MOVS     r1,#0x80
000068  4658              MOV      r0,r11
00006a  f7fffffe          BL       USART_DMACmd
;;;2194       /* 6. 配置DMA中断优先级 */
;;;2195       NVIC_InitStructure.NVIC_IRQChannel                   = DMA1_Stream3_IRQn;  
00006e  200e              MOVS     r0,#0xe
000070  f88d003c          STRB     r0,[sp,#0x3c]
;;;2196       //  DMA发生中断         
;;;2197       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;          
000074  f88d403d          STRB     r4,[sp,#0x3d]
;;;2198       NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 4; 
000078  2004              MOVS     r0,#4
00007a  f88d003e          STRB     r0,[sp,#0x3e]
;;;2199       NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;
00007e  f88d503f          STRB     r5,[sp,#0x3f]
;;;2200       NVIC_Init(&NVIC_InitStructure);
000082  a80f              ADD      r0,sp,#0x3c
000084  f7fffffe          BL       NVIC_Init
;;;2201   	
;;;2202       /* 7.不使能DMA */                  
;;;2203       DMA_Cmd(DMA1_Stream3, DISABLE);// 数据流2
000088  2100              MOVS     r1,#0
00008a  4650              MOV      r0,r10
00008c  f7fffffe          BL       DMA_Cmd
;;;2204   	//************************DMA接收***********************//
;;;2205   	/* 2.配置使用DMA接收数据 */
;;;2206       DMA_DeInit(DMA1_Stream1); 
000090  f8dfa054          LDR      r10,|L26.232|
000094  f1aa0a30          SUB      r10,r10,#0x30
000098  4650              MOV      r0,r10
00009a  f7fffffe          BL       DMA_DeInit
;;;2207       DMA_InitStructure.DMA_Channel             = DMA_Channel_4;               
;;;2208       /* 配置DMA通道 */
;;;2209       DMA_InitStructure.DMA_PeripheralBaseAddr  = (uint32_t)(&(USART3->DR));   
;;;2210       /* 源地址 */
;;;2211       DMA_InitStructure.DMA_Memory0BaseAddr     = (uint32_t)MasterRecbuf;    
00009e  4814              LDR      r0,|L26.240|
0000a0  a902              ADD      r1,sp,#8
0000a2  3080              ADDS     r0,r0,#0x80
0000a4  e8810111          STM      r1,{r0,r4,r8}
0000a8  e9cd4905          STRD     r4,r9,[sp,#0x14]
;;;2212       /* 目标地址 */
;;;2213       DMA_InitStructure.DMA_DIR                 = DMA_DIR_PeripheralToMemory;    
;;;2214       /* 方向外设向内存  */
;;;2215       DMA_InitStructure.DMA_BufferSize          = MAXRxTxLen;                    		
;;;2216       /* 长度 */                  
;;;2217       DMA_InitStructure.DMA_PeripheralInc       = DMA_PeripheralInc_Disable;    
;;;2218         /* 外设地址是否自增 */
;;;2219       DMA_InitStructure.DMA_MemoryInc           = DMA_MemoryInc_Enable;         
;;;2220       /* 内存地址是否自增 */
;;;2221       DMA_InitStructure.DMA_PeripheralDataSize  = DMA_MemoryDataSize_Byte;     
;;;2222       /* 目的数据带宽 */
;;;2223       DMA_InitStructure.DMA_MemoryDataSize      = DMA_MemoryDataSize_Byte;      
;;;2224       /* 源数据宽度 */
;;;2225       DMA_InitStructure.DMA_Mode                = DMA_Mode_Circular;             
0000ac  0228              LSLS     r0,r5,#8
0000ae  e9cd4008          STRD     r4,r0,[sp,#0x20]
;;;2226       /*循环传输模式 */
;;;2227       DMA_InitStructure.DMA_Priority            = DMA_Priority_VeryHigh;        
0000b2  a90a              ADD      r1,sp,#0x28
0000b4  9407              STR      r4,[sp,#0x1c]         ;2225
0000b6  f44f3040          MOV      r0,#0x30000
0000ba  e8810031          STM      r1,{r0,r4,r5}
;;;2228       /* DMA优先级 */
;;;2229       DMA_InitStructure.DMA_FIFOMode            = DMA_FIFOMode_Disable;         
;;;2230        /* FIFO模式/直接模式 */
;;;2231       DMA_InitStructure.DMA_FIFOThreshold       = DMA_FIFOThreshold_HalfFull; 
;;;2232       /* FIFO大小 */
;;;2233       DMA_InitStructure.DMA_MemoryBurst         = DMA_MemoryBurst_Single;       
;;;2234       /* 单次传输 */
;;;2235       DMA_InitStructure.DMA_PeripheralBurst     = DMA_PeripheralBurst_Single;
0000be  940d              STR      r4,[sp,#0x34]
;;;2236       /* 3. 配置DMA */
;;;2237       DMA_Init(DMA1_Stream1, &DMA_InitStructure);
0000c0  4669              MOV      r1,sp
0000c2  4650              MOV      r0,r10
0000c4  940e              STR      r4,[sp,#0x38]
0000c6  e9cd6700          STRD     r6,r7,[sp,#0]
0000ca  f7fffffe          BL       DMA_Init
;;;2238       /* 4.由于接收不需要DMA中断，故不设置DMA中断 */
;;;2239       /* 5.使能串口的DMA接收 */
;;;2240       USART_DMACmd(USART3,USART_DMAReq_Rx,ENABLE);
0000ce  2201              MOVS     r2,#1
0000d0  2140              MOVS     r1,#0x40
0000d2  4658              MOV      r0,r11
0000d4  f7fffffe          BL       USART_DMACmd
;;;2241       /* 6. 由于接收不需要DMA中断，故不能配置DMA中断优先级 */
;;;2242       /* 7.使能DMA */ 
;;;2243       DMA_Cmd(DMA1_Stream1,ENABLE);
0000d8  2101              MOVS     r1,#1
0000da  4650              MOV      r0,r10
0000dc  f7fffffe          BL       DMA_Cmd
;;;2244   }
0000e0  b011              ADD      sp,sp,#0x44
0000e2  e8bd8ff0          POP      {r4-r11,pc}
;;;2245   
                          ENDP

0000e6  0000              DCW      0x0000
                  |L26.232|
                          DCD      0x40026058
                  |L26.236|
                          DCD      0x40004804
                  |L26.240|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;2325   
;;;2326   void USART3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2327   {
;;;2328       u8 Clear = Clear;
;;;2329       u16 num = 0;
;;;2330            
;;;2331       if(USART_GetITStatus(USART3, USART_IT_IDLE) != RESET)
000002  4c18              LDR      r4,|L27.100|
000004  f2404124          MOV      r1,#0x424
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USART_GetITStatus
00000e  2800              CMP      r0,#0
000010  d024              BEQ      |L27.92|
;;;2332       {
;;;2333           Clear = USART3->SR;  //读SR寄存器清除                                                            
000012  8820              LDRH     r0,[r4,#0]
;;;2334          
;;;2335           Clear = USART3->DR;  //读DR寄存器清除                                                        
000014  1d20              ADDS     r0,r4,#4
000016  8800              LDRH     r0,[r0,#0]
;;;2336           DMA_Cmd(DMA1_Stream1,DISABLE);   //关闭DMA
000018  4d13              LDR      r5,|L27.104|
00001a  2100              MOVS     r1,#0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       DMA_Cmd
;;;2337   		DMA_ClearFlag(DMA1_Stream1,DMA_FLAG_TCIF2);
000022  f04f5181          MOV      r1,#0x10200000
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       DMA_ClearFlag
;;;2338           num = DMA_GetCurrDataCounter(DMA1_Stream1); //得到真正接收数据个数
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       DMA_GetCurrDataCounter
;;;2339           if(num < MAXRxTxLen)
;;;2340           {
;;;2341               USART3_Recive_leng   = MAXRxTxLen - num;
000032  4c0e              LDR      r4,|L27.108|
000034  2880              CMP      r0,#0x80              ;2339
000036  d212              BCS      |L27.94|
000038  f1c00080          RSB      r0,r0,#0x80
00003c  b2c0              UXTB     r0,r0
00003e  7020              STRB     r0,[r4,#0]
;;;2342           }else
;;;2343           {
;;;2344               USART3_Recive_leng = MAXRxTxLen;
;;;2345           }
;;;2346            
;;;2347           if(USART3_Recive_leng > MAXRxTxLen)
000040  2880              CMP      r0,#0x80
000042  d901              BLS      |L27.72|
;;;2348           {
;;;2349               USART3_Recive_leng = 0;  //避免接收数据超界                                               
000044  2000              MOVS     r0,#0
                  |L27.70|
000046  7020              STRB     r0,[r4,#0]            ;2344
                  |L27.72|
;;;2350           }
;;;2351           DMA_SetCurrDataCounter(DMA1_Stream1,MAXRxTxLen);//设置DMA传输长度                                                        
000048  2180              MOVS     r1,#0x80
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       DMA_SetCurrDataCounter
;;;2352           DMA_Cmd(DMA1_Stream1,ENABLE);  //开启DMA
000050  2101              MOVS     r1,#1
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       DMA_Cmd
;;;2353           USART3_Recive_flg = 1;    //数据接收成功                                                  
000058  2001              MOVS     r0,#1
00005a  7060              STRB     r0,[r4,#1]
                  |L27.92|
;;;2354           
;;;2355       } 
;;;2356   }
00005c  bd70              POP      {r4-r6,pc}
                  |L27.94|
00005e  2080              MOVS     r0,#0x80              ;2344
000060  e7f1              B        |L27.70|
;;;2357   
                          ENDP

000062  0000              DCW      0x0000
                  |L27.100|
                          DCD      0x40004800
                  |L27.104|
                          DCD      0x40026028
                  |L27.108|
                          DCD      ||.data||

                          AREA ||i.USART_Configuration||, CODE, READONLY, ALIGN=2

                  USART_Configuration PROC
;;;2042   
;;;2043   void USART_Configuration(void)//串口初始化函数
000000  b570              PUSH     {r4-r6,lr}
;;;2044   {  
000002  b088              SUB      sp,sp,#0x20
;;;2045   	GPIO_InitTypeDef GPIO_InitStructure;
;;;2046   	USART_InitTypeDef USART_InitStructure;
;;;2047   	
;;;2048   	/* config USART1 clock */
;;;2049   	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
000004  2101              MOVS     r1,#1
000006  2010              MOVS     r0,#0x10
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;2050   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1);
00000c  4e2a              LDR      r6,|L28.184|
00000e  2207              MOVS     r2,#7
000010  2109              MOVS     r1,#9
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2051   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1);
000018  2207              MOVS     r2,#7
00001a  210a              MOVS     r1,#0xa
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2052   	/* USART1 GPIO config */
;;;2053   	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;2054   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
;;;2055   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000022  2502              MOVS     r5,#2
000024  1570              ASRS     r0,r6,#21             ;2054
000026  f88d5004          STRB     r5,[sp,#4]
;;;2056   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
00002c  9000              STR      r0,[sp,#0]            ;2055
00002e  f88d4006          STRB     r4,[sp,#6]
;;;2057   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f88d5005          STRB     r5,[sp,#5]
;;;2058   	GPIO_Init(GPIOA, &GPIO_InitStructure);    
000036  4669              MOV      r1,sp
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GPIO_Init
;;;2059   	/* Configure USART1 Rx (PA.10) as input floating */
;;;2060   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
00003e  0268              LSLS     r0,r5,#9
;;;2061   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000040  9000              STR      r0,[sp,#0]
000042  f88d5004          STRB     r5,[sp,#4]
;;;2062   	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;2063   	
;;;2064   	/* USART1 mode config */
;;;2065   	USART_InitStructure.USART_BaudRate = 9600;
00004e  f44f5016          MOV      r0,#0x2580
;;;2066   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000052  9002              STR      r0,[sp,#8]
;;;2067   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2068   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000054  f8ad4010          STRH     r4,[sp,#0x10]
;;;2069   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2070   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
;;;2071   	USART_Init(USART1, &USART_InitStructure);
00005a  4d18              LDR      r5,|L28.188|
00005c  f8ad400c          STRH     r4,[sp,#0xc]          ;2066
000060  f8ad0012          STRH     r0,[sp,#0x12]         ;2070
000064  f8ad400e          STRH     r4,[sp,#0xe]          ;2067
000068  f8ad4014          STRH     r4,[sp,#0x14]         ;2069
00006c  a902              ADD      r1,sp,#8
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       USART_Init
;;;2072   	
;;;2073   	/******使能串口接收中断******************/
;;;2074   	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	
000074  2201              MOVS     r2,#1
000076  f2405125          MOV      r1,#0x525
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_ITConfig
;;;2075   	USART_Cmd(USART1, ENABLE);//使能串口1
000080  2101              MOVS     r1,#1
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USART_Cmd
;;;2076   	USART_ClearFlag(USART1, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       USART_ClearFlag
000090  f44f60e0          MOV      r0,#0x700
000094  f7fffffe          BL       NVIC_PriorityGroupConfig
000098  2025              MOVS     r0,#0x25
00009a  f88d0018          STRB     r0,[sp,#0x18]
00009e  f88d4019          STRB     r4,[sp,#0x19]
0000a2  2004              MOVS     r0,#4
0000a4  f88d001a          STRB     r0,[sp,#0x1a]
0000a8  2001              MOVS     r0,#1
0000aa  f88d001b          STRB     r0,[sp,#0x1b]
0000ae  a806              ADD      r0,sp,#0x18
0000b0  f7fffffe          BL       NVIC_Init
;;;2077     
;;;2078   	USART1_NVIC_Config();//串口中断配置
;;;2079   }			
0000b4  b008              ADD      sp,sp,#0x20
0000b6  bd70              POP      {r4-r6,pc}
;;;2080   
                          ENDP

                  |L28.184|
                          DCD      0x40020000
                  |L28.188|
                          DCD      0x40011000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UART_Buffer_Rece
                          %        16

                          AREA ||area_number.31||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.31||, ||.bss||
                  UART_Buffer_Send
                          %        20
                  USART_RX_BUF
                          %        200
                  MasterSendbuf
                          %        128
                  MasterRecbuf
                          %        128

                          AREA ||.data||, DATA, ALIGN=2

                  USART3_Recive_leng
000000  00                DCB      0x00
                  USART3_Recive_flg
000001  00                DCB      0x00
                  UART_Buffer_Send_pointer
000002  00                DCB      0x00
                  |symbol_number.106|
000003  00                DCB      0x00
                  Transmit_BUFFERsize
000004  00                DCB      0x00
                  MODE
000005  00                DCB      0x00
                  mainswitch
000006  00                DCB      0x00
                  Rraly
000007  00                DCB      0x00
                  sendwait
000008  00                DCB      0x00
                  listsend
000009  00                DCB      0x00
                  listocwatch
00000a  00                DCB      0x00
                  listpowwatch1
00000b  00                DCB      0x00
                  listpowwatch2
00000c  0000              DCB      0x00,0x00
                  USART_RX_STA
00000e  0000              DCW      0x0000
                  USART_RX_CNT
000010  0000              DCW      0x0000
000012  0000              DCB      0x00,0x00
                  ||x1||
                          DCD      0x00000000
                  ||y1||
                          DCD      0x00000000
                  ||x2||
                          DCD      0x00000000
                  ||y2||
                          DCD      0x00000000
                  ||x3||
                          DCD      0x00000000
                  ||y3||
                          DCD      0x00000000
                  ||x4||
                          DCD      0x00000000
                  ||y4||
                          DCD      0x00000000
                  ||x5||
                          DCD      0x00000000
                  ||y5||
                          DCD      0x00000000
                  ||x6||
                          DCD      0x00000000
                  ||y6||
                          DCD      0x00000000
                  ||x7||
                          DCD      0x00000000
                  ||y7||
                          DCD      0x00000000
                  ||x8||
                          DCD      0x00000000
                  ||y8||
                          DCD      0x00000000
                  watchtest
                          DCD      0x00000000
                  CmdStr
000058  53544154          DCB      0x53,0x54,0x41,0x54
00005c  55535f00          DCB      0x55,0x53,0x5f,0x00
000060  004d4f44          DCB      0x00,0x4d,0x4f,0x44
000064  5f000000          DCB      0x5f,0x00,0x00,0x00
000068  00005452          DCB      0x00,0x00,0x54,0x52
00006c  49475f00          DCB      0x49,0x47,0x5f,0x00
000070  00000053          DCB      0x00,0x00,0x00,0x53
000074  45545041          DCB      0x45,0x54,0x50,0x41
000078  52415f00          DCB      0x52,0x41,0x5f,0x00
00007c  5345544c          DCB      0x53,0x45,0x54,0x4c
000080  4953545f          DCB      0x49,0x53,0x54,0x5f
000084  004f5052          DCB      0x00,0x4f,0x50,0x52
000088  45534554          DCB      0x45,0x53,0x45,0x54
00008c  5f00504f          DCB      0x5f,0x00,0x50,0x4f
000090  57495f00          DCB      0x57,0x49,0x5f,0x00
000094  00000041          DCB      0x00,0x00,0x00,0x41
000098  4443565f          DCB      0x44,0x43,0x56,0x5f
00009c  00000000          DCB      0x00,0x00,0x00,0x00
0000a0  4c4f5749          DCB      0x4c,0x4f,0x57,0x49
0000a4  5f000000          DCB      0x5f,0x00,0x00,0x00
0000a8  00484f52          DCB      0x00,0x48,0x4f,0x52
0000ac  4c5f0000          DCB      0x4c,0x5f,0x00,0x00
0000b0  00004c56          DCB      0x00,0x00,0x4c,0x56
0000b4  4c5f0000          DCB      0x4c,0x5f,0x00,0x00
0000b8  00000053          DCB      0x00,0x00,0x00,0x53
0000bc  57495443          DCB      0x57,0x49,0x54,0x43
0000c0  485f0000          DCB      0x48,0x5f,0x00,0x00
0000c4  43414c56          DCB      0x43,0x41,0x4c,0x56
0000c8  5f000000          DCB      0x5f,0x00,0x00,0x00
0000cc  0043414c          DCB      0x00,0x43,0x41,0x4c
0000d0  495f0000          DCB      0x49,0x5f,0x00,0x00
0000d4  00004341          DCB      0x00,0x00,0x43,0x41
0000d8  4c525f00          DCB      0x4c,0x52,0x5f,0x00
0000dc  00000044          DCB      0x00,0x00,0x00,0x44
0000e0  41435f00          DCB      0x41,0x43,0x5f,0x00
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
0000e8  4f564552          DCB      0x4f,0x56,0x45,0x52
0000ec  5f000000          DCB      0x5f,0x00,0x00,0x00
0000f0  0054454d          DCB      0x00,0x54,0x45,0x4d
0000f4  505f0000          DCB      0x50,0x5f,0x00,0x00
0000f8  0000424f          DCB      0x00,0x00,0x42,0x4f
0000fc  4f545f00          DCB      0x4f,0x54,0x5f,0x00
000100  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.34||, DATA, ALIGN=0

                          EXPORTAS ||area_number.34||, ||.data||
                  UART_Buffer_Size
000000  00                DCB      0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  t_USART
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.data||
                  powsetdelay
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\drive\\usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REV16|
#line 129 "E:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_usart_c_7cc17ae7____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REVSH|
#line 144
|__asm___7_usart_c_7cc17ae7____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
