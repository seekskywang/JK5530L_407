; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\usart.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\usart.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=525 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\usart.crf --no_multibyte_chars ..\drive\usart.c]
                          THUMB

                          AREA ||i.CalHandle||, CODE, READONLY, ALIGN=2

                  CalHandle PROC
;;;515    //校准处理
;;;516    void CalHandle(u8 mode,u8 range,u32 data)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;517    {
;;;518    	if(mode == 0)//测量电压
;;;519    	{
;;;520    		if(range == 0)//低档位低段
;;;521    		{
;;;522    			calflag = 1;
;;;523    			LOAD_V_SW = 0;
;;;524    			x1 = Vmon_Load_value;
000004  4dfc              LDR      r5,|L1.1016|
;;;525    			y1 = data;
;;;526    		}else if(range == 1){//低档位高段
;;;527    			
;;;528    			x2 = Vmon_Load_value;
;;;529    			y2 = data;
;;;530    			CalPara.TestLV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;531    			CalPara.OffsetLV[0] = (float)y2 - CalPara.TestLV[0]*(float)x2;
;;;532    			
;;;533    			Flag_DAC_OFF=0;
000006  f8dfc3f8          LDR      r12,|L1.1024|
00000a  4614              MOV      r4,r2                 ;517
00000c  2300              MOVS     r3,#0                 ;517
00000e  f8dc2000          LDR      r2,[r12,#0]
000012  4ef7              LDR      r6,|L1.1008|
000014  f8df93dc          LDR      r9,|L1.1012|
000018  f8df83e0          LDR      r8,|L1.1020|
;;;534    			calflag = 0;
;;;535    		}else if(range == 2){//高档位低段
;;;536    			calflag = 1;
;;;537    			LOAD_V_SW = 1;
;;;538    			x1 = Vmon_Load_value;
;;;539    			y1 = data;
;;;540    		}else if(range == 3){//高档位高段
;;;541    			
;;;542    			x2 = Vmon_Load_value;
;;;543    			y2 = data;
;;;544    			CalPara.TestLV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;545    			CalPara.OffsetLV[1] = (float)y2 - CalPara.TestLV[1]*(float)x2;
;;;546    				//参数写进FLASH
;;;547    			Flag_DAC_OFF=0;
;;;548    			calflag = 0;
;;;549    		}else if(range == 4){//电源控制电压和测量1
;;;550    			calflag = 1;
;;;551    			Contr_Voltage = 3500;
00001c  f8dfe3e4          LDR      lr,|L1.1028|
;;;552    			Contr_Current = 5000;
000020  f8dfb3e4          LDR      r11,|L1.1032|
;;;553    			OnOff_GPOI_ResetSet(0,1);
;;;554    		}else if(range == 5){//电源控制电压和测量2
;;;555    			x1 = data;
;;;556    			y1 = Contr_Voltage;
;;;557    			x3 = Vmon_POWE_value;
;;;558    			y3 = data;
;;;559    			Contr_Voltage = 10000;
;;;560    			Contr_Current = 5000;
;;;561    		}else if(range == 6){//电源控制电压和测量3
;;;562    			x2 = data;
;;;563    			y2 = Contr_Voltage;
;;;564    			x4 = Vmon_POWE_value;
;;;565    			y4 = data;
;;;566    			
;;;567    			CalPara.SetPV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;568    			CalPara.OffsetSetPV[0] = (float)y2 - CalPara.SetPV[0]*(float)x2;
;;;569    			
;;;570    			CalPara.TestPV[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;571    			CalPara.OffsetPV[0] = (float)y4 - CalPara.TestPV[0]*(float)x4;
;;;572    			
;;;573    			Flag_DAC_OFF=0;
;;;574    			calflag = 0;
;;;575    			Off_GPOI_ResetSet();
;;;576    		}else if(range == 7){//CV控制低档1
;;;577    			LOAD_MODE = 1;
;;;578    			LOAD_V_SW=0;
;;;579    			GPIO_ResetBits(GPIOB,GPIO_Pin_1);//电压档位为低档
;;;580    			calflag = 1;
;;;581    			Contr_Laod = 1000;
000024  f8dfa3e4          LDR      r10,|L1.1036|
000028  edd50a05          VLDR     s1,[r5,#0x14]         ;524
00002c  ed950a06          VLDR     s0,[r5,#0x18]         ;524
000030  edd51a09          VLDR     s3,[r5,#0x24]         ;524
000034  ed951a0a          VLDR     s2,[r5,#0x28]         ;524
000038  2701              MOVS     r7,#1                 ;522
00003a  f0220208          BIC      r2,r2,#8              ;533
00003e  b120              CBZ      r0,|L1.74|
;;;582    			OnOff_GPOI_ResetSet(2,1);
;;;583    		}else if(range == 8){//CV控制低档2
;;;584    			LOAD_MODE = 1;
;;;585    			LOAD_V_SW=0;
;;;586    			GPIO_ResetBits(GPIOB,GPIO_Pin_1);//电压档位为低档
;;;587    			x1 = data;
;;;588    			y1 = Contr_Laod;
;;;589    			Contr_Laod = 8000;
;;;590    //			OnOff_GPOI_ResetSet(2,1);
;;;591    		}else if(range == 9){//CV控制低档3
;;;592    			x2 = data;
;;;593    			y2 = Contr_Laod;
;;;594    			CalPara.SetCV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;595    			CalPara.OffsetCV[0] = (float)y2 - CalPara.SetCV[0]*(float)x2;
;;;596    				//参数写进FLASH
;;;597    			Flag_DAC_OFF=0;
;;;598    			calflag = 0;
;;;599    			Off_GPOI_ResetSet();
;;;600    		}else if(range == 10){//CV控制高档1
;;;601    			LOAD_MODE = 1;
;;;602    			LOAD_V_SW=1;
;;;603    			GPIO_SetBits(GPIOB,GPIO_Pin_1);//电压档位为高档
;;;604    			calflag = 1;
;;;605    			Contr_Laod = 1000;
;;;606    			OnOff_GPOI_ResetSet(2,1);
;;;607    		}else if(range == 11){//CV控制高档2
;;;608    			LOAD_MODE = 1;
;;;609    			LOAD_V_SW=1;
;;;610    			GPIO_SetBits(GPIOB,GPIO_Pin_1);//电压档位为高档
;;;611    			x1 = data;
;;;612    			y1 = Contr_Laod;
;;;613    			Contr_Laod = 8000;
;;;614    //			OnOff_GPOI_ResetSet(2,1);
;;;615    		}else if(range == 12){//CV控制高档3
;;;616    			x2 = data;
;;;617    			y2 = Contr_Laod;
;;;618    			CalPara.SetCV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;619    			CalPara.OffsetCV[1] = (float)y2 - CalPara.SetCV[1]*(float)x2;
;;;620    				//参数写进FLASH
;;;621    			Flag_DAC_OFF=0;
;;;622    			calflag = 0;
;;;623    			Off_GPOI_ResetSet();
;;;624    		}
;;;625    	}else if(mode == 1){
000040  2801              CMP      r0,#1
000042  d073              BEQ      |L1.300|
;;;626    		if(range == 0)//负载电流低档位1
;;;627    		{		
;;;628    			LOAD_I_SW = 0;
;;;629    			Contr_Laod = 8000;
;;;630    			calflag = 1;
;;;631    			OnOff_GPOI_ResetSet(2,1);
;;;632    		}
;;;633    		else if(range == 1)//负载电流低档位2
;;;634    		{
;;;635    			LOAD_I_SW = 0;			
;;;636    			x1 = data;
;;;637    			y1 = Contr_Laod;
;;;638    			x3 = Imon_Load_value;
;;;639    			y3 = data;
;;;640    			Contr_Laod = 56000;
;;;641    		}else if(range == 2){//负载电流低档位3
;;;642    			
;;;643    			x2 = data;
;;;644    			y2 = Contr_Laod;
;;;645    			x4 = Imon_Load_value;
;;;646    			y4 = data;
;;;647    			
;;;648    			CalPara.SetLC[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;649    			CalPara.OffsetLC[0] = (float)y2 - CalPara.SetLC[0]*(float)x2;
;;;650    			
;;;651    			CalPara.TestLC[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;652    			CalPara.OffsetTestLC[0] = (float)y4 - CalPara.TestLC[0]*(float)x4;
;;;653    				
;;;654    			Flag_DAC_OFF =0;
;;;655    			calflag = 0;
;;;656    			Off_GPOI_ResetSet();
;;;657    		}else if(range == 3){//负载电流高档位1
;;;658    			LOAD_I_SW = 1;
;;;659    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;660    			Contr_Laod = 6500;
;;;661    			calflag = 1;
;;;662    			OnOff_GPOI_ResetSet(2,1);
;;;663    		}else if(range == 4){//负载电流高档位2
;;;664    			
;;;665    			LOAD_I_SW = 1;
;;;666    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;667    			x1 = data;
;;;668    			y1 = Contr_Laod;
;;;669    			x3 = Imon_Load_value;
;;;670    			y3 = data;
;;;671    			Contr_Laod = 27000;
;;;672    		}else if(range == 5){//负载电流高档位3
;;;673    			
;;;674    			x2 = data;
;;;675    			y2 = Contr_Laod;
;;;676    			x4 = Imon_Load_value;
;;;677    			y4 = data;
;;;678    			
;;;679    			CalPara.SetLC[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;680    			CalPara.OffsetLC[1] = (float)y2 - CalPara.SetLC[1]*(float)x2;
;;;681    			
;;;682    			CalPara.TestLC[1] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;683    			CalPara.OffsetTestLC[1] = (float)y4 - CalPara.TestLC[1]*(float)x4;
;;;684    				
;;;685    			Flag_DAC_OFF =0;
;;;686    			calflag = 0;
;;;687    			Off_GPOI_ResetSet();
;;;688    		}else if(range == 6){//电源电流1
;;;689    			Contr_Voltage = 3500;
;;;690    			Contr_Current = 4000;
;;;691    			calflag = 1;
;;;692    			OnOff_GPOI_ResetSet(0,1);
;;;693    		}else if(range == 7){//电源电流2
;;;694    			
;;;695    			x1 = data;
;;;696    			y1 = Contr_Current;
;;;697    			x3 = Imon_POWE_value;
;;;698    			y3 = data;
;;;699    			Contr_Voltage = 3500;
;;;700    			Contr_Current = 14000;
;;;701    		}else if(range == 8){//电源电流3
;;;702    			
;;;703    			x2 = data;
;;;704    			y2 = Contr_Current;
;;;705    			x4 = Imon_POWE_value;
;;;706    			y4 = data;
;;;707    			
;;;708    			CalPara.SetPC[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;709    			CalPara.OffsetPC[0] = (float)y2 - CalPara.SetPC[0]*(float)x2;
;;;710    			
;;;711    			CalPara.TestPC[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;712    			CalPara.OffsetTestPC[0] = (float)y4 - CalPara.TestPC[0]*(float)x4;
;;;713    			
;;;714    			Flag_DAC_OFF=0;
;;;715    			calflag = 0;
;;;716    			Off_GPOI_ResetSet();
;;;717    		}
;;;718    	}else if(mode == 2){
000044  2802              CMP      r0,#2
000046  d072              BEQ      |L1.302|
000048  e3b4              B        |L1.1972|
                  |L1.74|
00004a  48f1              LDR      r0,|L1.1040|
00004c  b1e9              CBZ      r1,|L1.138|
00004e  2901              CMP      r1,#1                 ;526
000050  d01f              BEQ      |L1.146|
000052  2902              CMP      r1,#2                 ;535
000054  d041              BEQ      |L1.218|
000056  2903              CMP      r1,#3                 ;540
000058  d044              BEQ      |L1.228|
00005a  f2413088          MOV      r0,#0x1388            ;552
00005e  2904              CMP      r1,#4                 ;549
000060  d066              BEQ      |L1.304|
000062  2905              CMP      r1,#5                 ;554
000064  d06c              BEQ      |L1.320|
000066  2906              CMP      r1,#6                 ;561
000068  d07f              BEQ      |L1.362|
00006a  48ea              LDR      r0,|L1.1044|
00006c  f44f7b7a          MOV      r11,#0x3e8            ;581
000070  2907              CMP      r1,#7                 ;576
000072  d074              BEQ      |L1.350|
000074  2908              CMP      r1,#8                 ;583
000076  d073              BEQ      |L1.352|
000078  2909              CMP      r1,#9                 ;591
00007a  d072              BEQ      |L1.354|
00007c  290a              CMP      r1,#0xa               ;600
00007e  d071              BEQ      |L1.356|
000080  290b              CMP      r1,#0xb               ;607
000082  d070              BEQ      |L1.358|
000084  290c              CMP      r1,#0xc               ;615
000086  d06f              BEQ      |L1.360|
000088  e394              B        |L1.1972|
                  |L1.138|
00008a  7037              STRB     r7,[r6,#0]            ;522
00008c  f8c9301c          STR      r3,[r9,#0x1c]         ;523  ; Run_Control
000090  e026              B        |L1.224|
                  |L1.146|
000092  8800              LDRH     r0,[r0,#0]            ;528  ; Vmon_Load_value
000094  ee014a10          VMOV     s2,r4                 ;530
000098  eeb80a40          VCVT.F32.U32 s0,s0                 ;530
00009c  eef80a60          VCVT.F32.U32 s1,s1                 ;530
0000a0  eeb81a41          VCVT.F32.U32 s2,s2                 ;530
0000a4  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;528
0000a8  ee311a40          VSUB.F32 s2,s2,s0              ;530
0000ac  ee000a10          VMOV     s0,r0                 ;530
0000b0  eeb80a40          VCVT.F32.U32 s0,s0                 ;530
0000b4  ee700a60          VSUB.F32 s1,s0,s1              ;530
0000b8  ee810a20          VDIV.F32 s0,s2,s1              ;530
0000bc  ee000a90          VMOV     s1,r0                 ;531
0000c0  eeb81a60          VCVT.F32.U32 s2,s1                 ;531
0000c4  ee004a90          VMOV     s1,r4                 ;531
0000c8  eef80a60          VCVT.F32.U32 s1,s1                 ;531
0000cc  ed880a00          VSTR     s0,[r8,#0]            ;530
0000d0  ee400a41          VMLS.F32 s1,s0,s2              ;531
0000d4  edc80a04          VSTR     s1,[r8,#0x10]         ;531
0000d8  e369              B        |L1.1966|
                  |L1.218|
0000da  7037              STRB     r7,[r6,#0]            ;536
0000dc  f8c9701c          STR      r7,[r9,#0x1c]         ;537  ; Run_Control
                  |L1.224|
0000e0  8800              LDRH     r0,[r0,#0]            ;524  ; Vmon_Load_value
0000e2  e2da              B        |L1.1690|
                  |L1.228|
0000e4  8800              LDRH     r0,[r0,#0]            ;542  ; Vmon_Load_value
0000e6  ee014a10          VMOV     s2,r4                 ;544
0000ea  eeb80a40          VCVT.F32.U32 s0,s0                 ;544
0000ee  eef80a60          VCVT.F32.U32 s1,s1                 ;544
0000f2  eeb81a41          VCVT.F32.U32 s2,s2                 ;544
0000f6  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;542
0000fa  ee311a40          VSUB.F32 s2,s2,s0              ;544
0000fe  ee000a10          VMOV     s0,r0                 ;544
000102  eeb80a40          VCVT.F32.U32 s0,s0                 ;544
000106  ee700a60          VSUB.F32 s1,s0,s1              ;544
00010a  ee810a20          VDIV.F32 s0,s2,s1              ;544
00010e  ee000a90          VMOV     s1,r0                 ;545
000112  eeb81a60          VCVT.F32.U32 s2,s1                 ;545
000116  ee004a90          VMOV     s1,r4                 ;545
00011a  eef80a60          VCVT.F32.U32 s1,s1                 ;545
00011e  ed880a01          VSTR     s0,[r8,#4]            ;544
000122  ee400a41          VMLS.F32 s1,s0,s2              ;545
000126  edc80a05          VSTR     s1,[r8,#0x14]         ;545
00012a  e340              B        |L1.1966|
                  |L1.300|
00012c  e0dc              B        |L1.744|
                  |L1.302|
00012e  e242              B        |L1.1462|
                  |L1.304|
000130  7037              STRB     r7,[r6,#0]            ;550
000132  f64052ac          MOV      r2,#0xdac             ;551
000136  f8ae2000          STRH     r2,[lr,#0]            ;551
00013a  f8ab0000          STRH     r0,[r11,#0]           ;552
00013e  e1e0              B        |L1.1282|
                  |L1.320|
000140  616c              STR      r4,[r5,#0x14]         ;556  ; x1
000142  f8be2000          LDRH     r2,[lr,#0]            ;556  ; Contr_Voltage
000146  61aa              STR      r2,[r5,#0x18]         ;557  ; y1
000148  4ab3              LDR      r2,|L1.1048|
00014a  8812              LDRH     r2,[r2,#0]            ;557  ; Vmon_POWE_value
00014c  e9c52409          STRD     r2,r4,[r5,#0x24]      ;557
000150  f2427210          MOV      r2,#0x2710            ;559
000154  f8ae2000          STRH     r2,[lr,#0]            ;559
000158  4659              MOV      r1,r11                ;560
00015a  e1e2              B        |L1.1314|
00015c  e005              B        |L1.362|
                  |L1.350|
00015e  e04d              B        |L1.508|
                  |L1.352|
000160  e054              B        |L1.524|
                  |L1.354|
000162  e05b              B        |L1.540|
                  |L1.356|
000164  e07f              B        |L1.614|
                  |L1.358|
000166  e08b              B        |L1.640|
                  |L1.360|
000168  e099              B        |L1.670|
                  |L1.362|
00016a  61ec              STR      r4,[r5,#0x1c]         ;563  ; x2
00016c  f8be1000          LDRH     r1,[lr,#0]            ;563  ; Contr_Voltage
000170  48a9              LDR      r0,|L1.1048|
000172  6229              STR      r1,[r5,#0x20]         ;564  ; y2
000174  8800              LDRH     r0,[r0,#0]            ;564  ; Vmon_POWE_value
000176  ee021a10          VMOV     s4,r1                 ;567
00017a  eeb80a40          VCVT.F32.U32 s0,s0                 ;567
00017e  eef80a60          VCVT.F32.U32 s1,s1                 ;567
000182  eeb82a42          VCVT.F32.U32 s4,s4                 ;567
000186  e9c5040b          STRD     r0,r4,[r5,#0x2c]      ;564
00018a  ee322a40          VSUB.F32 s4,s4,s0              ;567
00018e  ee004a10          VMOV     s0,r4                 ;567
000192  eeb80a40          VCVT.F32.U32 s0,s0                 ;567
000196  ee700a60          VSUB.F32 s1,s0,s1              ;567
00019a  ee820a20          VDIV.F32 s0,s4,s1              ;567
00019e  ee004a90          VMOV     s1,r4                 ;568
0001a2  eeb82a60          VCVT.F32.U32 s4,s1                 ;568
0001a6  ee001a90          VMOV     s1,r1                 ;568
0001aa  eef80a60          VCVT.F32.U32 s1,s1                 ;568
0001ae  ed880a02          VSTR     s0,[r8,#8]            ;567
0001b2  ee400a42          VMLS.F32 s1,s0,s4              ;568
0001b6  ee004a10          VMOV     s0,r4                 ;570
0001ba  eeb80a40          VCVT.F32.U32 s0,s0                 ;570
0001be  edc80a06          VSTR     s1,[r8,#0x18]         ;568
0001c2  eef80a41          VCVT.F32.U32 s1,s2                 ;570
0001c6  eeb81a61          VCVT.F32.U32 s2,s3                 ;570
0001ca  ee700a60          VSUB.F32 s1,s0,s1              ;570
0001ce  ee000a10          VMOV     s0,r0                 ;570
0001d2  eeb80a40          VCVT.F32.U32 s0,s0                 ;570
0001d6  ee301a41          VSUB.F32 s2,s0,s2              ;570
0001da  ee800a81          VDIV.F32 s0,s1,s2              ;570
0001de  ee000a90          VMOV     s1,r0                 ;571
0001e2  eeb81a60          VCVT.F32.U32 s2,s1                 ;571
0001e6  ee004a90          VMOV     s1,r4                 ;571
0001ea  eef80a60          VCVT.F32.U32 s1,s1                 ;571
0001ee  ed880a03          VSTR     s0,[r8,#0xc]          ;570
0001f2  ee400a41          VMLS.F32 s1,s0,s2              ;571
0001f6  edc80a07          VSTR     s1,[r8,#0x1c]         ;571
0001fa  e173              B        |L1.1252|
                  |L1.508|
0001fc  f8c97018          STR      r7,[r9,#0x18]         ;577  ; Run_Control
000200  f8c9301c          STR      r3,[r9,#0x1c]         ;578  ; Run_Control
000204  2102              MOVS     r1,#2                 ;579
000206  f7fffffe          BL       GPIO_ResetBits
00020a  e033              B        |L1.628|
                  |L1.524|
00020c  f8c97018          STR      r7,[r9,#0x18]         ;584  ; Run_Control
000210  f8c9301c          STR      r3,[r9,#0x1c]         ;585  ; Run_Control
000214  2102              MOVS     r1,#2                 ;586
000216  f7fffffe          BL       GPIO_ResetBits
00021a  e038              B        |L1.654|
                  |L1.540|
00021c  61ec              STR      r4,[r5,#0x1c]         ;593  ; x2
00021e  f8ba0000          LDRH     r0,[r10,#0]           ;593  ; Contr_Laod
000222  eeb80a40          VCVT.F32.U32 s0,s0                 ;594
000226  ee010a10          VMOV     s2,r0                 ;594
00022a  eef80a60          VCVT.F32.U32 s1,s1                 ;594
00022e  6228              STR      r0,[r5,#0x20]         ;594  ; y2
000230  eeb81a41          VCVT.F32.U32 s2,s2                 ;594
000234  ee311a40          VSUB.F32 s2,s2,s0              ;594
000238  ee004a10          VMOV     s0,r4                 ;594
00023c  eeb80a40          VCVT.F32.U32 s0,s0                 ;594
000240  ee700a60          VSUB.F32 s1,s0,s1              ;594
000244  ee810a20          VDIV.F32 s0,s2,s1              ;594
000248  ee004a90          VMOV     s1,r4                 ;595
00024c  eeb81a60          VCVT.F32.U32 s2,s1                 ;595
000250  ee000a90          VMOV     s1,r0                 ;595
000254  eef80a60          VCVT.F32.U32 s1,s1                 ;595
000258  ed880a0a          VSTR     s0,[r8,#0x28]         ;594
00025c  ee400a41          VMLS.F32 s1,s0,s2              ;595
000260  edc80a12          VSTR     s1,[r8,#0x48]         ;595
000264  e13e              B        |L1.1252|
                  |L1.614|
000266  f8c97018          STR      r7,[r9,#0x18]         ;601  ; Run_Control
00026a  f8c9701c          STR      r7,[r9,#0x1c]         ;602  ; Run_Control
00026e  2102              MOVS     r1,#2                 ;603
000270  f7fffffe          BL       GPIO_SetBits
                  |L1.628|
000274  7037              STRB     r7,[r6,#0]            ;580
000276  f8aab000          STRH     r11,[r10,#0]          ;581
                  |L1.634|
00027a  2101              MOVS     r1,#1                 ;582
00027c  2002              MOVS     r0,#2                 ;582
00027e  e0d3              B        |L1.1064|
                  |L1.640|
000280  f8c97018          STR      r7,[r9,#0x18]         ;608  ; Run_Control
000284  f8c9701c          STR      r7,[r9,#0x1c]         ;609  ; Run_Control
000288  2102              MOVS     r1,#2                 ;610
00028a  f7fffffe          BL       GPIO_SetBits
                  |L1.654|
00028e  616c              STR      r4,[r5,#0x14]         ;588  ; x1
000290  f8ba1000          LDRH     r1,[r10,#0]           ;588  ; Contr_Laod
000294  4650              MOV      r0,r10                ;588
000296  61a9              STR      r1,[r5,#0x18]         ;589  ; y1
000298  f44f51fa          MOV      r1,#0x1f40            ;589
00029c  e0d8              B        |L1.1104|
                  |L1.670|
00029e  61ec              STR      r4,[r5,#0x1c]         ;617  ; x2
0002a0  f8ba0000          LDRH     r0,[r10,#0]           ;617  ; Contr_Laod
0002a4  eeb80a40          VCVT.F32.U32 s0,s0                 ;618
0002a8  ee010a10          VMOV     s2,r0                 ;618
0002ac  eef80a60          VCVT.F32.U32 s1,s1                 ;618
0002b0  6228              STR      r0,[r5,#0x20]         ;618  ; y2
0002b2  eeb81a41          VCVT.F32.U32 s2,s2                 ;618
0002b6  ee311a40          VSUB.F32 s2,s2,s0              ;618
0002ba  ee004a10          VMOV     s0,r4                 ;618
0002be  eeb80a40          VCVT.F32.U32 s0,s0                 ;618
0002c2  ee700a60          VSUB.F32 s1,s0,s1              ;618
0002c6  ee810a20          VDIV.F32 s0,s2,s1              ;618
0002ca  ee004a90          VMOV     s1,r4                 ;619
0002ce  eeb81a60          VCVT.F32.U32 s2,s1                 ;619
0002d2  ee000a90          VMOV     s1,r0                 ;619
0002d6  eef80a60          VCVT.F32.U32 s1,s1                 ;619
0002da  ed880a0b          VSTR     s0,[r8,#0x2c]         ;618
0002de  ee400a41          VMLS.F32 s1,s0,s2              ;619
0002e2  edc80a13          VSTR     s1,[r8,#0x4c]         ;619
0002e6  e0fd              B        |L1.1252|
                  |L1.744|
0002e8  b199              CBZ      r1,|L1.786|
0002ea  2901              CMP      r1,#1                 ;633
0002ec  d018              BEQ      |L1.800|
0002ee  2902              CMP      r1,#2                 ;641
0002f0  d024              BEQ      |L1.828|
0002f2  f44f6000          MOV      r0,#0x800             ;659
0002f6  2903              CMP      r1,#3                 ;657
0002f8  d069              BEQ      |L1.974|
0002fa  2904              CMP      r1,#4                 ;663
0002fc  d073              BEQ      |L1.998|
0002fe  2905              CMP      r1,#5                 ;672
000300  d072              BEQ      |L1.1000|
000302  2906              CMP      r1,#6                 ;688
000304  d071              BEQ      |L1.1002|
000306  4845              LDR      r0,|L1.1052|
000308  2907              CMP      r1,#7                 ;693
00030a  d06f              BEQ      |L1.1004|
00030c  2908              CMP      r1,#8                 ;701
00030e  d06e              BEQ      |L1.1006|
000310  e250              B        |L1.1972|
                  |L1.786|
000312  f8c93020          STR      r3,[r9,#0x20]         ;628  ; Run_Control
000316  f44f50fa          MOV      r0,#0x1f40            ;629
00031a  f8aa0000          STRH     r0,[r10,#0]           ;629
00031e  e060              B        |L1.994|
                  |L1.800|
000320  f8c93020          STR      r3,[r9,#0x20]         ;635  ; Run_Control
000324  616c              STR      r4,[r5,#0x14]         ;637  ; x1
000326  f8ba1000          LDRH     r1,[r10,#0]           ;637  ; Contr_Laod
00032a  4650              MOV      r0,r10                ;637
00032c  61a9              STR      r1,[r5,#0x18]         ;638  ; y1
00032e  493c              LDR      r1,|L1.1056|
000330  8809              LDRH     r1,[r1,#0]            ;638  ; Imon_Load_value
000332  e9c51409          STRD     r1,r4,[r5,#0x24]      ;638
000336  f64d21c0          MOV      r1,#0xdac0            ;640
00033a  e089              B        |L1.1104|
                  |L1.828|
00033c  61ec              STR      r4,[r5,#0x1c]         ;644  ; x2
00033e  f8ba1000          LDRH     r1,[r10,#0]           ;644  ; Contr_Laod
000342  4837              LDR      r0,|L1.1056|
000344  6229              STR      r1,[r5,#0x20]         ;645  ; y2
000346  8800              LDRH     r0,[r0,#0]            ;645  ; Imon_Load_value
000348  ee021a10          VMOV     s4,r1                 ;648
00034c  eeb80a40          VCVT.F32.U32 s0,s0                 ;648
000350  eef80a60          VCVT.F32.U32 s1,s1                 ;648
000354  eeb82a42          VCVT.F32.U32 s4,s4                 ;648
000358  e9c5040b          STRD     r0,r4,[r5,#0x2c]      ;645
00035c  ee322a40          VSUB.F32 s4,s4,s0              ;648
000360  ee004a10          VMOV     s0,r4                 ;648
000364  eeb80a40          VCVT.F32.U32 s0,s0                 ;648
000368  ee700a60          VSUB.F32 s1,s0,s1              ;648
00036c  ee820a20          VDIV.F32 s0,s4,s1              ;648
000370  ee004a90          VMOV     s1,r4                 ;649
000374  eeb82a60          VCVT.F32.U32 s4,s1                 ;649
000378  ee001a90          VMOV     s1,r1                 ;649
00037c  eef80a60          VCVT.F32.U32 s1,s1                 ;649
000380  ed880a08          VSTR     s0,[r8,#0x20]         ;648
000384  ee400a42          VMLS.F32 s1,s0,s4              ;649
000388  ee004a10          VMOV     s0,r4                 ;651
00038c  eeb80a40          VCVT.F32.U32 s0,s0                 ;651
000390  edc80a10          VSTR     s1,[r8,#0x40]         ;649
000394  eef80a41          VCVT.F32.U32 s1,s2                 ;651
000398  eeb81a61          VCVT.F32.U32 s2,s3                 ;651
00039c  ee700a60          VSUB.F32 s1,s0,s1              ;651
0003a0  ee000a10          VMOV     s0,r0                 ;651
0003a4  eeb80a40          VCVT.F32.U32 s0,s0                 ;651
0003a8  ee301a41          VSUB.F32 s2,s0,s2              ;651
0003ac  ee800a81          VDIV.F32 s0,s1,s2              ;651
0003b0  ee000a90          VMOV     s1,r0                 ;652
0003b4  eeb81a60          VCVT.F32.U32 s2,s1                 ;652
0003b8  ee004a90          VMOV     s1,r4                 ;652
0003bc  eef80a60          VCVT.F32.U32 s1,s1                 ;652
0003c0  ed880a0c          VSTR     s0,[r8,#0x30]         ;651
0003c4  ee400a41          VMLS.F32 s1,s0,s2              ;652
0003c8  edc80a14          VSTR     s1,[r8,#0x50]         ;652
0003cc  e08a              B        |L1.1252|
                  |L1.974|
0003ce  f8c97020          STR      r7,[r9,#0x20]         ;658  ; Run_Control
0003d2  4601              MOV      r1,r0                 ;659
0003d4  4813              LDR      r0,|L1.1060|
0003d6  f7fffffe          BL       GPIO_ResetBits
0003da  f6411164          MOV      r1,#0x1964            ;660
0003de  f8aa1000          STRH     r1,[r10,#0]           ;660
                  |L1.994|
0003e2  7037              STRB     r7,[r6,#0]            ;630
0003e4  e749              B        |L1.634|
                  |L1.998|
0003e6  e022              B        |L1.1070|
                  |L1.1000|
0003e8  e034              B        |L1.1108|
                  |L1.1002|
0003ea  e081              B        |L1.1264|
                  |L1.1004|
0003ec  e08c              B        |L1.1288|
                  |L1.1006|
0003ee  e09a              B        |L1.1318|
                  |L1.1008|
                          DCD      calflag
                  |L1.1012|
                          DCD      Run_Control
                  |L1.1016|
                          DCD      ||.data||
                  |L1.1020|
                          DCD      CalPara
                  |L1.1024|
                          DCD      flagB
                  |L1.1028|
                          DCD      Contr_Voltage
                  |L1.1032|
                          DCD      Contr_Current
                  |L1.1036|
                          DCD      Contr_Laod
                  |L1.1040|
                          DCD      Vmon_Load_value
                  |L1.1044|
                          DCD      0x40020400
                  |L1.1048|
                          DCD      Vmon_POWE_value
                  |L1.1052|
                          DCD      Imon_POWE_value
                  |L1.1056|
                          DCD      Imon_Load_value
                  |L1.1060|
                          DCD      0x40020800
                  |L1.1064|
000428  f7fffffe          BL       OnOff_GPOI_ResetSet
00042c  e1c2              B        |L1.1972|
                  |L1.1070|
00042e  f8c97020          STR      r7,[r9,#0x20]         ;665  ; Run_Control
000432  4601              MOV      r1,r0                 ;666
000434  48e1              LDR      r0,|L1.1980|
000436  f7fffffe          BL       GPIO_ResetBits
00043a  616c              STR      r4,[r5,#0x14]         ;668  ; x1
00043c  f8ba1000          LDRH     r1,[r10,#0]           ;668  ; Contr_Laod
000440  4650              MOV      r0,r10                ;668
000442  61a9              STR      r1,[r5,#0x18]         ;669  ; y1
000444  49de              LDR      r1,|L1.1984|
000446  8809              LDRH     r1,[r1,#0]            ;669  ; Imon_Load_value
000448  e9c51409          STRD     r1,r4,[r5,#0x24]      ;669
00044c  f6461178          MOV      r1,#0x6978            ;671
                  |L1.1104|
000450  8001              STRH     r1,[r0,#0]            ;640
000452  e1af              B        |L1.1972|
                  |L1.1108|
000454  61ec              STR      r4,[r5,#0x1c]         ;675  ; x2
000456  f8ba1000          LDRH     r1,[r10,#0]           ;675  ; Contr_Laod
00045a  48d9              LDR      r0,|L1.1984|
00045c  6229              STR      r1,[r5,#0x20]         ;676  ; y2
00045e  8800              LDRH     r0,[r0,#0]            ;676  ; Imon_Load_value
000460  ee021a10          VMOV     s4,r1                 ;679
000464  eeb80a40          VCVT.F32.U32 s0,s0                 ;679
000468  eef80a60          VCVT.F32.U32 s1,s1                 ;679
00046c  eeb82a42          VCVT.F32.U32 s4,s4                 ;679
000470  e9c5040b          STRD     r0,r4,[r5,#0x2c]      ;676
000474  ee322a40          VSUB.F32 s4,s4,s0              ;679
000478  ee004a10          VMOV     s0,r4                 ;679
00047c  eeb80a40          VCVT.F32.U32 s0,s0                 ;679
000480  ee700a60          VSUB.F32 s1,s0,s1              ;679
000484  ee820a20          VDIV.F32 s0,s4,s1              ;679
000488  ee004a90          VMOV     s1,r4                 ;680
00048c  eeb82a60          VCVT.F32.U32 s4,s1                 ;680
000490  ee001a90          VMOV     s1,r1                 ;680
000494  eef80a60          VCVT.F32.U32 s1,s1                 ;680
000498  ed880a09          VSTR     s0,[r8,#0x24]         ;679
00049c  ee400a42          VMLS.F32 s1,s0,s4              ;680
0004a0  ee004a10          VMOV     s0,r4                 ;682
0004a4  eeb80a40          VCVT.F32.U32 s0,s0                 ;682
0004a8  edc80a11          VSTR     s1,[r8,#0x44]         ;680
0004ac  eef80a41          VCVT.F32.U32 s1,s2                 ;682
0004b0  eeb81a61          VCVT.F32.U32 s2,s3                 ;682
0004b4  ee700a60          VSUB.F32 s1,s0,s1              ;682
0004b8  ee000a10          VMOV     s0,r0                 ;682
0004bc  eeb80a40          VCVT.F32.U32 s0,s0                 ;682
0004c0  ee301a41          VSUB.F32 s2,s0,s2              ;682
0004c4  ee800a81          VDIV.F32 s0,s1,s2              ;682
0004c8  ee000a90          VMOV     s1,r0                 ;683
0004cc  eeb81a60          VCVT.F32.U32 s2,s1                 ;683
0004d0  ee004a90          VMOV     s1,r4                 ;683
0004d4  eef80a60          VCVT.F32.U32 s1,s1                 ;683
0004d8  ed880a0d          VSTR     s0,[r8,#0x34]         ;682
0004dc  ee400a41          VMLS.F32 s1,s0,s2              ;683
0004e0  edc80a15          VSTR     s1,[r8,#0x54]         ;683
                  |L1.1252|
0004e4  f8cc2000          STR      r2,[r12,#0]           ;655  ; flagB
0004e8  7033              STRB     r3,[r6,#0]            ;655
0004ea  f7fffffe          BL       Off_GPOI_ResetSet
0004ee  e161              B        |L1.1972|
                  |L1.1264|
0004f0  f64050ac          MOV      r0,#0xdac             ;689
0004f4  f8ae0000          STRH     r0,[lr,#0]            ;689
0004f8  f44f617a          MOV      r1,#0xfa0             ;690
0004fc  f8ab1000          STRH     r1,[r11,#0]           ;690
000500  7037              STRB     r7,[r6,#0]            ;691
                  |L1.1282|
000502  2101              MOVS     r1,#1                 ;553
000504  2000              MOVS     r0,#0                 ;553
000506  e78f              B        |L1.1064|
                  |L1.1288|
000508  616c              STR      r4,[r5,#0x14]         ;696  ; x1
00050a  f8bb2000          LDRH     r2,[r11,#0]           ;696  ; Contr_Current
00050e  4659              MOV      r1,r11                ;696
000510  61aa              STR      r2,[r5,#0x18]         ;697  ; y1
000512  8800              LDRH     r0,[r0,#0]            ;697  ; Imon_POWE_value
000514  e9c50409          STRD     r0,r4,[r5,#0x24]      ;697
000518  f64050ac          MOV      r0,#0xdac             ;699
00051c  f8ae0000          STRH     r0,[lr,#0]            ;699
000520  0080              LSLS     r0,r0,#2              ;700
                  |L1.1314|
000522  8008              STRH     r0,[r1,#0]            ;700
000524  e146              B        |L1.1972|
                  |L1.1318|
000526  61ec              STR      r4,[r5,#0x1c]         ;704  ; x2
000528  f8bb1000          LDRH     r1,[r11,#0]           ;704  ; Contr_Current
00052c  6229              STR      r1,[r5,#0x20]         ;705  ; y2
00052e  8800              LDRH     r0,[r0,#0]            ;705  ; Imon_POWE_value
000530  ee021a10          VMOV     s4,r1                 ;708
000534  eeb80a40          VCVT.F32.U32 s0,s0                 ;708
000538  eef80a60          VCVT.F32.U32 s1,s1                 ;708
00053c  eeb82a42          VCVT.F32.U32 s4,s4                 ;708
000540  e9c5040b          STRD     r0,r4,[r5,#0x2c]      ;705
000544  ee322a40          VSUB.F32 s4,s4,s0              ;708
000548  ee004a10          VMOV     s0,r4                 ;708
00054c  eeb80a40          VCVT.F32.U32 s0,s0                 ;708
000550  ee700a60          VSUB.F32 s1,s0,s1              ;708
000554  ee820a20          VDIV.F32 s0,s4,s1              ;708
000558  ee004a90          VMOV     s1,r4                 ;709
00055c  eeb82a60          VCVT.F32.U32 s4,s1                 ;709
000560  ee001a90          VMOV     s1,r1                 ;709
000564  eef80a60          VCVT.F32.U32 s1,s1                 ;709
000568  ed880a0e          VSTR     s0,[r8,#0x38]         ;708
00056c  ee400a42          VMLS.F32 s1,s0,s4              ;709
000570  ee004a10          VMOV     s0,r4                 ;711
000574  eeb80a40          VCVT.F32.U32 s0,s0                 ;711
000578  edc80a16          VSTR     s1,[r8,#0x58]         ;709
00057c  eef80a41          VCVT.F32.U32 s1,s2                 ;711
000580  eeb81a61          VCVT.F32.U32 s2,s3                 ;711
000584  ee700a60          VSUB.F32 s1,s0,s1              ;711
000588  ee000a10          VMOV     s0,r0                 ;711
00058c  eeb80a40          VCVT.F32.U32 s0,s0                 ;711
000590  ee301a41          VSUB.F32 s2,s0,s2              ;711
000594  ee800a81          VDIV.F32 s0,s1,s2              ;711
000598  ee000a90          VMOV     s1,r0                 ;712
00059c  eeb81a60          VCVT.F32.U32 s2,s1                 ;712
0005a0  ee004a90          VMOV     s1,r4                 ;712
0005a4  eef80a60          VCVT.F32.U32 s1,s1                 ;712
0005a8  ed880a0f          VSTR     s0,[r8,#0x3c]         ;711
0005ac  ee400a41          VMLS.F32 s1,s0,s2              ;712
0005b0  edc80a17          VSTR     s1,[r8,#0x5c]         ;712
0005b4  e796              B        |L1.1252|
                  |L1.1462|
;;;719    		if(range == 0)//内阻低档位低段
;;;720    		{
;;;721    			RCONT_SW = 0;
;;;722    			calflag = 1;
;;;723    			x1 = Rmon_value;
0005b6  4883              LDR      r0,|L1.1988|
0005b8  b1c1              CBZ      r1,|L1.1516|
;;;724    			y1 = data;
;;;725    			
;;;726    //			Modify_A_READ=0;
;;;727    //			Modify_A_ACT=0;
;;;728    //			Modify_A_READ = Rmon_value;//测量电阻值
;;;729    //			Modify_A_ACT = data;//读取低段
;;;730    		}else if (range == 1)//内阻低档位高段
0005ba  2901              CMP      r1,#1
0005bc  d019              BEQ      |L1.1522|
;;;731    		{
;;;732    
;;;733    			x2 = Rmon_value;
;;;734    			y2 = data;
;;;735    			CalPara.TestR[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;736    			CalPara.OffsetR[0] = (float)y2 - CalPara.TestR[0]*(float)x2;
;;;737    				//参数写进FLASH
;;;738    			Flag_DAC_OFF=0;
;;;739    			calflag = 0;
;;;740    		}else if(range == 2)//内阻高档位低段
0005be  2902              CMP      r1,#2
0005c0  d07e              BEQ      |L1.1728|
;;;741    		{
;;;742    			RCONT_SW = 1;
;;;743    			calflag = 1;
;;;744    			x1 = Rmon_value;
;;;745    			y1 = data;
;;;746    		}else if (range == 3)//内阻高档位高段
0005c2  2903              CMP      r1,#3
0005c4  d039              BEQ      |L1.1594|
;;;747    		{
;;;748    			
;;;749    			x2 = Rmon_value;
;;;750    			y2 = data;
;;;751    			CalPara.TestR[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;752    			CalPara.OffsetR[1] = (float)y2 - CalPara.TestR[1]*(float)x2;
;;;753    				//参数写进FLASH
;;;754    			Flag_DAC_OFF=0;
;;;755    			calflag = 0;
;;;756    		}else if(range == 4)//识别电阻1低段
;;;757    		{
;;;758    			calflag = 1;
;;;759    //			x1 = (R1mon_value*1000)/(65535-R1mon_value);
;;;760    			x1 = (R1mon_value*1000)/(65535-R1mon_value);
0005c6  f8dfb200          LDR      r11,|L1.1992|
0005ca  f64f7aff          MOV      r10,#0xffff
0005ce  2904              CMP      r1,#4                 ;756
0005d0  d057              BEQ      |L1.1666|
;;;761    			y1 = data;
;;;762    		}else if (range == 5)//识别电阻1高段
0005d2  2905              CMP      r1,#5
0005d4  d064              BEQ      |L1.1696|
;;;763    		{
;;;764    			
;;;765    //			x2 = (R1mon_value*1000)/(65535-R1mon_value);
;;;766    			x2 = (R1mon_value*1000)/(65535-R1mon_value);
;;;767    			y2 = data;
;;;768    			CalPara.TestR1[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;769    			CalPara.OffsetR1[0] = (float)y2 - CalPara.TestR1[0]*(float)x2;
;;;770    				//参数写进FLASH
;;;771    			Flag_DAC_OFF=0;
;;;772    			calflag = 0;
;;;773    		}else if(range == 6)//识别电阻2低段
;;;774    		{
;;;775    			calflag = 1;
;;;776    			x1 = (R2mon_value*1000)/(65535-R2mon_value);
0005d6  f8dfb1f4          LDR      r11,|L1.1996|
0005da  2906              CMP      r1,#6                 ;773
0005dc  d051              BEQ      |L1.1666|
;;;777    			y1 = data;
;;;778    		}else if (range == 7)//识别电阻2高段
0005de  2907              CMP      r1,#7
0005e0  d06f              BEQ      |L1.1730|
;;;779    		{
;;;780    			
;;;781    			x2 = (R2mon_value*1000)/(65535-R2mon_value);
;;;782    			y2 = data;
;;;783    			CalPara.TestR2[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;784    			CalPara.OffsetR2[0] = (float)y2 - CalPara.TestR2[0]*(float)x2;
;;;785    				//参数写进FLASH
;;;786    			Flag_DAC_OFF=0;
;;;787    			calflag = 0;
;;;788    		}else if(range == 8)//内阻高档位低段
0005e2  2908              CMP      r1,#8
0005e4  d06c              BEQ      |L1.1728|
;;;789    		{
;;;790    			RCONT_SW = 1;
;;;791    			calflag = 1;
;;;792    			x1 = Rmon_value;
;;;793    			y1 = data;
;;;794    		}else if (range == 9)//内阻高档位高段
0005e6  2909              CMP      r1,#9
0005e8  d06c              BEQ      |L1.1732|
0005ea  e0e3              B        |L1.1972|
                  |L1.1516|
0005ec  f8c93024          STR      r3,[r9,#0x24]         ;721  ; Run_Control
0005f0  e0b8              B        |L1.1892|
                  |L1.1522|
0005f2  8800              LDRH     r0,[r0,#0]            ;733  ; Rmon_value
0005f4  ee014a10          VMOV     s2,r4                 ;735
0005f8  eeb80a40          VCVT.F32.U32 s0,s0                 ;735
0005fc  eef80a60          VCVT.F32.U32 s1,s1                 ;735
000600  eeb81a41          VCVT.F32.U32 s2,s2                 ;735
000604  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;733
000608  ee311a40          VSUB.F32 s2,s2,s0              ;735
00060c  ee000a10          VMOV     s0,r0                 ;735
000610  eeb80a40          VCVT.F32.U32 s0,s0                 ;735
000614  ee700a60          VSUB.F32 s1,s0,s1              ;735
000618  ee810a20          VDIV.F32 s0,s2,s1              ;735
00061c  ee000a90          VMOV     s1,r0                 ;736
000620  eeb81a60          VCVT.F32.U32 s2,s1                 ;736
000624  ee004a90          VMOV     s1,r4                 ;736
000628  eef80a60          VCVT.F32.U32 s1,s1                 ;736
00062c  ed880a18          VSTR     s0,[r8,#0x60]         ;735
000630  ee400a41          VMLS.F32 s1,s0,s2              ;736
000634  edc80a1d          VSTR     s1,[r8,#0x74]         ;736
000638  e0b9              B        |L1.1966|
                  |L1.1594|
00063a  8800              LDRH     r0,[r0,#0]            ;749  ; Rmon_value
00063c  ee014a10          VMOV     s2,r4                 ;751
000640  eeb80a40          VCVT.F32.U32 s0,s0                 ;751
000644  eef80a60          VCVT.F32.U32 s1,s1                 ;751
000648  eeb81a41          VCVT.F32.U32 s2,s2                 ;751
00064c  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;749
000650  ee311a40          VSUB.F32 s2,s2,s0              ;751
000654  ee000a10          VMOV     s0,r0                 ;751
000658  eeb80a40          VCVT.F32.U32 s0,s0                 ;751
00065c  ee700a60          VSUB.F32 s1,s0,s1              ;751
000660  ee810a20          VDIV.F32 s0,s2,s1              ;751
000664  ee000a90          VMOV     s1,r0                 ;752
000668  eeb81a60          VCVT.F32.U32 s2,s1                 ;752
00066c  ee004a90          VMOV     s1,r4                 ;752
000670  eef80a60          VCVT.F32.U32 s1,s1                 ;752
000674  ed880a19          VSTR     s0,[r8,#0x64]         ;751
000678  ee400a41          VMLS.F32 s1,s0,s2              ;752
00067c  edc80a1e          VSTR     s1,[r8,#0x78]         ;752
000680  e095              B        |L1.1966|
                  |L1.1666|
000682  7037              STRB     r7,[r6,#0]            ;758
000684  f8bb1000          LDRH     r1,[r11,#0]           ;760  ; R1mon_value
000688  f44f727a          MOV      r2,#0x3e8             ;760
00068c  4351              MULS     r1,r2,r1              ;760
00068e  f8bb2000          LDRH     r2,[r11,#0]           ;760  ; R1mon_value
000692  ebaa0002          SUB      r0,r10,r2             ;760
000696  fbb1f0f0          UDIV     r0,r1,r0              ;760
                  |L1.1690|
00069a  e9c50405          STRD     r0,r4,[r5,#0x14]      ;760
00069e  e089              B        |L1.1972|
                  |L1.1696|
0006a0  f8bb1000          LDRH     r1,[r11,#0]           ;766  ; R1mon_value
0006a4  f44f777a          MOV      r7,#0x3e8             ;766
0006a8  4379              MULS     r1,r7,r1              ;766
0006aa  f8bb7000          LDRH     r7,[r11,#0]           ;766  ; R1mon_value
0006ae  ee014a10          VMOV     s2,r4                 ;768
0006b2  ebaa0007          SUB      r0,r10,r7             ;766
0006b6  fbb1f0f0          UDIV     r0,r1,r0              ;766
0006ba  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;766
0006be  e002              B        |L1.1734|
                  |L1.1728|
0006c0  e04e              B        |L1.1888|
                  |L1.1730|
0006c2  e01f              B        |L1.1796|
                  |L1.1732|
0006c4  e050              B        |L1.1896|
                  |L1.1734|
0006c6  eeb81a41          VCVT.F32.U32 s2,s2                 ;768
0006ca  eeb80a40          VCVT.F32.U32 s0,s0                 ;768
0006ce  eef80a60          VCVT.F32.U32 s1,s1                 ;768
0006d2  ee311a40          VSUB.F32 s2,s2,s0              ;768
0006d6  ee000a10          VMOV     s0,r0                 ;768
0006da  eeb80a40          VCVT.F32.U32 s0,s0                 ;768
0006de  ee700a60          VSUB.F32 s1,s0,s1              ;768
0006e2  ee810a20          VDIV.F32 s0,s2,s1              ;768
0006e6  ee000a90          VMOV     s1,r0                 ;769
0006ea  eeb81a60          VCVT.F32.U32 s2,s1                 ;769
0006ee  ee004a90          VMOV     s1,r4                 ;769
0006f2  eef80a60          VCVT.F32.U32 s1,s1                 ;769
0006f6  ed880a1b          VSTR     s0,[r8,#0x6c]         ;768
0006fa  ee400a41          VMLS.F32 s1,s0,s2              ;769
0006fe  edc80a20          VSTR     s1,[r8,#0x80]         ;769
000702  e054              B        |L1.1966|
                  |L1.1796|
000704  f8bb1000          LDRH     r1,[r11,#0]           ;781  ; R2mon_value
000708  f44f777a          MOV      r7,#0x3e8             ;781
00070c  4379              MULS     r1,r7,r1              ;781
00070e  f8bb7000          LDRH     r7,[r11,#0]           ;781  ; R2mon_value
000712  ee014a10          VMOV     s2,r4                 ;783
000716  ebaa0007          SUB      r0,r10,r7             ;781
00071a  fbb1f0f0          UDIV     r0,r1,r0              ;781
00071e  eeb81a41          VCVT.F32.U32 s2,s2                 ;783
000722  eeb80a40          VCVT.F32.U32 s0,s0                 ;783
000726  eef80a60          VCVT.F32.U32 s1,s1                 ;783
00072a  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;781
00072e  ee311a40          VSUB.F32 s2,s2,s0              ;783
000732  ee000a10          VMOV     s0,r0                 ;783
000736  eeb80a40          VCVT.F32.U32 s0,s0                 ;783
00073a  ee700a60          VSUB.F32 s1,s0,s1              ;783
00073e  ee810a20          VDIV.F32 s0,s2,s1              ;783
000742  ee000a90          VMOV     s1,r0                 ;784
000746  eeb81a60          VCVT.F32.U32 s2,s1                 ;784
00074a  ee004a90          VMOV     s1,r4                 ;784
00074e  eef80a60          VCVT.F32.U32 s1,s1                 ;784
000752  ed880a1c          VSTR     s0,[r8,#0x70]         ;783
000756  ee400a41          VMLS.F32 s1,s0,s2              ;784
00075a  edc80a21          VSTR     s1,[r8,#0x84]         ;784
00075e  e026              B        |L1.1966|
                  |L1.1888|
000760  f8c97024          STR      r7,[r9,#0x24]         ;790  ; Run_Control
                  |L1.1892|
000764  7037              STRB     r7,[r6,#0]            ;791
000766  e4bb              B        |L1.224|
                  |L1.1896|
;;;795    		{
;;;796    			
;;;797    			x2 = Rmon_value;
000768  8800              LDRH     r0,[r0,#0]  ; Rmon_value
;;;798    			y2 = data;
;;;799    			CalPara.TestR[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
00076a  ee014a10          VMOV     s2,r4
00076e  eeb80a40          VCVT.F32.U32 s0,s0
000772  eef80a60          VCVT.F32.U32 s1,s1
000776  eeb81a41          VCVT.F32.U32 s2,s2
00077a  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;797
00077e  ee311a40          VSUB.F32 s2,s2,s0
000782  ee000a10          VMOV     s0,r0
000786  eeb80a40          VCVT.F32.U32 s0,s0
00078a  ee700a60          VSUB.F32 s1,s0,s1
00078e  ee810a20          VDIV.F32 s0,s2,s1
;;;800    			CalPara.OffsetR[2] = (float)y2 - CalPara.TestR[2]*(float)x2;
000792  ee000a90          VMOV     s1,r0
000796  eeb81a60          VCVT.F32.U32 s2,s1
00079a  ee004a90          VMOV     s1,r4
00079e  eef80a60          VCVT.F32.U32 s1,s1
0007a2  ed880a1a          VSTR     s0,[r8,#0x68]         ;799
0007a6  ee400a41          VMLS.F32 s1,s0,s2
0007aa  edc80a1f          VSTR     s1,[r8,#0x7c]
                  |L1.1966|
;;;801    				//参数写进FLASH
;;;802    			Flag_DAC_OFF=0;
;;;803    			calflag = 0;
0007ae  f8cc2000          STR      r2,[r12,#0]  ; flagB
0007b2  7033              STRB     r3,[r6,#0]
                  |L1.1972|
;;;804    		}
;;;805    		
;;;806    	}
;;;807    		
;;;808    
;;;809    	Write_Flash_Bytes();
0007b4  e8bd5ff0          POP      {r4-r12,lr}
0007b8  f7ffbffe          B.W      Write_Flash_Bytes
;;;810    //	else if(mode == 1){//测量电流
;;;811    //		if(range == 1)
;;;812    //		{
;;;813    //			x1 = abs(I_CS);
;;;814    //			y1 = data;
;;;815    //		}else if(range == 2){
;;;816    //			x2 = abs(I_CS);
;;;817    //			y2 = data;
;;;818    //			SaveDebug.TestIcal[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;819    //			SaveDebug.OffsetI[1] = (float)y2 - SaveDebug.TestIcal[1]*(float)x2;
;;;820    //		}else if(range == 4){
;;;821    //			x1 = abs(I_CS);
;;;822    //			y1 = data;
;;;823    //		}else if(range == 5){
;;;824    //			x2 = abs(I_CS);
;;;825    //			y2 = data;
;;;826    //			SaveDebug.TestIcal[4] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;827    //			SaveDebug.OffsetI[3] = (float)y2 - SaveDebug.TestIcal[4]*(float)x2;
;;;828    //		}else if(range == 0){
;;;829    //			SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[0]);
;;;830    //		}else if(range == 3){
;;;831    //			SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[0]));
;;;832    //		}
;;;833    ////		else if(range == 4){
;;;834    ////			x1 = V_CS;
;;;835    ////			y1 = data;
;;;836    ////		}else if(range == 5){
;;;837    ////			x2 = V_CS;
;;;838    ////			y2 = data;
;;;839    ////			SaveDebug.TestVcal[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;840    ////			SaveDebug.OffsetV[2] = (float)y2 - SaveDebug.TestVcal[2]*(float)x2;
;;;841    ////		}
;;;842    //		
;;;843    ////		if(range < 3)
;;;844    ////		{
;;;845    ////			if(range == 0)
;;;846    ////			{
;;;847    ////				SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[0]);
;;;848    ////			}else{
;;;849    ////				SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[1]);
;;;850    ////			}			
;;;851    ////		}else{
;;;852    ////			if(range == 3)
;;;853    ////			{
;;;854    ////				SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[0]));
;;;855    ////			}else{
;;;856    ////				SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[1]));
;;;857    ////			}
;;;858    ////		}
;;;859    ////		calflag = 1;
;;;860    //	}else if(mode == 2){//控制电压
;;;861    //		if(range == 0)
;;;862    //		{
;;;863    //			_D_ = 1000;
;;;864    //			x1 = data;
;;;865    //			y1 = _D_;
;;;866    //		}else if(range == 1){
;;;867    //			_D_ = 7000;
;;;868    //			x2 = data;
;;;869    //			y2 = _D_;
;;;870    //			SaveDebug.ControlV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;871    //			SaveDebug.OffsetCV[0] = (float)y2 - SaveDebug.ControlV[0]*(float)x2;
;;;872    //		}else if(range == 2){
;;;873    //			_D_ = 10000;
;;;874    //			x1 = data;
;;;875    //			y1 = _D_;
;;;876    //		}else if(range == 3){
;;;877    //			_D_ = 13000;
;;;878    //			x2 = data;
;;;879    //			y2 = _D_;
;;;880    //			SaveDebug.ControlV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;881    //			SaveDebug.OffsetCV[1] = (float)y2 - SaveDebug.ControlV[1]*(float)x2;
;;;882    //		}else if(range == 4){
;;;883    //			_D_ = 17000;
;;;884    //			x1 = data;
;;;885    //			y1 = _D_;
;;;886    //		}else if(range == 5){
;;;887    //			_D_ = 20000;
;;;888    //			x2 = data;
;;;889    //			y2 = _D_;
;;;890    //			SaveDebug.ControlV[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;891    //			SaveDebug.OffsetCV[2] = (float)y2 - SaveDebug.ControlV[2]*(float)x2;
;;;892    //		}else if(range == 6){
;;;893    //			_D_ = 24000;
;;;894    //			x1 = data;
;;;895    //			y1 = _D_;
;;;896    //		}else if(range == 7){
;;;897    //			_D_ = 27000;
;;;898    //			x2 = data;
;;;899    //			y2 = _D_;
;;;900    //			SaveDebug.ControlV[3] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;901    //			SaveDebug.OffsetCV[3] = (float)y2 - SaveDebug.ControlV[3]*(float)x2;
;;;902    //		}
;;;903    //		
;;;904    ////		if(range == 0)
;;;905    ////		{
;;;906    ////			SaveDebug.ControlV[range] = (float)1000/(float)data;
;;;907    ////		}else if(range == 1){
;;;908    ////			SaveDebug.ControlV[range] = (float)10000/(float)data;
;;;909    ////		}else if(range == 2){
;;;910    ////			SaveDebug.ControlV[range] = (float)15000/(float)data;
;;;911    ////		}else if(range == 3){
;;;912    ////			SaveDebug.ControlV[range] = (float)19000/(float)data;
;;;913    ////		}
;;;914    ////		calflag = 1;
;;;915    //	}else if(mode == 3){//电流清零
;;;916    //		SaveDebug.ClearI[range] = I_CS;
;;;917    ////		calflag = 1;
;;;918    //	}
;;;919    	
;;;920    }
;;;921    
                          ENDP

                  |L1.1980|
                          DCD      0x40020800
                  |L1.1984|
                          DCD      Imon_Load_value
                  |L1.1988|
                          DCD      Rmon_value
                  |L1.1992|
                          DCD      R1mon_value
                  |L1.1996|
                          DCD      R2mon_value

                          AREA ||i.DMA1_Stream3_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Stream3_IRQHandler PROC
;;;2272   
;;;2273   void DMA1_Stream3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2274   {
;;;2275   	//----DMA1 通道3完成中断，对应的中断也需要清除
;;;2276   	if(DMA_GetITStatus(DMA1_Stream3,DMA_IT_TCIF3) != RESET)   
000002  4d0c              LDR      r5,|L2.52|
000004  4c0c              LDR      r4,|L2.56|
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       DMA_GetITStatus
00000e  2800              CMP      r0,#0
000010  d00e              BEQ      |L2.48|
;;;2277       {
;;;2278   		/* 清除标志位 */
;;;2279   		DMA_ClearFlag(DMA1_Stream3,DMA_IT_TCIF3); 
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       DMA_ClearFlag
;;;2280   		/* 关闭DMA */
;;;2281   		DMA_Cmd(DMA1_Stream3,DISABLE);
00001a  2100              MOVS     r1,#0
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       DMA_Cmd
;;;2282   		
;;;2283   		while (!(USART3->SR & USART_FLAG_TC));  //硬件数据发送完毕
000022  4806              LDR      r0,|L2.60|
                  |L2.36|
000024  8801              LDRH     r1,[r0,#0]
000026  0649              LSLS     r1,r1,#25
000028  d5fc              BPL      |L2.36|
                  |L2.42|
;;;2284   		while (!(USART3->SR & USART_FLAG_TXE)); //等待数据从软件拷贝到硬件进行发送
00002a  8801              LDRH     r1,[r0,#0]
00002c  0609              LSLS     r1,r1,#24
00002e  d5fc              BPL      |L2.42|
                  |L2.48|
;;;2285   	}
;;;2286   }
000030  bd70              POP      {r4-r6,pc}
;;;2287   
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      0x18008000
                  |L2.56|
                          DCD      0x40026058
                  |L2.60|
                          DCD      0x40004800

                          AREA ||i.IsDigitChar||, CODE, READONLY, ALIGN=1

                  IsDigitChar PROC
;;;88     /*****************************************************************/
;;;89     unsigned short IsDigitChar(unsigned char a)             //如果a的值是数字的话返回1，否则返回0
000000  3830              SUBS     r0,r0,#0x30
;;;90     {
;;;91     	int b;
;;;92       if(a<0x30 || a>0x39)                     //数字1-9
000002  280a              CMP      r0,#0xa
000004  d301              BCC      |L3.10|
;;;93       	{
;;;94       	   b=0;
000006  2000              MOVS     r0,#0
;;;95       	}
;;;96       else
;;;97       	{
;;;98       	   b=1;
;;;99       	}
;;;100      return b;
;;;101    }
000008  4770              BX       lr
                  |L3.10|
00000a  2001              MOVS     r0,#1                 ;98
00000c  4770              BX       lr
;;;102    void SetPowerV(vu16 powv)
                          ENDP


                          AREA ||i.LIST_ONOFF||, CODE, READONLY, ALIGN=2

                  LIST_ONOFF PROC
;;;337    
;;;338    void LIST_ONOFF(vu8 value)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;339    {
;;;340    	switch(MODE)
000004  4a63              LDR      r2,|L4.404|
000006  ed2d8b02          VPUSH    {d8}                  ;339
00000a  f892c005          LDRB     r12,[r2,#5]  ; MODE
;;;341    	{
;;;342    		case 0://电子负载ON/OFF
;;;343    		{
;;;344    			LOAD_MODE=0;
;;;345    			GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
;;;346    			if( value == 0 ){
;;;347    				
;;;348    				Flag_Swtich_ON = 0;
00000e  4c63              LDR      r4,|L4.412|
000010  2600              MOVS     r6,#0                 ;340
000012  f8df9184          LDR      r9,|L4.408|
;;;349    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
;;;350    			}
;;;351    			else if( value == 1 ){
;;;352    				
;;;353    				Flag_Swtich_ON = 1;
000016  6821              LDR      r1,[r4,#0]
;;;354    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;355    			}
;;;356    		}break;
;;;357    		case 1://稳压电源ON/OFF
;;;358    		{
;;;359    			if( value == 0 ){
;;;360    				listsend = 3;
;;;361    				listpowwatch1 ++;
;;;362    //				PowerSwitch(0);
;;;363    //				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;364    //				Para.CSET_Voltage = 0;
;;;365    //				Para.CSET_Current = 0;
;;;366    //				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;367    			}
;;;368    			else if( value == 1 ){
;;;369    				listsend = 1;
000018  2301              MOVS     r3,#1
;;;370    				listpowwatch2 ++;
;;;371    //				PowerSwitch(1);
;;;372    //				Para.CSET_Voltage = Para.CDC_OutPut_V;
;;;373    //				Para.CSET_Current = Para.CDC_Limit_C;
;;;374    //				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;375    //				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;376    			}
;;;377    		}break;
;;;378    		case 2://过流测试ON/OFF
;;;379    		{
;;;380    			listocwatch++;
;;;381    			if( value == 0 ){
;;;382    				
;;;383    				Off_GPOI_ResetSet();
;;;384    				trig_flag_state = 0;
;;;385    				max_discahrgeNum = 0;
;;;386    				Para.CSET_Current_Laod =  Para.IR_Start_C;
00001a  4d61              LDR      r5,|L4.416|
00001c  4f61              LDR      r7,|L4.420|
00001e  f0410040          ORR      r0,r1,#0x40           ;353
000022  f1bc0f05          CMP      r12,#5                ;340
000026  d225              BCS      |L4.116|
000028  e8dff00c          TBB      [pc,r12]              ;340
00002c  03192e7b          DCB      0x03,0x19,0x2e,0x7b
000030  9800              DCB      0x98,0x00
000032  f8c96018          STR      r6,[r9,#0x18]         ;344  ; Run_Control
000036  f44f5180          MOV      r1,#0x1000            ;345
00003a  4638              MOV      r0,r7                 ;345
00003c  f7fffffe          BL       GPIO_ResetBits
000040  f89d0008          LDRB     r0,[sp,#8]            ;346
000044  b138              CBZ      r0,|L4.86|
000046  f89d0008          LDRB     r0,[sp,#8]            ;351
00004a  2801              CMP      r0,#1                 ;351
00004c  d112              BNE      |L4.116|
00004e  6820              LDR      r0,[r4,#0]            ;353  ; flagA
000050  f0400040          ORR      r0,r0,#0x40           ;353
000054  e089              B        |L4.362|
                  |L4.86|
000056  6820              LDR      r0,[r4,#0]            ;348  ; flagA
000058  f0200040          BIC      r0,r0,#0x40           ;348
00005c  e090              B        |L4.384|
00005e  f89d0008          LDRB     r0,[sp,#8]            ;359
000062  b158              CBZ      r0,|L4.124|
000064  f89d0008          LDRB     r0,[sp,#8]            ;368
000068  2801              CMP      r0,#1                 ;368
00006a  d103              BNE      |L4.116|
00006c  7253              STRB     r3,[r2,#9]            ;369
00006e  7b10              LDRB     r0,[r2,#0xc]          ;370  ; listpowwatch2
000070  1c40              ADDS     r0,r0,#1              ;370
000072  7310              STRB     r0,[r2,#0xc]          ;370
                  |L4.116|
;;;387    			}
;;;388    			else if( value == 1 ){
;;;389    				LOAD_I_SW = 1;
;;;390    				testv = DISS_Voltage;
;;;391    				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
;;;392    				Para.CSET_Current = 1000;
;;;393    				Para.CSET_Current_Laod =  Para.IR_Start_C;
;;;394    				shorttime = 0;
;;;395    				old_I = 0;
;;;396    				max_discahrgeNum = 0;
;;;397    				trig_flag_state = 1;
;;;398    				C_DISCHARGE = 1;        	
;;;399    				Flag_Swtich_ON = 1;
;;;400    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
;;;401    				max_discahrgeNum = (float)Para.IR_Start_C / 1000;				
;;;402    //				testv = DISS_Voltage;
;;;403    //				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
;;;404    //				Para.CSET_Current = 1000;
;;;405    //				Para.CSET_Current_Laod = Para.IR_Start_C;
;;;406    //				shorttime = 0;
;;;407    //				old_I = 0;
;;;408    //				max_discahrgeNum = 0;
;;;409    //				trig_flag_state = 1;
;;;410    //				C_DISCHARGE = 1;
;;;411    //				Flag_Swtich_ON = 1;
;;;412    //				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
;;;413    //				max_discahrgeNum = (float)Para.IR_Start_C / 1000;
;;;414    			}
;;;415    		}break;
;;;416    		case 3://过充测试ON/OFF
;;;417    		{
;;;418    			if( value == 0 ){
;;;419    				
;;;420    				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;421    				Para.CSET_Voltage = 0;
;;;422    				Para.CSET_Current = 0;
;;;423    				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;424    			}
;;;425    			else if( value == 1 ){
;;;426    				Para.CSET_Voltage = Para.CDC_OutPut_V;
;;;427    				Para.CSET_Current = Para.CDC_Limit_C;
;;;428    				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;429    				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;430    			}
;;;431    		}break;
;;;432    		case 4://电子负载ON/OFF
;;;433    		{
;;;434    			if( value == 0 ){
;;;435    				
;;;436    				Flag_Swtich_ON = 0;
;;;437    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
;;;438    			}
;;;439    			else if( value == 1 ){
;;;440    				
;;;441    				Flag_Swtich_ON = 1;
;;;442    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;443    			}
;;;444    		}break;
;;;445    	}
;;;446    }
000074  ecbd8b02          VPOP     {d8}
000078  e8bd8ff8          POP      {r3-r11,pc}
                  |L4.124|
00007c  2003              MOVS     r0,#3                 ;360
00007e  7250              STRB     r0,[r2,#9]            ;360
000080  7ad0              LDRB     r0,[r2,#0xb]          ;361  ; listpowwatch1
000082  1c40              ADDS     r0,r0,#1              ;361
000084  72d0              STRB     r0,[r2,#0xb]          ;361
000086  e7f5              B        |L4.116|
000088  7a91              LDRB     r1,[r2,#0xa]          ;380  ; listocwatch
00008a  1c49              ADDS     r1,r1,#1              ;380
00008c  7291              STRB     r1,[r2,#0xa]          ;380
00008e  f89d1008          LDRB     r1,[sp,#8]            ;381
000092  f8dfa114          LDR      r10,|L4.424|
000096  ed9f8a45          VLDR     s16,|L4.428|
00009a  f8df8114          LDR      r8,|L4.432|
00009e  b3b1              CBZ      r1,|L4.270|
0000a0  f89d1008          LDRB     r1,[sp,#8]            ;388
0000a4  2901              CMP      r1,#1                 ;388
0000a6  d1e5              BNE      |L4.116|
0000a8  f8c93020          STR      r3,[r9,#0x20]         ;389  ; Run_Control
0000ac  4941              LDR      r1,|L4.436|
0000ae  ed910a00          VLDR     s0,[r1,#0]            ;390
0000b2  4941              LDR      r1,|L4.440|
0000b4  ed810a00          VSTR     s0,[r1,#0]            ;390
0000b8  eddf8a40          VLDR     s17,|L4.444|
0000bc  ee200a28          VMUL.F32 s0,s0,s17             ;391
0000c0  eebd0ac0          VCVT.S32.F32 s0,s0                 ;391
0000c4  ee101a10          VMOV     r1,s0                 ;391
0000c8  f501717a          ADD      r1,r1,#0x3e8          ;391
0000cc  60a9              STR      r1,[r5,#8]            ;391  ; Para
0000ce  f44f717a          MOV      r1,#0x3e8             ;392
0000d2  60e9              STR      r1,[r5,#0xc]          ;392  ; Para
0000d4  6c69              LDR      r1,[r5,#0x44]         ;393  ; Para
0000d6  6169              STR      r1,[r5,#0x14]         ;393  ; Para
0000d8  4939              LDR      r1,|L4.448|
0000da  700e              STRB     r6,[r1,#0]            ;394
0000dc  4939              LDR      r1,|L4.452|
0000de  4646              MOV      r6,r8                 ;396
0000e0  ed818a00          VSTR     s16,[r1,#0]           ;395
0000e4  ed888a00          VSTR     s16,[r8,#0]           ;396
0000e8  f88a3000          STRB     r3,[r10,#0]           ;397
0000ec  4936              LDR      r1,|L4.456|
0000ee  700b              STRB     r3,[r1,#0]            ;398
0000f0  6020              STR      r0,[r4,#0]            ;400  ; flagA
0000f2  2180              MOVS     r1,#0x80              ;400
0000f4  4638              MOV      r0,r7                 ;400
0000f6  f7fffffe          BL       GPIO_ResetBits
0000fa  6c68              LDR      r0,[r5,#0x44]         ;401  ; Para
0000fc  ee000a10          VMOV     s0,r0                 ;401
000100  eeb80a40          VCVT.F32.U32 s0,s0                 ;401
000104  eec00a28          VDIV.F32 s1,s0,s17             ;401
000108  edc60a00          VSTR     s1,[r6,#0]            ;401
00010c  e7b2              B        |L4.116|
                  |L4.270|
00010e  e7ff              B        |L4.272|
                  |L4.272|
000110  f7fffffe          BL       Off_GPOI_ResetSet
000114  f88a6000          STRB     r6,[r10,#0]           ;384
000118  ed888a00          VSTR     s16,[r8,#0]           ;385
00011c  6c68              LDR      r0,[r5,#0x44]         ;386  ; Para
00011e  6168              STR      r0,[r5,#0x14]         ;386  ; Para
000120  e7a8              B        |L4.116|
000122  f89d0008          LDRB     r0,[sp,#8]            ;418
000126  4c29              LDR      r4,|L4.460|
000128  b178              CBZ      r0,|L4.330|
00012a  f89d0008          LDRB     r0,[sp,#8]            ;425
00012e  2801              CMP      r0,#1                 ;425
000130  d1a0              BNE      |L4.116|
000132  f8b50064          LDRH     r0,[r5,#0x64]         ;426  ; Para
000136  60a8              STR      r0,[r5,#8]            ;426  ; Para
000138  f8b50066          LDRH     r0,[r5,#0x66]         ;427  ; Para
00013c  60e8              STR      r0,[r5,#0xc]          ;427  ; Para
00013e  2104              MOVS     r1,#4                 ;428
000140  4620              MOV      r0,r4                 ;428
000142  f7fffffe          BL       GPIO_SetBits
000146  2102              MOVS     r1,#2                 ;429
000148  e01c              B        |L4.388|
                  |L4.330|
00014a  2102              MOVS     r1,#2                 ;420
00014c  4638              MOV      r0,r7                 ;420
00014e  f7fffffe          BL       GPIO_ResetBits
000152  60ae              STR      r6,[r5,#8]            ;421  ; Para
000154  60ee              STR      r6,[r5,#0xc]          ;422  ; Para
000156  2104              MOVS     r1,#4                 ;423
000158  4620              MOV      r0,r4                 ;423
00015a  e009              B        |L4.368|
00015c  f89d2008          LDRB     r2,[sp,#8]            ;434
000160  b162              CBZ      r2,|L4.380|
000162  f89d1008          LDRB     r1,[sp,#8]            ;439
000166  2901              CMP      r1,#1                 ;439
000168  d184              BNE      |L4.116|
                  |L4.362|
00016a  6020              STR      r0,[r4,#0]            ;442  ; flagA
00016c  2180              MOVS     r1,#0x80              ;442
00016e  4638              MOV      r0,r7                 ;442
                  |L4.368|
000170  ecbd8b02          VPOP     {d8}                  ;442
000174  e8bd4ff8          POP      {r3-r11,lr}           ;442
000178  f7ffbffe          B.W      GPIO_ResetBits
                  |L4.380|
00017c  f0210040          BIC      r0,r1,#0x40           ;436
                  |L4.384|
000180  2180              MOVS     r1,#0x80              ;349
000182  6020              STR      r0,[r4,#0]            ;349  ; flagA
                  |L4.388|
000184  4638              MOV      r0,r7                 ;437
000186  ecbd8b02          VPOP     {d8}                  ;437
00018a  e8bd4ff8          POP      {r3-r11,lr}           ;437
00018e  f7ffbffe          B.W      GPIO_SetBits
;;;447    
                          ENDP

000192  0000              DCW      0x0000
                  |L4.404|
                          DCD      ||.data||
                  |L4.408|
                          DCD      Run_Control
                  |L4.412|
                          DCD      flagA
                  |L4.416|
                          DCD      Para
                  |L4.420|
                          DCD      0x40020800
                  |L4.424|
                          DCD      trig_flag_state
                  |L4.428|
0001ac  00000000          DCFS     0x00000000 ; 0
                  |L4.432|
                          DCD      max_discahrgeNum
                  |L4.436|
                          DCD      DISS_Voltage
                  |L4.440|
                          DCD      testv
                  |L4.444|
0001bc  447a0000          DCFS     0x447a0000 ; 1000
                  |L4.448|
                          DCD      shorttime
                  |L4.452|
                          DCD      old_I
                  |L4.456|
                          DCD      C_DISCHARGE
                  |L4.460|
                          DCD      0x40021000

                          AREA ||i.MODE_ONOFF||, CODE, READONLY, ALIGN=2

                  MODE_ONOFF PROC
;;;263    
;;;264    void MODE_ONOFF(vu8 value)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;265    {
;;;266    	switch(MODE)
000004  4a41              LDR      r2,|L5.268|
000006  ed2d8b02          VPUSH    {d8}                  ;265
00000a  7951              LDRB     r1,[r2,#5]  ; MODE
;;;267    	{
;;;268    		case 0://电子负载ON/OFF
;;;269    		{
;;;270    			if( value == 0 ){
;;;271    				
;;;272    				Flag_Swtich_ON = 0;
00000c  4d40              LDR      r5,|L5.272|
;;;273    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
00000e  4841              LDR      r0,|L5.276|
000010  b3e9              CBZ      r1,|L5.142|
;;;274    			}
;;;275    			else if( value == 1 ){
;;;276    				
;;;277    				Flag_Swtich_ON = 1;
;;;278    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;279    			}
;;;280    		}break;
;;;281    		case 1://稳压电源ON/OFF
;;;282    		{
;;;283    			sendwait = 1;
000012  2601              MOVS     r6,#1
000014  2901              CMP      r1,#1                 ;266
000016  d06d              BEQ      |L5.244|
000018  2902              CMP      r1,#2                 ;266
00001a  d14a              BNE      |L5.178|
;;;284    //			if( value == 0 ){
;;;285    //				sendwait = 1;
;;;286    ////				PowerSwitch(0);//关闭电源输出
;;;287    ////				Delay_ms(1000);
;;;288    ////				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;289    ////				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;290    //////				Delay_ms(1000);
;;;291    ////				Para.CSET_Voltage = 0;
;;;292    ////				Para.CSET_Current = 0;
;;;293    //////				Delay_ms(1000);
;;;294    ////				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;295    //			}
;;;296    //			else if( value == 1 ){
;;;297    ////				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;298    //////				Delay_ms(1000);
;;;299    ////				PowerSwitch(1);//打开电源输出
;;;300    //				
;;;301    //////				
;;;302    ////				Para.CSET_Voltage = Para.POWER_OutPut_V;
;;;303    ////				Para.CSET_Current = Para.POWER_Limit_C;
;;;304    //////				Delay_ms(1000);
;;;305    ////				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;306    //				
;;;307    //			}
;;;308    		}break;
;;;309    		case 2://过流测试ON/OFF
;;;310    		{
;;;311    			if( value == 0 ){
00001c  f89d1008          LDRB     r1,[sp,#8]
;;;312    				
;;;313    				Off_GPOI_ResetSet();
;;;314    				trig_flag_state = 0;
000020  f8df90f4          LDR      r9,|L5.280|
;;;315    				max_discahrgeNum = 0;
000024  ed9f8a3d          VLDR     s16,|L5.284|
000028  f8df80f4          LDR      r8,|L5.288|
;;;316    				Para.CSET_Current_Laod =  Para.IR_Start_C;
00002c  4c3d              LDR      r4,|L5.292|
00002e  2700              MOVS     r7,#0                 ;311
000030  b371              CBZ      r1,|L5.144|
;;;317    			}
;;;318    			else if( value == 1 ){
000032  f89d1008          LDRB     r1,[sp,#8]
000036  2901              CMP      r1,#1
000038  d13b              BNE      |L5.178|
;;;319    				LOAD_MODE = 0;
00003a  493b              LDR      r1,|L5.296|
00003c  618f              STR      r7,[r1,#0x18]  ; Run_Control
;;;320    				GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
00003e  1481              ASRS     r1,r0,#18
000040  4682              MOV      r10,r0
000042  f7fffffe          BL       GPIO_ResetBits
;;;321    				Para.CSET_Current_Laod =  Para.IR_Start_C;
000046  6c60              LDR      r0,[r4,#0x44]  ; Para
000048  6160              STR      r0,[r4,#0x14]  ; Para
;;;322    				testv = DISS_Voltage;
00004a  4838              LDR      r0,|L5.300|
;;;323    				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
00004c  eddf8a39          VLDR     s17,|L5.308|
000050  ed900a00          VLDR     s0,[r0,#0]            ;322
000054  4836              LDR      r0,|L5.304|
000056  ed800a00          VSTR     s0,[r0,#0]            ;322
00005a  ee200a28          VMUL.F32 s0,s0,s17
00005e  eebd0ac0          VCVT.S32.F32 s0,s0
000062  ee100a10          VMOV     r0,s0
000066  f500707a          ADD      r0,r0,#0x3e8
00006a  60a0              STR      r0,[r4,#8]  ; Para
;;;324    				Para.CSET_Current = 1000;
00006c  f44f707a          MOV      r0,#0x3e8
000070  60e0              STR      r0,[r4,#0xc]  ; Para
;;;325    				shorttime = 0;
000072  4831              LDR      r0,|L5.312|
000074  7007              STRB     r7,[r0,#0]
;;;326    				old_I = 0;
000076  4831              LDR      r0,|L5.316|
;;;327    				max_discahrgeNum = 0;
000078  4647              MOV      r7,r8
00007a  ed808a00          VSTR     s16,[r0,#0]           ;326
00007e  ed888a00          VSTR     s16,[r8,#0]
;;;328    				trig_flag_state = 1;
000082  f8896000          STRB     r6,[r9,#0]
;;;329    				C_DISCHARGE = 1;        	
000086  482e              LDR      r0,|L5.320|
000088  7006              STRB     r6,[r0,#0]
;;;330    				Flag_Swtich_ON = 1;
00008a  6828              LDR      r0,[r5,#0]  ; flagA
00008c  e001              B        |L5.146|
                  |L5.142|
00008e  e014              B        |L5.186|
                  |L5.144|
000090  e032              B        |L5.248|
                  |L5.146|
000092  f0400040          ORR      r0,r0,#0x40
;;;331    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
000096  6028              STR      r0,[r5,#0]  ; flagA
000098  2180              MOVS     r1,#0x80
00009a  4650              MOV      r0,r10
00009c  f7fffffe          BL       GPIO_ResetBits
;;;332    				max_discahrgeNum = (float)Para.IR_Start_C / 1000;
0000a0  6c60              LDR      r0,[r4,#0x44]  ; Para
0000a2  ee000a10          VMOV     s0,r0
0000a6  eeb80a40          VCVT.F32.U32 s0,s0
0000aa  eec00a28          VDIV.F32 s1,s0,s17
0000ae  edc70a00          VSTR     s1,[r7,#0]
                  |L5.178|
;;;333    			}
;;;334    		}break;
;;;335    	}
;;;336    }
0000b2  ecbd8b02          VPOP     {d8}
0000b6  e8bd8ff8          POP      {r3-r11,pc}
                  |L5.186|
0000ba  f89d2008          LDRB     r2,[sp,#8]            ;270
0000be  4914              LDR      r1,|L5.272|
0000c0  6809              LDR      r1,[r1,#0]            ;272
0000c2  b16a              CBZ      r2,|L5.224|
0000c4  f89d2008          LDRB     r2,[sp,#8]            ;275
0000c8  2a01              CMP      r2,#1                 ;275
0000ca  d1f2              BNE      |L5.178|
0000cc  f0410140          ORR      r1,r1,#0x40           ;277
0000d0  6029              STR      r1,[r5,#0]            ;278  ; flagA
0000d2  2180              MOVS     r1,#0x80              ;278
0000d4  ecbd8b02          VPOP     {d8}                  ;278
0000d8  e8bd4ff8          POP      {r3-r11,lr}           ;278
0000dc  f7ffbffe          B.W      GPIO_ResetBits
                  |L5.224|
0000e0  f0210140          BIC      r1,r1,#0x40           ;272
0000e4  6029              STR      r1,[r5,#0]            ;273  ; flagA
0000e6  2180              MOVS     r1,#0x80              ;273
0000e8  ecbd8b02          VPOP     {d8}                  ;273
0000ec  e8bd4ff8          POP      {r3-r11,lr}           ;273
0000f0  f7ffbffe          B.W      GPIO_SetBits
                  |L5.244|
0000f4  7216              STRB     r6,[r2,#8]            ;283
0000f6  e7dc              B        |L5.178|
                  |L5.248|
0000f8  f7fffffe          BL       Off_GPOI_ResetSet
0000fc  f8897000          STRB     r7,[r9,#0]            ;314
000100  ed888a00          VSTR     s16,[r8,#0]           ;315
000104  6c60              LDR      r0,[r4,#0x44]         ;316  ; Para
000106  6160              STR      r0,[r4,#0x14]         ;316  ; Para
000108  e7d3              B        |L5.178|
;;;337    
                          ENDP

00010a  0000              DCW      0x0000
                  |L5.268|
                          DCD      ||.data||
                  |L5.272|
                          DCD      flagA
                  |L5.276|
                          DCD      0x40020800
                  |L5.280|
                          DCD      trig_flag_state
                  |L5.284|
00011c  00000000          DCFS     0x00000000 ; 0
                  |L5.288|
                          DCD      max_discahrgeNum
                  |L5.292|
                          DCD      Para
                  |L5.296|
                          DCD      Run_Control
                  |L5.300|
                          DCD      DISS_Voltage
                  |L5.304|
                          DCD      testv
                  |L5.308|
000134  447a0000          DCFS     0x447a0000 ; 1000
                  |L5.312|
                          DCD      shorttime
                  |L5.316|
                          DCD      old_I
                  |L5.320|
                          DCD      C_DISCHARGE

                          AREA ||i.MODE_PARASET||, CODE, READONLY, ALIGN=2

                  MODE_PARASET PROC
;;;447    
;;;448    void MODE_PARASET(vu8 value)
000000  b570              PUSH     {r4-r6,lr}
;;;449    {
;;;450    	switch(MODE)
000002  4a17              LDR      r2,|L6.96|
000004  7953              LDRB     r3,[r2,#5]  ; MODE
000006  2100              MOVS     r1,#0
;;;451    	{
;;;452    		case 0://电子负载
;;;453    		{
;;;454    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;455    //			mainswitch = 0;
;;;456    //			sendwait = 3;
;;;457    			LOAD_MODE = Para.CLOAD_MODE;
000008  4816              LDR      r0,|L6.100|
;;;458    			Para.CSET_Current_Laod = Para.LOAD_C;
;;;459    			Para.CSET_Voltage_Laod = Para.LOAD_V;
;;;460    			if(Para.CSET_Current_Laod > 20000)
;;;461    			{
;;;462    				LOAD_I_SW = 1;
00000a  2401              MOVS     r4,#1
00000c  4d16              LDR      r5,|L6.104|
00000e  2b05              CMP      r3,#5                 ;450
000010  d211              BCS      |L6.54|
000012  e8dff003          TBB      [pc,r3]               ;450
000016  0322              DCB      0x03,0x22
000018  131b2200          DCB      0x13,0x1b,0x22,0x00
00001c  6982              LDR      r2,[r0,#0x18]         ;457  ; Para
00001e  61aa              STR      r2,[r5,#0x18]         ;457  ; Run_Control
000020  6dc2              LDR      r2,[r0,#0x5c]         ;458  ; Para
000022  6142              STR      r2,[r0,#0x14]         ;458  ; Para
000024  f8b02060          LDRH     r2,[r0,#0x60]         ;459  ; Para
000028  6102              STR      r2,[r0,#0x10]         ;459  ; Para
00002a  6940              LDR      r0,[r0,#0x14]         ;460  ; Para
00002c  f6446220          MOV      r2,#0x4e20            ;460
000030  4290              CMP      r0,r2                 ;460
000032  d901              BLS      |L6.56|
                  |L6.52|
000034  622c              STR      r4,[r5,#0x20]  ; Run_Control
                  |L6.54|
;;;463    			}else{
;;;464    				LOAD_I_SW = 0;
;;;465    			}
;;;466    		}break;
;;;467    		case 1://稳压电源
;;;468    		{
;;;469    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;470    //			mainswitch = 0;
;;;471    //			if(USART3_Recive_flg == 1)
;;;472    //			{
;;;473    				sendwait = 1;
;;;474    //			}else{
;;;475    //				SetPowerMode();
;;;476    //			}
;;;477    //			Para.CSET_Voltage = Para.POWER_OutPut_V;
;;;478    //			SetPowerV(Para.POWER_OutPut_V);
;;;479    //	//			Para.CSET_Current = Para.POWER_Limit_C;
;;;480    //			SetPowerC(Para.POWER_Limit_C);
;;;481    		}break;
;;;482    		case 2://放电过流测试
;;;483    		{
;;;484    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;485    //			mainswitch = 0;
;;;486    //			sendwait = 3;
;;;487    			
;;;488    			LOAD_MODE = 0;
;;;489    			LOAD_I_SW = 1;
;;;490    			Para.CSET_Current = 1000;
;;;491    			Para.CSET_Current_Laod = Para.IR_Start_C;
;;;492    		}break;
;;;493    		case 3://列表
;;;494    		{
;;;495    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;496    //			mainswitch = 0;
;;;497    //			sendwait = 3;
;;;498    			
;;;499    			LOAD_MODE = 0;
;;;500    			GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
;;;501    			LOAD_I_SW = 1;
;;;502    //			Para.CSET_Current = 1000;
;;;503    		}break;
;;;504    		case 4://充电过流测试
;;;505    		{
;;;506    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;507    //			mainswitch = 0;
;;;508    //			sendwait = 3;
;;;509    			
;;;510    			sendwait = 1;
;;;511    		}break;
;;;512    	}
;;;513    }
000036  bd70              POP      {r4-r6,pc}
                  |L6.56|
000038  6229              STR      r1,[r5,#0x20]         ;464  ; Run_Control
00003a  bd70              POP      {r4-r6,pc}
00003c  61a9              STR      r1,[r5,#0x18]         ;488  ; Run_Control
00003e  622c              STR      r4,[r5,#0x20]         ;489  ; Run_Control
000040  f44f717a          MOV      r1,#0x3e8             ;490
000044  60c1              STR      r1,[r0,#0xc]          ;490  ; Para
000046  6c41              LDR      r1,[r0,#0x44]         ;491  ; Para
000048  6141              STR      r1,[r0,#0x14]         ;491  ; Para
00004a  bd70              POP      {r4-r6,pc}
00004c  61a9              STR      r1,[r5,#0x18]         ;499  ; Run_Control
00004e  f44f5180          MOV      r1,#0x1000            ;500
000052  4806              LDR      r0,|L6.108|
000054  f7fffffe          BL       GPIO_ResetBits
000058  e7ec              B        |L6.52|
00005a  7214              STRB     r4,[r2,#8]            ;510
00005c  bd70              POP      {r4-r6,pc}
;;;514    
                          ENDP

00005e  0000              DCW      0x0000
                  |L6.96|
                          DCD      ||.data||
                  |L6.100|
                          DCD      Para
                  |L6.104|
                          DCD      Run_Control
                  |L6.108|
                          DCD      0x40020800

                          AREA ||i.PowerSwitch||, CODE, READONLY, ALIGN=2

                  PowerSwitch PROC
;;;187    
;;;188    void PowerSwitch(vu8 bit)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;189    {
;;;190    	MasterSendbuf[0] = 0x01;
000002  4c0f              LDR      r4,|L7.64|
000004  2001              MOVS     r0,#1
;;;191    	MasterSendbuf[1] = 0x06;
000006  2106              MOVS     r1,#6
000008  7020              STRB     r0,[r4,#0]            ;190
00000a  7061              STRB     r1,[r4,#1]
;;;192    	MasterSendbuf[2] = 0x00;
00000c  2100              MOVS     r1,#0
00000e  70a1              STRB     r1,[r4,#2]
;;;193    	MasterSendbuf[3] = 0x01;
000010  70e0              STRB     r0,[r4,#3]
;;;194    	MasterSendbuf[4] = (u8)(bit>>8);
000012  f89d0000          LDRB     r0,[sp,#0]
000016  7121              STRB     r1,[r4,#4]
;;;195    	MasterSendbuf[5] = (u8)(bit);
000018  f89d0000          LDRB     r0,[sp,#0]
00001c  7160              STRB     r0,[r4,#5]
;;;196    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00001e  2106              MOVS     r1,#6
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       Hardware_CRC
000026  71a0              STRB     r0,[r4,#6]
;;;197    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000028  2106              MOVS     r1,#6
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       Hardware_CRC
000030  0a00              LSRS     r0,r0,#8
000032  71e0              STRB     r0,[r4,#7]
;;;198    	USART3WriteDMA(8);
000034  e8bd4038          POP      {r3-r5,lr}
000038  2008              MOVS     r0,#8
00003a  f7ffbffe          B.W      USART3WriteDMA
;;;199    }
;;;200    
                          ENDP

00003e  0000              DCW      0x0000
                  |L7.64|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.ReadPowData||, CODE, READONLY, ALIGN=2

                  ReadPowData PROC
;;;200    
;;;201    void ReadPowData(void)
000000  b510              PUSH     {r4,lr}
;;;202    {
;;;203    	MasterSendbuf[0] = 0x01;
000002  4c0e              LDR      r4,|L8.60|
000004  2001              MOVS     r0,#1
;;;204    	MasterSendbuf[1] = 0x03;
;;;205    	MasterSendbuf[2] = 0x00;
;;;206    	MasterSendbuf[3] = 0x10;
000006  2110              MOVS     r1,#0x10
000008  7020              STRB     r0,[r4,#0]            ;203
00000a  2003              MOVS     r0,#3                 ;204
00000c  7060              STRB     r0,[r4,#1]            ;204
00000e  2000              MOVS     r0,#0                 ;205
000010  70a0              STRB     r0,[r4,#2]            ;205
000012  70e1              STRB     r1,[r4,#3]
;;;207    	MasterSendbuf[4] = 0x00;
000014  7120              STRB     r0,[r4,#4]
;;;208    	MasterSendbuf[5] = 0x02;
000016  2002              MOVS     r0,#2
000018  7160              STRB     r0,[r4,#5]
;;;209    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00001a  2106              MOVS     r1,#6
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       Hardware_CRC
000022  71a0              STRB     r0,[r4,#6]
;;;210    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000024  2106              MOVS     r1,#6
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       Hardware_CRC
00002c  0a00              LSRS     r0,r0,#8
00002e  71e0              STRB     r0,[r4,#7]
;;;211    	USART3WriteDMA(8);
000030  e8bd4010          POP      {r4,lr}
000034  2008              MOVS     r0,#8
000036  f7ffbffe          B.W      USART3WriteDMA
;;;212    }
;;;213    
                          ENDP

00003a  0000              DCW      0x0000
                  |L8.60|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.SerialRemoteHandleL||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  SerialRemoteHandleL PROC
;;;959    
;;;960    u16 SerialRemoteHandleL(u8 len,char* buf)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;961    {
000004  ed2d8b02          VPUSH    {d8}
000008  b0b3              SUB      sp,sp,#0xcc
00000a  4605              MOV      r5,r0
;;;962    
;;;963      
;;;964        u16 currCharNum;
;;;965        u32 temp1;
;;;966      u8 Gmode_Vale;
;;;967    	u8 i,j;
;;;968    	
;;;969    	u8 addr = 0;
00000c  2000              MOVS     r0,#0
00000e  460c              MOV      r4,r1                 ;961
;;;970    	char str[200]={0};
000010  9032              STR      r0,[sp,#0xc8]
000012  21c8              MOVS     r1,#0xc8
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       __aeabi_memclr4
;;;971    	int cmd_flag=255;
;;;972    	u8 templen =0;
;;;973    	u8 tmpFg;
;;;974    	u8 LM_S_Vale,LOW_I_Vale,H_L_Vale,SWITCH_Vale;
;;;975    	u16 I_ADC_Vale,V_ADC_Vale;
;;;976    	int32_t V_CS_Vale,I_CS_Vale;
;;;977    	float Lvl_Vale,fadcx,fsingal, fVale;
;;;978     
;;;979    //	u8 len = 11;
;;;980    	u8 pntlen = 0;
;;;981    
;;;982    
;;;983    	
;;;984    	currCharNum=0;
;;;985    	if((buf[currCharNum] != ChrStartR) || (buf[len-2] != ChrEndR)||(buf[len-1] != ChrEndS))
00001a  7820              LDRB     r0,[r4,#0]
00001c  283c              CMP      r0,#0x3c
00001e  d108              BNE      |L9.50|
000020  1960              ADDS     r0,r4,r5
000022  f8101c02          LDRB     r1,[r0,#-2]
000026  290d              CMP      r1,#0xd
000028  d103              BNE      |L9.50|
00002a  f8100c01          LDRB     r0,[r0,#-1]
00002e  280a              CMP      r0,#0xa
000030  d001              BEQ      |L9.54|
                  |L9.50|
;;;986        {
;;;987    		return SetErr_ACK(buf,addr ,CMD_ERR); 
000032  2202              MOVS     r2,#2
000034  e14e              B        |L9.724|
                  |L9.54|
;;;988        } 
;;;989    	str[currCharNum++] = ChrStartR;
000036  213c              MOVS     r1,#0x3c
000038  f88d1000          STRB     r1,[sp,#0]
;;;990    	sprintf(&str[currCharNum],"%d",addr);
00003c  a1fe              ADR      r1,|L9.1080|
00003e  f10d0001          ADD      r0,sp,#1
000042  9a32              LDR      r2,[sp,#0xc8]
000044  f7fffffe          BL       __2sprintf
;;;991    	strncat(str,"/",1);
000048  2201              MOVS     r2,#1
00004a  a1fc              ADR      r1,|L9.1084|
00004c  4668              MOV      r0,sp
00004e  f7fffffe          BL       strncat
;;;992    	currCharNum =strlen(str);
000052  4668              MOV      r0,sp
000054  f7fffffe          BL       strlen
000058  fa1ffa80          UXTH     r10,r0
;;;993    	cmd_flag=strncmp(buf,str,strlen(str));
00005c  4668              MOV      r0,sp
00005e  f7fffffe          BL       strlen
000062  4602              MOV      r2,r0
000064  4669              MOV      r1,sp
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       strncmp
;;;994    	//testflag = cmd_flag;
;;;995    	if(0!=cmd_flag)
00006c  2800              CMP      r0,#0
00006e  d1e0              BNE      |L9.50|
;;;996    	{
;;;997    		return SetErr_ACK(buf, addr ,CMD_ERR);
;;;998    		
;;;999    	}
;;;1000   	for (j=0;j<CmdNumb;j++)
;;;1001       {
;;;1002   		templen = strlen(CmdStr[j]);
000070  f8dfb3cc          LDR      r11,|L9.1088|
000074  4680              MOV      r8,r0                 ;1000
;;;1003   		cmd_flag=strncmp(&buf[currCharNum],CmdStr[j],templen);
000076  eb04050a          ADD      r5,r4,r10
                  |L9.122|
00007a  eb0801c8          ADD      r1,r8,r8,LSL #3       ;1002
00007e  eb01000b          ADD      r0,r1,r11             ;1002
000082  4606              MOV      r6,r0                 ;1002
000084  f7fffffe          BL       strlen
000088  f00009ff          AND      r9,r0,#0xff           ;1002
00008c  4631              MOV      r1,r6                 ;1002
00008e  4628              MOV      r0,r5                 ;1002
000090  464a              MOV      r2,r9
000092  f7fffffe          BL       strncmp
;;;1004   	    if(0==cmd_flag)
000096  b138              CBZ      r0,|L9.168|
000098  f1080001          ADD      r0,r8,#1              ;1000
00009c  f00008ff          AND      r8,r0,#0xff           ;1000
0000a0  f1b80f13          CMP      r8,#0x13              ;1000
0000a4  d3e9              BCC      |L9.122|
0000a6  e7c4              B        |L9.50|
                  |L9.168|
;;;1005   	    {
;;;1006   
;;;1007   		  buf[0] = ChrStartS;
0000a8  203e              MOVS     r0,#0x3e
0000aa  7020              STRB     r0,[r4,#0]
;;;1008   		  currCharNum+=templen;
0000ac  eb0a0009          ADD      r0,r10,r9
0000b0  b285              UXTH     r5,r0
;;;1009   		  switch(j)
;;;1010             {
;;;1011   			case 0:
;;;1012   				pntlen = 5;    //
;;;1013   				if(buf[currCharNum]=='?')
;;;1014   				{
;;;1015   
;;;1016   					
;;;1017   					sprintf(&buf[currCharNum],"%05d",Para.CVoltage);
;;;1018   					currCharNum+=pntlen;
;;;1019   					
;;;1020   					buf[currCharNum++]=(',');
;;;1021   					sprintf(&buf[currCharNum],"%06d",Para.CLaod_Current);
;;;1022   					currCharNum+=6;
;;;1023   					
;;;1024   					buf[currCharNum++]=(',');
;;;1025   					sprintf(&buf[currCharNum],"%05d",Para.CPOW_Voltage);
;;;1026   					currCharNum+=pntlen;
;;;1027   					
;;;1028   					buf[currCharNum++]=(',');
;;;1029   					sprintf(&buf[currCharNum],"%05d",Para.CCurrent);
;;;1030   					currCharNum+=pntlen;
;;;1031   					
;;;1032   					buf[currCharNum++]=(',');
;;;1033   					sprintf(&buf[currCharNum],"%05d",Para.CR_VLUE);
;;;1034   					currCharNum+=pntlen;
;;;1035   					
;;;1036   					buf[currCharNum++]=(',');
;;;1037   					sprintf(&buf[currCharNum],"%04d",Para.CR1_VLUE);
;;;1038   					currCharNum+=4;
;;;1039   					
;;;1040   					buf[currCharNum++]=(',');
;;;1041   					sprintf(&buf[currCharNum],"%04d",Para.CR2_VLUE);
;;;1042   					currCharNum+=4;
;;;1043   
;;;1044   					buf[currCharNum++]=(',');
;;;1045   					sprintf(&buf[currCharNum],"%06d",(int)(max_discahrgeNum*1000));
;;;1046   					currCharNum+=6;
;;;1047   					
;;;1048   					buf[currCharNum++]=(',');
;;;1049   					sprintf(&buf[currCharNum],"%03d",shorttime);
;;;1050   					currCharNum+=3;
;;;1051   					
;;;1052   					buf[currCharNum++]=(',');
;;;1053   					sprintf(&buf[currCharNum],"%1d",mainswitch);
0000b2  f8dfb38c          LDR      r11,|L9.1088|
;;;1054   					currCharNum+=1;
;;;1055   					
;;;1056   					buf[currCharNum++]=(',');
;;;1057   					sprintf(&buf[currCharNum],"%1d",finishflag);
;;;1058   					currCharNum+=1;
;;;1059   					
;;;1060   					buf[currCharNum++]=(',');
;;;1061   					sprintf(&buf[currCharNum],"%1d",lockflag);
;;;1062   					currCharNum+=1;
;;;1063   					
;;;1064   					buf[currCharNum++]=(',');
;;;1065   					sprintf(&buf[currCharNum],"%2d",version);
;;;1066   					currCharNum+=2;
;;;1067   					
;;;1068   					buf[currCharNum++]=(',');
;;;1069   					sprintf(&buf[currCharNum],"%03d",Temperature);
;;;1070   					currCharNum+=3;
;;;1071   					
;;;1072   					buf[currCharNum++]=(',');
;;;1073   					sprintf(&buf[currCharNum],"%1d",overflag);
;;;1074   					currCharNum+=1;
;;;1075   //					buf[currCharNum++]=(',');
;;;1076   //					sprintf(&buf[currCharNum],"%d",H_L);
;;;1077   //					currCharNum++;
;;;1078   					
;;;1079   //					buf[currCharNum++]=(',');
;;;1080   //					sprintf(&buf[currCharNum],"%d",LM_S);
;;;1081   //					currCharNum++;
;;;1082   					
;;;1083   //					buf[currCharNum++]=(',');
;;;1084   //					sprintf(&buf[currCharNum],"%02d",(int)temperature);
;;;1085   //					currCharNum+=2;
;;;1086   					
;;;1087   				  buf[currCharNum++ ] = ChrEndR;
;;;1088   				  buf[currCharNum++ ] = ChrEndS;
;;;1089   				}
;;;1090   				else
;;;1091   				{
;;;1092   					return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1093   				}
;;;1094   				break;
;;;1095   			case 1:
;;;1096   				pntlen = 1;
;;;1097   				if(buf[currCharNum]=='?')
;;;1098   				{
;;;1099   					  sprintf(&buf[currCharNum],"%1d",MODE);
;;;1100   				    currCharNum+=pntlen;
;;;1101   				    buf[currCharNum ++] = ChrEndS;
;;;1102   					
;;;1103   				}
;;;1104   				else
;;;1105   				{
;;;1106   					pntlen = 1;				
;;;1107   					for(i=0,temp1=0;i<pntlen;i++)
;;;1108   					{
;;;1109   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1110   					}		                   
;;;1111   //					if(temp1>1)
;;;1112   //					{
;;;1113   //						return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1114   //					}
;;;1115   					MODE=temp1;
;;;1116   //					Off_GPOI_ResetSet();
;;;1117   					OnOff_GPOI_ResetSet( 2, 0 );
;;;1118   					mainswitch = 0;
;;;1119   					sendwait = 3;
;;;1120   					MODE_PARASET(MODE);
;;;1121   	//				Change_LM_Val(LM_S_Vale);
;;;1122   					buf[currCharNum++] = ChrEndR;
;;;1123   				}
;;;1124   				break;
;;;1125   				case 2:
;;;1126   				pntlen = 1;
;;;1127   				if(buf[currCharNum]=='?')
;;;1128   				{
;;;1129   					sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
0000b6  48e3              LDR      r0,|L9.1092|
0000b8  f8dfa38c          LDR      r10,|L9.1096|
0000bc  f04f090a          MOV      r9,#0xa               ;985
0000c0  f1ab0b38          SUB      r11,r11,#0x38         ;1053
0000c4  f06f062f          MVN      r6,#0x2f              ;1109
0000c8  f1b80f13          CMP      r8,#0x13              ;1009
0000cc  d2b1              BCS      |L9.50|
0000ce  e8dff008          TBB      [pc,r8]               ;1009
0000d2  0bbb              DCB      0x0b,0xbb
0000d4  e4fdfcfb          DCB      0xe4,0xfd,0xfc,0xfb
0000d8  0a0a0a0a          DCB      0x0a,0x0a,0x0a,0x0a
0000dc  0a0afaf9          DCB      0x0a,0x0a,0xfa,0xf9
0000e0  f80a0a0a          DCB      0xf8,0x0a,0x0a,0x0a
0000e4  f700              DCB      0xf7,0x00
0000e6  e7a4              B        |L9.50|
0000e8  5d60              LDRB     r0,[r4,r5]            ;1013
0000ea  283f              CMP      r0,#0x3f              ;1013
0000ec  d1a1              BNE      |L9.50|
0000ee  f8da202c          LDR      r2,[r10,#0x2c]        ;1017  ; Para
0000f2  4656              MOV      r6,r10                ;1017
0000f4  1960              ADDS     r0,r4,r5              ;1017
0000f6  a1d5              ADR      r1,|L9.1100|
0000f8  f7fffffe          BL       __2sprintf
0000fc  1d6d              ADDS     r5,r5,#5              ;1017
0000fe  b2a8              UXTH     r0,r5                 ;1018
000100  252c              MOVS     r5,#0x2c              ;1020
000102  5425              STRB     r5,[r4,r0]            ;1020
000104  1c40              ADDS     r0,r0,#1              ;1020
000106  6b72              LDR      r2,[r6,#0x34]         ;1021  ; Para
000108  b287              UXTH     r7,r0                 ;1020
00010a  19e0              ADDS     r0,r4,r7              ;1021
00010c  a1d1              ADR      r1,|L9.1108|
00010e  f7fffffe          BL       __2sprintf
000112  1dbf              ADDS     r7,r7,#6              ;1021
000114  b2b8              UXTH     r0,r7                 ;1022
000116  5425              STRB     r5,[r4,r0]            ;1024
000118  1c40              ADDS     r0,r0,#1              ;1024
00011a  6ab2              LDR      r2,[r6,#0x28]         ;1025  ; Para
00011c  b287              UXTH     r7,r0                 ;1024
00011e  19e0              ADDS     r0,r4,r7              ;1025
000120  a1ca              ADR      r1,|L9.1100|
000122  f7fffffe          BL       __2sprintf
000126  1d7f              ADDS     r7,r7,#5              ;1025
000128  b2b8              UXTH     r0,r7                 ;1026
00012a  5425              STRB     r5,[r4,r0]            ;1028
00012c  1c40              ADDS     r0,r0,#1              ;1028
00012e  6b32              LDR      r2,[r6,#0x30]         ;1029  ; Para
000130  b287              UXTH     r7,r0                 ;1028
000132  19e0              ADDS     r0,r4,r7              ;1029
000134  a1c5              ADR      r1,|L9.1100|
000136  f7fffffe          BL       __2sprintf
00013a  1d7f              ADDS     r7,r7,#5              ;1029
00013c  b2b8              UXTH     r0,r7                 ;1030
00013e  5425              STRB     r5,[r4,r0]            ;1032
000140  1c40              ADDS     r0,r0,#1              ;1032
000142  6bb2              LDR      r2,[r6,#0x38]         ;1033  ; Para
000144  b287              UXTH     r7,r0                 ;1032
000146  19e0              ADDS     r0,r4,r7              ;1033
000148  a1c0              ADR      r1,|L9.1100|
00014a  f7fffffe          BL       __2sprintf
00014e  1d7f              ADDS     r7,r7,#5              ;1033
000150  b2b8              UXTH     r0,r7                 ;1034
000152  5425              STRB     r5,[r4,r0]            ;1036
000154  1c40              ADDS     r0,r0,#1              ;1036
000156  6bf2              LDR      r2,[r6,#0x3c]         ;1037  ; Para
000158  b287              UXTH     r7,r0                 ;1036
00015a  19e0              ADDS     r0,r4,r7              ;1037
00015c  a1bf              ADR      r1,|L9.1116|
00015e  f7fffffe          BL       __2sprintf
000162  1d3f              ADDS     r7,r7,#4              ;1037
000164  b2b8              UXTH     r0,r7                 ;1038
000166  5425              STRB     r5,[r4,r0]            ;1040
000168  1c40              ADDS     r0,r0,#1              ;1040
00016a  6c32              LDR      r2,[r6,#0x40]         ;1041  ; Para
00016c  b287              UXTH     r7,r0                 ;1040
00016e  19e0              ADDS     r0,r4,r7              ;1041
000170  a1ba              ADR      r1,|L9.1116|
000172  f7fffffe          BL       __2sprintf
000176  1d3f              ADDS     r7,r7,#4              ;1041
000178  b2b8              UXTH     r0,r7                 ;1042
00017a  5425              STRB     r5,[r4,r0]            ;1044
00017c  1c40              ADDS     r0,r0,#1              ;1044
00017e  b286              UXTH     r6,r0                 ;1044
000180  48b8              LDR      r0,|L9.1124|
000182  ed900a00          VLDR     s0,[r0,#0]            ;1045
000186  eddf0ab8          VLDR     s1,|L9.1128|
00018a  19a0              ADDS     r0,r4,r6              ;1045
00018c  a1b1              ADR      r1,|L9.1108|
00018e  ee200a20          VMUL.F32 s0,s0,s1              ;1045
000192  eebd0ac0          VCVT.S32.F32 s0,s0                 ;1045
000196  ee102a10          VMOV     r2,s0                 ;1045
00019a  f7fffffe          BL       __2sprintf
00019e  1db6              ADDS     r6,r6,#6              ;1045
0001a0  b2b0              UXTH     r0,r6                 ;1046
0001a2  49b2              LDR      r1,|L9.1132|
0001a4  5425              STRB     r5,[r4,r0]            ;1048
0001a6  1c40              ADDS     r0,r0,#1              ;1048
0001a8  b286              UXTH     r6,r0                 ;1048
0001aa  780a              LDRB     r2,[r1,#0]            ;1049  ; shorttime
0001ac  19a0              ADDS     r0,r4,r6              ;1049
0001ae  a1b0              ADR      r1,|L9.1136|
0001b0  f7fffffe          BL       __2sprintf
0001b4  1cf6              ADDS     r6,r6,#3              ;1049
0001b6  b2b0              UXTH     r0,r6                 ;1050
0001b8  5425              STRB     r5,[r4,r0]            ;1052
0001ba  1c40              ADDS     r0,r0,#1              ;1052
0001bc  b286              UXTH     r6,r0                 ;1052
0001be  f89b2006          LDRB     r2,[r11,#6]           ;1053  ; mainswitch
0001c2  19a0              ADDS     r0,r4,r6              ;1053
0001c4  a1ac              ADR      r1,|L9.1144|
0001c6  f7fffffe          BL       __2sprintf
0001ca  1c76              ADDS     r6,r6,#1              ;1053
0001cc  b2b0              UXTH     r0,r6                 ;1054
0001ce  49ab              LDR      r1,|L9.1148|
0001d0  5425              STRB     r5,[r4,r0]            ;1056
0001d2  1c40              ADDS     r0,r0,#1              ;1056
0001d4  b286              UXTH     r6,r0                 ;1056
0001d6  780a              LDRB     r2,[r1,#0]            ;1057  ; finishflag
0001d8  19a0              ADDS     r0,r4,r6              ;1057
0001da  a1a7              ADR      r1,|L9.1144|
0001dc  f7fffffe          BL       __2sprintf
0001e0  1c76              ADDS     r6,r6,#1              ;1057
0001e2  b2b0              UXTH     r0,r6                 ;1058
0001e4  49a6              LDR      r1,|L9.1152|
0001e6  5425              STRB     r5,[r4,r0]            ;1060
0001e8  1c40              ADDS     r0,r0,#1              ;1060
0001ea  b286              UXTH     r6,r0                 ;1060
0001ec  780a              LDRB     r2,[r1,#0]            ;1061  ; lockflag
0001ee  19a0              ADDS     r0,r4,r6              ;1061
0001f0  a1a1              ADR      r1,|L9.1144|
0001f2  f7fffffe          BL       __2sprintf
0001f6  1c76              ADDS     r6,r6,#1              ;1061
0001f8  b2b0              UXTH     r0,r6                 ;1062
0001fa  49a2              LDR      r1,|L9.1156|
0001fc  5425              STRB     r5,[r4,r0]            ;1064
0001fe  1c40              ADDS     r0,r0,#1              ;1064
000200  b286              UXTH     r6,r0                 ;1064
000202  780a              LDRB     r2,[r1,#0]            ;1065  ; version
000204  19a0              ADDS     r0,r4,r6              ;1065
000206  a1a0              ADR      r1,|L9.1160|
000208  f7fffffe          BL       __2sprintf
00020c  1cb6              ADDS     r6,r6,#2              ;1065
00020e  b2b0              UXTH     r0,r6                 ;1066
000210  499e              LDR      r1,|L9.1164|
000212  5425              STRB     r5,[r4,r0]            ;1068
000214  1c40              ADDS     r0,r0,#1              ;1068
000216  b286              UXTH     r6,r0                 ;1068
000218  f9b12000          LDRSH    r2,[r1,#0]            ;1069  ; Temperature
00021c  19a0              ADDS     r0,r4,r6              ;1069
00021e  a194              ADR      r1,|L9.1136|
000220  f7fffffe          BL       __2sprintf
000224  1cf6              ADDS     r6,r6,#3              ;1069
000226  b2b0              UXTH     r0,r6                 ;1070
000228  4999              LDR      r1,|L9.1168|
00022a  5425              STRB     r5,[r4,r0]            ;1072
00022c  1c40              ADDS     r0,r0,#1              ;1072
00022e  b285              UXTH     r5,r0                 ;1072
000230  780a              LDRB     r2,[r1,#0]            ;1073  ; overflag
000232  1960              ADDS     r0,r4,r5              ;1073
000234  a190              ADR      r1,|L9.1144|
000236  f7fffffe          BL       __2sprintf
00023a  1c6d              ADDS     r5,r5,#1              ;1073
00023c  b2a8              UXTH     r0,r5                 ;1074
00023e  210d              MOVS     r1,#0xd               ;1087
000240  5421              STRB     r1,[r4,r0]            ;1087
000242  1c40              ADDS     r0,r0,#1              ;1087
000244  b280              UXTH     r0,r0                 ;1087
000246  e023              B        |L9.656|
000248  5d60              LDRB     r0,[r4,r5]            ;1097
00024a  2201              MOVS     r2,#1                 ;1096
00024c  283f              CMP      r0,#0x3f              ;1097
00024e  d01a              BEQ      |L9.646|
000250  2000              MOVS     r0,#0                 ;1107
000252  4601              MOV      r1,r0                 ;1107
                  |L9.596|
000254  5d63              LDRB     r3,[r4,r5]            ;1109
000256  eb010181          ADD      r1,r1,r1,LSL #2       ;1109
00025a  1c6d              ADDS     r5,r5,#1              ;1109
00025c  1c40              ADDS     r0,r0,#1              ;1109
00025e  eb060141          ADD      r1,r6,r1,LSL #1       ;1109
000262  b2c0              UXTB     r0,r0                 ;1107
000264  4419              ADD      r1,r1,r3              ;1109
000266  b2ad              UXTH     r5,r5                 ;1109
000268  4290              CMP      r0,r2                 ;1107
00026a  d3f3              BCC      |L9.596|
00026c  465e              MOV      r6,r11                ;1115
00026e  f88b1005          STRB     r1,[r11,#5]           ;1115
000272  2100              MOVS     r1,#0                 ;1117
000274  2002              MOVS     r0,#2                 ;1117
000276  f7fffffe          BL       OnOff_GPOI_ResetSet
00027a  2000              MOVS     r0,#0                 ;1118
00027c  71b0              STRB     r0,[r6,#6]            ;1118
00027e  2003              MOVS     r0,#3                 ;1119
000280  7230              STRB     r0,[r6,#8]            ;1119
000282  7970              LDRB     r0,[r6,#5]            ;1120  ; MODE
000284  e212              B        |L9.1708|
                  |L9.646|
000286  f89b2005          LDRB     r2,[r11,#5]           ;1099  ; MODE
00028a  1960              ADDS     r0,r4,r5              ;1099
00028c  a17a              ADR      r1,|L9.1144|
00028e  e02a              B        |L9.742|
                  |L9.656|
000290  f8049000          STRB     r9,[r4,r0]            ;1088
000294  1c40              ADDS     r0,r0,#1              ;1088
000296  b285              UXTH     r5,r0                 ;1088
000298  e3fe              B        |L9.2712|
00029a  5d61              LDRB     r1,[r4,r5]            ;1127
00029c  2201              MOVS     r2,#1                 ;1126
00029e  293f              CMP      r1,#0x3f              ;1127
                  |L9.672|
0002a0  d07e              BEQ      |L9.928|
;;;1130   				    currCharNum+=pntlen;
;;;1131   				    buf[currCharNum ++] = ChrEndS;
;;;1132   					
;;;1133   				}
;;;1134   				else
;;;1135   				{
;;;1136   					pntlen = 1;				
;;;1137   					for(i=0,temp1=0;i<pntlen;i++)
0002a2  2100              MOVS     r1,#0
0002a4  4608              MOV      r0,r1
                  |L9.678|
;;;1138   					{
;;;1139   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
0002a6  5d63              LDRB     r3,[r4,r5]
0002a8  eb000080          ADD      r0,r0,r0,LSL #2
0002ac  1c6d              ADDS     r5,r5,#1
0002ae  1c49              ADDS     r1,r1,#1
0002b0  eb060040          ADD      r0,r6,r0,LSL #1
0002b4  b2c9              UXTB     r1,r1                 ;1137
0002b6  4418              ADD      r0,r0,r3
0002b8  b2ad              UXTH     r5,r5
0002ba  4291              CMP      r1,r2                 ;1137
0002bc  d3f3              BCC      |L9.678|
;;;1140   					}		                   
;;;1141   					if(temp1>1)
0002be  e006              B        |L9.718|
0002c0  e3eb              B        |L9.2714|
0002c2  e3eb              B        |L9.2716|
0002c4  e3eb              B        |L9.2718|
0002c6  e3eb              B        |L9.2720|
0002c8  e3eb              B        |L9.2722|
0002ca  e1f2              B        |L9.1714|
0002cc  e01a              B        |L9.772|
                  |L9.718|
0002ce  2801              CMP      r0,#1
0002d0  d90d              BLS      |L9.750|
                  |L9.722|
;;;1142   					{
;;;1143   						return SetErr_ACK(buf, addr ,PARA_ERR);
0002d2  2201              MOVS     r2,#1
                  |L9.724|
;;;1144   					}
;;;1145   //					MODE=temp1;
;;;1146   					
;;;1147   					
;;;1148   					mainswitch = temp1;
;;;1149   //						Para.CSET_Voltage = 5000;
;;;1150   //						Para.CSET_Current = 1000;
;;;1151   					
;;;1152   						
;;;1153   					MODE_ONOFF(mainswitch);
;;;1154   	//				Change_LM_Val(LM_S_Vale);
;;;1155   					buf[currCharNum++] = ChrEndR;
;;;1156   		        }
;;;1157   				break;
;;;1158   				case 3:
;;;1159   				pntlen = 1;
;;;1160   				if(buf[currCharNum]=='?')
;;;1161   				{
;;;1162   					  sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1163   				    currCharNum+=pntlen;
;;;1164   				    buf[currCharNum ++] = ChrEndS;
;;;1165   					
;;;1166   				}
;;;1167   				else
;;;1168   				{
;;;1169   					if(currCharNum == 0x0b)
;;;1170   					{						
;;;1171   						for(i=0,temp1=0;i<5;i++)
;;;1172   						{
;;;1173   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1174   						}
;;;1175   					}		
;;;1176   					Para.IR_Start_C = temp1;//起始电流
;;;1177   					temp1 = 0;
;;;1178   					
;;;1179   					if(buf[currCharNum++] == ',')
;;;1180   					{
;;;1181   						for(i=0,temp1=0;i<5;i++)
;;;1182   						{
;;;1183   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1184   						}
;;;1185   					}	
;;;1186   					Para.IR_Step_C = temp1;//步进电流
;;;1187   					temp1 = 0;
;;;1188   					 
;;;1189   					if(buf[currCharNum++] == ',')
;;;1190   					{
;;;1191   						for(i=0,temp1=0;i<5;i++)
;;;1192   						{
;;;1193   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1194   						}
;;;1195   					}	
;;;1196   					Para.IR_Threshold_V = temp1;//门槛电压
;;;1197   					temp1 = 0;
;;;1198   					
;;;1199   					if(buf[currCharNum++] == ',')
;;;1200   					{
;;;1201   						for(i=0,temp1=0;i<3;i++)
;;;1202   						{
;;;1203   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1204   						}
;;;1205   					}	
;;;1206   					Para.IR_Step_Time = temp1;//步进时间
;;;1207   					temp1 = 0;
;;;1208   					
;;;1209   					if(buf[currCharNum++] == ',')
;;;1210   					{
;;;1211   						for(i=0,temp1=0;i<5;i++)
;;;1212   						{
;;;1213   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1214   						}
;;;1215   					}	
;;;1216   					Para.POWER_OutPut_V = temp1;//电源电压
;;;1217   					temp1 = 0;
;;;1218   					
;;;1219   					if(buf[currCharNum++] == ',')
;;;1220   					{
;;;1221   						for(i=0,temp1=0;i<5;i++)
;;;1222   						{
;;;1223   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1224   						}
;;;1225   					}	
;;;1226   					Para.POWER_Limit_C = temp1;//电源电流
;;;1227   					temp1 = 0;
;;;1228   					
;;;1229   					if(buf[currCharNum++] == ',')
;;;1230   					{
;;;1231   						for(i=0,temp1=0;i<5;i++)
;;;1232   						{
;;;1233   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1234   						}
;;;1235   					}	
;;;1236   					Para.POWER_Cutoff_C = temp1;//设置充电截止电流
;;;1237   					temp1 = 0;
;;;1238   					
;;;1239   					if(buf[currCharNum++] == ',')
;;;1240   					{
;;;1241   						for(i=0,temp1=0;i<5;i++)
;;;1242   						{
;;;1243   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1244   						}
;;;1245   					}	
;;;1246   					Para.LOAD_V = temp1;//负载电压
;;;1247   					temp1 = 0;
;;;1248   					
;;;1249   					if(buf[currCharNum++] == ',')
;;;1250   					{
;;;1251   						for(i=0,temp1=0;i<5;i++)
;;;1252   						{
;;;1253   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1254   						}
;;;1255   					}	
;;;1256   					Para.LOAD_C = temp1;//负载电流
;;;1257   					temp1 = 0;
;;;1258   					
;;;1259   					if(buf[currCharNum++] == ',')
;;;1260   					{
;;;1261   						for(i=0,temp1=0;i<5;i++)
;;;1262   						{
;;;1263   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1264   						}
;;;1265   					}	
;;;1266   					Para.LOAD_Cutoff_V = temp1;//设置负载截止电压
;;;1267   					temp1 = 0;
;;;1268   					
;;;1269   					if(buf[currCharNum++] == ',')
;;;1270   					{
;;;1271   						for(i=0,temp1=0;i<5;i++)
;;;1272   						{
;;;1273   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1274   						}
;;;1275   					}	
;;;1276   					Para.CDC_OutPut_V = temp1;//设置容量测试充电电压
;;;1277   					temp1 = 0;
;;;1278   					
;;;1279   					if(buf[currCharNum++] == ',')
;;;1280   					{
;;;1281   						for(i=0,temp1=0;i<5;i++)
;;;1282   						{
;;;1283   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1284   						}
;;;1285   					}	
;;;1286   					Para.CDC_Limit_C = temp1;//设置容量测试充电限制电流
;;;1287   					temp1 = 0;
;;;1288   					
;;;1289   					if(buf[currCharNum++] == ',')
;;;1290   					{
;;;1291   						for(i=0,temp1=0;i<5;i++)
;;;1292   						{
;;;1293   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1294   						}
;;;1295   					}	
;;;1296   					Para.CDC_Ccutoff_V = temp1;//设置容量测试充电截止电压
;;;1297   					temp1 = 0;
;;;1298   					
;;;1299   					if(buf[currCharNum++] == ',')
;;;1300   					{
;;;1301   						for(i=0,temp1=0;i<5;i++)
;;;1302   						{
;;;1303   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1304   						}
;;;1305   					}	
;;;1306   					Para.CDC_Ccutoff_C = temp1;//设置容量测试充电截止电流
;;;1307   					temp1 = 0;
;;;1308   					
;;;1309   					if(buf[currCharNum++] == ',')
;;;1310   					{
;;;1311   						for(i=0,temp1=0;i<5;i++)
;;;1312   						{
;;;1313   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1314   						}
;;;1315   					}	
;;;1316   					Para.CDC_Load_C = temp1;//设置容量测试放电电流
;;;1317   					temp1 = 0;
;;;1318   					
;;;1319   					if(buf[currCharNum++] == ',')
;;;1320   					{
;;;1321   						for(i=0,temp1=0;i<5;i++)
;;;1322   						{
;;;1323   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1324   						}
;;;1325   					}	
;;;1326   					Para.CDC_Dcutoff_V = temp1;//设置容量测试放电截止电压
;;;1327   					temp1 = 0;
;;;1328   					
;;;1329   					if(buf[currCharNum++] == ',')
;;;1330   					{
;;;1331   						for(i=0,temp1=0;i<3;i++)
;;;1332   						{
;;;1333   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1334   						}
;;;1335   					}	
;;;1336   					Para.CDC_Cycle_Time = temp1;//循环次数
;;;1337   					temp1 = 0;
;;;1338   					
;;;1339   					if(buf[currCharNum++] == ',')
;;;1340   					{
;;;1341   						for(i=0,temp1=0;i<3;i++)
;;;1342   						{
;;;1343   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1344   						}
;;;1345   					}	
;;;1346   					if(MODE == 0)
;;;1347   					{
;;;1348   						Para.CLOAD_MODE = temp1;//负载模式
;;;1349   					}
;;;1350   					temp1 = 0;
;;;1351   //					MODE_PARASET(MODE);
;;;1352   					
;;;1353   					if(buf[currCharNum++] == ',')
;;;1354   					{
;;;1355   						for(i=0,temp1=0;i<3;i++)
;;;1356   						{
;;;1357   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1358   						}
;;;1359   					}	
;;;1360   					Rraly = temp1;//内阻档位
;;;1361   					temp1 = 0;
;;;1362   					
;;;1363   					if(buf[currCharNum++] == ',')
;;;1364   					{
;;;1365   						for(i=0,temp1=0;i<3;i++)
;;;1366   						{
;;;1367   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1368   						}
;;;1369   					}	
;;;1370   					Para.ACT_DELAY = temp1;//激活延时
;;;1371   					temp1 = 0;
;;;1372   					
;;;1373   					MODE_PARASET(MODE);
;;;1374   					
;;;1375   					 buf[currCharNum++] = ChrEndR;
;;;1376   		        }
;;;1377   				break;
;;;1378   				case 4:
;;;1379   				pntlen = 1;
;;;1380   				if(buf[currCharNum]=='?')
;;;1381   				{
;;;1382   					  sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1383   				    currCharNum+=pntlen;
;;;1384   				    buf[currCharNum ++] = ChrEndS;
;;;1385   					
;;;1386   				}
;;;1387   				else
;;;1388   				{
;;;1389   					if(currCharNum == 0x0b)
;;;1390   					{						
;;;1391   						for(i=0,temp1=0;i<2;i++)
;;;1392   						{
;;;1393   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1394   						}
;;;1395   					}
;;;1396   					MODE = temp1;//项目
;;;1397   					temp1 = 0;
;;;1398   					
;;;1399   					if(MODE == 0)
;;;1400   					{
;;;1401   						if(buf[currCharNum++] == ',')
;;;1402   						{
;;;1403   							for(i=0,temp1=0;i<5;i++)
;;;1404   							{
;;;1405   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1406   							}
;;;1407   						}	
;;;1408   						
;;;1409   						temp1 = 0;
;;;1410   						
;;;1411   						if(buf[currCharNum++] == ',')
;;;1412   						{
;;;1413   							for(i=0,temp1=0;i<5;i++)
;;;1414   							{
;;;1415   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1416   							}
;;;1417   						}	
;;;1418   						Para.CSET_Current_Laod = temp1;//负载电流
;;;1419   						temp1 = 0;
;;;1420   						
;;;1421   	
;;;1422   						if(Para.CSET_Current_Laod > 20000)
;;;1423   						{
;;;1424   							LOAD_I_SW = 1;
;;;1425   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1426   						}else{
;;;1427   							LOAD_I_SW = 0;
;;;1428   							GPIO_SetBits(GPIOC,GPIO_Pin_11);//电流测量为低档位
;;;1429   						}
;;;1430   						if(buf[currCharNum++] == ',')
;;;1431   						{
;;;1432   							for(i=0,temp1=0;i<1;i++)
;;;1433   							{
;;;1434   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1435   							}
;;;1436   						}
;;;1437   						mainswitch = temp1;//开关
;;;1438   						if(mainswitch == 0)
;;;1439   						{
;;;1440   							LOAD_I_SW = 1;
;;;1441   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1442   						}
;;;1443   					}else if(MODE == 1){
;;;1444   						if(buf[currCharNum++] == ',')
;;;1445   						{
;;;1446   							for(i=0,temp1=0;i<5;i++)
;;;1447   							{
;;;1448   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1449   							}
;;;1450   						}	
;;;1451   						Para.CDC_OutPut_V = temp1;//电源电压
;;;1452   						temp1 = 0;
;;;1453   						
;;;1454   						if(buf[currCharNum++] == ',')
;;;1455   						{
;;;1456   							for(i=0,temp1=0;i<5;i++)
;;;1457   							{
;;;1458   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1459   							}
;;;1460   						}	
;;;1461   						Para.CDC_Limit_C = temp1;//电源电流
;;;1462   						temp1 = 0;
;;;1463   						
;;;1464   						if(buf[currCharNum++] == ',')
;;;1465   						{
;;;1466   							for(i=0,temp1=0;i<1;i++)
;;;1467   							{
;;;1468   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1469   							}
;;;1470   						}
;;;1471   						mainswitch = temp1;//开关
;;;1472   					}else if(MODE == 2){
;;;1473   						LOAD_I_SW = 1;
;;;1474   						GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1475   						if(buf[currCharNum++] == ',')
;;;1476   						{
;;;1477   							for(i=0,temp1=0;i<5;i++)
;;;1478   							{
;;;1479   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1480   							}
;;;1481   						}	
;;;1482   						Para.IR_Start_C = temp1;//起始电流
;;;1483   						temp1 = 0;
;;;1484   						
;;;1485   						if(buf[currCharNum++] == ',')
;;;1486   						{
;;;1487   							for(i=0,temp1=0;i<5;i++)
;;;1488   							{
;;;1489   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1490   							}
;;;1491   						}	
;;;1492   						Para.IR_Step_C = temp1;//步进电流
;;;1493   						temp1 = 0;
;;;1494   						
;;;1495   						if(buf[currCharNum++] == ',')
;;;1496   						{
;;;1497   							for(i=0,temp1=0;i<1;i++)
;;;1498   							{
;;;1499   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1500   							}
;;;1501   						}
;;;1502   						mainswitch = temp1;//开关
;;;1503   						
;;;1504   						if(mainswitch == 1)
;;;1505   						{
;;;1506   							finishflag = 0;
;;;1507   						}
;;;1508   					}else if(MODE == 3){
;;;1509   						if(buf[currCharNum++] == ',')
;;;1510   						{
;;;1511   							for(i=0,temp1=0;i<5;i++)
;;;1512   							{
;;;1513   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1514   							}
;;;1515   						}	
;;;1516   						Para.CDC_OutPut_V = temp1;//电源电压
;;;1517   						temp1 = 0;
;;;1518   						
;;;1519   						
;;;1520   						if(buf[currCharNum++] == ',')
;;;1521   						{
;;;1522   							for(i=0,temp1=0;i<5;i++)
;;;1523   							{
;;;1524   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1525   							}
;;;1526   						}	
;;;1527   						Para.CDC_Limit_C = temp1;//电源电流
;;;1528   						temp1 = 0;
;;;1529   						
;;;1530   						if(buf[currCharNum++] == ',')
;;;1531   						{
;;;1532   							for(i=0,temp1=0;i<1;i++)
;;;1533   							{
;;;1534   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1535   							}
;;;1536   						}
;;;1537   						mainswitch = temp1;//开关
;;;1538   						
;;;1539   						
;;;1540   					}else if(MODE == 4){
;;;1541   						if(buf[currCharNum++] == ',')
;;;1542   						{
;;;1543   							for(i=0,temp1=0;i<5;i++)
;;;1544   							{
;;;1545   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1546   							}
;;;1547   						}	
;;;1548   						
;;;1549   						temp1 = 0;
;;;1550   						
;;;1551   						if(buf[currCharNum++] == ',')
;;;1552   						{
;;;1553   							for(i=0,temp1=0;i<5;i++)
;;;1554   							{
;;;1555   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1556   							}
;;;1557   						}	
;;;1558   						Para.CSET_Current_Laod = temp1;//负载电流
;;;1559   						temp1 = 0;
;;;1560   						
;;;1561   	
;;;1562   						if(Para.CSET_Current_Laod > 20000)
;;;1563   						{
;;;1564   							LOAD_I_SW = 1;
;;;1565   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1566   						}else{
;;;1567   							LOAD_I_SW = 0;
;;;1568   							GPIO_SetBits(GPIOC,GPIO_Pin_11);//电流测量为低档位
;;;1569   						}
;;;1570   						if(buf[currCharNum++] == ',')
;;;1571   						{
;;;1572   							for(i=0,temp1=0;i<1;i++)
;;;1573   							{
;;;1574   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1575   							}
;;;1576   						}
;;;1577   						mainswitch = temp1;//开关
;;;1578   						if(mainswitch == 0)
;;;1579   						{
;;;1580   							LOAD_I_SW = 1;
;;;1581   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1582   						}
;;;1583   					}else if(MODE == 5){
;;;1584   						if(buf[currCharNum++] == ',')
;;;1585   						{
;;;1586   							for(i=0,temp1=0;i<5;i++)
;;;1587   							{
;;;1588   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1589   							}
;;;1590   						}	
;;;1591   						temp1 = 0;
;;;1592   						
;;;1593   						if(buf[currCharNum++] == ',')
;;;1594   						{
;;;1595   							for(i=0,temp1=0;i<5;i++)
;;;1596   							{
;;;1597   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1598   							}
;;;1599   						}	
;;;1600   						temp1 = 0;
;;;1601   						
;;;1602   						if(buf[currCharNum++] == ',')
;;;1603   						{
;;;1604   							for(i=0,temp1=0;i<1;i++)
;;;1605   							{
;;;1606   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1607   							}
;;;1608   						}
;;;1609   						mainswitch = temp1;//开关
;;;1610   						if(mainswitch == 0)
;;;1611   						{
;;;1612   							mainswitch = 0;
;;;1613   						}
;;;1614   					}else if(MODE == 6){
;;;1615   						if(buf[currCharNum++] == ',')
;;;1616   						{
;;;1617   							for(i=0,temp1=0;i<5;i++)
;;;1618   							{
;;;1619   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1620   							}
;;;1621   						}	
;;;1622   						temp1 = 0;
;;;1623   						
;;;1624   						if(buf[currCharNum++] == ',')
;;;1625   						{
;;;1626   							for(i=0,temp1=0;i<5;i++)
;;;1627   							{
;;;1628   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1629   							}
;;;1630   						}	
;;;1631   						temp1 = 0;
;;;1632   						
;;;1633   						if(buf[currCharNum++] == ',')
;;;1634   						{
;;;1635   							for(i=0,temp1=0;i<1;i++)
;;;1636   							{
;;;1637   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1638   							}
;;;1639   						}
;;;1640   						mainswitch = temp1;//开关
;;;1641   					}
;;;1642   					
;;;1643   					temp1 = 0;
;;;1644   //					MODE_PARASET(MODE);
;;;1645   					Off_GPOI_ResetSet();
;;;1646   					LIST_ONOFF(mainswitch);
;;;1647   					buf[currCharNum++] = ChrEndR;
;;;1648   		        }
;;;1649   				break;
;;;1650   				case 12://电压校准
;;;1651   				{
;;;1652   					pntlen = 8;
;;;1653   					if(buf[currCharNum]=='?')
;;;1654   					{
;;;1655   						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1656   						sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1657   						currCharNum+=pntlen;
;;;1658   						buf[currCharNum++ ] = ChrEndS;
;;;1659   					}
;;;1660   					else
;;;1661   					{
;;;1662   						tmpFg = 1;
;;;1663   						for(i=0;i<pntlen;i++)
;;;1664   						{
;;;1665   						   if(i==0||i==4)
;;;1666   							  continue;
;;;1667   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1668   						   {
;;;1669   							  tmpFg = (tmpFg&0x01);
;;;1670   						   }
;;;1671   						   else
;;;1672   						   {
;;;1673   							  tmpFg = 0;
;;;1674   						   }
;;;1675   						}
;;;1676   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1677   						{
;;;1678   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1679   							
;;;1680   						}
;;;1681   						temp1=0;
;;;1682   						for(i=0;i<pntlen;i++)
;;;1683   						{
;;;1684   						   if(i==0)
;;;1685   						   {
;;;1686   							   fsingal = buf[currCharNum++]-0x30;
;;;1687   							   continue; 
;;;1688   						   } 
;;;1689   						   else if(i==4)
;;;1690   						   {
;;;1691   							   currCharNum++;
;;;1692   							   continue; 
;;;1693   						   }
;;;1694   						   else									 
;;;1695   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1696   						}	
;;;1697   						CalHandle(0,fsingal,temp1);
;;;1698   						
;;;1699   					}
;;;1700   				}break;
;;;1701   				case 5:
;;;1702   				pntlen = 1;
;;;1703   				if(buf[currCharNum]=='?')
;;;1704   				{
;;;1705   					sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1706   				    currCharNum+=pntlen;
;;;1707   				    buf[currCharNum ++] = ChrEndS;
;;;1708   					
;;;1709   				}
;;;1710   				else
;;;1711   				{
;;;1712   					pntlen = 1;				
;;;1713   					for(i=0,temp1=0;i<pntlen;i++)
;;;1714   					{
;;;1715   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1716   					}		                   
;;;1717   					if(temp1>1)
;;;1718   					{
;;;1719   						return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1720   					}
;;;1721   //					MODE=temp1;
;;;1722   					
;;;1723   					
;;;1724   					overflag = temp1;
;;;1725   //						Para.CSET_Voltage = 5000;
;;;1726   //						Para.CSET_Current = 1000;
;;;1727   					
;;;1728   						
;;;1729   //					MODE_ONOFF(mainswitch);
;;;1730   	//				Change_LM_Val(LM_S_Vale);
;;;1731   					buf[currCharNum++] = ChrEndR;
;;;1732   		        }
;;;1733   				break;
;;;1734   				case 13://电流校准
;;;1735   				{
;;;1736   					pntlen = 8;
;;;1737   					if(buf[currCharNum]=='?')
;;;1738   					{
;;;1739   //						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1740   //									sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1741   //						currCharNum+=pntlen;
;;;1742   //						buf[currCharNum++ ] = ChrEndS;
;;;1743   					}
;;;1744   					else
;;;1745   					{
;;;1746   						tmpFg = 1;
;;;1747   						for(i=0;i<pntlen;i++)
;;;1748   						{
;;;1749   						   if(i==0||i==4)
;;;1750   							  continue;
;;;1751   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1752   						   {
;;;1753   							  tmpFg = (tmpFg&0x01);
;;;1754   						   }
;;;1755   						   else
;;;1756   						   {
;;;1757   							  tmpFg = 0;
;;;1758   						   }
;;;1759   						}
;;;1760   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1761   						{
;;;1762   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1763   							
;;;1764   						}
;;;1765   						temp1=0;
;;;1766   						for(i=0;i<pntlen;i++)
;;;1767   						{
;;;1768   						   if(i==0)
;;;1769   						   {
;;;1770   							   fsingal = buf[currCharNum++]-0x30;
;;;1771   							   continue; 
;;;1772   						   } 
;;;1773   						   else if(i==4)
;;;1774   						   {
;;;1775   							   currCharNum++;
;;;1776   							   continue; 
;;;1777   						   }
;;;1778   						   else									 
;;;1779   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1780   						}	
;;;1781   						CalHandle(1,fsingal,temp1);
;;;1782   						
;;;1783   					}
;;;1784   				}break;
;;;1785   				case 14://电阻校准
;;;1786   				{
;;;1787   					pntlen = 6;
;;;1788   					if(buf[currCharNum]=='?')
;;;1789   					{
;;;1790   						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1791   									sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1792   						currCharNum+=pntlen;
;;;1793   						buf[currCharNum++ ] = ChrEndS;
;;;1794   					}
;;;1795   					else
;;;1796   					{
;;;1797   						tmpFg = 1;
;;;1798   						for(i=0;i<pntlen;i++)
;;;1799   						{
;;;1800   						   if(i==0||i==4)
;;;1801   							  continue;
;;;1802   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1803   						   {
;;;1804   							  tmpFg = (tmpFg&0x01);
;;;1805   						   }
;;;1806   						   else
;;;1807   						   {
;;;1808   							  tmpFg = 0;
;;;1809   						   }
;;;1810   						}
;;;1811   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1812   						{
;;;1813   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1814   							
;;;1815   						}
;;;1816   						temp1=0;
;;;1817   						for(i=0;i<pntlen;i++)
;;;1818   						{
;;;1819   						   if(i==0)
;;;1820   						   {
;;;1821   							   fsingal = buf[currCharNum++]-0x30;
;;;1822   							   continue; 
;;;1823   						   } 
;;;1824   //						   else if(i==4)
;;;1825   //						   {
;;;1826   //							   currCharNum++;
;;;1827   //							   continue; 
;;;1828   //						   }
;;;1829   //						   else									 
;;;1830   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1831   						}
;;;1832   						CalHandle(2,fsingal,temp1);
;;;1833   						
;;;1834   					}
;;;1835   				}break;
;;;1836   				case 18:
;;;1837   				{
;;;1838   					if(buf[currCharNum]=='?')
;;;1839   					{
;;;1840   //						sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1841   //						currCharNum+=pntlen;
;;;1842   //						buf[currCharNum ++] = ChrEndS;
;;;1843   						
;;;1844   					}
;;;1845   					else
;;;1846   					{
;;;1847   						pntlen = 1;				
;;;1848   						for(i=0,temp1=0;i<pntlen;i++)
;;;1849   						{
;;;1850   							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1851   						}		                   
;;;1852   						if(temp1>1)
;;;1853   						{
;;;1854   							return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1855   						}
;;;1856   	//					MODE=temp1;
;;;1857   						
;;;1858   						bootflag = 1;
;;;1859   						Write_Boot_Flag();
;;;1860   						if(temp1 == 1)
;;;1861   						{
;;;1862   							JumpBoot(55);
;;;1863   						}
;;;1864   					}
;;;1865   				}break;
;;;1866   //				case 15:
;;;1867   //				{
;;;1868   //					pntlen = 1;
;;;1869   //					if(buf[currCharNum]=='?')
;;;1870   //					{
;;;1871   //						sprintf(&buf[currCharNum],"%1d",Gmode_Vale);
;;;1872   //						currCharNum+=pntlen;
;;;1873   //						buf[currCharNum] = ChrEndR;
;;;1874   //						currCharNum++;
;;;1875   //	//				    buf[currCharNum ++] = ChrEndS;
;;;1876   //						
;;;1877   //					}
;;;1878   //					else
;;;1879   //					{
;;;1880   //						tmpFg = 1;
;;;1881   //						for(i=0;i<pntlen;i++)
;;;1882   //						{
;;;1883   //						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1884   //						   {
;;;1885   //							  tmpFg = (tmpFg&0x01);
;;;1886   //						   }
;;;1887   //						   else
;;;1888   //						   {
;;;1889   //							  tmpFg = 0;
;;;1890   //						   }
;;;1891   //						}
;;;1892   //						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1893   //						{
;;;1894   //							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1895   //							
;;;1896   //						}					
;;;1897   //						for(i=0,temp1=0;i<pntlen;i++)
;;;1898   //						{
;;;1899   //							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1900   //						}		                   
;;;1901   //						if(temp1 >Mode_H)
;;;1902   //						 {
;;;1903   //							 return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1904   //							 
;;;1905   //						 }
;;;1906   //						 if(H_L == 1)
;;;1907   //						 {
;;;1908   //							CalHandle(3,1,temp1);
;;;1909   //						 }else{
;;;1910   //							 CalHandle(3,0,temp1);
;;;1911   //						 }
;;;1912   //						 
;;;1913   ////								 Mode=temp1;
;;;1914   ////								Change_MODE_Val(Mode);
;;;1915   ////						 buf[currCharNum++] = ChrEndS;
;;;1916   //					}
;;;1917   //					break;
;;;1918   //				}break;
;;;1919   //				case 16:
;;;1920   //				{
;;;1921   //					pntlen = 3;
;;;1922   //					if(buf[currCharNum]=='?')
;;;1923   //					{
;;;1924   //						sprintf(&buf[currCharNum],"%1d",Gmode_Vale);
;;;1925   //						currCharNum+=pntlen;
;;;1926   //						buf[currCharNum] = ChrEndR;
;;;1927   //						currCharNum++;
;;;1928   //	//				    buf[currCharNum ++] = ChrEndS;
;;;1929   //						
;;;1930   //					}
;;;1931   //					else
;;;1932   //					{
;;;1933   //						tmpFg = 1;
;;;1934   //						for(i=0;i<pntlen;i++)
;;;1935   //						{
;;;1936   //						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1937   //						   {
;;;1938   //							  tmpFg = (tmpFg&0x01);
;;;1939   //						   }
;;;1940   //						   else
;;;1941   //						   {
;;;1942   //							  tmpFg = 0;
;;;1943   //						   }
;;;1944   //						}
;;;1945   //						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1946   //						{
;;;1947   //							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1948   //							
;;;1949   //						}					
;;;1950   //						for(i=0,temp1=0;i<pntlen;i++)
;;;1951   //						{
;;;1952   //							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1953   //						}		                   
;;;1954   //						 overflag = temp1;
;;;1955   //						 
;;;1956   ////								 Mode=temp1;
;;;1957   ////								Change_MODE_Val(Mode);
;;;1958   ////						 buf[currCharNum++] = ChrEndS;
;;;1959   //					}
;;;1960   //					break;
;;;1961   //				}break;
;;;1962   //				case 17:
;;;1963   //				{
;;;1964   //					pntlen = 2;
;;;1965   //					if(buf[currCharNum]=='?')
;;;1966   //					{
;;;1967   ////						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1968   //									sprintf(&buf[currCharNum],"%02d",(int)temperature);
;;;1969   //						currCharNum+=pntlen;
;;;1970   //						buf[currCharNum++ ] = ChrEndR;
;;;1971   //						buf[currCharNum++ ] = ChrEndS;
;;;1972   //					}
;;;1973   //				}break;
;;;1974   			default:    //ERR
;;;1975              		 return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1976   	 			  
;;;1977   		  }
;;;1978   		  break;
;;;1979   		}
;;;1980   		
;;;1981   	}
;;;1982   	if(j>=CmdNumb)
;;;1983   	{
;;;1984   		return SetErr_ACK(buf, addr ,CMD_ERR);			  
0002d4  4620              MOV      r0,r4
0002d6  9932              LDR      r1,[sp,#0xc8]
0002d8  f7fffffe          BL       SetErr_ACK
;;;1985   	}
;;;1986   	return currCharNum+1;
;;;1987   }
0002dc  b033              ADD      sp,sp,#0xcc
0002de  ecbd8b02          VPOP     {d8}
0002e2  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.742|
0002e6  f7fffffe          BL       __2sprintf
0002ea  1c6d              ADDS     r5,r5,#1              ;1099
0002ec  e3fa              B        |L9.2788|
                  |L9.750|
0002ee  f88b0006          STRB     r0,[r11,#6]           ;1148
0002f2  f89b0006          LDRB     r0,[r11,#6]           ;1153  ; mainswitch
0002f6  f7fffffe          BL       MODE_ONOFF
                  |L9.762|
0002fa  200d              MOVS     r0,#0xd               ;1122
0002fc  5560              STRB     r0,[r4,r5]            ;1122
0002fe  1c6d              ADDS     r5,r5,#1              ;1122
000300  b2ad              UXTH     r5,r5                 ;1122
000302  e3f0              B        |L9.2790|
                  |L9.772|
000304  5d61              LDRB     r1,[r4,r5]            ;1160
000306  293f              CMP      r1,#0x3f              ;1160
000308  d0ca              BEQ      |L9.672|
00030a  2d0b              CMP      r5,#0xb               ;1169
00030c  d10d              BNE      |L9.810|
00030e  2000              MOVS     r0,#0                 ;1171
000310  4607              MOV      r7,r0                 ;1171
                  |L9.786|
000312  5d61              LDRB     r1,[r4,r5]            ;1173
000314  eb070287          ADD      r2,r7,r7,LSL #2       ;1173
000318  eb060242          ADD      r2,r6,r2,LSL #1       ;1173
00031c  1c6d              ADDS     r5,r5,#1              ;1173
00031e  1c40              ADDS     r0,r0,#1              ;1173
000320  188f              ADDS     r7,r1,r2              ;1173
000322  b2c0              UXTB     r0,r0                 ;1171
000324  b2ad              UXTH     r5,r5                 ;1173
000326  2805              CMP      r0,#5                 ;1171
000328  d3f3              BCC      |L9.786|
                  |L9.810|
00032a  4651              MOV      r1,r10                ;1176
00032c  f8ca7044          STR      r7,[r10,#0x44]        ;1176  ; Para
000330  5d62              LDRB     r2,[r4,r5]            ;1179
000332  1c6d              ADDS     r5,r5,#1              ;1179
000334  2300              MOVS     r3,#0                 ;1177
000336  b2a8              UXTH     r0,r5                 ;1179
000338  2a2c              CMP      r2,#0x2c              ;1179
00033a  d10c              BNE      |L9.854|
00033c  2200              MOVS     r2,#0                 ;1181
                  |L9.830|
00033e  5c25              LDRB     r5,[r4,r0]            ;1183
000340  eb030383          ADD      r3,r3,r3,LSL #2       ;1183
000344  1c40              ADDS     r0,r0,#1              ;1183
000346  1c52              ADDS     r2,r2,#1              ;1183
000348  eb060343          ADD      r3,r6,r3,LSL #1       ;1183
00034c  b2d2              UXTB     r2,r2                 ;1181
00034e  442b              ADD      r3,r3,r5              ;1183
000350  b280              UXTH     r0,r0                 ;1183
000352  2a05              CMP      r2,#5                 ;1181
000354  d3f3              BCC      |L9.830|
                  |L9.854|
000356  f8a13048          STRH     r3,[r1,#0x48]         ;1186
00035a  5c22              LDRB     r2,[r4,r0]            ;1189
00035c  1c40              ADDS     r0,r0,#1              ;1189
00035e  2300              MOVS     r3,#0                 ;1187
000360  b280              UXTH     r0,r0                 ;1189
000362  2a2c              CMP      r2,#0x2c              ;1189
000364  d10c              BNE      |L9.896|
000366  2200              MOVS     r2,#0                 ;1191
                  |L9.872|
000368  5c25              LDRB     r5,[r4,r0]            ;1193
00036a  eb030383          ADD      r3,r3,r3,LSL #2       ;1193
00036e  1c40              ADDS     r0,r0,#1              ;1193
000370  1c52              ADDS     r2,r2,#1              ;1193
000372  eb060343          ADD      r3,r6,r3,LSL #1       ;1193
000376  b2d2              UXTB     r2,r2                 ;1191
000378  442b              ADD      r3,r3,r5              ;1193
00037a  b280              UXTH     r0,r0                 ;1193
00037c  2a05              CMP      r2,#5                 ;1191
00037e  d3f3              BCC      |L9.872|
                  |L9.896|
000380  64cb              STR      r3,[r1,#0x4c]         ;1196  ; Para
000382  5c22              LDRB     r2,[r4,r0]            ;1199
000384  1c40              ADDS     r0,r0,#1              ;1199
000386  2300              MOVS     r3,#0                 ;1197
000388  b280              UXTH     r0,r0                 ;1199
00038a  2a2c              CMP      r2,#0x2c              ;1199
00038c  d10e              BNE      |L9.940|
00038e  2200              MOVS     r2,#0                 ;1201
                  |L9.912|
000390  5c25              LDRB     r5,[r4,r0]            ;1203
000392  eb030383          ADD      r3,r3,r3,LSL #2       ;1203
000396  eb060343          ADD      r3,r6,r3,LSL #1       ;1203
00039a  442b              ADD      r3,r3,r5              ;1203
00039c  1c40              ADDS     r0,r0,#1              ;1203
00039e  e000              B        |L9.930|
                  |L9.928|
0003a0  e208              B        |L9.1972|
                  |L9.930|
0003a2  1c52              ADDS     r2,r2,#1              ;1203
0003a4  b2d2              UXTB     r2,r2                 ;1201
0003a6  b280              UXTH     r0,r0                 ;1203
0003a8  2a03              CMP      r2,#3                 ;1201
0003aa  d3f1              BCC      |L9.912|
                  |L9.940|
0003ac  f8a13050          STRH     r3,[r1,#0x50]         ;1206
0003b0  5c22              LDRB     r2,[r4,r0]            ;1209
0003b2  1c40              ADDS     r0,r0,#1              ;1209
0003b4  2300              MOVS     r3,#0                 ;1207
0003b6  b280              UXTH     r0,r0                 ;1209
0003b8  2a2c              CMP      r2,#0x2c              ;1209
0003ba  d10c              BNE      |L9.982|
0003bc  2200              MOVS     r2,#0                 ;1211
                  |L9.958|
0003be  5c25              LDRB     r5,[r4,r0]            ;1213
0003c0  eb030383          ADD      r3,r3,r3,LSL #2       ;1213
0003c4  1c40              ADDS     r0,r0,#1              ;1213
0003c6  1c52              ADDS     r2,r2,#1              ;1213
0003c8  eb060343          ADD      r3,r6,r3,LSL #1       ;1213
0003cc  b2d2              UXTB     r2,r2                 ;1211
0003ce  442b              ADD      r3,r3,r5              ;1213
0003d0  b280              UXTH     r0,r0                 ;1213
0003d2  2a05              CMP      r2,#5                 ;1211
0003d4  d3f3              BCC      |L9.958|
                  |L9.982|
0003d6  f8a13054          STRH     r3,[r1,#0x54]         ;1216
0003da  5c22              LDRB     r2,[r4,r0]            ;1219
0003dc  1c40              ADDS     r0,r0,#1              ;1219
0003de  2300              MOVS     r3,#0                 ;1217
0003e0  b280              UXTH     r0,r0                 ;1219
0003e2  2a2c              CMP      r2,#0x2c              ;1219
0003e4  d10c              BNE      |L9.1024|
0003e6  2200              MOVS     r2,#0                 ;1221
                  |L9.1000|
0003e8  5c25              LDRB     r5,[r4,r0]            ;1223
0003ea  eb030383          ADD      r3,r3,r3,LSL #2       ;1223
0003ee  1c40              ADDS     r0,r0,#1              ;1223
0003f0  1c52              ADDS     r2,r2,#1              ;1223
0003f2  eb060343          ADD      r3,r6,r3,LSL #1       ;1223
0003f6  b2d2              UXTB     r2,r2                 ;1221
0003f8  442b              ADD      r3,r3,r5              ;1223
0003fa  b280              UXTH     r0,r0                 ;1223
0003fc  2a05              CMP      r2,#5                 ;1221
0003fe  d3f3              BCC      |L9.1000|
                  |L9.1024|
000400  f8a13056          STRH     r3,[r1,#0x56]         ;1226
000404  5c22              LDRB     r2,[r4,r0]            ;1229
000406  1c40              ADDS     r0,r0,#1              ;1229
000408  2300              MOVS     r3,#0                 ;1227
00040a  b280              UXTH     r0,r0                 ;1229
00040c  2a2c              CMP      r2,#0x2c              ;1229
00040e  d10c              BNE      |L9.1066|
000410  2200              MOVS     r2,#0                 ;1231
                  |L9.1042|
000412  5c25              LDRB     r5,[r4,r0]            ;1233
000414  eb030383          ADD      r3,r3,r3,LSL #2       ;1233
000418  1c40              ADDS     r0,r0,#1              ;1233
00041a  1c52              ADDS     r2,r2,#1              ;1233
00041c  eb060343          ADD      r3,r6,r3,LSL #1       ;1233
000420  b2d2              UXTB     r2,r2                 ;1231
000422  442b              ADD      r3,r3,r5              ;1233
000424  b280              UXTH     r0,r0                 ;1233
000426  2a05              CMP      r2,#5                 ;1231
000428  d3f3              BCC      |L9.1042|
                  |L9.1066|
00042a  f8a13058          STRH     r3,[r1,#0x58]         ;1236
00042e  2300              MOVS     r3,#0                 ;1237
000430  5c22              LDRB     r2,[r4,r0]            ;1239
000432  1c40              ADDS     r0,r0,#1              ;1239
000434  b280              UXTH     r0,r0                 ;1239
000436  e02d              B        |L9.1172|
                  |L9.1080|
000438  256400            DCB      "%d",0
00043b  00                DCB      0
                  |L9.1084|
00043c  2f00              DCB      "/",0
00043e  00                DCB      0
00043f  00                DCB      0
                  |L9.1088|
                          DCD      ||.data||+0x38
                  |L9.1092|
                          DCD      C_DISCHARGE
                  |L9.1096|
                          DCD      Para
                  |L9.1100|
00044c  25303564          DCB      "%05d",0
000450  00      
000451  00                DCB      0
000452  00                DCB      0
000453  00                DCB      0
                  |L9.1108|
000454  25303664          DCB      "%06d",0
000458  00      
000459  00                DCB      0
00045a  00                DCB      0
00045b  00                DCB      0
                  |L9.1116|
00045c  25303464          DCB      "%04d",0
000460  00      
000461  00                DCB      0
000462  00                DCB      0
000463  00                DCB      0
                  |L9.1124|
                          DCD      max_discahrgeNum
                  |L9.1128|
000468  447a0000          DCFS     0x447a0000 ; 1000
                  |L9.1132|
                          DCD      shorttime
                  |L9.1136|
000470  25303364          DCB      "%03d",0
000474  00      
000475  00                DCB      0
000476  00                DCB      0
000477  00                DCB      0
                  |L9.1144|
000478  25316400          DCB      "%1d",0
                  |L9.1148|
                          DCD      finishflag
                  |L9.1152|
                          DCD      lockflag
                  |L9.1156|
                          DCD      version
                  |L9.1160|
000488  25326400          DCB      "%2d",0
                  |L9.1164|
                          DCD      Temperature
                  |L9.1168|
                          DCD      overflag
                  |L9.1172|
000494  2a2c              CMP      r2,#0x2c              ;1239
000496  d10c              BNE      |L9.1202|
000498  2200              MOVS     r2,#0                 ;1241
                  |L9.1178|
00049a  5c25              LDRB     r5,[r4,r0]            ;1243
00049c  eb030383          ADD      r3,r3,r3,LSL #2       ;1243
0004a0  1c40              ADDS     r0,r0,#1              ;1243
0004a2  1c52              ADDS     r2,r2,#1              ;1243
0004a4  eb060343          ADD      r3,r6,r3,LSL #1       ;1243
0004a8  b2d2              UXTB     r2,r2                 ;1241
0004aa  442b              ADD      r3,r3,r5              ;1243
0004ac  b280              UXTH     r0,r0                 ;1243
0004ae  2a05              CMP      r2,#5                 ;1241
0004b0  d3f3              BCC      |L9.1178|
                  |L9.1202|
0004b2  f8a13060          STRH     r3,[r1,#0x60]         ;1246
0004b6  5c22              LDRB     r2,[r4,r0]            ;1249
0004b8  1c40              ADDS     r0,r0,#1              ;1249
0004ba  2300              MOVS     r3,#0                 ;1247
0004bc  b280              UXTH     r0,r0                 ;1249
0004be  2a2c              CMP      r2,#0x2c              ;1249
0004c0  d10c              BNE      |L9.1244|
0004c2  2200              MOVS     r2,#0                 ;1251
                  |L9.1220|
0004c4  5c25              LDRB     r5,[r4,r0]            ;1253
0004c6  eb030383          ADD      r3,r3,r3,LSL #2       ;1253
0004ca  1c40              ADDS     r0,r0,#1              ;1253
0004cc  1c52              ADDS     r2,r2,#1              ;1253
0004ce  eb060343          ADD      r3,r6,r3,LSL #1       ;1253
0004d2  b2d2              UXTB     r2,r2                 ;1251
0004d4  442b              ADD      r3,r3,r5              ;1253
0004d6  b280              UXTH     r0,r0                 ;1253
0004d8  2a05              CMP      r2,#5                 ;1251
0004da  d3f3              BCC      |L9.1220|
                  |L9.1244|
0004dc  65cb              STR      r3,[r1,#0x5c]         ;1256  ; Para
0004de  5c22              LDRB     r2,[r4,r0]            ;1259
0004e0  1c40              ADDS     r0,r0,#1              ;1259
0004e2  2300              MOVS     r3,#0                 ;1257
0004e4  b280              UXTH     r0,r0                 ;1259
0004e6  2a2c              CMP      r2,#0x2c              ;1259
0004e8  d10c              BNE      |L9.1284|
0004ea  2200              MOVS     r2,#0                 ;1261
                  |L9.1260|
0004ec  5c25              LDRB     r5,[r4,r0]            ;1263
0004ee  eb030383          ADD      r3,r3,r3,LSL #2       ;1263
0004f2  1c40              ADDS     r0,r0,#1              ;1263
0004f4  1c52              ADDS     r2,r2,#1              ;1263
0004f6  eb060343          ADD      r3,r6,r3,LSL #1       ;1263
0004fa  b2d2              UXTB     r2,r2                 ;1261
0004fc  442b              ADD      r3,r3,r5              ;1263
0004fe  b280              UXTH     r0,r0                 ;1263
000500  2a05              CMP      r2,#5                 ;1261
000502  d3f3              BCC      |L9.1260|
                  |L9.1284|
000504  f8a13062          STRH     r3,[r1,#0x62]         ;1266
000508  5c22              LDRB     r2,[r4,r0]            ;1269
00050a  1c40              ADDS     r0,r0,#1              ;1269
00050c  2300              MOVS     r3,#0                 ;1267
00050e  b280              UXTH     r0,r0                 ;1269
000510  2a2c              CMP      r2,#0x2c              ;1269
000512  d10c              BNE      |L9.1326|
000514  2200              MOVS     r2,#0                 ;1271
                  |L9.1302|
000516  5c25              LDRB     r5,[r4,r0]            ;1273
000518  eb030383          ADD      r3,r3,r3,LSL #2       ;1273
00051c  1c40              ADDS     r0,r0,#1              ;1273
00051e  1c52              ADDS     r2,r2,#1              ;1273
000520  eb060343          ADD      r3,r6,r3,LSL #1       ;1273
000524  b2d2              UXTB     r2,r2                 ;1271
000526  442b              ADD      r3,r3,r5              ;1273
000528  b280              UXTH     r0,r0                 ;1273
00052a  2a05              CMP      r2,#5                 ;1271
00052c  d3f3              BCC      |L9.1302|
                  |L9.1326|
00052e  f8a13064          STRH     r3,[r1,#0x64]         ;1276
000532  5c22              LDRB     r2,[r4,r0]            ;1279
000534  1c40              ADDS     r0,r0,#1              ;1279
000536  2300              MOVS     r3,#0                 ;1277
000538  b280              UXTH     r0,r0                 ;1279
00053a  2a2c              CMP      r2,#0x2c              ;1279
00053c  d10c              BNE      |L9.1368|
00053e  2200              MOVS     r2,#0                 ;1281
                  |L9.1344|
000540  5c25              LDRB     r5,[r4,r0]            ;1283
000542  eb030383          ADD      r3,r3,r3,LSL #2       ;1283
000546  1c40              ADDS     r0,r0,#1              ;1283
000548  1c52              ADDS     r2,r2,#1              ;1283
00054a  eb060343          ADD      r3,r6,r3,LSL #1       ;1283
00054e  b2d2              UXTB     r2,r2                 ;1281
000550  442b              ADD      r3,r3,r5              ;1283
000552  b280              UXTH     r0,r0                 ;1283
000554  2a05              CMP      r2,#5                 ;1281
000556  d3f3              BCC      |L9.1344|
                  |L9.1368|
000558  f8a13066          STRH     r3,[r1,#0x66]         ;1286
00055c  5c22              LDRB     r2,[r4,r0]            ;1289
00055e  1c40              ADDS     r0,r0,#1              ;1289
000560  2300              MOVS     r3,#0                 ;1287
000562  b280              UXTH     r0,r0                 ;1289
000564  2a2c              CMP      r2,#0x2c              ;1289
000566  d10c              BNE      |L9.1410|
000568  2200              MOVS     r2,#0                 ;1291
                  |L9.1386|
00056a  5c25              LDRB     r5,[r4,r0]            ;1293
00056c  eb030383          ADD      r3,r3,r3,LSL #2       ;1293
000570  1c40              ADDS     r0,r0,#1              ;1293
000572  1c52              ADDS     r2,r2,#1              ;1293
000574  eb060343          ADD      r3,r6,r3,LSL #1       ;1293
000578  b2d2              UXTB     r2,r2                 ;1291
00057a  442b              ADD      r3,r3,r5              ;1293
00057c  b280              UXTH     r0,r0                 ;1293
00057e  2a05              CMP      r2,#5                 ;1291
000580  d3f3              BCC      |L9.1386|
                  |L9.1410|
000582  668b              STR      r3,[r1,#0x68]         ;1296  ; Para
000584  5c22              LDRB     r2,[r4,r0]            ;1299
000586  1c40              ADDS     r0,r0,#1              ;1299
000588  2300              MOVS     r3,#0                 ;1297
00058a  b280              UXTH     r0,r0                 ;1299
00058c  2a2c              CMP      r2,#0x2c              ;1299
00058e  d10c              BNE      |L9.1450|
000590  2200              MOVS     r2,#0                 ;1301
                  |L9.1426|
000592  5c25              LDRB     r5,[r4,r0]            ;1303
000594  eb030383          ADD      r3,r3,r3,LSL #2       ;1303
000598  1c40              ADDS     r0,r0,#1              ;1303
00059a  1c52              ADDS     r2,r2,#1              ;1303
00059c  eb060343          ADD      r3,r6,r3,LSL #1       ;1303
0005a0  b2d2              UXTB     r2,r2                 ;1301
0005a2  442b              ADD      r3,r3,r5              ;1303
0005a4  b280              UXTH     r0,r0                 ;1303
0005a6  2a05              CMP      r2,#5                 ;1301
0005a8  d3f3              BCC      |L9.1426|
                  |L9.1450|
0005aa  f8a1306c          STRH     r3,[r1,#0x6c]         ;1306
0005ae  5c22              LDRB     r2,[r4,r0]            ;1309
0005b0  1c40              ADDS     r0,r0,#1              ;1309
0005b2  2300              MOVS     r3,#0                 ;1307
0005b4  b280              UXTH     r0,r0                 ;1309
0005b6  2a2c              CMP      r2,#0x2c              ;1309
0005b8  d10c              BNE      |L9.1492|
0005ba  2200              MOVS     r2,#0                 ;1311
                  |L9.1468|
0005bc  5c25              LDRB     r5,[r4,r0]            ;1313
0005be  eb030383          ADD      r3,r3,r3,LSL #2       ;1313
0005c2  1c40              ADDS     r0,r0,#1              ;1313
0005c4  1c52              ADDS     r2,r2,#1              ;1313
0005c6  eb060343          ADD      r3,r6,r3,LSL #1       ;1313
0005ca  b2d2              UXTB     r2,r2                 ;1311
0005cc  442b              ADD      r3,r3,r5              ;1313
0005ce  b280              UXTH     r0,r0                 ;1313
0005d0  2a05              CMP      r2,#5                 ;1311
0005d2  d3f3              BCC      |L9.1468|
                  |L9.1492|
0005d4  670b              STR      r3,[r1,#0x70]         ;1316  ; Para
0005d6  5c22              LDRB     r2,[r4,r0]            ;1319
0005d8  1c40              ADDS     r0,r0,#1              ;1319
0005da  2300              MOVS     r3,#0                 ;1317
0005dc  b280              UXTH     r0,r0                 ;1319
0005de  2a2c              CMP      r2,#0x2c              ;1319
0005e0  d10c              BNE      |L9.1532|
0005e2  2200              MOVS     r2,#0                 ;1321
                  |L9.1508|
0005e4  5c25              LDRB     r5,[r4,r0]            ;1323
0005e6  eb030383          ADD      r3,r3,r3,LSL #2       ;1323
0005ea  1c40              ADDS     r0,r0,#1              ;1323
0005ec  1c52              ADDS     r2,r2,#1              ;1323
0005ee  eb060343          ADD      r3,r6,r3,LSL #1       ;1323
0005f2  b2d2              UXTB     r2,r2                 ;1321
0005f4  442b              ADD      r3,r3,r5              ;1323
0005f6  b280              UXTH     r0,r0                 ;1323
0005f8  2a05              CMP      r2,#5                 ;1321
0005fa  d3f3              BCC      |L9.1508|
                  |L9.1532|
0005fc  674b              STR      r3,[r1,#0x74]         ;1326  ; Para
0005fe  5c22              LDRB     r2,[r4,r0]            ;1329
000600  1c40              ADDS     r0,r0,#1              ;1329
000602  2300              MOVS     r3,#0                 ;1327
000604  b280              UXTH     r0,r0                 ;1329
000606  2a2c              CMP      r2,#0x2c              ;1329
000608  d10c              BNE      |L9.1572|
00060a  2200              MOVS     r2,#0                 ;1331
                  |L9.1548|
00060c  5c25              LDRB     r5,[r4,r0]            ;1333
00060e  eb030383          ADD      r3,r3,r3,LSL #2       ;1333
000612  1c40              ADDS     r0,r0,#1              ;1333
000614  1c52              ADDS     r2,r2,#1              ;1333
000616  eb060343          ADD      r3,r6,r3,LSL #1       ;1333
00061a  b2d2              UXTB     r2,r2                 ;1331
00061c  442b              ADD      r3,r3,r5              ;1333
00061e  b280              UXTH     r0,r0                 ;1333
000620  2a03              CMP      r2,#3                 ;1331
000622  d3f3              BCC      |L9.1548|
                  |L9.1572|
000624  f8813078          STRB     r3,[r1,#0x78]         ;1336
000628  5c22              LDRB     r2,[r4,r0]            ;1339
00062a  1c40              ADDS     r0,r0,#1              ;1339
00062c  2300              MOVS     r3,#0                 ;1337
00062e  b280              UXTH     r0,r0                 ;1339
000630  2a2c              CMP      r2,#0x2c              ;1339
000632  d10c              BNE      |L9.1614|
000634  2200              MOVS     r2,#0                 ;1341
                  |L9.1590|
000636  5c25              LDRB     r5,[r4,r0]            ;1343
000638  eb030383          ADD      r3,r3,r3,LSL #2       ;1343
00063c  1c40              ADDS     r0,r0,#1              ;1343
00063e  1c52              ADDS     r2,r2,#1              ;1343
000640  eb060343          ADD      r3,r6,r3,LSL #1       ;1343
000644  b2d2              UXTB     r2,r2                 ;1341
000646  442b              ADD      r3,r3,r5              ;1343
000648  b280              UXTH     r0,r0                 ;1343
00064a  2a03              CMP      r2,#3                 ;1341
00064c  d3f3              BCC      |L9.1590|
                  |L9.1614|
00064e  f89b2005          LDRB     r2,[r11,#5]           ;1346  ; MODE
000652  465f              MOV      r7,r11                ;1346
000654  b902              CBNZ     r2,|L9.1624|
000656  618b              STR      r3,[r1,#0x18]         ;1348  ; Para
                  |L9.1624|
000658  5c22              LDRB     r2,[r4,r0]            ;1353
00065a  1c40              ADDS     r0,r0,#1              ;1353
00065c  2300              MOVS     r3,#0                 ;1350
00065e  b280              UXTH     r0,r0                 ;1353
000660  2a2c              CMP      r2,#0x2c              ;1353
000662  d10c              BNE      |L9.1662|
000664  2200              MOVS     r2,#0                 ;1355
                  |L9.1638|
000666  5c25              LDRB     r5,[r4,r0]            ;1357
000668  eb030383          ADD      r3,r3,r3,LSL #2       ;1357
00066c  1c40              ADDS     r0,r0,#1              ;1357
00066e  1c52              ADDS     r2,r2,#1              ;1357
000670  eb060343          ADD      r3,r6,r3,LSL #1       ;1357
000674  b2d2              UXTB     r2,r2                 ;1355
000676  442b              ADD      r3,r3,r5              ;1357
000678  b280              UXTH     r0,r0                 ;1357
00067a  2a03              CMP      r2,#3                 ;1355
00067c  d3f3              BCC      |L9.1638|
                  |L9.1662|
00067e  71fb              STRB     r3,[r7,#7]            ;1360
000680  5c23              LDRB     r3,[r4,r0]            ;1363
000682  1c40              ADDS     r0,r0,#1              ;1363
000684  2200              MOVS     r2,#0                 ;1361
000686  b285              UXTH     r5,r0                 ;1363
000688  2b2c              CMP      r3,#0x2c              ;1363
00068a  d10c              BNE      |L9.1702|
00068c  2000              MOVS     r0,#0                 ;1365
                  |L9.1678|
00068e  5d63              LDRB     r3,[r4,r5]            ;1367
000690  eb020282          ADD      r2,r2,r2,LSL #2       ;1367
000694  1c6d              ADDS     r5,r5,#1              ;1367
000696  1c40              ADDS     r0,r0,#1              ;1367
000698  eb060242          ADD      r2,r6,r2,LSL #1       ;1367
00069c  b2c0              UXTB     r0,r0                 ;1365
00069e  441a              ADD      r2,r2,r3              ;1367
0006a0  b2ad              UXTH     r5,r5                 ;1367
0006a2  2803              CMP      r0,#3                 ;1365
0006a4  d3f3              BCC      |L9.1678|
                  |L9.1702|
0006a6  f8812052          STRB     r2,[r1,#0x52]         ;1370
0006aa  7978              LDRB     r0,[r7,#5]            ;1373  ; MODE
                  |L9.1708|
0006ac  f7fffffe          BL       MODE_PARASET
                  |L9.1712|
0006b0  e623              B        |L9.762|
                  |L9.1714|
0006b2  5d61              LDRB     r1,[r4,r5]            ;1380
0006b4  293f              CMP      r1,#0x3f              ;1380
0006b6  d07d              BEQ      |L9.1972|
0006b8  2d0b              CMP      r5,#0xb               ;1389
0006ba  d10d              BNE      |L9.1752|
0006bc  2000              MOVS     r0,#0                 ;1391
0006be  4607              MOV      r7,r0                 ;1391
                  |L9.1728|
0006c0  5d61              LDRB     r1,[r4,r5]            ;1393
0006c2  eb070287          ADD      r2,r7,r7,LSL #2       ;1393
0006c6  eb060242          ADD      r2,r6,r2,LSL #1       ;1393
0006ca  1c6d              ADDS     r5,r5,#1              ;1393
0006cc  1c40              ADDS     r0,r0,#1              ;1393
0006ce  188f              ADDS     r7,r1,r2              ;1393
0006d0  b2c0              UXTB     r0,r0                 ;1391
0006d2  b2ad              UXTH     r5,r5                 ;1393
0006d4  2802              CMP      r0,#2                 ;1391
0006d6  d3f3              BCC      |L9.1728|
                  |L9.1752|
0006d8  f88b7005          STRB     r7,[r11,#5]           ;1396
0006dc  f89b0005          LDRB     r0,[r11,#5]           ;1399  ; MODE
0006e0  2700              MOVS     r7,#0                 ;1397
0006e2  f8df9474          LDR      r9,|L9.2904|
0006e6  f6446120          MOV      r1,#0x4e20            ;1422
0006ea  b1b0              CBZ      r0,|L9.1818|
0006ec  f89b0005          LDRB     r0,[r11,#5]           ;1443  ; MODE
0006f0  465a              MOV      r2,r11                ;1443
0006f2  2801              CMP      r0,#1                 ;1443
0006f4  d065              BEQ      |L9.1986|
0006f6  7950              LDRB     r0,[r2,#5]            ;1472  ; MODE
0006f8  2802              CMP      r0,#2                 ;1472
0006fa  d07d              BEQ      |L9.2040|
0006fc  f89b0005          LDRB     r0,[r11,#5]           ;1508  ; MODE
000700  2803              CMP      r0,#3                 ;1508
000702  d07a              BEQ      |L9.2042|
000704  7950              LDRB     r0,[r2,#5]            ;1540  ; MODE
000706  2804              CMP      r0,#4                 ;1540
000708  d078              BEQ      |L9.2044|
00070a  f89b0005          LDRB     r0,[r11,#5]           ;1583  ; MODE
00070e  2805              CMP      r0,#5                 ;1583
000710  d075              BEQ      |L9.2046|
000712  7950              LDRB     r0,[r2,#5]            ;1614  ; MODE
000714  2806              CMP      r0,#6                 ;1614
000716  d073              BEQ      |L9.2048|
                  |L9.1816|
000718  e1dd              B        |L9.2774|
                  |L9.1818|
00071a  5d62              LDRB     r2,[r4,r5]            ;1401
00071c  1c6d              ADDS     r5,r5,#1              ;1401
00071e  b2a8              UXTH     r0,r5                 ;1401
000720  2a2c              CMP      r2,#0x2c              ;1401
000722  d106              BNE      |L9.1842|
000724  2200              MOVS     r2,#0                 ;1403
                  |L9.1830|
000726  1c40              ADDS     r0,r0,#1              ;1403
000728  1c52              ADDS     r2,r2,#1              ;1405
00072a  b2d2              UXTB     r2,r2                 ;1403
00072c  b280              UXTH     r0,r0                 ;1405
00072e  2a05              CMP      r2,#5                 ;1403
000730  d3f9              BCC      |L9.1830|
                  |L9.1842|
000732  5c23              LDRB     r3,[r4,r0]            ;1411
000734  1c40              ADDS     r0,r0,#1              ;1411
000736  2200              MOVS     r2,#0                 ;1409
000738  b285              UXTH     r5,r0                 ;1411
00073a  2b2c              CMP      r3,#0x2c              ;1411
00073c  d10c              BNE      |L9.1880|
00073e  2000              MOVS     r0,#0                 ;1413
                  |L9.1856|
000740  5d63              LDRB     r3,[r4,r5]            ;1415
000742  eb020282          ADD      r2,r2,r2,LSL #2       ;1415
000746  1c6d              ADDS     r5,r5,#1              ;1415
000748  1c40              ADDS     r0,r0,#1              ;1415
00074a  eb060242          ADD      r2,r6,r2,LSL #1       ;1415
00074e  b2c0              UXTB     r0,r0                 ;1413
000750  441a              ADD      r2,r2,r3              ;1415
000752  b2ad              UXTH     r5,r5                 ;1415
000754  2805              CMP      r0,#5                 ;1413
000756  d3f3              BCC      |L9.1856|
                  |L9.1880|
000758  f8ca2014          STR      r2,[r10,#0x14]        ;1418  ; Para
00075c  f8da0014          LDR      r0,[r10,#0x14]        ;1422  ; Para
000760  2700              MOVS     r7,#0                 ;1419
000762  4288              CMP      r0,r1                 ;1422
000764  d907              BLS      |L9.1910|
000766  2001              MOVS     r0,#1                 ;1424
000768  f8c90020          STR      r0,[r9,#0x20]         ;1424  ; Run_Control
00076c  02c1              LSLS     r1,r0,#11             ;1425
00076e  48fb              LDR      r0,|L9.2908|
000770  f7fffffe          BL       GPIO_ResetBits
000774  e007              B        |L9.1926|
                  |L9.1910|
000776  2000              MOVS     r0,#0                 ;1427
000778  f8c90020          STR      r0,[r9,#0x20]         ;1427  ; Run_Control
00077c  f44f6100          MOV      r1,#0x800             ;1428
000780  48f6              LDR      r0,|L9.2908|
000782  f7fffffe          BL       GPIO_SetBits
                  |L9.1926|
000786  5d60              LDRB     r0,[r4,r5]            ;1430
000788  1c6d              ADDS     r5,r5,#1              ;1430
00078a  b2ad              UXTH     r5,r5                 ;1430
00078c  282c              CMP      r0,#0x2c              ;1430
00078e  d10c              BNE      |L9.1962|
000790  2000              MOVS     r0,#0                 ;1432
                  |L9.1938|
000792  5d61              LDRB     r1,[r4,r5]            ;1434
000794  eb070287          ADD      r2,r7,r7,LSL #2       ;1434
000798  eb060242          ADD      r2,r6,r2,LSL #1       ;1434
00079c  1c6d              ADDS     r5,r5,#1              ;1434
00079e  188f              ADDS     r7,r1,r2              ;1434
0007a0  1c40              ADDS     r0,r0,#1              ;1434
0007a2  b2ad              UXTH     r5,r5                 ;1434
0007a4  f01000ff          ANDS     r0,r0,#0xff           ;1432
0007a8  d0f3              BEQ      |L9.1938|
                  |L9.1962|
0007aa  f88b7006          STRB     r7,[r11,#6]           ;1437
0007ae  f89b0006          LDRB     r0,[r11,#6]           ;1438  ; mainswitch
0007b2  e000              B        |L9.1974|
                  |L9.1972|
0007b4  e214              B        |L9.3040|
                  |L9.1974|
0007b6  2800              CMP      r0,#0                 ;1438
0007b8  d1ae              BNE      |L9.1816|
0007ba  2001              MOVS     r0,#1                 ;1440
0007bc  f8c90020          STR      r0,[r9,#0x20]         ;1440  ; Run_Control
0007c0  e11f              B        |L9.2562|
                  |L9.1986|
0007c2  5d61              LDRB     r1,[r4,r5]            ;1444
0007c4  1c6d              ADDS     r5,r5,#1              ;1444
0007c6  b2a8              UXTH     r0,r5                 ;1444
0007c8  292c              CMP      r1,#0x2c              ;1444
0007ca  d10c              BNE      |L9.2022|
0007cc  2100              MOVS     r1,#0                 ;1446
                  |L9.1998|
0007ce  5c23              LDRB     r3,[r4,r0]            ;1448
0007d0  eb070587          ADD      r5,r7,r7,LSL #2       ;1448
0007d4  eb060545          ADD      r5,r6,r5,LSL #1       ;1448
0007d8  1c40              ADDS     r0,r0,#1              ;1448
0007da  1c49              ADDS     r1,r1,#1              ;1448
0007dc  195f              ADDS     r7,r3,r5              ;1448
0007de  b2c9              UXTB     r1,r1                 ;1446
0007e0  b280              UXTH     r0,r0                 ;1448
0007e2  2905              CMP      r1,#5                 ;1446
0007e4  d3f3              BCC      |L9.1998|
                  |L9.2022|
0007e6  4655              MOV      r5,r10                ;1451
0007e8  f8aa7064          STRH     r7,[r10,#0x64]        ;1451
0007ec  5c21              LDRB     r1,[r4,r0]            ;1454
0007ee  1c40              ADDS     r0,r0,#1              ;1454
0007f0  2300              MOVS     r3,#0                 ;1452
0007f2  b280              UXTH     r0,r0                 ;1454
0007f4  292c              CMP      r1,#0x2c              ;1454
0007f6  e004              B        |L9.2050|
                  |L9.2040|
0007f8  e027              B        |L9.2122|
                  |L9.2042|
0007fa  e074              B        |L9.2278|
                  |L9.2044|
0007fc  e0b1              B        |L9.2402|
                  |L9.2046|
0007fe  e106              B        |L9.2574|
                  |L9.2048|
000800  e136              B        |L9.2672|
                  |L9.2050|
000802  d10c              BNE      |L9.2078|
000804  2100              MOVS     r1,#0                 ;1456
                  |L9.2054|
000806  5c27              LDRB     r7,[r4,r0]            ;1458
000808  eb030383          ADD      r3,r3,r3,LSL #2       ;1458
00080c  1c40              ADDS     r0,r0,#1              ;1458
00080e  1c49              ADDS     r1,r1,#1              ;1458
000810  eb060343          ADD      r3,r6,r3,LSL #1       ;1458
000814  b2c9              UXTB     r1,r1                 ;1456
000816  443b              ADD      r3,r3,r7              ;1458
000818  b280              UXTH     r0,r0                 ;1458
00081a  2905              CMP      r1,#5                 ;1456
00081c  d3f3              BCC      |L9.2054|
                  |L9.2078|
00081e  f8a53066          STRH     r3,[r5,#0x66]         ;1461
000822  5c23              LDRB     r3,[r4,r0]            ;1464
000824  1c40              ADDS     r0,r0,#1              ;1464
000826  2100              MOVS     r1,#0                 ;1462
000828  b285              UXTH     r5,r0                 ;1464
00082a  2b2c              CMP      r3,#0x2c              ;1464
00082c  d10c              BNE      |L9.2120|
00082e  2000              MOVS     r0,#0                 ;1466
                  |L9.2096|
000830  5d63              LDRB     r3,[r4,r5]            ;1468
000832  1c6d              ADDS     r5,r5,#1              ;1468
000834  eb010181          ADD      r1,r1,r1,LSL #2       ;1468
000838  eb060141          ADD      r1,r6,r1,LSL #1       ;1468
00083c  1c40              ADDS     r0,r0,#1              ;1468
00083e  4419              ADD      r1,r1,r3              ;1468
000840  b2ad              UXTH     r5,r5                 ;1468
000842  f01000ff          ANDS     r0,r0,#0xff           ;1466
000846  d0f3              BEQ      |L9.2096|
                  |L9.2120|
000848  e144              B        |L9.2772|
                  |L9.2122|
00084a  2001              MOVS     r0,#1                 ;1473
00084c  f8c90020          STR      r0,[r9,#0x20]         ;1473  ; Run_Control
000850  02c1              LSLS     r1,r0,#11             ;1474
000852  48c2              LDR      r0,|L9.2908|
000854  f7fffffe          BL       GPIO_ResetBits
000858  5d61              LDRB     r1,[r4,r5]            ;1475
00085a  1c6d              ADDS     r5,r5,#1              ;1475
00085c  b2a8              UXTH     r0,r5                 ;1475
00085e  292c              CMP      r1,#0x2c              ;1475
000860  d10c              BNE      |L9.2172|
000862  2100              MOVS     r1,#0                 ;1477
                  |L9.2148|
000864  5c22              LDRB     r2,[r4,r0]            ;1479
000866  eb070387          ADD      r3,r7,r7,LSL #2       ;1479
00086a  eb060343          ADD      r3,r6,r3,LSL #1       ;1479
00086e  1c40              ADDS     r0,r0,#1              ;1479
000870  1c49              ADDS     r1,r1,#1              ;1479
000872  18d7              ADDS     r7,r2,r3              ;1479
000874  b2c9              UXTB     r1,r1                 ;1477
000876  b280              UXTH     r0,r0                 ;1479
000878  2905              CMP      r1,#5                 ;1477
00087a  d3f3              BCC      |L9.2148|
                  |L9.2172|
00087c  4653              MOV      r3,r10                ;1482
00087e  f8ca7044          STR      r7,[r10,#0x44]        ;1482  ; Para
000882  5c21              LDRB     r1,[r4,r0]            ;1485
000884  1c40              ADDS     r0,r0,#1              ;1485
000886  2200              MOVS     r2,#0                 ;1483
000888  b280              UXTH     r0,r0                 ;1485
00088a  292c              CMP      r1,#0x2c              ;1485
00088c  d10c              BNE      |L9.2216|
00088e  2100              MOVS     r1,#0                 ;1487
                  |L9.2192|
000890  5c25              LDRB     r5,[r4,r0]            ;1489
000892  eb020282          ADD      r2,r2,r2,LSL #2       ;1489
000896  1c40              ADDS     r0,r0,#1              ;1489
000898  1c49              ADDS     r1,r1,#1              ;1489
00089a  eb060242          ADD      r2,r6,r2,LSL #1       ;1489
00089e  b2c9              UXTB     r1,r1                 ;1487
0008a0  442a              ADD      r2,r2,r5              ;1489
0008a2  b280              UXTH     r0,r0                 ;1489
0008a4  2905              CMP      r1,#5                 ;1487
0008a6  d3f3              BCC      |L9.2192|
                  |L9.2216|
0008a8  f8a32048          STRH     r2,[r3,#0x48]         ;1492
0008ac  5c22              LDRB     r2,[r4,r0]            ;1495
0008ae  1c40              ADDS     r0,r0,#1              ;1495
0008b0  2100              MOVS     r1,#0                 ;1493
0008b2  b285              UXTH     r5,r0                 ;1495
0008b4  2a2c              CMP      r2,#0x2c              ;1495
0008b6  d10c              BNE      |L9.2258|
0008b8  2000              MOVS     r0,#0                 ;1497
                  |L9.2234|
0008ba  5d62              LDRB     r2,[r4,r5]            ;1499
0008bc  1c6d              ADDS     r5,r5,#1              ;1499
0008be  eb010181          ADD      r1,r1,r1,LSL #2       ;1499
0008c2  eb060141          ADD      r1,r6,r1,LSL #1       ;1499
0008c6  1c40              ADDS     r0,r0,#1              ;1499
0008c8  4411              ADD      r1,r1,r2              ;1499
0008ca  b2ad              UXTH     r5,r5                 ;1499
0008cc  f01000ff          ANDS     r0,r0,#0xff           ;1497
0008d0  d0f3              BEQ      |L9.2234|
                  |L9.2258|
0008d2  f88b1006          STRB     r1,[r11,#6]           ;1502
0008d6  f89b0006          LDRB     r0,[r11,#6]           ;1504  ; mainswitch
0008da  2801              CMP      r0,#1                 ;1504
0008dc  d102              BNE      |L9.2276|
0008de  49a0              LDR      r1,|L9.2912|
0008e0  2000              MOVS     r0,#0                 ;1506
0008e2  7008              STRB     r0,[r1,#0]            ;1506
                  |L9.2276|
0008e4  e0f7              B        |L9.2774|
                  |L9.2278|
0008e6  5d61              LDRB     r1,[r4,r5]            ;1509
0008e8  1c6d              ADDS     r5,r5,#1              ;1509
0008ea  b2a8              UXTH     r0,r5                 ;1509
0008ec  292c              CMP      r1,#0x2c              ;1509
0008ee  d10c              BNE      |L9.2314|
0008f0  2100              MOVS     r1,#0                 ;1511
                  |L9.2290|
0008f2  5c23              LDRB     r3,[r4,r0]            ;1513
0008f4  eb070587          ADD      r5,r7,r7,LSL #2       ;1513
0008f8  eb060545          ADD      r5,r6,r5,LSL #1       ;1513
0008fc  1c40              ADDS     r0,r0,#1              ;1513
0008fe  1c49              ADDS     r1,r1,#1              ;1513
000900  195f              ADDS     r7,r3,r5              ;1513
000902  b2c9              UXTB     r1,r1                 ;1511
000904  b280              UXTH     r0,r0                 ;1513
000906  2905              CMP      r1,#5                 ;1511
000908  d3f3              BCC      |L9.2290|
                  |L9.2314|
00090a  4655              MOV      r5,r10                ;1516
00090c  f8aa7064          STRH     r7,[r10,#0x64]        ;1516
000910  5c21              LDRB     r1,[r4,r0]            ;1520
000912  1c40              ADDS     r0,r0,#1              ;1520
000914  2300              MOVS     r3,#0                 ;1517
000916  b280              UXTH     r0,r0                 ;1520
000918  292c              CMP      r1,#0x2c              ;1520
00091a  d10c              BNE      |L9.2358|
00091c  2100              MOVS     r1,#0                 ;1522
                  |L9.2334|
00091e  5c27              LDRB     r7,[r4,r0]            ;1524
000920  eb030383          ADD      r3,r3,r3,LSL #2       ;1524
000924  1c40              ADDS     r0,r0,#1              ;1524
000926  1c49              ADDS     r1,r1,#1              ;1524
000928  eb060343          ADD      r3,r6,r3,LSL #1       ;1524
00092c  b2c9              UXTB     r1,r1                 ;1522
00092e  443b              ADD      r3,r3,r7              ;1524
000930  b280              UXTH     r0,r0                 ;1524
000932  2905              CMP      r1,#5                 ;1522
000934  d3f3              BCC      |L9.2334|
                  |L9.2358|
000936  f8a53066          STRH     r3,[r5,#0x66]         ;1527
00093a  5c23              LDRB     r3,[r4,r0]            ;1530
00093c  1c40              ADDS     r0,r0,#1              ;1530
00093e  2100              MOVS     r1,#0                 ;1528
000940  b285              UXTH     r5,r0                 ;1530
000942  2b2c              CMP      r3,#0x2c              ;1530
000944  d10c              BNE      |L9.2400|
000946  2000              MOVS     r0,#0                 ;1532
                  |L9.2376|
000948  5d63              LDRB     r3,[r4,r5]            ;1534
00094a  1c6d              ADDS     r5,r5,#1              ;1534
00094c  eb010181          ADD      r1,r1,r1,LSL #2       ;1534
000950  eb060141          ADD      r1,r6,r1,LSL #1       ;1534
000954  1c40              ADDS     r0,r0,#1              ;1534
000956  4419              ADD      r1,r1,r3              ;1534
000958  b2ad              UXTH     r5,r5                 ;1534
00095a  f01000ff          ANDS     r0,r0,#0xff           ;1532
00095e  d0f3              BEQ      |L9.2376|
                  |L9.2400|
000960  e0b8              B        |L9.2772|
                  |L9.2402|
000962  5d62              LDRB     r2,[r4,r5]            ;1541
000964  1c6d              ADDS     r5,r5,#1              ;1541
000966  b2a8              UXTH     r0,r5                 ;1541
000968  2a2c              CMP      r2,#0x2c              ;1541
00096a  d106              BNE      |L9.2426|
00096c  2200              MOVS     r2,#0                 ;1543
                  |L9.2414|
00096e  1c40              ADDS     r0,r0,#1              ;1543
000970  1c52              ADDS     r2,r2,#1              ;1545
000972  b2d2              UXTB     r2,r2                 ;1543
000974  b280              UXTH     r0,r0                 ;1545
000976  2a05              CMP      r2,#5                 ;1543
000978  d3f9              BCC      |L9.2414|
                  |L9.2426|
00097a  5c23              LDRB     r3,[r4,r0]            ;1551
00097c  1c40              ADDS     r0,r0,#1              ;1551
00097e  2200              MOVS     r2,#0                 ;1549
000980  b285              UXTH     r5,r0                 ;1551
000982  2b2c              CMP      r3,#0x2c              ;1551
000984  d10c              BNE      |L9.2464|
000986  2000              MOVS     r0,#0                 ;1553
                  |L9.2440|
000988  5d63              LDRB     r3,[r4,r5]            ;1555
00098a  eb020282          ADD      r2,r2,r2,LSL #2       ;1555
00098e  1c6d              ADDS     r5,r5,#1              ;1555
000990  1c40              ADDS     r0,r0,#1              ;1555
000992  eb060242          ADD      r2,r6,r2,LSL #1       ;1555
000996  b2c0              UXTB     r0,r0                 ;1553
000998  441a              ADD      r2,r2,r3              ;1555
00099a  b2ad              UXTH     r5,r5                 ;1555
00099c  2805              CMP      r0,#5                 ;1553
00099e  d3f3              BCC      |L9.2440|
                  |L9.2464|
0009a0  f8ca2014          STR      r2,[r10,#0x14]        ;1558  ; Para
0009a4  f8da0014          LDR      r0,[r10,#0x14]        ;1562  ; Para
0009a8  2700              MOVS     r7,#0                 ;1559
0009aa  4288              CMP      r0,r1                 ;1562
0009ac  d907              BLS      |L9.2494|
0009ae  2001              MOVS     r0,#1                 ;1564
0009b0  f8c90020          STR      r0,[r9,#0x20]         ;1564  ; Run_Control
0009b4  02c1              LSLS     r1,r0,#11             ;1565
0009b6  4869              LDR      r0,|L9.2908|
0009b8  f7fffffe          BL       GPIO_ResetBits
0009bc  e007              B        |L9.2510|
                  |L9.2494|
0009be  2000              MOVS     r0,#0                 ;1567
0009c0  f8c90020          STR      r0,[r9,#0x20]         ;1567  ; Run_Control
0009c4  f44f6100          MOV      r1,#0x800             ;1568
0009c8  4864              LDR      r0,|L9.2908|
0009ca  f7fffffe          BL       GPIO_SetBits
                  |L9.2510|
0009ce  5d60              LDRB     r0,[r4,r5]            ;1570
0009d0  1c6d              ADDS     r5,r5,#1              ;1570
0009d2  b2ad              UXTH     r5,r5                 ;1570
0009d4  282c              CMP      r0,#0x2c              ;1570
0009d6  d10c              BNE      |L9.2546|
0009d8  2000              MOVS     r0,#0                 ;1572
                  |L9.2522|
0009da  5d61              LDRB     r1,[r4,r5]            ;1574
0009dc  eb070287          ADD      r2,r7,r7,LSL #2       ;1574
0009e0  eb060242          ADD      r2,r6,r2,LSL #1       ;1574
0009e4  1c6d              ADDS     r5,r5,#1              ;1574
0009e6  188f              ADDS     r7,r1,r2              ;1574
0009e8  1c40              ADDS     r0,r0,#1              ;1574
0009ea  b2ad              UXTH     r5,r5                 ;1574
0009ec  f01000ff          ANDS     r0,r0,#0xff           ;1572
0009f0  d0f3              BEQ      |L9.2522|
                  |L9.2546|
0009f2  f88b7006          STRB     r7,[r11,#6]           ;1577
0009f6  f89b0006          LDRB     r0,[r11,#6]           ;1578  ; mainswitch
0009fa  bbc0              CBNZ     r0,|L9.2670|
0009fc  2101              MOVS     r1,#1                 ;1580
0009fe  f8c91020          STR      r1,[r9,#0x20]         ;1580  ; Run_Control
                  |L9.2562|
000a02  f44f6100          MOV      r1,#0x800             ;1581
000a06  4855              LDR      r0,|L9.2908|
000a08  f7fffffe          BL       GPIO_ResetBits
000a0c  e063              B        |L9.2774|
                  |L9.2574|
000a0e  5d61              LDRB     r1,[r4,r5]            ;1584
000a10  1c6d              ADDS     r5,r5,#1              ;1584
000a12  b2a8              UXTH     r0,r5                 ;1584
000a14  292c              CMP      r1,#0x2c              ;1584
000a16  d106              BNE      |L9.2598|
000a18  2100              MOVS     r1,#0                 ;1586
                  |L9.2586|
000a1a  1c40              ADDS     r0,r0,#1              ;1586
000a1c  1c49              ADDS     r1,r1,#1              ;1588
000a1e  b2c9              UXTB     r1,r1                 ;1586
000a20  b280              UXTH     r0,r0                 ;1588
000a22  2905              CMP      r1,#5                 ;1586
000a24  d3f9              BCC      |L9.2586|
                  |L9.2598|
000a26  5c21              LDRB     r1,[r4,r0]            ;1593
000a28  1c40              ADDS     r0,r0,#1              ;1593
000a2a  b280              UXTH     r0,r0                 ;1593
000a2c  292c              CMP      r1,#0x2c              ;1593
000a2e  d106              BNE      |L9.2622|
000a30  2100              MOVS     r1,#0                 ;1595
                  |L9.2610|
000a32  1c40              ADDS     r0,r0,#1              ;1595
000a34  1c49              ADDS     r1,r1,#1              ;1597
000a36  b2c9              UXTB     r1,r1                 ;1595
000a38  b280              UXTH     r0,r0                 ;1597
000a3a  2905              CMP      r1,#5                 ;1595
000a3c  d3f9              BCC      |L9.2610|
                  |L9.2622|
000a3e  5c23              LDRB     r3,[r4,r0]            ;1602
000a40  1c40              ADDS     r0,r0,#1              ;1602
000a42  2100              MOVS     r1,#0                 ;1600
000a44  b285              UXTH     r5,r0                 ;1602
000a46  2b2c              CMP      r3,#0x2c              ;1602
000a48  d10c              BNE      |L9.2660|
000a4a  2000              MOVS     r0,#0                 ;1604
                  |L9.2636|
000a4c  5d63              LDRB     r3,[r4,r5]            ;1606
000a4e  1c6d              ADDS     r5,r5,#1              ;1606
000a50  eb010181          ADD      r1,r1,r1,LSL #2       ;1606
000a54  eb060141          ADD      r1,r6,r1,LSL #1       ;1606
000a58  1c40              ADDS     r0,r0,#1              ;1606
000a5a  4419              ADD      r1,r1,r3              ;1606
000a5c  b2ad              UXTH     r5,r5                 ;1606
000a5e  f01000ff          ANDS     r0,r0,#0xff           ;1604
000a62  d0f3              BEQ      |L9.2636|
                  |L9.2660|
000a64  7191              STRB     r1,[r2,#6]            ;1609
000a66  7990              LDRB     r0,[r2,#6]            ;1610  ; mainswitch
000a68  b908              CBNZ     r0,|L9.2670|
000a6a  2000              MOVS     r0,#0                 ;1612
000a6c  7190              STRB     r0,[r2,#6]            ;1612
                  |L9.2670|
000a6e  e032              B        |L9.2774|
                  |L9.2672|
000a70  5d61              LDRB     r1,[r4,r5]            ;1615
000a72  1c6d              ADDS     r5,r5,#1              ;1615
000a74  b2a8              UXTH     r0,r5                 ;1615
000a76  292c              CMP      r1,#0x2c              ;1615
000a78  d106              BNE      |L9.2696|
000a7a  2100              MOVS     r1,#0                 ;1617
                  |L9.2684|
000a7c  1c40              ADDS     r0,r0,#1              ;1617
000a7e  1c49              ADDS     r1,r1,#1              ;1619
000a80  b2c9              UXTB     r1,r1                 ;1617
000a82  b280              UXTH     r0,r0                 ;1619
000a84  2905              CMP      r1,#5                 ;1617
000a86  d3f9              BCC      |L9.2684|
                  |L9.2696|
000a88  5c21              LDRB     r1,[r4,r0]            ;1624
000a8a  1c40              ADDS     r0,r0,#1              ;1624
000a8c  b280              UXTH     r0,r0                 ;1624
000a8e  292c              CMP      r1,#0x2c              ;1624
000a90  d10d              BNE      |L9.2734|
000a92  2100              MOVS     r1,#0                 ;1626
                  |L9.2708|
000a94  1c40              ADDS     r0,r0,#1              ;1626
000a96  e005              B        |L9.2724|
                  |L9.2712|
000a98  e124              B        |L9.3300|
                  |L9.2714|
000a9a  e143              B        |L9.3364|
                  |L9.2716|
000a9c  e0e9              B        |L9.3186|
                  |L9.2718|
000a9e  e0a6              B        |L9.3054|
                  |L9.2720|
000aa0  e022              B        |L9.2792|
                  |L9.2722|
000aa2  e085              B        |L9.2992|
                  |L9.2724|
000aa4  1c49              ADDS     r1,r1,#1              ;1628
000aa6  b2c9              UXTB     r1,r1                 ;1626
000aa8  b280              UXTH     r0,r0                 ;1628
000aaa  2905              CMP      r1,#5                 ;1626
000aac  d3f2              BCC      |L9.2708|
                  |L9.2734|
000aae  5c23              LDRB     r3,[r4,r0]            ;1633
000ab0  1c40              ADDS     r0,r0,#1              ;1633
000ab2  2100              MOVS     r1,#0                 ;1631
000ab4  b285              UXTH     r5,r0                 ;1633
000ab6  2b2c              CMP      r3,#0x2c              ;1633
000ab8  d10c              BNE      |L9.2772|
000aba  2000              MOVS     r0,#0                 ;1635
                  |L9.2748|
000abc  5d63              LDRB     r3,[r4,r5]            ;1637
000abe  1c6d              ADDS     r5,r5,#1              ;1637
000ac0  eb010181          ADD      r1,r1,r1,LSL #2       ;1637
000ac4  eb060141          ADD      r1,r6,r1,LSL #1       ;1637
000ac8  1c40              ADDS     r0,r0,#1              ;1637
000aca  4419              ADD      r1,r1,r3              ;1637
000acc  b2ad              UXTH     r5,r5                 ;1637
000ace  f01000ff          ANDS     r0,r0,#0xff           ;1635
000ad2  d0f3              BEQ      |L9.2748|
                  |L9.2772|
000ad4  7191              STRB     r1,[r2,#6]            ;1640
                  |L9.2774|
000ad6  f7fffffe          BL       Off_GPOI_ResetSet
000ada  f89b0006          LDRB     r0,[r11,#6]           ;1646  ; mainswitch
000ade  f7fffffe          BL       LIST_ONOFF
000ae2  e40a              B        |L9.762|
                  |L9.2788|
000ae4  e0fb              B        |L9.3294|
                  |L9.2790|
000ae6  e13c              B        |L9.3426|
                  |L9.2792|
000ae8  5d60              LDRB     r0,[r4,r5]            ;1653
000aea  2308              MOVS     r3,#8                 ;1652
000aec  283f              CMP      r0,#0x3f              ;1653
000aee  d019              BEQ      |L9.2852|
000af0  2201              MOVS     r2,#1                 ;1662
000af2  2100              MOVS     r1,#0                 ;1663
                  |L9.2804|
000af4  b141              CBZ      r1,|L9.2824|
000af6  2904              CMP      r1,#4                 ;1665
000af8  d006              BEQ      |L9.2824|
000afa  1868              ADDS     r0,r5,r1              ;1667
000afc  5c20              LDRB     r0,[r4,r0]            ;1667
000afe  f7fffffe          BL       IsDigitChar
000b02  2801              CMP      r0,#1                 ;1667
000b04  d032              BEQ      |L9.2924|
000b06  2200              MOVS     r2,#0                 ;1673
                  |L9.2824|
000b08  1c49              ADDS     r1,r1,#1              ;1673
000b0a  b2c9              UXTB     r1,r1                 ;1663
000b0c  4299              CMP      r1,r3                 ;1663
000b0e  d3f1              BCC      |L9.2804|
000b10  2a01              CMP      r2,#1                 ;1676
                  |L9.2834|
000b12  f47faa8e          BNE      |L9.50|
000b16  18e8              ADDS     r0,r5,r3              ;1676
000b18  5c20              LDRB     r0,[r4,r0]            ;1676
000b1a  280d              CMP      r0,#0xd               ;1676
000b1c  d1f9              BNE      |L9.2834|
000b1e  2200              MOVS     r2,#0                 ;1681
000b20  4610              MOV      r0,r2                 ;1682
000b22  e03c              B        |L9.2974|
                  |L9.2852|
000b24  eeb58ac0          VCMPE.F32 s16,#0.0              ;1655
000b28  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1655
000b2c  db01              BLT      |L9.2866|
000b2e  202b              MOVS     r0,#0x2b              ;1655
000b30  e000              B        |L9.2868|
                  |L9.2866|
000b32  202d              MOVS     r0,#0x2d              ;1655
                  |L9.2868|
000b34  5560              STRB     r0,[r4,r5]            ;1655
000b36  1c6d              ADDS     r5,r5,#1              ;1655
000b38  b2ad              UXTH     r5,r5                 ;1655
000b3a  ee180a10          VMOV     r0,s16                ;1656
000b3e  f7fffffe          BL       __aeabi_f2d
000b42  ec410b10          VMOV     d0,r0,r1              ;1656
000b46  1960              ADDS     r0,r4,r5              ;1656
000b48  ec532b10          VMOV     r2,r3,d0              ;1656
000b4c  a105              ADR      r1,|L9.2916|
000b4e  f7fffffe          BL       __2sprintf
000b52  3508              ADDS     r5,r5,#8              ;1656
000b54  e0c3              B        |L9.3294|
000b56  0000              DCW      0x0000
                  |L9.2904|
                          DCD      Run_Control
                  |L9.2908|
                          DCD      0x40020800
                  |L9.2912|
                          DCD      finishflag
                  |L9.2916|
000b64  2530332e          DCB      "%03.3f",0
000b68  336600  
000b6b  00                DCB      0
                  |L9.2924|
000b6c  f0020201          AND      r2,r2,#1              ;1669
000b70  e7ca              B        |L9.2824|
                  |L9.2930|
000b72  b150              CBZ      r0,|L9.2954|
000b74  2804              CMP      r0,#4                 ;1689
000b76  d005              BEQ      |L9.2948|
000b78  5d61              LDRB     r1,[r4,r5]            ;1695
000b7a  eb020282          ADD      r2,r2,r2,LSL #2       ;1695
000b7e  eb060242          ADD      r2,r6,r2,LSL #1       ;1695
000b82  440a              ADD      r2,r2,r1              ;1695
                  |L9.2948|
000b84  1c6d              ADDS     r5,r5,#1              ;1695
000b86  b2ad              UXTH     r5,r5                 ;1691
000b88  e007              B        |L9.2970|
                  |L9.2954|
000b8a  5d61              LDRB     r1,[r4,r5]            ;1686
000b8c  1c6d              ADDS     r5,r5,#1              ;1686
000b8e  3930              SUBS     r1,r1,#0x30           ;1686
000b90  ee001a10          VMOV     s0,r1                 ;1686
000b94  b2ad              UXTH     r5,r5                 ;1686
000b96  eeb88ac0          VCVT.F32.S32 s16,s0                ;1686
                  |L9.2970|
000b9a  1c40              ADDS     r0,r0,#1              ;1686
000b9c  b2c0              UXTB     r0,r0                 ;1682
                  |L9.2974|
000b9e  4298              CMP      r0,r3                 ;1682
000ba0  d3e7              BCC      |L9.2930|
000ba2  eebc0ac8          VCVT.U32.F32 s0,s16                ;1697
000ba6  ee100a10          VMOV     r0,s0                 ;1697
000baa  b2c1              UXTB     r1,r0                 ;1697
000bac  2000              MOVS     r0,#0                 ;1697
000bae  e05d              B        |L9.3180|
                  |L9.2992|
000bb0  5d61              LDRB     r1,[r4,r5]            ;1703
000bb2  2201              MOVS     r2,#1                 ;1702
000bb4  293f              CMP      r1,#0x3f              ;1703
000bb6  d013              BEQ      |L9.3040|
000bb8  2100              MOVS     r1,#0                 ;1713
000bba  4608              MOV      r0,r1                 ;1713
                  |L9.3004|
000bbc  5d63              LDRB     r3,[r4,r5]            ;1715
000bbe  eb000080          ADD      r0,r0,r0,LSL #2       ;1715
000bc2  1c6d              ADDS     r5,r5,#1              ;1715
000bc4  1c49              ADDS     r1,r1,#1              ;1715
000bc6  eb060040          ADD      r0,r6,r0,LSL #1       ;1715
000bca  b2c9              UXTB     r1,r1                 ;1713
000bcc  4418              ADD      r0,r0,r3              ;1715
000bce  b2ad              UXTH     r5,r5                 ;1715
000bd0  4291              CMP      r1,r2                 ;1713
000bd2  d3f3              BCC      |L9.3004|
000bd4  2801              CMP      r0,#1                 ;1717
000bd6  f63fab7c          BHI      |L9.722|
000bda  4967              LDR      r1,|L9.3448|
000bdc  7008              STRB     r0,[r1,#0]            ;1724
000bde  e567              B        |L9.1712|
                  |L9.3040|
000be0  7802              LDRB     r2,[r0,#0]            ;1705  ; C_DISCHARGE
000be2  1963              ADDS     r3,r4,r5              ;1705
000be4  f2af7170          ADR      r1,|L9.1144|
000be8  4618              MOV      r0,r3                 ;1705
000bea  f7ffbb7c          B        |L9.742|
                  |L9.3054|
000bee  5d60              LDRB     r0,[r4,r5]            ;1737
000bf0  2308              MOVS     r3,#8                 ;1736
000bf2  283f              CMP      r0,#0x3f              ;1737
000bf4  d076              BEQ      |L9.3300|
000bf6  2201              MOVS     r2,#1                 ;1746
000bf8  2100              MOVS     r1,#0                 ;1747
                  |L9.3066|
000bfa  b141              CBZ      r1,|L9.3086|
000bfc  2904              CMP      r1,#4                 ;1749
000bfe  d006              BEQ      |L9.3086|
000c00  1868              ADDS     r0,r5,r1              ;1751
000c02  5c20              LDRB     r0,[r4,r0]            ;1751
000c04  f7fffffe          BL       IsDigitChar
000c08  2801              CMP      r0,#1                 ;1751
000c0a  d00e              BEQ      |L9.3114|
000c0c  2200              MOVS     r2,#0                 ;1757
                  |L9.3086|
000c0e  1c49              ADDS     r1,r1,#1              ;1757
000c10  b2c9              UXTB     r1,r1                 ;1747
000c12  4299              CMP      r1,r3                 ;1747
000c14  d3f1              BCC      |L9.3066|
000c16  2a01              CMP      r2,#1                 ;1760
                  |L9.3096|
000c18  f47faa0b          BNE      |L9.50|
000c1c  18e8              ADDS     r0,r5,r3              ;1760
000c1e  5c20              LDRB     r0,[r4,r0]            ;1760
000c20  280d              CMP      r0,#0xd               ;1760
000c22  d1f9              BNE      |L9.3096|
000c24  2200              MOVS     r2,#0                 ;1765
000c26  4610              MOV      r0,r2                 ;1766
000c28  e018              B        |L9.3164|
                  |L9.3114|
000c2a  f0020201          AND      r2,r2,#1              ;1753
000c2e  e7ee              B        |L9.3086|
                  |L9.3120|
000c30  b150              CBZ      r0,|L9.3144|
000c32  2804              CMP      r0,#4                 ;1773
000c34  d005              BEQ      |L9.3138|
000c36  5d61              LDRB     r1,[r4,r5]            ;1779
000c38  eb020282          ADD      r2,r2,r2,LSL #2       ;1779
000c3c  eb060242          ADD      r2,r6,r2,LSL #1       ;1779
000c40  440a              ADD      r2,r2,r1              ;1779
                  |L9.3138|
000c42  1c6d              ADDS     r5,r5,#1              ;1779
000c44  b2ad              UXTH     r5,r5                 ;1775
000c46  e007              B        |L9.3160|
                  |L9.3144|
000c48  5d61              LDRB     r1,[r4,r5]            ;1770
000c4a  1c6d              ADDS     r5,r5,#1              ;1770
000c4c  3930              SUBS     r1,r1,#0x30           ;1770
000c4e  ee001a10          VMOV     s0,r1                 ;1770
000c52  b2ad              UXTH     r5,r5                 ;1770
000c54  eeb88ac0          VCVT.F32.S32 s16,s0                ;1770
                  |L9.3160|
000c58  1c40              ADDS     r0,r0,#1              ;1770
000c5a  b2c0              UXTB     r0,r0                 ;1766
                  |L9.3164|
000c5c  4298              CMP      r0,r3                 ;1766
000c5e  d3e7              BCC      |L9.3120|
000c60  eebc0ac8          VCVT.U32.F32 s0,s16                ;1781
000c64  ee100a10          VMOV     r0,s0                 ;1781
000c68  b2c1              UXTB     r1,r0                 ;1781
000c6a  2001              MOVS     r0,#1                 ;1781
                  |L9.3180|
000c6c  f7fffffe          BL       CalHandle
000c70  e077              B        |L9.3426|
                  |L9.3186|
000c72  5d60              LDRB     r0,[r4,r5]            ;1788
000c74  2306              MOVS     r3,#6                 ;1787
000c76  283f              CMP      r0,#0x3f              ;1788
000c78  d018              BEQ      |L9.3244|
000c7a  2201              MOVS     r2,#1                 ;1797
000c7c  2100              MOVS     r1,#0                 ;1798
                  |L9.3198|
000c7e  b141              CBZ      r1,|L9.3218|
000c80  2904              CMP      r1,#4                 ;1800
000c82  d006              BEQ      |L9.3218|
000c84  1868              ADDS     r0,r5,r1              ;1802
000c86  5c20              LDRB     r0,[r4,r0]            ;1802
000c88  f7fffffe          BL       IsDigitChar
000c8c  2801              CMP      r0,#1                 ;1802
000c8e  d02a              BEQ      |L9.3302|
000c90  2200              MOVS     r2,#0                 ;1808
                  |L9.3218|
000c92  1c49              ADDS     r1,r1,#1              ;1808
000c94  b2c9              UXTB     r1,r1                 ;1798
000c96  4299              CMP      r1,r3                 ;1798
000c98  d3f1              BCC      |L9.3198|
000c9a  2a01              CMP      r2,#1                 ;1811
000c9c  d1bc              BNE      |L9.3096|
000c9e  18e8              ADDS     r0,r5,r3              ;1811
000ca0  5c20              LDRB     r0,[r4,r0]            ;1811
000ca2  280d              CMP      r0,#0xd               ;1811
000ca4  d1b8              BNE      |L9.3096|
000ca6  2200              MOVS     r2,#0                 ;1816
000ca8  4610              MOV      r0,r2                 ;1817
000caa  e02a              B        |L9.3330|
                  |L9.3244|
000cac  eeb58ac0          VCMPE.F32 s16,#0.0              ;1790
000cb0  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1790
000cb4  db01              BLT      |L9.3258|
000cb6  202b              MOVS     r0,#0x2b              ;1790
000cb8  e000              B        |L9.3260|
                  |L9.3258|
000cba  202d              MOVS     r0,#0x2d              ;1790
                  |L9.3260|
000cbc  5560              STRB     r0,[r4,r5]            ;1790
000cbe  1c6d              ADDS     r5,r5,#1              ;1790
000cc0  b2ad              UXTH     r5,r5                 ;1790
000cc2  ee180a10          VMOV     r0,s16                ;1791
000cc6  f7fffffe          BL       __aeabi_f2d
000cca  ec410b10          VMOV     d0,r0,r1              ;1791
000cce  1960              ADDS     r0,r4,r5              ;1791
000cd0  ec532b10          VMOV     r2,r3,d0              ;1791
000cd4  f2af1174          ADR      r1,|L9.2916|
000cd8  f7fffffe          BL       __2sprintf
000cdc  1dad              ADDS     r5,r5,#6              ;1791
                  |L9.3294|
000cde  b2a8              UXTH     r0,r5                 ;1792
000ce0  f7ffbad6          B        |L9.656|
                  |L9.3300|
000ce4  e041              B        |L9.3434|
                  |L9.3302|
000ce6  f0020201          AND      r2,r2,#1              ;1804
000cea  e7d2              B        |L9.3218|
                  |L9.3308|
000cec  5d61              LDRB     r1,[r4,r5]            ;1830
000cee  b188              CBZ      r0,|L9.3348|
000cf0  eb020282          ADD      r2,r2,r2,LSL #2       ;1830
000cf4  eb060242          ADD      r2,r6,r2,LSL #1       ;1830
000cf8  1c6d              ADDS     r5,r5,#1              ;1830
000cfa  440a              ADD      r2,r2,r1              ;1830
000cfc  b2ad              UXTH     r5,r5                 ;1830
                  |L9.3326|
000cfe  1c40              ADDS     r0,r0,#1              ;1830
000d00  b2c0              UXTB     r0,r0                 ;1817
                  |L9.3330|
000d02  4298              CMP      r0,r3                 ;1817
000d04  d3f2              BCC      |L9.3308|
000d06  eebc0ac8          VCVT.U32.F32 s0,s16                ;1832
000d0a  ee100a10          VMOV     r0,s0                 ;1832
000d0e  b2c1              UXTB     r1,r0                 ;1832
000d10  2002              MOVS     r0,#2                 ;1832
000d12  e7ab              B        |L9.3180|
                  |L9.3348|
000d14  1c6d              ADDS     r5,r5,#1              ;1832
000d16  3930              SUBS     r1,r1,#0x30           ;1821
000d18  ee001a10          VMOV     s0,r1                 ;1821
000d1c  b2ad              UXTH     r5,r5                 ;1821
000d1e  eeb88ac0          VCVT.F32.S32 s16,s0                ;1821
000d22  e7ec              B        |L9.3326|
                  |L9.3364|
000d24  5d60              LDRB     r0,[r4,r5]            ;1838
000d26  283f              CMP      r0,#0x3f              ;1838
000d28  d01f              BEQ      |L9.3434|
000d2a  2101              MOVS     r1,#1                 ;1847
000d2c  2000              MOVS     r0,#0                 ;1848
000d2e  4607              MOV      r7,r0                 ;1848
                  |L9.3376|
000d30  5d62              LDRB     r2,[r4,r5]            ;1850
000d32  eb070387          ADD      r3,r7,r7,LSL #2       ;1850
000d36  eb060343          ADD      r3,r6,r3,LSL #1       ;1850
000d3a  1c6d              ADDS     r5,r5,#1              ;1850
000d3c  1c40              ADDS     r0,r0,#1              ;1850
000d3e  18d7              ADDS     r7,r2,r3              ;1850
000d40  b2c0              UXTB     r0,r0                 ;1848
000d42  b2ad              UXTH     r5,r5                 ;1850
000d44  4288              CMP      r0,r1                 ;1848
000d46  d3f3              BCC      |L9.3376|
000d48  2f01              CMP      r7,#1                 ;1852
000d4a  f63faac2          BHI      |L9.722|
000d4e  490b              LDR      r1,|L9.3452|
000d50  2001              MOVS     r0,#1                 ;1858
000d52  7008              STRB     r0,[r1,#0]            ;1858
000d54  f7fffffe          BL       Write_Boot_Flag
000d58  2f01              CMP      r7,#1                 ;1860
000d5a  d102              BNE      |L9.3426|
000d5c  2037              MOVS     r0,#0x37              ;1862
000d5e  f7fffffe          BL       JumpBoot
                  |L9.3426|
000d62  f1b80f13          CMP      r8,#0x13              ;1982
000d66  f4bfa964          BCS      |L9.50|
                  |L9.3434|
000d6a  b033              ADD      sp,sp,#0xcc
000d6c  1c6d              ADDS     r5,r5,#1              ;1982
000d6e  ecbd8b02          VPOP     {d8}
000d72  b2a8              UXTH     r0,r5                 ;1986
000d74  e8bd8ff0          POP      {r4-r11,pc}
;;;1988   
                          ENDP

                  |L9.3448|
                          DCD      overflag
                  |L9.3452|
                          DCD      bootflag

                          AREA ||i.SetErr_ACK||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  SetErr_ACK PROC
;;;921    
;;;922    u16 SetErr_ACK(char *buf, u8 addr ,u8 ucErr)
000000  b5f8              PUSH     {r3-r7,lr}
;;;923    {
000002  4604              MOV      r4,r0
;;;924    		u16 i=0;
;;;925    		u8 len = 0;
;;;926    		char stradd[3] = {0};
000004  2000              MOVS     r0,#0
;;;927    		int addlen=0;
;;;928    		memset(buf,0,sizeof(buf));
000006  9000              STR      r0,[sp,#0]
000008  6020              STR      r0,[r4,#0]
00000a  4616              MOV      r6,r2                 ;923
;;;929        	buf[i++] = ChrStartS;
00000c  203e              MOVS     r0,#0x3e
00000e  7020              STRB     r0,[r4,#0]
;;;930    		sprintf(stradd,"%d",addr);
000010  460a              MOV      r2,r1
000012  a11a              ADR      r1,|L10.124|
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       __2sprintf
;;;931    		addlen=strlen(stradd);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       strlen
000020  4605              MOV      r5,r0
;;;932    		strncat(&buf[i],stradd,addlen);
000022  1c60              ADDS     r0,r4,#1
000024  462a              MOV      r2,r5
000026  4669              MOV      r1,sp
000028  f7fffffe          BL       strncat
00002c  1c6d              ADDS     r5,r5,#1
;;;933    		i+=addlen;
00002e  b2a8              UXTH     r0,r5
;;;934    		buf[i++] = '/';
000030  212f              MOVS     r1,#0x2f
000032  5421              STRB     r1,[r4,r0]
000034  1c40              ADDS     r0,r0,#1
000036  b285              UXTH     r5,r0
;;;935    		switch(ucErr)
000038  2e01              CMP      r6,#1
00003a  d008              BEQ      |L10.78|
00003c  2e02              CMP      r6,#2
00003e  d001              BEQ      |L10.68|
000040  2e03              CMP      r6,#3
000042  d015              BEQ      |L10.112|
                  |L10.68|
;;;936            {
;;;937              case 1:         //
;;;938              	   len = 9;
;;;939              	   memmove(&buf[i],"PARA ERR!",len);   
;;;940              	   break;
;;;941    	      case 2:         //
;;;942              	   len = 8;
;;;943              	   memmove(&buf[i],"CMD ERR!",len);   
;;;944              	   break;
;;;945    	      case 3:         //
;;;946              	   len = 8;
;;;947              	   memmove(&buf[i],"REM ERR!",len);   
;;;948              	   break;
;;;949    		  default:    
;;;950                   len = 8;
000044  2608              MOVS     r6,#8
;;;951              	   memmove(&buf[i],"CMD ERR!",len);   
000046  1960              ADDS     r0,r4,r5
000048  4632              MOV      r2,r6
00004a  a10d              ADR      r1,|L10.128|
;;;952                   break;
00004c  e003              B        |L10.86|
                  |L10.78|
00004e  2609              MOVS     r6,#9                 ;938
000050  1960              ADDS     r0,r4,r5              ;939
000052  4632              MOV      r2,r6                 ;939
000054  a10d              ADR      r1,|L10.140|
                  |L10.86|
000056  f7fffffe          BL       __aeabi_memmove
;;;953    	    }
;;;954    	    i+=len;
00005a  19a8              ADDS     r0,r5,r6
00005c  b280              UXTH     r0,r0
;;;955    		buf[i++] = ChrEndR;
00005e  210d              MOVS     r1,#0xd
000060  5421              STRB     r1,[r4,r0]
000062  1c40              ADDS     r0,r0,#1
000064  b280              UXTH     r0,r0
;;;956    		buf[i++] = ChrEndS;
000066  210a              MOVS     r1,#0xa
000068  5421              STRB     r1,[r4,r0]
00006a  1c40              ADDS     r0,r0,#1
00006c  b280              UXTH     r0,r0
;;;957    		return i;
;;;958    }
00006e  bdf8              POP      {r3-r7,pc}
                  |L10.112|
000070  2608              MOVS     r6,#8                 ;946
000072  1960              ADDS     r0,r4,r5              ;947
000074  4632              MOV      r2,r6                 ;947
000076  a108              ADR      r1,|L10.152|
000078  e7ed              B        |L10.86|
;;;959    
                          ENDP

00007a  0000              DCW      0x0000
                  |L10.124|
00007c  256400            DCB      "%d",0
00007f  00                DCB      0
                  |L10.128|
000080  434d4420          DCB      "CMD ERR!",0
000084  45525221
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L10.140|
00008c  50415241          DCB      "PARA ERR!",0
000090  20455252
000094  2100    
000096  00                DCB      0
000097  00                DCB      0
                  |L10.152|
000098  52454d20          DCB      "REM ERR!",0
00009c  45525221
0000a0  00      
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0

                          AREA ||i.SetListPC||, CODE, READONLY, ALIGN=2

                  SetListPC PROC
;;;161    
;;;162    void SetListPC(void)
000000  4804              LDR      r0,|L11.20|
;;;163    {
000002  b510              PUSH     {r4,lr}
;;;164    	SetPowerC(Para.CDC_Limit_C);
000004  f8b00066          LDRH     r0,[r0,#0x66]  ; Para
000008  f7fffffe          BL       SetPowerC
;;;165    	listsend = 3;
00000c  4902              LDR      r1,|L11.24|
00000e  2003              MOVS     r0,#3
000010  7248              STRB     r0,[r1,#9]
;;;166    }
000012  bd10              POP      {r4,pc}
;;;167    
                          ENDP

                  |L11.20|
                          DCD      Para
                  |L11.24|
                          DCD      ||.data||

                          AREA ||i.SetListPS||, CODE, READONLY, ALIGN=2

                  SetListPS PROC
;;;168    
;;;169    void SetListPS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;170    {
;;;171    	if(mainswitch == 1)
000002  4c0f              LDR      r4,|L12.64|
000004  79a0              LDRB     r0,[r4,#6]  ; mainswitch
;;;172    	{
;;;173    		GPIO_SetBits(GPIOE,GPIO_Pin_2);
000006  4d0f              LDR      r5,|L12.68|
000008  2801              CMP      r0,#1                 ;171
00000a  d109              BNE      |L12.32|
00000c  2104              MOVS     r1,#4
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       GPIO_SetBits
;;;174    		Delay_ms(POWER_SW_DELAY);
000014  200a              MOVS     r0,#0xa
000016  f7fffffe          BL       Delay_ms
;;;175    		PowerSwitch(mainswitch);
00001a  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00001c  f7fffffe          BL       PowerSwitch
                  |L12.32|
;;;176    	}
;;;177    	
;;;178    	if(mainswitch == 0)
000020  79a0              LDRB     r0,[r4,#6]  ; mainswitch
000022  b948              CBNZ     r0,|L12.56|
;;;179    	{
;;;180    		PowerSwitch(mainswitch);
000024  79a0              LDRB     r0,[r4,#6]  ; mainswitch
000026  f7fffffe          BL       PowerSwitch
;;;181    		Delay_ms(POWER_SW_DELAY);
00002a  200a              MOVS     r0,#0xa
00002c  f7fffffe          BL       Delay_ms
;;;182    		GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
000030  2104              MOVS     r1,#4
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       GPIO_ResetBits
                  |L12.56|
;;;183    	}
;;;184    	
;;;185    	listsend = 0;
000038  2000              MOVS     r0,#0
00003a  7260              STRB     r0,[r4,#9]
;;;186    }
00003c  bd70              POP      {r4-r6,pc}
;;;187    
                          ENDP

00003e  0000              DCW      0x0000
                  |L12.64|
                          DCD      ||.data||
                  |L12.68|
                          DCD      0x40021000

                          AREA ||i.SetListPV||, CODE, READONLY, ALIGN=2

                  SetListPV PROC
;;;155    }
;;;156    void SetListPV(void)
000000  4804              LDR      r0,|L13.20|
;;;157    {
000002  b510              PUSH     {r4,lr}
;;;158    	SetPowerV(Para.CDC_OutPut_V);
000004  f8b00064          LDRH     r0,[r0,#0x64]  ; Para
000008  f7fffffe          BL       SetPowerV
;;;159    	listsend = 2;
00000c  4902              LDR      r1,|L13.24|
00000e  2002              MOVS     r0,#2
000010  7248              STRB     r0,[r1,#9]
;;;160    }
000012  bd10              POP      {r4,pc}
;;;161    
                          ENDP

                  |L13.20|
                          DCD      Para
                  |L13.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerC||, CODE, READONLY, ALIGN=2

                  SetPowerC PROC
;;;114    
;;;115    void SetPowerC(vu16 powc)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;116    {
;;;117    	MasterSendbuf[0] = 0x01;
000002  4c12              LDR      r4,|L14.76|
000004  2001              MOVS     r0,#1
000006  7020              STRB     r0,[r4,#0]
;;;118    	MasterSendbuf[1] = 0x06;
000008  2006              MOVS     r0,#6
00000a  7060              STRB     r0,[r4,#1]
;;;119    	MasterSendbuf[2] = 0x00;
00000c  2000              MOVS     r0,#0
00000e  70a0              STRB     r0,[r4,#2]
;;;120    	MasterSendbuf[3] = 0x31;
000010  2031              MOVS     r0,#0x31
000012  70e0              STRB     r0,[r4,#3]
;;;121    	MasterSendbuf[4] = (u8)(powc/10>>8);
000014  f8bd1000          LDRH     r1,[sp,#0]
000018  200a              MOVS     r0,#0xa
00001a  fbb1f1f0          UDIV     r1,r1,r0
00001e  0a09              LSRS     r1,r1,#8
000020  7121              STRB     r1,[r4,#4]
;;;122    	MasterSendbuf[5] = (u8)(powc/10);
000022  f8bd1000          LDRH     r1,[sp,#0]
000026  fbb1f0f0          UDIV     r0,r1,r0
00002a  7160              STRB     r0,[r4,#5]
;;;123    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00002c  2106              MOVS     r1,#6
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       Hardware_CRC
000034  71a0              STRB     r0,[r4,#6]
;;;124    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000036  2106              MOVS     r1,#6
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       Hardware_CRC
00003e  0a00              LSRS     r0,r0,#8
000040  71e0              STRB     r0,[r4,#7]
;;;125    	USART3WriteDMA(8);
000042  e8bd4038          POP      {r3-r5,lr}
000046  2008              MOVS     r0,#8
000048  f7ffbffe          B.W      USART3WriteDMA
;;;126    }
;;;127    
                          ENDP

                  |L14.76|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.SetPowerModeC||, CODE, READONLY, ALIGN=2

                  SetPowerModeC PROC
;;;133    
;;;134    void SetPowerModeC(void)
000000  4804              LDR      r0,|L15.20|
;;;135    {
000002  b510              PUSH     {r4,lr}
;;;136    	SetPowerC(Para.POWER_Limit_C);
000004  f8b00056          LDRH     r0,[r0,#0x56]  ; Para
000008  f7fffffe          BL       SetPowerC
;;;137    	sendwait = 3;
00000c  4902              LDR      r1,|L15.24|
00000e  2003              MOVS     r0,#3
000010  7208              STRB     r0,[r1,#8]
;;;138    }
000012  bd10              POP      {r4,pc}
;;;139    
                          ENDP

                  |L15.20|
                          DCD      Para
                  |L15.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerModeS||, CODE, READONLY, ALIGN=2

                  SetPowerModeS PROC
;;;139    
;;;140    void SetPowerModeS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;141    {
;;;142    	if(mainswitch == 1)
000002  4c10              LDR      r4,|L16.68|
000004  79a0              LDRB     r0,[r4,#6]  ; mainswitch
;;;143    	{
;;;144    		GPIO_SetBits(GPIOE,GPIO_Pin_2);
000006  4d10              LDR      r5,|L16.72|
000008  2801              CMP      r0,#1                 ;142
00000a  d002              BEQ      |L16.18|
;;;145    		Delay_ms(POWER_SW_DELAY);
;;;146    		PowerSwitch(mainswitch);
;;;147    	}else if(mainswitch == 0)
00000c  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00000e  b158              CBZ      r0,|L16.40|
000010  e014              B        |L16.60|
                  |L16.18|
000012  2104              MOVS     r1,#4                 ;144
000014  4628              MOV      r0,r5                 ;144
000016  f7fffffe          BL       GPIO_SetBits
00001a  200a              MOVS     r0,#0xa               ;145
00001c  f7fffffe          BL       Delay_ms
000020  79a0              LDRB     r0,[r4,#6]            ;146  ; mainswitch
000022  f7fffffe          BL       PowerSwitch
000026  e009              B        |L16.60|
                  |L16.40|
;;;148    	{
;;;149    		PowerSwitch(mainswitch);
000028  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00002a  f7fffffe          BL       PowerSwitch
;;;150    		Delay_ms(POWER_SW_DELAY);
00002e  200a              MOVS     r0,#0xa
000030  f7fffffe          BL       Delay_ms
;;;151    		GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
000034  2104              MOVS     r1,#4
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       GPIO_ResetBits
                  |L16.60|
;;;152    	}
;;;153    	
;;;154    	sendwait = 0;
00003c  2000              MOVS     r0,#0
00003e  7220              STRB     r0,[r4,#8]
;;;155    }
000040  bd70              POP      {r4-r6,pc}
;;;156    void SetListPV(void)
                          ENDP

000042  0000              DCW      0x0000
                  |L16.68|
                          DCD      ||.data||
                  |L16.72|
                          DCD      0x40021000

                          AREA ||i.SetPowerModeV||, CODE, READONLY, ALIGN=2

                  SetPowerModeV PROC
;;;127    
;;;128    void SetPowerModeV(void)
000000  4804              LDR      r0,|L17.20|
;;;129    {
000002  b510              PUSH     {r4,lr}
;;;130    	SetPowerV(Para.POWER_OutPut_V);
000004  f8b00054          LDRH     r0,[r0,#0x54]  ; Para
000008  f7fffffe          BL       SetPowerV
;;;131    	sendwait = 2;
00000c  4902              LDR      r1,|L17.24|
00000e  2002              MOVS     r0,#2
000010  7208              STRB     r0,[r1,#8]
;;;132    }
000012  bd10              POP      {r4,pc}
;;;133    
                          ENDP

                  |L17.20|
                          DCD      Para
                  |L17.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerV||, CODE, READONLY, ALIGN=2

                  SetPowerV PROC
;;;101    }
;;;102    void SetPowerV(vu16 powv)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;103    {
;;;104    	MasterSendbuf[0] = 0x01;
000002  4c12              LDR      r4,|L18.76|
000004  2001              MOVS     r0,#1
000006  7020              STRB     r0,[r4,#0]
;;;105    	MasterSendbuf[1] = 0x06;
000008  2006              MOVS     r0,#6
00000a  7060              STRB     r0,[r4,#1]
;;;106    	MasterSendbuf[2] = 0x00;
00000c  2000              MOVS     r0,#0
00000e  70a0              STRB     r0,[r4,#2]
;;;107    	MasterSendbuf[3] = 0x30;
000010  2030              MOVS     r0,#0x30
000012  70e0              STRB     r0,[r4,#3]
;;;108    	MasterSendbuf[4] = (u8)(powv/10>>8);
000014  f8bd1000          LDRH     r1,[sp,#0]
000018  200a              MOVS     r0,#0xa
00001a  fbb1f1f0          UDIV     r1,r1,r0
00001e  0a09              LSRS     r1,r1,#8
000020  7121              STRB     r1,[r4,#4]
;;;109    	MasterSendbuf[5] = (u8)(powv/10);
000022  f8bd1000          LDRH     r1,[sp,#0]
000026  fbb1f0f0          UDIV     r0,r1,r0
00002a  7160              STRB     r0,[r4,#5]
;;;110    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00002c  2106              MOVS     r1,#6
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       Hardware_CRC
000034  71a0              STRB     r0,[r4,#6]
;;;111    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000036  2106              MOVS     r1,#6
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       Hardware_CRC
00003e  0a00              LSRS     r0,r0,#8
000040  71e0              STRB     r0,[r4,#7]
;;;112    	USART3WriteDMA(8);
000042  e8bd4038          POP      {r3-r5,lr}
000046  2008              MOVS     r0,#8
000048  f7ffbffe          B.W      USART3WriteDMA
;;;113    }
;;;114    
                          ENDP

                  |L18.76|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.UART1_Send||, CODE, READONLY, ALIGN=2

                  UART1_Send PROC
;;;2380   
;;;2381   void UART1_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2382   {
;;;2383   	static vu8 UART_Buffer_Send_pointer=0;
;;;2384   		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L19.72|
000004  78e0              LDRB     r0,[r4,#3]  ; UART_Buffer_Send_pointer
000006  7921              LDRB     r1,[r4,#4]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L19.56|
;;;2385            {
;;;2386   				 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L19.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L19.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L19.54|
;;;2387   				 {
;;;2388   					USART_SendData(USART1,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  78e1              LDRB     r1,[r4,#3]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  4d0d              LDR      r5,|L19.84|
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       USART_SendData
                  |L19.36|
;;;2389   					while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);//等待发送完成
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L19.36|
;;;2390   					UART_Buffer_Send_pointer++;
000030  78e0              LDRB     r0,[r4,#3]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  70e0              STRB     r0,[r4,#3]
                  |L19.54|
;;;2391   				 }
;;;2392            }
;;;2393   		else 
;;;2394   		{
;;;2395   			UART_Buffer_Send_pointer=0;
;;;2396   			UART_SEND_flag=0;//发送完成一帧数据
;;;2397   		}
;;;2398   }
000036  bd70              POP      {r4-r6,pc}
                  |L19.56|
000038  2000              MOVS     r0,#0                 ;2395
00003a  70e0              STRB     r0,[r4,#3]            ;2395
00003c  4806              LDR      r0,|L19.88|
00003e  6801              LDR      r1,[r0,#0]            ;2396  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;2396
000044  6001              STR      r1,[r0,#0]            ;2396  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;2399   
                          ENDP

                  |L19.72|
                          DCD      ||.data||
                  |L19.76|
                          DCD      ||area_number.31||
                  |L19.80|
                          DCD      ADDR
                  |L19.84|
                          DCD      0x40011000
                  |L19.88|
                          DCD      flagA

                          AREA ||i.UART2_Send||, CODE, READONLY, ALIGN=2

                  UART2_Send PROC
;;;2361   }
;;;2362   void UART2_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2363   {
;;;2364   	static vu8 UART_Buffer_Send_pointer=0;
;;;2365   		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L20.72|
000004  78a0              LDRB     r0,[r4,#2]  ; UART_Buffer_Send_pointer
000006  7921              LDRB     r1,[r4,#4]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L20.56|
;;;2366            {
;;;2367   					 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L20.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L20.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L20.54|
;;;2368   					 {
;;;2369   						USART_SendData(USART2,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  78a1              LDRB     r1,[r4,#2]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  480d              LDR      r0,|L20.84|
00001e  f7fffffe          BL       USART_SendData
;;;2370   						while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);//等待发送完成
000022  4d0d              LDR      r5,|L20.88|
                  |L20.36|
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L20.36|
;;;2371   						UART_Buffer_Send_pointer++;
000030  78a0              LDRB     r0,[r4,#2]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  70a0              STRB     r0,[r4,#2]
                  |L20.54|
;;;2372   					}
;;;2373            }
;;;2374   		else 
;;;2375   		{
;;;2376   			UART_Buffer_Send_pointer=0;
;;;2377   			UART_SEND_flag=0;//发送完成一帧数据
;;;2378   		}
;;;2379   }
000036  bd70              POP      {r4-r6,pc}
                  |L20.56|
000038  2000              MOVS     r0,#0                 ;2376
00003a  70a0              STRB     r0,[r4,#2]            ;2376
00003c  4807              LDR      r0,|L20.92|
00003e  6801              LDR      r1,[r0,#0]            ;2377  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;2377
000044  6001              STR      r1,[r0,#0]            ;2377  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;2380   
                          ENDP

                  |L20.72|
                          DCD      ||.data||
                  |L20.76|
                          DCD      ||area_number.31||
                  |L20.80|
                          DCD      ADDR
                  |L20.84|
                          DCD      0x40004400
                  |L20.88|
                          DCD      0x40011000
                  |L20.92|
                          DCD      flagA

                          AREA ||i.USART2_Configuration||, CODE, READONLY, ALIGN=2

                  USART2_Configuration PROC
;;;2057   
;;;2058   void USART2_Configuration(void)//串口初始化函数
000000  b570              PUSH     {r4-r6,lr}
;;;2059   {  
;;;2060   	GPIO_InitTypeDef GPIO_InitStructure;
;;;2061   	USART_InitTypeDef USART_InitStructure;
;;;2062   	
;;;2063   	/* config USART1 clock */
;;;2064   	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
000002  2101              MOVS     r1,#1
000004  b088              SUB      sp,sp,#0x20           ;2059
000006  0448              LSLS     r0,r1,#17
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;2065   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);
00000c  4e2a              LDR      r6,|L21.184|
00000e  2207              MOVS     r2,#7
000010  2102              MOVS     r1,#2
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2066   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);
000018  2207              MOVS     r2,#7
00001a  2103              MOVS     r1,#3
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2067   	/* USART1 GPIO config */
;;;2068   	/* Configure USART1 Tx (PA.02) as alternate function push-pull */
;;;2069   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;2070   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000022  2502              MOVS     r5,#2
000024  2004              MOVS     r0,#4                 ;2069
000026  f88d5004          STRB     r5,[sp,#4]
;;;2071   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
00002c  9000              STR      r0,[sp,#0]            ;2070
00002e  f88d4006          STRB     r4,[sp,#6]
;;;2072   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f88d5005          STRB     r5,[sp,#5]
;;;2073   	GPIO_Init(GPIOA, &GPIO_InitStructure);    
000036  4669              MOV      r1,sp
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GPIO_Init
;;;2074   	/* Configure USART1 Rx (PA.03) as input floating */
;;;2075   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
00003e  2008              MOVS     r0,#8
;;;2076   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000040  9000              STR      r0,[sp,#0]
000042  f88d5004          STRB     r5,[sp,#4]
;;;2077   	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;2078   	
;;;2079   	/* USART1 mode config */
;;;2080   	USART_InitStructure.USART_BaudRate = 115200;
00004e  f44f30e1          MOV      r0,#0x1c200
;;;2081   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000052  9002              STR      r0,[sp,#8]
;;;2082   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2083   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000054  f8ad4010          STRH     r4,[sp,#0x10]
;;;2084   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2085   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
;;;2086   	USART_Init(USART2, &USART_InitStructure);
00005a  4d18              LDR      r5,|L21.188|
00005c  f8ad400c          STRH     r4,[sp,#0xc]          ;2081
000060  f8ad0012          STRH     r0,[sp,#0x12]         ;2085
000064  f8ad400e          STRH     r4,[sp,#0xe]          ;2082
000068  f8ad4014          STRH     r4,[sp,#0x14]         ;2084
00006c  a902              ADD      r1,sp,#8
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       USART_Init
;;;2087   	
;;;2088   	/******使能串口接收中断******************/
;;;2089   	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
000074  2201              MOVS     r2,#1
000076  f2405125          MOV      r1,#0x525
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_ITConfig
;;;2090   //	USART_ITConfig(USART2, USART_IT_ORE, ENABLE);	
;;;2091   	USART_Cmd(USART2, ENABLE);//使能串口1
000080  2101              MOVS     r1,#1
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USART_Cmd
;;;2092     USART_ClearFlag(USART2, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       USART_ClearFlag
000090  f44f60e0          MOV      r0,#0x700
000094  f7fffffe          BL       NVIC_PriorityGroupConfig
000098  2026              MOVS     r0,#0x26
00009a  f88d0018          STRB     r0,[sp,#0x18]
00009e  f88d4019          STRB     r4,[sp,#0x19]
0000a2  2001              MOVS     r0,#1
0000a4  f88d001a          STRB     r0,[sp,#0x1a]
0000a8  f88d001b          STRB     r0,[sp,#0x1b]
0000ac  a806              ADD      r0,sp,#0x18
0000ae  f7fffffe          BL       NVIC_Init
;;;2093     
;;;2094     USART2_NVIC_Config();//串口中断配置
;;;2095   }
0000b2  b008              ADD      sp,sp,#0x20
0000b4  bd70              POP      {r4-r6,pc}
;;;2096   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L21.184|
                          DCD      0x40020000
                  |L21.188|
                          DCD      0x40004400

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;2319   
;;;2320   void USART2_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2321   {
;;;2322   	u8 Res;
;;;2323    	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
000002  4c1c              LDR      r4,|L22.116|
000004  f2405525          MOV      r5,#0x525
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       USART_GetITStatus
000010  2800              CMP      r0,#0
000012  d013              BEQ      |L22.60|
;;;2324   	{
;;;2325   		USART_ClearITPendingBit(USART2,USART_IT_RXNE);
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       USART_ClearITPendingBit
;;;2326   		Res=USART_ReceiveData(USART2);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       USART_ReceiveData
;;;2327   
;;;2328   		if((USART_RX_STA&0x8000)==0)//接收未完成
000022  4a15              LDR      r2,|L22.120|
000024  b2c1              UXTB     r1,r0                 ;2326
000026  89d0              LDRH     r0,[r2,#0xe]  ; USART_RX_STA
000028  0403              LSLS     r3,r0,#16
00002a  d407              BMI      |L22.60|
;;;2329   		{
;;;2330   		if(USART_RX_STA&0x4000)//接收到了0x0d
;;;2331   		{
;;;2332   			if(Res!=0x0a)
;;;2333   				USART_RX_STA=0;//接收错误,重新开始
;;;2334   			else 
;;;2335   			{
;;;2336   		//		SerialRemoteHandleL(USART_RX_STA,USART_RX_BUF);
;;;2337   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
00002c  4b13              LDR      r3,|L22.124|
00002e  0445              LSLS     r5,r0,#17             ;2330
000030  f04f0400          MOV      r4,#0                 ;2330
000034  d50b              BPL      |L22.78|
000036  290a              CMP      r1,#0xa               ;2332
000038  d001              BEQ      |L22.62|
                  |L22.58|
00003a  81d4              STRH     r4,[r2,#0xe]          ;2333
                  |L22.60|
;;;2338   				USART_RX_STA++;
;;;2339   				USART_RX_CNT = USART_RX_STA;
;;;2340   				USART_RX_STA|=0x8000;	//接收完成了 			  //接收到回车的后字节  置位状态寄存器 
;;;2341   			}
;;;2342   		}
;;;2343   		else //还没收到0X0D
;;;2344   		{	
;;;2345   			if(Res==0x0d)
;;;2346   			{
;;;2347   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
;;;2348   				USART_RX_STA++;	
;;;2349   				USART_RX_STA|=0x4000;					 //接收到回车的前一字节  置位状态寄存器
;;;2350   			}
;;;2351   			else
;;;2352   				{
;;;2353   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
;;;2354   					USART_RX_STA++;									//长度+1 为下一次做准备
;;;2355   				if(USART_RX_STA>(USART_REC_LEN-1))
;;;2356   					USART_RX_STA=0;//接收数据错误,重新开始接收	  
;;;2357   				}		 
;;;2358   			}
;;;2359   		} 
;;;2360   	}
;;;2361   }
00003c  bd70              POP      {r4-r6,pc}
                  |L22.62|
00003e  f3c0040d          UBFX     r4,r0,#0,#14          ;2337
000042  1c40              ADDS     r0,r0,#1              ;2337
000044  5519              STRB     r1,[r3,r4]            ;2337
000046  8210              STRH     r0,[r2,#0x10]         ;2339
000048  f4404000          ORR      r0,r0,#0x8000         ;2340
00004c  e010              B        |L22.112|
                  |L22.78|
00004e  290d              CMP      r1,#0xd               ;2345
000050  d008              BEQ      |L22.100|
000052  f3c0050d          UBFX     r5,r0,#0,#14          ;2353
000056  1c40              ADDS     r0,r0,#1              ;2353
000058  b280              UXTH     r0,r0                 ;2354
00005a  5559              STRB     r1,[r3,r5]            ;2353
00005c  81d0              STRH     r0,[r2,#0xe]          ;2354
00005e  28c7              CMP      r0,#0xc7              ;2355
000060  d8eb              BHI      |L22.58|
000062  bd70              POP      {r4-r6,pc}
                  |L22.100|
000064  f3c0040d          UBFX     r4,r0,#0,#14          ;2347
000068  1c40              ADDS     r0,r0,#1              ;2347
00006a  5519              STRB     r1,[r3,r4]            ;2347
00006c  f4404080          ORR      r0,r0,#0x4000         ;2349
                  |L22.112|
000070  81d0              STRH     r0,[r2,#0xe]          ;2340
000072  bd70              POP      {r4-r6,pc}
;;;2362   void UART2_Send(void)
                          ENDP

                  |L22.116|
                          DCD      0x40004400
                  |L22.120|
                          DCD      ||.data||
                  |L22.124|
                          DCD      ||area_number.31||+0x14

                          AREA ||i.USART3HANDLE||, CODE, READONLY, ALIGN=2

                  USART3HANDLE PROC
;;;213    
;;;214    void USART3HANDLE(void)
000000  b538              PUSH     {r3-r5,lr}
;;;215    {
;;;216    	vu16 crcres;
;;;217    
;;;218    	if(MasterRecbuf[0] == 0x01)
000002  4c28              LDR      r4,|L23.164|
;;;219    	{
;;;220    		if(MasterRecbuf[1] == 0x03)
;;;221    		{
;;;222    			crcres = (MasterRecbuf[8] << 8) + MasterRecbuf[7];
;;;223    			if(crcres == Hardware_CRC(MasterRecbuf,7))
;;;224    			{
;;;225    				 
;;;226    				Para.CPOW_Voltage = (MasterRecbuf[3] << 8) + MasterRecbuf[4];
;;;227    				Para.CCurrent = (MasterRecbuf[5] << 8) + MasterRecbuf[6];
;;;228    				memset(MasterRecbuf,0,sizeof(MasterRecbuf));
;;;229    			}
;;;230    				if(sendwait == 3)
000004  4d28              LDR      r5,|L23.168|
000006  7820              LDRB     r0,[r4,#0]            ;218  ; MasterRecbuf
000008  2801              CMP      r0,#1                 ;218
00000a  d148              BNE      |L23.158|
00000c  7860              LDRB     r0,[r4,#1]            ;220  ; MasterRecbuf
00000e  2803              CMP      r0,#3                 ;220
000010  d002              BEQ      |L23.24|
;;;231    				{
;;;232    					SetPowerModeS();
;;;233    				}
;;;234    				if(sendwait == 2)
;;;235    				{
;;;236    					SetPowerModeC();
;;;237    				}
;;;238    				if(sendwait == 1)
;;;239    				{
;;;240    					SetPowerModeV();
;;;241    				}
;;;242    				if(listsend == 3)
;;;243    				{
;;;244    					SetListPS();
;;;245    				}
;;;246    				if(listsend == 2)
;;;247    				{
;;;248    					SetListPC();
;;;249    				}
;;;250    				if(listsend == 1)
;;;251    				{
;;;252    					SetListPV();
;;;253    				}
;;;254    		}else if(MasterRecbuf[1] == 0x06){
000012  2806              CMP      r0,#6
000014  d03c              BEQ      |L23.144|
000016  e042              B        |L23.158|
                  |L23.24|
000018  79e1              LDRB     r1,[r4,#7]            ;222  ; MasterRecbuf
00001a  7a20              LDRB     r0,[r4,#8]            ;222  ; MasterRecbuf
00001c  eb012000          ADD      r0,r1,r0,LSL #8       ;222
000020  f8ad0000          STRH     r0,[sp,#0]            ;222
000024  2107              MOVS     r1,#7                 ;223
000026  481f              LDR      r0,|L23.164|
000028  f7fffffe          BL       Hardware_CRC
00002c  f8bd1000          LDRH     r1,[sp,#0]            ;223
000030  4288              CMP      r0,r1                 ;223
000032  d10e              BNE      |L23.82|
000034  7920              LDRB     r0,[r4,#4]            ;226  ; MasterRecbuf
000036  78e1              LDRB     r1,[r4,#3]            ;226  ; MasterRecbuf
000038  eb002101          ADD      r1,r0,r1,LSL #8       ;226
00003c  481b              LDR      r0,|L23.172|
00003e  6281              STR      r1,[r0,#0x28]         ;226  ; Para
000040  79a1              LDRB     r1,[r4,#6]            ;227  ; MasterRecbuf
000042  7962              LDRB     r2,[r4,#5]            ;227  ; MasterRecbuf
000044  eb012102          ADD      r1,r1,r2,LSL #8       ;227
000048  6301              STR      r1,[r0,#0x30]         ;227  ; Para
00004a  2180              MOVS     r1,#0x80              ;228
00004c  4815              LDR      r0,|L23.164|
00004e  f7fffffe          BL       __aeabi_memclr
                  |L23.82|
000052  7a28              LDRB     r0,[r5,#8]            ;230  ; sendwait
000054  2803              CMP      r0,#3                 ;230
000056  d101              BNE      |L23.92|
000058  f7fffffe          BL       SetPowerModeS
                  |L23.92|
00005c  7a28              LDRB     r0,[r5,#8]            ;234  ; sendwait
00005e  2802              CMP      r0,#2                 ;234
000060  d101              BNE      |L23.102|
000062  f7fffffe          BL       SetPowerModeC
                  |L23.102|
000066  7a28              LDRB     r0,[r5,#8]            ;238  ; sendwait
000068  2801              CMP      r0,#1                 ;238
00006a  d101              BNE      |L23.112|
00006c  f7fffffe          BL       SetPowerModeV
                  |L23.112|
000070  7a68              LDRB     r0,[r5,#9]            ;242  ; listsend
000072  2803              CMP      r0,#3                 ;242
000074  d101              BNE      |L23.122|
000076  f7fffffe          BL       SetListPS
                  |L23.122|
00007a  7a68              LDRB     r0,[r5,#9]            ;246  ; listsend
00007c  2802              CMP      r0,#2                 ;246
00007e  d101              BNE      |L23.132|
000080  f7fffffe          BL       SetListPC
                  |L23.132|
000084  7a68              LDRB     r0,[r5,#9]            ;250  ; listsend
000086  2801              CMP      r0,#1                 ;250
000088  d109              BNE      |L23.158|
00008a  f7fffffe          BL       SetListPV
00008e  e006              B        |L23.158|
                  |L23.144|
;;;255    			memset(MasterRecbuf,0,sizeof(MasterRecbuf));
000090  2180              MOVS     r1,#0x80
000092  4804              LDR      r0,|L23.164|
000094  f7fffffe          BL       __aeabi_memclr
;;;256    			watchtest ++;
000098  6b68              LDR      r0,[r5,#0x34]  ; watchtest
00009a  1c40              ADDS     r0,r0,#1
00009c  6368              STR      r0,[r5,#0x34]  ; watchtest
                  |L23.158|
;;;257    		}
;;;258    	}	
;;;259    
;;;260    	
;;;261    	USART3_Recive_flg = 0;
00009e  2000              MOVS     r0,#0
0000a0  7068              STRB     r0,[r5,#1]
;;;262    }
0000a2  bd38              POP      {r3-r5,pc}
;;;263    
                          ENDP

                  |L23.164|
                          DCD      ||area_number.31||+0x15c
                  |L23.168|
                          DCD      ||.data||
                  |L23.172|
                          DCD      Para

                          AREA ||i.USART3WriteDMA||, CODE, READONLY, ALIGN=2

                  USART3WriteDMA PROC
;;;2262   
;;;2263   void USART3WriteDMA(u16 len)
000000  b570              PUSH     {r4-r6,lr}
;;;2264   {
000002  4605              MOV      r5,r0
;;;2265       USART_ClearFlag(USART3, USART_FLAG_TC);     //串口发送准备
000004  2140              MOVS     r1,#0x40
000006  4809              LDR      r0,|L24.44|
000008  f7fffffe          BL       USART_ClearFlag
;;;2266   	DMA_Cmd(DMA1_Stream3, DISABLE);//关闭DMA 数据流3
00000c  4c08              LDR      r4,|L24.48|
00000e  2100              MOVS     r1,#0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       DMA_Cmd
;;;2267       DMA_SetCurrDataCounter(DMA1_Stream3,len);//设置DMA发生长度
000016  4629              MOV      r1,r5
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       DMA_SetCurrDataCounter
;;;2268   	DMA_Cmd(DMA1_Stream3, ENABLE);// 打开DMA 数据流3
00001e  4620              MOV      r0,r4
000020  e8bd4070          POP      {r4-r6,lr}
000024  2101              MOVS     r1,#1
000026  f7ffbffe          B.W      DMA_Cmd
;;;2269      
;;;2270   }
;;;2271   
                          ENDP

00002a  0000              DCW      0x0000
                  |L24.44|
                          DCD      0x40004800
                  |L24.48|
                          DCD      0x40026058

                          AREA ||i.USART3_Configuration||, CODE, READONLY, ALIGN=2

                  USART3_Configuration PROC
;;;2209   
;;;2210   void USART3_Configuration()//???????
000000  b570              PUSH     {r4-r6,lr}
;;;2211   {  
;;;2212       GPIO_InitTypeDef GPIO_InitStructure;
;;;2213   	USART_InitTypeDef USART_InitStructure;
;;;2214   	
;;;2215   	/* config USART1 clock */
;;;2216   	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
000002  2101              MOVS     r1,#1
000004  b088              SUB      sp,sp,#0x20           ;2211
000006  0488              LSLS     r0,r1,#18
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;2217   //    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE); //?? GPIOA ??
;;;2218       
;;;2219   	GPIO_PinAFConfig(GPIOD,GPIO_PinSource8,GPIO_AF_USART3);
00000c  4c2a              LDR      r4,|L25.184|
00000e  2207              MOVS     r2,#7
000010  2108              MOVS     r1,#8
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2220   	GPIO_PinAFConfig(GPIOD,GPIO_PinSource9,GPIO_AF_USART3);
000018  2207              MOVS     r2,#7
00001a  2109              MOVS     r1,#9
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2221       
;;;2222   
;;;2223       
;;;2224       
;;;2225   	/* USART1 GPIO config */
;;;2226   	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;2227   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
000022  15a0              ASRS     r0,r4,#22
;;;2228   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000024  2502              MOVS     r5,#2
000026  9004              STR      r0,[sp,#0x10]
000028  f88d5014          STRB     r5,[sp,#0x14]
;;;2229   //     GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //??????
;;;2230   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00002c  f88d5015          STRB     r5,[sp,#0x15]
;;;2231   	GPIO_Init(GPIOD, &GPIO_InitStructure);    
000030  a904              ADD      r1,sp,#0x10
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       GPIO_Init
;;;2232   	/* Configure USART1 Rx (PA.10) as input floating */
;;;2233   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
000038  1560              ASRS     r0,r4,#21
;;;2234       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00003a  9004              STR      r0,[sp,#0x10]
00003c  f88d5014          STRB     r5,[sp,#0x14]
;;;2235   	GPIO_Init(GPIOD, &GPIO_InitStructure);
000040  a904              ADD      r1,sp,#0x10
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       GPIO_Init
;;;2236       
;;;2237   
;;;2238   	
;;;2239   	/* USART1 mode config */
;;;2240   	USART_InitStructure.USART_BaudRate = 9600;
;;;2241   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000048  2400              MOVS     r4,#0
00004a  f44f5016          MOV      r0,#0x2580            ;2240
00004e  9000              STR      r0,[sp,#0]
;;;2242   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2243   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000050  f8ad4008          STRH     r4,[sp,#8]
;;;2244   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2245   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000054  200c              MOVS     r0,#0xc
;;;2246   	USART_Init(USART3, &USART_InitStructure);
000056  4e19              LDR      r6,|L25.188|
000058  f8ad4004          STRH     r4,[sp,#4]            ;2241
00005c  f8ad000a          STRH     r0,[sp,#0xa]          ;2245
000060  f8ad4006          STRH     r4,[sp,#6]            ;2242
000064  f8ad400c          STRH     r4,[sp,#0xc]          ;2244
000068  4669              MOV      r1,sp
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       USART_Init
;;;2247       
;;;2248   
;;;2249   	
;;;2250   	/******????????******************/
;;;2251   	USART_ITConfig(USART3, USART_IT_IDLE, ENABLE);
000070  2201              MOVS     r2,#1
000072  f2404124          MOV      r1,#0x424
000076  4630              MOV      r0,r6
000078  f7fffffe          BL       USART_ITConfig
00007c  f44f60e0          MOV      r0,#0x700
000080  f7fffffe          BL       NVIC_PriorityGroupConfig
000084  2027              MOVS     r0,#0x27
000086  f88d0018          STRB     r0,[sp,#0x18]
00008a  f88d4019          STRB     r4,[sp,#0x19]
00008e  f88d501a          STRB     r5,[sp,#0x1a]
000092  2001              MOVS     r0,#1
000094  f88d001b          STRB     r0,[sp,#0x1b]
000098  a806              ADD      r0,sp,#0x18
00009a  f7fffffe          BL       NVIC_Init
;;;2252   	USART3_NVIC_Config();//??????
;;;2253   	USART3_DMA_init();
00009e  f7fffffe          BL       USART3_DMA_init
;;;2254   	USART_Cmd(USART3, ENABLE);//????1
0000a2  2101              MOVS     r1,#1
0000a4  4630              MOV      r0,r6
0000a6  f7fffffe          BL       USART_Cmd
;;;2255       USART_ClearFlag(USART3, USART_FLAG_TC);
0000aa  2140              MOVS     r1,#0x40
0000ac  4630              MOV      r0,r6
0000ae  f7fffffe          BL       USART_ClearFlag
;;;2256       
;;;2257     
;;;2258       
;;;2259   	
;;;2260   }
0000b2  b008              ADD      sp,sp,#0x20
0000b4  bd70              POP      {r4-r6,pc}
;;;2261   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L25.184|
                          DCD      0x40020c00
                  |L25.188|
                          DCD      0x40004800

                          AREA ||i.USART3_DMA_init||, CODE, READONLY, ALIGN=2

                  USART3_DMA_init PROC
;;;2110   
;;;2111   static void USART3_DMA_init(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2112   {
;;;2113       DMA_InitTypeDef DMA_InitStructure;
;;;2114       NVIC_InitTypeDef NVIC_InitStructure;
;;;2115   	
;;;2116   	//串口3使用DMA1 发送为数据流3  通道4   
;;;2117       //F4与F1DMA多了一个数据流的说法详细参考中文数据手册DMA 表35
;;;2118       /* 1.使能DMA2时钟 */
;;;2119   	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
000004  2101              MOVS     r1,#1
000006  b091              SUB      sp,sp,#0x44           ;2112
000008  0548              LSLS     r0,r1,#21
00000a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;2120   	
;;;2121   	//串口发送DMA配置
;;;2122       /* 2.配置使用DMA发送数据 */
;;;2123       DMA_DeInit(DMA1_Stream3); //DMA1 数据流 3
00000e  f8dfa0d8          LDR      r10,|L26.232|
000012  4650              MOV      r0,r10
000014  f7fffffe          BL       DMA_DeInit
;;;2124       DMA_InitStructure.DMA_Channel = DMA_Channel_4;  /* 配置DMA1通道4 */
000018  f04f6600          MOV      r6,#0x8000000
;;;2125       DMA_InitStructure.DMA_PeripheralBaseAddr  = (uint32_t)(&(USART3->DR)); /* 目的 */
;;;2126       DMA_InitStructure.DMA_Memory0BaseAddr     = (uint32_t)MasterSendbuf; /*源内存地址*/
00001c  4834              LDR      r0,|L26.240|
00001e  4f33              LDR      r7,|L26.236|
000020  9600              STR      r6,[sp,#0]
000022  e9cd7001          STRD     r7,r0,[sp,#4]
;;;2127       DMA_InitStructure.DMA_DIR                 = DMA_DIR_MemoryToPeripheral;  /*方向内            
;;;2128                                                                               存到外设*/
;;;2129       DMA_InitStructure.DMA_BufferSize          = MAXRxTxLen;                    
;;;2130       /* 长度 */                  
;;;2131       DMA_InitStructure.DMA_PeripheralInc       = DMA_PeripheralInc_Disable;    
000026  2400              MOVS     r4,#0
000028  2040              MOVS     r0,#0x40              ;2127
00002a  f04f0880          MOV      r8,#0x80              ;2129
;;;2132       /* 外设地址是否自增 */
;;;2133       DMA_InitStructure.DMA_MemoryInc           = DMA_MemoryInc_Enable;        
00002e  f44f6980          MOV      r9,#0x400
000032  9003              STR      r0,[sp,#0xc]
000034  e9cd8404          STRD     r8,r4,[sp,#0x10]
000038  e9cd9406          STRD     r9,r4,[sp,#0x18]
;;;2134       /* 内存地址是否自增 */
;;;2135       DMA_InitStructure.DMA_PeripheralDataSize  = DMA_PeripheralDataSize_Byte;  
;;;2136       /* 目的数据带宽 */
;;;2137       DMA_InitStructure.DMA_MemoryDataSize      = DMA_MemoryDataSize_Byte;      
;;;2138       /* 源数据宽度 */
;;;2139       DMA_InitStructure.DMA_Mode                = DMA_Mode_Normal;             
;;;2140       /* 单次传输模式/循环传输模式 */
;;;2141       DMA_InitStructure.DMA_Priority            = DMA_Priority_High;             
00003c  02c0              LSLS     r0,r0,#11
00003e  9408              STR      r4,[sp,#0x20]
000040  e9cd4009          STRD     r4,r0,[sp,#0x24]
;;;2142       /* DMA优先级 */
;;;2143       DMA_InitStructure.DMA_FIFOMode            = DMA_FIFOMode_Disable;          
;;;2144       /* FIFO模式/直接模式 */
;;;2145       DMA_InitStructure.DMA_FIFOThreshold       = DMA_FIFOThreshold_HalfFull; 
000044  2501              MOVS     r5,#1
000046  e9cd450b          STRD     r4,r5,[sp,#0x2c]
;;;2146       /* FIFO大小 */
;;;2147       DMA_InitStructure.DMA_MemoryBurst         = DMA_MemoryBurst_Single;      
;;;2148        /* 单次传输 */
;;;2149       DMA_InitStructure.DMA_PeripheralBurst     = DMA_PeripheralBurst_Single;
00004a  940d              STR      r4,[sp,#0x34]
;;;2150       /* 3. 配置DMA */
;;;2151       DMA_Init(DMA1_Stream3, &DMA_InitStructure);
00004c  4669              MOV      r1,sp
00004e  4650              MOV      r0,r10
000050  940e              STR      r4,[sp,#0x38]
000052  f7fffffe          BL       DMA_Init
;;;2152       /* 4.使能DMA中断 */
;;;2153       DMA_ITConfig(DMA1_Stream3, DMA_IT_TC, ENABLE);
000056  2201              MOVS     r2,#1
000058  2110              MOVS     r1,#0x10
00005a  4650              MOV      r0,r10
00005c  f7fffffe          BL       DMA_ITConfig
;;;2154       /* 5.使能串口的DMA发送接口 */
;;;2155       USART_DMACmd(USART3, USART_DMAReq_Tx, ENABLE);
000060  f1a70b04          SUB      r11,r7,#4
000064  2201              MOVS     r2,#1
000066  2180              MOVS     r1,#0x80
000068  4658              MOV      r0,r11
00006a  f7fffffe          BL       USART_DMACmd
;;;2156       /* 6. 配置DMA中断优先级 */
;;;2157       NVIC_InitStructure.NVIC_IRQChannel                   = DMA1_Stream3_IRQn;  
00006e  200e              MOVS     r0,#0xe
000070  f88d003c          STRB     r0,[sp,#0x3c]
;;;2158       //  DMA发生中断         
;;;2159       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;          
000074  f88d403d          STRB     r4,[sp,#0x3d]
;;;2160       NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 4; 
000078  2004              MOVS     r0,#4
00007a  f88d003e          STRB     r0,[sp,#0x3e]
;;;2161       NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;
00007e  f88d503f          STRB     r5,[sp,#0x3f]
;;;2162       NVIC_Init(&NVIC_InitStructure);
000082  a80f              ADD      r0,sp,#0x3c
000084  f7fffffe          BL       NVIC_Init
;;;2163   	
;;;2164       /* 7.不使能DMA */                  
;;;2165       DMA_Cmd(DMA1_Stream3, DISABLE);// 数据流2
000088  2100              MOVS     r1,#0
00008a  4650              MOV      r0,r10
00008c  f7fffffe          BL       DMA_Cmd
;;;2166   	//************************DMA接收***********************//
;;;2167   	/* 2.配置使用DMA接收数据 */
;;;2168       DMA_DeInit(DMA1_Stream1); 
000090  f8dfa054          LDR      r10,|L26.232|
000094  f1aa0a30          SUB      r10,r10,#0x30
000098  4650              MOV      r0,r10
00009a  f7fffffe          BL       DMA_DeInit
;;;2169       DMA_InitStructure.DMA_Channel             = DMA_Channel_4;               
;;;2170       /* 配置DMA通道 */
;;;2171       DMA_InitStructure.DMA_PeripheralBaseAddr  = (uint32_t)(&(USART3->DR));   
;;;2172       /* 源地址 */
;;;2173       DMA_InitStructure.DMA_Memory0BaseAddr     = (uint32_t)MasterRecbuf;    
00009e  4814              LDR      r0,|L26.240|
0000a0  a902              ADD      r1,sp,#8
0000a2  3080              ADDS     r0,r0,#0x80
0000a4  e8810111          STM      r1,{r0,r4,r8}
0000a8  e9cd4905          STRD     r4,r9,[sp,#0x14]
;;;2174       /* 目标地址 */
;;;2175       DMA_InitStructure.DMA_DIR                 = DMA_DIR_PeripheralToMemory;    
;;;2176       /* 方向外设向内存  */
;;;2177       DMA_InitStructure.DMA_BufferSize          = MAXRxTxLen;                    		
;;;2178       /* 长度 */                  
;;;2179       DMA_InitStructure.DMA_PeripheralInc       = DMA_PeripheralInc_Disable;    
;;;2180         /* 外设地址是否自增 */
;;;2181       DMA_InitStructure.DMA_MemoryInc           = DMA_MemoryInc_Enable;         
;;;2182       /* 内存地址是否自增 */
;;;2183       DMA_InitStructure.DMA_PeripheralDataSize  = DMA_MemoryDataSize_Byte;     
;;;2184       /* 目的数据带宽 */
;;;2185       DMA_InitStructure.DMA_MemoryDataSize      = DMA_MemoryDataSize_Byte;      
;;;2186       /* 源数据宽度 */
;;;2187       DMA_InitStructure.DMA_Mode                = DMA_Mode_Circular;             
0000ac  0228              LSLS     r0,r5,#8
0000ae  e9cd4008          STRD     r4,r0,[sp,#0x20]
;;;2188       /*循环传输模式 */
;;;2189       DMA_InitStructure.DMA_Priority            = DMA_Priority_VeryHigh;        
0000b2  a90a              ADD      r1,sp,#0x28
0000b4  9407              STR      r4,[sp,#0x1c]         ;2187
0000b6  f44f3040          MOV      r0,#0x30000
0000ba  e8810031          STM      r1,{r0,r4,r5}
;;;2190       /* DMA优先级 */
;;;2191       DMA_InitStructure.DMA_FIFOMode            = DMA_FIFOMode_Disable;         
;;;2192        /* FIFO模式/直接模式 */
;;;2193       DMA_InitStructure.DMA_FIFOThreshold       = DMA_FIFOThreshold_HalfFull; 
;;;2194       /* FIFO大小 */
;;;2195       DMA_InitStructure.DMA_MemoryBurst         = DMA_MemoryBurst_Single;       
;;;2196       /* 单次传输 */
;;;2197       DMA_InitStructure.DMA_PeripheralBurst     = DMA_PeripheralBurst_Single;
0000be  940d              STR      r4,[sp,#0x34]
;;;2198       /* 3. 配置DMA */
;;;2199       DMA_Init(DMA1_Stream1, &DMA_InitStructure);
0000c0  4669              MOV      r1,sp
0000c2  4650              MOV      r0,r10
0000c4  940e              STR      r4,[sp,#0x38]
0000c6  e9cd6700          STRD     r6,r7,[sp,#0]
0000ca  f7fffffe          BL       DMA_Init
;;;2200       /* 4.由于接收不需要DMA中断，故不设置DMA中断 */
;;;2201       /* 5.使能串口的DMA接收 */
;;;2202       USART_DMACmd(USART3,USART_DMAReq_Rx,ENABLE);
0000ce  2201              MOVS     r2,#1
0000d0  2140              MOVS     r1,#0x40
0000d2  4658              MOV      r0,r11
0000d4  f7fffffe          BL       USART_DMACmd
;;;2203       /* 6. 由于接收不需要DMA中断，故不能配置DMA中断优先级 */
;;;2204       /* 7.使能DMA */ 
;;;2205       DMA_Cmd(DMA1_Stream1,ENABLE);
0000d8  2101              MOVS     r1,#1
0000da  4650              MOV      r0,r10
0000dc  f7fffffe          BL       DMA_Cmd
;;;2206   }
0000e0  b011              ADD      sp,sp,#0x44
0000e2  e8bd8ff0          POP      {r4-r11,pc}
;;;2207   
                          ENDP

0000e6  0000              DCW      0x0000
                  |L26.232|
                          DCD      0x40026058
                  |L26.236|
                          DCD      0x40004804
                  |L26.240|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;2287   
;;;2288   void USART3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2289   {
;;;2290       u8 Clear = Clear;
;;;2291       u16 num = 0;
;;;2292            
;;;2293       if(USART_GetITStatus(USART3, USART_IT_IDLE) != RESET)
000002  4c18              LDR      r4,|L27.100|
000004  f2404124          MOV      r1,#0x424
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USART_GetITStatus
00000e  2800              CMP      r0,#0
000010  d024              BEQ      |L27.92|
;;;2294       {
;;;2295           Clear = USART3->SR;  //读SR寄存器清除                                                            
000012  8820              LDRH     r0,[r4,#0]
;;;2296          
;;;2297           Clear = USART3->DR;  //读DR寄存器清除                                                        
000014  1d20              ADDS     r0,r4,#4
000016  8800              LDRH     r0,[r0,#0]
;;;2298           DMA_Cmd(DMA1_Stream1,DISABLE);   //关闭DMA
000018  4d13              LDR      r5,|L27.104|
00001a  2100              MOVS     r1,#0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       DMA_Cmd
;;;2299   		DMA_ClearFlag(DMA1_Stream1,DMA_FLAG_TCIF2);
000022  f04f5181          MOV      r1,#0x10200000
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       DMA_ClearFlag
;;;2300           num = DMA_GetCurrDataCounter(DMA1_Stream1); //得到真正接收数据个数
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       DMA_GetCurrDataCounter
;;;2301           if(num < MAXRxTxLen)
;;;2302           {
;;;2303               USART3_Recive_leng   = MAXRxTxLen - num;
000032  4c0e              LDR      r4,|L27.108|
000034  2880              CMP      r0,#0x80              ;2301
000036  d212              BCS      |L27.94|
000038  f1c00080          RSB      r0,r0,#0x80
00003c  b2c0              UXTB     r0,r0
00003e  7020              STRB     r0,[r4,#0]
;;;2304           }else
;;;2305           {
;;;2306               USART3_Recive_leng = MAXRxTxLen;
;;;2307           }
;;;2308            
;;;2309           if(USART3_Recive_leng > MAXRxTxLen)
000040  2880              CMP      r0,#0x80
000042  d901              BLS      |L27.72|
;;;2310           {
;;;2311               USART3_Recive_leng = 0;  //避免接收数据超界                                               
000044  2000              MOVS     r0,#0
                  |L27.70|
000046  7020              STRB     r0,[r4,#0]            ;2306
                  |L27.72|
;;;2312           }
;;;2313           DMA_SetCurrDataCounter(DMA1_Stream1,MAXRxTxLen);//设置DMA传输长度                                                        
000048  2180              MOVS     r1,#0x80
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       DMA_SetCurrDataCounter
;;;2314           DMA_Cmd(DMA1_Stream1,ENABLE);  //开启DMA
000050  2101              MOVS     r1,#1
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       DMA_Cmd
;;;2315           USART3_Recive_flg = 1;    //数据接收成功                                                  
000058  2001              MOVS     r0,#1
00005a  7060              STRB     r0,[r4,#1]
                  |L27.92|
;;;2316           
;;;2317       } 
;;;2318   }
00005c  bd70              POP      {r4-r6,pc}
                  |L27.94|
00005e  2080              MOVS     r0,#0x80              ;2306
000060  e7f1              B        |L27.70|
;;;2319   
                          ENDP

000062  0000              DCW      0x0000
                  |L27.100|
                          DCD      0x40004800
                  |L27.104|
                          DCD      0x40026028
                  |L27.108|
                          DCD      ||.data||

                          AREA ||i.USART_Configuration||, CODE, READONLY, ALIGN=2

                  USART_Configuration PROC
;;;2004   
;;;2005   void USART_Configuration(void)//串口初始化函数
000000  b570              PUSH     {r4-r6,lr}
;;;2006   {  
000002  b088              SUB      sp,sp,#0x20
;;;2007   	GPIO_InitTypeDef GPIO_InitStructure;
;;;2008   	USART_InitTypeDef USART_InitStructure;
;;;2009   	
;;;2010   	/* config USART1 clock */
;;;2011   	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
000004  2101              MOVS     r1,#1
000006  2010              MOVS     r0,#0x10
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;2012   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1);
00000c  4e2a              LDR      r6,|L28.184|
00000e  2207              MOVS     r2,#7
000010  2109              MOVS     r1,#9
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2013   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1);
000018  2207              MOVS     r2,#7
00001a  210a              MOVS     r1,#0xa
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2014   	/* USART1 GPIO config */
;;;2015   	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;2016   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
;;;2017   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000022  2502              MOVS     r5,#2
000024  1570              ASRS     r0,r6,#21             ;2016
000026  f88d5004          STRB     r5,[sp,#4]
;;;2018   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
00002c  9000              STR      r0,[sp,#0]            ;2017
00002e  f88d4006          STRB     r4,[sp,#6]
;;;2019   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f88d5005          STRB     r5,[sp,#5]
;;;2020   	GPIO_Init(GPIOA, &GPIO_InitStructure);    
000036  4669              MOV      r1,sp
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GPIO_Init
;;;2021   	/* Configure USART1 Rx (PA.10) as input floating */
;;;2022   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
00003e  0268              LSLS     r0,r5,#9
;;;2023   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000040  9000              STR      r0,[sp,#0]
000042  f88d5004          STRB     r5,[sp,#4]
;;;2024   	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;2025   	
;;;2026   	/* USART1 mode config */
;;;2027   	USART_InitStructure.USART_BaudRate = 9600;
00004e  f44f5016          MOV      r0,#0x2580
;;;2028   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000052  9002              STR      r0,[sp,#8]
;;;2029   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2030   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000054  f8ad4010          STRH     r4,[sp,#0x10]
;;;2031   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2032   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
;;;2033   	USART_Init(USART1, &USART_InitStructure);
00005a  4d18              LDR      r5,|L28.188|
00005c  f8ad400c          STRH     r4,[sp,#0xc]          ;2028
000060  f8ad0012          STRH     r0,[sp,#0x12]         ;2032
000064  f8ad400e          STRH     r4,[sp,#0xe]          ;2029
000068  f8ad4014          STRH     r4,[sp,#0x14]         ;2031
00006c  a902              ADD      r1,sp,#8
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       USART_Init
;;;2034   	
;;;2035   	/******使能串口接收中断******************/
;;;2036   	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	
000074  2201              MOVS     r2,#1
000076  f2405125          MOV      r1,#0x525
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_ITConfig
;;;2037   	USART_Cmd(USART1, ENABLE);//使能串口1
000080  2101              MOVS     r1,#1
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USART_Cmd
;;;2038   	USART_ClearFlag(USART1, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       USART_ClearFlag
000090  f44f60e0          MOV      r0,#0x700
000094  f7fffffe          BL       NVIC_PriorityGroupConfig
000098  2025              MOVS     r0,#0x25
00009a  f88d0018          STRB     r0,[sp,#0x18]
00009e  f88d4019          STRB     r4,[sp,#0x19]
0000a2  2004              MOVS     r0,#4
0000a4  f88d001a          STRB     r0,[sp,#0x1a]
0000a8  2001              MOVS     r0,#1
0000aa  f88d001b          STRB     r0,[sp,#0x1b]
0000ae  a806              ADD      r0,sp,#0x18
0000b0  f7fffffe          BL       NVIC_Init
;;;2039     
;;;2040   	USART1_NVIC_Config();//串口中断配置
;;;2041   }			
0000b4  b008              ADD      sp,sp,#0x20
0000b6  bd70              POP      {r4-r6,pc}
;;;2042   
                          ENDP

                  |L28.184|
                          DCD      0x40020000
                  |L28.188|
                          DCD      0x40011000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UART_Buffer_Rece
                          %        16

                          AREA ||area_number.31||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.31||, ||.bss||
                  UART_Buffer_Send
                          %        20
                  USART_RX_BUF
                          %        200
                  MasterSendbuf
                          %        128
                  MasterRecbuf
                          %        128

                          AREA ||.data||, DATA, ALIGN=2

                  USART3_Recive_leng
000000  00                DCB      0x00
                  USART3_Recive_flg
000001  00                DCB      0x00
                  UART_Buffer_Send_pointer
000002  00                DCB      0x00
                  |symbol_number.105|
000003  00                DCB      0x00
                  Transmit_BUFFERsize
000004  00                DCB      0x00
                  MODE
000005  00                DCB      0x00
                  mainswitch
000006  00                DCB      0x00
                  Rraly
000007  00                DCB      0x00
                  sendwait
000008  00                DCB      0x00
                  listsend
000009  00                DCB      0x00
                  listocwatch
00000a  00                DCB      0x00
                  listpowwatch1
00000b  00                DCB      0x00
                  listpowwatch2
00000c  0000              DCB      0x00,0x00
                  USART_RX_STA
00000e  0000              DCW      0x0000
                  USART_RX_CNT
000010  0000              DCW      0x0000
000012  0000              DCB      0x00,0x00
                  ||x1||
                          DCD      0x00000000
                  ||y1||
                          DCD      0x00000000
                  ||x2||
                          DCD      0x00000000
                  ||y2||
                          DCD      0x00000000
                  ||x3||
                          DCD      0x00000000
                  ||y3||
                          DCD      0x00000000
                  ||x4||
                          DCD      0x00000000
                  ||y4||
                          DCD      0x00000000
                  watchtest
                          DCD      0x00000000
                  CmdStr
000038  53544154          DCB      0x53,0x54,0x41,0x54
00003c  55535f00          DCB      0x55,0x53,0x5f,0x00
000040  004d4f44          DCB      0x00,0x4d,0x4f,0x44
000044  5f000000          DCB      0x5f,0x00,0x00,0x00
000048  00005452          DCB      0x00,0x00,0x54,0x52
00004c  49475f00          DCB      0x49,0x47,0x5f,0x00
000050  00000053          DCB      0x00,0x00,0x00,0x53
000054  45545041          DCB      0x45,0x54,0x50,0x41
000058  52415f00          DCB      0x52,0x41,0x5f,0x00
00005c  5345544c          DCB      0x53,0x45,0x54,0x4c
000060  4953545f          DCB      0x49,0x53,0x54,0x5f
000064  004f5052          DCB      0x00,0x4f,0x50,0x52
000068  45534554          DCB      0x45,0x53,0x45,0x54
00006c  5f00504f          DCB      0x5f,0x00,0x50,0x4f
000070  57495f00          DCB      0x57,0x49,0x5f,0x00
000074  00000041          DCB      0x00,0x00,0x00,0x41
000078  4443565f          DCB      0x44,0x43,0x56,0x5f
00007c  00000000          DCB      0x00,0x00,0x00,0x00
000080  4c4f5749          DCB      0x4c,0x4f,0x57,0x49
000084  5f000000          DCB      0x5f,0x00,0x00,0x00
000088  00484f52          DCB      0x00,0x48,0x4f,0x52
00008c  4c5f0000          DCB      0x4c,0x5f,0x00,0x00
000090  00004c56          DCB      0x00,0x00,0x4c,0x56
000094  4c5f0000          DCB      0x4c,0x5f,0x00,0x00
000098  00000053          DCB      0x00,0x00,0x00,0x53
00009c  57495443          DCB      0x57,0x49,0x54,0x43
0000a0  485f0000          DCB      0x48,0x5f,0x00,0x00
0000a4  43414c56          DCB      0x43,0x41,0x4c,0x56
0000a8  5f000000          DCB      0x5f,0x00,0x00,0x00
0000ac  0043414c          DCB      0x00,0x43,0x41,0x4c
0000b0  495f0000          DCB      0x49,0x5f,0x00,0x00
0000b4  00004341          DCB      0x00,0x00,0x43,0x41
0000b8  4c525f00          DCB      0x4c,0x52,0x5f,0x00
0000bc  00000044          DCB      0x00,0x00,0x00,0x44
0000c0  41435f00          DCB      0x41,0x43,0x5f,0x00
0000c4  00000000          DCB      0x00,0x00,0x00,0x00
0000c8  4f564552          DCB      0x4f,0x56,0x45,0x52
0000cc  5f000000          DCB      0x5f,0x00,0x00,0x00
0000d0  0054454d          DCB      0x00,0x54,0x45,0x4d
0000d4  505f0000          DCB      0x50,0x5f,0x00,0x00
0000d8  0000424f          DCB      0x00,0x00,0x42,0x4f
0000dc  4f545f00          DCB      0x4f,0x54,0x5f,0x00
0000e0  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.34||, DATA, ALIGN=0

                          EXPORTAS ||area_number.34||, ||.data||
                  UART_Buffer_Size
000000  00                DCB      0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  t_USART
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.data||
                  powsetdelay
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\drive\\usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REV16|
#line 129 "E:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_usart_c_7cc17ae7____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REVSH|
#line 144
|__asm___7_usart_c_7cc17ae7____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
