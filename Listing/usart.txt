; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\usart.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\usart.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=525 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\usart.crf --no_multibyte_chars ..\drive\usart.c]
                          THUMB

                          AREA ||i.CalHandle||, CODE, READONLY, ALIGN=2

                  CalHandle PROC
;;;522    //校准处理
;;;523    void CalHandle(u8 mode,u8 range,u32 data)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;524    {
000004  2300              MOVS     r3,#0
;;;525    	if(mode == 0)//测量电压
;;;526    	{
;;;527    		if(range == 0)//低档位低段
;;;528    		{
;;;529    			calflag = 1;
000006  4eff              LDR      r6,|L1.1028|
;;;530    			LOAD_V_SW = 0;
000008  f8dfc3fc          LDR      r12,|L1.1032|
00000c  4614              MOV      r4,r2                 ;524
00000e  2701              MOVS     r7,#1                 ;529
;;;531    			x1 = Vmon_Load_value;
000010  4dfe              LDR      r5,|L1.1036|
;;;532    			y1 = data;
;;;533    		}else if(range == 1){//低档位高段
;;;534    			
;;;535    			x2 = Vmon_Load_value;
;;;536    			y2 = data;
;;;537    			CalPara.TestLV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;538    			CalPara.OffsetLV[0] = (float)y2 - CalPara.TestLV[0]*(float)x2;
;;;539    			
;;;540    			Flag_DAC_OFF=0;
000012  f8dfa400          LDR      r10,|L1.1044|
000016  f8dfb3f8          LDR      r11,|L1.1040|
;;;541    			calflag = 0;
;;;542    		}else if(range == 2){//高档位低段
;;;543    			calflag = 1;
;;;544    			LOAD_V_SW = 1;
;;;545    			x1 = Vmon_Load_value;
;;;546    			y1 = data;
;;;547    		}else if(range == 3){//高档位高段
;;;548    			
;;;549    			x2 = Vmon_Load_value;
;;;550    			y2 = data;
;;;551    			CalPara.TestLV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;552    			CalPara.OffsetLV[1] = (float)y2 - CalPara.TestLV[1]*(float)x2;
;;;553    				//参数写进FLASH
;;;554    			Flag_DAC_OFF=0;
;;;555    			calflag = 0;
;;;556    		}else if(range == 4){//电源控制电压和测量1
;;;557    			calflag = 1;
;;;558    			Contr_Voltage = 3500;
;;;559    			Contr_Current = 5000;
00001a  f8dfe3fc          LDR      lr,|L1.1048|
00001e  f8da2000          LDR      r2,[r10,#0]           ;540
;;;560    			OnOff_GPOI_ResetSet(0,1);
;;;561    		}else if(range == 5){//电源控制电压和测量2
;;;562    			x1 = data;
;;;563    			y1 = Contr_Voltage;
;;;564    			x3 = Vmon_POWE_value;
;;;565    			y3 = data;
;;;566    			Contr_Voltage = 10000;
;;;567    			Contr_Current = 5000;
;;;568    		}else if(range == 6){//电源控制电压和测量3
;;;569    			x2 = data;
;;;570    			y2 = Contr_Voltage;
;;;571    			x4 = Vmon_POWE_value;
;;;572    			y4 = data;
;;;573    			
;;;574    			CalPara.SetPV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;575    			CalPara.OffsetSetPV[0] = (float)y2 - CalPara.SetPV[0]*(float)x2;
;;;576    			
;;;577    			CalPara.TestPV[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;578    			CalPara.OffsetPV[0] = (float)y4 - CalPara.TestPV[0]*(float)x4;
;;;579    			
;;;580    			Flag_DAC_OFF=0;
;;;581    			calflag = 0;
;;;582    			Off_GPOI_ResetSet();
;;;583    		}else if(range == 7){//CV控制低档1
;;;584    			LOAD_MODE = 1;
;;;585    			LOAD_V_SW=0;
;;;586    			GPIO_ResetBits(GPIOB,GPIO_Pin_1);//电压档位为低档
;;;587    			calflag = 1;
;;;588    			Contr_Laod = 1000;
000022  f8df93f8          LDR      r9,|L1.1052|
000026  edd50a05          VLDR     s1,[r5,#0x14]         ;531
00002a  ed950a06          VLDR     s0,[r5,#0x18]         ;531
00002e  edd52a0a          VLDR     s5,[r5,#0x28]         ;531
000032  ed952a09          VLDR     s4,[r5,#0x24]         ;531
000036  f0220208          BIC      r2,r2,#8              ;540
00003a  b120              CBZ      r0,|L1.70|
;;;589    			OnOff_GPOI_ResetSet(2,1);
;;;590    		}else if(range == 8){//CV控制低档2
;;;591    			LOAD_MODE = 1;
;;;592    			LOAD_V_SW=0;
;;;593    			GPIO_ResetBits(GPIOB,GPIO_Pin_1);//电压档位为低档
;;;594    			x1 = data;
;;;595    			y1 = Contr_Laod;
;;;596    			Contr_Laod = 8000;
;;;597    //			OnOff_GPOI_ResetSet(2,1);
;;;598    		}else if(range == 9){//CV控制低档3
;;;599    			x2 = data;
;;;600    			y2 = Contr_Laod;
;;;601    			CalPara.SetCV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;602    			CalPara.OffsetCV[0] = (float)y2 - CalPara.SetCV[0]*(float)x2;
;;;603    				//参数写进FLASH
;;;604    			Flag_DAC_OFF=0;
;;;605    			calflag = 0;
;;;606    			Off_GPOI_ResetSet();
;;;607    		}else if(range == 10){//CV控制高档1
;;;608    			LOAD_MODE = 1;
;;;609    			LOAD_V_SW=1;
;;;610    			GPIO_SetBits(GPIOB,GPIO_Pin_1);//电压档位为高档
;;;611    			calflag = 1;
;;;612    			Contr_Laod = 1000;
;;;613    			OnOff_GPOI_ResetSet(2,1);
;;;614    		}else if(range == 11){//CV控制高档2
;;;615    			LOAD_MODE = 1;
;;;616    			LOAD_V_SW=1;
;;;617    			GPIO_SetBits(GPIOB,GPIO_Pin_1);//电压档位为高档
;;;618    			x1 = data;
;;;619    			y1 = Contr_Laod;
;;;620    			Contr_Laod = 8000;
;;;621    //			OnOff_GPOI_ResetSet(2,1);
;;;622    		}else if(range == 12){//CV控制高档3
;;;623    			x2 = data;
;;;624    			y2 = Contr_Laod;
;;;625    			CalPara.SetCV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;626    			CalPara.OffsetCV[1] = (float)y2 - CalPara.SetCV[1]*(float)x2;
;;;627    				//参数写进FLASH
;;;628    			Flag_DAC_OFF=0;
;;;629    			calflag = 0;
;;;630    			Off_GPOI_ResetSet();
;;;631    		}
;;;632    	}else if(mode == 1){
00003c  2801              CMP      r0,#1
00003e  d074              BEQ      |L1.298|
;;;633    		if(range == 0)//负载电流低档位1
;;;634    		{		
;;;635    			LOAD_I_SW = 0;
;;;636    			Contr_Laod = 6000;
;;;637    			calflag = 1;
;;;638    			OnOff_GPOI_ResetSet(2,1);
;;;639    		}
;;;640    		else if(range == 1)//负载电流低档位2
;;;641    		{
;;;642    			LOAD_I_SW = 0;			
;;;643    			x1 = data;
;;;644    			y1 = Contr_Laod;
;;;645    			x4 = Imon_Load_value;
;;;646    			y4 = data;
;;;647    			Contr_Laod = 23000;
;;;648    		}else if(range == 2)//负载电流低档位3
;;;649    		{
;;;650    			LOAD_I_SW = 0;			
;;;651    			x2 = data;
;;;652    			y2 = Contr_Laod;
;;;653    			x5 = Imon_Load_value;
;;;654    			y5 = data;
;;;655    			Contr_Laod = 56000;
;;;656    		}else if(range == 3){//负载电流低档位4
;;;657    			
;;;658    			x3 = data;
;;;659    			y3 = Contr_Laod;
;;;660    			x6 = Imon_Load_value;
;;;661    			y6 = data;
;;;662    			
;;;663    			CalPara.SetLC[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;664    			CalPara.OffsetLC[0] = (float)y2 - CalPara.SetLC[0]*(float)x2;
;;;665    			CalPara.SetLC[1] = ((float)y3 - (float)y2)/((float)x3 - (float)x2);
;;;666    			CalPara.OffsetLC[1] = (float)y3 - CalPara.SetLC[1]*(float)x3;
;;;667    			
;;;668    			CalPara.TestLC[0] = ((float)y5 - (float)y4)/((float)x5 - (float)x4);
;;;669    			CalPara.OffsetTestLC[0] = (float)y5 - CalPara.TestLC[0]*(float)x5;
;;;670    			CalPara.TestLC[1] = ((float)y6 - (float)y5)/((float)x6 - (float)x5);
;;;671    			CalPara.OffsetTestLC[1] = (float)y6 - CalPara.TestLC[1]*(float)x6;
;;;672    				
;;;673    			Flag_DAC_OFF =0;
;;;674    			calflag = 0;
;;;675    			Off_GPOI_ResetSet();
;;;676    		}else if(range == 4){//负载电流高档位1
;;;677    			LOAD_I_SW = 1;
;;;678    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;679    			Contr_Laod = 6500;
;;;680    			calflag = 1;
;;;681    			OnOff_GPOI_ResetSet(2,1);
;;;682    		}else if(range == 5){//负载电流高档位2
;;;683    			
;;;684    			LOAD_I_SW = 1;
;;;685    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;686    			x1 = data;
;;;687    			y1 = Contr_Laod;
;;;688    			x5 = Imon_Load_value;
;;;689    			y5 = data;
;;;690    			Contr_Laod = 12000;
;;;691    		}else if(range == 6){//负载电流高档位3
;;;692    			
;;;693    			LOAD_I_SW = 1;
;;;694    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;695    			x2 = data;
;;;696    			y2 = Contr_Laod;
;;;697    			x6 = Imon_Load_value;
;;;698    			y6 = data;
;;;699    			Contr_Laod = 20000;
;;;700    		}else if(range == 7){//负载电流高档位4
;;;701    			
;;;702    			LOAD_I_SW = 1;
;;;703    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;704    			x3 = data;
;;;705    			y3 = Contr_Laod;
;;;706    			x7 = Imon_Load_value;
;;;707    			y7 = data;
;;;708    			Contr_Laod = 27000;
;;;709    		}else if(range == 8){//负载电流高档位5
;;;710    			
;;;711    			x4 = data;
;;;712    			y4 = Contr_Laod;
;;;713    			x8 = Imon_Load_value;
;;;714    			y8 = data;
;;;715    			
;;;716    			CalPara.SetLC[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;717    			CalPara.OffsetLC[2] = (float)y2 - CalPara.SetLC[2]*(float)x2;
;;;718    			CalPara.SetLC[3] = ((float)y3 - (float)y2)/((float)x3 - (float)x2);
;;;719    			CalPara.OffsetLC[3] = (float)y3 - CalPara.SetLC[3]*(float)x3;
;;;720    			CalPara.SetLC[4] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;721    			CalPara.OffsetLC[4] = (float)y4 - CalPara.SetLC[4]*(float)x4;
;;;722    			
;;;723    			CalPara.TestLC[2] = ((float)y6 - (float)y5)/((float)x6 - (float)x5);
;;;724    			CalPara.OffsetTestLC[2] = (float)y6 - CalPara.TestLC[2]*(float)x6;
;;;725    			CalPara.TestLC[3] = ((float)y7 - (float)y6)/((float)x7 - (float)x6);
;;;726    			CalPara.OffsetTestLC[3] = (float)y7 - CalPara.TestLC[3]*(float)x7;
;;;727    			CalPara.TestLC[4] = ((float)y8 - (float)y7)/((float)x8 - (float)x7);
;;;728    			CalPara.OffsetTestLC[4] = (float)y8 - CalPara.TestLC[4]*(float)x8;
;;;729    				
;;;730    			Flag_DAC_OFF =0;
;;;731    			calflag = 0;
;;;732    			Off_GPOI_ResetSet();
;;;733    		}else if(range == 9){//电源电流1
;;;734    			Contr_Voltage = 3500;
;;;735    			Contr_Current = 4000;
;;;736    			calflag = 1;
;;;737    			OnOff_GPOI_ResetSet(0,1);
;;;738    		}else if(range == 10){//电源电流2
;;;739    			
;;;740    			x1 = data;
;;;741    			y1 = Contr_Current;
;;;742    			x3 = Imon_POWE_value;
;;;743    			y3 = data;
;;;744    			Contr_Voltage = 3500;
;;;745    			Contr_Current = 14000;
;;;746    		}else if(range == 11){//电源电流3
;;;747    			
;;;748    			x2 = data;
;;;749    			y2 = Contr_Current;
;;;750    			x4 = Imon_POWE_value;
;;;751    			y4 = data;
;;;752    			
;;;753    			CalPara.SetPC[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;754    			CalPara.OffsetPC[0] = (float)y2 - CalPara.SetPC[0]*(float)x2;
;;;755    			
;;;756    			CalPara.TestPC[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;757    			CalPara.OffsetTestPC[0] = (float)y4 - CalPara.TestPC[0]*(float)x4;
;;;758    			
;;;759    			Flag_DAC_OFF=0;
;;;760    			calflag = 0;
;;;761    			Off_GPOI_ResetSet();
;;;762    		}
;;;763    	}else if(mode == 2){
000040  2802              CMP      r0,#2
000042  d073              BEQ      |L1.300|
000044  e24a              B        |L1.1244|
                  |L1.70|
000046  48f6              LDR      r0,|L1.1056|
000048  b1f1              CBZ      r1,|L1.136|
00004a  2901              CMP      r1,#1                 ;533
00004c  d020              BEQ      |L1.144|
00004e  2902              CMP      r1,#2                 ;542
000050  d042              BEQ      |L1.216|
000052  2903              CMP      r1,#3                 ;547
000054  d045              BEQ      |L1.226|
000056  f2413888          MOV      r8,#0x1388            ;559
00005a  2904              CMP      r1,#4                 ;556
00005c  d068              BEQ      |L1.304|
00005e  48f1              LDR      r0,|L1.1060|
000060  2905              CMP      r1,#5                 ;561
000062  d06d              BEQ      |L1.320|
000064  2906              CMP      r1,#6                 ;568
000066  d07f              BEQ      |L1.360|
000068  48ef              LDR      r0,|L1.1064|
00006a  f44f787a          MOV      r8,#0x3e8             ;588
00006e  2907              CMP      r1,#7                 ;583
000070  d074              BEQ      |L1.348|
000072  2908              CMP      r1,#8                 ;590
000074  d073              BEQ      |L1.350|
000076  2909              CMP      r1,#9                 ;598
000078  d072              BEQ      |L1.352|
00007a  290a              CMP      r1,#0xa               ;607
00007c  d071              BEQ      |L1.354|
00007e  290b              CMP      r1,#0xb               ;614
000080  d070              BEQ      |L1.356|
000082  290c              CMP      r1,#0xc               ;622
000084  d06f              BEQ      |L1.358|
000086  e229              B        |L1.1244|
                  |L1.136|
000088  7037              STRB     r7,[r6,#0]            ;529
00008a  f8cc301c          STR      r3,[r12,#0x1c]        ;530  ; Run_Control
00008e  e026              B        |L1.222|
                  |L1.144|
000090  8800              LDRH     r0,[r0,#0]            ;535  ; Vmon_Load_value
000092  ee014a10          VMOV     s2,r4                 ;537
000096  eeb80a40          VCVT.F32.U32 s0,s0                 ;537
00009a  eef80a60          VCVT.F32.U32 s1,s1                 ;537
00009e  eeb81a41          VCVT.F32.U32 s2,s2                 ;537
0000a2  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;535
0000a6  ee311a40          VSUB.F32 s2,s2,s0              ;537
0000aa  ee000a10          VMOV     s0,r0                 ;537
0000ae  eeb80a40          VCVT.F32.U32 s0,s0                 ;537
0000b2  ee700a60          VSUB.F32 s1,s0,s1              ;537
0000b6  ee810a20          VDIV.F32 s0,s2,s1              ;537
0000ba  ee000a90          VMOV     s1,r0                 ;538
0000be  eeb81a60          VCVT.F32.U32 s2,s1                 ;538
0000c2  ee004a90          VMOV     s1,r4                 ;538
0000c6  eef80a60          VCVT.F32.U32 s1,s1                 ;538
0000ca  ed8b0a00          VSTR     s0,[r11,#0]           ;537
0000ce  ee400a41          VMLS.F32 s1,s0,s2              ;538
0000d2  edcb0a04          VSTR     s1,[r11,#0x10]        ;538
0000d6  e390              B        |L1.2042|
                  |L1.216|
0000d8  7037              STRB     r7,[r6,#0]            ;543
0000da  f8cc701c          STR      r7,[r12,#0x1c]        ;544  ; Run_Control
                  |L1.222|
0000de  8800              LDRH     r0,[r0,#0]            ;531  ; Vmon_Load_value
0000e0  e3bc              B        |L1.2140|
                  |L1.226|
0000e2  8800              LDRH     r0,[r0,#0]            ;549  ; Vmon_Load_value
0000e4  ee014a10          VMOV     s2,r4                 ;551
0000e8  eeb80a40          VCVT.F32.U32 s0,s0                 ;551
0000ec  eef80a60          VCVT.F32.U32 s1,s1                 ;551
0000f0  eeb81a41          VCVT.F32.U32 s2,s2                 ;551
0000f4  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;549
0000f8  ee311a40          VSUB.F32 s2,s2,s0              ;551
0000fc  ee000a10          VMOV     s0,r0                 ;551
000100  eeb80a40          VCVT.F32.U32 s0,s0                 ;551
000104  ee700a60          VSUB.F32 s1,s0,s1              ;551
000108  ee810a20          VDIV.F32 s0,s2,s1              ;551
00010c  ee000a90          VMOV     s1,r0                 ;552
000110  eeb81a60          VCVT.F32.U32 s2,s1                 ;552
000114  ee004a90          VMOV     s1,r4                 ;552
000118  eef80a60          VCVT.F32.U32 s1,s1                 ;552
00011c  ed8b0a01          VSTR     s0,[r11,#4]           ;551
000120  ee400a41          VMLS.F32 s1,s0,s2              ;552
000124  edcb0a05          VSTR     s1,[r11,#0x14]        ;552
000128  e367              B        |L1.2042|
                  |L1.298|
00012a  e0df              B        |L1.748|
                  |L1.300|
00012c  e324              B        |L1.1912|
00012e  e7ff              B        |L1.304|
                  |L1.304|
000130  7037              STRB     r7,[r6,#0]            ;557
000132  48be              LDR      r0,|L1.1068|
000134  f64051ac          MOV      r1,#0xdac             ;558
000138  8001              STRH     r1,[r0,#0]            ;558
00013a  f8ae8000          STRH     r8,[lr,#0]            ;559
00013e  e2c1              B        |L1.1732|
                  |L1.320|
000140  49ba              LDR      r1,|L1.1068|
000142  616c              STR      r4,[r5,#0x14]         ;563  ; x1
000144  880a              LDRH     r2,[r1,#0]            ;563  ; Contr_Voltage
000146  61aa              STR      r2,[r5,#0x18]         ;564  ; y1
000148  8800              LDRH     r0,[r0,#0]            ;564  ; Vmon_POWE_value
00014a  e9c50409          STRD     r0,r4,[r5,#0x24]      ;564
00014e  f2427010          MOV      r0,#0x2710            ;566
000152  8008              STRH     r0,[r1,#0]            ;566
000154  f8ae8000          STRH     r8,[lr,#0]            ;567
000158  e1c0              B        |L1.1244|
00015a  e005              B        |L1.360|
                  |L1.348|
00015c  e04d              B        |L1.506|
                  |L1.350|
00015e  e057              B        |L1.528|
                  |L1.352|
000160  e05e              B        |L1.544|
                  |L1.354|
000162  e082              B        |L1.618|
                  |L1.356|
000164  e08e              B        |L1.644|
                  |L1.358|
000166  e09c              B        |L1.674|
                  |L1.360|
000168  49b0              LDR      r1,|L1.1068|
00016a  61ec              STR      r4,[r5,#0x1c]         ;570  ; x2
00016c  8809              LDRH     r1,[r1,#0]            ;570  ; Contr_Voltage
00016e  6229              STR      r1,[r5,#0x20]         ;571  ; y2
000170  8800              LDRH     r0,[r0,#0]            ;571  ; Vmon_POWE_value
000172  ee011a10          VMOV     s2,r1                 ;574
000176  eeb80a40          VCVT.F32.U32 s0,s0                 ;574
00017a  eef80a60          VCVT.F32.U32 s1,s1                 ;574
00017e  eeb81a41          VCVT.F32.U32 s2,s2                 ;574
000182  e9c5040b          STRD     r0,r4,[r5,#0x2c]      ;571
000186  ee311a40          VSUB.F32 s2,s2,s0              ;574
00018a  ee004a10          VMOV     s0,r4                 ;574
00018e  465d              MOV      r5,r11                ;574
000190  eeb80a40          VCVT.F32.U32 s0,s0                 ;574
000194  ee700a60          VSUB.F32 s1,s0,s1              ;574
000198  ee810a20          VDIV.F32 s0,s2,s1              ;574
00019c  ee004a90          VMOV     s1,r4                 ;575
0001a0  eeb81a60          VCVT.F32.U32 s2,s1                 ;575
0001a4  ee001a90          VMOV     s1,r1                 ;575
0001a8  eef80a60          VCVT.F32.U32 s1,s1                 ;575
0001ac  ed8b0a02          VSTR     s0,[r11,#8]           ;574
0001b0  ee400a41          VMLS.F32 s1,s0,s2              ;575
0001b4  ee004a10          VMOV     s0,r4                 ;577
0001b8  eeb81a42          VCVT.F32.U32 s2,s4                 ;577
0001bc  eeb80a40          VCVT.F32.U32 s0,s0                 ;577
0001c0  edcb0a06          VSTR     s1,[r11,#0x18]        ;575
0001c4  eef80a62          VCVT.F32.U32 s1,s5                 ;577
0001c8  ee700a60          VSUB.F32 s1,s0,s1              ;577
0001cc  ee000a10          VMOV     s0,r0                 ;577
0001d0  eeb80a40          VCVT.F32.U32 s0,s0                 ;577
0001d4  ee301a41          VSUB.F32 s2,s0,s2              ;577
0001d8  ee800a81          VDIV.F32 s0,s1,s2              ;577
0001dc  ee000a90          VMOV     s1,r0                 ;578
0001e0  eeb81a60          VCVT.F32.U32 s2,s1                 ;578
0001e4  ee004a90          VMOV     s1,r4                 ;578
0001e8  eef80a60          VCVT.F32.U32 s1,s1                 ;578
0001ec  ed850a03          VSTR     s0,[r5,#0xc]          ;577
0001f0  ee400a41          VMLS.F32 s1,s0,s2              ;578
0001f4  edcb0a07          VSTR     s1,[r11,#0x1c]        ;578
0001f8  e255              B        |L1.1702|
                  |L1.506|
0001fa  f8cc7018          STR      r7,[r12,#0x18]        ;584  ; Run_Control
0001fe  f8cc301c          STR      r3,[r12,#0x1c]        ;585  ; Run_Control
000202  2102              MOVS     r1,#2                 ;586
000204  f7fffffe          BL       GPIO_ResetBits
000208  7037              STRB     r7,[r6,#0]            ;587
00020a  f8a98000          STRH     r8,[r9,#0]            ;588
00020e  e036              B        |L1.638|
                  |L1.528|
000210  f8cc7018          STR      r7,[r12,#0x18]        ;591  ; Run_Control
000214  f8cc301c          STR      r3,[r12,#0x1c]        ;592  ; Run_Control
000218  2102              MOVS     r1,#2                 ;593
00021a  f7fffffe          BL       GPIO_ResetBits
00021e  e038              B        |L1.658|
                  |L1.544|
000220  61ec              STR      r4,[r5,#0x1c]         ;600  ; x2
000222  f8b90000          LDRH     r0,[r9,#0]            ;600  ; Contr_Laod
000226  eeb80a40          VCVT.F32.U32 s0,s0                 ;601
00022a  ee010a10          VMOV     s2,r0                 ;601
00022e  eef80a60          VCVT.F32.U32 s1,s1                 ;601
000232  6228              STR      r0,[r5,#0x20]         ;601  ; y2
000234  eeb81a41          VCVT.F32.U32 s2,s2                 ;601
000238  ee311a40          VSUB.F32 s2,s2,s0              ;601
00023c  ee004a10          VMOV     s0,r4                 ;601
000240  eeb80a40          VCVT.F32.U32 s0,s0                 ;601
000244  ee700a60          VSUB.F32 s1,s0,s1              ;601
000248  ee810a20          VDIV.F32 s0,s2,s1              ;601
00024c  ee004a90          VMOV     s1,r4                 ;602
000250  eeb81a60          VCVT.F32.U32 s2,s1                 ;602
000254  ee000a90          VMOV     s1,r0                 ;602
000258  eef80a60          VCVT.F32.U32 s1,s1                 ;602
00025c  ed8b0a0d          VSTR     s0,[r11,#0x34]        ;601
000260  ee400a41          VMLS.F32 s1,s0,s2              ;602
000264  edcb0a1b          VSTR     s1,[r11,#0x6c]        ;602
000268  e21d              B        |L1.1702|
                  |L1.618|
00026a  f8cc7018          STR      r7,[r12,#0x18]        ;608  ; Run_Control
00026e  f8cc701c          STR      r7,[r12,#0x1c]        ;609  ; Run_Control
000272  2102              MOVS     r1,#2                 ;610
000274  f7fffffe          BL       GPIO_SetBits
000278  7037              STRB     r7,[r6,#0]            ;611
00027a  f8a98000          STRH     r8,[r9,#0]            ;612
                  |L1.638|
00027e  2101              MOVS     r1,#1                 ;589
000280  2002              MOVS     r0,#2                 ;589
000282  e129              B        |L1.1240|
                  |L1.644|
000284  f8cc7018          STR      r7,[r12,#0x18]        ;615  ; Run_Control
000288  f8cc701c          STR      r7,[r12,#0x1c]        ;616  ; Run_Control
00028c  2102              MOVS     r1,#2                 ;617
00028e  f7fffffe          BL       GPIO_SetBits
                  |L1.658|
000292  616c              STR      r4,[r5,#0x14]         ;595  ; x1
000294  f8b91000          LDRH     r1,[r9,#0]            ;595  ; Contr_Laod
000298  4648              MOV      r0,r9                 ;595
00029a  61a9              STR      r1,[r5,#0x18]         ;596  ; y1
00029c  f44f51fa          MOV      r1,#0x1f40            ;596
0002a0  e06a              B        |L1.888|
                  |L1.674|
0002a2  61ec              STR      r4,[r5,#0x1c]         ;624  ; x2
0002a4  f8b90000          LDRH     r0,[r9,#0]            ;624  ; Contr_Laod
0002a8  eeb80a40          VCVT.F32.U32 s0,s0                 ;625
0002ac  ee010a10          VMOV     s2,r0                 ;625
0002b0  eef80a60          VCVT.F32.U32 s1,s1                 ;625
0002b4  6228              STR      r0,[r5,#0x20]         ;625  ; y2
0002b6  eeb81a41          VCVT.F32.U32 s2,s2                 ;625
0002ba  ee311a40          VSUB.F32 s2,s2,s0              ;625
0002be  ee004a10          VMOV     s0,r4                 ;625
0002c2  eeb80a40          VCVT.F32.U32 s0,s0                 ;625
0002c6  ee700a60          VSUB.F32 s1,s0,s1              ;625
0002ca  ee810a20          VDIV.F32 s0,s2,s1              ;625
0002ce  ee004a90          VMOV     s1,r4                 ;626
0002d2  eeb81a60          VCVT.F32.U32 s2,s1                 ;626
0002d6  ee000a90          VMOV     s1,r0                 ;626
0002da  eef80a60          VCVT.F32.U32 s1,s1                 ;626
0002de  ed8b0a0e          VSTR     s0,[r11,#0x38]        ;625
0002e2  ee400a41          VMLS.F32 s1,s0,s2              ;626
0002e6  edcb0a1c          VSTR     s1,[r11,#0x70]        ;626
0002ea  e1dc              B        |L1.1702|
                  |L1.748|
0002ec  b321              CBZ      r1,|L1.824|
0002ee  2901              CMP      r1,#1                 ;640
0002f0  d027              BEQ      |L1.834|
0002f2  2902              CMP      r1,#2                 ;648
0002f4  d033              BEQ      |L1.862|
0002f6  f8df8114          LDR      r8,|L1.1036|
0002fa  2903              CMP      r1,#3                 ;656
0002fc  edd83a0e          VLDR     s7,[r8,#0x38]         ;531
000300  ed983a0d          VLDR     s6,[r8,#0x34]         ;531
000304  edd81a08          VLDR     s3,[r8,#0x20]         ;531
000308  ed981a07          VLDR     s2,[r8,#0x1c]         ;531
00030c  d036              BEQ      |L1.892|
00030e  4848              LDR      r0,|L1.1072|
000310  f44f6800          MOV      r8,#0x800             ;678
000314  2904              CMP      r1,#4                 ;676
000316  d06d              BEQ      |L1.1012|
000318  2905              CMP      r1,#5                 ;682
00031a  d06c              BEQ      |L1.1014|
00031c  2906              CMP      r1,#6                 ;691
00031e  d06b              BEQ      |L1.1016|
000320  2907              CMP      r1,#7                 ;700
000322  d06a              BEQ      |L1.1018|
000324  2908              CMP      r1,#8                 ;709
000326  d069              BEQ      |L1.1020|
000328  2909              CMP      r1,#9                 ;733
00032a  d068              BEQ      |L1.1022|
00032c  4f41              LDR      r7,|L1.1076|
00032e  290a              CMP      r1,#0xa               ;738
000330  d066              BEQ      |L1.1024|
000332  290b              CMP      r1,#0xb               ;746
000334  d065              BEQ      |L1.1026|
000336  e32b              B        |L1.2448|
                  |L1.824|
000338  f8cc3020          STR      r3,[r12,#0x20]        ;635  ; Run_Control
00033c  f2417170          MOV      r1,#0x1770            ;636
000340  e0c6              B        |L1.1232|
                  |L1.834|
000342  f8cc3020          STR      r3,[r12,#0x20]        ;642  ; Run_Control
000346  616c              STR      r4,[r5,#0x14]         ;644  ; x1
000348  f8b91000          LDRH     r1,[r9,#0]            ;644  ; Contr_Laod
00034c  4648              MOV      r0,r9                 ;644
00034e  61a9              STR      r1,[r5,#0x18]         ;645  ; y1
000350  4939              LDR      r1,|L1.1080|
000352  8809              LDRH     r1,[r1,#0]            ;645  ; Imon_Load_value
000354  e9c5140b          STRD     r1,r4,[r5,#0x2c]      ;645
000358  f64511d8          MOV      r1,#0x59d8            ;647
00035c  e00c              B        |L1.888|
                  |L1.862|
00035e  f8cc3020          STR      r3,[r12,#0x20]        ;650  ; Run_Control
000362  61ec              STR      r4,[r5,#0x1c]         ;652  ; x2
000364  f8b91000          LDRH     r1,[r9,#0]            ;652  ; Contr_Laod
000368  4648              MOV      r0,r9                 ;652
00036a  6229              STR      r1,[r5,#0x20]         ;653  ; y2
00036c  4932              LDR      r1,|L1.1080|
00036e  8809              LDRH     r1,[r1,#0]            ;653  ; Imon_Load_value
000370  e9c5140d          STRD     r1,r4,[r5,#0x34]      ;653
000374  f64d21c0          MOV      r1,#0xdac0            ;655
                  |L1.888|
000378  8001              STRH     r1,[r0,#0]            ;647
00037a  e309              B        |L1.2448|
                  |L1.892|
00037c  626c              STR      r4,[r5,#0x24]         ;659  ; x3
00037e  f8b97000          LDRH     r7,[r9,#0]            ;659  ; Contr_Laod
000382  482d              LDR      r0,|L1.1080|
000384  62af              STR      r7,[r5,#0x28]         ;660  ; y3
000386  8801              LDRH     r1,[r0,#0]            ;660  ; Imon_Load_value
000388  eeb82a61          VCVT.F32.U32 s4,s3                 ;663
00038c  eeb80a40          VCVT.F32.U32 s0,s0                 ;663
000390  eef80a60          VCVT.F32.U32 s1,s1                 ;663
000394  e9c5140f          STRD     r1,r4,[r5,#0x3c]      ;663
000398  ee322a40          VSUB.F32 s4,s4,s0              ;663
00039c  eeb80a41          VCVT.F32.U32 s0,s2                 ;663
0003a0  4658              MOV      r0,r11                ;663
0003a2  ee700a60          VSUB.F32 s1,s0,s1              ;663
0003a6  ee820a20          VDIV.F32 s0,s4,s1              ;663
0003aa  eeb82a41          VCVT.F32.U32 s4,s2                 ;664
0003ae  eef80a61          VCVT.F32.U32 s1,s3                 ;664
0003b2  eeb81a41          VCVT.F32.U32 s2,s2                 ;665
0003b6  ed8b0a08          VSTR     s0,[r11,#0x20]        ;663
0003ba  ee400a42          VMLS.F32 s1,s0,s4              ;664
0003be  ee007a10          VMOV     s0,r7                 ;665
0003c2  eeb80a40          VCVT.F32.U32 s0,s0                 ;665
0003c6  edcb0a16          VSTR     s1,[r11,#0x58]        ;664
0003ca  eef80a61          VCVT.F32.U32 s1,s3                 ;665
0003ce  ee700a60          VSUB.F32 s1,s0,s1              ;665
0003d2  ee004a10          VMOV     s0,r4                 ;665
0003d6  eeb80a40          VCVT.F32.U32 s0,s0                 ;665
0003da  ee301a41          VSUB.F32 s2,s0,s2              ;665
0003de  ee800a81          VDIV.F32 s0,s1,s2              ;665
0003e2  ee004a90          VMOV     s1,r4                 ;666
0003e6  eeb81a60          VCVT.F32.U32 s2,s1                 ;666
0003ea  ee007a90          VMOV     s1,r7                 ;666
0003ee  ed8b0a09          VSTR     s0,[r11,#0x24]        ;665
0003f2  e023              B        |L1.1084|
                  |L1.1012|
0003f4  e065              B        |L1.1218|
                  |L1.1014|
0003f6  e072              B        |L1.1246|
                  |L1.1016|
0003f8  e082              B        |L1.1280|
                  |L1.1018|
0003fa  e092              B        |L1.1314|
                  |L1.1020|
0003fc  e0a2              B        |L1.1348|
                  |L1.1022|
0003fe  e158              B        |L1.1714|
                  |L1.1024|
000400  e163              B        |L1.1738|
                  |L1.1026|
000402  e170              B        |L1.1766|
                  |L1.1028|
                          DCD      calflag
                  |L1.1032|
                          DCD      Run_Control
                  |L1.1036|
                          DCD      ||.data||
                  |L1.1040|
                          DCD      CalPara
                  |L1.1044|
                          DCD      flagB
                  |L1.1048|
                          DCD      Contr_Current
                  |L1.1052|
                          DCD      Contr_Laod
                  |L1.1056|
                          DCD      Vmon_Load_value
                  |L1.1060|
                          DCD      Vmon_POWE_value
                  |L1.1064|
                          DCD      0x40020400
                  |L1.1068|
                          DCD      Contr_Voltage
                  |L1.1072|
                          DCD      0x40020800
                  |L1.1076|
                          DCD      Imon_POWE_value
                  |L1.1080|
                          DCD      Imon_Load_value
                  |L1.1084|
00043c  eef80a60          VCVT.F32.U32 s1,s1                 ;666
000440  ee400a41          VMLS.F32 s1,s0,s2              ;666
000444  eeb81a43          VCVT.F32.U32 s2,s6                 ;668
000448  edc00a17          VSTR     s1,[r0,#0x5c]         ;666
00044c  ed950a0c          VLDR     s0,[r5,#0x30]         ;668
000450  eef80a63          VCVT.F32.U32 s1,s7                 ;668
000454  eeb80a40          VCVT.F32.U32 s0,s0                 ;668
000458  ee700ac0          VSUB.F32 s1,s1,s0              ;668
00045c  ed950a0b          VLDR     s0,[r5,#0x2c]         ;668
000460  eeb80a40          VCVT.F32.U32 s0,s0                 ;668
000464  ee311a40          VSUB.F32 s2,s2,s0              ;668
000468  ee800a81          VDIV.F32 s0,s1,s2              ;668
00046c  eeb81a43          VCVT.F32.U32 s2,s6                 ;669
000470  eef80a63          VCVT.F32.U32 s1,s7                 ;669
000474  ed800a0f          VSTR     s0,[r0,#0x3c]         ;668
000478  ee400a41          VMLS.F32 s1,s0,s2              ;669
00047c  ee004a10          VMOV     s0,r4                 ;670
000480  eeb81a43          VCVT.F32.U32 s2,s6                 ;670
000484  eeb80a40          VCVT.F32.U32 s0,s0                 ;670
000488  edc00a1d          VSTR     s1,[r0,#0x74]         ;669
00048c  eef80a63          VCVT.F32.U32 s1,s7                 ;670
000490  ee700a60          VSUB.F32 s1,s0,s1              ;670
000494  ee001a10          VMOV     s0,r1                 ;670
000498  eeb80a40          VCVT.F32.U32 s0,s0                 ;670
00049c  ee301a41          VSUB.F32 s2,s0,s2              ;670
0004a0  ee800a81          VDIV.F32 s0,s1,s2              ;670
0004a4  ee001a90          VMOV     s1,r1                 ;671
0004a8  eeb81a60          VCVT.F32.U32 s2,s1                 ;671
0004ac  ee004a90          VMOV     s1,r4                 ;671
0004b0  eef80a60          VCVT.F32.U32 s1,s1                 ;671
0004b4  ed800a10          VSTR     s0,[r0,#0x40]         ;670
0004b8  ee400a41          VMLS.F32 s1,s0,s2              ;671
0004bc  edcb0a1e          VSTR     s1,[r11,#0x78]        ;671
0004c0  e0f1              B        |L1.1702|
                  |L1.1218|
0004c2  f8cc7020          STR      r7,[r12,#0x20]        ;677  ; Run_Control
0004c6  4641              MOV      r1,r8                 ;678
0004c8  f7fffffe          BL       GPIO_ResetBits
0004cc  f6411164          MOV      r1,#0x1964            ;679
                  |L1.1232|
0004d0  f8a91000          STRH     r1,[r9,#0]            ;636
0004d4  7037              STRB     r7,[r6,#0]            ;637
0004d6  e6d2              B        |L1.638|
                  |L1.1240|
0004d8  f7fffffe          BL       OnOff_GPOI_ResetSet
                  |L1.1244|
0004dc  e258              B        |L1.2448|
                  |L1.1246|
0004de  f8cc7020          STR      r7,[r12,#0x20]        ;684  ; Run_Control
0004e2  4641              MOV      r1,r8                 ;685
0004e4  f7fffffe          BL       GPIO_ResetBits
0004e8  616c              STR      r4,[r5,#0x14]         ;687  ; x1
0004ea  f8b91000          LDRH     r1,[r9,#0]            ;687  ; Contr_Laod
0004ee  4648              MOV      r0,r9                 ;687
0004f0  61a9              STR      r1,[r5,#0x18]         ;688  ; y1
0004f2  49fe              LDR      r1,|L1.2284|
0004f4  8809              LDRH     r1,[r1,#0]            ;688  ; Imon_Load_value
0004f6  e9c5140d          STRD     r1,r4,[r5,#0x34]      ;688
0004fa  f64261e0          MOV      r1,#0x2ee0            ;690
0004fe  e73b              B        |L1.888|
                  |L1.1280|
000500  f8cc7020          STR      r7,[r12,#0x20]        ;693  ; Run_Control
000504  4641              MOV      r1,r8                 ;694
000506  f7fffffe          BL       GPIO_ResetBits
00050a  61ec              STR      r4,[r5,#0x1c]         ;696  ; x2
00050c  f8b91000          LDRH     r1,[r9,#0]            ;696  ; Contr_Laod
000510  4648              MOV      r0,r9                 ;696
000512  6229              STR      r1,[r5,#0x20]         ;697  ; y2
000514  49f5              LDR      r1,|L1.2284|
000516  8809              LDRH     r1,[r1,#0]            ;697  ; Imon_Load_value
000518  e9c5140f          STRD     r1,r4,[r5,#0x3c]      ;697
00051c  f6446120          MOV      r1,#0x4e20            ;699
000520  e72a              B        |L1.888|
                  |L1.1314|
000522  f8cc7020          STR      r7,[r12,#0x20]        ;702  ; Run_Control
000526  4641              MOV      r1,r8                 ;703
000528  f7fffffe          BL       GPIO_ResetBits
00052c  626c              STR      r4,[r5,#0x24]         ;705  ; x3
00052e  f8b91000          LDRH     r1,[r9,#0]            ;705  ; Contr_Laod
000532  4648              MOV      r0,r9                 ;705
000534  62a9              STR      r1,[r5,#0x28]         ;706  ; y3
000536  49ed              LDR      r1,|L1.2284|
000538  8809              LDRH     r1,[r1,#0]            ;706  ; Imon_Load_value
00053a  e9c51411          STRD     r1,r4,[r5,#0x44]      ;706
00053e  f6461178          MOV      r1,#0x6978            ;708
000542  e719              B        |L1.888|
                  |L1.1348|
000544  62ec              STR      r4,[r5,#0x2c]         ;712  ; x4
000546  f8b97000          LDRH     r7,[r9,#0]            ;712  ; Contr_Laod
00054a  48e8              LDR      r0,|L1.2284|
00054c  632f              STR      r7,[r5,#0x30]         ;713  ; y4
00054e  8801              LDRH     r1,[r0,#0]            ;713  ; Imon_Load_value
000550  eeb84a61          VCVT.F32.U32 s8,s3                 ;716
000554  eeb80a40          VCVT.F32.U32 s0,s0                 ;716
000558  eef80a60          VCVT.F32.U32 s1,s1                 ;716
00055c  e9c51413          STRD     r1,r4,[r5,#0x4c]      ;716
000560  ee344a40          VSUB.F32 s8,s8,s0              ;716
000564  eeb80a41          VCVT.F32.U32 s0,s2                 ;716
000568  4658              MOV      r0,r11                ;716
00056a  ee700a60          VSUB.F32 s1,s0,s1              ;716
00056e  ee840a20          VDIV.F32 s0,s8,s1              ;716
000572  eeb84a41          VCVT.F32.U32 s8,s2                 ;717
000576  eef80a61          VCVT.F32.U32 s1,s3                 ;717
00057a  eeb81a41          VCVT.F32.U32 s2,s2                 ;718
00057e  ed8b0a0a          VSTR     s0,[r11,#0x28]        ;716
000582  ee400a44          VMLS.F32 s1,s0,s8              ;717
000586  eeb80a62          VCVT.F32.U32 s0,s5                 ;718
00058a  edcb0a18          VSTR     s1,[r11,#0x60]        ;717
00058e  eef80a61          VCVT.F32.U32 s1,s3                 ;718
000592  ee700a60          VSUB.F32 s1,s0,s1              ;718
000596  eeb80a42          VCVT.F32.U32 s0,s4                 ;718
00059a  ee301a41          VSUB.F32 s2,s0,s2              ;718
00059e  ee800a81          VDIV.F32 s0,s1,s2              ;718
0005a2  eeb81a42          VCVT.F32.U32 s2,s4                 ;719
0005a6  eef80a62          VCVT.F32.U32 s1,s5                 ;719
0005aa  ed8b0a0b          VSTR     s0,[r11,#0x2c]        ;718
0005ae  ee400a41          VMLS.F32 s1,s0,s2              ;719
0005b2  ee007a10          VMOV     s0,r7                 ;720
0005b6  eeb81a42          VCVT.F32.U32 s2,s4                 ;720
0005ba  eeb82a43          VCVT.F32.U32 s4,s6                 ;723
0005be  eeb80a40          VCVT.F32.U32 s0,s0                 ;720
0005c2  edc00a19          VSTR     s1,[r0,#0x64]         ;719
0005c6  eef80a62          VCVT.F32.U32 s1,s5                 ;720
0005ca  ee700a60          VSUB.F32 s1,s0,s1              ;720
0005ce  ee004a10          VMOV     s0,r4                 ;720
0005d2  eeb80a40          VCVT.F32.U32 s0,s0                 ;720
0005d6  ee301a41          VSUB.F32 s2,s0,s2              ;720
0005da  ee800a81          VDIV.F32 s0,s1,s2              ;720
0005de  ee004a90          VMOV     s1,r4                 ;721
0005e2  eeb81a60          VCVT.F32.U32 s2,s1                 ;721
0005e6  ee007a90          VMOV     s1,r7                 ;721
0005ea  eef80a60          VCVT.F32.U32 s1,s1                 ;721
0005ee  ed800a0c          VSTR     s0,[r0,#0x30]         ;720
0005f2  ee400a41          VMLS.F32 s1,s0,s2              ;721
0005f6  eeb81a63          VCVT.F32.U32 s2,s7                 ;723
0005fa  edc00a1a          VSTR     s1,[r0,#0x68]         ;721
0005fe  ed950a10          VLDR     s0,[r5,#0x40]         ;723
000602  eef80a40          VCVT.F32.U32 s1,s0                 ;723
000606  ee701ac1          VSUB.F32 s3,s1,s2              ;723
00060a  edd50a0f          VLDR     s1,[r5,#0x3c]         ;723
00060e  eeb81a60          VCVT.F32.U32 s2,s1                 ;723
000612  ee312a42          VSUB.F32 s4,s2,s4              ;723
000616  ee811a82          VDIV.F32 s2,s3,s4              ;723
00061a  eeb82a60          VCVT.F32.U32 s4,s1                 ;724
00061e  eef81a40          VCVT.F32.U32 s3,s0                 ;724
000622  eeb80a40          VCVT.F32.U32 s0,s0                 ;725
000626  eef80a60          VCVT.F32.U32 s1,s1                 ;725
00062a  ed801a11          VSTR     s2,[r0,#0x44]         ;723
00062e  ee411a42          VMLS.F32 s3,s2,s4              ;724
000632  edc01a1f          VSTR     s3,[r0,#0x7c]         ;724
000636  ed951a12          VLDR     s2,[r5,#0x48]         ;725
00063a  eef81a41          VCVT.F32.U32 s3,s2                 ;725
00063e  ee711ac0          VSUB.F32 s3,s3,s0              ;725
000642  ed950a11          VLDR     s0,[r5,#0x44]         ;725
000646  eeb82a40          VCVT.F32.U32 s4,s0                 ;725
00064a  ee322a60          VSUB.F32 s4,s4,s1              ;725
00064e  eec10a82          VDIV.F32 s1,s3,s4              ;725
000652  eeb82a40          VCVT.F32.U32 s4,s0                 ;726
000656  eef81a41          VCVT.F32.U32 s3,s2                 ;726
00065a  eeb81a41          VCVT.F32.U32 s2,s2                 ;727
00065e  edc00a12          VSTR     s1,[r0,#0x48]         ;725
000662  ee401ac2          VMLS.F32 s3,s1,s4              ;726
000666  ee004a90          VMOV     s1,r4                 ;727
00066a  eef80a60          VCVT.F32.U32 s1,s1                 ;727
00066e  edc01a20          VSTR     s3,[r0,#0x80]         ;726
000672  ee301ac1          VSUB.F32 s2,s1,s2              ;727
000676  ee001a90          VMOV     s1,r1                 ;727
00067a  eeb80a40          VCVT.F32.U32 s0,s0                 ;727
00067e  eef80a60          VCVT.F32.U32 s1,s1                 ;727
000682  ee700ac0          VSUB.F32 s1,s1,s0              ;727
000686  ee810a20          VDIV.F32 s0,s2,s1              ;727
00068a  ee001a90          VMOV     s1,r1                 ;728
00068e  eeb81a60          VCVT.F32.U32 s2,s1                 ;728
000692  ee004a90          VMOV     s1,r4                 ;728
000696  eef80a60          VCVT.F32.U32 s1,s1                 ;728
00069a  ed800a13          VSTR     s0,[r0,#0x4c]         ;727
00069e  ee400a41          VMLS.F32 s1,s0,s2              ;728
0006a2  edcb0a21          VSTR     s1,[r11,#0x84]        ;728
                  |L1.1702|
0006a6  f8ca2000          STR      r2,[r10,#0]           ;674  ; flagB
0006aa  7033              STRB     r3,[r6,#0]            ;674
0006ac  f7fffffe          BL       Off_GPOI_ResetSet
0006b0  e16e              B        |L1.2448|
                  |L1.1714|
0006b2  498f              LDR      r1,|L1.2288|
0006b4  f64050ac          MOV      r0,#0xdac             ;734
0006b8  8008              STRH     r0,[r1,#0]            ;734
0006ba  f44f617a          MOV      r1,#0xfa0             ;735
0006be  f8ae1000          STRH     r1,[lr,#0]            ;735
0006c2  7037              STRB     r7,[r6,#0]            ;736
                  |L1.1732|
0006c4  2101              MOVS     r1,#1                 ;560
0006c6  2000              MOVS     r0,#0                 ;560
0006c8  e706              B        |L1.1240|
                  |L1.1738|
0006ca  616c              STR      r4,[r5,#0x14]         ;741  ; x1
0006cc  f8be1000          LDRH     r1,[lr,#0]            ;741  ; Contr_Current
0006d0  4670              MOV      r0,lr                 ;741
0006d2  61a9              STR      r1,[r5,#0x18]         ;742  ; y1
0006d4  8839              LDRH     r1,[r7,#0]            ;742  ; Imon_POWE_value
0006d6  e9c51409          STRD     r1,r4,[r5,#0x24]      ;742
0006da  4985              LDR      r1,|L1.2288|
0006dc  f64052ac          MOV      r2,#0xdac             ;744
0006e0  800a              STRH     r2,[r1,#0]            ;744
0006e2  0091              LSLS     r1,r2,#2              ;745
0006e4  e648              B        |L1.888|
                  |L1.1766|
0006e6  61ec              STR      r4,[r5,#0x1c]         ;749  ; x2
0006e8  f8be0000          LDRH     r0,[lr,#0]            ;749  ; Contr_Current
0006ec  6228              STR      r0,[r5,#0x20]         ;750  ; y2
0006ee  8839              LDRH     r1,[r7,#0]            ;750  ; Imon_POWE_value
0006f0  ee010a10          VMOV     s2,r0                 ;753
0006f4  eeb80a40          VCVT.F32.U32 s0,s0                 ;753
0006f8  eef80a60          VCVT.F32.U32 s1,s1                 ;753
0006fc  eeb81a41          VCVT.F32.U32 s2,s2                 ;753
000700  e9c5140b          STRD     r1,r4,[r5,#0x2c]      ;750
000704  ee311a40          VSUB.F32 s2,s2,s0              ;753
000708  ee004a10          VMOV     s0,r4                 ;753
00070c  465d              MOV      r5,r11                ;753
00070e  eeb80a40          VCVT.F32.U32 s0,s0                 ;753
000712  ee700a60          VSUB.F32 s1,s0,s1              ;753
000716  ee810a20          VDIV.F32 s0,s2,s1              ;753
00071a  ee004a90          VMOV     s1,r4                 ;754
00071e  eeb81a60          VCVT.F32.U32 s2,s1                 ;754
000722  ee000a90          VMOV     s1,r0                 ;754
000726  eef80a60          VCVT.F32.U32 s1,s1                 ;754
00072a  ed8b0a14          VSTR     s0,[r11,#0x50]        ;753
00072e  ee400a41          VMLS.F32 s1,s0,s2              ;754
000732  ee004a10          VMOV     s0,r4                 ;756
000736  eeb81a42          VCVT.F32.U32 s2,s4                 ;756
00073a  eeb80a40          VCVT.F32.U32 s0,s0                 ;756
00073e  edcb0a22          VSTR     s1,[r11,#0x88]        ;754
000742  eef80a62          VCVT.F32.U32 s1,s5                 ;756
000746  ee700a60          VSUB.F32 s1,s0,s1              ;756
00074a  ee001a10          VMOV     s0,r1                 ;756
00074e  eeb80a40          VCVT.F32.U32 s0,s0                 ;756
000752  ee301a41          VSUB.F32 s2,s0,s2              ;756
000756  ee800a81          VDIV.F32 s0,s1,s2              ;756
00075a  ee001a90          VMOV     s1,r1                 ;757
00075e  eeb81a60          VCVT.F32.U32 s2,s1                 ;757
000762  ee004a90          VMOV     s1,r4                 ;757
000766  eef80a60          VCVT.F32.U32 s1,s1                 ;757
00076a  ed850a15          VSTR     s0,[r5,#0x54]         ;756
00076e  ee400a41          VMLS.F32 s1,s0,s2              ;757
000772  edcb0a23          VSTR     s1,[r11,#0x8c]        ;757
000776  e796              B        |L1.1702|
                  |L1.1912|
;;;764    		if(range == 0)//内阻低档位低段
;;;765    		{
;;;766    			RCONT_SW = 0;
;;;767    			calflag = 1;
;;;768    			x1 = Rmon_value;
000778  485e              LDR      r0,|L1.2292|
00077a  b1c1              CBZ      r1,|L1.1966|
;;;769    			y1 = data;
;;;770    			
;;;771    //			Modify_A_READ=0;
;;;772    //			Modify_A_ACT=0;
;;;773    //			Modify_A_READ = Rmon_value;//测量电阻值
;;;774    //			Modify_A_ACT = data;//读取低段
;;;775    		}else if (range == 1)//内阻低档位高段
00077c  2901              CMP      r1,#1
00077e  d019              BEQ      |L1.1972|
;;;776    		{
;;;777    
;;;778    			x2 = Rmon_value;
;;;779    			y2 = data;
;;;780    			CalPara.TestR[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;781    			CalPara.OffsetR[0] = (float)y2 - CalPara.TestR[0]*(float)x2;
;;;782    				//参数写进FLASH
;;;783    			Flag_DAC_OFF=0;
;;;784    			calflag = 0;
;;;785    		}else if(range == 2)//内阻高档位低段
000780  2902              CMP      r1,#2
000782  d06e              BEQ      |L1.2146|
;;;786    		{
;;;787    			RCONT_SW = 1;
;;;788    			calflag = 1;
;;;789    			x1 = Rmon_value;
;;;790    			y1 = data;
;;;791    		}else if (range == 3)//内阻高档位高段
000784  2903              CMP      r1,#3
000786  d039              BEQ      |L1.2044|
;;;792    		{
;;;793    			
;;;794    			x2 = Rmon_value;
;;;795    			y2 = data;
;;;796    			CalPara.TestR[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;797    			CalPara.OffsetR[1] = (float)y2 - CalPara.TestR[1]*(float)x2;
;;;798    				//参数写进FLASH
;;;799    			Flag_DAC_OFF=0;
;;;800    			calflag = 0;
;;;801    		}else if(range == 4)//识别电阻1低段
;;;802    		{
;;;803    			calflag = 1;
;;;804    //			x1 = (R1mon_value*1000)/(65535-R1mon_value);
;;;805    			x1 = (R1mon_value*1000)/(65535-R1mon_value);
000788  f8df916c          LDR      r9,|L1.2296|
00078c  f64f78ff          MOV      r8,#0xffff
000790  2904              CMP      r1,#4                 ;801
000792  d057              BEQ      |L1.2116|
;;;806    			y1 = data;
;;;807    		}else if (range == 5)//识别电阻1高段
000794  2905              CMP      r1,#5
000796  d065              BEQ      |L1.2148|
;;;808    		{
;;;809    			
;;;810    //			x2 = (R1mon_value*1000)/(65535-R1mon_value);
;;;811    			x2 = (R1mon_value*1000)/(65535-R1mon_value);
;;;812    			y2 = data;
;;;813    			CalPara.TestR1[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;814    			CalPara.OffsetR1[0] = (float)y2 - CalPara.TestR1[0]*(float)x2;
;;;815    				//参数写进FLASH
;;;816    			Flag_DAC_OFF=0;
;;;817    			calflag = 0;
;;;818    		}else if(range == 6)//识别电阻2低段
;;;819    		{
;;;820    			calflag = 1;
;;;821    			x1 = (R2mon_value*1000)/(65535-R2mon_value);
000798  f8df9160          LDR      r9,|L1.2300|
00079c  2906              CMP      r1,#6                 ;818
00079e  d051              BEQ      |L1.2116|
;;;822    			y1 = data;
;;;823    		}else if (range == 7)//识别电阻2高段
0007a0  2907              CMP      r1,#7
0007a2  d07d              BEQ      |L1.2208|
;;;824    		{
;;;825    			
;;;826    			x2 = (R2mon_value*1000)/(65535-R2mon_value);
;;;827    			y2 = data;
;;;828    			CalPara.TestR2[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;829    			CalPara.OffsetR2[0] = (float)y2 - CalPara.TestR2[0]*(float)x2;
;;;830    				//参数写进FLASH
;;;831    			Flag_DAC_OFF=0;
;;;832    			calflag = 0;
;;;833    		}else if(range == 8)//内阻高档位低段
0007a4  2908              CMP      r1,#8
0007a6  d05c              BEQ      |L1.2146|
;;;834    		{
;;;835    			RCONT_SW = 1;
;;;836    			calflag = 1;
;;;837    			x1 = Rmon_value;
;;;838    			y1 = data;
;;;839    		}else if (range == 9)//内阻高档位高段
0007a8  2909              CMP      r1,#9
0007aa  d07a              BEQ      |L1.2210|
0007ac  e0f0              B        |L1.2448|
                  |L1.1966|
0007ae  f8cc3024          STR      r3,[r12,#0x24]        ;766  ; Run_Control
0007b2  e0c4              B        |L1.2366|
                  |L1.1972|
0007b4  8800              LDRH     r0,[r0,#0]            ;778  ; Rmon_value
0007b6  ee014a10          VMOV     s2,r4                 ;780
0007ba  eeb80a40          VCVT.F32.U32 s0,s0                 ;780
0007be  eef80a60          VCVT.F32.U32 s1,s1                 ;780
0007c2  eeb81a41          VCVT.F32.U32 s2,s2                 ;780
0007c6  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;778
0007ca  ee311a40          VSUB.F32 s2,s2,s0              ;780
0007ce  ee000a10          VMOV     s0,r0                 ;780
0007d2  eeb80a40          VCVT.F32.U32 s0,s0                 ;780
0007d6  ee700a60          VSUB.F32 s1,s0,s1              ;780
0007da  ee810a20          VDIV.F32 s0,s2,s1              ;780
0007de  ee000a90          VMOV     s1,r0                 ;781
0007e2  eeb81a60          VCVT.F32.U32 s2,s1                 ;781
0007e6  ee004a90          VMOV     s1,r4                 ;781
0007ea  eef80a60          VCVT.F32.U32 s1,s1                 ;781
0007ee  ed8b0a24          VSTR     s0,[r11,#0x90]        ;780
0007f2  ee400a41          VMLS.F32 s1,s0,s2              ;781
0007f6  edcb0a29          VSTR     s1,[r11,#0xa4]        ;781
                  |L1.2042|
0007fa  e0c6              B        |L1.2442|
                  |L1.2044|
0007fc  8800              LDRH     r0,[r0,#0]            ;794  ; Rmon_value
0007fe  ee014a10          VMOV     s2,r4                 ;796
000802  eeb80a40          VCVT.F32.U32 s0,s0                 ;796
000806  eef80a60          VCVT.F32.U32 s1,s1                 ;796
00080a  eeb81a41          VCVT.F32.U32 s2,s2                 ;796
00080e  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;794
000812  ee311a40          VSUB.F32 s2,s2,s0              ;796
000816  ee000a10          VMOV     s0,r0                 ;796
00081a  eeb80a40          VCVT.F32.U32 s0,s0                 ;796
00081e  ee700a60          VSUB.F32 s1,s0,s1              ;796
000822  ee810a20          VDIV.F32 s0,s2,s1              ;796
000826  ee000a90          VMOV     s1,r0                 ;797
00082a  eeb81a60          VCVT.F32.U32 s2,s1                 ;797
00082e  ee004a90          VMOV     s1,r4                 ;797
000832  eef80a60          VCVT.F32.U32 s1,s1                 ;797
000836  ed8b0a25          VSTR     s0,[r11,#0x94]        ;796
00083a  ee400a41          VMLS.F32 s1,s0,s2              ;797
00083e  edcb0a2a          VSTR     s1,[r11,#0xa8]        ;797
000842  e0a2              B        |L1.2442|
                  |L1.2116|
000844  7037              STRB     r7,[r6,#0]            ;803
000846  f8b90000          LDRH     r0,[r9,#0]            ;805  ; R1mon_value
00084a  f44f727a          MOV      r2,#0x3e8             ;805
00084e  f8b91000          LDRH     r1,[r9,#0]            ;805  ; R1mon_value
000852  4350              MULS     r0,r2,r0              ;805
000854  eba80101          SUB      r1,r8,r1              ;805
000858  fbb0f0f1          UDIV     r0,r0,r1              ;805
                  |L1.2140|
00085c  e9c50405          STRD     r0,r4,[r5,#0x14]      ;805
000860  e096              B        |L1.2448|
                  |L1.2146|
000862  e06a              B        |L1.2362|
                  |L1.2148|
000864  f8b91000          LDRH     r1,[r9,#0]            ;811  ; R1mon_value
000868  f44f777a          MOV      r7,#0x3e8             ;811
00086c  f8b90000          LDRH     r0,[r9,#0]            ;811  ; R1mon_value
000870  4379              MULS     r1,r7,r1              ;811
000872  ee014a10          VMOV     s2,r4                 ;813
000876  eba80000          SUB      r0,r8,r0              ;811
00087a  fbb1f0f0          UDIV     r0,r1,r0              ;811
00087e  eeb81a41          VCVT.F32.U32 s2,s2                 ;813
000882  eeb80a40          VCVT.F32.U32 s0,s0                 ;813
000886  eef80a60          VCVT.F32.U32 s1,s1                 ;813
00088a  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;811
00088e  ee311a40          VSUB.F32 s2,s2,s0              ;813
000892  ee000a10          VMOV     s0,r0                 ;813
000896  eeb80a40          VCVT.F32.U32 s0,s0                 ;813
00089a  ee700a60          VSUB.F32 s1,s0,s1              ;813
00089e  e001              B        |L1.2212|
                  |L1.2208|
0008a0  e011              B        |L1.2246|
                  |L1.2210|
0008a2  e04f              B        |L1.2372|
                  |L1.2212|
0008a4  ee810a20          VDIV.F32 s0,s2,s1              ;813
0008a8  ee000a90          VMOV     s1,r0                 ;814
0008ac  eeb81a60          VCVT.F32.U32 s2,s1                 ;814
0008b0  ee004a90          VMOV     s1,r4                 ;814
0008b4  eef80a60          VCVT.F32.U32 s1,s1                 ;814
0008b8  ed8b0a27          VSTR     s0,[r11,#0x9c]        ;813
0008bc  ee400a41          VMLS.F32 s1,s0,s2              ;814
0008c0  edcb0a2c          VSTR     s1,[r11,#0xb0]        ;814
0008c4  e061              B        |L1.2442|
                  |L1.2246|
0008c6  f8b91000          LDRH     r1,[r9,#0]            ;826  ; R2mon_value
0008ca  f44f777a          MOV      r7,#0x3e8             ;826
0008ce  f8b90000          LDRH     r0,[r9,#0]            ;826  ; R2mon_value
0008d2  4379              MULS     r1,r7,r1              ;826
0008d4  eba80000          SUB      r0,r8,r0              ;826
0008d8  fbb1f0f0          UDIV     r0,r1,r0              ;826
0008dc  ee014a10          VMOV     s2,r4                 ;828
0008e0  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;826
0008e4  eeb81a41          VCVT.F32.U32 s2,s2                 ;828
0008e8  e00a              B        |L1.2304|
0008ea  0000              DCW      0x0000
                  |L1.2284|
                          DCD      Imon_Load_value
                  |L1.2288|
                          DCD      Contr_Voltage
                  |L1.2292|
                          DCD      Rmon_value
                  |L1.2296|
                          DCD      R1mon_value
                  |L1.2300|
                          DCD      R2mon_value
                  |L1.2304|
000900  eeb80a40          VCVT.F32.U32 s0,s0                 ;828
000904  eef80a60          VCVT.F32.U32 s1,s1                 ;828
000908  ee311a40          VSUB.F32 s2,s2,s0              ;828
00090c  ee000a10          VMOV     s0,r0                 ;828
000910  eeb80a40          VCVT.F32.U32 s0,s0                 ;828
000914  ee700a60          VSUB.F32 s1,s0,s1              ;828
000918  ee810a20          VDIV.F32 s0,s2,s1              ;828
00091c  ee000a90          VMOV     s1,r0                 ;829
000920  eeb81a60          VCVT.F32.U32 s2,s1                 ;829
000924  ee004a90          VMOV     s1,r4                 ;829
000928  eef80a60          VCVT.F32.U32 s1,s1                 ;829
00092c  ed8b0a28          VSTR     s0,[r11,#0xa0]        ;828
000930  ee400a41          VMLS.F32 s1,s0,s2              ;829
000934  edcb0a2d          VSTR     s1,[r11,#0xb4]        ;829
000938  e027              B        |L1.2442|
                  |L1.2362|
00093a  f8cc7024          STR      r7,[r12,#0x24]        ;835  ; Run_Control
                  |L1.2366|
00093e  7037              STRB     r7,[r6,#0]            ;836
000940  f7ffbbcd          B        |L1.222|
                  |L1.2372|
;;;840    		{
;;;841    			
;;;842    			x2 = Rmon_value;
000944  8800              LDRH     r0,[r0,#0]  ; Rmon_value
;;;843    			y2 = data;
;;;844    			CalPara.TestR[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
000946  ee014a10          VMOV     s2,r4
00094a  eeb80a40          VCVT.F32.U32 s0,s0
00094e  eef80a60          VCVT.F32.U32 s1,s1
000952  eeb81a41          VCVT.F32.U32 s2,s2
000956  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;842
00095a  ee311a40          VSUB.F32 s2,s2,s0
00095e  ee000a10          VMOV     s0,r0
000962  eeb80a40          VCVT.F32.U32 s0,s0
000966  ee700a60          VSUB.F32 s1,s0,s1
00096a  ee810a20          VDIV.F32 s0,s2,s1
;;;845    			CalPara.OffsetR[2] = (float)y2 - CalPara.TestR[2]*(float)x2;
00096e  ee000a90          VMOV     s1,r0
000972  eeb81a60          VCVT.F32.U32 s2,s1
000976  ee004a90          VMOV     s1,r4
00097a  eef80a60          VCVT.F32.U32 s1,s1
00097e  ed8b0a26          VSTR     s0,[r11,#0x98]        ;844
000982  ee400a41          VMLS.F32 s1,s0,s2
000986  edcb0a2b          VSTR     s1,[r11,#0xac]
                  |L1.2442|
;;;846    				//参数写进FLASH
;;;847    			Flag_DAC_OFF=0;
;;;848    			calflag = 0;
00098a  f8ca2000          STR      r2,[r10,#0]  ; flagB
00098e  7033              STRB     r3,[r6,#0]
                  |L1.2448|
;;;849    		}
;;;850    		
;;;851    	}
;;;852    		
;;;853    
;;;854    	Write_Flash_Bytes();
000990  e8bd5ff0          POP      {r4-r12,lr}
000994  f7ffbffe          B.W      Write_Flash_Bytes
;;;855    //	else if(mode == 1){//测量电流
;;;856    //		if(range == 1)
;;;857    //		{
;;;858    //			x1 = abs(I_CS);
;;;859    //			y1 = data;
;;;860    //		}else if(range == 2){
;;;861    //			x2 = abs(I_CS);
;;;862    //			y2 = data;
;;;863    //			SaveDebug.TestIcal[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;864    //			SaveDebug.OffsetI[1] = (float)y2 - SaveDebug.TestIcal[1]*(float)x2;
;;;865    //		}else if(range == 4){
;;;866    //			x1 = abs(I_CS);
;;;867    //			y1 = data;
;;;868    //		}else if(range == 5){
;;;869    //			x2 = abs(I_CS);
;;;870    //			y2 = data;
;;;871    //			SaveDebug.TestIcal[4] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;872    //			SaveDebug.OffsetI[3] = (float)y2 - SaveDebug.TestIcal[4]*(float)x2;
;;;873    //		}else if(range == 0){
;;;874    //			SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[0]);
;;;875    //		}else if(range == 3){
;;;876    //			SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[0]));
;;;877    //		}
;;;878    ////		else if(range == 4){
;;;879    ////			x1 = V_CS;
;;;880    ////			y1 = data;
;;;881    ////		}else if(range == 5){
;;;882    ////			x2 = V_CS;
;;;883    ////			y2 = data;
;;;884    ////			SaveDebug.TestVcal[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;885    ////			SaveDebug.OffsetV[2] = (float)y2 - SaveDebug.TestVcal[2]*(float)x2;
;;;886    ////		}
;;;887    //		
;;;888    ////		if(range < 3)
;;;889    ////		{
;;;890    ////			if(range == 0)
;;;891    ////			{
;;;892    ////				SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[0]);
;;;893    ////			}else{
;;;894    ////				SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[1]);
;;;895    ////			}			
;;;896    ////		}else{
;;;897    ////			if(range == 3)
;;;898    ////			{
;;;899    ////				SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[0]));
;;;900    ////			}else{
;;;901    ////				SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[1]));
;;;902    ////			}
;;;903    ////		}
;;;904    ////		calflag = 1;
;;;905    //	}else if(mode == 2){//控制电压
;;;906    //		if(range == 0)
;;;907    //		{
;;;908    //			_D_ = 1000;
;;;909    //			x1 = data;
;;;910    //			y1 = _D_;
;;;911    //		}else if(range == 1){
;;;912    //			_D_ = 7000;
;;;913    //			x2 = data;
;;;914    //			y2 = _D_;
;;;915    //			SaveDebug.ControlV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;916    //			SaveDebug.OffsetCV[0] = (float)y2 - SaveDebug.ControlV[0]*(float)x2;
;;;917    //		}else if(range == 2){
;;;918    //			_D_ = 10000;
;;;919    //			x1 = data;
;;;920    //			y1 = _D_;
;;;921    //		}else if(range == 3){
;;;922    //			_D_ = 13000;
;;;923    //			x2 = data;
;;;924    //			y2 = _D_;
;;;925    //			SaveDebug.ControlV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;926    //			SaveDebug.OffsetCV[1] = (float)y2 - SaveDebug.ControlV[1]*(float)x2;
;;;927    //		}else if(range == 4){
;;;928    //			_D_ = 17000;
;;;929    //			x1 = data;
;;;930    //			y1 = _D_;
;;;931    //		}else if(range == 5){
;;;932    //			_D_ = 20000;
;;;933    //			x2 = data;
;;;934    //			y2 = _D_;
;;;935    //			SaveDebug.ControlV[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;936    //			SaveDebug.OffsetCV[2] = (float)y2 - SaveDebug.ControlV[2]*(float)x2;
;;;937    //		}else if(range == 6){
;;;938    //			_D_ = 24000;
;;;939    //			x1 = data;
;;;940    //			y1 = _D_;
;;;941    //		}else if(range == 7){
;;;942    //			_D_ = 27000;
;;;943    //			x2 = data;
;;;944    //			y2 = _D_;
;;;945    //			SaveDebug.ControlV[3] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;946    //			SaveDebug.OffsetCV[3] = (float)y2 - SaveDebug.ControlV[3]*(float)x2;
;;;947    //		}
;;;948    //		
;;;949    ////		if(range == 0)
;;;950    ////		{
;;;951    ////			SaveDebug.ControlV[range] = (float)1000/(float)data;
;;;952    ////		}else if(range == 1){
;;;953    ////			SaveDebug.ControlV[range] = (float)10000/(float)data;
;;;954    ////		}else if(range == 2){
;;;955    ////			SaveDebug.ControlV[range] = (float)15000/(float)data;
;;;956    ////		}else if(range == 3){
;;;957    ////			SaveDebug.ControlV[range] = (float)19000/(float)data;
;;;958    ////		}
;;;959    ////		calflag = 1;
;;;960    //	}else if(mode == 3){//电流清零
;;;961    //		SaveDebug.ClearI[range] = I_CS;
;;;962    ////		calflag = 1;
;;;963    //	}
;;;964    	
;;;965    }
;;;966    
                          ENDP


                          AREA ||i.DMA1_Stream3_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Stream3_IRQHandler PROC
;;;2327   
;;;2328   void DMA1_Stream3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2329   {
;;;2330   	//----DMA1 通道3完成中断，对应的中断也需要清除
;;;2331   	if(DMA_GetITStatus(DMA1_Stream3,DMA_IT_TCIF3) != RESET)   
000002  4d0c              LDR      r5,|L2.52|
000004  4c0c              LDR      r4,|L2.56|
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       DMA_GetITStatus
00000e  2800              CMP      r0,#0
000010  d00e              BEQ      |L2.48|
;;;2332       {
;;;2333   		/* 清除标志位 */
;;;2334   		DMA_ClearFlag(DMA1_Stream3,DMA_IT_TCIF3); 
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       DMA_ClearFlag
;;;2335   		/* 关闭DMA */
;;;2336   		DMA_Cmd(DMA1_Stream3,DISABLE);
00001a  2100              MOVS     r1,#0
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       DMA_Cmd
;;;2337   		
;;;2338   		while (!(USART3->SR & USART_FLAG_TC));  //硬件数据发送完毕
000022  4806              LDR      r0,|L2.60|
                  |L2.36|
000024  8801              LDRH     r1,[r0,#0]
000026  0649              LSLS     r1,r1,#25
000028  d5fc              BPL      |L2.36|
                  |L2.42|
;;;2339   		while (!(USART3->SR & USART_FLAG_TXE)); //等待数据从软件拷贝到硬件进行发送
00002a  8801              LDRH     r1,[r0,#0]
00002c  0609              LSLS     r1,r1,#24
00002e  d5fc              BPL      |L2.42|
                  |L2.48|
;;;2340   	}
;;;2341   }
000030  bd70              POP      {r4-r6,pc}
;;;2342   
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      0x18008000
                  |L2.56|
                          DCD      0x40026058
                  |L2.60|
                          DCD      0x40004800

                          AREA ||i.IsDigitChar||, CODE, READONLY, ALIGN=1

                  IsDigitChar PROC
;;;88     /*****************************************************************/
;;;89     unsigned short IsDigitChar(unsigned char a)             //如果a的值是数字的话返回1，否则返回0
000000  3830              SUBS     r0,r0,#0x30
;;;90     {
;;;91     	int b;
;;;92       if(a<0x30 || a>0x39)                     //数字1-9
000002  280a              CMP      r0,#0xa
000004  d301              BCC      |L3.10|
;;;93       	{
;;;94       	   b=0;
000006  2000              MOVS     r0,#0
;;;95       	}
;;;96       else
;;;97       	{
;;;98       	   b=1;
;;;99       	}
;;;100      return b;
;;;101    }
000008  4770              BX       lr
                  |L3.10|
00000a  2001              MOVS     r0,#1                 ;98
00000c  4770              BX       lr
;;;102    void SetPowerV(vu16 powv)
                          ENDP


                          AREA ||i.LIST_ONOFF||, CODE, READONLY, ALIGN=2

                  LIST_ONOFF PROC
;;;337    
;;;338    void LIST_ONOFF(vu8 value)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;339    {
;;;340    	switch(MODE)
000004  4a63              LDR      r2,|L4.404|
000006  ed2d8b02          VPUSH    {d8}                  ;339
00000a  f892c005          LDRB     r12,[r2,#5]  ; MODE
;;;341    	{
;;;342    		case 0://电子负载ON/OFF
;;;343    		{
;;;344    			LOAD_MODE=0;
;;;345    			GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
;;;346    			if( value == 0 ){
;;;347    				
;;;348    				Flag_Swtich_ON = 0;
00000e  4c63              LDR      r4,|L4.412|
000010  2600              MOVS     r6,#0                 ;340
000012  f8df9184          LDR      r9,|L4.408|
;;;349    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
;;;350    			}
;;;351    			else if( value == 1 ){
;;;352    				
;;;353    				Flag_Swtich_ON = 1;
000016  6821              LDR      r1,[r4,#0]
;;;354    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;355    			}
;;;356    		}break;
;;;357    		case 1://稳压电源ON/OFF
;;;358    		{
;;;359    			if( value == 0 ){
;;;360    				listsend = 3;
;;;361    				listpowwatch1 ++;
;;;362    //				PowerSwitch(0);
;;;363    //				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;364    //				Para.CSET_Voltage = 0;
;;;365    //				Para.CSET_Current = 0;
;;;366    //				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;367    			}
;;;368    			else if( value == 1 ){
;;;369    				listsend = 1;
000018  2301              MOVS     r3,#1
;;;370    				listpowwatch2 ++;
;;;371    //				PowerSwitch(1);
;;;372    //				Para.CSET_Voltage = Para.CDC_OutPut_V;
;;;373    //				Para.CSET_Current = Para.CDC_Limit_C;
;;;374    //				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;375    //				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;376    			}
;;;377    		}break;
;;;378    		case 2://过流测试ON/OFF
;;;379    		{
;;;380    			listocwatch++;
;;;381    			if( value == 0 ){
;;;382    				
;;;383    				Off_GPOI_ResetSet();
;;;384    				trig_flag_state = 0;
;;;385    				max_discahrgeNum = 0;
;;;386    				Para.CSET_Current_Laod =  Para.IR_Start_C;
00001a  4d61              LDR      r5,|L4.416|
00001c  4f61              LDR      r7,|L4.420|
00001e  f0410040          ORR      r0,r1,#0x40           ;353
000022  f1bc0f05          CMP      r12,#5                ;340
000026  d225              BCS      |L4.116|
000028  e8dff00c          TBB      [pc,r12]              ;340
00002c  03192e7b          DCB      0x03,0x19,0x2e,0x7b
000030  9800              DCB      0x98,0x00
000032  f8c96018          STR      r6,[r9,#0x18]         ;344  ; Run_Control
000036  f44f5180          MOV      r1,#0x1000            ;345
00003a  4638              MOV      r0,r7                 ;345
00003c  f7fffffe          BL       GPIO_ResetBits
000040  f89d0008          LDRB     r0,[sp,#8]            ;346
000044  b138              CBZ      r0,|L4.86|
000046  f89d0008          LDRB     r0,[sp,#8]            ;351
00004a  2801              CMP      r0,#1                 ;351
00004c  d112              BNE      |L4.116|
00004e  6820              LDR      r0,[r4,#0]            ;353  ; flagA
000050  f0400040          ORR      r0,r0,#0x40           ;353
000054  e089              B        |L4.362|
                  |L4.86|
000056  6820              LDR      r0,[r4,#0]            ;348  ; flagA
000058  f0200040          BIC      r0,r0,#0x40           ;348
00005c  e090              B        |L4.384|
00005e  f89d0008          LDRB     r0,[sp,#8]            ;359
000062  b158              CBZ      r0,|L4.124|
000064  f89d0008          LDRB     r0,[sp,#8]            ;368
000068  2801              CMP      r0,#1                 ;368
00006a  d103              BNE      |L4.116|
00006c  7253              STRB     r3,[r2,#9]            ;369
00006e  7b10              LDRB     r0,[r2,#0xc]          ;370  ; listpowwatch2
000070  1c40              ADDS     r0,r0,#1              ;370
000072  7310              STRB     r0,[r2,#0xc]          ;370
                  |L4.116|
;;;387    			}
;;;388    			else if( value == 1 ){
;;;389    				LOAD_I_SW = 1;
;;;390    				testv = DISS_Voltage;
;;;391    				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
;;;392    				Para.CSET_Current = 1000;
;;;393    				Para.CSET_Current_Laod =  Para.IR_Start_C;
;;;394    				shorttime = 0;
;;;395    				old_I = 0;
;;;396    				max_discahrgeNum = 0;
;;;397    				trig_flag_state = 1;
;;;398    				C_DISCHARGE = 1;        	
;;;399    				Flag_Swtich_ON = 1;
;;;400    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
;;;401    				max_discahrgeNum = (float)Para.IR_Start_C / 1000;				
;;;402    //				testv = DISS_Voltage;
;;;403    //				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
;;;404    //				Para.CSET_Current = 1000;
;;;405    //				Para.CSET_Current_Laod = Para.IR_Start_C;
;;;406    //				shorttime = 0;
;;;407    //				old_I = 0;
;;;408    //				max_discahrgeNum = 0;
;;;409    //				trig_flag_state = 1;
;;;410    //				C_DISCHARGE = 1;
;;;411    //				Flag_Swtich_ON = 1;
;;;412    //				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
;;;413    //				max_discahrgeNum = (float)Para.IR_Start_C / 1000;
;;;414    			}
;;;415    		}break;
;;;416    		case 3://过充测试ON/OFF
;;;417    		{
;;;418    			if( value == 0 ){
;;;419    				
;;;420    				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;421    				Para.CSET_Voltage = 0;
;;;422    				Para.CSET_Current = 0;
;;;423    				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;424    			}
;;;425    			else if( value == 1 ){
;;;426    				Para.CSET_Voltage = Para.CDC_OutPut_V;
;;;427    				Para.CSET_Current = Para.CDC_Limit_C;
;;;428    				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;429    				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;430    			}
;;;431    		}break;
;;;432    		case 4://电子负载ON/OFF
;;;433    		{
;;;434    			if( value == 0 ){
;;;435    				
;;;436    				Flag_Swtich_ON = 0;
;;;437    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
;;;438    			}
;;;439    			else if( value == 1 ){
;;;440    				
;;;441    				Flag_Swtich_ON = 1;
;;;442    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;443    			}
;;;444    		}break;
;;;445    	}
;;;446    }
000074  ecbd8b02          VPOP     {d8}
000078  e8bd8ff8          POP      {r3-r11,pc}
                  |L4.124|
00007c  2003              MOVS     r0,#3                 ;360
00007e  7250              STRB     r0,[r2,#9]            ;360
000080  7ad0              LDRB     r0,[r2,#0xb]          ;361  ; listpowwatch1
000082  1c40              ADDS     r0,r0,#1              ;361
000084  72d0              STRB     r0,[r2,#0xb]          ;361
000086  e7f5              B        |L4.116|
000088  7a91              LDRB     r1,[r2,#0xa]          ;380  ; listocwatch
00008a  1c49              ADDS     r1,r1,#1              ;380
00008c  7291              STRB     r1,[r2,#0xa]          ;380
00008e  f89d1008          LDRB     r1,[sp,#8]            ;381
000092  f8dfa114          LDR      r10,|L4.424|
000096  ed9f8a45          VLDR     s16,|L4.428|
00009a  f8df8114          LDR      r8,|L4.432|
00009e  b3b1              CBZ      r1,|L4.270|
0000a0  f89d1008          LDRB     r1,[sp,#8]            ;388
0000a4  2901              CMP      r1,#1                 ;388
0000a6  d1e5              BNE      |L4.116|
0000a8  f8c93020          STR      r3,[r9,#0x20]         ;389  ; Run_Control
0000ac  4941              LDR      r1,|L4.436|
0000ae  ed910a00          VLDR     s0,[r1,#0]            ;390
0000b2  4941              LDR      r1,|L4.440|
0000b4  ed810a00          VSTR     s0,[r1,#0]            ;390
0000b8  eddf8a40          VLDR     s17,|L4.444|
0000bc  ee200a28          VMUL.F32 s0,s0,s17             ;391
0000c0  eebd0ac0          VCVT.S32.F32 s0,s0                 ;391
0000c4  ee101a10          VMOV     r1,s0                 ;391
0000c8  f501717a          ADD      r1,r1,#0x3e8          ;391
0000cc  60a9              STR      r1,[r5,#8]            ;391  ; Para
0000ce  f44f717a          MOV      r1,#0x3e8             ;392
0000d2  60e9              STR      r1,[r5,#0xc]          ;392  ; Para
0000d4  6c69              LDR      r1,[r5,#0x44]         ;393  ; Para
0000d6  6169              STR      r1,[r5,#0x14]         ;393  ; Para
0000d8  4939              LDR      r1,|L4.448|
0000da  700e              STRB     r6,[r1,#0]            ;394
0000dc  4939              LDR      r1,|L4.452|
0000de  4646              MOV      r6,r8                 ;396
0000e0  ed818a00          VSTR     s16,[r1,#0]           ;395
0000e4  ed888a00          VSTR     s16,[r8,#0]           ;396
0000e8  f88a3000          STRB     r3,[r10,#0]           ;397
0000ec  4936              LDR      r1,|L4.456|
0000ee  700b              STRB     r3,[r1,#0]            ;398
0000f0  6020              STR      r0,[r4,#0]            ;400  ; flagA
0000f2  2180              MOVS     r1,#0x80              ;400
0000f4  4638              MOV      r0,r7                 ;400
0000f6  f7fffffe          BL       GPIO_ResetBits
0000fa  6c68              LDR      r0,[r5,#0x44]         ;401  ; Para
0000fc  ee000a10          VMOV     s0,r0                 ;401
000100  eeb80a40          VCVT.F32.U32 s0,s0                 ;401
000104  eec00a28          VDIV.F32 s1,s0,s17             ;401
000108  edc60a00          VSTR     s1,[r6,#0]            ;401
00010c  e7b2              B        |L4.116|
                  |L4.270|
00010e  e7ff              B        |L4.272|
                  |L4.272|
000110  f7fffffe          BL       Off_GPOI_ResetSet
000114  f88a6000          STRB     r6,[r10,#0]           ;384
000118  ed888a00          VSTR     s16,[r8,#0]           ;385
00011c  6c68              LDR      r0,[r5,#0x44]         ;386  ; Para
00011e  6168              STR      r0,[r5,#0x14]         ;386  ; Para
000120  e7a8              B        |L4.116|
000122  f89d0008          LDRB     r0,[sp,#8]            ;418
000126  4c29              LDR      r4,|L4.460|
000128  b178              CBZ      r0,|L4.330|
00012a  f89d0008          LDRB     r0,[sp,#8]            ;425
00012e  2801              CMP      r0,#1                 ;425
000130  d1a0              BNE      |L4.116|
000132  f8b5006a          LDRH     r0,[r5,#0x6a]         ;426  ; Para
000136  60a8              STR      r0,[r5,#8]            ;426  ; Para
000138  f8b5006c          LDRH     r0,[r5,#0x6c]         ;427  ; Para
00013c  60e8              STR      r0,[r5,#0xc]          ;427  ; Para
00013e  2104              MOVS     r1,#4                 ;428
000140  4620              MOV      r0,r4                 ;428
000142  f7fffffe          BL       GPIO_SetBits
000146  2102              MOVS     r1,#2                 ;429
000148  e01c              B        |L4.388|
                  |L4.330|
00014a  2102              MOVS     r1,#2                 ;420
00014c  4638              MOV      r0,r7                 ;420
00014e  f7fffffe          BL       GPIO_ResetBits
000152  60ae              STR      r6,[r5,#8]            ;421  ; Para
000154  60ee              STR      r6,[r5,#0xc]          ;422  ; Para
000156  2104              MOVS     r1,#4                 ;423
000158  4620              MOV      r0,r4                 ;423
00015a  e009              B        |L4.368|
00015c  f89d2008          LDRB     r2,[sp,#8]            ;434
000160  b162              CBZ      r2,|L4.380|
000162  f89d1008          LDRB     r1,[sp,#8]            ;439
000166  2901              CMP      r1,#1                 ;439
000168  d184              BNE      |L4.116|
                  |L4.362|
00016a  6020              STR      r0,[r4,#0]            ;442  ; flagA
00016c  2180              MOVS     r1,#0x80              ;442
00016e  4638              MOV      r0,r7                 ;442
                  |L4.368|
000170  ecbd8b02          VPOP     {d8}                  ;442
000174  e8bd4ff8          POP      {r3-r11,lr}           ;442
000178  f7ffbffe          B.W      GPIO_ResetBits
                  |L4.380|
00017c  f0210040          BIC      r0,r1,#0x40           ;436
                  |L4.384|
000180  2180              MOVS     r1,#0x80              ;349
000182  6020              STR      r0,[r4,#0]            ;349  ; flagA
                  |L4.388|
000184  4638              MOV      r0,r7                 ;437
000186  ecbd8b02          VPOP     {d8}                  ;437
00018a  e8bd4ff8          POP      {r3-r11,lr}           ;437
00018e  f7ffbffe          B.W      GPIO_SetBits
;;;447    
                          ENDP

000192  0000              DCW      0x0000
                  |L4.404|
                          DCD      ||.data||
                  |L4.408|
                          DCD      Run_Control
                  |L4.412|
                          DCD      flagA
                  |L4.416|
                          DCD      Para
                  |L4.420|
                          DCD      0x40020800
                  |L4.424|
                          DCD      trig_flag_state
                  |L4.428|
0001ac  00000000          DCFS     0x00000000 ; 0
                  |L4.432|
                          DCD      max_discahrgeNum
                  |L4.436|
                          DCD      DISS_Voltage
                  |L4.440|
                          DCD      testv
                  |L4.444|
0001bc  447a0000          DCFS     0x447a0000 ; 1000
                  |L4.448|
                          DCD      shorttime
                  |L4.452|
                          DCD      old_I
                  |L4.456|
                          DCD      C_DISCHARGE
                  |L4.460|
                          DCD      0x40021000

                          AREA ||i.MODE_ONOFF||, CODE, READONLY, ALIGN=2

                  MODE_ONOFF PROC
;;;263    
;;;264    void MODE_ONOFF(vu8 value)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;265    {
;;;266    	switch(MODE)
000004  4a41              LDR      r2,|L5.268|
000006  ed2d8b02          VPUSH    {d8}                  ;265
00000a  7951              LDRB     r1,[r2,#5]  ; MODE
;;;267    	{
;;;268    		case 0://电子负载ON/OFF
;;;269    		{
;;;270    			if( value == 0 ){
;;;271    				
;;;272    				Flag_Swtich_ON = 0;
00000c  4d40              LDR      r5,|L5.272|
;;;273    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
00000e  4841              LDR      r0,|L5.276|
000010  b3e9              CBZ      r1,|L5.142|
;;;274    			}
;;;275    			else if( value == 1 ){
;;;276    				
;;;277    				Flag_Swtich_ON = 1;
;;;278    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;279    			}
;;;280    		}break;
;;;281    		case 1://稳压电源ON/OFF
;;;282    		{
;;;283    			sendwait = 1;
000012  2601              MOVS     r6,#1
000014  2901              CMP      r1,#1                 ;266
000016  d06d              BEQ      |L5.244|
000018  2902              CMP      r1,#2                 ;266
00001a  d14a              BNE      |L5.178|
;;;284    //			if( value == 0 ){
;;;285    //				sendwait = 1;
;;;286    ////				PowerSwitch(0);//关闭电源输出
;;;287    ////				Delay_ms(1000);
;;;288    ////				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;289    ////				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;290    //////				Delay_ms(1000);
;;;291    ////				Para.CSET_Voltage = 0;
;;;292    ////				Para.CSET_Current = 0;
;;;293    //////				Delay_ms(1000);
;;;294    ////				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;295    //			}
;;;296    //			else if( value == 1 ){
;;;297    ////				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;298    //////				Delay_ms(1000);
;;;299    ////				PowerSwitch(1);//打开电源输出
;;;300    //				
;;;301    //////				
;;;302    ////				Para.CSET_Voltage = Para.POWER_OutPut_V;
;;;303    ////				Para.CSET_Current = Para.POWER_Limit_C;
;;;304    //////				Delay_ms(1000);
;;;305    ////				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;306    //				
;;;307    //			}
;;;308    		}break;
;;;309    		case 2://过流测试ON/OFF
;;;310    		{
;;;311    			if( value == 0 ){
00001c  f89d1008          LDRB     r1,[sp,#8]
;;;312    				
;;;313    				Off_GPOI_ResetSet();
;;;314    				trig_flag_state = 0;
000020  f8df90f4          LDR      r9,|L5.280|
;;;315    				max_discahrgeNum = 0;
000024  ed9f8a3d          VLDR     s16,|L5.284|
000028  f8df80f4          LDR      r8,|L5.288|
;;;316    				Para.CSET_Current_Laod =  Para.IR_Start_C;
00002c  4c3d              LDR      r4,|L5.292|
00002e  2700              MOVS     r7,#0                 ;311
000030  b371              CBZ      r1,|L5.144|
;;;317    			}
;;;318    			else if( value == 1 ){
000032  f89d1008          LDRB     r1,[sp,#8]
000036  2901              CMP      r1,#1
000038  d13b              BNE      |L5.178|
;;;319    				LOAD_MODE = 0;
00003a  493b              LDR      r1,|L5.296|
00003c  618f              STR      r7,[r1,#0x18]  ; Run_Control
;;;320    				GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
00003e  1481              ASRS     r1,r0,#18
000040  4682              MOV      r10,r0
000042  f7fffffe          BL       GPIO_ResetBits
;;;321    				Para.CSET_Current_Laod =  Para.IR_Start_C;
000046  6c60              LDR      r0,[r4,#0x44]  ; Para
000048  6160              STR      r0,[r4,#0x14]  ; Para
;;;322    				testv = DISS_Voltage;
00004a  4838              LDR      r0,|L5.300|
;;;323    				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
00004c  eddf8a39          VLDR     s17,|L5.308|
000050  ed900a00          VLDR     s0,[r0,#0]            ;322
000054  4836              LDR      r0,|L5.304|
000056  ed800a00          VSTR     s0,[r0,#0]            ;322
00005a  ee200a28          VMUL.F32 s0,s0,s17
00005e  eebd0ac0          VCVT.S32.F32 s0,s0
000062  ee100a10          VMOV     r0,s0
000066  f500707a          ADD      r0,r0,#0x3e8
00006a  60a0              STR      r0,[r4,#8]  ; Para
;;;324    				Para.CSET_Current = 1000;
00006c  f44f707a          MOV      r0,#0x3e8
000070  60e0              STR      r0,[r4,#0xc]  ; Para
;;;325    				shorttime = 0;
000072  4831              LDR      r0,|L5.312|
000074  7007              STRB     r7,[r0,#0]
;;;326    				old_I = 0;
000076  4831              LDR      r0,|L5.316|
;;;327    				max_discahrgeNum = 0;
000078  4647              MOV      r7,r8
00007a  ed808a00          VSTR     s16,[r0,#0]           ;326
00007e  ed888a00          VSTR     s16,[r8,#0]
;;;328    				trig_flag_state = 1;
000082  f8896000          STRB     r6,[r9,#0]
;;;329    				C_DISCHARGE = 1;        	
000086  482e              LDR      r0,|L5.320|
000088  7006              STRB     r6,[r0,#0]
;;;330    				Flag_Swtich_ON = 1;
00008a  6828              LDR      r0,[r5,#0]  ; flagA
00008c  e001              B        |L5.146|
                  |L5.142|
00008e  e014              B        |L5.186|
                  |L5.144|
000090  e032              B        |L5.248|
                  |L5.146|
000092  f0400040          ORR      r0,r0,#0x40
;;;331    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
000096  6028              STR      r0,[r5,#0]  ; flagA
000098  2180              MOVS     r1,#0x80
00009a  4650              MOV      r0,r10
00009c  f7fffffe          BL       GPIO_ResetBits
;;;332    				max_discahrgeNum = (float)Para.IR_Start_C / 1000;
0000a0  6c60              LDR      r0,[r4,#0x44]  ; Para
0000a2  ee000a10          VMOV     s0,r0
0000a6  eeb80a40          VCVT.F32.U32 s0,s0
0000aa  eec00a28          VDIV.F32 s1,s0,s17
0000ae  edc70a00          VSTR     s1,[r7,#0]
                  |L5.178|
;;;333    			}
;;;334    		}break;
;;;335    	}
;;;336    }
0000b2  ecbd8b02          VPOP     {d8}
0000b6  e8bd8ff8          POP      {r3-r11,pc}
                  |L5.186|
0000ba  f89d2008          LDRB     r2,[sp,#8]            ;270
0000be  4914              LDR      r1,|L5.272|
0000c0  6809              LDR      r1,[r1,#0]            ;272
0000c2  b16a              CBZ      r2,|L5.224|
0000c4  f89d2008          LDRB     r2,[sp,#8]            ;275
0000c8  2a01              CMP      r2,#1                 ;275
0000ca  d1f2              BNE      |L5.178|
0000cc  f0410140          ORR      r1,r1,#0x40           ;277
0000d0  6029              STR      r1,[r5,#0]            ;278  ; flagA
0000d2  2180              MOVS     r1,#0x80              ;278
0000d4  ecbd8b02          VPOP     {d8}                  ;278
0000d8  e8bd4ff8          POP      {r3-r11,lr}           ;278
0000dc  f7ffbffe          B.W      GPIO_ResetBits
                  |L5.224|
0000e0  f0210140          BIC      r1,r1,#0x40           ;272
0000e4  6029              STR      r1,[r5,#0]            ;273  ; flagA
0000e6  2180              MOVS     r1,#0x80              ;273
0000e8  ecbd8b02          VPOP     {d8}                  ;273
0000ec  e8bd4ff8          POP      {r3-r11,lr}           ;273
0000f0  f7ffbffe          B.W      GPIO_SetBits
                  |L5.244|
0000f4  7216              STRB     r6,[r2,#8]            ;283
0000f6  e7dc              B        |L5.178|
                  |L5.248|
0000f8  f7fffffe          BL       Off_GPOI_ResetSet
0000fc  f8897000          STRB     r7,[r9,#0]            ;314
000100  ed888a00          VSTR     s16,[r8,#0]           ;315
000104  6c60              LDR      r0,[r4,#0x44]         ;316  ; Para
000106  6160              STR      r0,[r4,#0x14]         ;316  ; Para
000108  e7d3              B        |L5.178|
;;;337    
                          ENDP

00010a  0000              DCW      0x0000
                  |L5.268|
                          DCD      ||.data||
                  |L5.272|
                          DCD      flagA
                  |L5.276|
                          DCD      0x40020800
                  |L5.280|
                          DCD      trig_flag_state
                  |L5.284|
00011c  00000000          DCFS     0x00000000 ; 0
                  |L5.288|
                          DCD      max_discahrgeNum
                  |L5.292|
                          DCD      Para
                  |L5.296|
                          DCD      Run_Control
                  |L5.300|
                          DCD      DISS_Voltage
                  |L5.304|
                          DCD      testv
                  |L5.308|
000134  447a0000          DCFS     0x447a0000 ; 1000
                  |L5.312|
                          DCD      shorttime
                  |L5.316|
                          DCD      old_I
                  |L5.320|
                          DCD      C_DISCHARGE

                          AREA ||i.MODE_PARASET||, CODE, READONLY, ALIGN=2

                  MODE_PARASET PROC
;;;447    
;;;448    void MODE_PARASET(vu8 value)
000000  b570              PUSH     {r4-r6,lr}
;;;449    {
;;;450    	float ptrans;
;;;451    	switch(MODE)
000002  4a23              LDR      r2,|L6.144|
000004  7953              LDRB     r3,[r2,#5]  ; MODE
000006  2100              MOVS     r1,#0
;;;452    	{
;;;453    		case 0://电子负载
;;;454    		{
;;;455    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;456    //			mainswitch = 0;
;;;457    //			sendwait = 3;
;;;458    			LOAD_MODE = Para.CLOAD_MODE;
;;;459    			if(LOAD_MODE == 2)
;;;460    			{
;;;461    				ptrans = (float)Para.LOAD_P/1000;
;;;462    				Para.CSET_Current_Laod = (uint32_t)((ptrans/DISS_Voltage)*1000);
;;;463    			}else{
;;;464    				Para.CSET_Current_Laod = Para.LOAD_C;
;;;465    			}
;;;466    			Para.CSET_Voltage_Laod = Para.LOAD_V;
;;;467    			if(Para.CSET_Current_Laod > 20000)
;;;468    			{
;;;469    				LOAD_I_SW = 1;
000008  2401              MOVS     r4,#1
00000a  4d22              LDR      r5,|L6.148|
00000c  4822              LDR      r0,|L6.152|
00000e  2b05              CMP      r3,#5                 ;451
000010  d214              BCS      |L6.60|
000012  e8dff003          TBB      [pc,r3]               ;451
000016  033a              DCB      0x03,0x3a
000018  2b333a00          DCB      0x2b,0x33,0x3a,0x00
00001c  6982              LDR      r2,[r0,#0x18]         ;458  ; Para
00001e  61aa              STR      r2,[r5,#0x18]         ;458  ; Run_Control
000020  69aa              LDR      r2,[r5,#0x18]         ;459  ; Run_Control
000022  2a02              CMP      r2,#2                 ;459
000024  d00b              BEQ      |L6.62|
000026  6dc2              LDR      r2,[r0,#0x5c]         ;464  ; Para
                  |L6.40|
000028  6142              STR      r2,[r0,#0x14]         ;464  ; Para
00002a  f8b02060          LDRH     r2,[r0,#0x60]         ;466  ; Para
00002e  6102              STR      r2,[r0,#0x10]         ;466  ; Para
000030  6940              LDR      r0,[r0,#0x14]         ;467  ; Para
000032  f6446220          MOV      r2,#0x4e20            ;467
000036  4290              CMP      r0,r2                 ;467
000038  d916              BLS      |L6.104|
                  |L6.58|
00003a  622c              STR      r4,[r5,#0x20]  ; Run_Control
                  |L6.60|
;;;470    			}else{
;;;471    				LOAD_I_SW = 0;
;;;472    			}
;;;473    		}break;
;;;474    		case 1://稳压电源
;;;475    		{
;;;476    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;477    //			mainswitch = 0;
;;;478    //			if(USART3_Recive_flg == 1)
;;;479    //			{
;;;480    				sendwait = 1;
;;;481    //			}else{
;;;482    //				SetPowerMode();
;;;483    //			}
;;;484    //			Para.CSET_Voltage = Para.POWER_OutPut_V;
;;;485    //			SetPowerV(Para.POWER_OutPut_V);
;;;486    //	//			Para.CSET_Current = Para.POWER_Limit_C;
;;;487    //			SetPowerC(Para.POWER_Limit_C);
;;;488    		}break;
;;;489    		case 2://放电过流测试
;;;490    		{
;;;491    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;492    //			mainswitch = 0;
;;;493    //			sendwait = 3;
;;;494    			
;;;495    			LOAD_MODE = 0;
;;;496    			LOAD_I_SW = 1;
;;;497    			Para.CSET_Current = 1000;
;;;498    			Para.CSET_Current_Laod = Para.IR_Start_C;
;;;499    		}break;
;;;500    		case 3://列表
;;;501    		{
;;;502    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;503    //			mainswitch = 0;
;;;504    //			sendwait = 3;
;;;505    			
;;;506    			LOAD_MODE = 0;
;;;507    			GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
;;;508    			LOAD_I_SW = 1;
;;;509    //			Para.CSET_Current = 1000;
;;;510    		}break;
;;;511    		case 4://充电过流测试
;;;512    		{
;;;513    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;514    //			mainswitch = 0;
;;;515    //			sendwait = 3;
;;;516    			
;;;517    			sendwait = 1;
;;;518    		}break;
;;;519    	}
;;;520    }
00003c  bd70              POP      {r4-r6,pc}
                  |L6.62|
00003e  6e42              LDR      r2,[r0,#0x64]         ;461  ; Para
000040  eddf0a16          VLDR     s1,|L6.156|
000044  ee002a10          VMOV     s0,r2                 ;461
000048  4a15              LDR      r2,|L6.160|
00004a  eeb81a40          VCVT.F32.U32 s2,s0                 ;461
00004e  edd21a00          VLDR     s3,[r2,#0]            ;462
000052  ee810a20          VDIV.F32 s0,s2,s1              ;461
000056  ee801a21          VDIV.F32 s2,s0,s3              ;462
00005a  ee210a20          VMUL.F32 s0,s2,s1              ;462
00005e  eebc0ac0          VCVT.U32.F32 s0,s0                 ;462
000062  ee102a10          VMOV     r2,s0                 ;462
000066  e7df              B        |L6.40|
                  |L6.104|
000068  6229              STR      r1,[r5,#0x20]         ;471  ; Run_Control
00006a  bd70              POP      {r4-r6,pc}
00006c  61a9              STR      r1,[r5,#0x18]         ;495  ; Run_Control
00006e  622c              STR      r4,[r5,#0x20]         ;496  ; Run_Control
000070  f44f717a          MOV      r1,#0x3e8             ;497
000074  60c1              STR      r1,[r0,#0xc]          ;497  ; Para
000076  6c41              LDR      r1,[r0,#0x44]         ;498  ; Para
000078  6141              STR      r1,[r0,#0x14]         ;498  ; Para
00007a  bd70              POP      {r4-r6,pc}
00007c  61a9              STR      r1,[r5,#0x18]         ;506  ; Run_Control
00007e  f44f5180          MOV      r1,#0x1000            ;507
000082  4808              LDR      r0,|L6.164|
000084  f7fffffe          BL       GPIO_ResetBits
000088  e7d7              B        |L6.58|
00008a  7214              STRB     r4,[r2,#8]            ;517
00008c  bd70              POP      {r4-r6,pc}
;;;521    
                          ENDP

00008e  0000              DCW      0x0000
                  |L6.144|
                          DCD      ||.data||
                  |L6.148|
                          DCD      Run_Control
                  |L6.152|
                          DCD      Para
                  |L6.156|
00009c  447a0000          DCFS     0x447a0000 ; 1000
                  |L6.160|
                          DCD      DISS_Voltage
                  |L6.164|
                          DCD      0x40020800

                          AREA ||i.PowerSwitch||, CODE, READONLY, ALIGN=2

                  PowerSwitch PROC
;;;187    
;;;188    void PowerSwitch(vu8 bit)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;189    {
;;;190    	MasterSendbuf[0] = 0x01;
000002  4c0f              LDR      r4,|L7.64|
000004  2001              MOVS     r0,#1
;;;191    	MasterSendbuf[1] = 0x06;
000006  2106              MOVS     r1,#6
000008  7020              STRB     r0,[r4,#0]            ;190
00000a  7061              STRB     r1,[r4,#1]
;;;192    	MasterSendbuf[2] = 0x00;
00000c  2100              MOVS     r1,#0
00000e  70a1              STRB     r1,[r4,#2]
;;;193    	MasterSendbuf[3] = 0x01;
000010  70e0              STRB     r0,[r4,#3]
;;;194    	MasterSendbuf[4] = (u8)(bit>>8);
000012  f89d0000          LDRB     r0,[sp,#0]
000016  7121              STRB     r1,[r4,#4]
;;;195    	MasterSendbuf[5] = (u8)(bit);
000018  f89d0000          LDRB     r0,[sp,#0]
00001c  7160              STRB     r0,[r4,#5]
;;;196    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00001e  2106              MOVS     r1,#6
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       Hardware_CRC
000026  71a0              STRB     r0,[r4,#6]
;;;197    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000028  2106              MOVS     r1,#6
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       Hardware_CRC
000030  0a00              LSRS     r0,r0,#8
000032  71e0              STRB     r0,[r4,#7]
;;;198    	USART3WriteDMA(8);
000034  e8bd4038          POP      {r3-r5,lr}
000038  2008              MOVS     r0,#8
00003a  f7ffbffe          B.W      USART3WriteDMA
;;;199    }
;;;200    
                          ENDP

00003e  0000              DCW      0x0000
                  |L7.64|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.ReadPowData||, CODE, READONLY, ALIGN=2

                  ReadPowData PROC
;;;200    
;;;201    void ReadPowData(void)
000000  b510              PUSH     {r4,lr}
;;;202    {
;;;203    	MasterSendbuf[0] = 0x01;
000002  4c0e              LDR      r4,|L8.60|
000004  2001              MOVS     r0,#1
;;;204    	MasterSendbuf[1] = 0x03;
;;;205    	MasterSendbuf[2] = 0x00;
;;;206    	MasterSendbuf[3] = 0x10;
000006  2110              MOVS     r1,#0x10
000008  7020              STRB     r0,[r4,#0]            ;203
00000a  2003              MOVS     r0,#3                 ;204
00000c  7060              STRB     r0,[r4,#1]            ;204
00000e  2000              MOVS     r0,#0                 ;205
000010  70a0              STRB     r0,[r4,#2]            ;205
000012  70e1              STRB     r1,[r4,#3]
;;;207    	MasterSendbuf[4] = 0x00;
000014  7120              STRB     r0,[r4,#4]
;;;208    	MasterSendbuf[5] = 0x02;
000016  2002              MOVS     r0,#2
000018  7160              STRB     r0,[r4,#5]
;;;209    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00001a  2106              MOVS     r1,#6
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       Hardware_CRC
000022  71a0              STRB     r0,[r4,#6]
;;;210    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000024  2106              MOVS     r1,#6
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       Hardware_CRC
00002c  0a00              LSRS     r0,r0,#8
00002e  71e0              STRB     r0,[r4,#7]
;;;211    	USART3WriteDMA(8);
000030  e8bd4010          POP      {r4,lr}
000034  2008              MOVS     r0,#8
000036  f7ffbffe          B.W      USART3WriteDMA
;;;212    }
;;;213    
                          ENDP

00003a  0000              DCW      0x0000
                  |L8.60|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.SerialRemoteHandleL||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  SerialRemoteHandleL PROC
;;;1004   
;;;1005   u16 SerialRemoteHandleL(u8 len,char* buf)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1006   {
000004  ed2d8b02          VPUSH    {d8}
000008  b0b3              SUB      sp,sp,#0xcc
00000a  4605              MOV      r5,r0
;;;1007   
;;;1008     
;;;1009       u16 currCharNum;
;;;1010       u32 temp1;
;;;1011     u8 Gmode_Vale;
;;;1012   	u8 i,j;
;;;1013   	
;;;1014   	u8 addr = 0;
00000c  2000              MOVS     r0,#0
00000e  460c              MOV      r4,r1                 ;1006
;;;1015   	char str[200]={0};
000010  9032              STR      r0,[sp,#0xc8]
000012  21c8              MOVS     r1,#0xc8
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       __aeabi_memclr4
;;;1016   	int cmd_flag=255;
;;;1017   	u8 templen =0;
;;;1018   	u8 tmpFg;
;;;1019   	u8 LM_S_Vale,LOW_I_Vale,H_L_Vale,SWITCH_Vale;
;;;1020   	u16 I_ADC_Vale,V_ADC_Vale;
;;;1021   	int32_t V_CS_Vale,I_CS_Vale;
;;;1022   	float Lvl_Vale,fadcx,fsingal, fVale;
;;;1023    
;;;1024   //	u8 len = 11;
;;;1025   	u8 pntlen = 0;
;;;1026   
;;;1027   
;;;1028   	
;;;1029   	currCharNum=0;
;;;1030   	if((buf[currCharNum] != ChrStartR) || (buf[len-2] != ChrEndR)||(buf[len-1] != ChrEndS))
00001a  7820              LDRB     r0,[r4,#0]
00001c  283c              CMP      r0,#0x3c
00001e  d108              BNE      |L9.50|
000020  1960              ADDS     r0,r4,r5
000022  f8101c02          LDRB     r1,[r0,#-2]
000026  290d              CMP      r1,#0xd
000028  d103              BNE      |L9.50|
00002a  f8100c01          LDRB     r0,[r0,#-1]
00002e  280a              CMP      r0,#0xa
000030  d001              BEQ      |L9.54|
                  |L9.50|
;;;1031       {
;;;1032   		return SetErr_ACK(buf,addr ,CMD_ERR); 
000032  2202              MOVS     r2,#2
000034  e14e              B        |L9.724|
                  |L9.54|
;;;1033       } 
;;;1034   	str[currCharNum++] = ChrStartR;
000036  213c              MOVS     r1,#0x3c
000038  f88d1000          STRB     r1,[sp,#0]
;;;1035   	sprintf(&str[currCharNum],"%d",addr);
00003c  a1fe              ADR      r1,|L9.1080|
00003e  f10d0001          ADD      r0,sp,#1
000042  9a32              LDR      r2,[sp,#0xc8]
000044  f7fffffe          BL       __2sprintf
;;;1036   	strncat(str,"/",1);
000048  2201              MOVS     r2,#1
00004a  a1fc              ADR      r1,|L9.1084|
00004c  4668              MOV      r0,sp
00004e  f7fffffe          BL       strncat
;;;1037   	currCharNum =strlen(str);
000052  4668              MOV      r0,sp
000054  f7fffffe          BL       strlen
000058  fa1ffa80          UXTH     r10,r0
;;;1038   	cmd_flag=strncmp(buf,str,strlen(str));
00005c  4668              MOV      r0,sp
00005e  f7fffffe          BL       strlen
000062  4602              MOV      r2,r0
000064  4669              MOV      r1,sp
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       strncmp
;;;1039   	//testflag = cmd_flag;
;;;1040   	if(0!=cmd_flag)
00006c  2800              CMP      r0,#0
00006e  d1e0              BNE      |L9.50|
;;;1041   	{
;;;1042   		return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1043   		
;;;1044   	}
;;;1045   	for (j=0;j<CmdNumb;j++)
;;;1046       {
;;;1047   		templen = strlen(CmdStr[j]);
000070  f8dfb3cc          LDR      r11,|L9.1088|
000074  4680              MOV      r8,r0                 ;1045
;;;1048   		cmd_flag=strncmp(&buf[currCharNum],CmdStr[j],templen);
000076  eb04050a          ADD      r5,r4,r10
                  |L9.122|
00007a  eb0801c8          ADD      r1,r8,r8,LSL #3       ;1047
00007e  eb01000b          ADD      r0,r1,r11             ;1047
000082  4606              MOV      r6,r0                 ;1047
000084  f7fffffe          BL       strlen
000088  f00009ff          AND      r9,r0,#0xff           ;1047
00008c  4631              MOV      r1,r6                 ;1047
00008e  4628              MOV      r0,r5                 ;1047
000090  464a              MOV      r2,r9
000092  f7fffffe          BL       strncmp
;;;1049   	    if(0==cmd_flag)
000096  b138              CBZ      r0,|L9.168|
000098  f1080001          ADD      r0,r8,#1              ;1045
00009c  f00008ff          AND      r8,r0,#0xff           ;1045
0000a0  f1b80f13          CMP      r8,#0x13              ;1045
0000a4  d3e9              BCC      |L9.122|
0000a6  e7c4              B        |L9.50|
                  |L9.168|
;;;1050   	    {
;;;1051   
;;;1052   		  buf[0] = ChrStartS;
0000a8  203e              MOVS     r0,#0x3e
0000aa  7020              STRB     r0,[r4,#0]
;;;1053   		  currCharNum+=templen;
0000ac  eb0a0009          ADD      r0,r10,r9
0000b0  b285              UXTH     r5,r0
;;;1054   		  switch(j)
;;;1055             {
;;;1056   			case 0:
;;;1057   				pntlen = 5;    //
;;;1058   				if(buf[currCharNum]=='?')
;;;1059   				{
;;;1060   
;;;1061   					
;;;1062   					sprintf(&buf[currCharNum],"%05d",Para.CVoltage);
;;;1063   					currCharNum+=pntlen;
;;;1064   					
;;;1065   					buf[currCharNum++]=(',');
;;;1066   					sprintf(&buf[currCharNum],"%06d",Para.CLaod_Current);
;;;1067   					currCharNum+=6;
;;;1068   					
;;;1069   					buf[currCharNum++]=(',');
;;;1070   					sprintf(&buf[currCharNum],"%05d",Para.CPOW_Voltage);
;;;1071   					currCharNum+=pntlen;
;;;1072   					
;;;1073   					buf[currCharNum++]=(',');
;;;1074   					sprintf(&buf[currCharNum],"%05d",Para.CCurrent);
;;;1075   					currCharNum+=pntlen;
;;;1076   					
;;;1077   					buf[currCharNum++]=(',');
;;;1078   					sprintf(&buf[currCharNum],"%05d",Para.CR_VLUE);
;;;1079   					currCharNum+=pntlen;
;;;1080   					
;;;1081   					buf[currCharNum++]=(',');
;;;1082   					sprintf(&buf[currCharNum],"%04d",Para.CR1_VLUE);
;;;1083   					currCharNum+=4;
;;;1084   					
;;;1085   					buf[currCharNum++]=(',');
;;;1086   					sprintf(&buf[currCharNum],"%04d",Para.CR2_VLUE);
;;;1087   					currCharNum+=4;
;;;1088   
;;;1089   					buf[currCharNum++]=(',');
;;;1090   					sprintf(&buf[currCharNum],"%06d",(int)(max_discahrgeNum*1000));
;;;1091   					currCharNum+=6;
;;;1092   					
;;;1093   					buf[currCharNum++]=(',');
;;;1094   					sprintf(&buf[currCharNum],"%03d",shorttime);
;;;1095   					currCharNum+=3;
;;;1096   					
;;;1097   					buf[currCharNum++]=(',');
;;;1098   					sprintf(&buf[currCharNum],"%1d",mainswitch);
0000b2  f8dfb38c          LDR      r11,|L9.1088|
;;;1099   					currCharNum+=1;
;;;1100   					
;;;1101   					buf[currCharNum++]=(',');
;;;1102   					sprintf(&buf[currCharNum],"%1d",finishflag);
;;;1103   					currCharNum+=1;
;;;1104   					
;;;1105   					buf[currCharNum++]=(',');
;;;1106   					sprintf(&buf[currCharNum],"%1d",lockflag);
;;;1107   					currCharNum+=1;
;;;1108   					
;;;1109   					buf[currCharNum++]=(',');
;;;1110   					sprintf(&buf[currCharNum],"%2d",version);
;;;1111   					currCharNum+=2;
;;;1112   					
;;;1113   					buf[currCharNum++]=(',');
;;;1114   					sprintf(&buf[currCharNum],"%03d",Temperature);
;;;1115   					currCharNum+=3;
;;;1116   					
;;;1117   					buf[currCharNum++]=(',');
;;;1118   					sprintf(&buf[currCharNum],"%1d",overflag);
;;;1119   					currCharNum+=1;
;;;1120   //					buf[currCharNum++]=(',');
;;;1121   //					sprintf(&buf[currCharNum],"%d",H_L);
;;;1122   //					currCharNum++;
;;;1123   					
;;;1124   //					buf[currCharNum++]=(',');
;;;1125   //					sprintf(&buf[currCharNum],"%d",LM_S);
;;;1126   //					currCharNum++;
;;;1127   					
;;;1128   //					buf[currCharNum++]=(',');
;;;1129   //					sprintf(&buf[currCharNum],"%02d",(int)temperature);
;;;1130   //					currCharNum+=2;
;;;1131   					
;;;1132   				  buf[currCharNum++ ] = ChrEndR;
;;;1133   				  buf[currCharNum++ ] = ChrEndS;
;;;1134   				}
;;;1135   				else
;;;1136   				{
;;;1137   					return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1138   				}
;;;1139   				break;
;;;1140   			case 1:
;;;1141   				pntlen = 1;
;;;1142   				if(buf[currCharNum]=='?')
;;;1143   				{
;;;1144   					  sprintf(&buf[currCharNum],"%1d",MODE);
;;;1145   				    currCharNum+=pntlen;
;;;1146   				    buf[currCharNum ++] = ChrEndS;
;;;1147   					
;;;1148   				}
;;;1149   				else
;;;1150   				{
;;;1151   					pntlen = 1;				
;;;1152   					for(i=0,temp1=0;i<pntlen;i++)
;;;1153   					{
;;;1154   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1155   					}		                   
;;;1156   //					if(temp1>1)
;;;1157   //					{
;;;1158   //						return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1159   //					}
;;;1160   					MODE=temp1;
;;;1161   //					Off_GPOI_ResetSet();
;;;1162   					OnOff_GPOI_ResetSet( 2, 0 );
;;;1163   					mainswitch = 0;
;;;1164   					sendwait = 3;
;;;1165   					MODE_PARASET(MODE);
;;;1166   	//				Change_LM_Val(LM_S_Vale);
;;;1167   					buf[currCharNum++] = ChrEndR;
;;;1168   				}
;;;1169   				break;
;;;1170   				case 2:
;;;1171   				pntlen = 1;
;;;1172   				if(buf[currCharNum]=='?')
;;;1173   				{
;;;1174   					sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
0000b6  48e3              LDR      r0,|L9.1092|
0000b8  f8dfa38c          LDR      r10,|L9.1096|
0000bc  f04f090a          MOV      r9,#0xa               ;1030
0000c0  f1ab0b58          SUB      r11,r11,#0x58         ;1098
0000c4  f06f062f          MVN      r6,#0x2f              ;1154
0000c8  f1b80f13          CMP      r8,#0x13              ;1054
0000cc  d2b1              BCS      |L9.50|
0000ce  e8dff008          TBB      [pc,r8]               ;1054
0000d2  0bbb              DCB      0x0b,0xbb
0000d4  e4fdfcfb          DCB      0xe4,0xfd,0xfc,0xfb
0000d8  0a0a0a0a          DCB      0x0a,0x0a,0x0a,0x0a
0000dc  0a0afaf9          DCB      0x0a,0x0a,0xfa,0xf9
0000e0  f80a0a0a          DCB      0xf8,0x0a,0x0a,0x0a
0000e4  f700              DCB      0xf7,0x00
0000e6  e7a4              B        |L9.50|
0000e8  5d60              LDRB     r0,[r4,r5]            ;1058
0000ea  283f              CMP      r0,#0x3f              ;1058
0000ec  d1a1              BNE      |L9.50|
0000ee  f8da202c          LDR      r2,[r10,#0x2c]        ;1062  ; Para
0000f2  4656              MOV      r6,r10                ;1062
0000f4  1960              ADDS     r0,r4,r5              ;1062
0000f6  a1d5              ADR      r1,|L9.1100|
0000f8  f7fffffe          BL       __2sprintf
0000fc  1d6d              ADDS     r5,r5,#5              ;1062
0000fe  b2a8              UXTH     r0,r5                 ;1063
000100  252c              MOVS     r5,#0x2c              ;1065
000102  5425              STRB     r5,[r4,r0]            ;1065
000104  1c40              ADDS     r0,r0,#1              ;1065
000106  6b72              LDR      r2,[r6,#0x34]         ;1066  ; Para
000108  b287              UXTH     r7,r0                 ;1065
00010a  19e0              ADDS     r0,r4,r7              ;1066
00010c  a1d1              ADR      r1,|L9.1108|
00010e  f7fffffe          BL       __2sprintf
000112  1dbf              ADDS     r7,r7,#6              ;1066
000114  b2b8              UXTH     r0,r7                 ;1067
000116  5425              STRB     r5,[r4,r0]            ;1069
000118  1c40              ADDS     r0,r0,#1              ;1069
00011a  6ab2              LDR      r2,[r6,#0x28]         ;1070  ; Para
00011c  b287              UXTH     r7,r0                 ;1069
00011e  19e0              ADDS     r0,r4,r7              ;1070
000120  a1ca              ADR      r1,|L9.1100|
000122  f7fffffe          BL       __2sprintf
000126  1d7f              ADDS     r7,r7,#5              ;1070
000128  b2b8              UXTH     r0,r7                 ;1071
00012a  5425              STRB     r5,[r4,r0]            ;1073
00012c  1c40              ADDS     r0,r0,#1              ;1073
00012e  6b32              LDR      r2,[r6,#0x30]         ;1074  ; Para
000130  b287              UXTH     r7,r0                 ;1073
000132  19e0              ADDS     r0,r4,r7              ;1074
000134  a1c5              ADR      r1,|L9.1100|
000136  f7fffffe          BL       __2sprintf
00013a  1d7f              ADDS     r7,r7,#5              ;1074
00013c  b2b8              UXTH     r0,r7                 ;1075
00013e  5425              STRB     r5,[r4,r0]            ;1077
000140  1c40              ADDS     r0,r0,#1              ;1077
000142  6bb2              LDR      r2,[r6,#0x38]         ;1078  ; Para
000144  b287              UXTH     r7,r0                 ;1077
000146  19e0              ADDS     r0,r4,r7              ;1078
000148  a1c0              ADR      r1,|L9.1100|
00014a  f7fffffe          BL       __2sprintf
00014e  1d7f              ADDS     r7,r7,#5              ;1078
000150  b2b8              UXTH     r0,r7                 ;1079
000152  5425              STRB     r5,[r4,r0]            ;1081
000154  1c40              ADDS     r0,r0,#1              ;1081
000156  6bf2              LDR      r2,[r6,#0x3c]         ;1082  ; Para
000158  b287              UXTH     r7,r0                 ;1081
00015a  19e0              ADDS     r0,r4,r7              ;1082
00015c  a1bf              ADR      r1,|L9.1116|
00015e  f7fffffe          BL       __2sprintf
000162  1d3f              ADDS     r7,r7,#4              ;1082
000164  b2b8              UXTH     r0,r7                 ;1083
000166  5425              STRB     r5,[r4,r0]            ;1085
000168  1c40              ADDS     r0,r0,#1              ;1085
00016a  6c32              LDR      r2,[r6,#0x40]         ;1086  ; Para
00016c  b287              UXTH     r7,r0                 ;1085
00016e  19e0              ADDS     r0,r4,r7              ;1086
000170  a1ba              ADR      r1,|L9.1116|
000172  f7fffffe          BL       __2sprintf
000176  1d3f              ADDS     r7,r7,#4              ;1086
000178  b2b8              UXTH     r0,r7                 ;1087
00017a  5425              STRB     r5,[r4,r0]            ;1089
00017c  1c40              ADDS     r0,r0,#1              ;1089
00017e  b286              UXTH     r6,r0                 ;1089
000180  48b8              LDR      r0,|L9.1124|
000182  ed900a00          VLDR     s0,[r0,#0]            ;1090
000186  eddf0ab8          VLDR     s1,|L9.1128|
00018a  19a0              ADDS     r0,r4,r6              ;1090
00018c  a1b1              ADR      r1,|L9.1108|
00018e  ee200a20          VMUL.F32 s0,s0,s1              ;1090
000192  eebd0ac0          VCVT.S32.F32 s0,s0                 ;1090
000196  ee102a10          VMOV     r2,s0                 ;1090
00019a  f7fffffe          BL       __2sprintf
00019e  1db6              ADDS     r6,r6,#6              ;1090
0001a0  b2b0              UXTH     r0,r6                 ;1091
0001a2  49b2              LDR      r1,|L9.1132|
0001a4  5425              STRB     r5,[r4,r0]            ;1093
0001a6  1c40              ADDS     r0,r0,#1              ;1093
0001a8  b286              UXTH     r6,r0                 ;1093
0001aa  780a              LDRB     r2,[r1,#0]            ;1094  ; shorttime
0001ac  19a0              ADDS     r0,r4,r6              ;1094
0001ae  a1b0              ADR      r1,|L9.1136|
0001b0  f7fffffe          BL       __2sprintf
0001b4  1cf6              ADDS     r6,r6,#3              ;1094
0001b6  b2b0              UXTH     r0,r6                 ;1095
0001b8  5425              STRB     r5,[r4,r0]            ;1097
0001ba  1c40              ADDS     r0,r0,#1              ;1097
0001bc  b286              UXTH     r6,r0                 ;1097
0001be  f89b2006          LDRB     r2,[r11,#6]           ;1098  ; mainswitch
0001c2  19a0              ADDS     r0,r4,r6              ;1098
0001c4  a1ac              ADR      r1,|L9.1144|
0001c6  f7fffffe          BL       __2sprintf
0001ca  1c76              ADDS     r6,r6,#1              ;1098
0001cc  b2b0              UXTH     r0,r6                 ;1099
0001ce  49ab              LDR      r1,|L9.1148|
0001d0  5425              STRB     r5,[r4,r0]            ;1101
0001d2  1c40              ADDS     r0,r0,#1              ;1101
0001d4  b286              UXTH     r6,r0                 ;1101
0001d6  780a              LDRB     r2,[r1,#0]            ;1102  ; finishflag
0001d8  19a0              ADDS     r0,r4,r6              ;1102
0001da  a1a7              ADR      r1,|L9.1144|
0001dc  f7fffffe          BL       __2sprintf
0001e0  1c76              ADDS     r6,r6,#1              ;1102
0001e2  b2b0              UXTH     r0,r6                 ;1103
0001e4  49a6              LDR      r1,|L9.1152|
0001e6  5425              STRB     r5,[r4,r0]            ;1105
0001e8  1c40              ADDS     r0,r0,#1              ;1105
0001ea  b286              UXTH     r6,r0                 ;1105
0001ec  780a              LDRB     r2,[r1,#0]            ;1106  ; lockflag
0001ee  19a0              ADDS     r0,r4,r6              ;1106
0001f0  a1a1              ADR      r1,|L9.1144|
0001f2  f7fffffe          BL       __2sprintf
0001f6  1c76              ADDS     r6,r6,#1              ;1106
0001f8  b2b0              UXTH     r0,r6                 ;1107
0001fa  49a2              LDR      r1,|L9.1156|
0001fc  5425              STRB     r5,[r4,r0]            ;1109
0001fe  1c40              ADDS     r0,r0,#1              ;1109
000200  b286              UXTH     r6,r0                 ;1109
000202  780a              LDRB     r2,[r1,#0]            ;1110  ; version
000204  19a0              ADDS     r0,r4,r6              ;1110
000206  a1a0              ADR      r1,|L9.1160|
000208  f7fffffe          BL       __2sprintf
00020c  1cb6              ADDS     r6,r6,#2              ;1110
00020e  b2b0              UXTH     r0,r6                 ;1111
000210  499e              LDR      r1,|L9.1164|
000212  5425              STRB     r5,[r4,r0]            ;1113
000214  1c40              ADDS     r0,r0,#1              ;1113
000216  b286              UXTH     r6,r0                 ;1113
000218  f9b12000          LDRSH    r2,[r1,#0]            ;1114  ; Temperature
00021c  19a0              ADDS     r0,r4,r6              ;1114
00021e  a194              ADR      r1,|L9.1136|
000220  f7fffffe          BL       __2sprintf
000224  1cf6              ADDS     r6,r6,#3              ;1114
000226  b2b0              UXTH     r0,r6                 ;1115
000228  4999              LDR      r1,|L9.1168|
00022a  5425              STRB     r5,[r4,r0]            ;1117
00022c  1c40              ADDS     r0,r0,#1              ;1117
00022e  b285              UXTH     r5,r0                 ;1117
000230  780a              LDRB     r2,[r1,#0]            ;1118  ; overflag
000232  1960              ADDS     r0,r4,r5              ;1118
000234  a190              ADR      r1,|L9.1144|
000236  f7fffffe          BL       __2sprintf
00023a  1c6d              ADDS     r5,r5,#1              ;1118
00023c  b2a8              UXTH     r0,r5                 ;1119
00023e  210d              MOVS     r1,#0xd               ;1132
000240  5421              STRB     r1,[r4,r0]            ;1132
000242  1c40              ADDS     r0,r0,#1              ;1132
000244  b280              UXTH     r0,r0                 ;1132
000246  e023              B        |L9.656|
000248  5d60              LDRB     r0,[r4,r5]            ;1142
00024a  2201              MOVS     r2,#1                 ;1141
00024c  283f              CMP      r0,#0x3f              ;1142
00024e  d01a              BEQ      |L9.646|
000250  2000              MOVS     r0,#0                 ;1152
000252  4601              MOV      r1,r0                 ;1152
                  |L9.596|
000254  5d63              LDRB     r3,[r4,r5]            ;1154
000256  eb010181          ADD      r1,r1,r1,LSL #2       ;1154
00025a  1c6d              ADDS     r5,r5,#1              ;1154
00025c  1c40              ADDS     r0,r0,#1              ;1154
00025e  eb060141          ADD      r1,r6,r1,LSL #1       ;1154
000262  b2c0              UXTB     r0,r0                 ;1152
000264  4419              ADD      r1,r1,r3              ;1154
000266  b2ad              UXTH     r5,r5                 ;1154
000268  4290              CMP      r0,r2                 ;1152
00026a  d3f3              BCC      |L9.596|
00026c  465e              MOV      r6,r11                ;1160
00026e  f88b1005          STRB     r1,[r11,#5]           ;1160
000272  2100              MOVS     r1,#0                 ;1162
000274  2002              MOVS     r0,#2                 ;1162
000276  f7fffffe          BL       OnOff_GPOI_ResetSet
00027a  2000              MOVS     r0,#0                 ;1163
00027c  71b0              STRB     r0,[r6,#6]            ;1163
00027e  2003              MOVS     r0,#3                 ;1164
000280  7230              STRB     r0,[r6,#8]            ;1164
000282  7970              LDRB     r0,[r6,#5]            ;1165  ; MODE
000284  e229              B        |L9.1754|
                  |L9.646|
000286  f89b2005          LDRB     r2,[r11,#5]           ;1144  ; MODE
00028a  1960              ADDS     r0,r4,r5              ;1144
00028c  a17a              ADR      r1,|L9.1144|
00028e  e02a              B        |L9.742|
                  |L9.656|
000290  f8049000          STRB     r9,[r4,r0]            ;1133
000294  1c40              ADDS     r0,r0,#1              ;1133
000296  b285              UXTH     r5,r0                 ;1133
000298  e3f6              B        |L9.2696|
00029a  5d61              LDRB     r1,[r4,r5]            ;1172
00029c  2201              MOVS     r2,#1                 ;1171
00029e  293f              CMP      r1,#0x3f              ;1172
                  |L9.672|
0002a0  d07e              BEQ      |L9.928|
;;;1175   				    currCharNum+=pntlen;
;;;1176   				    buf[currCharNum ++] = ChrEndS;
;;;1177   					
;;;1178   				}
;;;1179   				else
;;;1180   				{
;;;1181   					pntlen = 1;				
;;;1182   					for(i=0,temp1=0;i<pntlen;i++)
0002a2  2100              MOVS     r1,#0
0002a4  4608              MOV      r0,r1
                  |L9.678|
;;;1183   					{
;;;1184   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
0002a6  5d63              LDRB     r3,[r4,r5]
0002a8  eb000080          ADD      r0,r0,r0,LSL #2
0002ac  1c6d              ADDS     r5,r5,#1
0002ae  1c49              ADDS     r1,r1,#1
0002b0  eb060040          ADD      r0,r6,r0,LSL #1
0002b4  b2c9              UXTB     r1,r1                 ;1182
0002b6  4418              ADD      r0,r0,r3
0002b8  b2ad              UXTH     r5,r5
0002ba  4291              CMP      r1,r2                 ;1182
0002bc  d3f3              BCC      |L9.678|
;;;1185   					}		                   
;;;1186   					if(temp1>1)
0002be  e006              B        |L9.718|
0002c0  e3fe              B        |L9.2752|
0002c2  e3fe              B        |L9.2754|
0002c4  e3fe              B        |L9.2756|
0002c6  e3fe              B        |L9.2758|
0002c8  e3fe              B        |L9.2760|
0002ca  e209              B        |L9.1760|
0002cc  e01a              B        |L9.772|
                  |L9.718|
0002ce  2801              CMP      r0,#1
0002d0  d90d              BLS      |L9.750|
                  |L9.722|
;;;1187   					{
;;;1188   						return SetErr_ACK(buf, addr ,PARA_ERR);
0002d2  2201              MOVS     r2,#1
                  |L9.724|
;;;1189   					}
;;;1190   //					MODE=temp1;
;;;1191   					
;;;1192   					
;;;1193   					mainswitch = temp1;
;;;1194   //						Para.CSET_Voltage = 5000;
;;;1195   //						Para.CSET_Current = 1000;
;;;1196   					
;;;1197   						
;;;1198   					MODE_ONOFF(mainswitch);
;;;1199   	//				Change_LM_Val(LM_S_Vale);
;;;1200   					buf[currCharNum++] = ChrEndR;
;;;1201   		        }
;;;1202   				break;
;;;1203   				case 3:
;;;1204   				pntlen = 1;
;;;1205   				if(buf[currCharNum]=='?')
;;;1206   				{
;;;1207   					  sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1208   				    currCharNum+=pntlen;
;;;1209   				    buf[currCharNum ++] = ChrEndS;
;;;1210   					
;;;1211   				}
;;;1212   				else
;;;1213   				{
;;;1214   					if(currCharNum == 0x0b)
;;;1215   					{						
;;;1216   						for(i=0,temp1=0;i<5;i++)
;;;1217   						{
;;;1218   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1219   						}
;;;1220   					}		
;;;1221   					Para.IR_Start_C = temp1;//起始电流
;;;1222   					temp1 = 0;
;;;1223   					
;;;1224   					if(buf[currCharNum++] == ',')
;;;1225   					{
;;;1226   						for(i=0,temp1=0;i<5;i++)
;;;1227   						{
;;;1228   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1229   						}
;;;1230   					}	
;;;1231   					Para.IR_Step_C = temp1;//步进电流
;;;1232   					temp1 = 0;
;;;1233   					 
;;;1234   					if(buf[currCharNum++] == ',')
;;;1235   					{
;;;1236   						for(i=0,temp1=0;i<5;i++)
;;;1237   						{
;;;1238   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1239   						}
;;;1240   					}	
;;;1241   					Para.IR_Threshold_V = temp1;//门槛电压
;;;1242   					temp1 = 0;
;;;1243   					
;;;1244   					if(buf[currCharNum++] == ',')
;;;1245   					{
;;;1246   						for(i=0,temp1=0;i<3;i++)
;;;1247   						{
;;;1248   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1249   						}
;;;1250   					}	
;;;1251   					Para.IR_Step_Time = temp1;//步进时间
;;;1252   					temp1 = 0;
;;;1253   					
;;;1254   					if(buf[currCharNum++] == ',')
;;;1255   					{
;;;1256   						for(i=0,temp1=0;i<5;i++)
;;;1257   						{
;;;1258   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1259   						}
;;;1260   					}	
;;;1261   					Para.POWER_OutPut_V = temp1;//电源电压
;;;1262   					temp1 = 0;
;;;1263   					
;;;1264   					if(buf[currCharNum++] == ',')
;;;1265   					{
;;;1266   						for(i=0,temp1=0;i<5;i++)
;;;1267   						{
;;;1268   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1269   						}
;;;1270   					}	
;;;1271   					Para.POWER_Limit_C = temp1;//电源电流
;;;1272   					temp1 = 0;
;;;1273   					
;;;1274   					if(buf[currCharNum++] == ',')
;;;1275   					{
;;;1276   						for(i=0,temp1=0;i<5;i++)
;;;1277   						{
;;;1278   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1279   						}
;;;1280   					}	
;;;1281   					Para.POWER_Cutoff_C = temp1;//设置充电截止电流
;;;1282   					temp1 = 0;
;;;1283   					
;;;1284   					if(buf[currCharNum++] == ',')
;;;1285   					{
;;;1286   						for(i=0,temp1=0;i<5;i++)
;;;1287   						{
;;;1288   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1289   						}
;;;1290   					}	
;;;1291   					Para.LOAD_V = temp1;//负载电压
;;;1292   					temp1 = 0;
;;;1293   					
;;;1294   					if(buf[currCharNum++] == ',')
;;;1295   					{
;;;1296   						for(i=0,temp1=0;i<5;i++)
;;;1297   						{
;;;1298   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1299   						}
;;;1300   					}	
;;;1301   					Para.LOAD_C = temp1;//负载电流
;;;1302   					temp1 = 0;
;;;1303   					
;;;1304   					if(buf[currCharNum++] == ',')
;;;1305   					{
;;;1306   						for(i=0,temp1=0;i<5;i++)
;;;1307   						{
;;;1308   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1309   						}
;;;1310   					}	
;;;1311   					Para.LOAD_Cutoff_V = temp1;//设置负载截止电压
;;;1312   					temp1 = 0;
;;;1313   					
;;;1314   					if(buf[currCharNum++] == ',')
;;;1315   					{
;;;1316   						for(i=0,temp1=0;i<5;i++)
;;;1317   						{
;;;1318   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1319   						}
;;;1320   					}	
;;;1321   					Para.CDC_OutPut_V = temp1;//设置容量测试充电电压
;;;1322   					temp1 = 0;
;;;1323   					
;;;1324   					if(buf[currCharNum++] == ',')
;;;1325   					{
;;;1326   						for(i=0,temp1=0;i<5;i++)
;;;1327   						{
;;;1328   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1329   						}
;;;1330   					}	
;;;1331   					Para.CDC_Limit_C = temp1;//设置容量测试充电限制电流
;;;1332   					temp1 = 0;
;;;1333   					
;;;1334   					if(buf[currCharNum++] == ',')
;;;1335   					{
;;;1336   						for(i=0,temp1=0;i<5;i++)
;;;1337   						{
;;;1338   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1339   						}
;;;1340   					}	
;;;1341   					Para.CDC_Ccutoff_V = temp1;//设置容量测试充电截止电压
;;;1342   					temp1 = 0;
;;;1343   					
;;;1344   					if(buf[currCharNum++] == ',')
;;;1345   					{
;;;1346   						for(i=0,temp1=0;i<5;i++)
;;;1347   						{
;;;1348   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1349   						}
;;;1350   					}	
;;;1351   					Para.CDC_Ccutoff_C = temp1;//设置容量测试充电截止电流
;;;1352   					temp1 = 0;
;;;1353   					
;;;1354   					if(buf[currCharNum++] == ',')
;;;1355   					{
;;;1356   						for(i=0,temp1=0;i<5;i++)
;;;1357   						{
;;;1358   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1359   						}
;;;1360   					}	
;;;1361   					Para.CDC_Load_C = temp1;//设置容量测试放电电流
;;;1362   					temp1 = 0;
;;;1363   					
;;;1364   					if(buf[currCharNum++] == ',')
;;;1365   					{
;;;1366   						for(i=0,temp1=0;i<5;i++)
;;;1367   						{
;;;1368   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1369   						}
;;;1370   					}	
;;;1371   					Para.CDC_Dcutoff_V = temp1;//设置容量测试放电截止电压
;;;1372   					temp1 = 0;
;;;1373   					
;;;1374   					if(buf[currCharNum++] == ',')
;;;1375   					{
;;;1376   						for(i=0,temp1=0;i<3;i++)
;;;1377   						{
;;;1378   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1379   						}
;;;1380   					}	
;;;1381   					Para.CDC_Cycle_Time = temp1;//循环次数
;;;1382   					temp1 = 0;
;;;1383   					
;;;1384   					if(buf[currCharNum++] == ',')
;;;1385   					{
;;;1386   						for(i=0,temp1=0;i<3;i++)
;;;1387   						{
;;;1388   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1389   						}
;;;1390   					}	
;;;1391   					if(MODE == 0)
;;;1392   					{
;;;1393   						Para.CLOAD_MODE = temp1;//负载模式
;;;1394   					}
;;;1395   					temp1 = 0;
;;;1396   //					MODE_PARASET(MODE);
;;;1397   					
;;;1398   					if(buf[currCharNum++] == ',')
;;;1399   					{
;;;1400   						for(i=0,temp1=0;i<3;i++)
;;;1401   						{
;;;1402   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1403   						}
;;;1404   					}	
;;;1405   					Rraly = temp1;//内阻档位
;;;1406   					temp1 = 0;
;;;1407   					
;;;1408   					if(buf[currCharNum++] == ',')
;;;1409   					{
;;;1410   						for(i=0,temp1=0;i<3;i++)
;;;1411   						{
;;;1412   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1413   						}
;;;1414   					}	
;;;1415   					Para.ACT_DELAY = temp1;//激活延时
;;;1416   					temp1 = 0;
;;;1417   					
;;;1418   					if(buf[currCharNum++] == ',')
;;;1419   					{
;;;1420   						for(i=0,temp1=0;i<6;i++)
;;;1421   						{
;;;1422   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1423   						}
;;;1424   					}	
;;;1425   					Para.LOAD_P = temp1*10;//负载功率
;;;1426   					temp1 = 0;
;;;1427   					
;;;1428   					MODE_PARASET(MODE);
;;;1429   					
;;;1430   					 buf[currCharNum++] = ChrEndR;
;;;1431   		        }
;;;1432   				break;
;;;1433   				case 4:
;;;1434   				pntlen = 1;
;;;1435   				if(buf[currCharNum]=='?')
;;;1436   				{
;;;1437   					  sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1438   				    currCharNum+=pntlen;
;;;1439   				    buf[currCharNum ++] = ChrEndS;
;;;1440   					
;;;1441   				}
;;;1442   				else
;;;1443   				{
;;;1444   					if(currCharNum == 0x0b)
;;;1445   					{						
;;;1446   						for(i=0,temp1=0;i<2;i++)
;;;1447   						{
;;;1448   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1449   						}
;;;1450   					}
;;;1451   					MODE = temp1;//项目
;;;1452   					temp1 = 0;
;;;1453   					
;;;1454   					if(MODE == 0)
;;;1455   					{
;;;1456   						if(buf[currCharNum++] == ',')
;;;1457   						{
;;;1458   							for(i=0,temp1=0;i<5;i++)
;;;1459   							{
;;;1460   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1461   							}
;;;1462   						}	
;;;1463   						
;;;1464   						temp1 = 0;
;;;1465   						
;;;1466   						if(buf[currCharNum++] == ',')
;;;1467   						{
;;;1468   							for(i=0,temp1=0;i<5;i++)
;;;1469   							{
;;;1470   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1471   							}
;;;1472   						}	
;;;1473   						Para.CSET_Current_Laod = temp1;//负载电流
;;;1474   						temp1 = 0;
;;;1475   						
;;;1476   	
;;;1477   						if(Para.CSET_Current_Laod > 20000)
;;;1478   						{
;;;1479   							LOAD_I_SW = 1;
;;;1480   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1481   						}else{
;;;1482   							LOAD_I_SW = 0;
;;;1483   							GPIO_SetBits(GPIOC,GPIO_Pin_11);//电流测量为低档位
;;;1484   						}
;;;1485   						if(buf[currCharNum++] == ',')
;;;1486   						{
;;;1487   							for(i=0,temp1=0;i<1;i++)
;;;1488   							{
;;;1489   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1490   							}
;;;1491   						}
;;;1492   						mainswitch = temp1;//开关
;;;1493   						if(mainswitch == 0)
;;;1494   						{
;;;1495   							LOAD_I_SW = 1;
;;;1496   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1497   						}
;;;1498   					}else if(MODE == 1){
;;;1499   						if(buf[currCharNum++] == ',')
;;;1500   						{
;;;1501   							for(i=0,temp1=0;i<5;i++)
;;;1502   							{
;;;1503   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1504   							}
;;;1505   						}	
;;;1506   						Para.CDC_OutPut_V = temp1;//电源电压
;;;1507   						temp1 = 0;
;;;1508   						
;;;1509   						if(buf[currCharNum++] == ',')
;;;1510   						{
;;;1511   							for(i=0,temp1=0;i<5;i++)
;;;1512   							{
;;;1513   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1514   							}
;;;1515   						}	
;;;1516   						Para.CDC_Limit_C = temp1;//电源电流
;;;1517   						temp1 = 0;
;;;1518   						
;;;1519   						if(buf[currCharNum++] == ',')
;;;1520   						{
;;;1521   							for(i=0,temp1=0;i<1;i++)
;;;1522   							{
;;;1523   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1524   							}
;;;1525   						}
;;;1526   						mainswitch = temp1;//开关
;;;1527   					}else if(MODE == 2){
;;;1528   						LOAD_I_SW = 1;
;;;1529   						GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1530   						if(buf[currCharNum++] == ',')
;;;1531   						{
;;;1532   							for(i=0,temp1=0;i<5;i++)
;;;1533   							{
;;;1534   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1535   							}
;;;1536   						}	
;;;1537   						Para.IR_Start_C = temp1;//起始电流
;;;1538   						temp1 = 0;
;;;1539   						
;;;1540   						if(buf[currCharNum++] == ',')
;;;1541   						{
;;;1542   							for(i=0,temp1=0;i<5;i++)
;;;1543   							{
;;;1544   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1545   							}
;;;1546   						}	
;;;1547   						Para.IR_Step_C = temp1;//步进电流
;;;1548   						temp1 = 0;
;;;1549   						
;;;1550   						if(buf[currCharNum++] == ',')
;;;1551   						{
;;;1552   							for(i=0,temp1=0;i<1;i++)
;;;1553   							{
;;;1554   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1555   							}
;;;1556   						}
;;;1557   						mainswitch = temp1;//开关
;;;1558   						
;;;1559   						if(mainswitch == 1)
;;;1560   						{
;;;1561   							finishflag = 0;
;;;1562   						}
;;;1563   					}else if(MODE == 3){
;;;1564   						if(buf[currCharNum++] == ',')
;;;1565   						{
;;;1566   							for(i=0,temp1=0;i<5;i++)
;;;1567   							{
;;;1568   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1569   							}
;;;1570   						}	
;;;1571   						Para.CDC_OutPut_V = temp1;//电源电压
;;;1572   						temp1 = 0;
;;;1573   						
;;;1574   						
;;;1575   						if(buf[currCharNum++] == ',')
;;;1576   						{
;;;1577   							for(i=0,temp1=0;i<5;i++)
;;;1578   							{
;;;1579   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1580   							}
;;;1581   						}	
;;;1582   						Para.CDC_Limit_C = temp1;//电源电流
;;;1583   						temp1 = 0;
;;;1584   						
;;;1585   						if(buf[currCharNum++] == ',')
;;;1586   						{
;;;1587   							for(i=0,temp1=0;i<1;i++)
;;;1588   							{
;;;1589   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1590   							}
;;;1591   						}
;;;1592   						mainswitch = temp1;//开关
;;;1593   						
;;;1594   						
;;;1595   					}else if(MODE == 4){
;;;1596   						if(buf[currCharNum++] == ',')
;;;1597   						{
;;;1598   							for(i=0,temp1=0;i<5;i++)
;;;1599   							{
;;;1600   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1601   							}
;;;1602   						}	
;;;1603   						
;;;1604   						temp1 = 0;
;;;1605   						
;;;1606   						if(buf[currCharNum++] == ',')
;;;1607   						{
;;;1608   							for(i=0,temp1=0;i<5;i++)
;;;1609   							{
;;;1610   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1611   							}
;;;1612   						}	
;;;1613   						Para.CSET_Current_Laod = temp1;//负载电流
;;;1614   						temp1 = 0;
;;;1615   						
;;;1616   	
;;;1617   						if(Para.CSET_Current_Laod > 20000)
;;;1618   						{
;;;1619   							LOAD_I_SW = 1;
;;;1620   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1621   						}else{
;;;1622   							LOAD_I_SW = 0;
;;;1623   							GPIO_SetBits(GPIOC,GPIO_Pin_11);//电流测量为低档位
;;;1624   						}
;;;1625   						if(buf[currCharNum++] == ',')
;;;1626   						{
;;;1627   							for(i=0,temp1=0;i<1;i++)
;;;1628   							{
;;;1629   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1630   							}
;;;1631   						}
;;;1632   						mainswitch = temp1;//开关
;;;1633   						if(mainswitch == 0)
;;;1634   						{
;;;1635   							LOAD_I_SW = 1;
;;;1636   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1637   						}
;;;1638   					}else if(MODE == 5){
;;;1639   						if(buf[currCharNum++] == ',')
;;;1640   						{
;;;1641   							for(i=0,temp1=0;i<5;i++)
;;;1642   							{
;;;1643   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1644   							}
;;;1645   						}	
;;;1646   						temp1 = 0;
;;;1647   						
;;;1648   						if(buf[currCharNum++] == ',')
;;;1649   						{
;;;1650   							for(i=0,temp1=0;i<5;i++)
;;;1651   							{
;;;1652   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1653   							}
;;;1654   						}	
;;;1655   						temp1 = 0;
;;;1656   						
;;;1657   						if(buf[currCharNum++] == ',')
;;;1658   						{
;;;1659   							for(i=0,temp1=0;i<1;i++)
;;;1660   							{
;;;1661   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1662   							}
;;;1663   						}
;;;1664   						mainswitch = temp1;//开关
;;;1665   						if(mainswitch == 0)
;;;1666   						{
;;;1667   							mainswitch = 0;
;;;1668   						}
;;;1669   					}else if(MODE == 6){
;;;1670   						if(buf[currCharNum++] == ',')
;;;1671   						{
;;;1672   							for(i=0,temp1=0;i<5;i++)
;;;1673   							{
;;;1674   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1675   							}
;;;1676   						}	
;;;1677   						temp1 = 0;
;;;1678   						
;;;1679   						if(buf[currCharNum++] == ',')
;;;1680   						{
;;;1681   							for(i=0,temp1=0;i<5;i++)
;;;1682   							{
;;;1683   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1684   							}
;;;1685   						}	
;;;1686   						temp1 = 0;
;;;1687   						
;;;1688   						if(buf[currCharNum++] == ',')
;;;1689   						{
;;;1690   							for(i=0,temp1=0;i<1;i++)
;;;1691   							{
;;;1692   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1693   							}
;;;1694   						}
;;;1695   						mainswitch = temp1;//开关
;;;1696   					}
;;;1697   					
;;;1698   					temp1 = 0;
;;;1699   //					MODE_PARASET(MODE);
;;;1700   					Off_GPOI_ResetSet();
;;;1701   					LIST_ONOFF(mainswitch);
;;;1702   					buf[currCharNum++] = ChrEndR;
;;;1703   		        }
;;;1704   				break;
;;;1705   				case 12://电压校准
;;;1706   				{
;;;1707   					pntlen = 8;
;;;1708   					if(buf[currCharNum]=='?')
;;;1709   					{
;;;1710   						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1711   						sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1712   						currCharNum+=pntlen;
;;;1713   						buf[currCharNum++ ] = ChrEndS;
;;;1714   					}
;;;1715   					else
;;;1716   					{
;;;1717   						tmpFg = 1;
;;;1718   						for(i=0;i<pntlen;i++)
;;;1719   						{
;;;1720   						   if(i==0||i==4)
;;;1721   							  continue;
;;;1722   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1723   						   {
;;;1724   							  tmpFg = (tmpFg&0x01);
;;;1725   						   }
;;;1726   						   else
;;;1727   						   {
;;;1728   							  tmpFg = 0;
;;;1729   						   }
;;;1730   						}
;;;1731   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1732   						{
;;;1733   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1734   							
;;;1735   						}
;;;1736   						temp1=0;
;;;1737   						for(i=0;i<pntlen;i++)
;;;1738   						{
;;;1739   						   if(i==0)
;;;1740   						   {
;;;1741   							   fsingal = buf[currCharNum++]-0x30;
;;;1742   							   continue; 
;;;1743   						   } 
;;;1744   						   else if(i==4)
;;;1745   						   {
;;;1746   							   currCharNum++;
;;;1747   							   continue; 
;;;1748   						   }
;;;1749   						   else									 
;;;1750   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1751   						}	
;;;1752   						CalHandle(0,fsingal,temp1);
;;;1753   						
;;;1754   					}
;;;1755   				}break;
;;;1756   				case 5:
;;;1757   				pntlen = 1;
;;;1758   				if(buf[currCharNum]=='?')
;;;1759   				{
;;;1760   					sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1761   				    currCharNum+=pntlen;
;;;1762   				    buf[currCharNum ++] = ChrEndS;
;;;1763   					
;;;1764   				}
;;;1765   				else
;;;1766   				{
;;;1767   					pntlen = 1;				
;;;1768   					for(i=0,temp1=0;i<pntlen;i++)
;;;1769   					{
;;;1770   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1771   					}		                   
;;;1772   					if(temp1>1)
;;;1773   					{
;;;1774   						return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1775   					}
;;;1776   //					MODE=temp1;
;;;1777   					
;;;1778   					
;;;1779   					overflag = temp1;
;;;1780   //						Para.CSET_Voltage = 5000;
;;;1781   //						Para.CSET_Current = 1000;
;;;1782   					
;;;1783   						
;;;1784   //					MODE_ONOFF(mainswitch);
;;;1785   	//				Change_LM_Val(LM_S_Vale);
;;;1786   					buf[currCharNum++] = ChrEndR;
;;;1787   		        }
;;;1788   				break;
;;;1789   				case 13://电流校准
;;;1790   				{
;;;1791   					pntlen = 8;
;;;1792   					if(buf[currCharNum]=='?')
;;;1793   					{
;;;1794   //						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1795   //									sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1796   //						currCharNum+=pntlen;
;;;1797   //						buf[currCharNum++ ] = ChrEndS;
;;;1798   					}
;;;1799   					else
;;;1800   					{
;;;1801   						tmpFg = 1;
;;;1802   						for(i=0;i<pntlen;i++)
;;;1803   						{
;;;1804   						   if(i==0||i==4)
;;;1805   							  continue;
;;;1806   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1807   						   {
;;;1808   							  tmpFg = (tmpFg&0x01);
;;;1809   						   }
;;;1810   						   else
;;;1811   						   {
;;;1812   							  tmpFg = 0;
;;;1813   						   }
;;;1814   						}
;;;1815   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1816   						{
;;;1817   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1818   							
;;;1819   						}
;;;1820   						temp1=0;
;;;1821   						for(i=0;i<pntlen;i++)
;;;1822   						{
;;;1823   						   if(i==0)
;;;1824   						   {
;;;1825   							   fsingal = buf[currCharNum++]-0x30;
;;;1826   							   continue; 
;;;1827   						   } 
;;;1828   						   else if(i==4)
;;;1829   						   {
;;;1830   							   currCharNum++;
;;;1831   							   continue; 
;;;1832   						   }
;;;1833   						   else									 
;;;1834   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1835   						}	
;;;1836   						CalHandle(1,fsingal,temp1);
;;;1837   						
;;;1838   					}
;;;1839   				}break;
;;;1840   				case 14://电阻校准
;;;1841   				{
;;;1842   					pntlen = 6;
;;;1843   					if(buf[currCharNum]=='?')
;;;1844   					{
;;;1845   						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1846   									sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1847   						currCharNum+=pntlen;
;;;1848   						buf[currCharNum++ ] = ChrEndS;
;;;1849   					}
;;;1850   					else
;;;1851   					{
;;;1852   						tmpFg = 1;
;;;1853   						for(i=0;i<pntlen;i++)
;;;1854   						{
;;;1855   						   if(i==0||i==4)
;;;1856   							  continue;
;;;1857   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1858   						   {
;;;1859   							  tmpFg = (tmpFg&0x01);
;;;1860   						   }
;;;1861   						   else
;;;1862   						   {
;;;1863   							  tmpFg = 0;
;;;1864   						   }
;;;1865   						}
;;;1866   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1867   						{
;;;1868   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1869   							
;;;1870   						}
;;;1871   						temp1=0;
;;;1872   						for(i=0;i<pntlen;i++)
;;;1873   						{
;;;1874   						   if(i==0)
;;;1875   						   {
;;;1876   							   fsingal = buf[currCharNum++]-0x30;
;;;1877   							   continue; 
;;;1878   						   } 
;;;1879   //						   else if(i==4)
;;;1880   //						   {
;;;1881   //							   currCharNum++;
;;;1882   //							   continue; 
;;;1883   //						   }
;;;1884   //						   else									 
;;;1885   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1886   						}
;;;1887   						CalHandle(2,fsingal,temp1);
;;;1888   						
;;;1889   					}
;;;1890   				}break;
;;;1891   				case 18:
;;;1892   				{
;;;1893   					if(buf[currCharNum]=='?')
;;;1894   					{
;;;1895   //						sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1896   //						currCharNum+=pntlen;
;;;1897   //						buf[currCharNum ++] = ChrEndS;
;;;1898   						
;;;1899   					}
;;;1900   					else
;;;1901   					{
;;;1902   						pntlen = 1;				
;;;1903   						for(i=0,temp1=0;i<pntlen;i++)
;;;1904   						{
;;;1905   							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1906   						}		                   
;;;1907   						if(temp1>1)
;;;1908   						{
;;;1909   							return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1910   						}
;;;1911   	//					MODE=temp1;
;;;1912   						
;;;1913   						bootflag = 1;
;;;1914   						Write_Boot_Flag();
;;;1915   						if(temp1 == 1)
;;;1916   						{
;;;1917   							JumpBoot(55);
;;;1918   						}
;;;1919   					}
;;;1920   				}break;
;;;1921   //				case 15:
;;;1922   //				{
;;;1923   //					pntlen = 1;
;;;1924   //					if(buf[currCharNum]=='?')
;;;1925   //					{
;;;1926   //						sprintf(&buf[currCharNum],"%1d",Gmode_Vale);
;;;1927   //						currCharNum+=pntlen;
;;;1928   //						buf[currCharNum] = ChrEndR;
;;;1929   //						currCharNum++;
;;;1930   //	//				    buf[currCharNum ++] = ChrEndS;
;;;1931   //						
;;;1932   //					}
;;;1933   //					else
;;;1934   //					{
;;;1935   //						tmpFg = 1;
;;;1936   //						for(i=0;i<pntlen;i++)
;;;1937   //						{
;;;1938   //						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1939   //						   {
;;;1940   //							  tmpFg = (tmpFg&0x01);
;;;1941   //						   }
;;;1942   //						   else
;;;1943   //						   {
;;;1944   //							  tmpFg = 0;
;;;1945   //						   }
;;;1946   //						}
;;;1947   //						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1948   //						{
;;;1949   //							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1950   //							
;;;1951   //						}					
;;;1952   //						for(i=0,temp1=0;i<pntlen;i++)
;;;1953   //						{
;;;1954   //							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1955   //						}		                   
;;;1956   //						if(temp1 >Mode_H)
;;;1957   //						 {
;;;1958   //							 return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1959   //							 
;;;1960   //						 }
;;;1961   //						 if(H_L == 1)
;;;1962   //						 {
;;;1963   //							CalHandle(3,1,temp1);
;;;1964   //						 }else{
;;;1965   //							 CalHandle(3,0,temp1);
;;;1966   //						 }
;;;1967   //						 
;;;1968   ////								 Mode=temp1;
;;;1969   ////								Change_MODE_Val(Mode);
;;;1970   ////						 buf[currCharNum++] = ChrEndS;
;;;1971   //					}
;;;1972   //					break;
;;;1973   //				}break;
;;;1974   //				case 16:
;;;1975   //				{
;;;1976   //					pntlen = 3;
;;;1977   //					if(buf[currCharNum]=='?')
;;;1978   //					{
;;;1979   //						sprintf(&buf[currCharNum],"%1d",Gmode_Vale);
;;;1980   //						currCharNum+=pntlen;
;;;1981   //						buf[currCharNum] = ChrEndR;
;;;1982   //						currCharNum++;
;;;1983   //	//				    buf[currCharNum ++] = ChrEndS;
;;;1984   //						
;;;1985   //					}
;;;1986   //					else
;;;1987   //					{
;;;1988   //						tmpFg = 1;
;;;1989   //						for(i=0;i<pntlen;i++)
;;;1990   //						{
;;;1991   //						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1992   //						   {
;;;1993   //							  tmpFg = (tmpFg&0x01);
;;;1994   //						   }
;;;1995   //						   else
;;;1996   //						   {
;;;1997   //							  tmpFg = 0;
;;;1998   //						   }
;;;1999   //						}
;;;2000   //						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;2001   //						{
;;;2002   //							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;2003   //							
;;;2004   //						}					
;;;2005   //						for(i=0,temp1=0;i<pntlen;i++)
;;;2006   //						{
;;;2007   //							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;2008   //						}		                   
;;;2009   //						 overflag = temp1;
;;;2010   //						 
;;;2011   ////								 Mode=temp1;
;;;2012   ////								Change_MODE_Val(Mode);
;;;2013   ////						 buf[currCharNum++] = ChrEndS;
;;;2014   //					}
;;;2015   //					break;
;;;2016   //				}break;
;;;2017   //				case 17:
;;;2018   //				{
;;;2019   //					pntlen = 2;
;;;2020   //					if(buf[currCharNum]=='?')
;;;2021   //					{
;;;2022   ////						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;2023   //									sprintf(&buf[currCharNum],"%02d",(int)temperature);
;;;2024   //						currCharNum+=pntlen;
;;;2025   //						buf[currCharNum++ ] = ChrEndR;
;;;2026   //						buf[currCharNum++ ] = ChrEndS;
;;;2027   //					}
;;;2028   //				}break;
;;;2029   			default:    //ERR
;;;2030              		 return SetErr_ACK(buf, addr ,CMD_ERR);
;;;2031   	 			  
;;;2032   		  }
;;;2033   		  break;
;;;2034   		}
;;;2035   		
;;;2036   	}
;;;2037   	if(j>=CmdNumb)
;;;2038   	{
;;;2039   		return SetErr_ACK(buf, addr ,CMD_ERR);			  
0002d4  4620              MOV      r0,r4
0002d6  9932              LDR      r1,[sp,#0xc8]
0002d8  f7fffffe          BL       SetErr_ACK
;;;2040   	}
;;;2041   	return currCharNum+1;
;;;2042   }
0002dc  b033              ADD      sp,sp,#0xcc
0002de  ecbd8b02          VPOP     {d8}
0002e2  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.742|
0002e6  f7fffffe          BL       __2sprintf
0002ea  1c6d              ADDS     r5,r5,#1              ;1144
0002ec  e3ed              B        |L9.2762|
                  |L9.750|
0002ee  f88b0006          STRB     r0,[r11,#6]           ;1193
0002f2  f89b0006          LDRB     r0,[r11,#6]           ;1198  ; mainswitch
0002f6  f7fffffe          BL       MODE_ONOFF
                  |L9.762|
0002fa  200d              MOVS     r0,#0xd               ;1167
0002fc  5560              STRB     r0,[r4,r5]            ;1167
0002fe  1c6d              ADDS     r5,r5,#1              ;1167
000300  b2ad              UXTH     r5,r5                 ;1167
000302  e3fc              B        |L9.2814|
                  |L9.772|
000304  5d61              LDRB     r1,[r4,r5]            ;1205
000306  293f              CMP      r1,#0x3f              ;1205
000308  d0ca              BEQ      |L9.672|
00030a  2d0b              CMP      r5,#0xb               ;1214
00030c  d10d              BNE      |L9.810|
00030e  2000              MOVS     r0,#0                 ;1216
000310  4607              MOV      r7,r0                 ;1216
                  |L9.786|
000312  5d61              LDRB     r1,[r4,r5]            ;1218
000314  eb070287          ADD      r2,r7,r7,LSL #2       ;1218
000318  eb060242          ADD      r2,r6,r2,LSL #1       ;1218
00031c  1c6d              ADDS     r5,r5,#1              ;1218
00031e  1c40              ADDS     r0,r0,#1              ;1218
000320  188f              ADDS     r7,r1,r2              ;1218
000322  b2c0              UXTB     r0,r0                 ;1216
000324  b2ad              UXTH     r5,r5                 ;1218
000326  2805              CMP      r0,#5                 ;1216
000328  d3f3              BCC      |L9.786|
                  |L9.810|
00032a  4651              MOV      r1,r10                ;1221
00032c  f8ca7044          STR      r7,[r10,#0x44]        ;1221  ; Para
000330  5d62              LDRB     r2,[r4,r5]            ;1224
000332  1c6d              ADDS     r5,r5,#1              ;1224
000334  2300              MOVS     r3,#0                 ;1222
000336  b2a8              UXTH     r0,r5                 ;1224
000338  2a2c              CMP      r2,#0x2c              ;1224
00033a  d10c              BNE      |L9.854|
00033c  2200              MOVS     r2,#0                 ;1226
                  |L9.830|
00033e  5c25              LDRB     r5,[r4,r0]            ;1228
000340  eb030383          ADD      r3,r3,r3,LSL #2       ;1228
000344  1c40              ADDS     r0,r0,#1              ;1228
000346  1c52              ADDS     r2,r2,#1              ;1228
000348  eb060343          ADD      r3,r6,r3,LSL #1       ;1228
00034c  b2d2              UXTB     r2,r2                 ;1226
00034e  442b              ADD      r3,r3,r5              ;1228
000350  b280              UXTH     r0,r0                 ;1228
000352  2a05              CMP      r2,#5                 ;1226
000354  d3f3              BCC      |L9.830|
                  |L9.854|
000356  f8a13048          STRH     r3,[r1,#0x48]         ;1231
00035a  5c22              LDRB     r2,[r4,r0]            ;1234
00035c  1c40              ADDS     r0,r0,#1              ;1234
00035e  2300              MOVS     r3,#0                 ;1232
000360  b280              UXTH     r0,r0                 ;1234
000362  2a2c              CMP      r2,#0x2c              ;1234
000364  d10c              BNE      |L9.896|
000366  2200              MOVS     r2,#0                 ;1236
                  |L9.872|
000368  5c25              LDRB     r5,[r4,r0]            ;1238
00036a  eb030383          ADD      r3,r3,r3,LSL #2       ;1238
00036e  1c40              ADDS     r0,r0,#1              ;1238
000370  1c52              ADDS     r2,r2,#1              ;1238
000372  eb060343          ADD      r3,r6,r3,LSL #1       ;1238
000376  b2d2              UXTB     r2,r2                 ;1236
000378  442b              ADD      r3,r3,r5              ;1238
00037a  b280              UXTH     r0,r0                 ;1238
00037c  2a05              CMP      r2,#5                 ;1236
00037e  d3f3              BCC      |L9.872|
                  |L9.896|
000380  64cb              STR      r3,[r1,#0x4c]         ;1241  ; Para
000382  5c22              LDRB     r2,[r4,r0]            ;1244
000384  1c40              ADDS     r0,r0,#1              ;1244
000386  2300              MOVS     r3,#0                 ;1242
000388  b280              UXTH     r0,r0                 ;1244
00038a  2a2c              CMP      r2,#0x2c              ;1244
00038c  d10e              BNE      |L9.940|
00038e  2200              MOVS     r2,#0                 ;1246
                  |L9.912|
000390  5c25              LDRB     r5,[r4,r0]            ;1248
000392  eb030383          ADD      r3,r3,r3,LSL #2       ;1248
000396  eb060343          ADD      r3,r6,r3,LSL #1       ;1248
00039a  442b              ADD      r3,r3,r5              ;1248
00039c  1c40              ADDS     r0,r0,#1              ;1248
00039e  e000              B        |L9.930|
                  |L9.928|
0003a0  e21b              B        |L9.2010|
                  |L9.930|
0003a2  1c52              ADDS     r2,r2,#1              ;1248
0003a4  b2d2              UXTB     r2,r2                 ;1246
0003a6  b280              UXTH     r0,r0                 ;1248
0003a8  2a03              CMP      r2,#3                 ;1246
0003aa  d3f1              BCC      |L9.912|
                  |L9.940|
0003ac  f8a13050          STRH     r3,[r1,#0x50]         ;1251
0003b0  5c22              LDRB     r2,[r4,r0]            ;1254
0003b2  1c40              ADDS     r0,r0,#1              ;1254
0003b4  2300              MOVS     r3,#0                 ;1252
0003b6  b280              UXTH     r0,r0                 ;1254
0003b8  2a2c              CMP      r2,#0x2c              ;1254
0003ba  d10c              BNE      |L9.982|
0003bc  2200              MOVS     r2,#0                 ;1256
                  |L9.958|
0003be  5c25              LDRB     r5,[r4,r0]            ;1258
0003c0  eb030383          ADD      r3,r3,r3,LSL #2       ;1258
0003c4  1c40              ADDS     r0,r0,#1              ;1258
0003c6  1c52              ADDS     r2,r2,#1              ;1258
0003c8  eb060343          ADD      r3,r6,r3,LSL #1       ;1258
0003cc  b2d2              UXTB     r2,r2                 ;1256
0003ce  442b              ADD      r3,r3,r5              ;1258
0003d0  b280              UXTH     r0,r0                 ;1258
0003d2  2a05              CMP      r2,#5                 ;1256
0003d4  d3f3              BCC      |L9.958|
                  |L9.982|
0003d6  f8a13054          STRH     r3,[r1,#0x54]         ;1261
0003da  5c22              LDRB     r2,[r4,r0]            ;1264
0003dc  1c40              ADDS     r0,r0,#1              ;1264
0003de  2300              MOVS     r3,#0                 ;1262
0003e0  b280              UXTH     r0,r0                 ;1264
0003e2  2a2c              CMP      r2,#0x2c              ;1264
0003e4  d10c              BNE      |L9.1024|
0003e6  2200              MOVS     r2,#0                 ;1266
                  |L9.1000|
0003e8  5c25              LDRB     r5,[r4,r0]            ;1268
0003ea  eb030383          ADD      r3,r3,r3,LSL #2       ;1268
0003ee  1c40              ADDS     r0,r0,#1              ;1268
0003f0  1c52              ADDS     r2,r2,#1              ;1268
0003f2  eb060343          ADD      r3,r6,r3,LSL #1       ;1268
0003f6  b2d2              UXTB     r2,r2                 ;1266
0003f8  442b              ADD      r3,r3,r5              ;1268
0003fa  b280              UXTH     r0,r0                 ;1268
0003fc  2a05              CMP      r2,#5                 ;1266
0003fe  d3f3              BCC      |L9.1000|
                  |L9.1024|
000400  f8a13056          STRH     r3,[r1,#0x56]         ;1271
000404  5c22              LDRB     r2,[r4,r0]            ;1274
000406  1c40              ADDS     r0,r0,#1              ;1274
000408  2300              MOVS     r3,#0                 ;1272
00040a  b280              UXTH     r0,r0                 ;1274
00040c  2a2c              CMP      r2,#0x2c              ;1274
00040e  d10c              BNE      |L9.1066|
000410  2200              MOVS     r2,#0                 ;1276
                  |L9.1042|
000412  5c25              LDRB     r5,[r4,r0]            ;1278
000414  eb030383          ADD      r3,r3,r3,LSL #2       ;1278
000418  1c40              ADDS     r0,r0,#1              ;1278
00041a  1c52              ADDS     r2,r2,#1              ;1278
00041c  eb060343          ADD      r3,r6,r3,LSL #1       ;1278
000420  b2d2              UXTB     r2,r2                 ;1276
000422  442b              ADD      r3,r3,r5              ;1278
000424  b280              UXTH     r0,r0                 ;1278
000426  2a05              CMP      r2,#5                 ;1276
000428  d3f3              BCC      |L9.1042|
                  |L9.1066|
00042a  f8a13058          STRH     r3,[r1,#0x58]         ;1281
00042e  2300              MOVS     r3,#0                 ;1282
000430  5c22              LDRB     r2,[r4,r0]            ;1284
000432  1c40              ADDS     r0,r0,#1              ;1284
000434  b280              UXTH     r0,r0                 ;1284
000436  e02d              B        |L9.1172|
                  |L9.1080|
000438  256400            DCB      "%d",0
00043b  00                DCB      0
                  |L9.1084|
00043c  2f00              DCB      "/",0
00043e  00                DCB      0
00043f  00                DCB      0
                  |L9.1088|
                          DCD      ||.data||+0x58
                  |L9.1092|
                          DCD      C_DISCHARGE
                  |L9.1096|
                          DCD      Para
                  |L9.1100|
00044c  25303564          DCB      "%05d",0
000450  00      
000451  00                DCB      0
000452  00                DCB      0
000453  00                DCB      0
                  |L9.1108|
000454  25303664          DCB      "%06d",0
000458  00      
000459  00                DCB      0
00045a  00                DCB      0
00045b  00                DCB      0
                  |L9.1116|
00045c  25303464          DCB      "%04d",0
000460  00      
000461  00                DCB      0
000462  00                DCB      0
000463  00                DCB      0
                  |L9.1124|
                          DCD      max_discahrgeNum
                  |L9.1128|
000468  447a0000          DCFS     0x447a0000 ; 1000
                  |L9.1132|
                          DCD      shorttime
                  |L9.1136|
000470  25303364          DCB      "%03d",0
000474  00      
000475  00                DCB      0
000476  00                DCB      0
000477  00                DCB      0
                  |L9.1144|
000478  25316400          DCB      "%1d",0
                  |L9.1148|
                          DCD      finishflag
                  |L9.1152|
                          DCD      lockflag
                  |L9.1156|
                          DCD      version
                  |L9.1160|
000488  25326400          DCB      "%2d",0
                  |L9.1164|
                          DCD      Temperature
                  |L9.1168|
                          DCD      overflag
                  |L9.1172|
000494  2a2c              CMP      r2,#0x2c              ;1284
000496  d10c              BNE      |L9.1202|
000498  2200              MOVS     r2,#0                 ;1286
                  |L9.1178|
00049a  5c25              LDRB     r5,[r4,r0]            ;1288
00049c  eb030383          ADD      r3,r3,r3,LSL #2       ;1288
0004a0  1c40              ADDS     r0,r0,#1              ;1288
0004a2  1c52              ADDS     r2,r2,#1              ;1288
0004a4  eb060343          ADD      r3,r6,r3,LSL #1       ;1288
0004a8  b2d2              UXTB     r2,r2                 ;1286
0004aa  442b              ADD      r3,r3,r5              ;1288
0004ac  b280              UXTH     r0,r0                 ;1288
0004ae  2a05              CMP      r2,#5                 ;1286
0004b0  d3f3              BCC      |L9.1178|
                  |L9.1202|
0004b2  f8a13060          STRH     r3,[r1,#0x60]         ;1291
0004b6  5c22              LDRB     r2,[r4,r0]            ;1294
0004b8  1c40              ADDS     r0,r0,#1              ;1294
0004ba  2300              MOVS     r3,#0                 ;1292
0004bc  b280              UXTH     r0,r0                 ;1294
0004be  2a2c              CMP      r2,#0x2c              ;1294
0004c0  d10c              BNE      |L9.1244|
0004c2  2200              MOVS     r2,#0                 ;1296
                  |L9.1220|
0004c4  5c25              LDRB     r5,[r4,r0]            ;1298
0004c6  eb030383          ADD      r3,r3,r3,LSL #2       ;1298
0004ca  1c40              ADDS     r0,r0,#1              ;1298
0004cc  1c52              ADDS     r2,r2,#1              ;1298
0004ce  eb060343          ADD      r3,r6,r3,LSL #1       ;1298
0004d2  b2d2              UXTB     r2,r2                 ;1296
0004d4  442b              ADD      r3,r3,r5              ;1298
0004d6  b280              UXTH     r0,r0                 ;1298
0004d8  2a05              CMP      r2,#5                 ;1296
0004da  d3f3              BCC      |L9.1220|
                  |L9.1244|
0004dc  65cb              STR      r3,[r1,#0x5c]         ;1301  ; Para
0004de  5c22              LDRB     r2,[r4,r0]            ;1304
0004e0  1c40              ADDS     r0,r0,#1              ;1304
0004e2  2300              MOVS     r3,#0                 ;1302
0004e4  b280              UXTH     r0,r0                 ;1304
0004e6  2a2c              CMP      r2,#0x2c              ;1304
0004e8  d10c              BNE      |L9.1284|
0004ea  2200              MOVS     r2,#0                 ;1306
                  |L9.1260|
0004ec  5c25              LDRB     r5,[r4,r0]            ;1308
0004ee  eb030383          ADD      r3,r3,r3,LSL #2       ;1308
0004f2  1c40              ADDS     r0,r0,#1              ;1308
0004f4  1c52              ADDS     r2,r2,#1              ;1308
0004f6  eb060343          ADD      r3,r6,r3,LSL #1       ;1308
0004fa  b2d2              UXTB     r2,r2                 ;1306
0004fc  442b              ADD      r3,r3,r5              ;1308
0004fe  b280              UXTH     r0,r0                 ;1308
000500  2a05              CMP      r2,#5                 ;1306
000502  d3f3              BCC      |L9.1260|
                  |L9.1284|
000504  f8a13068          STRH     r3,[r1,#0x68]         ;1311
000508  5c22              LDRB     r2,[r4,r0]            ;1314
00050a  1c40              ADDS     r0,r0,#1              ;1314
00050c  2300              MOVS     r3,#0                 ;1312
00050e  b280              UXTH     r0,r0                 ;1314
000510  2a2c              CMP      r2,#0x2c              ;1314
000512  d10c              BNE      |L9.1326|
000514  2200              MOVS     r2,#0                 ;1316
                  |L9.1302|
000516  5c25              LDRB     r5,[r4,r0]            ;1318
000518  eb030383          ADD      r3,r3,r3,LSL #2       ;1318
00051c  1c40              ADDS     r0,r0,#1              ;1318
00051e  1c52              ADDS     r2,r2,#1              ;1318
000520  eb060343          ADD      r3,r6,r3,LSL #1       ;1318
000524  b2d2              UXTB     r2,r2                 ;1316
000526  442b              ADD      r3,r3,r5              ;1318
000528  b280              UXTH     r0,r0                 ;1318
00052a  2a05              CMP      r2,#5                 ;1316
00052c  d3f3              BCC      |L9.1302|
                  |L9.1326|
00052e  f8a1306a          STRH     r3,[r1,#0x6a]         ;1321
000532  5c22              LDRB     r2,[r4,r0]            ;1324
000534  1c40              ADDS     r0,r0,#1              ;1324
000536  2300              MOVS     r3,#0                 ;1322
000538  b280              UXTH     r0,r0                 ;1324
00053a  2a2c              CMP      r2,#0x2c              ;1324
00053c  d10c              BNE      |L9.1368|
00053e  2200              MOVS     r2,#0                 ;1326
                  |L9.1344|
000540  5c25              LDRB     r5,[r4,r0]            ;1328
000542  eb030383          ADD      r3,r3,r3,LSL #2       ;1328
000546  1c40              ADDS     r0,r0,#1              ;1328
000548  1c52              ADDS     r2,r2,#1              ;1328
00054a  eb060343          ADD      r3,r6,r3,LSL #1       ;1328
00054e  b2d2              UXTB     r2,r2                 ;1326
000550  442b              ADD      r3,r3,r5              ;1328
000552  b280              UXTH     r0,r0                 ;1328
000554  2a05              CMP      r2,#5                 ;1326
000556  d3f3              BCC      |L9.1344|
                  |L9.1368|
000558  f8a1306c          STRH     r3,[r1,#0x6c]         ;1331
00055c  5c22              LDRB     r2,[r4,r0]            ;1334
00055e  1c40              ADDS     r0,r0,#1              ;1334
000560  2300              MOVS     r3,#0                 ;1332
000562  b280              UXTH     r0,r0                 ;1334
000564  2a2c              CMP      r2,#0x2c              ;1334
000566  d10c              BNE      |L9.1410|
000568  2200              MOVS     r2,#0                 ;1336
                  |L9.1386|
00056a  5c25              LDRB     r5,[r4,r0]            ;1338
00056c  eb030383          ADD      r3,r3,r3,LSL #2       ;1338
000570  1c40              ADDS     r0,r0,#1              ;1338
000572  1c52              ADDS     r2,r2,#1              ;1338
000574  eb060343          ADD      r3,r6,r3,LSL #1       ;1338
000578  b2d2              UXTB     r2,r2                 ;1336
00057a  442b              ADD      r3,r3,r5              ;1338
00057c  b280              UXTH     r0,r0                 ;1338
00057e  2a05              CMP      r2,#5                 ;1336
000580  d3f3              BCC      |L9.1386|
                  |L9.1410|
000582  670b              STR      r3,[r1,#0x70]         ;1341  ; Para
000584  5c22              LDRB     r2,[r4,r0]            ;1344
000586  1c40              ADDS     r0,r0,#1              ;1344
000588  2300              MOVS     r3,#0                 ;1342
00058a  b280              UXTH     r0,r0                 ;1344
00058c  2a2c              CMP      r2,#0x2c              ;1344
00058e  d10c              BNE      |L9.1450|
000590  2200              MOVS     r2,#0                 ;1346
                  |L9.1426|
000592  5c25              LDRB     r5,[r4,r0]            ;1348
000594  eb030383          ADD      r3,r3,r3,LSL #2       ;1348
000598  1c40              ADDS     r0,r0,#1              ;1348
00059a  1c52              ADDS     r2,r2,#1              ;1348
00059c  eb060343          ADD      r3,r6,r3,LSL #1       ;1348
0005a0  b2d2              UXTB     r2,r2                 ;1346
0005a2  442b              ADD      r3,r3,r5              ;1348
0005a4  b280              UXTH     r0,r0                 ;1348
0005a6  2a05              CMP      r2,#5                 ;1346
0005a8  d3f3              BCC      |L9.1426|
                  |L9.1450|
0005aa  f8a13074          STRH     r3,[r1,#0x74]         ;1351
0005ae  5c22              LDRB     r2,[r4,r0]            ;1354
0005b0  1c40              ADDS     r0,r0,#1              ;1354
0005b2  2300              MOVS     r3,#0                 ;1352
0005b4  b280              UXTH     r0,r0                 ;1354
0005b6  2a2c              CMP      r2,#0x2c              ;1354
0005b8  d10c              BNE      |L9.1492|
0005ba  2200              MOVS     r2,#0                 ;1356
                  |L9.1468|
0005bc  5c25              LDRB     r5,[r4,r0]            ;1358
0005be  eb030383          ADD      r3,r3,r3,LSL #2       ;1358
0005c2  1c40              ADDS     r0,r0,#1              ;1358
0005c4  1c52              ADDS     r2,r2,#1              ;1358
0005c6  eb060343          ADD      r3,r6,r3,LSL #1       ;1358
0005ca  b2d2              UXTB     r2,r2                 ;1356
0005cc  442b              ADD      r3,r3,r5              ;1358
0005ce  b280              UXTH     r0,r0                 ;1358
0005d0  2a05              CMP      r2,#5                 ;1356
0005d2  d3f3              BCC      |L9.1468|
                  |L9.1492|
0005d4  678b              STR      r3,[r1,#0x78]         ;1361  ; Para
0005d6  5c22              LDRB     r2,[r4,r0]            ;1364
0005d8  1c40              ADDS     r0,r0,#1              ;1364
0005da  2300              MOVS     r3,#0                 ;1362
0005dc  b280              UXTH     r0,r0                 ;1364
0005de  2a2c              CMP      r2,#0x2c              ;1364
0005e0  d10c              BNE      |L9.1532|
0005e2  2200              MOVS     r2,#0                 ;1366
                  |L9.1508|
0005e4  5c25              LDRB     r5,[r4,r0]            ;1368
0005e6  eb030383          ADD      r3,r3,r3,LSL #2       ;1368
0005ea  1c40              ADDS     r0,r0,#1              ;1368
0005ec  1c52              ADDS     r2,r2,#1              ;1368
0005ee  eb060343          ADD      r3,r6,r3,LSL #1       ;1368
0005f2  b2d2              UXTB     r2,r2                 ;1366
0005f4  442b              ADD      r3,r3,r5              ;1368
0005f6  b280              UXTH     r0,r0                 ;1368
0005f8  2a05              CMP      r2,#5                 ;1366
0005fa  d3f3              BCC      |L9.1508|
                  |L9.1532|
0005fc  67cb              STR      r3,[r1,#0x7c]         ;1371  ; Para
0005fe  5c22              LDRB     r2,[r4,r0]            ;1374
000600  1c40              ADDS     r0,r0,#1              ;1374
000602  2300              MOVS     r3,#0                 ;1372
000604  b280              UXTH     r0,r0                 ;1374
000606  2a2c              CMP      r2,#0x2c              ;1374
000608  d10c              BNE      |L9.1572|
00060a  2200              MOVS     r2,#0                 ;1376
                  |L9.1548|
00060c  5c25              LDRB     r5,[r4,r0]            ;1378
00060e  eb030383          ADD      r3,r3,r3,LSL #2       ;1378
000612  1c40              ADDS     r0,r0,#1              ;1378
000614  1c52              ADDS     r2,r2,#1              ;1378
000616  eb060343          ADD      r3,r6,r3,LSL #1       ;1378
00061a  b2d2              UXTB     r2,r2                 ;1376
00061c  442b              ADD      r3,r3,r5              ;1378
00061e  b280              UXTH     r0,r0                 ;1378
000620  2a03              CMP      r2,#3                 ;1376
000622  d3f3              BCC      |L9.1548|
                  |L9.1572|
000624  f8813080          STRB     r3,[r1,#0x80]         ;1381
000628  5c22              LDRB     r2,[r4,r0]            ;1384
00062a  1c40              ADDS     r0,r0,#1              ;1384
00062c  2500              MOVS     r5,#0                 ;1382
00062e  b280              UXTH     r0,r0                 ;1384
000630  2a2c              CMP      r2,#0x2c              ;1384
000632  d10c              BNE      |L9.1614|
000634  2200              MOVS     r2,#0                 ;1386
                  |L9.1590|
000636  5c23              LDRB     r3,[r4,r0]            ;1388
000638  eb050585          ADD      r5,r5,r5,LSL #2       ;1388
00063c  1c40              ADDS     r0,r0,#1              ;1388
00063e  1c52              ADDS     r2,r2,#1              ;1388
000640  eb060545          ADD      r5,r6,r5,LSL #1       ;1388
000644  b2d2              UXTB     r2,r2                 ;1386
000646  441d              ADD      r5,r5,r3              ;1388
000648  b280              UXTH     r0,r0                 ;1388
00064a  2a03              CMP      r2,#3                 ;1386
00064c  d3f3              BCC      |L9.1590|
                  |L9.1614|
00064e  f89b2005          LDRB     r2,[r11,#5]           ;1391  ; MODE
000652  465b              MOV      r3,r11                ;1391
000654  b902              CBNZ     r2,|L9.1624|
000656  618d              STR      r5,[r1,#0x18]         ;1393  ; Para
                  |L9.1624|
000658  5c22              LDRB     r2,[r4,r0]            ;1398
00065a  1c40              ADDS     r0,r0,#1              ;1398
00065c  2500              MOVS     r5,#0                 ;1395
00065e  b280              UXTH     r0,r0                 ;1398
000660  2a2c              CMP      r2,#0x2c              ;1398
000662  d10c              BNE      |L9.1662|
000664  2200              MOVS     r2,#0                 ;1400
                  |L9.1638|
000666  5c27              LDRB     r7,[r4,r0]            ;1402
000668  eb050585          ADD      r5,r5,r5,LSL #2       ;1402
00066c  1c40              ADDS     r0,r0,#1              ;1402
00066e  1c52              ADDS     r2,r2,#1              ;1402
000670  eb060545          ADD      r5,r6,r5,LSL #1       ;1402
000674  b2d2              UXTB     r2,r2                 ;1400
000676  443d              ADD      r5,r5,r7              ;1402
000678  b280              UXTH     r0,r0                 ;1402
00067a  2a03              CMP      r2,#3                 ;1400
00067c  d3f3              BCC      |L9.1638|
                  |L9.1662|
00067e  71dd              STRB     r5,[r3,#7]            ;1405
000680  5c22              LDRB     r2,[r4,r0]            ;1408
000682  1c40              ADDS     r0,r0,#1              ;1408
000684  2500              MOVS     r5,#0                 ;1406
000686  b280              UXTH     r0,r0                 ;1408
000688  2a2c              CMP      r2,#0x2c              ;1408
00068a  d10c              BNE      |L9.1702|
00068c  2200              MOVS     r2,#0                 ;1410
                  |L9.1678|
00068e  5c27              LDRB     r7,[r4,r0]            ;1412
000690  eb050585          ADD      r5,r5,r5,LSL #2       ;1412
000694  1c40              ADDS     r0,r0,#1              ;1412
000696  1c52              ADDS     r2,r2,#1              ;1412
000698  eb060545          ADD      r5,r6,r5,LSL #1       ;1412
00069c  b2d2              UXTB     r2,r2                 ;1410
00069e  443d              ADD      r5,r5,r7              ;1412
0006a0  b280              UXTH     r0,r0                 ;1412
0006a2  2a03              CMP      r2,#3                 ;1410
0006a4  d3f3              BCC      |L9.1678|
                  |L9.1702|
0006a6  f8815052          STRB     r5,[r1,#0x52]         ;1415
0006aa  5c27              LDRB     r7,[r4,r0]            ;1418
0006ac  1c40              ADDS     r0,r0,#1              ;1418
0006ae  2200              MOVS     r2,#0                 ;1416
0006b0  b285              UXTH     r5,r0                 ;1418
0006b2  2f2c              CMP      r7,#0x2c              ;1418
0006b4  d10c              BNE      |L9.1744|
0006b6  2000              MOVS     r0,#0                 ;1420
                  |L9.1720|
0006b8  5d67              LDRB     r7,[r4,r5]            ;1422
0006ba  eb020282          ADD      r2,r2,r2,LSL #2       ;1422
0006be  1c6d              ADDS     r5,r5,#1              ;1422
0006c0  1c40              ADDS     r0,r0,#1              ;1422
0006c2  eb060242          ADD      r2,r6,r2,LSL #1       ;1422
0006c6  b2c0              UXTB     r0,r0                 ;1420
0006c8  443a              ADD      r2,r2,r7              ;1422
0006ca  b2ad              UXTH     r5,r5                 ;1422
0006cc  2806              CMP      r0,#6                 ;1420
0006ce  d3f3              BCC      |L9.1720|
                  |L9.1744|
0006d0  eb020082          ADD      r0,r2,r2,LSL #2       ;1425
0006d4  0040              LSLS     r0,r0,#1              ;1425
0006d6  6648              STR      r0,[r1,#0x64]         ;1425  ; Para
0006d8  7958              LDRB     r0,[r3,#5]            ;1428  ; MODE
                  |L9.1754|
0006da  f7fffffe          BL       MODE_PARASET
                  |L9.1758|
0006de  e60c              B        |L9.762|
                  |L9.1760|
0006e0  5d61              LDRB     r1,[r4,r5]            ;1435
0006e2  293f              CMP      r1,#0x3f              ;1435
0006e4  d079              BEQ      |L9.2010|
0006e6  2d0b              CMP      r5,#0xb               ;1444
0006e8  d10d              BNE      |L9.1798|
0006ea  2000              MOVS     r0,#0                 ;1446
0006ec  4607              MOV      r7,r0                 ;1446
                  |L9.1774|
0006ee  5d61              LDRB     r1,[r4,r5]            ;1448
0006f0  eb070287          ADD      r2,r7,r7,LSL #2       ;1448
0006f4  eb060242          ADD      r2,r6,r2,LSL #1       ;1448
0006f8  1c6d              ADDS     r5,r5,#1              ;1448
0006fa  1c40              ADDS     r0,r0,#1              ;1448
0006fc  188f              ADDS     r7,r1,r2              ;1448
0006fe  b2c0              UXTB     r0,r0                 ;1446
000700  b2ad              UXTH     r5,r5                 ;1448
000702  2802              CMP      r0,#2                 ;1446
000704  d3f3              BCC      |L9.1774|
                  |L9.1798|
000706  f88b7005          STRB     r7,[r11,#5]           ;1451
00070a  f89b0005          LDRB     r0,[r11,#5]           ;1454  ; MODE
00070e  2700              MOVS     r7,#0                 ;1452
000710  f8df9478          LDR      r9,|L9.2956|
000714  f6446120          MOV      r1,#0x4e20            ;1477
000718  b1b0              CBZ      r0,|L9.1864|
00071a  f89b0005          LDRB     r0,[r11,#5]           ;1498  ; MODE
00071e  465a              MOV      r2,r11                ;1498
000720  2801              CMP      r0,#1                 ;1498
000722  d05b              BEQ      |L9.2012|
000724  7950              LDRB     r0,[r2,#5]            ;1527  ; MODE
000726  2802              CMP      r0,#2                 ;1527
000728  d07e              BEQ      |L9.2088|
00072a  f89b0005          LDRB     r0,[r11,#5]           ;1563  ; MODE
00072e  2803              CMP      r0,#3                 ;1563
000730  d07b              BEQ      |L9.2090|
000732  7950              LDRB     r0,[r2,#5]            ;1595  ; MODE
000734  2804              CMP      r0,#4                 ;1595
000736  d079              BEQ      |L9.2092|
000738  f89b0005          LDRB     r0,[r11,#5]           ;1638  ; MODE
00073c  2805              CMP      r0,#5                 ;1638
00073e  d076              BEQ      |L9.2094|
000740  7950              LDRB     r0,[r2,#5]            ;1669  ; MODE
000742  2806              CMP      r0,#6                 ;1669
000744  d074              BEQ      |L9.2096|
000746  e1d3              B        |L9.2800|
                  |L9.1864|
000748  5d62              LDRB     r2,[r4,r5]            ;1456
00074a  1c6d              ADDS     r5,r5,#1              ;1456
00074c  b2a8              UXTH     r0,r5                 ;1456
00074e  2a2c              CMP      r2,#0x2c              ;1456
000750  d106              BNE      |L9.1888|
000752  2200              MOVS     r2,#0                 ;1458
                  |L9.1876|
000754  1c40              ADDS     r0,r0,#1              ;1458
000756  1c52              ADDS     r2,r2,#1              ;1460
000758  b2d2              UXTB     r2,r2                 ;1458
00075a  b280              UXTH     r0,r0                 ;1460
00075c  2a05              CMP      r2,#5                 ;1458
00075e  d3f9              BCC      |L9.1876|
                  |L9.1888|
000760  5c23              LDRB     r3,[r4,r0]            ;1466
000762  1c40              ADDS     r0,r0,#1              ;1466
000764  2200              MOVS     r2,#0                 ;1464
000766  b285              UXTH     r5,r0                 ;1466
000768  2b2c              CMP      r3,#0x2c              ;1466
00076a  d10c              BNE      |L9.1926|
00076c  2000              MOVS     r0,#0                 ;1468
                  |L9.1902|
00076e  5d63              LDRB     r3,[r4,r5]            ;1470
000770  eb020282          ADD      r2,r2,r2,LSL #2       ;1470
000774  1c6d              ADDS     r5,r5,#1              ;1470
000776  1c40              ADDS     r0,r0,#1              ;1470
000778  eb060242          ADD      r2,r6,r2,LSL #1       ;1470
00077c  b2c0              UXTB     r0,r0                 ;1468
00077e  441a              ADD      r2,r2,r3              ;1470
000780  b2ad              UXTH     r5,r5                 ;1470
000782  2805              CMP      r0,#5                 ;1468
000784  d3f3              BCC      |L9.1902|
                  |L9.1926|
000786  f8ca2014          STR      r2,[r10,#0x14]        ;1473  ; Para
00078a  f8da0014          LDR      r0,[r10,#0x14]        ;1477  ; Para
00078e  2700              MOVS     r7,#0                 ;1474
000790  4288              CMP      r0,r1                 ;1477
000792  d907              BLS      |L9.1956|
000794  2001              MOVS     r0,#1                 ;1479
000796  f8c90020          STR      r0,[r9,#0x20]         ;1479  ; Run_Control
00079a  02c1              LSLS     r1,r0,#11             ;1480
00079c  48fc              LDR      r0,|L9.2960|
00079e  f7fffffe          BL       GPIO_ResetBits
0007a2  e007              B        |L9.1972|
                  |L9.1956|
0007a4  2000              MOVS     r0,#0                 ;1482
0007a6  f8c90020          STR      r0,[r9,#0x20]         ;1482  ; Run_Control
0007aa  f44f6100          MOV      r1,#0x800             ;1483
0007ae  48f8              LDR      r0,|L9.2960|
0007b0  f7fffffe          BL       GPIO_SetBits
                  |L9.1972|
0007b4  5d60              LDRB     r0,[r4,r5]            ;1485
0007b6  1c6d              ADDS     r5,r5,#1              ;1485
0007b8  b2ad              UXTH     r5,r5                 ;1485
0007ba  282c              CMP      r0,#0x2c              ;1485
0007bc  d10c              BNE      |L9.2008|
0007be  2000              MOVS     r0,#0                 ;1487
                  |L9.1984|
0007c0  5d61              LDRB     r1,[r4,r5]            ;1489
0007c2  eb070287          ADD      r2,r7,r7,LSL #2       ;1489
0007c6  eb060242          ADD      r2,r6,r2,LSL #1       ;1489
0007ca  1c6d              ADDS     r5,r5,#1              ;1489
0007cc  188f              ADDS     r7,r1,r2              ;1489
0007ce  1c40              ADDS     r0,r0,#1              ;1489
0007d0  b2ad              UXTH     r5,r5                 ;1489
0007d2  f01000ff          ANDS     r0,r0,#0xff           ;1487
0007d6  d0f3              BEQ      |L9.1984|
                  |L9.2008|
0007d8  e118              B        |L9.2572|
                  |L9.2010|
0007da  e20c              B        |L9.3062|
                  |L9.2012|
0007dc  5d61              LDRB     r1,[r4,r5]            ;1499
0007de  1c6d              ADDS     r5,r5,#1              ;1499
0007e0  b2a8              UXTH     r0,r5                 ;1499
0007e2  292c              CMP      r1,#0x2c              ;1499
0007e4  d10c              BNE      |L9.2048|
0007e6  2100              MOVS     r1,#0                 ;1501
                  |L9.2024|
0007e8  5c23              LDRB     r3,[r4,r0]            ;1503
0007ea  eb070587          ADD      r5,r7,r7,LSL #2       ;1503
0007ee  eb060545          ADD      r5,r6,r5,LSL #1       ;1503
0007f2  1c40              ADDS     r0,r0,#1              ;1503
0007f4  1c49              ADDS     r1,r1,#1              ;1503
0007f6  195f              ADDS     r7,r3,r5              ;1503
0007f8  b2c9              UXTB     r1,r1                 ;1501
0007fa  b280              UXTH     r0,r0                 ;1503
0007fc  2905              CMP      r1,#5                 ;1501
0007fe  d3f3              BCC      |L9.2024|
                  |L9.2048|
000800  4655              MOV      r5,r10                ;1506
000802  f8aa706a          STRH     r7,[r10,#0x6a]        ;1506
000806  5c21              LDRB     r1,[r4,r0]            ;1509
000808  1c40              ADDS     r0,r0,#1              ;1509
00080a  2300              MOVS     r3,#0                 ;1507
00080c  b280              UXTH     r0,r0                 ;1509
00080e  292c              CMP      r1,#0x2c              ;1509
000810  d112              BNE      |L9.2104|
000812  2100              MOVS     r1,#0                 ;1511
                  |L9.2068|
000814  5c27              LDRB     r7,[r4,r0]            ;1513
000816  eb030383          ADD      r3,r3,r3,LSL #2       ;1513
00081a  1c40              ADDS     r0,r0,#1              ;1513
00081c  eb060343          ADD      r3,r6,r3,LSL #1       ;1513
000820  443b              ADD      r3,r3,r7              ;1513
000822  b280              UXTH     r0,r0                 ;1513
000824  1c49              ADDS     r1,r1,#1              ;1513
000826  e004              B        |L9.2098|
                  |L9.2088|
000828  e01c              B        |L9.2148|
                  |L9.2090|
00082a  e069              B        |L9.2304|
                  |L9.2092|
00082c  e0a6              B        |L9.2428|
                  |L9.2094|
00082e  e0fa              B        |L9.2598|
                  |L9.2096|
000830  e12b              B        |L9.2698|
                  |L9.2098|
000832  b2c9              UXTB     r1,r1                 ;1511
000834  2905              CMP      r1,#5                 ;1511
000836  d3ed              BCC      |L9.2068|
                  |L9.2104|
000838  f8a5306c          STRH     r3,[r5,#0x6c]         ;1516
00083c  5c23              LDRB     r3,[r4,r0]            ;1519
00083e  1c40              ADDS     r0,r0,#1              ;1519
000840  2100              MOVS     r1,#0                 ;1517
000842  b285              UXTH     r5,r0                 ;1519
000844  2b2c              CMP      r3,#0x2c              ;1519
000846  d10c              BNE      |L9.2146|
000848  2000              MOVS     r0,#0                 ;1521
                  |L9.2122|
00084a  5d63              LDRB     r3,[r4,r5]            ;1523
00084c  1c6d              ADDS     r5,r5,#1              ;1523
00084e  eb010181          ADD      r1,r1,r1,LSL #2       ;1523
000852  eb060141          ADD      r1,r6,r1,LSL #1       ;1523
000856  1c40              ADDS     r0,r0,#1              ;1523
000858  4419              ADD      r1,r1,r3              ;1523
00085a  b2ad              UXTH     r5,r5                 ;1523
00085c  f01000ff          ANDS     r0,r0,#0xff           ;1521
000860  d0f3              BEQ      |L9.2122|
                  |L9.2146|
000862  e144              B        |L9.2798|
                  |L9.2148|
000864  2001              MOVS     r0,#1                 ;1528
000866  f8c90020          STR      r0,[r9,#0x20]         ;1528  ; Run_Control
00086a  02c1              LSLS     r1,r0,#11             ;1529
00086c  48c8              LDR      r0,|L9.2960|
00086e  f7fffffe          BL       GPIO_ResetBits
000872  5d61              LDRB     r1,[r4,r5]            ;1530
000874  1c6d              ADDS     r5,r5,#1              ;1530
000876  b2a8              UXTH     r0,r5                 ;1530
000878  292c              CMP      r1,#0x2c              ;1530
00087a  d10c              BNE      |L9.2198|
00087c  2100              MOVS     r1,#0                 ;1532
                  |L9.2174|
00087e  5c22              LDRB     r2,[r4,r0]            ;1534
000880  eb070387          ADD      r3,r7,r7,LSL #2       ;1534
000884  eb060343          ADD      r3,r6,r3,LSL #1       ;1534
000888  1c40              ADDS     r0,r0,#1              ;1534
00088a  1c49              ADDS     r1,r1,#1              ;1534
00088c  18d7              ADDS     r7,r2,r3              ;1534
00088e  b2c9              UXTB     r1,r1                 ;1532
000890  b280              UXTH     r0,r0                 ;1534
000892  2905              CMP      r1,#5                 ;1532
000894  d3f3              BCC      |L9.2174|
                  |L9.2198|
000896  4653              MOV      r3,r10                ;1537
000898  f8ca7044          STR      r7,[r10,#0x44]        ;1537  ; Para
00089c  5c21              LDRB     r1,[r4,r0]            ;1540
00089e  1c40              ADDS     r0,r0,#1              ;1540
0008a0  2200              MOVS     r2,#0                 ;1538
0008a2  b280              UXTH     r0,r0                 ;1540
0008a4  292c              CMP      r1,#0x2c              ;1540
0008a6  d10c              BNE      |L9.2242|
0008a8  2100              MOVS     r1,#0                 ;1542
                  |L9.2218|
0008aa  5c25              LDRB     r5,[r4,r0]            ;1544
0008ac  eb020282          ADD      r2,r2,r2,LSL #2       ;1544
0008b0  1c40              ADDS     r0,r0,#1              ;1544
0008b2  1c49              ADDS     r1,r1,#1              ;1544
0008b4  eb060242          ADD      r2,r6,r2,LSL #1       ;1544
0008b8  b2c9              UXTB     r1,r1                 ;1542
0008ba  442a              ADD      r2,r2,r5              ;1544
0008bc  b280              UXTH     r0,r0                 ;1544
0008be  2905              CMP      r1,#5                 ;1542
0008c0  d3f3              BCC      |L9.2218|
                  |L9.2242|
0008c2  f8a32048          STRH     r2,[r3,#0x48]         ;1547
0008c6  5c22              LDRB     r2,[r4,r0]            ;1550
0008c8  1c40              ADDS     r0,r0,#1              ;1550
0008ca  2100              MOVS     r1,#0                 ;1548
0008cc  b285              UXTH     r5,r0                 ;1550
0008ce  2a2c              CMP      r2,#0x2c              ;1550
0008d0  d10c              BNE      |L9.2284|
0008d2  2000              MOVS     r0,#0                 ;1552
                  |L9.2260|
0008d4  5d62              LDRB     r2,[r4,r5]            ;1554
0008d6  1c6d              ADDS     r5,r5,#1              ;1554
0008d8  eb010181          ADD      r1,r1,r1,LSL #2       ;1554
0008dc  eb060141          ADD      r1,r6,r1,LSL #1       ;1554
0008e0  1c40              ADDS     r0,r0,#1              ;1554
0008e2  4411              ADD      r1,r1,r2              ;1554
0008e4  b2ad              UXTH     r5,r5                 ;1554
0008e6  f01000ff          ANDS     r0,r0,#0xff           ;1552
0008ea  d0f3              BEQ      |L9.2260|
                  |L9.2284|
0008ec  f88b1006          STRB     r1,[r11,#6]           ;1557
0008f0  f89b0006          LDRB     r0,[r11,#6]           ;1559  ; mainswitch
0008f4  2801              CMP      r0,#1                 ;1559
0008f6  d102              BNE      |L9.2302|
0008f8  49a6              LDR      r1,|L9.2964|
0008fa  2000              MOVS     r0,#0                 ;1561
0008fc  7008              STRB     r0,[r1,#0]            ;1561
                  |L9.2302|
0008fe  e0f7              B        |L9.2800|
                  |L9.2304|
000900  5d61              LDRB     r1,[r4,r5]            ;1564
000902  1c6d              ADDS     r5,r5,#1              ;1564
000904  b2a8              UXTH     r0,r5                 ;1564
000906  292c              CMP      r1,#0x2c              ;1564
000908  d10c              BNE      |L9.2340|
00090a  2100              MOVS     r1,#0                 ;1566
                  |L9.2316|
00090c  5c23              LDRB     r3,[r4,r0]            ;1568
00090e  eb070587          ADD      r5,r7,r7,LSL #2       ;1568
000912  eb060545          ADD      r5,r6,r5,LSL #1       ;1568
000916  1c40              ADDS     r0,r0,#1              ;1568
000918  1c49              ADDS     r1,r1,#1              ;1568
00091a  195f              ADDS     r7,r3,r5              ;1568
00091c  b2c9              UXTB     r1,r1                 ;1566
00091e  b280              UXTH     r0,r0                 ;1568
000920  2905              CMP      r1,#5                 ;1566
000922  d3f3              BCC      |L9.2316|
                  |L9.2340|
000924  4655              MOV      r5,r10                ;1571
000926  f8aa706a          STRH     r7,[r10,#0x6a]        ;1571
00092a  5c21              LDRB     r1,[r4,r0]            ;1575
00092c  1c40              ADDS     r0,r0,#1              ;1575
00092e  2300              MOVS     r3,#0                 ;1572
000930  b280              UXTH     r0,r0                 ;1575
000932  292c              CMP      r1,#0x2c              ;1575
000934  d10c              BNE      |L9.2384|
000936  2100              MOVS     r1,#0                 ;1577
                  |L9.2360|
000938  5c27              LDRB     r7,[r4,r0]            ;1579
00093a  eb030383          ADD      r3,r3,r3,LSL #2       ;1579
00093e  1c40              ADDS     r0,r0,#1              ;1579
000940  1c49              ADDS     r1,r1,#1              ;1579
000942  eb060343          ADD      r3,r6,r3,LSL #1       ;1579
000946  b2c9              UXTB     r1,r1                 ;1577
000948  443b              ADD      r3,r3,r7              ;1579
00094a  b280              UXTH     r0,r0                 ;1579
00094c  2905              CMP      r1,#5                 ;1577
00094e  d3f3              BCC      |L9.2360|
                  |L9.2384|
000950  f8a5306c          STRH     r3,[r5,#0x6c]         ;1582
000954  5c23              LDRB     r3,[r4,r0]            ;1585
000956  1c40              ADDS     r0,r0,#1              ;1585
000958  2100              MOVS     r1,#0                 ;1583
00095a  b285              UXTH     r5,r0                 ;1585
00095c  2b2c              CMP      r3,#0x2c              ;1585
00095e  d10c              BNE      |L9.2426|
000960  2000              MOVS     r0,#0                 ;1587
                  |L9.2402|
000962  5d63              LDRB     r3,[r4,r5]            ;1589
000964  1c6d              ADDS     r5,r5,#1              ;1589
000966  eb010181          ADD      r1,r1,r1,LSL #2       ;1589
00096a  eb060141          ADD      r1,r6,r1,LSL #1       ;1589
00096e  1c40              ADDS     r0,r0,#1              ;1589
000970  4419              ADD      r1,r1,r3              ;1589
000972  b2ad              UXTH     r5,r5                 ;1589
000974  f01000ff          ANDS     r0,r0,#0xff           ;1587
000978  d0f3              BEQ      |L9.2402|
                  |L9.2426|
00097a  e0b8              B        |L9.2798|
                  |L9.2428|
00097c  5d62              LDRB     r2,[r4,r5]            ;1596
00097e  1c6d              ADDS     r5,r5,#1              ;1596
000980  b2a8              UXTH     r0,r5                 ;1596
000982  2a2c              CMP      r2,#0x2c              ;1596
000984  d106              BNE      |L9.2452|
000986  2200              MOVS     r2,#0                 ;1598
                  |L9.2440|
000988  1c40              ADDS     r0,r0,#1              ;1598
00098a  1c52              ADDS     r2,r2,#1              ;1600
00098c  b2d2              UXTB     r2,r2                 ;1598
00098e  b280              UXTH     r0,r0                 ;1600
000990  2a05              CMP      r2,#5                 ;1598
000992  d3f9              BCC      |L9.2440|
                  |L9.2452|
000994  5c23              LDRB     r3,[r4,r0]            ;1606
000996  1c40              ADDS     r0,r0,#1              ;1606
000998  2200              MOVS     r2,#0                 ;1604
00099a  b285              UXTH     r5,r0                 ;1606
00099c  2b2c              CMP      r3,#0x2c              ;1606
00099e  d10c              BNE      |L9.2490|
0009a0  2000              MOVS     r0,#0                 ;1608
                  |L9.2466|
0009a2  5d63              LDRB     r3,[r4,r5]            ;1610
0009a4  eb020282          ADD      r2,r2,r2,LSL #2       ;1610
0009a8  1c6d              ADDS     r5,r5,#1              ;1610
0009aa  1c40              ADDS     r0,r0,#1              ;1610
0009ac  eb060242          ADD      r2,r6,r2,LSL #1       ;1610
0009b0  b2c0              UXTB     r0,r0                 ;1608
0009b2  441a              ADD      r2,r2,r3              ;1610
0009b4  b2ad              UXTH     r5,r5                 ;1610
0009b6  2805              CMP      r0,#5                 ;1608
0009b8  d3f3              BCC      |L9.2466|
                  |L9.2490|
0009ba  f8ca2014          STR      r2,[r10,#0x14]        ;1613  ; Para
0009be  f8da0014          LDR      r0,[r10,#0x14]        ;1617  ; Para
0009c2  2700              MOVS     r7,#0                 ;1614
0009c4  4288              CMP      r0,r1                 ;1617
0009c6  d907              BLS      |L9.2520|
0009c8  2001              MOVS     r0,#1                 ;1619
0009ca  f8c90020          STR      r0,[r9,#0x20]         ;1619  ; Run_Control
0009ce  02c1              LSLS     r1,r0,#11             ;1620
0009d0  486f              LDR      r0,|L9.2960|
0009d2  f7fffffe          BL       GPIO_ResetBits
0009d6  e007              B        |L9.2536|
                  |L9.2520|
0009d8  2000              MOVS     r0,#0                 ;1622
0009da  f8c90020          STR      r0,[r9,#0x20]         ;1622  ; Run_Control
0009de  f44f6100          MOV      r1,#0x800             ;1623
0009e2  486b              LDR      r0,|L9.2960|
0009e4  f7fffffe          BL       GPIO_SetBits
                  |L9.2536|
0009e8  5d60              LDRB     r0,[r4,r5]            ;1625
0009ea  1c6d              ADDS     r5,r5,#1              ;1625
0009ec  b2ad              UXTH     r5,r5                 ;1625
0009ee  282c              CMP      r0,#0x2c              ;1625
0009f0  d10c              BNE      |L9.2572|
0009f2  2000              MOVS     r0,#0                 ;1627
                  |L9.2548|
0009f4  5d61              LDRB     r1,[r4,r5]            ;1629
0009f6  eb070287          ADD      r2,r7,r7,LSL #2       ;1629
0009fa  eb060242          ADD      r2,r6,r2,LSL #1       ;1629
0009fe  1c6d              ADDS     r5,r5,#1              ;1629
000a00  188f              ADDS     r7,r1,r2              ;1629
000a02  1c40              ADDS     r0,r0,#1              ;1629
000a04  b2ad              UXTH     r5,r5                 ;1629
000a06  f01000ff          ANDS     r0,r0,#0xff           ;1627
000a0a  d0f3              BEQ      |L9.2548|
                  |L9.2572|
000a0c  f88b7006          STRB     r7,[r11,#6]           ;1632
000a10  f89b0006          LDRB     r0,[r11,#6]           ;1633  ; mainswitch
000a14  bbb8              CBNZ     r0,|L9.2694|
000a16  2101              MOVS     r1,#1                 ;1635
000a18  f8c91020          STR      r1,[r9,#0x20]         ;1635  ; Run_Control
000a1c  02c9              LSLS     r1,r1,#11             ;1636
000a1e  485c              LDR      r0,|L9.2960|
000a20  f7fffffe          BL       GPIO_ResetBits
000a24  e064              B        |L9.2800|
                  |L9.2598|
000a26  5d61              LDRB     r1,[r4,r5]            ;1639
000a28  1c6d              ADDS     r5,r5,#1              ;1639
000a2a  b2a8              UXTH     r0,r5                 ;1639
000a2c  292c              CMP      r1,#0x2c              ;1639
000a2e  d106              BNE      |L9.2622|
000a30  2100              MOVS     r1,#0                 ;1641
                  |L9.2610|
000a32  1c40              ADDS     r0,r0,#1              ;1641
000a34  1c49              ADDS     r1,r1,#1              ;1643
000a36  b2c9              UXTB     r1,r1                 ;1641
000a38  b280              UXTH     r0,r0                 ;1643
000a3a  2905              CMP      r1,#5                 ;1641
000a3c  d3f9              BCC      |L9.2610|
                  |L9.2622|
000a3e  5c21              LDRB     r1,[r4,r0]            ;1648
000a40  1c40              ADDS     r0,r0,#1              ;1648
000a42  b280              UXTH     r0,r0                 ;1648
000a44  292c              CMP      r1,#0x2c              ;1648
000a46  d106              BNE      |L9.2646|
000a48  2100              MOVS     r1,#0                 ;1650
                  |L9.2634|
000a4a  1c40              ADDS     r0,r0,#1              ;1650
000a4c  1c49              ADDS     r1,r1,#1              ;1652
000a4e  b2c9              UXTB     r1,r1                 ;1650
000a50  b280              UXTH     r0,r0                 ;1652
000a52  2905              CMP      r1,#5                 ;1650
000a54  d3f9              BCC      |L9.2634|
                  |L9.2646|
000a56  5c23              LDRB     r3,[r4,r0]            ;1657
000a58  1c40              ADDS     r0,r0,#1              ;1657
000a5a  2100              MOVS     r1,#0                 ;1655
000a5c  b285              UXTH     r5,r0                 ;1657
000a5e  2b2c              CMP      r3,#0x2c              ;1657
000a60  d10c              BNE      |L9.2684|
000a62  2000              MOVS     r0,#0                 ;1659
                  |L9.2660|
000a64  5d63              LDRB     r3,[r4,r5]            ;1661
000a66  1c6d              ADDS     r5,r5,#1              ;1661
000a68  eb010181          ADD      r1,r1,r1,LSL #2       ;1661
000a6c  eb060141          ADD      r1,r6,r1,LSL #1       ;1661
000a70  1c40              ADDS     r0,r0,#1              ;1661
000a72  4419              ADD      r1,r1,r3              ;1661
000a74  b2ad              UXTH     r5,r5                 ;1661
000a76  f01000ff          ANDS     r0,r0,#0xff           ;1659
000a7a  d0f3              BEQ      |L9.2660|
                  |L9.2684|
000a7c  7191              STRB     r1,[r2,#6]            ;1664
000a7e  7990              LDRB     r0,[r2,#6]            ;1665  ; mainswitch
000a80  b908              CBNZ     r0,|L9.2694|
000a82  2000              MOVS     r0,#0                 ;1667
000a84  7190              STRB     r0,[r2,#6]            ;1667
                  |L9.2694|
000a86  e033              B        |L9.2800|
                  |L9.2696|
000a88  e137              B        |L9.3322|
                  |L9.2698|
000a8a  5d61              LDRB     r1,[r4,r5]            ;1670
000a8c  1c6d              ADDS     r5,r5,#1              ;1670
000a8e  b2a8              UXTH     r0,r5                 ;1670
000a90  292c              CMP      r1,#0x2c              ;1670
000a92  d106              BNE      |L9.2722|
000a94  2100              MOVS     r1,#0                 ;1672
                  |L9.2710|
000a96  1c40              ADDS     r0,r0,#1              ;1672
000a98  1c49              ADDS     r1,r1,#1              ;1674
000a9a  b2c9              UXTB     r1,r1                 ;1672
000a9c  b280              UXTH     r0,r0                 ;1674
000a9e  2905              CMP      r1,#5                 ;1672
000aa0  d3f9              BCC      |L9.2710|
                  |L9.2722|
000aa2  5c21              LDRB     r1,[r4,r0]            ;1679
000aa4  1c40              ADDS     r0,r0,#1              ;1679
000aa6  b280              UXTH     r0,r0                 ;1679
000aa8  292c              CMP      r1,#0x2c              ;1679
000aaa  d106              BNE      |L9.2746|
000aac  2100              MOVS     r1,#0                 ;1681
                  |L9.2734|
000aae  1c40              ADDS     r0,r0,#1              ;1681
000ab0  1c49              ADDS     r1,r1,#1              ;1683
000ab2  b2c9              UXTB     r1,r1                 ;1681
000ab4  b280              UXTH     r0,r0                 ;1683
000ab6  2905              CMP      r1,#5                 ;1681
000ab8  d3f9              BCC      |L9.2734|
                  |L9.2746|
000aba  2100              MOVS     r1,#0                 ;1686
000abc  5c23              LDRB     r3,[r4,r0]            ;1688
000abe  e005              B        |L9.2764|
                  |L9.2752|
000ac0  e13b              B        |L9.3386|
                  |L9.2754|
000ac2  e0e1              B        |L9.3208|
                  |L9.2756|
000ac4  e09e              B        |L9.3076|
                  |L9.2758|
000ac6  e01b              B        |L9.2816|
                  |L9.2760|
000ac8  e07d              B        |L9.3014|
                  |L9.2762|
000aca  e113              B        |L9.3316|
                  |L9.2764|
000acc  1c40              ADDS     r0,r0,#1              ;1688
000ace  b285              UXTH     r5,r0                 ;1688
000ad0  2b2c              CMP      r3,#0x2c              ;1688
000ad2  d10c              BNE      |L9.2798|
000ad4  2000              MOVS     r0,#0                 ;1690
                  |L9.2774|
000ad6  5d63              LDRB     r3,[r4,r5]            ;1692
000ad8  1c6d              ADDS     r5,r5,#1              ;1692
000ada  eb010181          ADD      r1,r1,r1,LSL #2       ;1692
000ade  eb060141          ADD      r1,r6,r1,LSL #1       ;1692
000ae2  1c40              ADDS     r0,r0,#1              ;1692
000ae4  4419              ADD      r1,r1,r3              ;1692
000ae6  b2ad              UXTH     r5,r5                 ;1692
000ae8  f01000ff          ANDS     r0,r0,#0xff           ;1690
000aec  d0f3              BEQ      |L9.2774|
                  |L9.2798|
000aee  7191              STRB     r1,[r2,#6]            ;1695
                  |L9.2800|
000af0  f7fffffe          BL       Off_GPOI_ResetSet
000af4  f89b0006          LDRB     r0,[r11,#6]           ;1701  ; mainswitch
000af8  f7fffffe          BL       LIST_ONOFF
000afc  e5ef              B        |L9.1758|
                  |L9.2814|
000afe  e13b              B        |L9.3448|
                  |L9.2816|
000b00  5d60              LDRB     r0,[r4,r5]            ;1708
000b02  2308              MOVS     r3,#8                 ;1707
000b04  283f              CMP      r0,#0x3f              ;1708
000b06  d019              BEQ      |L9.2876|
000b08  2201              MOVS     r2,#1                 ;1717
000b0a  2100              MOVS     r1,#0                 ;1718
                  |L9.2828|
000b0c  b141              CBZ      r1,|L9.2848|
000b0e  2904              CMP      r1,#4                 ;1720
000b10  d006              BEQ      |L9.2848|
000b12  1868              ADDS     r0,r5,r1              ;1722
000b14  5c20              LDRB     r0,[r4,r0]            ;1722
000b16  f7fffffe          BL       IsDigitChar
000b1a  2801              CMP      r0,#1                 ;1722
000b1c  d027              BEQ      |L9.2926|
000b1e  2200              MOVS     r2,#0                 ;1728
                  |L9.2848|
000b20  1c49              ADDS     r1,r1,#1              ;1728
000b22  b2c9              UXTB     r1,r1                 ;1718
000b24  4299              CMP      r1,r3                 ;1718
000b26  d3f1              BCC      |L9.2828|
000b28  2a01              CMP      r2,#1                 ;1731
                  |L9.2858|
000b2a  f47faa82          BNE      |L9.50|
000b2e  18e8              ADDS     r0,r5,r3              ;1731
000b30  5c20              LDRB     r0,[r4,r0]            ;1731
000b32  280d              CMP      r0,#0xd               ;1731
000b34  d1f9              BNE      |L9.2858|
000b36  2200              MOVS     r2,#0                 ;1736
000b38  4610              MOV      r0,r2                 ;1737
000b3a  e03b              B        |L9.2996|
                  |L9.2876|
000b3c  eeb58ac0          VCMPE.F32 s16,#0.0              ;1710
000b40  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1710
000b44  db01              BLT      |L9.2890|
000b46  202b              MOVS     r0,#0x2b              ;1710
000b48  e000              B        |L9.2892|
                  |L9.2890|
000b4a  202d              MOVS     r0,#0x2d              ;1710
                  |L9.2892|
000b4c  5560              STRB     r0,[r4,r5]            ;1710
000b4e  1c6d              ADDS     r5,r5,#1              ;1710
000b50  b2ad              UXTH     r5,r5                 ;1710
000b52  ee180a10          VMOV     r0,s16                ;1711
000b56  f7fffffe          BL       __aeabi_f2d
000b5a  ec410b10          VMOV     d0,r0,r1              ;1711
000b5e  1960              ADDS     r0,r4,r5              ;1711
000b60  ec532b10          VMOV     r2,r3,d0              ;1711
000b64  a10c              ADR      r1,|L9.2968|
000b66  f7fffffe          BL       __2sprintf
000b6a  3508              ADDS     r5,r5,#8              ;1711
000b6c  e0c2              B        |L9.3316|
                  |L9.2926|
000b6e  f0020201          AND      r2,r2,#1              ;1724
000b72  e7d5              B        |L9.2848|
                  |L9.2932|
000b74  b1a0              CBZ      r0,|L9.2976|
000b76  2804              CMP      r0,#4                 ;1744
000b78  d005              BEQ      |L9.2950|
000b7a  5d61              LDRB     r1,[r4,r5]            ;1750
000b7c  eb020282          ADD      r2,r2,r2,LSL #2       ;1750
000b80  eb060242          ADD      r2,r6,r2,LSL #1       ;1750
000b84  440a              ADD      r2,r2,r1              ;1750
                  |L9.2950|
000b86  1c6d              ADDS     r5,r5,#1              ;1750
000b88  b2ad              UXTH     r5,r5                 ;1746
000b8a  e011              B        |L9.2992|
                  |L9.2956|
                          DCD      Run_Control
                  |L9.2960|
                          DCD      0x40020800
                  |L9.2964|
                          DCD      finishflag
                  |L9.2968|
000b98  2530332e          DCB      "%03.3f",0
000b9c  336600  
000b9f  00                DCB      0
                  |L9.2976|
000ba0  5d61              LDRB     r1,[r4,r5]            ;1741
000ba2  1c6d              ADDS     r5,r5,#1              ;1741
000ba4  3930              SUBS     r1,r1,#0x30           ;1741
000ba6  ee001a10          VMOV     s0,r1                 ;1741
000baa  b2ad              UXTH     r5,r5                 ;1741
000bac  eeb88ac0          VCVT.F32.S32 s16,s0                ;1741
                  |L9.2992|
000bb0  1c40              ADDS     r0,r0,#1              ;1741
000bb2  b2c0              UXTB     r0,r0                 ;1737
                  |L9.2996|
000bb4  4298              CMP      r0,r3                 ;1737
000bb6  d3dd              BCC      |L9.2932|
000bb8  eebc0ac8          VCVT.U32.F32 s0,s16                ;1752
000bbc  ee100a10          VMOV     r0,s0                 ;1752
000bc0  b2c1              UXTB     r1,r0                 ;1752
000bc2  2000              MOVS     r0,#0                 ;1752
000bc4  e05d              B        |L9.3202|
                  |L9.3014|
000bc6  5d61              LDRB     r1,[r4,r5]            ;1758
000bc8  2201              MOVS     r2,#1                 ;1757
000bca  293f              CMP      r1,#0x3f              ;1758
000bcc  d013              BEQ      |L9.3062|
000bce  2100              MOVS     r1,#0                 ;1768
000bd0  4608              MOV      r0,r1                 ;1768
                  |L9.3026|
000bd2  5d63              LDRB     r3,[r4,r5]            ;1770
000bd4  eb000080          ADD      r0,r0,r0,LSL #2       ;1770
000bd8  1c6d              ADDS     r5,r5,#1              ;1770
000bda  1c49              ADDS     r1,r1,#1              ;1770
000bdc  eb060040          ADD      r0,r6,r0,LSL #1       ;1770
000be0  b2c9              UXTB     r1,r1                 ;1768
000be2  4418              ADD      r0,r0,r3              ;1770
000be4  b2ad              UXTH     r5,r5                 ;1770
000be6  4291              CMP      r1,r2                 ;1768
000be8  d3f3              BCC      |L9.3026|
000bea  2801              CMP      r0,#1                 ;1772
000bec  f63fab71          BHI      |L9.722|
000bf0  4967              LDR      r1,|L9.3472|
000bf2  7008              STRB     r0,[r1,#0]            ;1779
000bf4  e573              B        |L9.1758|
                  |L9.3062|
000bf6  7802              LDRB     r2,[r0,#0]            ;1760  ; C_DISCHARGE
000bf8  1963              ADDS     r3,r4,r5              ;1760
000bfa  f2af7184          ADR      r1,|L9.1144|
000bfe  4618              MOV      r0,r3                 ;1760
000c00  f7ffbb71          B        |L9.742|
                  |L9.3076|
000c04  5d60              LDRB     r0,[r4,r5]            ;1792
000c06  2308              MOVS     r3,#8                 ;1791
000c08  283f              CMP      r0,#0x3f              ;1792
000c0a  d076              BEQ      |L9.3322|
000c0c  2201              MOVS     r2,#1                 ;1801
000c0e  2100              MOVS     r1,#0                 ;1802
                  |L9.3088|
000c10  b141              CBZ      r1,|L9.3108|
000c12  2904              CMP      r1,#4                 ;1804
000c14  d006              BEQ      |L9.3108|
000c16  1868              ADDS     r0,r5,r1              ;1806
000c18  5c20              LDRB     r0,[r4,r0]            ;1806
000c1a  f7fffffe          BL       IsDigitChar
000c1e  2801              CMP      r0,#1                 ;1806
000c20  d00e              BEQ      |L9.3136|
000c22  2200              MOVS     r2,#0                 ;1812
                  |L9.3108|
000c24  1c49              ADDS     r1,r1,#1              ;1812
000c26  b2c9              UXTB     r1,r1                 ;1802
000c28  4299              CMP      r1,r3                 ;1802
000c2a  d3f1              BCC      |L9.3088|
000c2c  2a01              CMP      r2,#1                 ;1815
                  |L9.3118|
000c2e  f47faa00          BNE      |L9.50|
000c32  18e8              ADDS     r0,r5,r3              ;1815
000c34  5c20              LDRB     r0,[r4,r0]            ;1815
000c36  280d              CMP      r0,#0xd               ;1815
000c38  d1f9              BNE      |L9.3118|
000c3a  2200              MOVS     r2,#0                 ;1820
000c3c  4610              MOV      r0,r2                 ;1821
000c3e  e018              B        |L9.3186|
                  |L9.3136|
000c40  f0020201          AND      r2,r2,#1              ;1808
000c44  e7ee              B        |L9.3108|
                  |L9.3142|
000c46  b150              CBZ      r0,|L9.3166|
000c48  2804              CMP      r0,#4                 ;1828
000c4a  d005              BEQ      |L9.3160|
000c4c  5d61              LDRB     r1,[r4,r5]            ;1834
000c4e  eb020282          ADD      r2,r2,r2,LSL #2       ;1834
000c52  eb060242          ADD      r2,r6,r2,LSL #1       ;1834
000c56  440a              ADD      r2,r2,r1              ;1834
                  |L9.3160|
000c58  1c6d              ADDS     r5,r5,#1              ;1834
000c5a  b2ad              UXTH     r5,r5                 ;1830
000c5c  e007              B        |L9.3182|
                  |L9.3166|
000c5e  5d61              LDRB     r1,[r4,r5]            ;1825
000c60  1c6d              ADDS     r5,r5,#1              ;1825
000c62  3930              SUBS     r1,r1,#0x30           ;1825
000c64  ee001a10          VMOV     s0,r1                 ;1825
000c68  b2ad              UXTH     r5,r5                 ;1825
000c6a  eeb88ac0          VCVT.F32.S32 s16,s0                ;1825
                  |L9.3182|
000c6e  1c40              ADDS     r0,r0,#1              ;1825
000c70  b2c0              UXTB     r0,r0                 ;1821
                  |L9.3186|
000c72  4298              CMP      r0,r3                 ;1821
000c74  d3e7              BCC      |L9.3142|
000c76  eebc0ac8          VCVT.U32.F32 s0,s16                ;1836
000c7a  ee100a10          VMOV     r0,s0                 ;1836
000c7e  b2c1              UXTB     r1,r0                 ;1836
000c80  2001              MOVS     r0,#1                 ;1836
                  |L9.3202|
000c82  f7fffffe          BL       CalHandle
000c86  e077              B        |L9.3448|
                  |L9.3208|
000c88  5d60              LDRB     r0,[r4,r5]            ;1843
000c8a  2306              MOVS     r3,#6                 ;1842
000c8c  283f              CMP      r0,#0x3f              ;1843
000c8e  d018              BEQ      |L9.3266|
000c90  2201              MOVS     r2,#1                 ;1852
000c92  2100              MOVS     r1,#0                 ;1853
                  |L9.3220|
000c94  b141              CBZ      r1,|L9.3240|
000c96  2904              CMP      r1,#4                 ;1855
000c98  d006              BEQ      |L9.3240|
000c9a  1868              ADDS     r0,r5,r1              ;1857
000c9c  5c20              LDRB     r0,[r4,r0]            ;1857
000c9e  f7fffffe          BL       IsDigitChar
000ca2  2801              CMP      r0,#1                 ;1857
000ca4  d02a              BEQ      |L9.3324|
000ca6  2200              MOVS     r2,#0                 ;1863
                  |L9.3240|
000ca8  1c49              ADDS     r1,r1,#1              ;1863
000caa  b2c9              UXTB     r1,r1                 ;1853
000cac  4299              CMP      r1,r3                 ;1853
000cae  d3f1              BCC      |L9.3220|
000cb0  2a01              CMP      r2,#1                 ;1866
000cb2  d1bc              BNE      |L9.3118|
000cb4  18e8              ADDS     r0,r5,r3              ;1866
000cb6  5c20              LDRB     r0,[r4,r0]            ;1866
000cb8  280d              CMP      r0,#0xd               ;1866
000cba  d1b8              BNE      |L9.3118|
000cbc  2200              MOVS     r2,#0                 ;1871
000cbe  4610              MOV      r0,r2                 ;1872
000cc0  e02a              B        |L9.3352|
                  |L9.3266|
000cc2  eeb58ac0          VCMPE.F32 s16,#0.0              ;1845
000cc6  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1845
000cca  db01              BLT      |L9.3280|
000ccc  202b              MOVS     r0,#0x2b              ;1845
000cce  e000              B        |L9.3282|
                  |L9.3280|
000cd0  202d              MOVS     r0,#0x2d              ;1845
                  |L9.3282|
000cd2  5560              STRB     r0,[r4,r5]            ;1845
000cd4  1c6d              ADDS     r5,r5,#1              ;1845
000cd6  b2ad              UXTH     r5,r5                 ;1845
000cd8  ee180a10          VMOV     r0,s16                ;1846
000cdc  f7fffffe          BL       __aeabi_f2d
000ce0  ec410b10          VMOV     d0,r0,r1              ;1846
000ce4  1960              ADDS     r0,r4,r5              ;1846
000ce6  ec532b10          VMOV     r2,r3,d0              ;1846
000cea  f2af1154          ADR      r1,|L9.2968|
000cee  f7fffffe          BL       __2sprintf
000cf2  1dad              ADDS     r5,r5,#6              ;1846
                  |L9.3316|
000cf4  b2a8              UXTH     r0,r5                 ;1847
000cf6  f7ffbacb          B        |L9.656|
                  |L9.3322|
000cfa  e041              B        |L9.3456|
                  |L9.3324|
000cfc  f0020201          AND      r2,r2,#1              ;1859
000d00  e7d2              B        |L9.3240|
                  |L9.3330|
000d02  5d61              LDRB     r1,[r4,r5]            ;1885
000d04  b188              CBZ      r0,|L9.3370|
000d06  eb020282          ADD      r2,r2,r2,LSL #2       ;1885
000d0a  eb060242          ADD      r2,r6,r2,LSL #1       ;1885
000d0e  1c6d              ADDS     r5,r5,#1              ;1885
000d10  440a              ADD      r2,r2,r1              ;1885
000d12  b2ad              UXTH     r5,r5                 ;1885
                  |L9.3348|
000d14  1c40              ADDS     r0,r0,#1              ;1885
000d16  b2c0              UXTB     r0,r0                 ;1872
                  |L9.3352|
000d18  4298              CMP      r0,r3                 ;1872
000d1a  d3f2              BCC      |L9.3330|
000d1c  eebc0ac8          VCVT.U32.F32 s0,s16                ;1887
000d20  ee100a10          VMOV     r0,s0                 ;1887
000d24  b2c1              UXTB     r1,r0                 ;1887
000d26  2002              MOVS     r0,#2                 ;1887
000d28  e7ab              B        |L9.3202|
                  |L9.3370|
000d2a  1c6d              ADDS     r5,r5,#1              ;1887
000d2c  3930              SUBS     r1,r1,#0x30           ;1876
000d2e  ee001a10          VMOV     s0,r1                 ;1876
000d32  b2ad              UXTH     r5,r5                 ;1876
000d34  eeb88ac0          VCVT.F32.S32 s16,s0                ;1876
000d38  e7ec              B        |L9.3348|
                  |L9.3386|
000d3a  5d60              LDRB     r0,[r4,r5]            ;1893
000d3c  283f              CMP      r0,#0x3f              ;1893
000d3e  d01f              BEQ      |L9.3456|
000d40  2101              MOVS     r1,#1                 ;1902
000d42  2000              MOVS     r0,#0                 ;1903
000d44  4607              MOV      r7,r0                 ;1903
                  |L9.3398|
000d46  5d62              LDRB     r2,[r4,r5]            ;1905
000d48  eb070387          ADD      r3,r7,r7,LSL #2       ;1905
000d4c  eb060343          ADD      r3,r6,r3,LSL #1       ;1905
000d50  1c6d              ADDS     r5,r5,#1              ;1905
000d52  1c40              ADDS     r0,r0,#1              ;1905
000d54  18d7              ADDS     r7,r2,r3              ;1905
000d56  b2c0              UXTB     r0,r0                 ;1903
000d58  b2ad              UXTH     r5,r5                 ;1905
000d5a  4288              CMP      r0,r1                 ;1903
000d5c  d3f3              BCC      |L9.3398|
000d5e  2f01              CMP      r7,#1                 ;1907
000d60  f63faab7          BHI      |L9.722|
000d64  490b              LDR      r1,|L9.3476|
000d66  2001              MOVS     r0,#1                 ;1913
000d68  7008              STRB     r0,[r1,#0]            ;1913
000d6a  f7fffffe          BL       Write_Boot_Flag
000d6e  2f01              CMP      r7,#1                 ;1915
000d70  d102              BNE      |L9.3448|
000d72  2037              MOVS     r0,#0x37              ;1917
000d74  f7fffffe          BL       JumpBoot
                  |L9.3448|
000d78  f1b80f13          CMP      r8,#0x13              ;2037
000d7c  f4bfa959          BCS      |L9.50|
                  |L9.3456|
000d80  b033              ADD      sp,sp,#0xcc
000d82  1c6d              ADDS     r5,r5,#1              ;2037
000d84  ecbd8b02          VPOP     {d8}
000d88  b2a8              UXTH     r0,r5                 ;2041
000d8a  e8bd8ff0          POP      {r4-r11,pc}
;;;2043   
                          ENDP

000d8e  0000              DCW      0x0000
                  |L9.3472|
                          DCD      overflag
                  |L9.3476|
                          DCD      bootflag

                          AREA ||i.SetErr_ACK||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  SetErr_ACK PROC
;;;966    
;;;967    u16 SetErr_ACK(char *buf, u8 addr ,u8 ucErr)
000000  b5f8              PUSH     {r3-r7,lr}
;;;968    {
000002  4604              MOV      r4,r0
;;;969    		u16 i=0;
;;;970    		u8 len = 0;
;;;971    		char stradd[3] = {0};
000004  2000              MOVS     r0,#0
;;;972    		int addlen=0;
;;;973    		memset(buf,0,sizeof(buf));
000006  9000              STR      r0,[sp,#0]
000008  6020              STR      r0,[r4,#0]
00000a  4616              MOV      r6,r2                 ;968
;;;974        	buf[i++] = ChrStartS;
00000c  203e              MOVS     r0,#0x3e
00000e  7020              STRB     r0,[r4,#0]
;;;975    		sprintf(stradd,"%d",addr);
000010  460a              MOV      r2,r1
000012  a11a              ADR      r1,|L10.124|
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       __2sprintf
;;;976    		addlen=strlen(stradd);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       strlen
000020  4605              MOV      r5,r0
;;;977    		strncat(&buf[i],stradd,addlen);
000022  1c60              ADDS     r0,r4,#1
000024  462a              MOV      r2,r5
000026  4669              MOV      r1,sp
000028  f7fffffe          BL       strncat
00002c  1c6d              ADDS     r5,r5,#1
;;;978    		i+=addlen;
00002e  b2a8              UXTH     r0,r5
;;;979    		buf[i++] = '/';
000030  212f              MOVS     r1,#0x2f
000032  5421              STRB     r1,[r4,r0]
000034  1c40              ADDS     r0,r0,#1
000036  b285              UXTH     r5,r0
;;;980    		switch(ucErr)
000038  2e01              CMP      r6,#1
00003a  d008              BEQ      |L10.78|
00003c  2e02              CMP      r6,#2
00003e  d001              BEQ      |L10.68|
000040  2e03              CMP      r6,#3
000042  d015              BEQ      |L10.112|
                  |L10.68|
;;;981            {
;;;982              case 1:         //
;;;983              	   len = 9;
;;;984              	   memmove(&buf[i],"PARA ERR!",len);   
;;;985              	   break;
;;;986    	      case 2:         //
;;;987              	   len = 8;
;;;988              	   memmove(&buf[i],"CMD ERR!",len);   
;;;989              	   break;
;;;990    	      case 3:         //
;;;991              	   len = 8;
;;;992              	   memmove(&buf[i],"REM ERR!",len);   
;;;993              	   break;
;;;994    		  default:    
;;;995                   len = 8;
000044  2608              MOVS     r6,#8
;;;996              	   memmove(&buf[i],"CMD ERR!",len);   
000046  1960              ADDS     r0,r4,r5
000048  4632              MOV      r2,r6
00004a  a10d              ADR      r1,|L10.128|
;;;997                   break;
00004c  e003              B        |L10.86|
                  |L10.78|
00004e  2609              MOVS     r6,#9                 ;983
000050  1960              ADDS     r0,r4,r5              ;984
000052  4632              MOV      r2,r6                 ;984
000054  a10d              ADR      r1,|L10.140|
                  |L10.86|
000056  f7fffffe          BL       __aeabi_memmove
;;;998    	    }
;;;999    	    i+=len;
00005a  19a8              ADDS     r0,r5,r6
00005c  b280              UXTH     r0,r0
;;;1000   		buf[i++] = ChrEndR;
00005e  210d              MOVS     r1,#0xd
000060  5421              STRB     r1,[r4,r0]
000062  1c40              ADDS     r0,r0,#1
000064  b280              UXTH     r0,r0
;;;1001   		buf[i++] = ChrEndS;
000066  210a              MOVS     r1,#0xa
000068  5421              STRB     r1,[r4,r0]
00006a  1c40              ADDS     r0,r0,#1
00006c  b280              UXTH     r0,r0
;;;1002   		return i;
;;;1003   }
00006e  bdf8              POP      {r3-r7,pc}
                  |L10.112|
000070  2608              MOVS     r6,#8                 ;991
000072  1960              ADDS     r0,r4,r5              ;992
000074  4632              MOV      r2,r6                 ;992
000076  a108              ADR      r1,|L10.152|
000078  e7ed              B        |L10.86|
;;;1004   
                          ENDP

00007a  0000              DCW      0x0000
                  |L10.124|
00007c  256400            DCB      "%d",0
00007f  00                DCB      0
                  |L10.128|
000080  434d4420          DCB      "CMD ERR!",0
000084  45525221
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L10.140|
00008c  50415241          DCB      "PARA ERR!",0
000090  20455252
000094  2100    
000096  00                DCB      0
000097  00                DCB      0
                  |L10.152|
000098  52454d20          DCB      "REM ERR!",0
00009c  45525221
0000a0  00      
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0

                          AREA ||i.SetListPC||, CODE, READONLY, ALIGN=2

                  SetListPC PROC
;;;161    
;;;162    void SetListPC(void)
000000  4804              LDR      r0,|L11.20|
;;;163    {
000002  b510              PUSH     {r4,lr}
;;;164    	SetPowerC(Para.CDC_Limit_C);
000004  f8b0006c          LDRH     r0,[r0,#0x6c]  ; Para
000008  f7fffffe          BL       SetPowerC
;;;165    	listsend = 3;
00000c  4902              LDR      r1,|L11.24|
00000e  2003              MOVS     r0,#3
000010  7248              STRB     r0,[r1,#9]
;;;166    }
000012  bd10              POP      {r4,pc}
;;;167    
                          ENDP

                  |L11.20|
                          DCD      Para
                  |L11.24|
                          DCD      ||.data||

                          AREA ||i.SetListPS||, CODE, READONLY, ALIGN=2

                  SetListPS PROC
;;;168    
;;;169    void SetListPS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;170    {
;;;171    	if(mainswitch == 1)
000002  4c0f              LDR      r4,|L12.64|
000004  79a0              LDRB     r0,[r4,#6]  ; mainswitch
;;;172    	{
;;;173    		GPIO_SetBits(GPIOE,GPIO_Pin_2);
000006  4d0f              LDR      r5,|L12.68|
000008  2801              CMP      r0,#1                 ;171
00000a  d109              BNE      |L12.32|
00000c  2104              MOVS     r1,#4
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       GPIO_SetBits
;;;174    		Delay_ms(POWER_SW_DELAY);
000014  200a              MOVS     r0,#0xa
000016  f7fffffe          BL       Delay_ms
;;;175    		PowerSwitch(mainswitch);
00001a  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00001c  f7fffffe          BL       PowerSwitch
                  |L12.32|
;;;176    	}
;;;177    	
;;;178    	if(mainswitch == 0)
000020  79a0              LDRB     r0,[r4,#6]  ; mainswitch
000022  b948              CBNZ     r0,|L12.56|
;;;179    	{
;;;180    		PowerSwitch(mainswitch);
000024  79a0              LDRB     r0,[r4,#6]  ; mainswitch
000026  f7fffffe          BL       PowerSwitch
;;;181    		Delay_ms(POWER_SW_DELAY);
00002a  200a              MOVS     r0,#0xa
00002c  f7fffffe          BL       Delay_ms
;;;182    		GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
000030  2104              MOVS     r1,#4
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       GPIO_ResetBits
                  |L12.56|
;;;183    	}
;;;184    	
;;;185    	listsend = 0;
000038  2000              MOVS     r0,#0
00003a  7260              STRB     r0,[r4,#9]
;;;186    }
00003c  bd70              POP      {r4-r6,pc}
;;;187    
                          ENDP

00003e  0000              DCW      0x0000
                  |L12.64|
                          DCD      ||.data||
                  |L12.68|
                          DCD      0x40021000

                          AREA ||i.SetListPV||, CODE, READONLY, ALIGN=2

                  SetListPV PROC
;;;155    }
;;;156    void SetListPV(void)
000000  4804              LDR      r0,|L13.20|
;;;157    {
000002  b510              PUSH     {r4,lr}
;;;158    	SetPowerV(Para.CDC_OutPut_V);
000004  f8b0006a          LDRH     r0,[r0,#0x6a]  ; Para
000008  f7fffffe          BL       SetPowerV
;;;159    	listsend = 2;
00000c  4902              LDR      r1,|L13.24|
00000e  2002              MOVS     r0,#2
000010  7248              STRB     r0,[r1,#9]
;;;160    }
000012  bd10              POP      {r4,pc}
;;;161    
                          ENDP

                  |L13.20|
                          DCD      Para
                  |L13.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerC||, CODE, READONLY, ALIGN=2

                  SetPowerC PROC
;;;114    
;;;115    void SetPowerC(vu16 powc)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;116    {
;;;117    	MasterSendbuf[0] = 0x01;
000002  4c12              LDR      r4,|L14.76|
000004  2001              MOVS     r0,#1
000006  7020              STRB     r0,[r4,#0]
;;;118    	MasterSendbuf[1] = 0x06;
000008  2006              MOVS     r0,#6
00000a  7060              STRB     r0,[r4,#1]
;;;119    	MasterSendbuf[2] = 0x00;
00000c  2000              MOVS     r0,#0
00000e  70a0              STRB     r0,[r4,#2]
;;;120    	MasterSendbuf[3] = 0x31;
000010  2031              MOVS     r0,#0x31
000012  70e0              STRB     r0,[r4,#3]
;;;121    	MasterSendbuf[4] = (u8)(powc/10>>8);
000014  f8bd1000          LDRH     r1,[sp,#0]
000018  200a              MOVS     r0,#0xa
00001a  fbb1f1f0          UDIV     r1,r1,r0
00001e  0a09              LSRS     r1,r1,#8
000020  7121              STRB     r1,[r4,#4]
;;;122    	MasterSendbuf[5] = (u8)(powc/10);
000022  f8bd1000          LDRH     r1,[sp,#0]
000026  fbb1f0f0          UDIV     r0,r1,r0
00002a  7160              STRB     r0,[r4,#5]
;;;123    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00002c  2106              MOVS     r1,#6
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       Hardware_CRC
000034  71a0              STRB     r0,[r4,#6]
;;;124    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000036  2106              MOVS     r1,#6
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       Hardware_CRC
00003e  0a00              LSRS     r0,r0,#8
000040  71e0              STRB     r0,[r4,#7]
;;;125    	USART3WriteDMA(8);
000042  e8bd4038          POP      {r3-r5,lr}
000046  2008              MOVS     r0,#8
000048  f7ffbffe          B.W      USART3WriteDMA
;;;126    }
;;;127    
                          ENDP

                  |L14.76|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.SetPowerModeC||, CODE, READONLY, ALIGN=2

                  SetPowerModeC PROC
;;;133    
;;;134    void SetPowerModeC(void)
000000  4804              LDR      r0,|L15.20|
;;;135    {
000002  b510              PUSH     {r4,lr}
;;;136    	SetPowerC(Para.POWER_Limit_C);
000004  f8b00056          LDRH     r0,[r0,#0x56]  ; Para
000008  f7fffffe          BL       SetPowerC
;;;137    	sendwait = 3;
00000c  4902              LDR      r1,|L15.24|
00000e  2003              MOVS     r0,#3
000010  7208              STRB     r0,[r1,#8]
;;;138    }
000012  bd10              POP      {r4,pc}
;;;139    
                          ENDP

                  |L15.20|
                          DCD      Para
                  |L15.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerModeS||, CODE, READONLY, ALIGN=2

                  SetPowerModeS PROC
;;;139    
;;;140    void SetPowerModeS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;141    {
;;;142    	if(mainswitch == 1)
000002  4c10              LDR      r4,|L16.68|
000004  79a0              LDRB     r0,[r4,#6]  ; mainswitch
;;;143    	{
;;;144    		GPIO_SetBits(GPIOE,GPIO_Pin_2);
000006  4d10              LDR      r5,|L16.72|
000008  2801              CMP      r0,#1                 ;142
00000a  d002              BEQ      |L16.18|
;;;145    		Delay_ms(POWER_SW_DELAY);
;;;146    		PowerSwitch(mainswitch);
;;;147    	}else if(mainswitch == 0)
00000c  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00000e  b158              CBZ      r0,|L16.40|
000010  e014              B        |L16.60|
                  |L16.18|
000012  2104              MOVS     r1,#4                 ;144
000014  4628              MOV      r0,r5                 ;144
000016  f7fffffe          BL       GPIO_SetBits
00001a  200a              MOVS     r0,#0xa               ;145
00001c  f7fffffe          BL       Delay_ms
000020  79a0              LDRB     r0,[r4,#6]            ;146  ; mainswitch
000022  f7fffffe          BL       PowerSwitch
000026  e009              B        |L16.60|
                  |L16.40|
;;;148    	{
;;;149    		PowerSwitch(mainswitch);
000028  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00002a  f7fffffe          BL       PowerSwitch
;;;150    		Delay_ms(POWER_SW_DELAY);
00002e  200a              MOVS     r0,#0xa
000030  f7fffffe          BL       Delay_ms
;;;151    		GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
000034  2104              MOVS     r1,#4
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       GPIO_ResetBits
                  |L16.60|
;;;152    	}
;;;153    	
;;;154    	sendwait = 0;
00003c  2000              MOVS     r0,#0
00003e  7220              STRB     r0,[r4,#8]
;;;155    }
000040  bd70              POP      {r4-r6,pc}
;;;156    void SetListPV(void)
                          ENDP

000042  0000              DCW      0x0000
                  |L16.68|
                          DCD      ||.data||
                  |L16.72|
                          DCD      0x40021000

                          AREA ||i.SetPowerModeV||, CODE, READONLY, ALIGN=2

                  SetPowerModeV PROC
;;;127    
;;;128    void SetPowerModeV(void)
000000  4804              LDR      r0,|L17.20|
;;;129    {
000002  b510              PUSH     {r4,lr}
;;;130    	SetPowerV(Para.POWER_OutPut_V);
000004  f8b00054          LDRH     r0,[r0,#0x54]  ; Para
000008  f7fffffe          BL       SetPowerV
;;;131    	sendwait = 2;
00000c  4902              LDR      r1,|L17.24|
00000e  2002              MOVS     r0,#2
000010  7208              STRB     r0,[r1,#8]
;;;132    }
000012  bd10              POP      {r4,pc}
;;;133    
                          ENDP

                  |L17.20|
                          DCD      Para
                  |L17.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerV||, CODE, READONLY, ALIGN=2

                  SetPowerV PROC
;;;101    }
;;;102    void SetPowerV(vu16 powv)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;103    {
;;;104    	MasterSendbuf[0] = 0x01;
000002  4c12              LDR      r4,|L18.76|
000004  2001              MOVS     r0,#1
000006  7020              STRB     r0,[r4,#0]
;;;105    	MasterSendbuf[1] = 0x06;
000008  2006              MOVS     r0,#6
00000a  7060              STRB     r0,[r4,#1]
;;;106    	MasterSendbuf[2] = 0x00;
00000c  2000              MOVS     r0,#0
00000e  70a0              STRB     r0,[r4,#2]
;;;107    	MasterSendbuf[3] = 0x30;
000010  2030              MOVS     r0,#0x30
000012  70e0              STRB     r0,[r4,#3]
;;;108    	MasterSendbuf[4] = (u8)(powv/10>>8);
000014  f8bd1000          LDRH     r1,[sp,#0]
000018  200a              MOVS     r0,#0xa
00001a  fbb1f1f0          UDIV     r1,r1,r0
00001e  0a09              LSRS     r1,r1,#8
000020  7121              STRB     r1,[r4,#4]
;;;109    	MasterSendbuf[5] = (u8)(powv/10);
000022  f8bd1000          LDRH     r1,[sp,#0]
000026  fbb1f0f0          UDIV     r0,r1,r0
00002a  7160              STRB     r0,[r4,#5]
;;;110    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00002c  2106              MOVS     r1,#6
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       Hardware_CRC
000034  71a0              STRB     r0,[r4,#6]
;;;111    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000036  2106              MOVS     r1,#6
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       Hardware_CRC
00003e  0a00              LSRS     r0,r0,#8
000040  71e0              STRB     r0,[r4,#7]
;;;112    	USART3WriteDMA(8);
000042  e8bd4038          POP      {r3-r5,lr}
000046  2008              MOVS     r0,#8
000048  f7ffbffe          B.W      USART3WriteDMA
;;;113    }
;;;114    
                          ENDP

                  |L18.76|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.UART1_Send||, CODE, READONLY, ALIGN=2

                  UART1_Send PROC
;;;2435   
;;;2436   void UART1_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2437   {
;;;2438   	static vu8 UART_Buffer_Send_pointer=0;
;;;2439   		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L19.72|
000004  78e0              LDRB     r0,[r4,#3]  ; UART_Buffer_Send_pointer
000006  7921              LDRB     r1,[r4,#4]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L19.56|
;;;2440            {
;;;2441   				 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L19.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L19.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L19.54|
;;;2442   				 {
;;;2443   					USART_SendData(USART1,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  78e1              LDRB     r1,[r4,#3]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  4d0d              LDR      r5,|L19.84|
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       USART_SendData
                  |L19.36|
;;;2444   					while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);//等待发送完成
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L19.36|
;;;2445   					UART_Buffer_Send_pointer++;
000030  78e0              LDRB     r0,[r4,#3]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  70e0              STRB     r0,[r4,#3]
                  |L19.54|
;;;2446   				 }
;;;2447            }
;;;2448   		else 
;;;2449   		{
;;;2450   			UART_Buffer_Send_pointer=0;
;;;2451   			UART_SEND_flag=0;//发送完成一帧数据
;;;2452   		}
;;;2453   }
000036  bd70              POP      {r4-r6,pc}
                  |L19.56|
000038  2000              MOVS     r0,#0                 ;2450
00003a  70e0              STRB     r0,[r4,#3]            ;2450
00003c  4806              LDR      r0,|L19.88|
00003e  6801              LDR      r1,[r0,#0]            ;2451  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;2451
000044  6001              STR      r1,[r0,#0]            ;2451  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;2454   
                          ENDP

                  |L19.72|
                          DCD      ||.data||
                  |L19.76|
                          DCD      ||area_number.31||
                  |L19.80|
                          DCD      ADDR
                  |L19.84|
                          DCD      0x40011000
                  |L19.88|
                          DCD      flagA

                          AREA ||i.UART2_Send||, CODE, READONLY, ALIGN=2

                  UART2_Send PROC
;;;2416   }
;;;2417   void UART2_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2418   {
;;;2419   	static vu8 UART_Buffer_Send_pointer=0;
;;;2420   		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L20.72|
000004  78a0              LDRB     r0,[r4,#2]  ; UART_Buffer_Send_pointer
000006  7921              LDRB     r1,[r4,#4]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L20.56|
;;;2421            {
;;;2422   					 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L20.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L20.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L20.54|
;;;2423   					 {
;;;2424   						USART_SendData(USART2,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  78a1              LDRB     r1,[r4,#2]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  480d              LDR      r0,|L20.84|
00001e  f7fffffe          BL       USART_SendData
;;;2425   						while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);//等待发送完成
000022  4d0d              LDR      r5,|L20.88|
                  |L20.36|
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L20.36|
;;;2426   						UART_Buffer_Send_pointer++;
000030  78a0              LDRB     r0,[r4,#2]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  70a0              STRB     r0,[r4,#2]
                  |L20.54|
;;;2427   					}
;;;2428            }
;;;2429   		else 
;;;2430   		{
;;;2431   			UART_Buffer_Send_pointer=0;
;;;2432   			UART_SEND_flag=0;//发送完成一帧数据
;;;2433   		}
;;;2434   }
000036  bd70              POP      {r4-r6,pc}
                  |L20.56|
000038  2000              MOVS     r0,#0                 ;2431
00003a  70a0              STRB     r0,[r4,#2]            ;2431
00003c  4807              LDR      r0,|L20.92|
00003e  6801              LDR      r1,[r0,#0]            ;2432  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;2432
000044  6001              STR      r1,[r0,#0]            ;2432  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;2435   
                          ENDP

                  |L20.72|
                          DCD      ||.data||
                  |L20.76|
                          DCD      ||area_number.31||
                  |L20.80|
                          DCD      ADDR
                  |L20.84|
                          DCD      0x40004400
                  |L20.88|
                          DCD      0x40011000
                  |L20.92|
                          DCD      flagA

                          AREA ||i.USART2_Configuration||, CODE, READONLY, ALIGN=2

                  USART2_Configuration PROC
;;;2112   
;;;2113   void USART2_Configuration(void)//串口初始化函数
000000  b570              PUSH     {r4-r6,lr}
;;;2114   {  
;;;2115   	GPIO_InitTypeDef GPIO_InitStructure;
;;;2116   	USART_InitTypeDef USART_InitStructure;
;;;2117   	
;;;2118   	/* config USART1 clock */
;;;2119   	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
000002  2101              MOVS     r1,#1
000004  b088              SUB      sp,sp,#0x20           ;2114
000006  0448              LSLS     r0,r1,#17
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;2120   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);
00000c  4e2a              LDR      r6,|L21.184|
00000e  2207              MOVS     r2,#7
000010  2102              MOVS     r1,#2
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2121   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);
000018  2207              MOVS     r2,#7
00001a  2103              MOVS     r1,#3
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2122   	/* USART1 GPIO config */
;;;2123   	/* Configure USART1 Tx (PA.02) as alternate function push-pull */
;;;2124   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;2125   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000022  2502              MOVS     r5,#2
000024  2004              MOVS     r0,#4                 ;2124
000026  f88d5004          STRB     r5,[sp,#4]
;;;2126   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
00002c  9000              STR      r0,[sp,#0]            ;2125
00002e  f88d4006          STRB     r4,[sp,#6]
;;;2127   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f88d5005          STRB     r5,[sp,#5]
;;;2128   	GPIO_Init(GPIOA, &GPIO_InitStructure);    
000036  4669              MOV      r1,sp
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GPIO_Init
;;;2129   	/* Configure USART1 Rx (PA.03) as input floating */
;;;2130   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
00003e  2008              MOVS     r0,#8
;;;2131   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000040  9000              STR      r0,[sp,#0]
000042  f88d5004          STRB     r5,[sp,#4]
;;;2132   	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;2133   	
;;;2134   	/* USART1 mode config */
;;;2135   	USART_InitStructure.USART_BaudRate = 115200;
00004e  f44f30e1          MOV      r0,#0x1c200
;;;2136   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000052  9002              STR      r0,[sp,#8]
;;;2137   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2138   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000054  f8ad4010          STRH     r4,[sp,#0x10]
;;;2139   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2140   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
;;;2141   	USART_Init(USART2, &USART_InitStructure);
00005a  4d18              LDR      r5,|L21.188|
00005c  f8ad400c          STRH     r4,[sp,#0xc]          ;2136
000060  f8ad0012          STRH     r0,[sp,#0x12]         ;2140
000064  f8ad400e          STRH     r4,[sp,#0xe]          ;2137
000068  f8ad4014          STRH     r4,[sp,#0x14]         ;2139
00006c  a902              ADD      r1,sp,#8
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       USART_Init
;;;2142   	
;;;2143   	/******使能串口接收中断******************/
;;;2144   	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
000074  2201              MOVS     r2,#1
000076  f2405125          MOV      r1,#0x525
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_ITConfig
;;;2145   //	USART_ITConfig(USART2, USART_IT_ORE, ENABLE);	
;;;2146   	USART_Cmd(USART2, ENABLE);//使能串口1
000080  2101              MOVS     r1,#1
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USART_Cmd
;;;2147     USART_ClearFlag(USART2, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       USART_ClearFlag
000090  f44f60e0          MOV      r0,#0x700
000094  f7fffffe          BL       NVIC_PriorityGroupConfig
000098  2026              MOVS     r0,#0x26
00009a  f88d0018          STRB     r0,[sp,#0x18]
00009e  f88d4019          STRB     r4,[sp,#0x19]
0000a2  2001              MOVS     r0,#1
0000a4  f88d001a          STRB     r0,[sp,#0x1a]
0000a8  f88d001b          STRB     r0,[sp,#0x1b]
0000ac  a806              ADD      r0,sp,#0x18
0000ae  f7fffffe          BL       NVIC_Init
;;;2148     
;;;2149     USART2_NVIC_Config();//串口中断配置
;;;2150   }
0000b2  b008              ADD      sp,sp,#0x20
0000b4  bd70              POP      {r4-r6,pc}
;;;2151   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L21.184|
                          DCD      0x40020000
                  |L21.188|
                          DCD      0x40004400

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;2374   
;;;2375   void USART2_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2376   {
;;;2377   	u8 Res;
;;;2378    	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
000002  4c1c              LDR      r4,|L22.116|
000004  f2405525          MOV      r5,#0x525
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       USART_GetITStatus
000010  2800              CMP      r0,#0
000012  d013              BEQ      |L22.60|
;;;2379   	{
;;;2380   		USART_ClearITPendingBit(USART2,USART_IT_RXNE);
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       USART_ClearITPendingBit
;;;2381   		Res=USART_ReceiveData(USART2);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       USART_ReceiveData
;;;2382   
;;;2383   		if((USART_RX_STA&0x8000)==0)//接收未完成
000022  4a15              LDR      r2,|L22.120|
000024  b2c1              UXTB     r1,r0                 ;2381
000026  89d0              LDRH     r0,[r2,#0xe]  ; USART_RX_STA
000028  0403              LSLS     r3,r0,#16
00002a  d407              BMI      |L22.60|
;;;2384   		{
;;;2385   		if(USART_RX_STA&0x4000)//接收到了0x0d
;;;2386   		{
;;;2387   			if(Res!=0x0a)
;;;2388   				USART_RX_STA=0;//接收错误,重新开始
;;;2389   			else 
;;;2390   			{
;;;2391   		//		SerialRemoteHandleL(USART_RX_STA,USART_RX_BUF);
;;;2392   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
00002c  4b13              LDR      r3,|L22.124|
00002e  0445              LSLS     r5,r0,#17             ;2385
000030  f04f0400          MOV      r4,#0                 ;2385
000034  d50b              BPL      |L22.78|
000036  290a              CMP      r1,#0xa               ;2387
000038  d001              BEQ      |L22.62|
                  |L22.58|
00003a  81d4              STRH     r4,[r2,#0xe]          ;2388
                  |L22.60|
;;;2393   				USART_RX_STA++;
;;;2394   				USART_RX_CNT = USART_RX_STA;
;;;2395   				USART_RX_STA|=0x8000;	//接收完成了 			  //接收到回车的后字节  置位状态寄存器 
;;;2396   			}
;;;2397   		}
;;;2398   		else //还没收到0X0D
;;;2399   		{	
;;;2400   			if(Res==0x0d)
;;;2401   			{
;;;2402   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
;;;2403   				USART_RX_STA++;	
;;;2404   				USART_RX_STA|=0x4000;					 //接收到回车的前一字节  置位状态寄存器
;;;2405   			}
;;;2406   			else
;;;2407   				{
;;;2408   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
;;;2409   					USART_RX_STA++;									//长度+1 为下一次做准备
;;;2410   				if(USART_RX_STA>(USART_REC_LEN-1))
;;;2411   					USART_RX_STA=0;//接收数据错误,重新开始接收	  
;;;2412   				}		 
;;;2413   			}
;;;2414   		} 
;;;2415   	}
;;;2416   }
00003c  bd70              POP      {r4-r6,pc}
                  |L22.62|
00003e  f3c0040d          UBFX     r4,r0,#0,#14          ;2392
000042  1c40              ADDS     r0,r0,#1              ;2392
000044  5519              STRB     r1,[r3,r4]            ;2392
000046  8210              STRH     r0,[r2,#0x10]         ;2394
000048  f4404000          ORR      r0,r0,#0x8000         ;2395
00004c  e010              B        |L22.112|
                  |L22.78|
00004e  290d              CMP      r1,#0xd               ;2400
000050  d008              BEQ      |L22.100|
000052  f3c0050d          UBFX     r5,r0,#0,#14          ;2408
000056  1c40              ADDS     r0,r0,#1              ;2408
000058  b280              UXTH     r0,r0                 ;2409
00005a  5559              STRB     r1,[r3,r5]            ;2408
00005c  81d0              STRH     r0,[r2,#0xe]          ;2409
00005e  28c7              CMP      r0,#0xc7              ;2410
000060  d8eb              BHI      |L22.58|
000062  bd70              POP      {r4-r6,pc}
                  |L22.100|
000064  f3c0040d          UBFX     r4,r0,#0,#14          ;2402
000068  1c40              ADDS     r0,r0,#1              ;2402
00006a  5519              STRB     r1,[r3,r4]            ;2402
00006c  f4404080          ORR      r0,r0,#0x4000         ;2404
                  |L22.112|
000070  81d0              STRH     r0,[r2,#0xe]          ;2395
000072  bd70              POP      {r4-r6,pc}
;;;2417   void UART2_Send(void)
                          ENDP

                  |L22.116|
                          DCD      0x40004400
                  |L22.120|
                          DCD      ||.data||
                  |L22.124|
                          DCD      ||area_number.31||+0x14

                          AREA ||i.USART3HANDLE||, CODE, READONLY, ALIGN=2

                  USART3HANDLE PROC
;;;213    
;;;214    void USART3HANDLE(void)
000000  b538              PUSH     {r3-r5,lr}
;;;215    {
;;;216    	vu16 crcres;
;;;217    
;;;218    	if(MasterRecbuf[0] == 0x01)
000002  4c28              LDR      r4,|L23.164|
;;;219    	{
;;;220    		if(MasterRecbuf[1] == 0x03)
;;;221    		{
;;;222    			crcres = (MasterRecbuf[8] << 8) + MasterRecbuf[7];
;;;223    			if(crcres == Hardware_CRC(MasterRecbuf,7))
;;;224    			{
;;;225    				 
;;;226    				Para.CPOW_Voltage = (MasterRecbuf[3] << 8) + MasterRecbuf[4];
;;;227    				Para.CCurrent = (MasterRecbuf[5] << 8) + MasterRecbuf[6];
;;;228    				memset(MasterRecbuf,0,sizeof(MasterRecbuf));
;;;229    			}
;;;230    				if(sendwait == 3)
000004  4d28              LDR      r5,|L23.168|
000006  7820              LDRB     r0,[r4,#0]            ;218  ; MasterRecbuf
000008  2801              CMP      r0,#1                 ;218
00000a  d148              BNE      |L23.158|
00000c  7860              LDRB     r0,[r4,#1]            ;220  ; MasterRecbuf
00000e  2803              CMP      r0,#3                 ;220
000010  d002              BEQ      |L23.24|
;;;231    				{
;;;232    					SetPowerModeS();
;;;233    				}
;;;234    				if(sendwait == 2)
;;;235    				{
;;;236    					SetPowerModeC();
;;;237    				}
;;;238    				if(sendwait == 1)
;;;239    				{
;;;240    					SetPowerModeV();
;;;241    				}
;;;242    				if(listsend == 3)
;;;243    				{
;;;244    					SetListPS();
;;;245    				}
;;;246    				if(listsend == 2)
;;;247    				{
;;;248    					SetListPC();
;;;249    				}
;;;250    				if(listsend == 1)
;;;251    				{
;;;252    					SetListPV();
;;;253    				}
;;;254    		}else if(MasterRecbuf[1] == 0x06){
000012  2806              CMP      r0,#6
000014  d03c              BEQ      |L23.144|
000016  e042              B        |L23.158|
                  |L23.24|
000018  79e1              LDRB     r1,[r4,#7]            ;222  ; MasterRecbuf
00001a  7a20              LDRB     r0,[r4,#8]            ;222  ; MasterRecbuf
00001c  eb012000          ADD      r0,r1,r0,LSL #8       ;222
000020  f8ad0000          STRH     r0,[sp,#0]            ;222
000024  2107              MOVS     r1,#7                 ;223
000026  481f              LDR      r0,|L23.164|
000028  f7fffffe          BL       Hardware_CRC
00002c  f8bd1000          LDRH     r1,[sp,#0]            ;223
000030  4288              CMP      r0,r1                 ;223
000032  d10e              BNE      |L23.82|
000034  7920              LDRB     r0,[r4,#4]            ;226  ; MasterRecbuf
000036  78e1              LDRB     r1,[r4,#3]            ;226  ; MasterRecbuf
000038  eb002101          ADD      r1,r0,r1,LSL #8       ;226
00003c  481b              LDR      r0,|L23.172|
00003e  6281              STR      r1,[r0,#0x28]         ;226  ; Para
000040  79a1              LDRB     r1,[r4,#6]            ;227  ; MasterRecbuf
000042  7962              LDRB     r2,[r4,#5]            ;227  ; MasterRecbuf
000044  eb012102          ADD      r1,r1,r2,LSL #8       ;227
000048  6301              STR      r1,[r0,#0x30]         ;227  ; Para
00004a  2180              MOVS     r1,#0x80              ;228
00004c  4815              LDR      r0,|L23.164|
00004e  f7fffffe          BL       __aeabi_memclr
                  |L23.82|
000052  7a28              LDRB     r0,[r5,#8]            ;230  ; sendwait
000054  2803              CMP      r0,#3                 ;230
000056  d101              BNE      |L23.92|
000058  f7fffffe          BL       SetPowerModeS
                  |L23.92|
00005c  7a28              LDRB     r0,[r5,#8]            ;234  ; sendwait
00005e  2802              CMP      r0,#2                 ;234
000060  d101              BNE      |L23.102|
000062  f7fffffe          BL       SetPowerModeC
                  |L23.102|
000066  7a28              LDRB     r0,[r5,#8]            ;238  ; sendwait
000068  2801              CMP      r0,#1                 ;238
00006a  d101              BNE      |L23.112|
00006c  f7fffffe          BL       SetPowerModeV
                  |L23.112|
000070  7a68              LDRB     r0,[r5,#9]            ;242  ; listsend
000072  2803              CMP      r0,#3                 ;242
000074  d101              BNE      |L23.122|
000076  f7fffffe          BL       SetListPS
                  |L23.122|
00007a  7a68              LDRB     r0,[r5,#9]            ;246  ; listsend
00007c  2802              CMP      r0,#2                 ;246
00007e  d101              BNE      |L23.132|
000080  f7fffffe          BL       SetListPC
                  |L23.132|
000084  7a68              LDRB     r0,[r5,#9]            ;250  ; listsend
000086  2801              CMP      r0,#1                 ;250
000088  d109              BNE      |L23.158|
00008a  f7fffffe          BL       SetListPV
00008e  e006              B        |L23.158|
                  |L23.144|
;;;255    			memset(MasterRecbuf,0,sizeof(MasterRecbuf));
000090  2180              MOVS     r1,#0x80
000092  4804              LDR      r0,|L23.164|
000094  f7fffffe          BL       __aeabi_memclr
;;;256    			watchtest ++;
000098  6d68              LDR      r0,[r5,#0x54]  ; watchtest
00009a  1c40              ADDS     r0,r0,#1
00009c  6568              STR      r0,[r5,#0x54]  ; watchtest
                  |L23.158|
;;;257    		}
;;;258    	}	
;;;259    
;;;260    	
;;;261    	USART3_Recive_flg = 0;
00009e  2000              MOVS     r0,#0
0000a0  7068              STRB     r0,[r5,#1]
;;;262    }
0000a2  bd38              POP      {r3-r5,pc}
;;;263    
                          ENDP

                  |L23.164|
                          DCD      ||area_number.31||+0x15c
                  |L23.168|
                          DCD      ||.data||
                  |L23.172|
                          DCD      Para

                          AREA ||i.USART3WriteDMA||, CODE, READONLY, ALIGN=2

                  USART3WriteDMA PROC
;;;2317   
;;;2318   void USART3WriteDMA(u16 len)
000000  b570              PUSH     {r4-r6,lr}
;;;2319   {
000002  4605              MOV      r5,r0
;;;2320       USART_ClearFlag(USART3, USART_FLAG_TC);     //串口发送准备
000004  2140              MOVS     r1,#0x40
000006  4809              LDR      r0,|L24.44|
000008  f7fffffe          BL       USART_ClearFlag
;;;2321   	DMA_Cmd(DMA1_Stream3, DISABLE);//关闭DMA 数据流3
00000c  4c08              LDR      r4,|L24.48|
00000e  2100              MOVS     r1,#0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       DMA_Cmd
;;;2322       DMA_SetCurrDataCounter(DMA1_Stream3,len);//设置DMA发生长度
000016  4629              MOV      r1,r5
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       DMA_SetCurrDataCounter
;;;2323   	DMA_Cmd(DMA1_Stream3, ENABLE);// 打开DMA 数据流3
00001e  4620              MOV      r0,r4
000020  e8bd4070          POP      {r4-r6,lr}
000024  2101              MOVS     r1,#1
000026  f7ffbffe          B.W      DMA_Cmd
;;;2324      
;;;2325   }
;;;2326   
                          ENDP

00002a  0000              DCW      0x0000
                  |L24.44|
                          DCD      0x40004800
                  |L24.48|
                          DCD      0x40026058

                          AREA ||i.USART3_Configuration||, CODE, READONLY, ALIGN=2

                  USART3_Configuration PROC
;;;2264   
;;;2265   void USART3_Configuration()//???????
000000  b570              PUSH     {r4-r6,lr}
;;;2266   {  
;;;2267       GPIO_InitTypeDef GPIO_InitStructure;
;;;2268   	USART_InitTypeDef USART_InitStructure;
;;;2269   	
;;;2270   	/* config USART1 clock */
;;;2271   	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
000002  2101              MOVS     r1,#1
000004  b088              SUB      sp,sp,#0x20           ;2266
000006  0488              LSLS     r0,r1,#18
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;2272   //    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE); //?? GPIOA ??
;;;2273       
;;;2274   	GPIO_PinAFConfig(GPIOD,GPIO_PinSource8,GPIO_AF_USART3);
00000c  4c2a              LDR      r4,|L25.184|
00000e  2207              MOVS     r2,#7
000010  2108              MOVS     r1,#8
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2275   	GPIO_PinAFConfig(GPIOD,GPIO_PinSource9,GPIO_AF_USART3);
000018  2207              MOVS     r2,#7
00001a  2109              MOVS     r1,#9
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2276       
;;;2277   
;;;2278       
;;;2279       
;;;2280   	/* USART1 GPIO config */
;;;2281   	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;2282   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
000022  15a0              ASRS     r0,r4,#22
;;;2283   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000024  2502              MOVS     r5,#2
000026  9004              STR      r0,[sp,#0x10]
000028  f88d5014          STRB     r5,[sp,#0x14]
;;;2284   //     GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //??????
;;;2285   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00002c  f88d5015          STRB     r5,[sp,#0x15]
;;;2286   	GPIO_Init(GPIOD, &GPIO_InitStructure);    
000030  a904              ADD      r1,sp,#0x10
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       GPIO_Init
;;;2287   	/* Configure USART1 Rx (PA.10) as input floating */
;;;2288   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
000038  1560              ASRS     r0,r4,#21
;;;2289       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00003a  9004              STR      r0,[sp,#0x10]
00003c  f88d5014          STRB     r5,[sp,#0x14]
;;;2290   	GPIO_Init(GPIOD, &GPIO_InitStructure);
000040  a904              ADD      r1,sp,#0x10
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       GPIO_Init
;;;2291       
;;;2292   
;;;2293   	
;;;2294   	/* USART1 mode config */
;;;2295   	USART_InitStructure.USART_BaudRate = 9600;
;;;2296   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000048  2400              MOVS     r4,#0
00004a  f44f5016          MOV      r0,#0x2580            ;2295
00004e  9000              STR      r0,[sp,#0]
;;;2297   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2298   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000050  f8ad4008          STRH     r4,[sp,#8]
;;;2299   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2300   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000054  200c              MOVS     r0,#0xc
;;;2301   	USART_Init(USART3, &USART_InitStructure);
000056  4e19              LDR      r6,|L25.188|
000058  f8ad4004          STRH     r4,[sp,#4]            ;2296
00005c  f8ad000a          STRH     r0,[sp,#0xa]          ;2300
000060  f8ad4006          STRH     r4,[sp,#6]            ;2297
000064  f8ad400c          STRH     r4,[sp,#0xc]          ;2299
000068  4669              MOV      r1,sp
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       USART_Init
;;;2302       
;;;2303   
;;;2304   	
;;;2305   	/******????????******************/
;;;2306   	USART_ITConfig(USART3, USART_IT_IDLE, ENABLE);
000070  2201              MOVS     r2,#1
000072  f2404124          MOV      r1,#0x424
000076  4630              MOV      r0,r6
000078  f7fffffe          BL       USART_ITConfig
00007c  f44f60e0          MOV      r0,#0x700
000080  f7fffffe          BL       NVIC_PriorityGroupConfig
000084  2027              MOVS     r0,#0x27
000086  f88d0018          STRB     r0,[sp,#0x18]
00008a  f88d4019          STRB     r4,[sp,#0x19]
00008e  f88d501a          STRB     r5,[sp,#0x1a]
000092  2001              MOVS     r0,#1
000094  f88d001b          STRB     r0,[sp,#0x1b]
000098  a806              ADD      r0,sp,#0x18
00009a  f7fffffe          BL       NVIC_Init
;;;2307   	USART3_NVIC_Config();//??????
;;;2308   	USART3_DMA_init();
00009e  f7fffffe          BL       USART3_DMA_init
;;;2309   	USART_Cmd(USART3, ENABLE);//????1
0000a2  2101              MOVS     r1,#1
0000a4  4630              MOV      r0,r6
0000a6  f7fffffe          BL       USART_Cmd
;;;2310       USART_ClearFlag(USART3, USART_FLAG_TC);
0000aa  2140              MOVS     r1,#0x40
0000ac  4630              MOV      r0,r6
0000ae  f7fffffe          BL       USART_ClearFlag
;;;2311       
;;;2312     
;;;2313       
;;;2314   	
;;;2315   }
0000b2  b008              ADD      sp,sp,#0x20
0000b4  bd70              POP      {r4-r6,pc}
;;;2316   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L25.184|
                          DCD      0x40020c00
                  |L25.188|
                          DCD      0x40004800

                          AREA ||i.USART3_DMA_init||, CODE, READONLY, ALIGN=2

                  USART3_DMA_init PROC
;;;2165   
;;;2166   static void USART3_DMA_init(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2167   {
;;;2168       DMA_InitTypeDef DMA_InitStructure;
;;;2169       NVIC_InitTypeDef NVIC_InitStructure;
;;;2170   	
;;;2171   	//串口3使用DMA1 发送为数据流3  通道4   
;;;2172       //F4与F1DMA多了一个数据流的说法详细参考中文数据手册DMA 表35
;;;2173       /* 1.使能DMA2时钟 */
;;;2174   	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
000004  2101              MOVS     r1,#1
000006  b091              SUB      sp,sp,#0x44           ;2167
000008  0548              LSLS     r0,r1,#21
00000a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;2175   	
;;;2176   	//串口发送DMA配置
;;;2177       /* 2.配置使用DMA发送数据 */
;;;2178       DMA_DeInit(DMA1_Stream3); //DMA1 数据流 3
00000e  f8dfa0d8          LDR      r10,|L26.232|
000012  4650              MOV      r0,r10
000014  f7fffffe          BL       DMA_DeInit
;;;2179       DMA_InitStructure.DMA_Channel = DMA_Channel_4;  /* 配置DMA1通道4 */
000018  f04f6600          MOV      r6,#0x8000000
;;;2180       DMA_InitStructure.DMA_PeripheralBaseAddr  = (uint32_t)(&(USART3->DR)); /* 目的 */
;;;2181       DMA_InitStructure.DMA_Memory0BaseAddr     = (uint32_t)MasterSendbuf; /*源内存地址*/
00001c  4834              LDR      r0,|L26.240|
00001e  4f33              LDR      r7,|L26.236|
000020  9600              STR      r6,[sp,#0]
000022  e9cd7001          STRD     r7,r0,[sp,#4]
;;;2182       DMA_InitStructure.DMA_DIR                 = DMA_DIR_MemoryToPeripheral;  /*方向内            
;;;2183                                                                               存到外设*/
;;;2184       DMA_InitStructure.DMA_BufferSize          = MAXRxTxLen;                    
;;;2185       /* 长度 */                  
;;;2186       DMA_InitStructure.DMA_PeripheralInc       = DMA_PeripheralInc_Disable;    
000026  2400              MOVS     r4,#0
000028  2040              MOVS     r0,#0x40              ;2182
00002a  f04f0880          MOV      r8,#0x80              ;2184
;;;2187       /* 外设地址是否自增 */
;;;2188       DMA_InitStructure.DMA_MemoryInc           = DMA_MemoryInc_Enable;        
00002e  f44f6980          MOV      r9,#0x400
000032  9003              STR      r0,[sp,#0xc]
000034  e9cd8404          STRD     r8,r4,[sp,#0x10]
000038  e9cd9406          STRD     r9,r4,[sp,#0x18]
;;;2189       /* 内存地址是否自增 */
;;;2190       DMA_InitStructure.DMA_PeripheralDataSize  = DMA_PeripheralDataSize_Byte;  
;;;2191       /* 目的数据带宽 */
;;;2192       DMA_InitStructure.DMA_MemoryDataSize      = DMA_MemoryDataSize_Byte;      
;;;2193       /* 源数据宽度 */
;;;2194       DMA_InitStructure.DMA_Mode                = DMA_Mode_Normal;             
;;;2195       /* 单次传输模式/循环传输模式 */
;;;2196       DMA_InitStructure.DMA_Priority            = DMA_Priority_High;             
00003c  02c0              LSLS     r0,r0,#11
00003e  9408              STR      r4,[sp,#0x20]
000040  e9cd4009          STRD     r4,r0,[sp,#0x24]
;;;2197       /* DMA优先级 */
;;;2198       DMA_InitStructure.DMA_FIFOMode            = DMA_FIFOMode_Disable;          
;;;2199       /* FIFO模式/直接模式 */
;;;2200       DMA_InitStructure.DMA_FIFOThreshold       = DMA_FIFOThreshold_HalfFull; 
000044  2501              MOVS     r5,#1
000046  e9cd450b          STRD     r4,r5,[sp,#0x2c]
;;;2201       /* FIFO大小 */
;;;2202       DMA_InitStructure.DMA_MemoryBurst         = DMA_MemoryBurst_Single;      
;;;2203        /* 单次传输 */
;;;2204       DMA_InitStructure.DMA_PeripheralBurst     = DMA_PeripheralBurst_Single;
00004a  940d              STR      r4,[sp,#0x34]
;;;2205       /* 3. 配置DMA */
;;;2206       DMA_Init(DMA1_Stream3, &DMA_InitStructure);
00004c  4669              MOV      r1,sp
00004e  4650              MOV      r0,r10
000050  940e              STR      r4,[sp,#0x38]
000052  f7fffffe          BL       DMA_Init
;;;2207       /* 4.使能DMA中断 */
;;;2208       DMA_ITConfig(DMA1_Stream3, DMA_IT_TC, ENABLE);
000056  2201              MOVS     r2,#1
000058  2110              MOVS     r1,#0x10
00005a  4650              MOV      r0,r10
00005c  f7fffffe          BL       DMA_ITConfig
;;;2209       /* 5.使能串口的DMA发送接口 */
;;;2210       USART_DMACmd(USART3, USART_DMAReq_Tx, ENABLE);
000060  f1a70b04          SUB      r11,r7,#4
000064  2201              MOVS     r2,#1
000066  2180              MOVS     r1,#0x80
000068  4658              MOV      r0,r11
00006a  f7fffffe          BL       USART_DMACmd
;;;2211       /* 6. 配置DMA中断优先级 */
;;;2212       NVIC_InitStructure.NVIC_IRQChannel                   = DMA1_Stream3_IRQn;  
00006e  200e              MOVS     r0,#0xe
000070  f88d003c          STRB     r0,[sp,#0x3c]
;;;2213       //  DMA发生中断         
;;;2214       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;          
000074  f88d403d          STRB     r4,[sp,#0x3d]
;;;2215       NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 4; 
000078  2004              MOVS     r0,#4
00007a  f88d003e          STRB     r0,[sp,#0x3e]
;;;2216       NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;
00007e  f88d503f          STRB     r5,[sp,#0x3f]
;;;2217       NVIC_Init(&NVIC_InitStructure);
000082  a80f              ADD      r0,sp,#0x3c
000084  f7fffffe          BL       NVIC_Init
;;;2218   	
;;;2219       /* 7.不使能DMA */                  
;;;2220       DMA_Cmd(DMA1_Stream3, DISABLE);// 数据流2
000088  2100              MOVS     r1,#0
00008a  4650              MOV      r0,r10
00008c  f7fffffe          BL       DMA_Cmd
;;;2221   	//************************DMA接收***********************//
;;;2222   	/* 2.配置使用DMA接收数据 */
;;;2223       DMA_DeInit(DMA1_Stream1); 
000090  f8dfa054          LDR      r10,|L26.232|
000094  f1aa0a30          SUB      r10,r10,#0x30
000098  4650              MOV      r0,r10
00009a  f7fffffe          BL       DMA_DeInit
;;;2224       DMA_InitStructure.DMA_Channel             = DMA_Channel_4;               
;;;2225       /* 配置DMA通道 */
;;;2226       DMA_InitStructure.DMA_PeripheralBaseAddr  = (uint32_t)(&(USART3->DR));   
;;;2227       /* 源地址 */
;;;2228       DMA_InitStructure.DMA_Memory0BaseAddr     = (uint32_t)MasterRecbuf;    
00009e  4814              LDR      r0,|L26.240|
0000a0  a902              ADD      r1,sp,#8
0000a2  3080              ADDS     r0,r0,#0x80
0000a4  e8810111          STM      r1,{r0,r4,r8}
0000a8  e9cd4905          STRD     r4,r9,[sp,#0x14]
;;;2229       /* 目标地址 */
;;;2230       DMA_InitStructure.DMA_DIR                 = DMA_DIR_PeripheralToMemory;    
;;;2231       /* 方向外设向内存  */
;;;2232       DMA_InitStructure.DMA_BufferSize          = MAXRxTxLen;                    		
;;;2233       /* 长度 */                  
;;;2234       DMA_InitStructure.DMA_PeripheralInc       = DMA_PeripheralInc_Disable;    
;;;2235         /* 外设地址是否自增 */
;;;2236       DMA_InitStructure.DMA_MemoryInc           = DMA_MemoryInc_Enable;         
;;;2237       /* 内存地址是否自增 */
;;;2238       DMA_InitStructure.DMA_PeripheralDataSize  = DMA_MemoryDataSize_Byte;     
;;;2239       /* 目的数据带宽 */
;;;2240       DMA_InitStructure.DMA_MemoryDataSize      = DMA_MemoryDataSize_Byte;      
;;;2241       /* 源数据宽度 */
;;;2242       DMA_InitStructure.DMA_Mode                = DMA_Mode_Circular;             
0000ac  0228              LSLS     r0,r5,#8
0000ae  e9cd4008          STRD     r4,r0,[sp,#0x20]
;;;2243       /*循环传输模式 */
;;;2244       DMA_InitStructure.DMA_Priority            = DMA_Priority_VeryHigh;        
0000b2  a90a              ADD      r1,sp,#0x28
0000b4  9407              STR      r4,[sp,#0x1c]         ;2242
0000b6  f44f3040          MOV      r0,#0x30000
0000ba  e8810031          STM      r1,{r0,r4,r5}
;;;2245       /* DMA优先级 */
;;;2246       DMA_InitStructure.DMA_FIFOMode            = DMA_FIFOMode_Disable;         
;;;2247        /* FIFO模式/直接模式 */
;;;2248       DMA_InitStructure.DMA_FIFOThreshold       = DMA_FIFOThreshold_HalfFull; 
;;;2249       /* FIFO大小 */
;;;2250       DMA_InitStructure.DMA_MemoryBurst         = DMA_MemoryBurst_Single;       
;;;2251       /* 单次传输 */
;;;2252       DMA_InitStructure.DMA_PeripheralBurst     = DMA_PeripheralBurst_Single;
0000be  940d              STR      r4,[sp,#0x34]
;;;2253       /* 3. 配置DMA */
;;;2254       DMA_Init(DMA1_Stream1, &DMA_InitStructure);
0000c0  4669              MOV      r1,sp
0000c2  4650              MOV      r0,r10
0000c4  940e              STR      r4,[sp,#0x38]
0000c6  e9cd6700          STRD     r6,r7,[sp,#0]
0000ca  f7fffffe          BL       DMA_Init
;;;2255       /* 4.由于接收不需要DMA中断，故不设置DMA中断 */
;;;2256       /* 5.使能串口的DMA接收 */
;;;2257       USART_DMACmd(USART3,USART_DMAReq_Rx,ENABLE);
0000ce  2201              MOVS     r2,#1
0000d0  2140              MOVS     r1,#0x40
0000d2  4658              MOV      r0,r11
0000d4  f7fffffe          BL       USART_DMACmd
;;;2258       /* 6. 由于接收不需要DMA中断，故不能配置DMA中断优先级 */
;;;2259       /* 7.使能DMA */ 
;;;2260       DMA_Cmd(DMA1_Stream1,ENABLE);
0000d8  2101              MOVS     r1,#1
0000da  4650              MOV      r0,r10
0000dc  f7fffffe          BL       DMA_Cmd
;;;2261   }
0000e0  b011              ADD      sp,sp,#0x44
0000e2  e8bd8ff0          POP      {r4-r11,pc}
;;;2262   
                          ENDP

0000e6  0000              DCW      0x0000
                  |L26.232|
                          DCD      0x40026058
                  |L26.236|
                          DCD      0x40004804
                  |L26.240|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;2342   
;;;2343   void USART3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2344   {
;;;2345       u8 Clear = Clear;
;;;2346       u16 num = 0;
;;;2347            
;;;2348       if(USART_GetITStatus(USART3, USART_IT_IDLE) != RESET)
000002  4c18              LDR      r4,|L27.100|
000004  f2404124          MOV      r1,#0x424
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USART_GetITStatus
00000e  2800              CMP      r0,#0
000010  d024              BEQ      |L27.92|
;;;2349       {
;;;2350           Clear = USART3->SR;  //读SR寄存器清除                                                            
000012  8820              LDRH     r0,[r4,#0]
;;;2351          
;;;2352           Clear = USART3->DR;  //读DR寄存器清除                                                        
000014  1d20              ADDS     r0,r4,#4
000016  8800              LDRH     r0,[r0,#0]
;;;2353           DMA_Cmd(DMA1_Stream1,DISABLE);   //关闭DMA
000018  4d13              LDR      r5,|L27.104|
00001a  2100              MOVS     r1,#0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       DMA_Cmd
;;;2354   		DMA_ClearFlag(DMA1_Stream1,DMA_FLAG_TCIF2);
000022  f04f5181          MOV      r1,#0x10200000
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       DMA_ClearFlag
;;;2355           num = DMA_GetCurrDataCounter(DMA1_Stream1); //得到真正接收数据个数
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       DMA_GetCurrDataCounter
;;;2356           if(num < MAXRxTxLen)
;;;2357           {
;;;2358               USART3_Recive_leng   = MAXRxTxLen - num;
000032  4c0e              LDR      r4,|L27.108|
000034  2880              CMP      r0,#0x80              ;2356
000036  d212              BCS      |L27.94|
000038  f1c00080          RSB      r0,r0,#0x80
00003c  b2c0              UXTB     r0,r0
00003e  7020              STRB     r0,[r4,#0]
;;;2359           }else
;;;2360           {
;;;2361               USART3_Recive_leng = MAXRxTxLen;
;;;2362           }
;;;2363            
;;;2364           if(USART3_Recive_leng > MAXRxTxLen)
000040  2880              CMP      r0,#0x80
000042  d901              BLS      |L27.72|
;;;2365           {
;;;2366               USART3_Recive_leng = 0;  //避免接收数据超界                                               
000044  2000              MOVS     r0,#0
                  |L27.70|
000046  7020              STRB     r0,[r4,#0]            ;2361
                  |L27.72|
;;;2367           }
;;;2368           DMA_SetCurrDataCounter(DMA1_Stream1,MAXRxTxLen);//设置DMA传输长度                                                        
000048  2180              MOVS     r1,#0x80
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       DMA_SetCurrDataCounter
;;;2369           DMA_Cmd(DMA1_Stream1,ENABLE);  //开启DMA
000050  2101              MOVS     r1,#1
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       DMA_Cmd
;;;2370           USART3_Recive_flg = 1;    //数据接收成功                                                  
000058  2001              MOVS     r0,#1
00005a  7060              STRB     r0,[r4,#1]
                  |L27.92|
;;;2371           
;;;2372       } 
;;;2373   }
00005c  bd70              POP      {r4-r6,pc}
                  |L27.94|
00005e  2080              MOVS     r0,#0x80              ;2361
000060  e7f1              B        |L27.70|
;;;2374   
                          ENDP

000062  0000              DCW      0x0000
                  |L27.100|
                          DCD      0x40004800
                  |L27.104|
                          DCD      0x40026028
                  |L27.108|
                          DCD      ||.data||

                          AREA ||i.USART_Configuration||, CODE, READONLY, ALIGN=2

                  USART_Configuration PROC
;;;2059   
;;;2060   void USART_Configuration(void)//串口初始化函数
000000  b570              PUSH     {r4-r6,lr}
;;;2061   {  
000002  b088              SUB      sp,sp,#0x20
;;;2062   	GPIO_InitTypeDef GPIO_InitStructure;
;;;2063   	USART_InitTypeDef USART_InitStructure;
;;;2064   	
;;;2065   	/* config USART1 clock */
;;;2066   	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
000004  2101              MOVS     r1,#1
000006  2010              MOVS     r0,#0x10
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;2067   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1);
00000c  4e2a              LDR      r6,|L28.184|
00000e  2207              MOVS     r2,#7
000010  2109              MOVS     r1,#9
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2068   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1);
000018  2207              MOVS     r2,#7
00001a  210a              MOVS     r1,#0xa
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2069   	/* USART1 GPIO config */
;;;2070   	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;2071   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
;;;2072   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000022  2502              MOVS     r5,#2
000024  1570              ASRS     r0,r6,#21             ;2071
000026  f88d5004          STRB     r5,[sp,#4]
;;;2073   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
00002c  9000              STR      r0,[sp,#0]            ;2072
00002e  f88d4006          STRB     r4,[sp,#6]
;;;2074   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f88d5005          STRB     r5,[sp,#5]
;;;2075   	GPIO_Init(GPIOA, &GPIO_InitStructure);    
000036  4669              MOV      r1,sp
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GPIO_Init
;;;2076   	/* Configure USART1 Rx (PA.10) as input floating */
;;;2077   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
00003e  0268              LSLS     r0,r5,#9
;;;2078   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000040  9000              STR      r0,[sp,#0]
000042  f88d5004          STRB     r5,[sp,#4]
;;;2079   	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;2080   	
;;;2081   	/* USART1 mode config */
;;;2082   	USART_InitStructure.USART_BaudRate = 9600;
00004e  f44f5016          MOV      r0,#0x2580
;;;2083   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000052  9002              STR      r0,[sp,#8]
;;;2084   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2085   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000054  f8ad4010          STRH     r4,[sp,#0x10]
;;;2086   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2087   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
;;;2088   	USART_Init(USART1, &USART_InitStructure);
00005a  4d18              LDR      r5,|L28.188|
00005c  f8ad400c          STRH     r4,[sp,#0xc]          ;2083
000060  f8ad0012          STRH     r0,[sp,#0x12]         ;2087
000064  f8ad400e          STRH     r4,[sp,#0xe]          ;2084
000068  f8ad4014          STRH     r4,[sp,#0x14]         ;2086
00006c  a902              ADD      r1,sp,#8
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       USART_Init
;;;2089   	
;;;2090   	/******使能串口接收中断******************/
;;;2091   	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	
000074  2201              MOVS     r2,#1
000076  f2405125          MOV      r1,#0x525
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_ITConfig
;;;2092   	USART_Cmd(USART1, ENABLE);//使能串口1
000080  2101              MOVS     r1,#1
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USART_Cmd
;;;2093   	USART_ClearFlag(USART1, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       USART_ClearFlag
000090  f44f60e0          MOV      r0,#0x700
000094  f7fffffe          BL       NVIC_PriorityGroupConfig
000098  2025              MOVS     r0,#0x25
00009a  f88d0018          STRB     r0,[sp,#0x18]
00009e  f88d4019          STRB     r4,[sp,#0x19]
0000a2  2004              MOVS     r0,#4
0000a4  f88d001a          STRB     r0,[sp,#0x1a]
0000a8  2001              MOVS     r0,#1
0000aa  f88d001b          STRB     r0,[sp,#0x1b]
0000ae  a806              ADD      r0,sp,#0x18
0000b0  f7fffffe          BL       NVIC_Init
;;;2094     
;;;2095   	USART1_NVIC_Config();//串口中断配置
;;;2096   }			
0000b4  b008              ADD      sp,sp,#0x20
0000b6  bd70              POP      {r4-r6,pc}
;;;2097   
                          ENDP

                  |L28.184|
                          DCD      0x40020000
                  |L28.188|
                          DCD      0x40011000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UART_Buffer_Rece
                          %        16

                          AREA ||area_number.31||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.31||, ||.bss||
                  UART_Buffer_Send
                          %        20
                  USART_RX_BUF
                          %        200
                  MasterSendbuf
                          %        128
                  MasterRecbuf
                          %        128

                          AREA ||.data||, DATA, ALIGN=2

                  USART3_Recive_leng
000000  00                DCB      0x00
                  USART3_Recive_flg
000001  00                DCB      0x00
                  UART_Buffer_Send_pointer
000002  00                DCB      0x00
                  |symbol_number.106|
000003  00                DCB      0x00
                  Transmit_BUFFERsize
000004  00                DCB      0x00
                  MODE
000005  00                DCB      0x00
                  mainswitch
000006  00                DCB      0x00
                  Rraly
000007  00                DCB      0x00
                  sendwait
000008  00                DCB      0x00
                  listsend
000009  00                DCB      0x00
                  listocwatch
00000a  00                DCB      0x00
                  listpowwatch1
00000b  00                DCB      0x00
                  listpowwatch2
00000c  0000              DCB      0x00,0x00
                  USART_RX_STA
00000e  0000              DCW      0x0000
                  USART_RX_CNT
000010  0000              DCW      0x0000
000012  0000              DCB      0x00,0x00
                  ||x1||
                          DCD      0x00000000
                  ||y1||
                          DCD      0x00000000
                  ||x2||
                          DCD      0x00000000
                  ||y2||
                          DCD      0x00000000
                  ||x3||
                          DCD      0x00000000
                  ||y3||
                          DCD      0x00000000
                  ||x4||
                          DCD      0x00000000
                  ||y4||
                          DCD      0x00000000
                  ||x5||
                          DCD      0x00000000
                  ||y5||
                          DCD      0x00000000
                  ||x6||
                          DCD      0x00000000
                  ||y6||
                          DCD      0x00000000
                  ||x7||
                          DCD      0x00000000
                  ||y7||
                          DCD      0x00000000
                  ||x8||
                          DCD      0x00000000
                  ||y8||
                          DCD      0x00000000
                  watchtest
                          DCD      0x00000000
                  CmdStr
000058  53544154          DCB      0x53,0x54,0x41,0x54
00005c  55535f00          DCB      0x55,0x53,0x5f,0x00
000060  004d4f44          DCB      0x00,0x4d,0x4f,0x44
000064  5f000000          DCB      0x5f,0x00,0x00,0x00
000068  00005452          DCB      0x00,0x00,0x54,0x52
00006c  49475f00          DCB      0x49,0x47,0x5f,0x00
000070  00000053          DCB      0x00,0x00,0x00,0x53
000074  45545041          DCB      0x45,0x54,0x50,0x41
000078  52415f00          DCB      0x52,0x41,0x5f,0x00
00007c  5345544c          DCB      0x53,0x45,0x54,0x4c
000080  4953545f          DCB      0x49,0x53,0x54,0x5f
000084  004f5052          DCB      0x00,0x4f,0x50,0x52
000088  45534554          DCB      0x45,0x53,0x45,0x54
00008c  5f00504f          DCB      0x5f,0x00,0x50,0x4f
000090  57495f00          DCB      0x57,0x49,0x5f,0x00
000094  00000041          DCB      0x00,0x00,0x00,0x41
000098  4443565f          DCB      0x44,0x43,0x56,0x5f
00009c  00000000          DCB      0x00,0x00,0x00,0x00
0000a0  4c4f5749          DCB      0x4c,0x4f,0x57,0x49
0000a4  5f000000          DCB      0x5f,0x00,0x00,0x00
0000a8  00484f52          DCB      0x00,0x48,0x4f,0x52
0000ac  4c5f0000          DCB      0x4c,0x5f,0x00,0x00
0000b0  00004c56          DCB      0x00,0x00,0x4c,0x56
0000b4  4c5f0000          DCB      0x4c,0x5f,0x00,0x00
0000b8  00000053          DCB      0x00,0x00,0x00,0x53
0000bc  57495443          DCB      0x57,0x49,0x54,0x43
0000c0  485f0000          DCB      0x48,0x5f,0x00,0x00
0000c4  43414c56          DCB      0x43,0x41,0x4c,0x56
0000c8  5f000000          DCB      0x5f,0x00,0x00,0x00
0000cc  0043414c          DCB      0x00,0x43,0x41,0x4c
0000d0  495f0000          DCB      0x49,0x5f,0x00,0x00
0000d4  00004341          DCB      0x00,0x00,0x43,0x41
0000d8  4c525f00          DCB      0x4c,0x52,0x5f,0x00
0000dc  00000044          DCB      0x00,0x00,0x00,0x44
0000e0  41435f00          DCB      0x41,0x43,0x5f,0x00
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
0000e8  4f564552          DCB      0x4f,0x56,0x45,0x52
0000ec  5f000000          DCB      0x5f,0x00,0x00,0x00
0000f0  0054454d          DCB      0x00,0x54,0x45,0x4d
0000f4  505f0000          DCB      0x50,0x5f,0x00,0x00
0000f8  0000424f          DCB      0x00,0x00,0x42,0x4f
0000fc  4f545f00          DCB      0x4f,0x54,0x5f,0x00
000100  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.34||, DATA, ALIGN=0

                          EXPORTAS ||area_number.34||, ||.data||
                  UART_Buffer_Size
000000  00                DCB      0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  t_USART
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.data||
                  powsetdelay
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\drive\\usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REV16|
#line 129 "E:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_usart_c_7cc17ae7____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REVSH|
#line 144
|__asm___7_usart_c_7cc17ae7____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
