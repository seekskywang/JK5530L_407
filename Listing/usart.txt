; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\usart.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\usart.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=525 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\usart.crf --no_multibyte_chars ..\drive\usart.c]
                          THUMB

                          AREA ||i.CalHandle||, CODE, READONLY, ALIGN=2

                  CalHandle PROC
;;;497    //校准处理
;;;498    void CalHandle(u8 mode,u8 range,u32 data)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;499    {
;;;500    	if(mode == 0)//测量电压
;;;501    	{
;;;502    		if(range == 0)//低档位低段
;;;503    		{
;;;504    			calflag = 1;
;;;505    			LOAD_V_SW = 0;
;;;506    			x1 = Vmon_Load_value;
000004  4dfc              LDR      r5,|L1.1016|
;;;507    			y1 = data;
;;;508    		}else if(range == 1){//低档位高段
;;;509    			x2 = Vmon_Load_value;
;;;510    			y2 = data;
;;;511    			CalPara.TestLV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;512    			CalPara.OffsetLV[0] = (float)y2 - CalPara.TestLV[0]*(float)x2;
;;;513    			
;;;514    			Flag_DAC_OFF=0;
000006  f8dfc3f8          LDR      r12,|L1.1024|
00000a  4614              MOV      r4,r2                 ;499
00000c  2300              MOVS     r3,#0                 ;499
00000e  f8dc2000          LDR      r2,[r12,#0]
000012  4ef7              LDR      r6,|L1.1008|
000014  f8df93dc          LDR      r9,|L1.1012|
000018  f8df83e0          LDR      r8,|L1.1020|
;;;515    			calflag = 0;
;;;516    		}else if(range == 2){//高档位低段
;;;517    			calflag = 1;
;;;518    			LOAD_V_SW = 1;
;;;519    			x1 = Vmon_Load_value;
;;;520    			y1 = data;
;;;521    		}else if(range == 3){//高档位高段
;;;522    			
;;;523    			x2 = Vmon_Load_value;
;;;524    			y2 = data;
;;;525    			CalPara.TestLV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;526    			CalPara.OffsetLV[1] = (float)y2 - CalPara.TestLV[1]*(float)x2;
;;;527    				//参数写进FLASH
;;;528    			Flag_DAC_OFF=0;
;;;529    			calflag = 0;
;;;530    		}else if(range == 4){//电源控制电压和测量1
;;;531    			calflag = 1;
;;;532    			Contr_Voltage = 3500;
00001c  f8dfe3e4          LDR      lr,|L1.1028|
;;;533    			Contr_Current = 5000;
000020  f8dfb3e4          LDR      r11,|L1.1032|
;;;534    			OnOff_GPOI_ResetSet(0,1);
;;;535    		}else if(range == 5){//电源控制电压和测量2
;;;536    			x1 = data;
;;;537    			y1 = Contr_Voltage;
;;;538    			x3 = Vmon_POWE_value;
;;;539    			y3 = data;
;;;540    			Contr_Voltage = 10000;
;;;541    			Contr_Current = 5000;
;;;542    		}else if(range == 6){//电源控制电压和测量3
;;;543    			x2 = data;
;;;544    			y2 = Contr_Voltage;
;;;545    			x4 = Vmon_POWE_value;
;;;546    			y4 = data;
;;;547    			
;;;548    			CalPara.SetPV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;549    			CalPara.OffsetSetPV[0] = (float)y2 - CalPara.SetPV[0]*(float)x2;
;;;550    			
;;;551    			CalPara.TestPV[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;552    			CalPara.OffsetPV[0] = (float)y4 - CalPara.TestPV[0]*(float)x4;
;;;553    			
;;;554    			Flag_DAC_OFF=0;
;;;555    			calflag = 0;
;;;556    			Off_GPOI_ResetSet();
;;;557    		}else if(range == 7){//CV控制低档1
;;;558    			LOAD_MODE = 1;
;;;559    			LOAD_V_SW=0;
;;;560    			GPIO_ResetBits(GPIOB,GPIO_Pin_1);//电压档位为低档
;;;561    			calflag = 1;
;;;562    			Contr_Laod = 1000;
000024  f8dfa3e4          LDR      r10,|L1.1036|
000028  edd50a04          VLDR     s1,[r5,#0x10]         ;506
00002c  ed950a05          VLDR     s0,[r5,#0x14]         ;506
000030  edd51a08          VLDR     s3,[r5,#0x20]         ;506
000034  ed951a09          VLDR     s2,[r5,#0x24]         ;506
000038  2701              MOVS     r7,#1                 ;504
00003a  f0220208          BIC      r2,r2,#8              ;514
00003e  b120              CBZ      r0,|L1.74|
;;;563    			OnOff_GPOI_ResetSet(2,1);
;;;564    		}else if(range == 8){//CV控制低档2
;;;565    			LOAD_MODE = 1;
;;;566    			LOAD_V_SW=0;
;;;567    			GPIO_ResetBits(GPIOB,GPIO_Pin_1);//电压档位为低档
;;;568    			x1 = data;
;;;569    			y1 = Contr_Laod;
;;;570    			Contr_Laod = 8000;
;;;571    //			OnOff_GPOI_ResetSet(2,1);
;;;572    		}else if(range == 9){//CV控制低档3
;;;573    			x2 = data;
;;;574    			y2 = Contr_Laod;
;;;575    			CalPara.SetCV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;576    			CalPara.OffsetCV[0] = (float)y2 - CalPara.SetCV[0]*(float)x2;
;;;577    				//参数写进FLASH
;;;578    			Flag_DAC_OFF=0;
;;;579    			calflag = 0;
;;;580    			Off_GPOI_ResetSet();
;;;581    		}else if(range == 10){//CV控制高档1
;;;582    			LOAD_MODE = 1;
;;;583    			LOAD_V_SW=1;
;;;584    			GPIO_SetBits(GPIOB,GPIO_Pin_1);//电压档位为高档
;;;585    			calflag = 1;
;;;586    			Contr_Laod = 1000;
;;;587    			OnOff_GPOI_ResetSet(2,1);
;;;588    		}else if(range == 11){//CV控制高档2
;;;589    			LOAD_MODE = 1;
;;;590    			LOAD_V_SW=1;
;;;591    			GPIO_SetBits(GPIOB,GPIO_Pin_1);//电压档位为高档
;;;592    			x1 = data;
;;;593    			y1 = Contr_Laod;
;;;594    			Contr_Laod = 8000;
;;;595    //			OnOff_GPOI_ResetSet(2,1);
;;;596    		}else if(range == 12){//CV控制高档3
;;;597    			x2 = data;
;;;598    			y2 = Contr_Laod;
;;;599    			CalPara.SetCV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;600    			CalPara.OffsetCV[1] = (float)y2 - CalPara.SetCV[1]*(float)x2;
;;;601    				//参数写进FLASH
;;;602    			Flag_DAC_OFF=0;
;;;603    			calflag = 0;
;;;604    			Off_GPOI_ResetSet();
;;;605    		}
;;;606    	}else if(mode == 1){
000040  2801              CMP      r0,#1
000042  d073              BEQ      |L1.300|
;;;607    		if(range == 0)//负载电流低档位1
;;;608    		{		
;;;609    			LOAD_I_SW = 0;
;;;610    			Contr_Laod = 7000;
;;;611    			calflag = 1;
;;;612    			OnOff_GPOI_ResetSet(2,1);
;;;613    		}
;;;614    		else if(range == 1)//负载电流低档位2
;;;615    		{
;;;616    			LOAD_I_SW = 0;			
;;;617    			x1 = data;
;;;618    			y1 = Contr_Laod;
;;;619    			x3 = Imon_Load_value;
;;;620    			y3 = data;
;;;621    			Contr_Laod = 56000;
;;;622    		}else if(range == 2){//负载电流低档位3
;;;623    			
;;;624    			x2 = data;
;;;625    			y2 = Contr_Laod;
;;;626    			x4 = Imon_Load_value;
;;;627    			y4 = data;
;;;628    			
;;;629    			CalPara.SetLC[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;630    			CalPara.OffsetLC[0] = (float)y2 - CalPara.SetLC[0]*(float)x2;
;;;631    			
;;;632    			CalPara.TestLC[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;633    			CalPara.OffsetTestLC[0] = (float)y4 - CalPara.TestLC[0]*(float)x4;
;;;634    				
;;;635    			Flag_DAC_OFF =0;
;;;636    			calflag = 0;
;;;637    			Off_GPOI_ResetSet();
;;;638    		}else if(range == 3){//负载电流高档位1
;;;639    			LOAD_I_SW = 1;
;;;640    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;641    			Contr_Laod = 8000;
;;;642    			calflag = 1;
;;;643    			OnOff_GPOI_ResetSet(2,1);
;;;644    		}else if(range == 4){//负载电流高档位2
;;;645    			
;;;646    			LOAD_I_SW = 1;
;;;647    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;648    			x1 = data;
;;;649    			y1 = Contr_Laod;
;;;650    			x3 = Imon_Load_value;
;;;651    			y3 = data;
;;;652    			Contr_Laod = 33000;
;;;653    		}else if(range == 5){//负载电流高档位3
;;;654    			
;;;655    			x2 = data;
;;;656    			y2 = Contr_Laod;
;;;657    			x4 = Imon_Load_value;
;;;658    			y4 = data;
;;;659    			
;;;660    			CalPara.SetLC[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;661    			CalPara.OffsetLC[1] = (float)y2 - CalPara.SetLC[1]*(float)x2;
;;;662    			
;;;663    			CalPara.TestLC[1] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;664    			CalPara.OffsetTestLC[1] = (float)y4 - CalPara.TestLC[1]*(float)x4;
;;;665    				
;;;666    			Flag_DAC_OFF =0;
;;;667    			calflag = 0;
;;;668    			Off_GPOI_ResetSet();
;;;669    		}else if(range == 6){//电源电流1
;;;670    			Contr_Voltage = 3500;
;;;671    			Contr_Current = 4000;
;;;672    			calflag = 1;
;;;673    			OnOff_GPOI_ResetSet(0,1);
;;;674    		}else if(range == 7){//电源电流2
;;;675    			
;;;676    			x1 = data;
;;;677    			y1 = Contr_Current;
;;;678    			x3 = Imon_POWE_value;
;;;679    			y3 = data;
;;;680    			Contr_Voltage = 3500;
;;;681    			Contr_Current = 14000;
;;;682    		}else if(range == 8){//电源电流3
;;;683    			
;;;684    			x2 = data;
;;;685    			y2 = Contr_Current;
;;;686    			x4 = Imon_POWE_value;
;;;687    			y4 = data;
;;;688    			
;;;689    			CalPara.SetPC[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;690    			CalPara.OffsetPC[0] = (float)y2 - CalPara.SetPC[0]*(float)x2;
;;;691    			
;;;692    			CalPara.TestPC[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;693    			CalPara.OffsetTestPC[0] = (float)y4 - CalPara.TestPC[0]*(float)x4;
;;;694    			
;;;695    			Flag_DAC_OFF=0;
;;;696    			calflag = 0;
;;;697    			Off_GPOI_ResetSet();
;;;698    		}
;;;699    	}else if(mode == 2){
000044  2802              CMP      r0,#2
000046  d072              BEQ      |L1.302|
000048  e3b4              B        |L1.1972|
                  |L1.74|
00004a  48f1              LDR      r0,|L1.1040|
00004c  b1e9              CBZ      r1,|L1.138|
00004e  2901              CMP      r1,#1                 ;508
000050  d01f              BEQ      |L1.146|
000052  2902              CMP      r1,#2                 ;516
000054  d041              BEQ      |L1.218|
000056  2903              CMP      r1,#3                 ;521
000058  d044              BEQ      |L1.228|
00005a  f2413088          MOV      r0,#0x1388            ;533
00005e  2904              CMP      r1,#4                 ;530
000060  d066              BEQ      |L1.304|
000062  2905              CMP      r1,#5                 ;535
000064  d06c              BEQ      |L1.320|
000066  2906              CMP      r1,#6                 ;542
000068  d07f              BEQ      |L1.362|
00006a  48ea              LDR      r0,|L1.1044|
00006c  f44f7b7a          MOV      r11,#0x3e8            ;562
000070  2907              CMP      r1,#7                 ;557
000072  d074              BEQ      |L1.350|
000074  2908              CMP      r1,#8                 ;564
000076  d073              BEQ      |L1.352|
000078  2909              CMP      r1,#9                 ;572
00007a  d072              BEQ      |L1.354|
00007c  290a              CMP      r1,#0xa               ;581
00007e  d071              BEQ      |L1.356|
000080  290b              CMP      r1,#0xb               ;588
000082  d070              BEQ      |L1.358|
000084  290c              CMP      r1,#0xc               ;596
000086  d06f              BEQ      |L1.360|
000088  e394              B        |L1.1972|
                  |L1.138|
00008a  7037              STRB     r7,[r6,#0]            ;504
00008c  f8c9301c          STR      r3,[r9,#0x1c]         ;505  ; Run_Control
000090  e026              B        |L1.224|
                  |L1.146|
000092  8800              LDRH     r0,[r0,#0]            ;509  ; Vmon_Load_value
000094  ee014a10          VMOV     s2,r4                 ;511
000098  eeb80a40          VCVT.F32.U32 s0,s0                 ;511
00009c  eef80a60          VCVT.F32.U32 s1,s1                 ;511
0000a0  eeb81a41          VCVT.F32.U32 s2,s2                 ;511
0000a4  e9c50406          STRD     r0,r4,[r5,#0x18]      ;509
0000a8  ee311a40          VSUB.F32 s2,s2,s0              ;511
0000ac  ee000a10          VMOV     s0,r0                 ;511
0000b0  eeb80a40          VCVT.F32.U32 s0,s0                 ;511
0000b4  ee700a60          VSUB.F32 s1,s0,s1              ;511
0000b8  ee810a20          VDIV.F32 s0,s2,s1              ;511
0000bc  ee000a90          VMOV     s1,r0                 ;512
0000c0  eeb81a60          VCVT.F32.U32 s2,s1                 ;512
0000c4  ee004a90          VMOV     s1,r4                 ;512
0000c8  eef80a60          VCVT.F32.U32 s1,s1                 ;512
0000cc  ed880a00          VSTR     s0,[r8,#0]            ;511
0000d0  ee400a41          VMLS.F32 s1,s0,s2              ;512
0000d4  edc80a04          VSTR     s1,[r8,#0x10]         ;512
0000d8  e369              B        |L1.1966|
                  |L1.218|
0000da  7037              STRB     r7,[r6,#0]            ;517
0000dc  f8c9701c          STR      r7,[r9,#0x1c]         ;518  ; Run_Control
                  |L1.224|
0000e0  8800              LDRH     r0,[r0,#0]            ;506  ; Vmon_Load_value
0000e2  e2da              B        |L1.1690|
                  |L1.228|
0000e4  8800              LDRH     r0,[r0,#0]            ;523  ; Vmon_Load_value
0000e6  ee014a10          VMOV     s2,r4                 ;525
0000ea  eeb80a40          VCVT.F32.U32 s0,s0                 ;525
0000ee  eef80a60          VCVT.F32.U32 s1,s1                 ;525
0000f2  eeb81a41          VCVT.F32.U32 s2,s2                 ;525
0000f6  e9c50406          STRD     r0,r4,[r5,#0x18]      ;523
0000fa  ee311a40          VSUB.F32 s2,s2,s0              ;525
0000fe  ee000a10          VMOV     s0,r0                 ;525
000102  eeb80a40          VCVT.F32.U32 s0,s0                 ;525
000106  ee700a60          VSUB.F32 s1,s0,s1              ;525
00010a  ee810a20          VDIV.F32 s0,s2,s1              ;525
00010e  ee000a90          VMOV     s1,r0                 ;526
000112  eeb81a60          VCVT.F32.U32 s2,s1                 ;526
000116  ee004a90          VMOV     s1,r4                 ;526
00011a  eef80a60          VCVT.F32.U32 s1,s1                 ;526
00011e  ed880a01          VSTR     s0,[r8,#4]            ;525
000122  ee400a41          VMLS.F32 s1,s0,s2              ;526
000126  edc80a05          VSTR     s1,[r8,#0x14]         ;526
00012a  e340              B        |L1.1966|
                  |L1.300|
00012c  e0dc              B        |L1.744|
                  |L1.302|
00012e  e242              B        |L1.1462|
                  |L1.304|
000130  7037              STRB     r7,[r6,#0]            ;531
000132  f64052ac          MOV      r2,#0xdac             ;532
000136  f8ae2000          STRH     r2,[lr,#0]            ;532
00013a  f8ab0000          STRH     r0,[r11,#0]           ;533
00013e  e1e0              B        |L1.1282|
                  |L1.320|
000140  612c              STR      r4,[r5,#0x10]         ;537  ; x1
000142  f8be2000          LDRH     r2,[lr,#0]            ;537  ; Contr_Voltage
000146  616a              STR      r2,[r5,#0x14]         ;538  ; y1
000148  4ab3              LDR      r2,|L1.1048|
00014a  8812              LDRH     r2,[r2,#0]            ;538  ; Vmon_POWE_value
00014c  e9c52408          STRD     r2,r4,[r5,#0x20]      ;538
000150  f2427210          MOV      r2,#0x2710            ;540
000154  f8ae2000          STRH     r2,[lr,#0]            ;540
000158  4659              MOV      r1,r11                ;541
00015a  e1e2              B        |L1.1314|
00015c  e005              B        |L1.362|
                  |L1.350|
00015e  e04d              B        |L1.508|
                  |L1.352|
000160  e054              B        |L1.524|
                  |L1.354|
000162  e05b              B        |L1.540|
                  |L1.356|
000164  e07f              B        |L1.614|
                  |L1.358|
000166  e08b              B        |L1.640|
                  |L1.360|
000168  e099              B        |L1.670|
                  |L1.362|
00016a  61ac              STR      r4,[r5,#0x18]         ;544  ; x2
00016c  f8be1000          LDRH     r1,[lr,#0]            ;544  ; Contr_Voltage
000170  48a9              LDR      r0,|L1.1048|
000172  61e9              STR      r1,[r5,#0x1c]         ;545  ; y2
000174  8800              LDRH     r0,[r0,#0]            ;545  ; Vmon_POWE_value
000176  ee021a10          VMOV     s4,r1                 ;548
00017a  eeb80a40          VCVT.F32.U32 s0,s0                 ;548
00017e  eef80a60          VCVT.F32.U32 s1,s1                 ;548
000182  eeb82a42          VCVT.F32.U32 s4,s4                 ;548
000186  e9c5040a          STRD     r0,r4,[r5,#0x28]      ;545
00018a  ee322a40          VSUB.F32 s4,s4,s0              ;548
00018e  ee004a10          VMOV     s0,r4                 ;548
000192  eeb80a40          VCVT.F32.U32 s0,s0                 ;548
000196  ee700a60          VSUB.F32 s1,s0,s1              ;548
00019a  ee820a20          VDIV.F32 s0,s4,s1              ;548
00019e  ee004a90          VMOV     s1,r4                 ;549
0001a2  eeb82a60          VCVT.F32.U32 s4,s1                 ;549
0001a6  ee001a90          VMOV     s1,r1                 ;549
0001aa  eef80a60          VCVT.F32.U32 s1,s1                 ;549
0001ae  ed880a02          VSTR     s0,[r8,#8]            ;548
0001b2  ee400a42          VMLS.F32 s1,s0,s4              ;549
0001b6  ee004a10          VMOV     s0,r4                 ;551
0001ba  eeb80a40          VCVT.F32.U32 s0,s0                 ;551
0001be  edc80a06          VSTR     s1,[r8,#0x18]         ;549
0001c2  eef80a41          VCVT.F32.U32 s1,s2                 ;551
0001c6  eeb81a61          VCVT.F32.U32 s2,s3                 ;551
0001ca  ee700a60          VSUB.F32 s1,s0,s1              ;551
0001ce  ee000a10          VMOV     s0,r0                 ;551
0001d2  eeb80a40          VCVT.F32.U32 s0,s0                 ;551
0001d6  ee301a41          VSUB.F32 s2,s0,s2              ;551
0001da  ee800a81          VDIV.F32 s0,s1,s2              ;551
0001de  ee000a90          VMOV     s1,r0                 ;552
0001e2  eeb81a60          VCVT.F32.U32 s2,s1                 ;552
0001e6  ee004a90          VMOV     s1,r4                 ;552
0001ea  eef80a60          VCVT.F32.U32 s1,s1                 ;552
0001ee  ed880a03          VSTR     s0,[r8,#0xc]          ;551
0001f2  ee400a41          VMLS.F32 s1,s0,s2              ;552
0001f6  edc80a07          VSTR     s1,[r8,#0x1c]         ;552
0001fa  e173              B        |L1.1252|
                  |L1.508|
0001fc  f8c97018          STR      r7,[r9,#0x18]         ;558  ; Run_Control
000200  f8c9301c          STR      r3,[r9,#0x1c]         ;559  ; Run_Control
000204  2102              MOVS     r1,#2                 ;560
000206  f7fffffe          BL       GPIO_ResetBits
00020a  e033              B        |L1.628|
                  |L1.524|
00020c  f8c97018          STR      r7,[r9,#0x18]         ;565  ; Run_Control
000210  f8c9301c          STR      r3,[r9,#0x1c]         ;566  ; Run_Control
000214  2102              MOVS     r1,#2                 ;567
000216  f7fffffe          BL       GPIO_ResetBits
00021a  e038              B        |L1.654|
                  |L1.540|
00021c  61ac              STR      r4,[r5,#0x18]         ;574  ; x2
00021e  f8ba0000          LDRH     r0,[r10,#0]           ;574  ; Contr_Laod
000222  eeb80a40          VCVT.F32.U32 s0,s0                 ;575
000226  ee010a10          VMOV     s2,r0                 ;575
00022a  eef80a60          VCVT.F32.U32 s1,s1                 ;575
00022e  61e8              STR      r0,[r5,#0x1c]         ;575  ; y2
000230  eeb81a41          VCVT.F32.U32 s2,s2                 ;575
000234  ee311a40          VSUB.F32 s2,s2,s0              ;575
000238  ee004a10          VMOV     s0,r4                 ;575
00023c  eeb80a40          VCVT.F32.U32 s0,s0                 ;575
000240  ee700a60          VSUB.F32 s1,s0,s1              ;575
000244  ee810a20          VDIV.F32 s0,s2,s1              ;575
000248  ee004a90          VMOV     s1,r4                 ;576
00024c  eeb81a60          VCVT.F32.U32 s2,s1                 ;576
000250  ee000a90          VMOV     s1,r0                 ;576
000254  eef80a60          VCVT.F32.U32 s1,s1                 ;576
000258  ed880a0a          VSTR     s0,[r8,#0x28]         ;575
00025c  ee400a41          VMLS.F32 s1,s0,s2              ;576
000260  edc80a12          VSTR     s1,[r8,#0x48]         ;576
000264  e13e              B        |L1.1252|
                  |L1.614|
000266  f8c97018          STR      r7,[r9,#0x18]         ;582  ; Run_Control
00026a  f8c9701c          STR      r7,[r9,#0x1c]         ;583  ; Run_Control
00026e  2102              MOVS     r1,#2                 ;584
000270  f7fffffe          BL       GPIO_SetBits
                  |L1.628|
000274  7037              STRB     r7,[r6,#0]            ;561
000276  f8aab000          STRH     r11,[r10,#0]          ;562
                  |L1.634|
00027a  2101              MOVS     r1,#1                 ;563
00027c  2002              MOVS     r0,#2                 ;563
00027e  e0d3              B        |L1.1064|
                  |L1.640|
000280  f8c97018          STR      r7,[r9,#0x18]         ;589  ; Run_Control
000284  f8c9701c          STR      r7,[r9,#0x1c]         ;590  ; Run_Control
000288  2102              MOVS     r1,#2                 ;591
00028a  f7fffffe          BL       GPIO_SetBits
                  |L1.654|
00028e  612c              STR      r4,[r5,#0x10]         ;569  ; x1
000290  f8ba1000          LDRH     r1,[r10,#0]           ;569  ; Contr_Laod
000294  4650              MOV      r0,r10                ;569
000296  6169              STR      r1,[r5,#0x14]         ;570  ; y1
000298  f44f51fa          MOV      r1,#0x1f40            ;570
00029c  e0d8              B        |L1.1104|
                  |L1.670|
00029e  61ac              STR      r4,[r5,#0x18]         ;598  ; x2
0002a0  f8ba0000          LDRH     r0,[r10,#0]           ;598  ; Contr_Laod
0002a4  eeb80a40          VCVT.F32.U32 s0,s0                 ;599
0002a8  ee010a10          VMOV     s2,r0                 ;599
0002ac  eef80a60          VCVT.F32.U32 s1,s1                 ;599
0002b0  61e8              STR      r0,[r5,#0x1c]         ;599  ; y2
0002b2  eeb81a41          VCVT.F32.U32 s2,s2                 ;599
0002b6  ee311a40          VSUB.F32 s2,s2,s0              ;599
0002ba  ee004a10          VMOV     s0,r4                 ;599
0002be  eeb80a40          VCVT.F32.U32 s0,s0                 ;599
0002c2  ee700a60          VSUB.F32 s1,s0,s1              ;599
0002c6  ee810a20          VDIV.F32 s0,s2,s1              ;599
0002ca  ee004a90          VMOV     s1,r4                 ;600
0002ce  eeb81a60          VCVT.F32.U32 s2,s1                 ;600
0002d2  ee000a90          VMOV     s1,r0                 ;600
0002d6  eef80a60          VCVT.F32.U32 s1,s1                 ;600
0002da  ed880a0b          VSTR     s0,[r8,#0x2c]         ;599
0002de  ee400a41          VMLS.F32 s1,s0,s2              ;600
0002e2  edc80a13          VSTR     s1,[r8,#0x4c]         ;600
0002e6  e0fd              B        |L1.1252|
                  |L1.744|
0002e8  b199              CBZ      r1,|L1.786|
0002ea  2901              CMP      r1,#1                 ;614
0002ec  d018              BEQ      |L1.800|
0002ee  2902              CMP      r1,#2                 ;622
0002f0  d024              BEQ      |L1.828|
0002f2  f44f6000          MOV      r0,#0x800             ;640
0002f6  2903              CMP      r1,#3                 ;638
0002f8  d069              BEQ      |L1.974|
0002fa  2904              CMP      r1,#4                 ;644
0002fc  d073              BEQ      |L1.998|
0002fe  2905              CMP      r1,#5                 ;653
000300  d072              BEQ      |L1.1000|
000302  2906              CMP      r1,#6                 ;669
000304  d071              BEQ      |L1.1002|
000306  4845              LDR      r0,|L1.1052|
000308  2907              CMP      r1,#7                 ;674
00030a  d06f              BEQ      |L1.1004|
00030c  2908              CMP      r1,#8                 ;682
00030e  d06e              BEQ      |L1.1006|
000310  e250              B        |L1.1972|
                  |L1.786|
000312  f8c93020          STR      r3,[r9,#0x20]         ;609  ; Run_Control
000316  f6413158          MOV      r1,#0x1b58            ;610
00031a  f8aa1000          STRH     r1,[r10,#0]           ;610
00031e  e060              B        |L1.994|
                  |L1.800|
000320  f8c93020          STR      r3,[r9,#0x20]         ;616  ; Run_Control
000324  612c              STR      r4,[r5,#0x10]         ;618  ; x1
000326  f8ba1000          LDRH     r1,[r10,#0]           ;618  ; Contr_Laod
00032a  4650              MOV      r0,r10                ;618
00032c  6169              STR      r1,[r5,#0x14]         ;619  ; y1
00032e  493c              LDR      r1,|L1.1056|
000330  8809              LDRH     r1,[r1,#0]            ;619  ; Imon_Load_value
000332  e9c51408          STRD     r1,r4,[r5,#0x20]      ;619
000336  f64d21c0          MOV      r1,#0xdac0            ;621
00033a  e089              B        |L1.1104|
                  |L1.828|
00033c  61ac              STR      r4,[r5,#0x18]         ;625  ; x2
00033e  f8ba1000          LDRH     r1,[r10,#0]           ;625  ; Contr_Laod
000342  4837              LDR      r0,|L1.1056|
000344  61e9              STR      r1,[r5,#0x1c]         ;626  ; y2
000346  8800              LDRH     r0,[r0,#0]            ;626  ; Imon_Load_value
000348  ee021a10          VMOV     s4,r1                 ;629
00034c  eeb80a40          VCVT.F32.U32 s0,s0                 ;629
000350  eef80a60          VCVT.F32.U32 s1,s1                 ;629
000354  eeb82a42          VCVT.F32.U32 s4,s4                 ;629
000358  e9c5040a          STRD     r0,r4,[r5,#0x28]      ;626
00035c  ee322a40          VSUB.F32 s4,s4,s0              ;629
000360  ee004a10          VMOV     s0,r4                 ;629
000364  eeb80a40          VCVT.F32.U32 s0,s0                 ;629
000368  ee700a60          VSUB.F32 s1,s0,s1              ;629
00036c  ee820a20          VDIV.F32 s0,s4,s1              ;629
000370  ee004a90          VMOV     s1,r4                 ;630
000374  eeb82a60          VCVT.F32.U32 s4,s1                 ;630
000378  ee001a90          VMOV     s1,r1                 ;630
00037c  eef80a60          VCVT.F32.U32 s1,s1                 ;630
000380  ed880a08          VSTR     s0,[r8,#0x20]         ;629
000384  ee400a42          VMLS.F32 s1,s0,s4              ;630
000388  ee004a10          VMOV     s0,r4                 ;632
00038c  eeb80a40          VCVT.F32.U32 s0,s0                 ;632
000390  edc80a10          VSTR     s1,[r8,#0x40]         ;630
000394  eef80a41          VCVT.F32.U32 s1,s2                 ;632
000398  eeb81a61          VCVT.F32.U32 s2,s3                 ;632
00039c  ee700a60          VSUB.F32 s1,s0,s1              ;632
0003a0  ee000a10          VMOV     s0,r0                 ;632
0003a4  eeb80a40          VCVT.F32.U32 s0,s0                 ;632
0003a8  ee301a41          VSUB.F32 s2,s0,s2              ;632
0003ac  ee800a81          VDIV.F32 s0,s1,s2              ;632
0003b0  ee000a90          VMOV     s1,r0                 ;633
0003b4  eeb81a60          VCVT.F32.U32 s2,s1                 ;633
0003b8  ee004a90          VMOV     s1,r4                 ;633
0003bc  eef80a60          VCVT.F32.U32 s1,s1                 ;633
0003c0  ed880a0c          VSTR     s0,[r8,#0x30]         ;632
0003c4  ee400a41          VMLS.F32 s1,s0,s2              ;633
0003c8  edc80a14          VSTR     s1,[r8,#0x50]         ;633
0003cc  e08a              B        |L1.1252|
                  |L1.974|
0003ce  f8c97020          STR      r7,[r9,#0x20]         ;639  ; Run_Control
0003d2  4601              MOV      r1,r0                 ;640
0003d4  4813              LDR      r0,|L1.1060|
0003d6  f7fffffe          BL       GPIO_ResetBits
0003da  f44f50fa          MOV      r0,#0x1f40            ;641
0003de  f8aa0000          STRH     r0,[r10,#0]           ;641
                  |L1.994|
0003e2  7037              STRB     r7,[r6,#0]            ;611
0003e4  e749              B        |L1.634|
                  |L1.998|
0003e6  e022              B        |L1.1070|
                  |L1.1000|
0003e8  e034              B        |L1.1108|
                  |L1.1002|
0003ea  e081              B        |L1.1264|
                  |L1.1004|
0003ec  e08c              B        |L1.1288|
                  |L1.1006|
0003ee  e09a              B        |L1.1318|
                  |L1.1008|
                          DCD      calflag
                  |L1.1012|
                          DCD      Run_Control
                  |L1.1016|
                          DCD      ||.data||
                  |L1.1020|
                          DCD      CalPara
                  |L1.1024|
                          DCD      flagB
                  |L1.1028|
                          DCD      Contr_Voltage
                  |L1.1032|
                          DCD      Contr_Current
                  |L1.1036|
                          DCD      Contr_Laod
                  |L1.1040|
                          DCD      Vmon_Load_value
                  |L1.1044|
                          DCD      0x40020400
                  |L1.1048|
                          DCD      Vmon_POWE_value
                  |L1.1052|
                          DCD      Imon_POWE_value
                  |L1.1056|
                          DCD      Imon_Load_value
                  |L1.1060|
                          DCD      0x40020800
                  |L1.1064|
000428  f7fffffe          BL       OnOff_GPOI_ResetSet
00042c  e1c2              B        |L1.1972|
                  |L1.1070|
00042e  f8c97020          STR      r7,[r9,#0x20]         ;646  ; Run_Control
000432  4601              MOV      r1,r0                 ;647
000434  48e1              LDR      r0,|L1.1980|
000436  f7fffffe          BL       GPIO_ResetBits
00043a  612c              STR      r4,[r5,#0x10]         ;649  ; x1
00043c  f8ba1000          LDRH     r1,[r10,#0]           ;649  ; Contr_Laod
000440  4650              MOV      r0,r10                ;649
000442  6169              STR      r1,[r5,#0x14]         ;650  ; y1
000444  49de              LDR      r1,|L1.1984|
000446  8809              LDRH     r1,[r1,#0]            ;650  ; Imon_Load_value
000448  e9c51408          STRD     r1,r4,[r5,#0x20]      ;650
00044c  f24801e8          MOV      r1,#0x80e8            ;652
                  |L1.1104|
000450  8001              STRH     r1,[r0,#0]            ;621
000452  e1af              B        |L1.1972|
                  |L1.1108|
000454  61ac              STR      r4,[r5,#0x18]         ;656  ; x2
000456  f8ba1000          LDRH     r1,[r10,#0]           ;656  ; Contr_Laod
00045a  48d9              LDR      r0,|L1.1984|
00045c  61e9              STR      r1,[r5,#0x1c]         ;657  ; y2
00045e  8800              LDRH     r0,[r0,#0]            ;657  ; Imon_Load_value
000460  ee021a10          VMOV     s4,r1                 ;660
000464  eeb80a40          VCVT.F32.U32 s0,s0                 ;660
000468  eef80a60          VCVT.F32.U32 s1,s1                 ;660
00046c  eeb82a42          VCVT.F32.U32 s4,s4                 ;660
000470  e9c5040a          STRD     r0,r4,[r5,#0x28]      ;657
000474  ee322a40          VSUB.F32 s4,s4,s0              ;660
000478  ee004a10          VMOV     s0,r4                 ;660
00047c  eeb80a40          VCVT.F32.U32 s0,s0                 ;660
000480  ee700a60          VSUB.F32 s1,s0,s1              ;660
000484  ee820a20          VDIV.F32 s0,s4,s1              ;660
000488  ee004a90          VMOV     s1,r4                 ;661
00048c  eeb82a60          VCVT.F32.U32 s4,s1                 ;661
000490  ee001a90          VMOV     s1,r1                 ;661
000494  eef80a60          VCVT.F32.U32 s1,s1                 ;661
000498  ed880a09          VSTR     s0,[r8,#0x24]         ;660
00049c  ee400a42          VMLS.F32 s1,s0,s4              ;661
0004a0  ee004a10          VMOV     s0,r4                 ;663
0004a4  eeb80a40          VCVT.F32.U32 s0,s0                 ;663
0004a8  edc80a11          VSTR     s1,[r8,#0x44]         ;661
0004ac  eef80a41          VCVT.F32.U32 s1,s2                 ;663
0004b0  eeb81a61          VCVT.F32.U32 s2,s3                 ;663
0004b4  ee700a60          VSUB.F32 s1,s0,s1              ;663
0004b8  ee000a10          VMOV     s0,r0                 ;663
0004bc  eeb80a40          VCVT.F32.U32 s0,s0                 ;663
0004c0  ee301a41          VSUB.F32 s2,s0,s2              ;663
0004c4  ee800a81          VDIV.F32 s0,s1,s2              ;663
0004c8  ee000a90          VMOV     s1,r0                 ;664
0004cc  eeb81a60          VCVT.F32.U32 s2,s1                 ;664
0004d0  ee004a90          VMOV     s1,r4                 ;664
0004d4  eef80a60          VCVT.F32.U32 s1,s1                 ;664
0004d8  ed880a0d          VSTR     s0,[r8,#0x34]         ;663
0004dc  ee400a41          VMLS.F32 s1,s0,s2              ;664
0004e0  edc80a15          VSTR     s1,[r8,#0x54]         ;664
                  |L1.1252|
0004e4  f8cc2000          STR      r2,[r12,#0]           ;636  ; flagB
0004e8  7033              STRB     r3,[r6,#0]            ;636
0004ea  f7fffffe          BL       Off_GPOI_ResetSet
0004ee  e161              B        |L1.1972|
                  |L1.1264|
0004f0  f64050ac          MOV      r0,#0xdac             ;670
0004f4  f8ae0000          STRH     r0,[lr,#0]            ;670
0004f8  f44f617a          MOV      r1,#0xfa0             ;671
0004fc  f8ab1000          STRH     r1,[r11,#0]           ;671
000500  7037              STRB     r7,[r6,#0]            ;672
                  |L1.1282|
000502  2101              MOVS     r1,#1                 ;534
000504  2000              MOVS     r0,#0                 ;534
000506  e78f              B        |L1.1064|
                  |L1.1288|
000508  612c              STR      r4,[r5,#0x10]         ;677  ; x1
00050a  f8bb2000          LDRH     r2,[r11,#0]           ;677  ; Contr_Current
00050e  4659              MOV      r1,r11                ;677
000510  616a              STR      r2,[r5,#0x14]         ;678  ; y1
000512  8800              LDRH     r0,[r0,#0]            ;678  ; Imon_POWE_value
000514  e9c50408          STRD     r0,r4,[r5,#0x20]      ;678
000518  f64050ac          MOV      r0,#0xdac             ;680
00051c  f8ae0000          STRH     r0,[lr,#0]            ;680
000520  0080              LSLS     r0,r0,#2              ;681
                  |L1.1314|
000522  8008              STRH     r0,[r1,#0]            ;681
000524  e146              B        |L1.1972|
                  |L1.1318|
000526  61ac              STR      r4,[r5,#0x18]         ;685  ; x2
000528  f8bb1000          LDRH     r1,[r11,#0]           ;685  ; Contr_Current
00052c  61e9              STR      r1,[r5,#0x1c]         ;686  ; y2
00052e  8800              LDRH     r0,[r0,#0]            ;686  ; Imon_POWE_value
000530  ee021a10          VMOV     s4,r1                 ;689
000534  eeb80a40          VCVT.F32.U32 s0,s0                 ;689
000538  eef80a60          VCVT.F32.U32 s1,s1                 ;689
00053c  eeb82a42          VCVT.F32.U32 s4,s4                 ;689
000540  e9c5040a          STRD     r0,r4,[r5,#0x28]      ;686
000544  ee322a40          VSUB.F32 s4,s4,s0              ;689
000548  ee004a10          VMOV     s0,r4                 ;689
00054c  eeb80a40          VCVT.F32.U32 s0,s0                 ;689
000550  ee700a60          VSUB.F32 s1,s0,s1              ;689
000554  ee820a20          VDIV.F32 s0,s4,s1              ;689
000558  ee004a90          VMOV     s1,r4                 ;690
00055c  eeb82a60          VCVT.F32.U32 s4,s1                 ;690
000560  ee001a90          VMOV     s1,r1                 ;690
000564  eef80a60          VCVT.F32.U32 s1,s1                 ;690
000568  ed880a0e          VSTR     s0,[r8,#0x38]         ;689
00056c  ee400a42          VMLS.F32 s1,s0,s4              ;690
000570  ee004a10          VMOV     s0,r4                 ;692
000574  eeb80a40          VCVT.F32.U32 s0,s0                 ;692
000578  edc80a16          VSTR     s1,[r8,#0x58]         ;690
00057c  eef80a41          VCVT.F32.U32 s1,s2                 ;692
000580  eeb81a61          VCVT.F32.U32 s2,s3                 ;692
000584  ee700a60          VSUB.F32 s1,s0,s1              ;692
000588  ee000a10          VMOV     s0,r0                 ;692
00058c  eeb80a40          VCVT.F32.U32 s0,s0                 ;692
000590  ee301a41          VSUB.F32 s2,s0,s2              ;692
000594  ee800a81          VDIV.F32 s0,s1,s2              ;692
000598  ee000a90          VMOV     s1,r0                 ;693
00059c  eeb81a60          VCVT.F32.U32 s2,s1                 ;693
0005a0  ee004a90          VMOV     s1,r4                 ;693
0005a4  eef80a60          VCVT.F32.U32 s1,s1                 ;693
0005a8  ed880a0f          VSTR     s0,[r8,#0x3c]         ;692
0005ac  ee400a41          VMLS.F32 s1,s0,s2              ;693
0005b0  edc80a17          VSTR     s1,[r8,#0x5c]         ;693
0005b4  e796              B        |L1.1252|
                  |L1.1462|
;;;700    		if(range == 0)//内阻低档位低段
;;;701    		{
;;;702    			RCONT_SW = 0;
;;;703    			calflag = 1;
;;;704    			x1 = Rmon_value;
0005b6  4883              LDR      r0,|L1.1988|
0005b8  b1c1              CBZ      r1,|L1.1516|
;;;705    			y1 = data;
;;;706    			
;;;707    //			Modify_A_READ=0;
;;;708    //			Modify_A_ACT=0;
;;;709    //			Modify_A_READ = Rmon_value;//测量电阻值
;;;710    //			Modify_A_ACT = data;//读取低段
;;;711    		}else if (range == 1)//内阻低档位高段
0005ba  2901              CMP      r1,#1
0005bc  d019              BEQ      |L1.1522|
;;;712    		{
;;;713    
;;;714    			x2 = Rmon_value;
;;;715    			y2 = data;
;;;716    			CalPara.TestR[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;717    			CalPara.OffsetR[0] = (float)y2 - CalPara.TestR[0]*(float)x2;
;;;718    				//参数写进FLASH
;;;719    			Flag_DAC_OFF=0;
;;;720    			calflag = 0;
;;;721    		}else if(range == 2)//内阻高档位低段
0005be  2902              CMP      r1,#2
0005c0  d07e              BEQ      |L1.1728|
;;;722    		{
;;;723    			RCONT_SW = 1;
;;;724    			calflag = 1;
;;;725    			x1 = Rmon_value;
;;;726    			y1 = data;
;;;727    		}else if (range == 3)//内阻高档位高段
0005c2  2903              CMP      r1,#3
0005c4  d039              BEQ      |L1.1594|
;;;728    		{
;;;729    			
;;;730    			x2 = Rmon_value;
;;;731    			y2 = data;
;;;732    			CalPara.TestR[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;733    			CalPara.OffsetR[1] = (float)y2 - CalPara.TestR[1]*(float)x2;
;;;734    				//参数写进FLASH
;;;735    			Flag_DAC_OFF=0;
;;;736    			calflag = 0;
;;;737    		}else if(range == 4)//识别电阻1低段
;;;738    		{
;;;739    			calflag = 1;
;;;740    //			x1 = (R1mon_value*1000)/(65535-R1mon_value);
;;;741    			x1 = (R1mon_value*1000)/(65535-R1mon_value);
0005c6  f8dfb200          LDR      r11,|L1.1992|
0005ca  f64f7aff          MOV      r10,#0xffff
0005ce  2904              CMP      r1,#4                 ;737
0005d0  d057              BEQ      |L1.1666|
;;;742    			y1 = data;
;;;743    		}else if (range == 5)//识别电阻1高段
0005d2  2905              CMP      r1,#5
0005d4  d064              BEQ      |L1.1696|
;;;744    		{
;;;745    			
;;;746    //			x2 = (R1mon_value*1000)/(65535-R1mon_value);
;;;747    			x2 = (R1mon_value*1000)/(65535-R1mon_value);
;;;748    			y2 = data;
;;;749    			CalPara.TestR1[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;750    			CalPara.OffsetR1[0] = (float)y2 - CalPara.TestR1[0]*(float)x2;
;;;751    				//参数写进FLASH
;;;752    			Flag_DAC_OFF=0;
;;;753    			calflag = 0;
;;;754    		}else if(range == 6)//识别电阻2低段
;;;755    		{
;;;756    			calflag = 1;
;;;757    			x1 = (R2mon_value*1000)/(65535-R2mon_value);
0005d6  f8dfb1f4          LDR      r11,|L1.1996|
0005da  2906              CMP      r1,#6                 ;754
0005dc  d051              BEQ      |L1.1666|
;;;758    			y1 = data;
;;;759    		}else if (range == 7)//识别电阻2高段
0005de  2907              CMP      r1,#7
0005e0  d06f              BEQ      |L1.1730|
;;;760    		{
;;;761    			
;;;762    			x2 = (R2mon_value*1000)/(65535-R2mon_value);
;;;763    			y2 = data;
;;;764    			CalPara.TestR2[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;765    			CalPara.OffsetR2[0] = (float)y2 - CalPara.TestR2[0]*(float)x2;
;;;766    				//参数写进FLASH
;;;767    			Flag_DAC_OFF=0;
;;;768    			calflag = 0;
;;;769    		}else if(range == 8)//内阻高档位低段
0005e2  2908              CMP      r1,#8
0005e4  d06c              BEQ      |L1.1728|
;;;770    		{
;;;771    			RCONT_SW = 1;
;;;772    			calflag = 1;
;;;773    			x1 = Rmon_value;
;;;774    			y1 = data;
;;;775    		}else if (range == 9)//内阻高档位高段
0005e6  2909              CMP      r1,#9
0005e8  d06c              BEQ      |L1.1732|
0005ea  e0e3              B        |L1.1972|
                  |L1.1516|
0005ec  f8c93024          STR      r3,[r9,#0x24]         ;702  ; Run_Control
0005f0  e0b8              B        |L1.1892|
                  |L1.1522|
0005f2  8800              LDRH     r0,[r0,#0]            ;714  ; Rmon_value
0005f4  ee014a10          VMOV     s2,r4                 ;716
0005f8  eeb80a40          VCVT.F32.U32 s0,s0                 ;716
0005fc  eef80a60          VCVT.F32.U32 s1,s1                 ;716
000600  eeb81a41          VCVT.F32.U32 s2,s2                 ;716
000604  e9c50406          STRD     r0,r4,[r5,#0x18]      ;714
000608  ee311a40          VSUB.F32 s2,s2,s0              ;716
00060c  ee000a10          VMOV     s0,r0                 ;716
000610  eeb80a40          VCVT.F32.U32 s0,s0                 ;716
000614  ee700a60          VSUB.F32 s1,s0,s1              ;716
000618  ee810a20          VDIV.F32 s0,s2,s1              ;716
00061c  ee000a90          VMOV     s1,r0                 ;717
000620  eeb81a60          VCVT.F32.U32 s2,s1                 ;717
000624  ee004a90          VMOV     s1,r4                 ;717
000628  eef80a60          VCVT.F32.U32 s1,s1                 ;717
00062c  ed880a18          VSTR     s0,[r8,#0x60]         ;716
000630  ee400a41          VMLS.F32 s1,s0,s2              ;717
000634  edc80a1d          VSTR     s1,[r8,#0x74]         ;717
000638  e0b9              B        |L1.1966|
                  |L1.1594|
00063a  8800              LDRH     r0,[r0,#0]            ;730  ; Rmon_value
00063c  ee014a10          VMOV     s2,r4                 ;732
000640  eeb80a40          VCVT.F32.U32 s0,s0                 ;732
000644  eef80a60          VCVT.F32.U32 s1,s1                 ;732
000648  eeb81a41          VCVT.F32.U32 s2,s2                 ;732
00064c  e9c50406          STRD     r0,r4,[r5,#0x18]      ;730
000650  ee311a40          VSUB.F32 s2,s2,s0              ;732
000654  ee000a10          VMOV     s0,r0                 ;732
000658  eeb80a40          VCVT.F32.U32 s0,s0                 ;732
00065c  ee700a60          VSUB.F32 s1,s0,s1              ;732
000660  ee810a20          VDIV.F32 s0,s2,s1              ;732
000664  ee000a90          VMOV     s1,r0                 ;733
000668  eeb81a60          VCVT.F32.U32 s2,s1                 ;733
00066c  ee004a90          VMOV     s1,r4                 ;733
000670  eef80a60          VCVT.F32.U32 s1,s1                 ;733
000674  ed880a19          VSTR     s0,[r8,#0x64]         ;732
000678  ee400a41          VMLS.F32 s1,s0,s2              ;733
00067c  edc80a1e          VSTR     s1,[r8,#0x78]         ;733
000680  e095              B        |L1.1966|
                  |L1.1666|
000682  7037              STRB     r7,[r6,#0]            ;739
000684  f8bb1000          LDRH     r1,[r11,#0]           ;741  ; R1mon_value
000688  f44f727a          MOV      r2,#0x3e8             ;741
00068c  4351              MULS     r1,r2,r1              ;741
00068e  f8bb2000          LDRH     r2,[r11,#0]           ;741  ; R1mon_value
000692  ebaa0002          SUB      r0,r10,r2             ;741
000696  fbb1f0f0          UDIV     r0,r1,r0              ;741
                  |L1.1690|
00069a  e9c50404          STRD     r0,r4,[r5,#0x10]      ;741
00069e  e089              B        |L1.1972|
                  |L1.1696|
0006a0  f8bb1000          LDRH     r1,[r11,#0]           ;747  ; R1mon_value
0006a4  f44f777a          MOV      r7,#0x3e8             ;747
0006a8  4379              MULS     r1,r7,r1              ;747
0006aa  f8bb7000          LDRH     r7,[r11,#0]           ;747  ; R1mon_value
0006ae  ee014a10          VMOV     s2,r4                 ;749
0006b2  ebaa0007          SUB      r0,r10,r7             ;747
0006b6  fbb1f0f0          UDIV     r0,r1,r0              ;747
0006ba  e9c50406          STRD     r0,r4,[r5,#0x18]      ;747
0006be  e002              B        |L1.1734|
                  |L1.1728|
0006c0  e04e              B        |L1.1888|
                  |L1.1730|
0006c2  e01f              B        |L1.1796|
                  |L1.1732|
0006c4  e050              B        |L1.1896|
                  |L1.1734|
0006c6  eeb81a41          VCVT.F32.U32 s2,s2                 ;749
0006ca  eeb80a40          VCVT.F32.U32 s0,s0                 ;749
0006ce  eef80a60          VCVT.F32.U32 s1,s1                 ;749
0006d2  ee311a40          VSUB.F32 s2,s2,s0              ;749
0006d6  ee000a10          VMOV     s0,r0                 ;749
0006da  eeb80a40          VCVT.F32.U32 s0,s0                 ;749
0006de  ee700a60          VSUB.F32 s1,s0,s1              ;749
0006e2  ee810a20          VDIV.F32 s0,s2,s1              ;749
0006e6  ee000a90          VMOV     s1,r0                 ;750
0006ea  eeb81a60          VCVT.F32.U32 s2,s1                 ;750
0006ee  ee004a90          VMOV     s1,r4                 ;750
0006f2  eef80a60          VCVT.F32.U32 s1,s1                 ;750
0006f6  ed880a1b          VSTR     s0,[r8,#0x6c]         ;749
0006fa  ee400a41          VMLS.F32 s1,s0,s2              ;750
0006fe  edc80a20          VSTR     s1,[r8,#0x80]         ;750
000702  e054              B        |L1.1966|
                  |L1.1796|
000704  f8bb1000          LDRH     r1,[r11,#0]           ;762  ; R2mon_value
000708  f44f777a          MOV      r7,#0x3e8             ;762
00070c  4379              MULS     r1,r7,r1              ;762
00070e  f8bb7000          LDRH     r7,[r11,#0]           ;762  ; R2mon_value
000712  ee014a10          VMOV     s2,r4                 ;764
000716  ebaa0007          SUB      r0,r10,r7             ;762
00071a  fbb1f0f0          UDIV     r0,r1,r0              ;762
00071e  eeb81a41          VCVT.F32.U32 s2,s2                 ;764
000722  eeb80a40          VCVT.F32.U32 s0,s0                 ;764
000726  eef80a60          VCVT.F32.U32 s1,s1                 ;764
00072a  e9c50406          STRD     r0,r4,[r5,#0x18]      ;762
00072e  ee311a40          VSUB.F32 s2,s2,s0              ;764
000732  ee000a10          VMOV     s0,r0                 ;764
000736  eeb80a40          VCVT.F32.U32 s0,s0                 ;764
00073a  ee700a60          VSUB.F32 s1,s0,s1              ;764
00073e  ee810a20          VDIV.F32 s0,s2,s1              ;764
000742  ee000a90          VMOV     s1,r0                 ;765
000746  eeb81a60          VCVT.F32.U32 s2,s1                 ;765
00074a  ee004a90          VMOV     s1,r4                 ;765
00074e  eef80a60          VCVT.F32.U32 s1,s1                 ;765
000752  ed880a1c          VSTR     s0,[r8,#0x70]         ;764
000756  ee400a41          VMLS.F32 s1,s0,s2              ;765
00075a  edc80a21          VSTR     s1,[r8,#0x84]         ;765
00075e  e026              B        |L1.1966|
                  |L1.1888|
000760  f8c97024          STR      r7,[r9,#0x24]         ;771  ; Run_Control
                  |L1.1892|
000764  7037              STRB     r7,[r6,#0]            ;772
000766  e4bb              B        |L1.224|
                  |L1.1896|
;;;776    		{
;;;777    			
;;;778    			x2 = Rmon_value;
000768  8800              LDRH     r0,[r0,#0]  ; Rmon_value
;;;779    			y2 = data;
;;;780    			CalPara.TestR[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
00076a  ee014a10          VMOV     s2,r4
00076e  eeb80a40          VCVT.F32.U32 s0,s0
000772  eef80a60          VCVT.F32.U32 s1,s1
000776  eeb81a41          VCVT.F32.U32 s2,s2
00077a  e9c50406          STRD     r0,r4,[r5,#0x18]      ;778
00077e  ee311a40          VSUB.F32 s2,s2,s0
000782  ee000a10          VMOV     s0,r0
000786  eeb80a40          VCVT.F32.U32 s0,s0
00078a  ee700a60          VSUB.F32 s1,s0,s1
00078e  ee810a20          VDIV.F32 s0,s2,s1
;;;781    			CalPara.OffsetR[2] = (float)y2 - CalPara.TestR[2]*(float)x2;
000792  ee000a90          VMOV     s1,r0
000796  eeb81a60          VCVT.F32.U32 s2,s1
00079a  ee004a90          VMOV     s1,r4
00079e  eef80a60          VCVT.F32.U32 s1,s1
0007a2  ed880a1a          VSTR     s0,[r8,#0x68]         ;780
0007a6  ee400a41          VMLS.F32 s1,s0,s2
0007aa  edc80a1f          VSTR     s1,[r8,#0x7c]
                  |L1.1966|
;;;782    				//参数写进FLASH
;;;783    			Flag_DAC_OFF=0;
;;;784    			calflag = 0;
0007ae  f8cc2000          STR      r2,[r12,#0]  ; flagB
0007b2  7033              STRB     r3,[r6,#0]
                  |L1.1972|
;;;785    		}
;;;786    		
;;;787    	}
;;;788    		
;;;789    
;;;790    	Write_Flash_Bytes();
0007b4  e8bd5ff0          POP      {r4-r12,lr}
0007b8  f7ffbffe          B.W      Write_Flash_Bytes
;;;791    //	else if(mode == 1){//测量电流
;;;792    //		if(range == 1)
;;;793    //		{
;;;794    //			x1 = abs(I_CS);
;;;795    //			y1 = data;
;;;796    //		}else if(range == 2){
;;;797    //			x2 = abs(I_CS);
;;;798    //			y2 = data;
;;;799    //			SaveDebug.TestIcal[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;800    //			SaveDebug.OffsetI[1] = (float)y2 - SaveDebug.TestIcal[1]*(float)x2;
;;;801    //		}else if(range == 4){
;;;802    //			x1 = abs(I_CS);
;;;803    //			y1 = data;
;;;804    //		}else if(range == 5){
;;;805    //			x2 = abs(I_CS);
;;;806    //			y2 = data;
;;;807    //			SaveDebug.TestIcal[4] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;808    //			SaveDebug.OffsetI[3] = (float)y2 - SaveDebug.TestIcal[4]*(float)x2;
;;;809    //		}else if(range == 0){
;;;810    //			SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[0]);
;;;811    //		}else if(range == 3){
;;;812    //			SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[0]));
;;;813    //		}
;;;814    ////		else if(range == 4){
;;;815    ////			x1 = V_CS;
;;;816    ////			y1 = data;
;;;817    ////		}else if(range == 5){
;;;818    ////			x2 = V_CS;
;;;819    ////			y2 = data;
;;;820    ////			SaveDebug.TestVcal[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;821    ////			SaveDebug.OffsetV[2] = (float)y2 - SaveDebug.TestVcal[2]*(float)x2;
;;;822    ////		}
;;;823    //		
;;;824    ////		if(range < 3)
;;;825    ////		{
;;;826    ////			if(range == 0)
;;;827    ////			{
;;;828    ////				SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[0]);
;;;829    ////			}else{
;;;830    ////				SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[1]);
;;;831    ////			}			
;;;832    ////		}else{
;;;833    ////			if(range == 3)
;;;834    ////			{
;;;835    ////				SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[0]));
;;;836    ////			}else{
;;;837    ////				SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[1]));
;;;838    ////			}
;;;839    ////		}
;;;840    ////		calflag = 1;
;;;841    //	}else if(mode == 2){//控制电压
;;;842    //		if(range == 0)
;;;843    //		{
;;;844    //			_D_ = 1000;
;;;845    //			x1 = data;
;;;846    //			y1 = _D_;
;;;847    //		}else if(range == 1){
;;;848    //			_D_ = 7000;
;;;849    //			x2 = data;
;;;850    //			y2 = _D_;
;;;851    //			SaveDebug.ControlV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;852    //			SaveDebug.OffsetCV[0] = (float)y2 - SaveDebug.ControlV[0]*(float)x2;
;;;853    //		}else if(range == 2){
;;;854    //			_D_ = 10000;
;;;855    //			x1 = data;
;;;856    //			y1 = _D_;
;;;857    //		}else if(range == 3){
;;;858    //			_D_ = 13000;
;;;859    //			x2 = data;
;;;860    //			y2 = _D_;
;;;861    //			SaveDebug.ControlV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;862    //			SaveDebug.OffsetCV[1] = (float)y2 - SaveDebug.ControlV[1]*(float)x2;
;;;863    //		}else if(range == 4){
;;;864    //			_D_ = 17000;
;;;865    //			x1 = data;
;;;866    //			y1 = _D_;
;;;867    //		}else if(range == 5){
;;;868    //			_D_ = 20000;
;;;869    //			x2 = data;
;;;870    //			y2 = _D_;
;;;871    //			SaveDebug.ControlV[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;872    //			SaveDebug.OffsetCV[2] = (float)y2 - SaveDebug.ControlV[2]*(float)x2;
;;;873    //		}else if(range == 6){
;;;874    //			_D_ = 24000;
;;;875    //			x1 = data;
;;;876    //			y1 = _D_;
;;;877    //		}else if(range == 7){
;;;878    //			_D_ = 27000;
;;;879    //			x2 = data;
;;;880    //			y2 = _D_;
;;;881    //			SaveDebug.ControlV[3] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;882    //			SaveDebug.OffsetCV[3] = (float)y2 - SaveDebug.ControlV[3]*(float)x2;
;;;883    //		}
;;;884    //		
;;;885    ////		if(range == 0)
;;;886    ////		{
;;;887    ////			SaveDebug.ControlV[range] = (float)1000/(float)data;
;;;888    ////		}else if(range == 1){
;;;889    ////			SaveDebug.ControlV[range] = (float)10000/(float)data;
;;;890    ////		}else if(range == 2){
;;;891    ////			SaveDebug.ControlV[range] = (float)15000/(float)data;
;;;892    ////		}else if(range == 3){
;;;893    ////			SaveDebug.ControlV[range] = (float)19000/(float)data;
;;;894    ////		}
;;;895    ////		calflag = 1;
;;;896    //	}else if(mode == 3){//电流清零
;;;897    //		SaveDebug.ClearI[range] = I_CS;
;;;898    ////		calflag = 1;
;;;899    //	}
;;;900    	
;;;901    }
;;;902    
                          ENDP

                  |L1.1980|
                          DCD      0x40020800
                  |L1.1984|
                          DCD      Imon_Load_value
                  |L1.1988|
                          DCD      Rmon_value
                  |L1.1992|
                          DCD      R1mon_value
                  |L1.1996|
                          DCD      R2mon_value

                          AREA ||i.DMA1_Stream3_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Stream3_IRQHandler PROC
;;;2209   
;;;2210   void DMA1_Stream3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2211   {
;;;2212   	//----DMA1 通道3完成中断，对应的中断也需要清除
;;;2213   	if(DMA_GetITStatus(DMA1_Stream3,DMA_IT_TCIF3) != RESET)   
000002  4d0c              LDR      r5,|L2.52|
000004  4c0c              LDR      r4,|L2.56|
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       DMA_GetITStatus
00000e  2800              CMP      r0,#0
000010  d00e              BEQ      |L2.48|
;;;2214       {
;;;2215   		/* 清除标志位 */
;;;2216   		DMA_ClearFlag(DMA1_Stream3,DMA_IT_TCIF3); 
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       DMA_ClearFlag
;;;2217   		/* 关闭DMA */
;;;2218   		DMA_Cmd(DMA1_Stream3,DISABLE);
00001a  2100              MOVS     r1,#0
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       DMA_Cmd
;;;2219   		
;;;2220   		while (!(USART3->SR & USART_FLAG_TC));  //硬件数据发送完毕
000022  4806              LDR      r0,|L2.60|
                  |L2.36|
000024  8801              LDRH     r1,[r0,#0]
000026  0649              LSLS     r1,r1,#25
000028  d5fc              BPL      |L2.36|
                  |L2.42|
;;;2221   		while (!(USART3->SR & USART_FLAG_TXE)); //等待数据从软件拷贝到硬件进行发送
00002a  8801              LDRH     r1,[r0,#0]
00002c  0609              LSLS     r1,r1,#24
00002e  d5fc              BPL      |L2.42|
                  |L2.48|
;;;2222   	}
;;;2223   }
000030  bd70              POP      {r4-r6,pc}
;;;2224   
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      0x18008000
                  |L2.56|
                          DCD      0x40026058
                  |L2.60|
                          DCD      0x40004800

                          AREA ||i.IsDigitChar||, CODE, READONLY, ALIGN=1

                  IsDigitChar PROC
;;;87     /*****************************************************************/
;;;88     unsigned short IsDigitChar(unsigned char a)             //如果a的值是数字的话返回1，否则返回0
000000  3830              SUBS     r0,r0,#0x30
;;;89     {
;;;90     	int b;
;;;91       if(a<0x30 || a>0x39)                     //数字1-9
000002  280a              CMP      r0,#0xa
000004  d301              BCC      |L3.10|
;;;92       	{
;;;93       	   b=0;
000006  2000              MOVS     r0,#0
;;;94       	}
;;;95       else
;;;96       	{
;;;97       	   b=1;
;;;98       	}
;;;99       return b;
;;;100    }
000008  4770              BX       lr
                  |L3.10|
00000a  2001              MOVS     r0,#1                 ;97
00000c  4770              BX       lr
;;;101    void SetPowerV(vu16 powv)
                          ENDP


                          AREA ||i.LIST_ONOFF||, CODE, READONLY, ALIGN=2

                  LIST_ONOFF PROC
;;;332    
;;;333    void LIST_ONOFF(vu8 value)
000000  e92d43f1          PUSH     {r0,r4-r9,lr}
;;;334    {
;;;335    	switch(MODE)
000004  4f51              LDR      r7,|L4.332|
000006  ed2d8b02          VPUSH    {d8}                  ;334
00000a  f897c005          LDRB     r12,[r7,#5]  ; MODE
;;;336    	{
;;;337    		case 0://电子负载ON/OFF
;;;338    		{
;;;339    			if( value == 0 ){
;;;340    				
;;;341    				Flag_Swtich_ON = 0;
00000e  4950              LDR      r1,|L4.336|
000010  2600              MOVS     r6,#0                 ;335
;;;342    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
000012  4d50              LDR      r5,|L4.340|
000014  6808              LDR      r0,[r1,#0]            ;341
;;;343    			}
;;;344    			else if( value == 1 ){
;;;345    				
;;;346    				Flag_Swtich_ON = 1;
;;;347    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;348    			}
;;;349    		}break;
;;;350    		case 1://稳压电源ON/OFF
;;;351    		{
;;;352    			if( value == 0 ){
;;;353    				listsend = 1;
000016  2301              MOVS     r3,#1
;;;354    //				PowerSwitch(0);
;;;355    //				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;356    //				Para.CSET_Voltage = 0;
;;;357    //				Para.CSET_Current = 0;
;;;358    //				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;359    			}
;;;360    			else if( value == 1 ){
;;;361    				listsend = 1;
;;;362    //				PowerSwitch(1);
;;;363    //				Para.CSET_Voltage = Para.CDC_OutPut_V;
;;;364    //				Para.CSET_Current = Para.CDC_Limit_C;
;;;365    //				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;366    //				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;367    			}
;;;368    		}break;
;;;369    		case 2://过流测试ON/OFF
;;;370    		{
;;;371    			if( value == 0 ){
;;;372    				
;;;373    				Off_GPOI_ResetSet();
;;;374    				trig_flag_state = 0;
;;;375    				max_discahrgeNum = 0;
;;;376    				Para.CSET_Current_Laod =  Para.IR_Start_C;
000018  4c4f              LDR      r4,|L4.344|
00001a  f0200240          BIC      r2,r0,#0x40           ;341
00001e  f0400040          ORR      r0,r0,#0x40           ;346
000022  f1bc0f05          CMP      r12,#5                ;335
000026  d217              BCS      |L4.88|
000028  e8dff00c          TBB      [pc,r12]              ;335
00002c  8a0e1a62          DCB      0x8a,0x0e,0x1a,0x62
000030  8a00              DCB      0x8a,0x00
                  |L4.50|
000032  600a              STR      r2,[r1,#0]            ;342  ; flagA
000034  2180              MOVS     r1,#0x80              ;342
000036  e06e              B        |L4.278|
                  |L4.56|
000038  f89d2008          LDRB     r2,[sp,#8]            ;344
00003c  2a01              CMP      r2,#1                 ;344
00003e  d10b              BNE      |L4.88|
000040  6008              STR      r0,[r1,#0]            ;347  ; flagA
000042  2180              MOVS     r1,#0x80              ;347
000044  4628              MOV      r0,r5                 ;347
000046  e075              B        |L4.308|
000048  f89d0008          LDRB     r0,[sp,#8]            ;352
00004c  b118              CBZ      r0,|L4.86|
00004e  f89d0008          LDRB     r0,[sp,#8]            ;360
000052  2801              CMP      r0,#1                 ;360
000054  d100              BNE      |L4.88|
                  |L4.86|
000056  727b              STRB     r3,[r7,#9]            ;353
                  |L4.88|
;;;377    			}
;;;378    			else if( value == 1 ){
;;;379    				LOAD_I_SW = 1;
;;;380    				testv = DISS_Voltage;
;;;381    				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
;;;382    				Para.CSET_Current = 1000;
;;;383    				Para.CSET_Current_Laod =  Para.IR_Start_C;
;;;384    				shorttime = 0;
;;;385    				old_I = 0;
;;;386    				max_discahrgeNum = 0;
;;;387    				trig_flag_state = 1;
;;;388    				C_DISCHARGE = 1;        	
;;;389    				Flag_Swtich_ON = 1;
;;;390    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
;;;391    				max_discahrgeNum = (float)Para.IR_Start_C / 1000;				
;;;392    //				testv = DISS_Voltage;
;;;393    //				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
;;;394    //				Para.CSET_Current = 1000;
;;;395    //				Para.CSET_Current_Laod = Para.IR_Start_C;
;;;396    //				shorttime = 0;
;;;397    //				old_I = 0;
;;;398    //				max_discahrgeNum = 0;
;;;399    //				trig_flag_state = 1;
;;;400    //				C_DISCHARGE = 1;
;;;401    //				Flag_Swtich_ON = 1;
;;;402    //				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
;;;403    //				max_discahrgeNum = (float)Para.IR_Start_C / 1000;
;;;404    			}
;;;405    		}break;
;;;406    		case 3://过充测试ON/OFF
;;;407    		{
;;;408    			if( value == 0 ){
;;;409    				
;;;410    				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;411    				Para.CSET_Voltage = 0;
;;;412    				Para.CSET_Current = 0;
;;;413    				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;414    			}
;;;415    			else if( value == 1 ){
;;;416    				Para.CSET_Voltage = Para.CDC_OutPut_V;
;;;417    				Para.CSET_Current = Para.CDC_Limit_C;
;;;418    				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;419    				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;420    			}
;;;421    		}break;
;;;422    		case 4://电子负载ON/OFF
;;;423    		{
;;;424    			if( value == 0 ){
;;;425    				
;;;426    				Flag_Swtich_ON = 0;
;;;427    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
;;;428    			}
;;;429    			else if( value == 1 ){
;;;430    				
;;;431    				Flag_Swtich_ON = 1;
;;;432    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;433    			}
;;;434    		}break;
;;;435    	}
;;;436    }
000058  ecbd8b02          VPOP     {d8}
00005c  e8bd83f8          POP      {r3-r9,pc}
000060  f89d2008          LDRB     r2,[sp,#8]            ;371
000064  f8df80f4          LDR      r8,|L4.348|
000068  ed9f8a3d          VLDR     s16,|L4.352|
00006c  4f3d              LDR      r7,|L4.356|
00006e  b3aa              CBZ      r2,|L4.220|
000070  f89d2008          LDRB     r2,[sp,#8]            ;378
000074  2a01              CMP      r2,#1                 ;378
000076  d1ef              BNE      |L4.88|
000078  4a3b              LDR      r2,|L4.360|
00007a  6213              STR      r3,[r2,#0x20]         ;379  ; Run_Control
00007c  4a3b              LDR      r2,|L4.364|
00007e  eddf8a3d          VLDR     s17,|L4.372|
000082  ed920a00          VLDR     s0,[r2,#0]            ;380
000086  4a3a              LDR      r2,|L4.368|
000088  ed820a00          VSTR     s0,[r2,#0]            ;380
00008c  ee200a28          VMUL.F32 s0,s0,s17             ;381
000090  eebd0ac0          VCVT.S32.F32 s0,s0                 ;381
000094  ee102a10          VMOV     r2,s0                 ;381
000098  f502727a          ADD      r2,r2,#0x3e8          ;381
00009c  60a2              STR      r2,[r4,#8]            ;381  ; Para
00009e  f44f727a          MOV      r2,#0x3e8             ;382
0000a2  60e2              STR      r2,[r4,#0xc]          ;382  ; Para
0000a4  6c62              LDR      r2,[r4,#0x44]         ;383  ; Para
0000a6  6162              STR      r2,[r4,#0x14]         ;383  ; Para
0000a8  4a33              LDR      r2,|L4.376|
0000aa  7016              STRB     r6,[r2,#0]            ;384
0000ac  4a33              LDR      r2,|L4.380|
0000ae  ed828a00          VSTR     s16,[r2,#0]           ;385
0000b2  ed878a00          VSTR     s16,[r7,#0]           ;386
0000b6  f8883000          STRB     r3,[r8,#0]            ;387
0000ba  4a31              LDR      r2,|L4.384|
0000bc  7013              STRB     r3,[r2,#0]            ;388
0000be  6008              STR      r0,[r1,#0]            ;390  ; flagA
0000c0  2180              MOVS     r1,#0x80              ;390
0000c2  4628              MOV      r0,r5                 ;390
0000c4  f7fffffe          BL       GPIO_ResetBits
0000c8  6c60              LDR      r0,[r4,#0x44]         ;391  ; Para
0000ca  ee000a10          VMOV     s0,r0                 ;391
0000ce  eeb80a40          VCVT.F32.U32 s0,s0                 ;391
0000d2  eec00a28          VDIV.F32 s1,s0,s17             ;391
0000d6  edc70a00          VSTR     s1,[r7,#0]            ;391
0000da  e7bd              B        |L4.88|
                  |L4.220|
0000dc  e7ff              B        |L4.222|
                  |L4.222|
0000de  f7fffffe          BL       Off_GPOI_ResetSet
0000e2  f8886000          STRB     r6,[r8,#0]            ;374
0000e6  ed878a00          VSTR     s16,[r7,#0]           ;375
0000ea  6c60              LDR      r0,[r4,#0x44]         ;376  ; Para
0000ec  6160              STR      r0,[r4,#0x14]         ;376  ; Para
0000ee  e7b3              B        |L4.88|
0000f0  f89d0008          LDRB     r0,[sp,#8]            ;408
0000f4  4f23              LDR      r7,|L4.388|
0000f6  b1a8              CBZ      r0,|L4.292|
0000f8  f89d0008          LDRB     r0,[sp,#8]            ;415
0000fc  2801              CMP      r0,#1                 ;415
0000fe  d1ab              BNE      |L4.88|
000100  f8b40064          LDRH     r0,[r4,#0x64]         ;416  ; Para
000104  60a0              STR      r0,[r4,#8]            ;416  ; Para
000106  f8b40066          LDRH     r0,[r4,#0x66]         ;417  ; Para
00010a  60e0              STR      r0,[r4,#0xc]          ;417  ; Para
00010c  2104              MOVS     r1,#4                 ;418
00010e  4638              MOV      r0,r7                 ;418
000110  f7fffffe          BL       GPIO_SetBits
000114  2102              MOVS     r1,#2                 ;419
                  |L4.278|
000116  ecbd8b02          VPOP     {d8}                  ;427
00011a  4628              MOV      r0,r5                 ;427
00011c  e8bd43f8          POP      {r3-r9,lr}            ;427
000120  f7ffbffe          B.W      GPIO_SetBits
                  |L4.292|
000124  2102              MOVS     r1,#2                 ;410
000126  4628              MOV      r0,r5                 ;410
000128  f7fffffe          BL       GPIO_ResetBits
00012c  60a6              STR      r6,[r4,#8]            ;411  ; Para
00012e  60e6              STR      r6,[r4,#0xc]          ;412  ; Para
000130  2104              MOVS     r1,#4                 ;413
000132  4638              MOV      r0,r7                 ;413
                  |L4.308|
000134  ecbd8b02          VPOP     {d8}                  ;432
000138  e8bd43f8          POP      {r3-r9,lr}            ;432
00013c  f7ffbffe          B.W      GPIO_ResetBits
000140  f89d3008          LDRB     r3,[sp,#8]            ;424
000144  2b00              CMP      r3,#0                 ;424
000146  f47faf77          BNE      |L4.56|
00014a  e772              B        |L4.50|
;;;437    
                          ENDP

                  |L4.332|
                          DCD      ||.data||
                  |L4.336|
                          DCD      flagA
                  |L4.340|
                          DCD      0x40020800
                  |L4.344|
                          DCD      Para
                  |L4.348|
                          DCD      trig_flag_state
                  |L4.352|
000160  00000000          DCFS     0x00000000 ; 0
                  |L4.356|
                          DCD      max_discahrgeNum
                  |L4.360|
                          DCD      Run_Control
                  |L4.364|
                          DCD      DISS_Voltage
                  |L4.368|
                          DCD      testv
                  |L4.372|
000174  447a0000          DCFS     0x447a0000 ; 1000
                  |L4.376|
                          DCD      shorttime
                  |L4.380|
                          DCD      old_I
                  |L4.384|
                          DCD      C_DISCHARGE
                  |L4.388|
                          DCD      0x40021000

                          AREA ||i.MODE_ONOFF||, CODE, READONLY, ALIGN=2

                  MODE_ONOFF PROC
;;;258    
;;;259    void MODE_ONOFF(vu8 value)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;260    {
;;;261    	switch(MODE)
000004  4a41              LDR      r2,|L5.268|
000006  ed2d8b02          VPUSH    {d8}                  ;260
00000a  7951              LDRB     r1,[r2,#5]  ; MODE
;;;262    	{
;;;263    		case 0://电子负载ON/OFF
;;;264    		{
;;;265    			if( value == 0 ){
;;;266    				
;;;267    				Flag_Swtich_ON = 0;
00000c  4d40              LDR      r5,|L5.272|
;;;268    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
00000e  4841              LDR      r0,|L5.276|
000010  b3e9              CBZ      r1,|L5.142|
;;;269    			}
;;;270    			else if( value == 1 ){
;;;271    				
;;;272    				Flag_Swtich_ON = 1;
;;;273    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;274    			}
;;;275    		}break;
;;;276    		case 1://稳压电源ON/OFF
;;;277    		{
;;;278    			sendwait = 1;
000012  2601              MOVS     r6,#1
000014  2901              CMP      r1,#1                 ;261
000016  d06d              BEQ      |L5.244|
000018  2902              CMP      r1,#2                 ;261
00001a  d14a              BNE      |L5.178|
;;;279    //			if( value == 0 ){
;;;280    //				sendwait = 1;
;;;281    ////				PowerSwitch(0);//关闭电源输出
;;;282    ////				Delay_ms(1000);
;;;283    ////				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;284    ////				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;285    //////				Delay_ms(1000);
;;;286    ////				Para.CSET_Voltage = 0;
;;;287    ////				Para.CSET_Current = 0;
;;;288    //////				Delay_ms(1000);
;;;289    ////				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;290    //			}
;;;291    //			else if( value == 1 ){
;;;292    ////				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;293    //////				Delay_ms(1000);
;;;294    ////				PowerSwitch(1);//打开电源输出
;;;295    //				
;;;296    //////				
;;;297    ////				Para.CSET_Voltage = Para.POWER_OutPut_V;
;;;298    ////				Para.CSET_Current = Para.POWER_Limit_C;
;;;299    //////				Delay_ms(1000);
;;;300    ////				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;301    //				
;;;302    //			}
;;;303    		}break;
;;;304    		case 2://过流测试ON/OFF
;;;305    		{
;;;306    			if( value == 0 ){
00001c  f89d1008          LDRB     r1,[sp,#8]
;;;307    				
;;;308    				Off_GPOI_ResetSet();
;;;309    				trig_flag_state = 0;
000020  f8df90f4          LDR      r9,|L5.280|
;;;310    				max_discahrgeNum = 0;
000024  ed9f8a3d          VLDR     s16,|L5.284|
000028  f8df80f4          LDR      r8,|L5.288|
;;;311    				Para.CSET_Current_Laod =  Para.IR_Start_C;
00002c  4c3d              LDR      r4,|L5.292|
00002e  2700              MOVS     r7,#0                 ;306
000030  b371              CBZ      r1,|L5.144|
;;;312    			}
;;;313    			else if( value == 1 ){
000032  f89d1008          LDRB     r1,[sp,#8]
000036  2901              CMP      r1,#1
000038  d13b              BNE      |L5.178|
;;;314    				LOAD_MODE = 0;
00003a  493b              LDR      r1,|L5.296|
00003c  618f              STR      r7,[r1,#0x18]  ; Run_Control
;;;315    				GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
00003e  1481              ASRS     r1,r0,#18
000040  4682              MOV      r10,r0
000042  f7fffffe          BL       GPIO_ResetBits
;;;316    				Para.CSET_Current_Laod =  Para.IR_Start_C;
000046  6c60              LDR      r0,[r4,#0x44]  ; Para
000048  6160              STR      r0,[r4,#0x14]  ; Para
;;;317    				testv = DISS_Voltage;
00004a  4838              LDR      r0,|L5.300|
;;;318    				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
00004c  eddf8a39          VLDR     s17,|L5.308|
000050  ed900a00          VLDR     s0,[r0,#0]            ;317
000054  4836              LDR      r0,|L5.304|
000056  ed800a00          VSTR     s0,[r0,#0]            ;317
00005a  ee200a28          VMUL.F32 s0,s0,s17
00005e  eebd0ac0          VCVT.S32.F32 s0,s0
000062  ee100a10          VMOV     r0,s0
000066  f500707a          ADD      r0,r0,#0x3e8
00006a  60a0              STR      r0,[r4,#8]  ; Para
;;;319    				Para.CSET_Current = 1000;
00006c  f44f707a          MOV      r0,#0x3e8
000070  60e0              STR      r0,[r4,#0xc]  ; Para
;;;320    				shorttime = 0;
000072  4831              LDR      r0,|L5.312|
000074  7007              STRB     r7,[r0,#0]
;;;321    				old_I = 0;
000076  4831              LDR      r0,|L5.316|
;;;322    				max_discahrgeNum = 0;
000078  4647              MOV      r7,r8
00007a  ed808a00          VSTR     s16,[r0,#0]           ;321
00007e  ed888a00          VSTR     s16,[r8,#0]
;;;323    				trig_flag_state = 1;
000082  f8896000          STRB     r6,[r9,#0]
;;;324    				C_DISCHARGE = 1;        	
000086  482e              LDR      r0,|L5.320|
000088  7006              STRB     r6,[r0,#0]
;;;325    				Flag_Swtich_ON = 1;
00008a  6828              LDR      r0,[r5,#0]  ; flagA
00008c  e001              B        |L5.146|
                  |L5.142|
00008e  e014              B        |L5.186|
                  |L5.144|
000090  e032              B        |L5.248|
                  |L5.146|
000092  f0400040          ORR      r0,r0,#0x40
;;;326    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
000096  6028              STR      r0,[r5,#0]  ; flagA
000098  2180              MOVS     r1,#0x80
00009a  4650              MOV      r0,r10
00009c  f7fffffe          BL       GPIO_ResetBits
;;;327    				max_discahrgeNum = (float)Para.IR_Start_C / 1000;
0000a0  6c60              LDR      r0,[r4,#0x44]  ; Para
0000a2  ee000a10          VMOV     s0,r0
0000a6  eeb80a40          VCVT.F32.U32 s0,s0
0000aa  eec00a28          VDIV.F32 s1,s0,s17
0000ae  edc70a00          VSTR     s1,[r7,#0]
                  |L5.178|
;;;328    			}
;;;329    		}break;
;;;330    	}
;;;331    }
0000b2  ecbd8b02          VPOP     {d8}
0000b6  e8bd8ff8          POP      {r3-r11,pc}
                  |L5.186|
0000ba  f89d2008          LDRB     r2,[sp,#8]            ;265
0000be  4914              LDR      r1,|L5.272|
0000c0  6809              LDR      r1,[r1,#0]            ;267
0000c2  b16a              CBZ      r2,|L5.224|
0000c4  f89d2008          LDRB     r2,[sp,#8]            ;270
0000c8  2a01              CMP      r2,#1                 ;270
0000ca  d1f2              BNE      |L5.178|
0000cc  f0410140          ORR      r1,r1,#0x40           ;272
0000d0  6029              STR      r1,[r5,#0]            ;273  ; flagA
0000d2  2180              MOVS     r1,#0x80              ;273
0000d4  ecbd8b02          VPOP     {d8}                  ;273
0000d8  e8bd4ff8          POP      {r3-r11,lr}           ;273
0000dc  f7ffbffe          B.W      GPIO_ResetBits
                  |L5.224|
0000e0  f0210140          BIC      r1,r1,#0x40           ;267
0000e4  6029              STR      r1,[r5,#0]            ;268  ; flagA
0000e6  2180              MOVS     r1,#0x80              ;268
0000e8  ecbd8b02          VPOP     {d8}                  ;268
0000ec  e8bd4ff8          POP      {r3-r11,lr}           ;268
0000f0  f7ffbffe          B.W      GPIO_SetBits
                  |L5.244|
0000f4  7216              STRB     r6,[r2,#8]            ;278
0000f6  e7dc              B        |L5.178|
                  |L5.248|
0000f8  f7fffffe          BL       Off_GPOI_ResetSet
0000fc  f8897000          STRB     r7,[r9,#0]            ;309
000100  ed888a00          VSTR     s16,[r8,#0]           ;310
000104  6c60              LDR      r0,[r4,#0x44]         ;311  ; Para
000106  6160              STR      r0,[r4,#0x14]         ;311  ; Para
000108  e7d3              B        |L5.178|
;;;332    
                          ENDP

00010a  0000              DCW      0x0000
                  |L5.268|
                          DCD      ||.data||
                  |L5.272|
                          DCD      flagA
                  |L5.276|
                          DCD      0x40020800
                  |L5.280|
                          DCD      trig_flag_state
                  |L5.284|
00011c  00000000          DCFS     0x00000000 ; 0
                  |L5.288|
                          DCD      max_discahrgeNum
                  |L5.292|
                          DCD      Para
                  |L5.296|
                          DCD      Run_Control
                  |L5.300|
                          DCD      DISS_Voltage
                  |L5.304|
                          DCD      testv
                  |L5.308|
000134  447a0000          DCFS     0x447a0000 ; 1000
                  |L5.312|
                          DCD      shorttime
                  |L5.316|
                          DCD      old_I
                  |L5.320|
                          DCD      C_DISCHARGE

                          AREA ||i.MODE_PARASET||, CODE, READONLY, ALIGN=2

                  MODE_PARASET PROC
;;;437    
;;;438    void MODE_PARASET(vu8 value)
000000  b570              PUSH     {r4-r6,lr}
;;;439    {
;;;440    	switch(MODE)
000002  4a1a              LDR      r2,|L6.108|
000004  7950              LDRB     r0,[r2,#5]  ; MODE
;;;441    	{
;;;442    		case 0://电子负载
;;;443    		{
;;;444    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;445    			mainswitch = 0;
;;;446    			sendwait = 3;
000006  2603              MOVS     r6,#3
;;;447    			LOAD_MODE = Para.CLOAD_MODE;
000008  4919              LDR      r1,|L6.112|
;;;448    			Para.CSET_Current_Laod = Para.LOAD_C;
;;;449    			Para.CSET_Voltage_Laod = Para.LOAD_V;
;;;450    			if(Para.CSET_Current_Laod > 20000)
;;;451    			{
;;;452    				LOAD_I_SW = 1;
00000a  2401              MOVS     r4,#1
00000c  4d19              LDR      r5,|L6.116|
00000e  2300              MOVS     r3,#0
000010  b168              CBZ      r0,|L6.46|
000012  2801              CMP      r0,#1                 ;440
000014  d01d              BEQ      |L6.82|
000016  2802              CMP      r0,#2                 ;440
000018  d01e              BEQ      |L6.88|
00001a  2803              CMP      r0,#3                 ;440
00001c  d116              BNE      |L6.76|
;;;453    			}else{
;;;454    				LOAD_I_SW = 0;
;;;455    			}
;;;456    		}break;
;;;457    		case 1://稳压电源
;;;458    		{
;;;459    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;460    			mainswitch = 0;
;;;461    //			if(USART3_Recive_flg == 1)
;;;462    //			{
;;;463    				sendwait = 1;
;;;464    //			}else{
;;;465    //				SetPowerMode();
;;;466    //			}
;;;467    //			Para.CSET_Voltage = Para.POWER_OutPut_V;
;;;468    //			SetPowerV(Para.POWER_OutPut_V);
;;;469    //	//			Para.CSET_Current = Para.POWER_Limit_C;
;;;470    //			SetPowerC(Para.POWER_Limit_C);
;;;471    		}break;
;;;472    		case 2://过流测试
;;;473    		{
;;;474    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;475    			mainswitch = 0;
;;;476    			sendwait = 3;
;;;477    			
;;;478    			LOAD_MODE = 0;
;;;479    			LOAD_I_SW = 1;
;;;480    			Para.CSET_Current = 1000;
;;;481    			Para.CSET_Current_Laod = Para.IR_Start_C;
;;;482    		}break;
;;;483    		case 3://列表
;;;484    		{
;;;485    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;486    			mainswitch = 0;
00001e  7193              STRB     r3,[r2,#6]
;;;487    			sendwait = 3;
000020  7216              STRB     r6,[r2,#8]
;;;488    			
;;;489    			LOAD_MODE = 0;
000022  61ab              STR      r3,[r5,#0x18]  ; Run_Control
;;;490    			GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
000024  0321              LSLS     r1,r4,#12
000026  4814              LDR      r0,|L6.120|
000028  f7fffffe          BL       GPIO_ResetBits
;;;491    			LOAD_I_SW = 1;
;;;492    //			Para.CSET_Current = 1000;
;;;493    		}break;
00002c  e00d              B        |L6.74|
                  |L6.46|
00002e  7193              STRB     r3,[r2,#6]            ;445
000030  7216              STRB     r6,[r2,#8]            ;446
000032  6988              LDR      r0,[r1,#0x18]         ;447  ; Para
000034  61a8              STR      r0,[r5,#0x18]         ;447  ; Run_Control
000036  6dc8              LDR      r0,[r1,#0x5c]         ;448  ; Para
000038  6148              STR      r0,[r1,#0x14]         ;448  ; Para
00003a  f8b10060          LDRH     r0,[r1,#0x60]         ;449  ; Para
00003e  6108              STR      r0,[r1,#0x10]         ;449  ; Para
000040  6948              LDR      r0,[r1,#0x14]         ;450  ; Para
000042  f6446120          MOV      r1,#0x4e20            ;450
000046  4288              CMP      r0,r1                 ;450
000048  d901              BLS      |L6.78|
                  |L6.74|
00004a  622c              STR      r4,[r5,#0x20]         ;452  ; Run_Control
                  |L6.76|
;;;494    	}
;;;495    }
00004c  bd70              POP      {r4-r6,pc}
                  |L6.78|
00004e  622b              STR      r3,[r5,#0x20]         ;454  ; Run_Control
000050  bd70              POP      {r4-r6,pc}
                  |L6.82|
000052  7193              STRB     r3,[r2,#6]            ;460
000054  7214              STRB     r4,[r2,#8]            ;463
000056  bd70              POP      {r4-r6,pc}
                  |L6.88|
000058  7193              STRB     r3,[r2,#6]            ;475
00005a  7216              STRB     r6,[r2,#8]            ;476
00005c  61ab              STR      r3,[r5,#0x18]         ;478  ; Run_Control
00005e  622c              STR      r4,[r5,#0x20]         ;479  ; Run_Control
000060  f44f707a          MOV      r0,#0x3e8             ;480
000064  60c8              STR      r0,[r1,#0xc]          ;480  ; Para
000066  6c48              LDR      r0,[r1,#0x44]         ;481  ; Para
000068  6148              STR      r0,[r1,#0x14]         ;481  ; Para
00006a  bd70              POP      {r4-r6,pc}
;;;496    
                          ENDP

                  |L6.108|
                          DCD      ||.data||
                  |L6.112|
                          DCD      Para
                  |L6.116|
                          DCD      Run_Control
                  |L6.120|
                          DCD      0x40020800

                          AREA ||i.PowerSwitch||, CODE, READONLY, ALIGN=2

                  PowerSwitch PROC
;;;182    
;;;183    void PowerSwitch(vu8 bit)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;184    {
;;;185    	MasterSendbuf[0] = 0x01;
000002  4c0f              LDR      r4,|L7.64|
000004  2001              MOVS     r0,#1
;;;186    	MasterSendbuf[1] = 0x06;
000006  2106              MOVS     r1,#6
000008  7020              STRB     r0,[r4,#0]            ;185
00000a  7061              STRB     r1,[r4,#1]
;;;187    	MasterSendbuf[2] = 0x00;
00000c  2100              MOVS     r1,#0
00000e  70a1              STRB     r1,[r4,#2]
;;;188    	MasterSendbuf[3] = 0x01;
000010  70e0              STRB     r0,[r4,#3]
;;;189    	MasterSendbuf[4] = (u8)(bit>>8);
000012  f89d0000          LDRB     r0,[sp,#0]
000016  7121              STRB     r1,[r4,#4]
;;;190    	MasterSendbuf[5] = (u8)(bit);
000018  f89d0000          LDRB     r0,[sp,#0]
00001c  7160              STRB     r0,[r4,#5]
;;;191    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00001e  2106              MOVS     r1,#6
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       Hardware_CRC
000026  71a0              STRB     r0,[r4,#6]
;;;192    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000028  2106              MOVS     r1,#6
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       Hardware_CRC
000030  0a00              LSRS     r0,r0,#8
000032  71e0              STRB     r0,[r4,#7]
;;;193    	USART3WriteDMA(8);
000034  e8bd4038          POP      {r3-r5,lr}
000038  2008              MOVS     r0,#8
00003a  f7ffbffe          B.W      USART3WriteDMA
;;;194    }
;;;195    
                          ENDP

00003e  0000              DCW      0x0000
                  |L7.64|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.ReadPowData||, CODE, READONLY, ALIGN=2

                  ReadPowData PROC
;;;195    
;;;196    void ReadPowData(void)
000000  b510              PUSH     {r4,lr}
;;;197    {
;;;198    	MasterSendbuf[0] = 0x01;
000002  4c0e              LDR      r4,|L8.60|
000004  2001              MOVS     r0,#1
;;;199    	MasterSendbuf[1] = 0x03;
;;;200    	MasterSendbuf[2] = 0x00;
;;;201    	MasterSendbuf[3] = 0x10;
000006  2110              MOVS     r1,#0x10
000008  7020              STRB     r0,[r4,#0]            ;198
00000a  2003              MOVS     r0,#3                 ;199
00000c  7060              STRB     r0,[r4,#1]            ;199
00000e  2000              MOVS     r0,#0                 ;200
000010  70a0              STRB     r0,[r4,#2]            ;200
000012  70e1              STRB     r1,[r4,#3]
;;;202    	MasterSendbuf[4] = 0x00;
000014  7120              STRB     r0,[r4,#4]
;;;203    	MasterSendbuf[5] = 0x02;
000016  2002              MOVS     r0,#2
000018  7160              STRB     r0,[r4,#5]
;;;204    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00001a  2106              MOVS     r1,#6
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       Hardware_CRC
000022  71a0              STRB     r0,[r4,#6]
;;;205    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000024  2106              MOVS     r1,#6
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       Hardware_CRC
00002c  0a00              LSRS     r0,r0,#8
00002e  71e0              STRB     r0,[r4,#7]
;;;206    	USART3WriteDMA(8);
000030  e8bd4010          POP      {r4,lr}
000034  2008              MOVS     r0,#8
000036  f7ffbffe          B.W      USART3WriteDMA
;;;207    }
;;;208    
                          ENDP

00003a  0000              DCW      0x0000
                  |L8.60|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.SerialRemoteHandleL||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  SerialRemoteHandleL PROC
;;;940    
;;;941    u16 SerialRemoteHandleL(u8 len,char* buf)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;942    {
000004  ed2d8b02          VPUSH    {d8}
000008  b0b3              SUB      sp,sp,#0xcc
00000a  4605              MOV      r5,r0
;;;943    
;;;944      
;;;945        u16 currCharNum;
;;;946        u32 temp1;
;;;947      u8 Gmode_Vale;
;;;948    	u8 i,j;
;;;949    	
;;;950    	u8 addr = 0;
00000c  2000              MOVS     r0,#0
00000e  460c              MOV      r4,r1                 ;942
;;;951    	char str[200]={0};
000010  9032              STR      r0,[sp,#0xc8]
000012  21c8              MOVS     r1,#0xc8
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       __aeabi_memclr4
;;;952    	int cmd_flag=255;
;;;953    	u8 templen =0;
;;;954    	u8 tmpFg;
;;;955    	u8 LM_S_Vale,LOW_I_Vale,H_L_Vale,SWITCH_Vale;
;;;956    	u16 I_ADC_Vale,V_ADC_Vale;
;;;957    	int32_t V_CS_Vale,I_CS_Vale;
;;;958    	float Lvl_Vale,fadcx,fsingal, fVale;
;;;959     
;;;960    //	u8 len = 11;
;;;961    	u8 pntlen = 0;
;;;962    
;;;963    
;;;964    	
;;;965    	currCharNum=0;
;;;966    	if((buf[currCharNum] != ChrStartR) || (buf[len-2] != ChrEndR)||(buf[len-1] != ChrEndS))
00001a  7820              LDRB     r0,[r4,#0]
00001c  283c              CMP      r0,#0x3c
00001e  d108              BNE      |L9.50|
000020  1960              ADDS     r0,r4,r5
000022  f8101c02          LDRB     r1,[r0,#-2]
000026  290d              CMP      r1,#0xd
000028  d103              BNE      |L9.50|
00002a  f8100c01          LDRB     r0,[r0,#-1]
00002e  280a              CMP      r0,#0xa
000030  d001              BEQ      |L9.54|
                  |L9.50|
;;;967        {
;;;968    		return SetErr_ACK(buf,addr ,CMD_ERR); 
000032  2202              MOVS     r2,#2
000034  e162              B        |L9.764|
                  |L9.54|
;;;969        } 
;;;970    	str[currCharNum++] = ChrStartR;
000036  213c              MOVS     r1,#0x3c
000038  f88d1000          STRB     r1,[sp,#0]
;;;971    	sprintf(&str[currCharNum],"%d",addr);
00003c  a1fe              ADR      r1,|L9.1080|
00003e  f10d0001          ADD      r0,sp,#1
000042  9a32              LDR      r2,[sp,#0xc8]
000044  f7fffffe          BL       __2sprintf
;;;972    	strncat(str,"/",1);
000048  2201              MOVS     r2,#1
00004a  a1fc              ADR      r1,|L9.1084|
00004c  4668              MOV      r0,sp
00004e  f7fffffe          BL       strncat
;;;973    	currCharNum =strlen(str);
000052  4668              MOV      r0,sp
000054  f7fffffe          BL       strlen
000058  fa1ffa80          UXTH     r10,r0
;;;974    	cmd_flag=strncmp(buf,str,strlen(str));
00005c  4668              MOV      r0,sp
00005e  f7fffffe          BL       strlen
000062  4602              MOV      r2,r0
000064  4669              MOV      r1,sp
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       strncmp
;;;975    	//testflag = cmd_flag;
;;;976    	if(0!=cmd_flag)
00006c  2800              CMP      r0,#0
00006e  d1e0              BNE      |L9.50|
;;;977    	{
;;;978    		return SetErr_ACK(buf, addr ,CMD_ERR);
;;;979    		
;;;980    	}
;;;981    	for (j=0;j<CmdNumb;j++)
;;;982        {
;;;983    		templen = strlen(CmdStr[j]);
000070  f8dfb3cc          LDR      r11,|L9.1088|
000074  4680              MOV      r8,r0                 ;981
;;;984    		cmd_flag=strncmp(&buf[currCharNum],CmdStr[j],templen);
000076  eb04090a          ADD      r9,r4,r10
                  |L9.122|
00007a  eb0801c8          ADD      r1,r8,r8,LSL #3       ;983
00007e  eb01000b          ADD      r0,r1,r11             ;983
000082  4606              MOV      r6,r0                 ;983
000084  f7fffffe          BL       strlen
000088  b2c5              UXTB     r5,r0                 ;983
00008a  4631              MOV      r1,r6                 ;983
00008c  4648              MOV      r0,r9                 ;983
00008e  462a              MOV      r2,r5
000090  f7fffffe          BL       strncmp
;;;985    	    if(0==cmd_flag)
000094  b138              CBZ      r0,|L9.166|
000096  f1080001          ADD      r0,r8,#1              ;981
00009a  f00008ff          AND      r8,r0,#0xff           ;981
00009e  f1b80f13          CMP      r8,#0x13              ;981
0000a2  d3ea              BCC      |L9.122|
0000a4  e7c5              B        |L9.50|
                  |L9.166|
;;;986    	    {
;;;987    
;;;988    		  buf[0] = ChrStartS;
0000a6  203e              MOVS     r0,#0x3e
0000a8  7020              STRB     r0,[r4,#0]
;;;989    		  currCharNum+=templen;
0000aa  eb0a0005          ADD      r0,r10,r5
;;;990    		  switch(j)
;;;991              {
;;;992    			case 0:
;;;993    				pntlen = 5;    //
;;;994    				if(buf[currCharNum]=='?')
;;;995    				{
;;;996    
;;;997    					
;;;998    					sprintf(&buf[currCharNum],"%05d",Para.CVoltage);
;;;999    					currCharNum+=pntlen;
;;;1000   					
;;;1001   					buf[currCharNum++]=(',');
;;;1002   					sprintf(&buf[currCharNum],"%06d",Para.CLaod_Current);
;;;1003   					currCharNum+=6;
;;;1004   					
;;;1005   					buf[currCharNum++]=(',');
;;;1006   					sprintf(&buf[currCharNum],"%05d",Para.CPOW_Voltage);
;;;1007   					currCharNum+=pntlen;
;;;1008   					
;;;1009   					buf[currCharNum++]=(',');
;;;1010   					sprintf(&buf[currCharNum],"%05d",Para.CCurrent);
;;;1011   					currCharNum+=pntlen;
;;;1012   					
;;;1013   					buf[currCharNum++]=(',');
;;;1014   					sprintf(&buf[currCharNum],"%05d",Para.CR_VLUE);
;;;1015   					currCharNum+=pntlen;
;;;1016   					
;;;1017   					buf[currCharNum++]=(',');
;;;1018   					sprintf(&buf[currCharNum],"%04d",Para.CR1_VLUE);
;;;1019   					currCharNum+=4;
;;;1020   					
;;;1021   					buf[currCharNum++]=(',');
;;;1022   					sprintf(&buf[currCharNum],"%04d",Para.CR2_VLUE);
;;;1023   					currCharNum+=4;
;;;1024   
;;;1025   					buf[currCharNum++]=(',');
;;;1026   					sprintf(&buf[currCharNum],"%06d",(int)(max_discahrgeNum*1000));
;;;1027   					currCharNum+=6;
;;;1028   					
;;;1029   					buf[currCharNum++]=(',');
;;;1030   					sprintf(&buf[currCharNum],"%03d",shorttime);
;;;1031   					currCharNum+=3;
;;;1032   					
;;;1033   					buf[currCharNum++]=(',');
;;;1034   					sprintf(&buf[currCharNum],"%1d",mainswitch);
0000ae  f8dfb390          LDR      r11,|L9.1088|
0000b2  b285              UXTH     r5,r0                 ;989
;;;1035   					currCharNum+=1;
;;;1036   					
;;;1037   					buf[currCharNum++]=(',');
;;;1038   					sprintf(&buf[currCharNum],"%1d",finishflag);
;;;1039   					currCharNum+=1;
;;;1040   					
;;;1041   					buf[currCharNum++]=(',');
;;;1042   					sprintf(&buf[currCharNum],"%1d",lockflag);
;;;1043   					currCharNum+=1;
;;;1044   					
;;;1045   					buf[currCharNum++]=(',');
;;;1046   					sprintf(&buf[currCharNum],"%2d",version);
;;;1047   					currCharNum+=2;
;;;1048   					
;;;1049   					buf[currCharNum++]=(',');
;;;1050   					sprintf(&buf[currCharNum],"%03d",Temperature);
;;;1051   					currCharNum+=3;
;;;1052   //					buf[currCharNum++]=(',');
;;;1053   //					sprintf(&buf[currCharNum],"%d",H_L);
;;;1054   //					currCharNum++;
;;;1055   					
;;;1056   //					buf[currCharNum++]=(',');
;;;1057   //					sprintf(&buf[currCharNum],"%d",LM_S);
;;;1058   //					currCharNum++;
;;;1059   					
;;;1060   //					buf[currCharNum++]=(',');
;;;1061   //					sprintf(&buf[currCharNum],"%02d",(int)temperature);
;;;1062   //					currCharNum+=2;
;;;1063   					
;;;1064   				  buf[currCharNum++ ] = ChrEndR;
;;;1065   				  buf[currCharNum++ ] = ChrEndS;
;;;1066   				}
;;;1067   				else
;;;1068   				{
;;;1069   					return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1070   				}
;;;1071   				break;
;;;1072   			case 1:
;;;1073   				pntlen = 1;
;;;1074   				if(buf[currCharNum]=='?')
;;;1075   				{
;;;1076   					  sprintf(&buf[currCharNum],"%1d",MODE);
;;;1077   				    currCharNum+=pntlen;
;;;1078   				    buf[currCharNum ++] = ChrEndS;
;;;1079   					
;;;1080   				}
;;;1081   				else
;;;1082   				{
;;;1083   					pntlen = 1;				
;;;1084   					for(i=0,temp1=0;i<pntlen;i++)
;;;1085   					{
;;;1086   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1087   					}		                   
;;;1088   //					if(temp1>1)
;;;1089   //					{
;;;1090   //						return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1091   //					}
;;;1092   					MODE=temp1;
;;;1093   					Off_GPOI_ResetSet();
;;;1094   					MODE_PARASET(MODE);
;;;1095   	//				Change_LM_Val(LM_S_Vale);
;;;1096   					buf[currCharNum++] = ChrEndR;
;;;1097   				}
;;;1098   				break;
;;;1099   				case 2:
;;;1100   				pntlen = 1;
;;;1101   				if(buf[currCharNum]=='?')
;;;1102   				{
;;;1103   					sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
0000b4  49e3              LDR      r1,|L9.1092|
0000b6  f8dfa390          LDR      r10,|L9.1096|
0000ba  4640              MOV      r0,r8                 ;990
0000bc  f04f090a          MOV      r9,#0xa               ;966
0000c0  f1ab0b34          SUB      r11,r11,#0x34         ;1034
0000c4  f06f062f          MVN      r6,#0x2f              ;1086
0000c8  f1b80f04          CMP      r8,#4                 ;990
0000cc  d07c              BEQ      |L9.456|
0000ce  dc0d              BGT      |L9.236|
0000d0  b350              CBZ      r0,|L9.296|
0000d2  2801              CMP      r0,#1                 ;990
0000d4  d079              BEQ      |L9.458|
0000d6  2802              CMP      r0,#2                 ;990
0000d8  d078              BEQ      |L9.460|
0000da  f1b80f03          CMP      r8,#3                 ;990
0000de  d1a8              BNE      |L9.50|
;;;1104   				    currCharNum+=pntlen;
;;;1105   				    buf[currCharNum ++] = ChrEndS;
;;;1106   					
;;;1107   				}
;;;1108   				else
;;;1109   				{
;;;1110   					pntlen = 1;				
;;;1111   					for(i=0,temp1=0;i<pntlen;i++)
;;;1112   					{
;;;1113   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1114   					}		                   
;;;1115   					if(temp1>1)
;;;1116   					{
;;;1117   						return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1118   					}
;;;1119   //					MODE=temp1;
;;;1120   					
;;;1121   					
;;;1122   					mainswitch = temp1;
;;;1123   //						Para.CSET_Voltage = 5000;
;;;1124   //						Para.CSET_Current = 1000;
;;;1125   					
;;;1126   						
;;;1127   					MODE_ONOFF(mainswitch);
;;;1128   	//				Change_LM_Val(LM_S_Vale);
;;;1129   					buf[currCharNum++] = ChrEndR;
;;;1130   		        }
;;;1131   				break;
;;;1132   				case 3:
;;;1133   				pntlen = 1;
;;;1134   				if(buf[currCharNum]=='?')
0000e0  5d60              LDRB     r0,[r4,r5]
0000e2  283f              CMP      r0,#0x3f
0000e4  d073              BEQ      |L9.462|
;;;1135   				{
;;;1136   					  sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1137   				    currCharNum+=pntlen;
;;;1138   				    buf[currCharNum ++] = ChrEndS;
;;;1139   					
;;;1140   				}
;;;1141   				else
;;;1142   				{
;;;1143   					if(currCharNum == 0x0b)
0000e6  2d0b              CMP      r5,#0xb
0000e8  d072              BEQ      |L9.464|
0000ea  e12e              B        |L9.842|
                  |L9.236|
0000ec  280c              CMP      r0,#0xc               ;990
0000ee  d070              BEQ      |L9.466|
0000f0  280d              CMP      r0,#0xd               ;990
0000f2  d06f              BEQ      |L9.468|
0000f4  280e              CMP      r0,#0xe               ;990
0000f6  d06e              BEQ      |L9.470|
0000f8  f1b80f12          CMP      r8,#0x12              ;990
0000fc  d199              BNE      |L9.50|
;;;1144   					{						
;;;1145   						for(i=0,temp1=0;i<5;i++)
;;;1146   						{
;;;1147   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1148   						}
;;;1149   					}		
;;;1150   					Para.IR_Start_C = temp1;//起始电流
;;;1151   					temp1 = 0;
;;;1152   					
;;;1153   					if(buf[currCharNum++] == ',')
;;;1154   					{
;;;1155   						for(i=0,temp1=0;i<5;i++)
;;;1156   						{
;;;1157   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1158   						}
;;;1159   					}	
;;;1160   					Para.IR_Step_C = temp1;//步进电流
;;;1161   					temp1 = 0;
;;;1162   					 
;;;1163   					if(buf[currCharNum++] == ',')
;;;1164   					{
;;;1165   						for(i=0,temp1=0;i<5;i++)
;;;1166   						{
;;;1167   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1168   						}
;;;1169   					}	
;;;1170   					Para.IR_Threshold_V = temp1;//门槛电压
;;;1171   					temp1 = 0;
;;;1172   					
;;;1173   					if(buf[currCharNum++] == ',')
;;;1174   					{
;;;1175   						for(i=0,temp1=0;i<3;i++)
;;;1176   						{
;;;1177   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1178   						}
;;;1179   					}	
;;;1180   					Para.IR_Step_Time = temp1;//步进时间
;;;1181   					temp1 = 0;
;;;1182   					
;;;1183   					if(buf[currCharNum++] == ',')
;;;1184   					{
;;;1185   						for(i=0,temp1=0;i<5;i++)
;;;1186   						{
;;;1187   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1188   						}
;;;1189   					}	
;;;1190   					Para.POWER_OutPut_V = temp1;//电源电压
;;;1191   					temp1 = 0;
;;;1192   					
;;;1193   					if(buf[currCharNum++] == ',')
;;;1194   					{
;;;1195   						for(i=0,temp1=0;i<5;i++)
;;;1196   						{
;;;1197   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1198   						}
;;;1199   					}	
;;;1200   					Para.POWER_Limit_C = temp1;//电源电流
;;;1201   					temp1 = 0;
;;;1202   					
;;;1203   					if(buf[currCharNum++] == ',')
;;;1204   					{
;;;1205   						for(i=0,temp1=0;i<5;i++)
;;;1206   						{
;;;1207   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1208   						}
;;;1209   					}	
;;;1210   					Para.POWER_Cutoff_C = temp1;//设置充电截止电流
;;;1211   					temp1 = 0;
;;;1212   					
;;;1213   					if(buf[currCharNum++] == ',')
;;;1214   					{
;;;1215   						for(i=0,temp1=0;i<5;i++)
;;;1216   						{
;;;1217   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1218   						}
;;;1219   					}	
;;;1220   					Para.LOAD_V = temp1;//负载电压
;;;1221   					temp1 = 0;
;;;1222   					
;;;1223   					if(buf[currCharNum++] == ',')
;;;1224   					{
;;;1225   						for(i=0,temp1=0;i<5;i++)
;;;1226   						{
;;;1227   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1228   						}
;;;1229   					}	
;;;1230   					Para.LOAD_C = temp1;//负载电流
;;;1231   					temp1 = 0;
;;;1232   					
;;;1233   					if(buf[currCharNum++] == ',')
;;;1234   					{
;;;1235   						for(i=0,temp1=0;i<5;i++)
;;;1236   						{
;;;1237   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1238   						}
;;;1239   					}	
;;;1240   					Para.LOAD_Cutoff_V = temp1;//设置负载截止电压
;;;1241   					temp1 = 0;
;;;1242   					
;;;1243   					if(buf[currCharNum++] == ',')
;;;1244   					{
;;;1245   						for(i=0,temp1=0;i<5;i++)
;;;1246   						{
;;;1247   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1248   						}
;;;1249   					}	
;;;1250   					Para.CDC_OutPut_V = temp1;//设置容量测试充电电压
;;;1251   					temp1 = 0;
;;;1252   					
;;;1253   					if(buf[currCharNum++] == ',')
;;;1254   					{
;;;1255   						for(i=0,temp1=0;i<5;i++)
;;;1256   						{
;;;1257   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1258   						}
;;;1259   					}	
;;;1260   					Para.CDC_Limit_C = temp1;//设置容量测试充电限制电流
;;;1261   					temp1 = 0;
;;;1262   					
;;;1263   					if(buf[currCharNum++] == ',')
;;;1264   					{
;;;1265   						for(i=0,temp1=0;i<5;i++)
;;;1266   						{
;;;1267   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1268   						}
;;;1269   					}	
;;;1270   					Para.CDC_Ccutoff_V = temp1;//设置容量测试充电截止电压
;;;1271   					temp1 = 0;
;;;1272   					
;;;1273   					if(buf[currCharNum++] == ',')
;;;1274   					{
;;;1275   						for(i=0,temp1=0;i<5;i++)
;;;1276   						{
;;;1277   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1278   						}
;;;1279   					}	
;;;1280   					Para.CDC_Ccutoff_C = temp1;//设置容量测试充电截止电流
;;;1281   					temp1 = 0;
;;;1282   					
;;;1283   					if(buf[currCharNum++] == ',')
;;;1284   					{
;;;1285   						for(i=0,temp1=0;i<5;i++)
;;;1286   						{
;;;1287   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1288   						}
;;;1289   					}	
;;;1290   					Para.CDC_Load_C = temp1;//设置容量测试放电电流
;;;1291   					temp1 = 0;
;;;1292   					
;;;1293   					if(buf[currCharNum++] == ',')
;;;1294   					{
;;;1295   						for(i=0,temp1=0;i<5;i++)
;;;1296   						{
;;;1297   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1298   						}
;;;1299   					}	
;;;1300   					Para.CDC_Dcutoff_V = temp1;//设置容量测试放电截止电压
;;;1301   					temp1 = 0;
;;;1302   					
;;;1303   					if(buf[currCharNum++] == ',')
;;;1304   					{
;;;1305   						for(i=0,temp1=0;i<3;i++)
;;;1306   						{
;;;1307   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1308   						}
;;;1309   					}	
;;;1310   					Para.CDC_Cycle_Time = temp1;//循环次数
;;;1311   					temp1 = 0;
;;;1312   					
;;;1313   					if(buf[currCharNum++] == ',')
;;;1314   					{
;;;1315   						for(i=0,temp1=0;i<3;i++)
;;;1316   						{
;;;1317   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1318   						}
;;;1319   					}	
;;;1320   					if(MODE == 0)
;;;1321   					{
;;;1322   						Para.CLOAD_MODE = temp1;//负载模式
;;;1323   					}
;;;1324   					temp1 = 0;
;;;1325   //					MODE_PARASET(MODE);
;;;1326   					
;;;1327   					if(buf[currCharNum++] == ',')
;;;1328   					{
;;;1329   						for(i=0,temp1=0;i<3;i++)
;;;1330   						{
;;;1331   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1332   						}
;;;1333   					}	
;;;1334   					Rraly = temp1;//内阻档位
;;;1335   					temp1 = 0;
;;;1336   					
;;;1337   					if(buf[currCharNum++] == ',')
;;;1338   					{
;;;1339   						for(i=0,temp1=0;i<3;i++)
;;;1340   						{
;;;1341   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1342   						}
;;;1343   					}	
;;;1344   					Para.ACT_DELAY = temp1;//激活延时
;;;1345   					temp1 = 0;
;;;1346   					
;;;1347   					MODE_PARASET(MODE);
;;;1348   					
;;;1349   					 buf[currCharNum++] = ChrEndS;
;;;1350   		        }
;;;1351   				break;
;;;1352   				case 4:
;;;1353   				pntlen = 1;
;;;1354   				if(buf[currCharNum]=='?')
;;;1355   				{
;;;1356   					  sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1357   				    currCharNum+=pntlen;
;;;1358   				    buf[currCharNum ++] = ChrEndS;
;;;1359   					
;;;1360   				}
;;;1361   				else
;;;1362   				{
;;;1363   					if(currCharNum == 0x0b)
;;;1364   					{						
;;;1365   						for(i=0,temp1=0;i<2;i++)
;;;1366   						{
;;;1367   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1368   						}
;;;1369   					}
;;;1370   					MODE = temp1;//项目
;;;1371   					temp1 = 0;
;;;1372   					
;;;1373   					if(MODE == 0)
;;;1374   					{
;;;1375   						if(buf[currCharNum++] == ',')
;;;1376   						{
;;;1377   							for(i=0,temp1=0;i<5;i++)
;;;1378   							{
;;;1379   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1380   							}
;;;1381   						}	
;;;1382   						
;;;1383   						temp1 = 0;
;;;1384   						
;;;1385   						if(buf[currCharNum++] == ',')
;;;1386   						{
;;;1387   							for(i=0,temp1=0;i<5;i++)
;;;1388   							{
;;;1389   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1390   							}
;;;1391   						}	
;;;1392   						Para.CSET_Current_Laod = temp1;//负载电流
;;;1393   						temp1 = 0;
;;;1394   						
;;;1395   	
;;;1396   						if(Para.CSET_Current_Laod > 20000)
;;;1397   						{
;;;1398   							LOAD_I_SW = 1;
;;;1399   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1400   						}else{
;;;1401   							LOAD_I_SW = 0;
;;;1402   							GPIO_SetBits(GPIOC,GPIO_Pin_11);//电流测量为低档位
;;;1403   						}
;;;1404   						if(buf[currCharNum++] == ',')
;;;1405   						{
;;;1406   							for(i=0,temp1=0;i<1;i++)
;;;1407   							{
;;;1408   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1409   							}
;;;1410   						}
;;;1411   						mainswitch = temp1;//开关
;;;1412   						if(mainswitch == 0)
;;;1413   						{
;;;1414   							LOAD_I_SW = 1;
;;;1415   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1416   						}
;;;1417   					}else if(MODE == 1){
;;;1418   						if(buf[currCharNum++] == ',')
;;;1419   						{
;;;1420   							for(i=0,temp1=0;i<5;i++)
;;;1421   							{
;;;1422   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1423   							}
;;;1424   						}	
;;;1425   						Para.CDC_OutPut_V = temp1;//电源电压
;;;1426   						temp1 = 0;
;;;1427   						
;;;1428   						if(buf[currCharNum++] == ',')
;;;1429   						{
;;;1430   							for(i=0,temp1=0;i<5;i++)
;;;1431   							{
;;;1432   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1433   							}
;;;1434   						}	
;;;1435   						Para.CDC_Limit_C = temp1;//电源电流
;;;1436   						temp1 = 0;
;;;1437   						
;;;1438   						if(buf[currCharNum++] == ',')
;;;1439   						{
;;;1440   							for(i=0,temp1=0;i<1;i++)
;;;1441   							{
;;;1442   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1443   							}
;;;1444   						}
;;;1445   						mainswitch = temp1;//开关
;;;1446   					}else if(MODE == 2){
;;;1447   						LOAD_I_SW = 1;
;;;1448   						GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1449   						if(buf[currCharNum++] == ',')
;;;1450   						{
;;;1451   							for(i=0,temp1=0;i<5;i++)
;;;1452   							{
;;;1453   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1454   							}
;;;1455   						}	
;;;1456   						Para.IR_Start_C = temp1;//起始电流
;;;1457   						temp1 = 0;
;;;1458   						
;;;1459   						if(buf[currCharNum++] == ',')
;;;1460   						{
;;;1461   							for(i=0,temp1=0;i<5;i++)
;;;1462   							{
;;;1463   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1464   							}
;;;1465   						}	
;;;1466   						Para.IR_Step_C = temp1;//步进电流
;;;1467   						temp1 = 0;
;;;1468   						
;;;1469   						if(buf[currCharNum++] == ',')
;;;1470   						{
;;;1471   							for(i=0,temp1=0;i<1;i++)
;;;1472   							{
;;;1473   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1474   							}
;;;1475   						}
;;;1476   						mainswitch = temp1;//开关
;;;1477   						finishflag = 0;
;;;1478   					}else if(MODE == 3){
;;;1479   						if(buf[currCharNum++] == ',')
;;;1480   						{
;;;1481   							for(i=0,temp1=0;i<5;i++)
;;;1482   							{
;;;1483   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1484   							}
;;;1485   						}	
;;;1486   						Para.CDC_OutPut_V = temp1;//电源电压
;;;1487   						temp1 = 0;
;;;1488   						
;;;1489   						
;;;1490   						if(buf[currCharNum++] == ',')
;;;1491   						{
;;;1492   							for(i=0,temp1=0;i<5;i++)
;;;1493   							{
;;;1494   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1495   							}
;;;1496   						}	
;;;1497   						Para.CDC_Limit_C = temp1;//电源电流
;;;1498   						temp1 = 0;
;;;1499   						
;;;1500   						if(buf[currCharNum++] == ',')
;;;1501   						{
;;;1502   							for(i=0,temp1=0;i<1;i++)
;;;1503   							{
;;;1504   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1505   							}
;;;1506   						}
;;;1507   						mainswitch = temp1;//开关
;;;1508   						
;;;1509   						
;;;1510   					}else if(MODE == 4){
;;;1511   						if(buf[currCharNum++] == ',')
;;;1512   						{
;;;1513   							for(i=0,temp1=0;i<5;i++)
;;;1514   							{
;;;1515   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1516   							}
;;;1517   						}	
;;;1518   						
;;;1519   						temp1 = 0;
;;;1520   						
;;;1521   						if(buf[currCharNum++] == ',')
;;;1522   						{
;;;1523   							for(i=0,temp1=0;i<5;i++)
;;;1524   							{
;;;1525   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1526   							}
;;;1527   						}	
;;;1528   						Para.CSET_Current_Laod = temp1;//负载电流
;;;1529   						temp1 = 0;
;;;1530   						
;;;1531   	
;;;1532   						if(Para.CSET_Current_Laod > 20000)
;;;1533   						{
;;;1534   							LOAD_I_SW = 1;
;;;1535   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1536   						}else{
;;;1537   							LOAD_I_SW = 0;
;;;1538   							GPIO_SetBits(GPIOC,GPIO_Pin_11);//电流测量为低档位
;;;1539   						}
;;;1540   						if(buf[currCharNum++] == ',')
;;;1541   						{
;;;1542   							for(i=0,temp1=0;i<1;i++)
;;;1543   							{
;;;1544   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1545   							}
;;;1546   						}
;;;1547   						mainswitch = temp1;//开关
;;;1548   						if(mainswitch == 0)
;;;1549   						{
;;;1550   							LOAD_I_SW = 1;
;;;1551   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1552   						}
;;;1553   					}else if(MODE == 5){
;;;1554   						if(buf[currCharNum++] == ',')
;;;1555   						{
;;;1556   							for(i=0,temp1=0;i<5;i++)
;;;1557   							{
;;;1558   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1559   							}
;;;1560   						}	
;;;1561   						temp1 = 0;
;;;1562   						
;;;1563   						if(buf[currCharNum++] == ',')
;;;1564   						{
;;;1565   							for(i=0,temp1=0;i<5;i++)
;;;1566   							{
;;;1567   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1568   							}
;;;1569   						}	
;;;1570   						temp1 = 0;
;;;1571   						
;;;1572   						if(buf[currCharNum++] == ',')
;;;1573   						{
;;;1574   							for(i=0,temp1=0;i<1;i++)
;;;1575   							{
;;;1576   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1577   							}
;;;1578   						}
;;;1579   						mainswitch = temp1;//开关
;;;1580   						if(mainswitch == 0)
;;;1581   						{
;;;1582   							mainswitch = 0;
;;;1583   						}
;;;1584   					}else if(MODE == 6){
;;;1585   						if(buf[currCharNum++] == ',')
;;;1586   						{
;;;1587   							for(i=0,temp1=0;i<5;i++)
;;;1588   							{
;;;1589   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1590   							}
;;;1591   						}	
;;;1592   						temp1 = 0;
;;;1593   						
;;;1594   						if(buf[currCharNum++] == ',')
;;;1595   						{
;;;1596   							for(i=0,temp1=0;i<5;i++)
;;;1597   							{
;;;1598   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1599   							}
;;;1600   						}	
;;;1601   						temp1 = 0;
;;;1602   						
;;;1603   						if(buf[currCharNum++] == ',')
;;;1604   						{
;;;1605   							for(i=0,temp1=0;i<1;i++)
;;;1606   							{
;;;1607   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1608   							}
;;;1609   						}
;;;1610   						mainswitch = temp1;//开关
;;;1611   					}
;;;1612   					
;;;1613   					temp1 = 0;
;;;1614   //					MODE_PARASET(MODE);
;;;1615   					Off_GPOI_ResetSet();
;;;1616   					LIST_ONOFF(mainswitch);
;;;1617   					buf[currCharNum++] = ChrEndS;
;;;1618   		        }
;;;1619   				break;
;;;1620   				case 12://电压校准
;;;1621   				{
;;;1622   					pntlen = 8;
;;;1623   					if(buf[currCharNum]=='?')
;;;1624   					{
;;;1625   						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1626   						sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1627   						currCharNum+=pntlen;
;;;1628   						buf[currCharNum++ ] = ChrEndS;
;;;1629   					}
;;;1630   					else
;;;1631   					{
;;;1632   						tmpFg = 1;
;;;1633   						for(i=0;i<pntlen;i++)
;;;1634   						{
;;;1635   						   if(i==0||i==4)
;;;1636   							  continue;
;;;1637   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1638   						   {
;;;1639   							  tmpFg = (tmpFg&0x01);
;;;1640   						   }
;;;1641   						   else
;;;1642   						   {
;;;1643   							  tmpFg = 0;
;;;1644   						   }
;;;1645   						}
;;;1646   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1647   						{
;;;1648   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1649   							
;;;1650   						}
;;;1651   						temp1=0;
;;;1652   						for(i=0;i<pntlen;i++)
;;;1653   						{
;;;1654   						   if(i==0)
;;;1655   						   {
;;;1656   							   fsingal = buf[currCharNum++]-0x30;
;;;1657   							   continue; 
;;;1658   						   } 
;;;1659   						   else if(i==4)
;;;1660   						   {
;;;1661   							   currCharNum++;
;;;1662   							   continue; 
;;;1663   						   }
;;;1664   						   else									 
;;;1665   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1666   						}	
;;;1667   						CalHandle(0,fsingal,temp1);
;;;1668   						
;;;1669   					}
;;;1670   				}break;
;;;1671   				case 13://电流校准
;;;1672   				{
;;;1673   					pntlen = 8;
;;;1674   					if(buf[currCharNum]=='?')
;;;1675   					{
;;;1676   //						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1677   //									sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1678   //						currCharNum+=pntlen;
;;;1679   //						buf[currCharNum++ ] = ChrEndS;
;;;1680   					}
;;;1681   					else
;;;1682   					{
;;;1683   						tmpFg = 1;
;;;1684   						for(i=0;i<pntlen;i++)
;;;1685   						{
;;;1686   						   if(i==0||i==4)
;;;1687   							  continue;
;;;1688   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1689   						   {
;;;1690   							  tmpFg = (tmpFg&0x01);
;;;1691   						   }
;;;1692   						   else
;;;1693   						   {
;;;1694   							  tmpFg = 0;
;;;1695   						   }
;;;1696   						}
;;;1697   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1698   						{
;;;1699   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1700   							
;;;1701   						}
;;;1702   						temp1=0;
;;;1703   						for(i=0;i<pntlen;i++)
;;;1704   						{
;;;1705   						   if(i==0)
;;;1706   						   {
;;;1707   							   fsingal = buf[currCharNum++]-0x30;
;;;1708   							   continue; 
;;;1709   						   } 
;;;1710   						   else if(i==4)
;;;1711   						   {
;;;1712   							   currCharNum++;
;;;1713   							   continue; 
;;;1714   						   }
;;;1715   						   else									 
;;;1716   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1717   						}	
;;;1718   						CalHandle(1,fsingal,temp1);
;;;1719   						
;;;1720   					}
;;;1721   				}break;
;;;1722   				case 14://电阻校准
;;;1723   				{
;;;1724   					pntlen = 6;
;;;1725   					if(buf[currCharNum]=='?')
;;;1726   					{
;;;1727   						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1728   									sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1729   						currCharNum+=pntlen;
;;;1730   						buf[currCharNum++ ] = ChrEndS;
;;;1731   					}
;;;1732   					else
;;;1733   					{
;;;1734   						tmpFg = 1;
;;;1735   						for(i=0;i<pntlen;i++)
;;;1736   						{
;;;1737   						   if(i==0||i==4)
;;;1738   							  continue;
;;;1739   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1740   						   {
;;;1741   							  tmpFg = (tmpFg&0x01);
;;;1742   						   }
;;;1743   						   else
;;;1744   						   {
;;;1745   							  tmpFg = 0;
;;;1746   						   }
;;;1747   						}
;;;1748   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1749   						{
;;;1750   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1751   							
;;;1752   						}
;;;1753   						temp1=0;
;;;1754   						for(i=0;i<pntlen;i++)
;;;1755   						{
;;;1756   						   if(i==0)
;;;1757   						   {
;;;1758   							   fsingal = buf[currCharNum++]-0x30;
;;;1759   							   continue; 
;;;1760   						   } 
;;;1761   //						   else if(i==4)
;;;1762   //						   {
;;;1763   //							   currCharNum++;
;;;1764   //							   continue; 
;;;1765   //						   }
;;;1766   //						   else									 
;;;1767   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1768   						}
;;;1769   						CalHandle(2,fsingal,temp1);
;;;1770   						
;;;1771   					}
;;;1772   				}break;
;;;1773   				case 18:
;;;1774   				{
;;;1775   					if(buf[currCharNum]=='?')
0000fe  5d60              LDRB     r0,[r4,r5]
000100  283f              CMP      r0,#0x3f
000102  d069              BEQ      |L9.472|
;;;1776   					{
;;;1777   //						sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1778   //						currCharNum+=pntlen;
;;;1779   //						buf[currCharNum ++] = ChrEndS;
;;;1780   						
;;;1781   					}
;;;1782   					else
;;;1783   					{
;;;1784   						pntlen = 1;				
000104  2101              MOVS     r1,#1
;;;1785   						for(i=0,temp1=0;i<pntlen;i++)
000106  2000              MOVS     r0,#0
000108  4607              MOV      r7,r0
                  |L9.266|
;;;1786   						{
;;;1787   							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
00010a  5d62              LDRB     r2,[r4,r5]
00010c  eb070387          ADD      r3,r7,r7,LSL #2
000110  eb060343          ADD      r3,r6,r3,LSL #1
000114  1c6d              ADDS     r5,r5,#1
000116  1c40              ADDS     r0,r0,#1
000118  18d7              ADDS     r7,r2,r3
00011a  b2c0              UXTB     r0,r0                 ;1785
00011c  b2ad              UXTH     r5,r5
00011e  4288              CMP      r0,r1                 ;1785
000120  d3f3              BCC      |L9.266|
;;;1788   						}		                   
;;;1789   						if(temp1>1)
000122  2f01              CMP      r7,#1
000124  d87e              BHI      |L9.548|
000126  e3fc              B        |L9.2338|
                  |L9.296|
000128  5d60              LDRB     r0,[r4,r5]            ;994
00012a  283f              CMP      r0,#0x3f              ;994
00012c  d181              BNE      |L9.50|
00012e  f8da202c          LDR      r2,[r10,#0x2c]        ;998  ; Para
000132  4656              MOV      r6,r10                ;998
000134  1960              ADDS     r0,r4,r5              ;998
000136  a1c5              ADR      r1,|L9.1100|
000138  f7fffffe          BL       __2sprintf
00013c  1d6d              ADDS     r5,r5,#5              ;998
00013e  b2a8              UXTH     r0,r5                 ;999
000140  252c              MOVS     r5,#0x2c              ;1001
000142  5425              STRB     r5,[r4,r0]            ;1001
000144  1c40              ADDS     r0,r0,#1              ;1001
000146  6b72              LDR      r2,[r6,#0x34]         ;1002  ; Para
000148  b287              UXTH     r7,r0                 ;1001
00014a  19e0              ADDS     r0,r4,r7              ;1002
00014c  a1c1              ADR      r1,|L9.1108|
00014e  f7fffffe          BL       __2sprintf
000152  1dbf              ADDS     r7,r7,#6              ;1002
000154  b2b8              UXTH     r0,r7                 ;1003
000156  5425              STRB     r5,[r4,r0]            ;1005
000158  1c40              ADDS     r0,r0,#1              ;1005
00015a  6ab2              LDR      r2,[r6,#0x28]         ;1006  ; Para
00015c  b287              UXTH     r7,r0                 ;1005
00015e  19e0              ADDS     r0,r4,r7              ;1006
000160  a1ba              ADR      r1,|L9.1100|
000162  f7fffffe          BL       __2sprintf
000166  1d7f              ADDS     r7,r7,#5              ;1006
000168  b2b8              UXTH     r0,r7                 ;1007
00016a  5425              STRB     r5,[r4,r0]            ;1009
00016c  1c40              ADDS     r0,r0,#1              ;1009
00016e  6b32              LDR      r2,[r6,#0x30]         ;1010  ; Para
000170  b287              UXTH     r7,r0                 ;1009
000172  19e0              ADDS     r0,r4,r7              ;1010
000174  a1b5              ADR      r1,|L9.1100|
000176  f7fffffe          BL       __2sprintf
00017a  1d7f              ADDS     r7,r7,#5              ;1010
00017c  b2b8              UXTH     r0,r7                 ;1011
00017e  5425              STRB     r5,[r4,r0]            ;1013
000180  1c40              ADDS     r0,r0,#1              ;1013
000182  6bb2              LDR      r2,[r6,#0x38]         ;1014  ; Para
000184  b287              UXTH     r7,r0                 ;1013
000186  19e0              ADDS     r0,r4,r7              ;1014
000188  a1b0              ADR      r1,|L9.1100|
00018a  f7fffffe          BL       __2sprintf
00018e  1d7f              ADDS     r7,r7,#5              ;1014
000190  b2b8              UXTH     r0,r7                 ;1015
000192  5425              STRB     r5,[r4,r0]            ;1017
000194  1c40              ADDS     r0,r0,#1              ;1017
000196  6bf2              LDR      r2,[r6,#0x3c]         ;1018  ; Para
000198  b287              UXTH     r7,r0                 ;1017
00019a  19e0              ADDS     r0,r4,r7              ;1018
00019c  a1af              ADR      r1,|L9.1116|
00019e  f7fffffe          BL       __2sprintf
0001a2  1d3f              ADDS     r7,r7,#4              ;1018
0001a4  b2b8              UXTH     r0,r7                 ;1019
0001a6  5425              STRB     r5,[r4,r0]            ;1021
0001a8  1c40              ADDS     r0,r0,#1              ;1021
0001aa  6c32              LDR      r2,[r6,#0x40]         ;1022  ; Para
0001ac  b287              UXTH     r7,r0                 ;1021
0001ae  19e0              ADDS     r0,r4,r7              ;1022
0001b0  a1aa              ADR      r1,|L9.1116|
0001b2  f7fffffe          BL       __2sprintf
0001b6  1d3f              ADDS     r7,r7,#4              ;1022
0001b8  b2b8              UXTH     r0,r7                 ;1023
0001ba  5425              STRB     r5,[r4,r0]            ;1025
0001bc  1c40              ADDS     r0,r0,#1              ;1025
0001be  b286              UXTH     r6,r0                 ;1025
0001c0  48a8              LDR      r0,|L9.1124|
0001c2  ed900a00          VLDR     s0,[r0,#0]            ;1026
0001c6  e008              B        |L9.474|
                  |L9.456|
0001c8  e282              B        |L9.1744|
                  |L9.458|
0001ca  e05e              B        |L9.650|
                  |L9.460|
0001cc  e081              B        |L9.722|
                  |L9.462|
0001ce  e103              B        |L9.984|
                  |L9.464|
0001d0  e0ad              B        |L9.814|
                  |L9.466|
0001d2  e3fd              B        |L9.2512|
                  |L9.468|
0001d4  e3fd              B        |L9.2514|
                  |L9.470|
0001d6  e3fd              B        |L9.2516|
                  |L9.472|
0001d8  e3fd              B        |L9.2518|
                  |L9.474|
0001da  eddf0aa3          VLDR     s1,|L9.1128|
0001de  19a0              ADDS     r0,r4,r6              ;1026
0001e0  a19c              ADR      r1,|L9.1108|
0001e2  ee200a20          VMUL.F32 s0,s0,s1              ;1026
0001e6  eebd0ac0          VCVT.S32.F32 s0,s0                 ;1026
0001ea  ee102a10          VMOV     r2,s0                 ;1026
0001ee  f7fffffe          BL       __2sprintf
0001f2  1db6              ADDS     r6,r6,#6              ;1026
0001f4  b2b0              UXTH     r0,r6                 ;1027
0001f6  499d              LDR      r1,|L9.1132|
0001f8  5425              STRB     r5,[r4,r0]            ;1029
0001fa  1c40              ADDS     r0,r0,#1              ;1029
0001fc  b286              UXTH     r6,r0                 ;1029
0001fe  780a              LDRB     r2,[r1,#0]            ;1030  ; shorttime
000200  19a0              ADDS     r0,r4,r6              ;1030
000202  a19b              ADR      r1,|L9.1136|
000204  f7fffffe          BL       __2sprintf
000208  1cf6              ADDS     r6,r6,#3              ;1030
00020a  b2b0              UXTH     r0,r6                 ;1031
00020c  5425              STRB     r5,[r4,r0]            ;1033
00020e  1c40              ADDS     r0,r0,#1              ;1033
000210  b286              UXTH     r6,r0                 ;1033
000212  f89b2006          LDRB     r2,[r11,#6]           ;1034  ; mainswitch
000216  19a0              ADDS     r0,r4,r6              ;1034
000218  a197              ADR      r1,|L9.1144|
00021a  f7fffffe          BL       __2sprintf
00021e  1c76              ADDS     r6,r6,#1              ;1034
000220  b2b0              UXTH     r0,r6                 ;1035
000222  e000              B        |L9.550|
                  |L9.548|
000224  e069              B        |L9.762|
                  |L9.550|
000226  5425              STRB     r5,[r4,r0]            ;1037
000228  4994              LDR      r1,|L9.1148|
00022a  1c40              ADDS     r0,r0,#1              ;1037
00022c  b286              UXTH     r6,r0                 ;1037
00022e  780a              LDRB     r2,[r1,#0]            ;1038  ; finishflag
000230  19a0              ADDS     r0,r4,r6              ;1038
000232  a191              ADR      r1,|L9.1144|
000234  f7fffffe          BL       __2sprintf
000238  1c76              ADDS     r6,r6,#1              ;1038
00023a  b2b0              UXTH     r0,r6                 ;1039
00023c  4990              LDR      r1,|L9.1152|
00023e  5425              STRB     r5,[r4,r0]            ;1041
000240  1c40              ADDS     r0,r0,#1              ;1041
000242  b286              UXTH     r6,r0                 ;1041
000244  780a              LDRB     r2,[r1,#0]            ;1042  ; lockflag
000246  19a0              ADDS     r0,r4,r6              ;1042
000248  a18b              ADR      r1,|L9.1144|
00024a  f7fffffe          BL       __2sprintf
00024e  1c76              ADDS     r6,r6,#1              ;1042
000250  b2b0              UXTH     r0,r6                 ;1043
000252  498c              LDR      r1,|L9.1156|
000254  5425              STRB     r5,[r4,r0]            ;1045
000256  1c40              ADDS     r0,r0,#1              ;1045
000258  b286              UXTH     r6,r0                 ;1045
00025a  780a              LDRB     r2,[r1,#0]            ;1046  ; version
00025c  19a0              ADDS     r0,r4,r6              ;1046
00025e  a18a              ADR      r1,|L9.1160|
000260  f7fffffe          BL       __2sprintf
000264  1cb6              ADDS     r6,r6,#2              ;1046
000266  b2b0              UXTH     r0,r6                 ;1047
000268  4988              LDR      r1,|L9.1164|
00026a  5425              STRB     r5,[r4,r0]            ;1049
00026c  1c40              ADDS     r0,r0,#1              ;1049
00026e  b285              UXTH     r5,r0                 ;1049
000270  f9b12000          LDRSH    r2,[r1,#0]            ;1050  ; Temperature
000274  1960              ADDS     r0,r4,r5              ;1050
000276  a17e              ADR      r1,|L9.1136|
000278  f7fffffe          BL       __2sprintf
00027c  1ced              ADDS     r5,r5,#3              ;1050
00027e  b2a8              UXTH     r0,r5                 ;1051
000280  210d              MOVS     r1,#0xd               ;1064
000282  5421              STRB     r1,[r4,r0]            ;1064
000284  1c40              ADDS     r0,r0,#1              ;1064
000286  b280              UXTH     r0,r0                 ;1064
000288  e01e              B        |L9.712|
                  |L9.650|
00028a  5d60              LDRB     r0,[r4,r5]            ;1074
00028c  2201              MOVS     r2,#1                 ;1073
00028e  283f              CMP      r0,#0x3f              ;1074
000290  d016              BEQ      |L9.704|
000292  2000              MOVS     r0,#0                 ;1084
000294  4601              MOV      r1,r0                 ;1084
                  |L9.662|
000296  5d63              LDRB     r3,[r4,r5]            ;1086
000298  eb010181          ADD      r1,r1,r1,LSL #2       ;1086
00029c  1c6d              ADDS     r5,r5,#1              ;1086
00029e  1c40              ADDS     r0,r0,#1              ;1086
0002a0  eb060141          ADD      r1,r6,r1,LSL #1       ;1086
0002a4  b2c0              UXTB     r0,r0                 ;1084
0002a6  4419              ADD      r1,r1,r3              ;1086
0002a8  b2ad              UXTH     r5,r5                 ;1086
0002aa  4290              CMP      r0,r2                 ;1084
0002ac  d3f3              BCC      |L9.662|
0002ae  465e              MOV      r6,r11                ;1092
0002b0  f88b1005          STRB     r1,[r11,#5]           ;1092
0002b4  f7fffffe          BL       Off_GPOI_ResetSet
0002b8  7970              LDRB     r0,[r6,#5]            ;1094  ; MODE
0002ba  f7fffffe          BL       MODE_PARASET
0002be  e031              B        |L9.804|
                  |L9.704|
0002c0  1960              ADDS     r0,r4,r5              ;1076
0002c2  f89b2005          LDRB     r2,[r11,#5]           ;1076  ; MODE
0002c6  e022              B        |L9.782|
                  |L9.712|
0002c8  f8049000          STRB     r9,[r4,r0]            ;1065
0002cc  1c40              ADDS     r0,r0,#1              ;1065
0002ce  b285              UXTH     r5,r0                 ;1065
0002d0  e381              B        |L9.2518|
                  |L9.722|
0002d2  5d60              LDRB     r0,[r4,r5]            ;1101
0002d4  2201              MOVS     r2,#1                 ;1100
0002d6  283f              CMP      r0,#0x3f              ;1101
0002d8  d07e              BEQ      |L9.984|
0002da  2100              MOVS     r1,#0                 ;1111
0002dc  4608              MOV      r0,r1                 ;1111
                  |L9.734|
0002de  5d63              LDRB     r3,[r4,r5]            ;1113
0002e0  eb000080          ADD      r0,r0,r0,LSL #2       ;1113
0002e4  1c6d              ADDS     r5,r5,#1              ;1113
0002e6  1c49              ADDS     r1,r1,#1              ;1113
0002e8  eb060040          ADD      r0,r6,r0,LSL #1       ;1113
0002ec  b2c9              UXTB     r1,r1                 ;1111
0002ee  4418              ADD      r0,r0,r3              ;1113
0002f0  b2ad              UXTH     r5,r5                 ;1113
0002f2  4291              CMP      r1,r2                 ;1111
0002f4  d3f3              BCC      |L9.734|
0002f6  2801              CMP      r0,#1                 ;1115
0002f8  d90e              BLS      |L9.792|
                  |L9.762|
0002fa  2201              MOVS     r2,#1                 ;1117
                  |L9.764|
;;;1790   						{
;;;1791   							return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1792   						}
;;;1793   	//					MODE=temp1;
;;;1794   						
;;;1795   						bootflag = 1;
;;;1796   						Write_Boot_Flag();
;;;1797   						if(temp1 == 1)
;;;1798   						{
;;;1799   							JumpBoot(55);
;;;1800   						}
;;;1801   					}
;;;1802   				}break;
;;;1803   //				case 15:
;;;1804   //				{
;;;1805   //					pntlen = 1;
;;;1806   //					if(buf[currCharNum]=='?')
;;;1807   //					{
;;;1808   //						sprintf(&buf[currCharNum],"%1d",Gmode_Vale);
;;;1809   //						currCharNum+=pntlen;
;;;1810   //						buf[currCharNum] = ChrEndR;
;;;1811   //						currCharNum++;
;;;1812   //	//				    buf[currCharNum ++] = ChrEndS;
;;;1813   //						
;;;1814   //					}
;;;1815   //					else
;;;1816   //					{
;;;1817   //						tmpFg = 1;
;;;1818   //						for(i=0;i<pntlen;i++)
;;;1819   //						{
;;;1820   //						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1821   //						   {
;;;1822   //							  tmpFg = (tmpFg&0x01);
;;;1823   //						   }
;;;1824   //						   else
;;;1825   //						   {
;;;1826   //							  tmpFg = 0;
;;;1827   //						   }
;;;1828   //						}
;;;1829   //						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1830   //						{
;;;1831   //							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1832   //							
;;;1833   //						}					
;;;1834   //						for(i=0,temp1=0;i<pntlen;i++)
;;;1835   //						{
;;;1836   //							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1837   //						}		                   
;;;1838   //						if(temp1 >Mode_H)
;;;1839   //						 {
;;;1840   //							 return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1841   //							 
;;;1842   //						 }
;;;1843   //						 if(H_L == 1)
;;;1844   //						 {
;;;1845   //							CalHandle(3,1,temp1);
;;;1846   //						 }else{
;;;1847   //							 CalHandle(3,0,temp1);
;;;1848   //						 }
;;;1849   //						 
;;;1850   ////								 Mode=temp1;
;;;1851   ////								Change_MODE_Val(Mode);
;;;1852   ////						 buf[currCharNum++] = ChrEndS;
;;;1853   //					}
;;;1854   //					break;
;;;1855   //				}break;
;;;1856   //				case 16:
;;;1857   //				{
;;;1858   //					pntlen = 3;
;;;1859   //					if(buf[currCharNum]=='?')
;;;1860   //					{
;;;1861   //						sprintf(&buf[currCharNum],"%1d",Gmode_Vale);
;;;1862   //						currCharNum+=pntlen;
;;;1863   //						buf[currCharNum] = ChrEndR;
;;;1864   //						currCharNum++;
;;;1865   //	//				    buf[currCharNum ++] = ChrEndS;
;;;1866   //						
;;;1867   //					}
;;;1868   //					else
;;;1869   //					{
;;;1870   //						tmpFg = 1;
;;;1871   //						for(i=0;i<pntlen;i++)
;;;1872   //						{
;;;1873   //						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1874   //						   {
;;;1875   //							  tmpFg = (tmpFg&0x01);
;;;1876   //						   }
;;;1877   //						   else
;;;1878   //						   {
;;;1879   //							  tmpFg = 0;
;;;1880   //						   }
;;;1881   //						}
;;;1882   //						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1883   //						{
;;;1884   //							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1885   //							
;;;1886   //						}					
;;;1887   //						for(i=0,temp1=0;i<pntlen;i++)
;;;1888   //						{
;;;1889   //							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1890   //						}		                   
;;;1891   //						 overflag = temp1;
;;;1892   //						 
;;;1893   ////								 Mode=temp1;
;;;1894   ////								Change_MODE_Val(Mode);
;;;1895   ////						 buf[currCharNum++] = ChrEndS;
;;;1896   //					}
;;;1897   //					break;
;;;1898   //				}break;
;;;1899   //				case 17:
;;;1900   //				{
;;;1901   //					pntlen = 2;
;;;1902   //					if(buf[currCharNum]=='?')
;;;1903   //					{
;;;1904   ////						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1905   //									sprintf(&buf[currCharNum],"%02d",(int)temperature);
;;;1906   //						currCharNum+=pntlen;
;;;1907   //						buf[currCharNum++ ] = ChrEndR;
;;;1908   //						buf[currCharNum++ ] = ChrEndS;
;;;1909   //					}
;;;1910   //				}break;
;;;1911   			default:    //ERR
;;;1912              		 return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1913   	 			  
;;;1914   		  }
;;;1915   		  break;
;;;1916   		}
;;;1917   		
;;;1918   	}
;;;1919   	if(j>=CmdNumb)
;;;1920   	{
;;;1921   		return SetErr_ACK(buf, addr ,CMD_ERR);			  
0002fc  4620              MOV      r0,r4
0002fe  9932              LDR      r1,[sp,#0xc8]
000300  f7fffffe          BL       SetErr_ACK
;;;1922   	}
;;;1923   	return currCharNum+1;
;;;1924   }
000304  b033              ADD      sp,sp,#0xcc
000306  ecbd8b02          VPOP     {d8}
00030a  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.782|
00030e  a15a              ADR      r1,|L9.1144|
000310  f7fffffe          BL       __2sprintf
000314  1c6d              ADDS     r5,r5,#1              ;1076
000316  e3ee              B        |L9.2806|
                  |L9.792|
000318  f88b0006          STRB     r0,[r11,#6]           ;1122
00031c  f89b0006          LDRB     r0,[r11,#6]           ;1127  ; mainswitch
000320  f7fffffe          BL       MODE_ONOFF
                  |L9.804|
000324  200d              MOVS     r0,#0xd               ;1096
000326  5560              STRB     r0,[r4,r5]            ;1096
                  |L9.808|
000328  1c6d              ADDS     r5,r5,#1              ;1096
00032a  b2ad              UXTH     r5,r5                 ;1096
00032c  e353              B        |L9.2518|
                  |L9.814|
00032e  2000              MOVS     r0,#0                 ;1145
000330  4607              MOV      r7,r0                 ;1145
                  |L9.818|
000332  5d61              LDRB     r1,[r4,r5]            ;1147
000334  eb070287          ADD      r2,r7,r7,LSL #2       ;1147
000338  eb060242          ADD      r2,r6,r2,LSL #1       ;1147
00033c  1c6d              ADDS     r5,r5,#1              ;1147
00033e  1c40              ADDS     r0,r0,#1              ;1147
000340  188f              ADDS     r7,r1,r2              ;1147
000342  b2c0              UXTB     r0,r0                 ;1145
000344  b2ad              UXTH     r5,r5                 ;1147
000346  2805              CMP      r0,#5                 ;1145
000348  d3f3              BCC      |L9.818|
                  |L9.842|
00034a  4651              MOV      r1,r10                ;1150
00034c  f8ca7044          STR      r7,[r10,#0x44]        ;1150  ; Para
000350  5d62              LDRB     r2,[r4,r5]            ;1153
000352  1c6d              ADDS     r5,r5,#1              ;1153
000354  2300              MOVS     r3,#0                 ;1151
000356  b2a8              UXTH     r0,r5                 ;1153
000358  2a2c              CMP      r2,#0x2c              ;1153
00035a  d10c              BNE      |L9.886|
00035c  2200              MOVS     r2,#0                 ;1155
                  |L9.862|
00035e  5c25              LDRB     r5,[r4,r0]            ;1157
000360  eb030383          ADD      r3,r3,r3,LSL #2       ;1157
000364  1c40              ADDS     r0,r0,#1              ;1157
000366  1c52              ADDS     r2,r2,#1              ;1157
000368  eb060343          ADD      r3,r6,r3,LSL #1       ;1157
00036c  b2d2              UXTB     r2,r2                 ;1155
00036e  442b              ADD      r3,r3,r5              ;1157
000370  b280              UXTH     r0,r0                 ;1157
000372  2a05              CMP      r2,#5                 ;1155
000374  d3f3              BCC      |L9.862|
                  |L9.886|
000376  f8a13048          STRH     r3,[r1,#0x48]         ;1160
00037a  5c22              LDRB     r2,[r4,r0]            ;1163
00037c  1c40              ADDS     r0,r0,#1              ;1163
00037e  2300              MOVS     r3,#0                 ;1161
000380  b280              UXTH     r0,r0                 ;1163
000382  2a2c              CMP      r2,#0x2c              ;1163
000384  d10c              BNE      |L9.928|
000386  2200              MOVS     r2,#0                 ;1165
                  |L9.904|
000388  5c25              LDRB     r5,[r4,r0]            ;1167
00038a  eb030383          ADD      r3,r3,r3,LSL #2       ;1167
00038e  1c40              ADDS     r0,r0,#1              ;1167
000390  1c52              ADDS     r2,r2,#1              ;1167
000392  eb060343          ADD      r3,r6,r3,LSL #1       ;1167
000396  b2d2              UXTB     r2,r2                 ;1165
000398  442b              ADD      r3,r3,r5              ;1167
00039a  b280              UXTH     r0,r0                 ;1167
00039c  2a05              CMP      r2,#5                 ;1165
00039e  d3f3              BCC      |L9.904|
                  |L9.928|
0003a0  64cb              STR      r3,[r1,#0x4c]         ;1170  ; Para
0003a2  5c22              LDRB     r2,[r4,r0]            ;1173
0003a4  1c40              ADDS     r0,r0,#1              ;1173
0003a6  2300              MOVS     r3,#0                 ;1171
0003a8  b280              UXTH     r0,r0                 ;1173
0003aa  2a2c              CMP      r2,#0x2c              ;1173
0003ac  d10c              BNE      |L9.968|
0003ae  2200              MOVS     r2,#0                 ;1175
                  |L9.944|
0003b0  5c25              LDRB     r5,[r4,r0]            ;1177
0003b2  eb030383          ADD      r3,r3,r3,LSL #2       ;1177
0003b6  1c40              ADDS     r0,r0,#1              ;1177
0003b8  1c52              ADDS     r2,r2,#1              ;1177
0003ba  eb060343          ADD      r3,r6,r3,LSL #1       ;1177
0003be  b2d2              UXTB     r2,r2                 ;1175
0003c0  442b              ADD      r3,r3,r5              ;1177
0003c2  b280              UXTH     r0,r0                 ;1177
0003c4  2a03              CMP      r2,#3                 ;1175
0003c6  d3f3              BCC      |L9.944|
                  |L9.968|
0003c8  f8a13050          STRH     r3,[r1,#0x50]         ;1180
0003cc  5c22              LDRB     r2,[r4,r0]            ;1183
0003ce  1c40              ADDS     r0,r0,#1              ;1183
0003d0  2300              MOVS     r3,#0                 ;1181
0003d2  b280              UXTH     r0,r0                 ;1183
0003d4  2a2c              CMP      r2,#0x2c              ;1183
0003d6  e000              B        |L9.986|
                  |L9.984|
0003d8  e180              B        |L9.1756|
                  |L9.986|
0003da  d10c              BNE      |L9.1014|
0003dc  2200              MOVS     r2,#0                 ;1185
                  |L9.990|
0003de  5c25              LDRB     r5,[r4,r0]            ;1187
0003e0  eb030383          ADD      r3,r3,r3,LSL #2       ;1187
0003e4  1c40              ADDS     r0,r0,#1              ;1187
0003e6  1c52              ADDS     r2,r2,#1              ;1187
0003e8  eb060343          ADD      r3,r6,r3,LSL #1       ;1187
0003ec  b2d2              UXTB     r2,r2                 ;1185
0003ee  442b              ADD      r3,r3,r5              ;1187
0003f0  b280              UXTH     r0,r0                 ;1187
0003f2  2a05              CMP      r2,#5                 ;1185
0003f4  d3f3              BCC      |L9.990|
                  |L9.1014|
0003f6  f8a13054          STRH     r3,[r1,#0x54]         ;1190
0003fa  5c22              LDRB     r2,[r4,r0]            ;1193
0003fc  1c40              ADDS     r0,r0,#1              ;1193
0003fe  2300              MOVS     r3,#0                 ;1191
000400  b280              UXTH     r0,r0                 ;1193
000402  2a2c              CMP      r2,#0x2c              ;1193
000404  d10c              BNE      |L9.1056|
000406  2200              MOVS     r2,#0                 ;1195
                  |L9.1032|
000408  5c25              LDRB     r5,[r4,r0]            ;1197
00040a  eb030383          ADD      r3,r3,r3,LSL #2       ;1197
00040e  1c40              ADDS     r0,r0,#1              ;1197
000410  1c52              ADDS     r2,r2,#1              ;1197
000412  eb060343          ADD      r3,r6,r3,LSL #1       ;1197
000416  b2d2              UXTB     r2,r2                 ;1195
000418  442b              ADD      r3,r3,r5              ;1197
00041a  b280              UXTH     r0,r0                 ;1197
00041c  2a05              CMP      r2,#5                 ;1195
00041e  d3f3              BCC      |L9.1032|
                  |L9.1056|
000420  f8a13056          STRH     r3,[r1,#0x56]         ;1200
000424  5c22              LDRB     r2,[r4,r0]            ;1203
000426  1c40              ADDS     r0,r0,#1              ;1203
000428  2300              MOVS     r3,#0                 ;1201
00042a  b280              UXTH     r0,r0                 ;1203
00042c  2a2c              CMP      r2,#0x2c              ;1203
00042e  d13a              BNE      |L9.1190|
000430  2200              MOVS     r2,#0                 ;1205
                  |L9.1074|
000432  5c25              LDRB     r5,[r4,r0]            ;1207
000434  e02c              B        |L9.1168|
000436  0000              DCW      0x0000
                  |L9.1080|
000438  256400            DCB      "%d",0
00043b  00                DCB      0
                  |L9.1084|
00043c  2f00              DCB      "/",0
00043e  00                DCB      0
00043f  00                DCB      0
                  |L9.1088|
                          DCD      ||.data||+0x34
                  |L9.1092|
                          DCD      C_DISCHARGE
                  |L9.1096|
                          DCD      Para
                  |L9.1100|
00044c  25303564          DCB      "%05d",0
000450  00      
000451  00                DCB      0
000452  00                DCB      0
000453  00                DCB      0
                  |L9.1108|
000454  25303664          DCB      "%06d",0
000458  00      
000459  00                DCB      0
00045a  00                DCB      0
00045b  00                DCB      0
                  |L9.1116|
00045c  25303464          DCB      "%04d",0
000460  00      
000461  00                DCB      0
000462  00                DCB      0
000463  00                DCB      0
                  |L9.1124|
                          DCD      max_discahrgeNum
                  |L9.1128|
000468  447a0000          DCFS     0x447a0000 ; 1000
                  |L9.1132|
                          DCD      shorttime
                  |L9.1136|
000470  25303364          DCB      "%03d",0
000474  00      
000475  00                DCB      0
000476  00                DCB      0
000477  00                DCB      0
                  |L9.1144|
000478  25316400          DCB      "%1d",0
                  |L9.1148|
                          DCD      finishflag
                  |L9.1152|
                          DCD      lockflag
                  |L9.1156|
                          DCD      version
                  |L9.1160|
000488  25326400          DCB      "%2d",0
                  |L9.1164|
                          DCD      Temperature
                  |L9.1168|
000490  eb030383          ADD      r3,r3,r3,LSL #2       ;1207
000494  1c40              ADDS     r0,r0,#1              ;1207
000496  1c52              ADDS     r2,r2,#1              ;1207
000498  eb060343          ADD      r3,r6,r3,LSL #1       ;1207
00049c  b2d2              UXTB     r2,r2                 ;1205
00049e  442b              ADD      r3,r3,r5              ;1207
0004a0  b280              UXTH     r0,r0                 ;1207
0004a2  2a05              CMP      r2,#5                 ;1205
0004a4  d3c5              BCC      |L9.1074|
                  |L9.1190|
0004a6  f8a13058          STRH     r3,[r1,#0x58]         ;1210
0004aa  5c22              LDRB     r2,[r4,r0]            ;1213
0004ac  1c40              ADDS     r0,r0,#1              ;1213
0004ae  2300              MOVS     r3,#0                 ;1211
0004b0  b280              UXTH     r0,r0                 ;1213
0004b2  2a2c              CMP      r2,#0x2c              ;1213
0004b4  d10c              BNE      |L9.1232|
0004b6  2200              MOVS     r2,#0                 ;1215
                  |L9.1208|
0004b8  5c25              LDRB     r5,[r4,r0]            ;1217
0004ba  eb030383          ADD      r3,r3,r3,LSL #2       ;1217
0004be  1c40              ADDS     r0,r0,#1              ;1217
0004c0  1c52              ADDS     r2,r2,#1              ;1217
0004c2  eb060343          ADD      r3,r6,r3,LSL #1       ;1217
0004c6  b2d2              UXTB     r2,r2                 ;1215
0004c8  442b              ADD      r3,r3,r5              ;1217
0004ca  b280              UXTH     r0,r0                 ;1217
0004cc  2a05              CMP      r2,#5                 ;1215
0004ce  d3f3              BCC      |L9.1208|
                  |L9.1232|
0004d0  f8a13060          STRH     r3,[r1,#0x60]         ;1220
0004d4  5c22              LDRB     r2,[r4,r0]            ;1223
0004d6  1c40              ADDS     r0,r0,#1              ;1223
0004d8  2300              MOVS     r3,#0                 ;1221
0004da  b280              UXTH     r0,r0                 ;1223
0004dc  2a2c              CMP      r2,#0x2c              ;1223
0004de  d10c              BNE      |L9.1274|
0004e0  2200              MOVS     r2,#0                 ;1225
                  |L9.1250|
0004e2  5c25              LDRB     r5,[r4,r0]            ;1227
0004e4  eb030383          ADD      r3,r3,r3,LSL #2       ;1227
0004e8  1c40              ADDS     r0,r0,#1              ;1227
0004ea  1c52              ADDS     r2,r2,#1              ;1227
0004ec  eb060343          ADD      r3,r6,r3,LSL #1       ;1227
0004f0  b2d2              UXTB     r2,r2                 ;1225
0004f2  442b              ADD      r3,r3,r5              ;1227
0004f4  b280              UXTH     r0,r0                 ;1227
0004f6  2a05              CMP      r2,#5                 ;1225
0004f8  d3f3              BCC      |L9.1250|
                  |L9.1274|
0004fa  65cb              STR      r3,[r1,#0x5c]         ;1230  ; Para
0004fc  5c22              LDRB     r2,[r4,r0]            ;1233
0004fe  1c40              ADDS     r0,r0,#1              ;1233
000500  2300              MOVS     r3,#0                 ;1231
000502  b280              UXTH     r0,r0                 ;1233
000504  2a2c              CMP      r2,#0x2c              ;1233
000506  d10c              BNE      |L9.1314|
000508  2200              MOVS     r2,#0                 ;1235
                  |L9.1290|
00050a  5c25              LDRB     r5,[r4,r0]            ;1237
00050c  eb030383          ADD      r3,r3,r3,LSL #2       ;1237
000510  1c40              ADDS     r0,r0,#1              ;1237
000512  1c52              ADDS     r2,r2,#1              ;1237
000514  eb060343          ADD      r3,r6,r3,LSL #1       ;1237
000518  b2d2              UXTB     r2,r2                 ;1235
00051a  442b              ADD      r3,r3,r5              ;1237
00051c  b280              UXTH     r0,r0                 ;1237
00051e  2a05              CMP      r2,#5                 ;1235
000520  d3f3              BCC      |L9.1290|
                  |L9.1314|
000522  f8a13062          STRH     r3,[r1,#0x62]         ;1240
000526  5c22              LDRB     r2,[r4,r0]            ;1243
000528  1c40              ADDS     r0,r0,#1              ;1243
00052a  2300              MOVS     r3,#0                 ;1241
00052c  b280              UXTH     r0,r0                 ;1243
00052e  2a2c              CMP      r2,#0x2c              ;1243
000530  d10c              BNE      |L9.1356|
000532  2200              MOVS     r2,#0                 ;1245
                  |L9.1332|
000534  5c25              LDRB     r5,[r4,r0]            ;1247
000536  eb030383          ADD      r3,r3,r3,LSL #2       ;1247
00053a  1c40              ADDS     r0,r0,#1              ;1247
00053c  1c52              ADDS     r2,r2,#1              ;1247
00053e  eb060343          ADD      r3,r6,r3,LSL #1       ;1247
000542  b2d2              UXTB     r2,r2                 ;1245
000544  442b              ADD      r3,r3,r5              ;1247
000546  b280              UXTH     r0,r0                 ;1247
000548  2a05              CMP      r2,#5                 ;1245
00054a  d3f3              BCC      |L9.1332|
                  |L9.1356|
00054c  f8a13064          STRH     r3,[r1,#0x64]         ;1250
000550  5c22              LDRB     r2,[r4,r0]            ;1253
000552  1c40              ADDS     r0,r0,#1              ;1253
000554  2300              MOVS     r3,#0                 ;1251
000556  b280              UXTH     r0,r0                 ;1253
000558  2a2c              CMP      r2,#0x2c              ;1253
00055a  d10c              BNE      |L9.1398|
00055c  2200              MOVS     r2,#0                 ;1255
                  |L9.1374|
00055e  5c25              LDRB     r5,[r4,r0]            ;1257
000560  eb030383          ADD      r3,r3,r3,LSL #2       ;1257
000564  1c40              ADDS     r0,r0,#1              ;1257
000566  1c52              ADDS     r2,r2,#1              ;1257
000568  eb060343          ADD      r3,r6,r3,LSL #1       ;1257
00056c  b2d2              UXTB     r2,r2                 ;1255
00056e  442b              ADD      r3,r3,r5              ;1257
000570  b280              UXTH     r0,r0                 ;1257
000572  2a05              CMP      r2,#5                 ;1255
000574  d3f3              BCC      |L9.1374|
                  |L9.1398|
000576  f8a13066          STRH     r3,[r1,#0x66]         ;1260
00057a  5c22              LDRB     r2,[r4,r0]            ;1263
00057c  1c40              ADDS     r0,r0,#1              ;1263
00057e  2300              MOVS     r3,#0                 ;1261
000580  b280              UXTH     r0,r0                 ;1263
000582  2a2c              CMP      r2,#0x2c              ;1263
000584  d10c              BNE      |L9.1440|
000586  2200              MOVS     r2,#0                 ;1265
                  |L9.1416|
000588  5c25              LDRB     r5,[r4,r0]            ;1267
00058a  eb030383          ADD      r3,r3,r3,LSL #2       ;1267
00058e  1c40              ADDS     r0,r0,#1              ;1267
000590  1c52              ADDS     r2,r2,#1              ;1267
000592  eb060343          ADD      r3,r6,r3,LSL #1       ;1267
000596  b2d2              UXTB     r2,r2                 ;1265
000598  442b              ADD      r3,r3,r5              ;1267
00059a  b280              UXTH     r0,r0                 ;1267
00059c  2a05              CMP      r2,#5                 ;1265
00059e  d3f3              BCC      |L9.1416|
                  |L9.1440|
0005a0  668b              STR      r3,[r1,#0x68]         ;1270  ; Para
0005a2  5c22              LDRB     r2,[r4,r0]            ;1273
0005a4  1c40              ADDS     r0,r0,#1              ;1273
0005a6  2300              MOVS     r3,#0                 ;1271
0005a8  b280              UXTH     r0,r0                 ;1273
0005aa  2a2c              CMP      r2,#0x2c              ;1273
0005ac  d10c              BNE      |L9.1480|
0005ae  2200              MOVS     r2,#0                 ;1275
                  |L9.1456|
0005b0  5c25              LDRB     r5,[r4,r0]            ;1277
0005b2  eb030383          ADD      r3,r3,r3,LSL #2       ;1277
0005b6  1c40              ADDS     r0,r0,#1              ;1277
0005b8  1c52              ADDS     r2,r2,#1              ;1277
0005ba  eb060343          ADD      r3,r6,r3,LSL #1       ;1277
0005be  b2d2              UXTB     r2,r2                 ;1275
0005c0  442b              ADD      r3,r3,r5              ;1277
0005c2  b280              UXTH     r0,r0                 ;1277
0005c4  2a05              CMP      r2,#5                 ;1275
0005c6  d3f3              BCC      |L9.1456|
                  |L9.1480|
0005c8  f8a1306c          STRH     r3,[r1,#0x6c]         ;1280
0005cc  5c22              LDRB     r2,[r4,r0]            ;1283
0005ce  1c40              ADDS     r0,r0,#1              ;1283
0005d0  2300              MOVS     r3,#0                 ;1281
0005d2  b280              UXTH     r0,r0                 ;1283
0005d4  2a2c              CMP      r2,#0x2c              ;1283
0005d6  d10c              BNE      |L9.1522|
0005d8  2200              MOVS     r2,#0                 ;1285
                  |L9.1498|
0005da  5c25              LDRB     r5,[r4,r0]            ;1287
0005dc  eb030383          ADD      r3,r3,r3,LSL #2       ;1287
0005e0  1c40              ADDS     r0,r0,#1              ;1287
0005e2  1c52              ADDS     r2,r2,#1              ;1287
0005e4  eb060343          ADD      r3,r6,r3,LSL #1       ;1287
0005e8  b2d2              UXTB     r2,r2                 ;1285
0005ea  442b              ADD      r3,r3,r5              ;1287
0005ec  b280              UXTH     r0,r0                 ;1287
0005ee  2a05              CMP      r2,#5                 ;1285
0005f0  d3f3              BCC      |L9.1498|
                  |L9.1522|
0005f2  670b              STR      r3,[r1,#0x70]         ;1290  ; Para
0005f4  5c22              LDRB     r2,[r4,r0]            ;1293
0005f6  1c40              ADDS     r0,r0,#1              ;1293
0005f8  2300              MOVS     r3,#0                 ;1291
0005fa  b280              UXTH     r0,r0                 ;1293
0005fc  2a2c              CMP      r2,#0x2c              ;1293
0005fe  d10c              BNE      |L9.1562|
000600  2200              MOVS     r2,#0                 ;1295
                  |L9.1538|
000602  5c25              LDRB     r5,[r4,r0]            ;1297
000604  eb030383          ADD      r3,r3,r3,LSL #2       ;1297
000608  1c40              ADDS     r0,r0,#1              ;1297
00060a  1c52              ADDS     r2,r2,#1              ;1297
00060c  eb060343          ADD      r3,r6,r3,LSL #1       ;1297
000610  b2d2              UXTB     r2,r2                 ;1295
000612  442b              ADD      r3,r3,r5              ;1297
000614  b280              UXTH     r0,r0                 ;1297
000616  2a05              CMP      r2,#5                 ;1295
000618  d3f3              BCC      |L9.1538|
                  |L9.1562|
00061a  674b              STR      r3,[r1,#0x74]         ;1300  ; Para
00061c  5c22              LDRB     r2,[r4,r0]            ;1303
00061e  1c40              ADDS     r0,r0,#1              ;1303
000620  2300              MOVS     r3,#0                 ;1301
000622  b280              UXTH     r0,r0                 ;1303
000624  2a2c              CMP      r2,#0x2c              ;1303
000626  d10c              BNE      |L9.1602|
000628  2200              MOVS     r2,#0                 ;1305
                  |L9.1578|
00062a  5c25              LDRB     r5,[r4,r0]            ;1307
00062c  eb030383          ADD      r3,r3,r3,LSL #2       ;1307
000630  1c40              ADDS     r0,r0,#1              ;1307
000632  1c52              ADDS     r2,r2,#1              ;1307
000634  eb060343          ADD      r3,r6,r3,LSL #1       ;1307
000638  b2d2              UXTB     r2,r2                 ;1305
00063a  442b              ADD      r3,r3,r5              ;1307
00063c  b280              UXTH     r0,r0                 ;1307
00063e  2a03              CMP      r2,#3                 ;1305
000640  d3f3              BCC      |L9.1578|
                  |L9.1602|
000642  f8813078          STRB     r3,[r1,#0x78]         ;1310
000646  5c22              LDRB     r2,[r4,r0]            ;1313
000648  1c40              ADDS     r0,r0,#1              ;1313
00064a  2300              MOVS     r3,#0                 ;1311
00064c  b280              UXTH     r0,r0                 ;1313
00064e  2a2c              CMP      r2,#0x2c              ;1313
000650  d10c              BNE      |L9.1644|
000652  2200              MOVS     r2,#0                 ;1315
                  |L9.1620|
000654  5c25              LDRB     r5,[r4,r0]            ;1317
000656  eb030383          ADD      r3,r3,r3,LSL #2       ;1317
00065a  1c40              ADDS     r0,r0,#1              ;1317
00065c  1c52              ADDS     r2,r2,#1              ;1317
00065e  eb060343          ADD      r3,r6,r3,LSL #1       ;1317
000662  b2d2              UXTB     r2,r2                 ;1315
000664  442b              ADD      r3,r3,r5              ;1317
000666  b280              UXTH     r0,r0                 ;1317
000668  2a03              CMP      r2,#3                 ;1315
00066a  d3f3              BCC      |L9.1620|
                  |L9.1644|
00066c  f89b2005          LDRB     r2,[r11,#5]           ;1320  ; MODE
000670  465f              MOV      r7,r11                ;1320
000672  b902              CBNZ     r2,|L9.1654|
000674  618b              STR      r3,[r1,#0x18]         ;1322  ; Para
                  |L9.1654|
000676  5c22              LDRB     r2,[r4,r0]            ;1327
000678  1c40              ADDS     r0,r0,#1              ;1327
00067a  2300              MOVS     r3,#0                 ;1324
00067c  b280              UXTH     r0,r0                 ;1327
00067e  2a2c              CMP      r2,#0x2c              ;1327
000680  d10c              BNE      |L9.1692|
000682  2200              MOVS     r2,#0                 ;1329
                  |L9.1668|
000684  5c25              LDRB     r5,[r4,r0]            ;1331
000686  eb030383          ADD      r3,r3,r3,LSL #2       ;1331
00068a  1c40              ADDS     r0,r0,#1              ;1331
00068c  1c52              ADDS     r2,r2,#1              ;1331
00068e  eb060343          ADD      r3,r6,r3,LSL #1       ;1331
000692  b2d2              UXTB     r2,r2                 ;1329
000694  442b              ADD      r3,r3,r5              ;1331
000696  b280              UXTH     r0,r0                 ;1331
000698  2a03              CMP      r2,#3                 ;1329
00069a  d3f3              BCC      |L9.1668|
                  |L9.1692|
00069c  71fb              STRB     r3,[r7,#7]            ;1334
00069e  5c23              LDRB     r3,[r4,r0]            ;1337
0006a0  1c40              ADDS     r0,r0,#1              ;1337
0006a2  2200              MOVS     r2,#0                 ;1335
0006a4  b285              UXTH     r5,r0                 ;1337
0006a6  2b2c              CMP      r3,#0x2c              ;1337
0006a8  d10c              BNE      |L9.1732|
0006aa  2000              MOVS     r0,#0                 ;1339
                  |L9.1708|
0006ac  5d63              LDRB     r3,[r4,r5]            ;1341
0006ae  eb020282          ADD      r2,r2,r2,LSL #2       ;1341
0006b2  1c6d              ADDS     r5,r5,#1              ;1341
0006b4  1c40              ADDS     r0,r0,#1              ;1341
0006b6  eb060242          ADD      r2,r6,r2,LSL #1       ;1341
0006ba  b2c0              UXTB     r0,r0                 ;1339
0006bc  441a              ADD      r2,r2,r3              ;1341
0006be  b2ad              UXTH     r5,r5                 ;1341
0006c0  2803              CMP      r0,#3                 ;1339
0006c2  d3f3              BCC      |L9.1708|
                  |L9.1732|
0006c4  f8812052          STRB     r2,[r1,#0x52]         ;1344
0006c8  7978              LDRB     r0,[r7,#5]            ;1347  ; MODE
0006ca  f7fffffe          BL       MODE_PARASET
0006ce  e211              B        |L9.2804|
                  |L9.1744|
0006d0  5d60              LDRB     r0,[r4,r5]            ;1354
0006d2  283f              CMP      r0,#0x3f              ;1354
0006d4  d002              BEQ      |L9.1756|
0006d6  2d0b              CMP      r5,#0xb               ;1363
0006d8  d003              BEQ      |L9.1762|
0006da  e010              B        |L9.1790|
                  |L9.1756|
0006dc  1960              ADDS     r0,r4,r5              ;1356
0006de  780a              LDRB     r2,[r1,#0]            ;1356  ; C_DISCHARGE
0006e0  e615              B        |L9.782|
                  |L9.1762|
0006e2  2000              MOVS     r0,#0                 ;1365
0006e4  4607              MOV      r7,r0                 ;1365
                  |L9.1766|
0006e6  5d61              LDRB     r1,[r4,r5]            ;1367
0006e8  eb070287          ADD      r2,r7,r7,LSL #2       ;1367
0006ec  eb060242          ADD      r2,r6,r2,LSL #1       ;1367
0006f0  1c6d              ADDS     r5,r5,#1              ;1367
0006f2  1c40              ADDS     r0,r0,#1              ;1367
0006f4  188f              ADDS     r7,r1,r2              ;1367
0006f6  b2c0              UXTB     r0,r0                 ;1365
0006f8  b2ad              UXTH     r5,r5                 ;1367
0006fa  2802              CMP      r0,#2                 ;1365
0006fc  d3f3              BCC      |L9.1766|
                  |L9.1790|
0006fe  48fe              LDR      r0,|L9.2808|
000700  7147              STRB     r7,[r0,#5]            ;1370
000702  7940              LDRB     r0,[r0,#5]            ;1373  ; MODE
000704  2700              MOVS     r7,#0                 ;1371
000706  f8dfb3f4          LDR      r11,|L9.2812|
00070a  f6446120          MOV      r1,#0x4e20            ;1396
00070e  b1a8              CBZ      r0,|L9.1852|
000710  4af9              LDR      r2,|L9.2808|
000712  7950              LDRB     r0,[r2,#5]            ;1417  ; MODE
000714  2801              CMP      r0,#1                 ;1417
000716  d062              BEQ      |L9.2014|
000718  4610              MOV      r0,r2                 ;1446
00071a  7940              LDRB     r0,[r0,#5]            ;1446  ; MODE
00071c  2802              CMP      r0,#2                 ;1446
00071e  d07c              BEQ      |L9.2074|
000720  7950              LDRB     r0,[r2,#5]            ;1478  ; MODE
000722  2803              CMP      r0,#3                 ;1478
000724  d07a              BEQ      |L9.2076|
000726  4610              MOV      r0,r2                 ;1510
000728  7940              LDRB     r0,[r0,#5]            ;1510  ; MODE
00072a  2804              CMP      r0,#4                 ;1510
00072c  d077              BEQ      |L9.2078|
00072e  7950              LDRB     r0,[r2,#5]            ;1553  ; MODE
000730  2805              CMP      r0,#5                 ;1553
000732  d075              BEQ      |L9.2080|
000734  7950              LDRB     r0,[r2,#5]            ;1584  ; MODE
000736  2806              CMP      r0,#6                 ;1584
000738  d073              BEQ      |L9.2082|
                  |L9.1850|
00073a  e1d5              B        |L9.2792|
                  |L9.1852|
00073c  5d62              LDRB     r2,[r4,r5]            ;1375
00073e  1c6d              ADDS     r5,r5,#1              ;1375
000740  b2a8              UXTH     r0,r5                 ;1375
000742  2a2c              CMP      r2,#0x2c              ;1375
000744  d106              BNE      |L9.1876|
000746  2200              MOVS     r2,#0                 ;1377
                  |L9.1864|
000748  1c40              ADDS     r0,r0,#1              ;1377
00074a  1c52              ADDS     r2,r2,#1              ;1379
00074c  b2d2              UXTB     r2,r2                 ;1377
00074e  b280              UXTH     r0,r0                 ;1379
000750  2a05              CMP      r2,#5                 ;1377
000752  d3f9              BCC      |L9.1864|
                  |L9.1876|
000754  5c23              LDRB     r3,[r4,r0]            ;1385
000756  1c40              ADDS     r0,r0,#1              ;1385
000758  2200              MOVS     r2,#0                 ;1383
00075a  b285              UXTH     r5,r0                 ;1385
00075c  2b2c              CMP      r3,#0x2c              ;1385
00075e  d10c              BNE      |L9.1914|
000760  2000              MOVS     r0,#0                 ;1387
                  |L9.1890|
000762  5d63              LDRB     r3,[r4,r5]            ;1389
000764  eb020282          ADD      r2,r2,r2,LSL #2       ;1389
000768  1c6d              ADDS     r5,r5,#1              ;1389
00076a  1c40              ADDS     r0,r0,#1              ;1389
00076c  eb060242          ADD      r2,r6,r2,LSL #1       ;1389
000770  b2c0              UXTB     r0,r0                 ;1387
000772  441a              ADD      r2,r2,r3              ;1389
000774  b2ad              UXTH     r5,r5                 ;1389
000776  2805              CMP      r0,#5                 ;1387
000778  d3f3              BCC      |L9.1890|
                  |L9.1914|
00077a  f8ca2014          STR      r2,[r10,#0x14]        ;1392  ; Para
00077e  f8da0014          LDR      r0,[r10,#0x14]        ;1396  ; Para
000782  2700              MOVS     r7,#0                 ;1393
000784  4288              CMP      r0,r1                 ;1396
000786  d907              BLS      |L9.1944|
000788  2001              MOVS     r0,#1                 ;1398
00078a  f8cb0020          STR      r0,[r11,#0x20]        ;1398  ; Run_Control
00078e  02c1              LSLS     r1,r0,#11             ;1399
000790  48db              LDR      r0,|L9.2816|
000792  f7fffffe          BL       GPIO_ResetBits
000796  e007              B        |L9.1960|
                  |L9.1944|
000798  2000              MOVS     r0,#0                 ;1401
00079a  f8cb0020          STR      r0,[r11,#0x20]        ;1401  ; Run_Control
00079e  f44f6100          MOV      r1,#0x800             ;1402
0007a2  48d7              LDR      r0,|L9.2816|
0007a4  f7fffffe          BL       GPIO_SetBits
                  |L9.1960|
0007a8  5d60              LDRB     r0,[r4,r5]            ;1404
0007aa  1c6d              ADDS     r5,r5,#1              ;1404
0007ac  b2ad              UXTH     r5,r5                 ;1404
0007ae  282c              CMP      r0,#0x2c              ;1404
0007b0  d10c              BNE      |L9.1996|
0007b2  2000              MOVS     r0,#0                 ;1406
                  |L9.1972|
0007b4  5d61              LDRB     r1,[r4,r5]            ;1408
0007b6  eb070287          ADD      r2,r7,r7,LSL #2       ;1408
0007ba  eb060242          ADD      r2,r6,r2,LSL #1       ;1408
0007be  1c6d              ADDS     r5,r5,#1              ;1408
0007c0  188f              ADDS     r7,r1,r2              ;1408
0007c2  1c40              ADDS     r0,r0,#1              ;1408
0007c4  b2ad              UXTH     r5,r5                 ;1408
0007c6  f01000ff          ANDS     r0,r0,#0xff           ;1406
0007ca  d0f3              BEQ      |L9.1972|
                  |L9.1996|
0007cc  48ca              LDR      r0,|L9.2808|
0007ce  7187              STRB     r7,[r0,#6]            ;1411
0007d0  7980              LDRB     r0,[r0,#6]            ;1412  ; mainswitch
0007d2  2800              CMP      r0,#0                 ;1412
0007d4  d1b1              BNE      |L9.1850|
0007d6  2101              MOVS     r1,#1                 ;1414
0007d8  f8cb1020          STR      r1,[r11,#0x20]        ;1414  ; Run_Control
0007dc  e121              B        |L9.2594|
                  |L9.2014|
0007de  5d61              LDRB     r1,[r4,r5]            ;1418
0007e0  1c6d              ADDS     r5,r5,#1              ;1418
0007e2  b2a8              UXTH     r0,r5                 ;1418
0007e4  292c              CMP      r1,#0x2c              ;1418
0007e6  d10c              BNE      |L9.2050|
0007e8  2100              MOVS     r1,#0                 ;1420
                  |L9.2026|
0007ea  5c23              LDRB     r3,[r4,r0]            ;1422
0007ec  eb070587          ADD      r5,r7,r7,LSL #2       ;1422
0007f0  eb060545          ADD      r5,r6,r5,LSL #1       ;1422
0007f4  1c40              ADDS     r0,r0,#1              ;1422
0007f6  1c49              ADDS     r1,r1,#1              ;1422
0007f8  195f              ADDS     r7,r3,r5              ;1422
0007fa  b2c9              UXTB     r1,r1                 ;1420
0007fc  b280              UXTH     r0,r0                 ;1422
0007fe  2905              CMP      r1,#5                 ;1420
000800  d3f3              BCC      |L9.2026|
                  |L9.2050|
000802  4655              MOV      r5,r10                ;1425
000804  f8aa7064          STRH     r7,[r10,#0x64]        ;1425
000808  5c21              LDRB     r1,[r4,r0]            ;1428
00080a  1c40              ADDS     r0,r0,#1              ;1428
00080c  2300              MOVS     r3,#0                 ;1426
00080e  b280              UXTH     r0,r0                 ;1428
000810  292c              CMP      r1,#0x2c              ;1428
000812  d112              BNE      |L9.2106|
000814  2100              MOVS     r1,#0                 ;1430
                  |L9.2070|
000816  5c27              LDRB     r7,[r4,r0]            ;1432
000818  e004              B        |L9.2084|
                  |L9.2074|
00081a  e024              B        |L9.2150|
                  |L9.2076|
00081c  e06d              B        |L9.2298|
                  |L9.2078|
00081e  e0ac              B        |L9.2426|
                  |L9.2080|
000820  e105              B        |L9.2606|
                  |L9.2082|
000822  e135              B        |L9.2704|
                  |L9.2084|
000824  eb030383          ADD      r3,r3,r3,LSL #2       ;1432
000828  1c40              ADDS     r0,r0,#1              ;1432
00082a  1c49              ADDS     r1,r1,#1              ;1432
00082c  eb060343          ADD      r3,r6,r3,LSL #1       ;1432
000830  b2c9              UXTB     r1,r1                 ;1430
000832  443b              ADD      r3,r3,r7              ;1432
000834  b280              UXTH     r0,r0                 ;1432
000836  2905              CMP      r1,#5                 ;1430
000838  d3ed              BCC      |L9.2070|
                  |L9.2106|
00083a  f8a53066          STRH     r3,[r5,#0x66]         ;1435
00083e  5c23              LDRB     r3,[r4,r0]            ;1438
000840  1c40              ADDS     r0,r0,#1              ;1438
000842  2100              MOVS     r1,#0                 ;1436
000844  b285              UXTH     r5,r0                 ;1438
000846  2b2c              CMP      r3,#0x2c              ;1438
000848  d10c              BNE      |L9.2148|
00084a  2000              MOVS     r0,#0                 ;1440
                  |L9.2124|
00084c  5d63              LDRB     r3,[r4,r5]            ;1442
00084e  1c6d              ADDS     r5,r5,#1              ;1442
000850  eb010181          ADD      r1,r1,r1,LSL #2       ;1442
000854  eb060141          ADD      r1,r6,r1,LSL #1       ;1442
000858  1c40              ADDS     r0,r0,#1              ;1442
00085a  4419              ADD      r1,r1,r3              ;1442
00085c  b2ad              UXTH     r5,r5                 ;1442
00085e  f01000ff          ANDS     r0,r0,#0xff           ;1440
000862  d0f3              BEQ      |L9.2124|
                  |L9.2148|
000864  e13f              B        |L9.2790|
                  |L9.2150|
000866  2101              MOVS     r1,#1                 ;1447
000868  f8cb1020          STR      r1,[r11,#0x20]        ;1447  ; Run_Control
00086c  02c9              LSLS     r1,r1,#11             ;1448
00086e  48a4              LDR      r0,|L9.2816|
000870  f7fffffe          BL       GPIO_ResetBits
000874  5d61              LDRB     r1,[r4,r5]            ;1449
000876  1c6d              ADDS     r5,r5,#1              ;1449
000878  b2a8              UXTH     r0,r5                 ;1449
00087a  292c              CMP      r1,#0x2c              ;1449
00087c  d10c              BNE      |L9.2200|
00087e  2100              MOVS     r1,#0                 ;1451
                  |L9.2176|
000880  5c22              LDRB     r2,[r4,r0]            ;1453
000882  eb070387          ADD      r3,r7,r7,LSL #2       ;1453
000886  eb060343          ADD      r3,r6,r3,LSL #1       ;1453
00088a  1c40              ADDS     r0,r0,#1              ;1453
00088c  1c49              ADDS     r1,r1,#1              ;1453
00088e  18d7              ADDS     r7,r2,r3              ;1453
000890  b2c9              UXTB     r1,r1                 ;1451
000892  b280              UXTH     r0,r0                 ;1453
000894  2905              CMP      r1,#5                 ;1451
000896  d3f3              BCC      |L9.2176|
                  |L9.2200|
000898  4653              MOV      r3,r10                ;1456
00089a  f8ca7044          STR      r7,[r10,#0x44]        ;1456  ; Para
00089e  5c21              LDRB     r1,[r4,r0]            ;1459
0008a0  1c40              ADDS     r0,r0,#1              ;1459
0008a2  2200              MOVS     r2,#0                 ;1457
0008a4  b280              UXTH     r0,r0                 ;1459
0008a6  292c              CMP      r1,#0x2c              ;1459
0008a8  d10c              BNE      |L9.2244|
0008aa  2100              MOVS     r1,#0                 ;1461
                  |L9.2220|
0008ac  5c25              LDRB     r5,[r4,r0]            ;1463
0008ae  eb020282          ADD      r2,r2,r2,LSL #2       ;1463
0008b2  1c40              ADDS     r0,r0,#1              ;1463
0008b4  1c49              ADDS     r1,r1,#1              ;1463
0008b6  eb060242          ADD      r2,r6,r2,LSL #1       ;1463
0008ba  b2c9              UXTB     r1,r1                 ;1461
0008bc  442a              ADD      r2,r2,r5              ;1463
0008be  b280              UXTH     r0,r0                 ;1463
0008c0  2905              CMP      r1,#5                 ;1461
0008c2  d3f3              BCC      |L9.2220|
                  |L9.2244|
0008c4  f8a32048          STRH     r2,[r3,#0x48]         ;1466
0008c8  5c22              LDRB     r2,[r4,r0]            ;1469
0008ca  1c40              ADDS     r0,r0,#1              ;1469
0008cc  2100              MOVS     r1,#0                 ;1467
0008ce  b285              UXTH     r5,r0                 ;1469
0008d0  2a2c              CMP      r2,#0x2c              ;1469
0008d2  d10c              BNE      |L9.2286|
0008d4  2000              MOVS     r0,#0                 ;1471
                  |L9.2262|
0008d6  5d62              LDRB     r2,[r4,r5]            ;1473
0008d8  1c6d              ADDS     r5,r5,#1              ;1473
0008da  eb010181          ADD      r1,r1,r1,LSL #2       ;1473
0008de  eb060141          ADD      r1,r6,r1,LSL #1       ;1473
0008e2  1c40              ADDS     r0,r0,#1              ;1473
0008e4  4411              ADD      r1,r1,r2              ;1473
0008e6  b2ad              UXTH     r5,r5                 ;1473
0008e8  f01000ff          ANDS     r0,r0,#0xff           ;1471
0008ec  d0f3              BEQ      |L9.2262|
                  |L9.2286|
0008ee  4882              LDR      r0,|L9.2808|
0008f0  7181              STRB     r1,[r0,#6]            ;1476
0008f2  4984              LDR      r1,|L9.2820|
0008f4  2000              MOVS     r0,#0                 ;1477
0008f6  7008              STRB     r0,[r1,#0]            ;1477
0008f8  e0f6              B        |L9.2792|
                  |L9.2298|
0008fa  5d61              LDRB     r1,[r4,r5]            ;1479
0008fc  1c6d              ADDS     r5,r5,#1              ;1479
0008fe  b2a8              UXTH     r0,r5                 ;1479
000900  292c              CMP      r1,#0x2c              ;1479
000902  d10c              BNE      |L9.2334|
000904  2100              MOVS     r1,#0                 ;1481
                  |L9.2310|
000906  5c23              LDRB     r3,[r4,r0]            ;1483
000908  eb070587          ADD      r5,r7,r7,LSL #2       ;1483
00090c  eb060545          ADD      r5,r6,r5,LSL #1       ;1483
000910  1c40              ADDS     r0,r0,#1              ;1483
000912  1c49              ADDS     r1,r1,#1              ;1483
000914  195f              ADDS     r7,r3,r5              ;1483
000916  b2c9              UXTB     r1,r1                 ;1481
000918  b280              UXTH     r0,r0                 ;1483
00091a  2905              CMP      r1,#5                 ;1481
00091c  d3f3              BCC      |L9.2310|
                  |L9.2334|
00091e  4655              MOV      r5,r10                ;1486
000920  e000              B        |L9.2340|
                  |L9.2338|
000922  e1e5              B        |L9.3312|
                  |L9.2340|
000924  f8aa7064          STRH     r7,[r10,#0x64]        ;1486
000928  5c21              LDRB     r1,[r4,r0]            ;1490
00092a  1c40              ADDS     r0,r0,#1              ;1490
00092c  2300              MOVS     r3,#0                 ;1487
00092e  b280              UXTH     r0,r0                 ;1490
000930  292c              CMP      r1,#0x2c              ;1490
000932  d10c              BNE      |L9.2382|
000934  2100              MOVS     r1,#0                 ;1492
                  |L9.2358|
000936  5c27              LDRB     r7,[r4,r0]            ;1494
000938  eb030383          ADD      r3,r3,r3,LSL #2       ;1494
00093c  1c40              ADDS     r0,r0,#1              ;1494
00093e  1c49              ADDS     r1,r1,#1              ;1494
000940  eb060343          ADD      r3,r6,r3,LSL #1       ;1494
000944  b2c9              UXTB     r1,r1                 ;1492
000946  443b              ADD      r3,r3,r7              ;1494
000948  b280              UXTH     r0,r0                 ;1494
00094a  2905              CMP      r1,#5                 ;1492
00094c  d3f3              BCC      |L9.2358|
                  |L9.2382|
00094e  f8a53066          STRH     r3,[r5,#0x66]         ;1497
000952  5c23              LDRB     r3,[r4,r0]            ;1500
000954  1c40              ADDS     r0,r0,#1              ;1500
000956  2100              MOVS     r1,#0                 ;1498
000958  b285              UXTH     r5,r0                 ;1500
00095a  2b2c              CMP      r3,#0x2c              ;1500
00095c  d10c              BNE      |L9.2424|
00095e  2000              MOVS     r0,#0                 ;1502
                  |L9.2400|
000960  5d63              LDRB     r3,[r4,r5]            ;1504
000962  1c6d              ADDS     r5,r5,#1              ;1504
000964  eb010181          ADD      r1,r1,r1,LSL #2       ;1504
000968  eb060141          ADD      r1,r6,r1,LSL #1       ;1504
00096c  1c40              ADDS     r0,r0,#1              ;1504
00096e  4419              ADD      r1,r1,r3              ;1504
000970  b2ad              UXTH     r5,r5                 ;1504
000972  f01000ff          ANDS     r0,r0,#0xff           ;1502
000976  d0f3              BEQ      |L9.2400|
                  |L9.2424|
000978  e0b5              B        |L9.2790|
                  |L9.2426|
00097a  5d62              LDRB     r2,[r4,r5]            ;1511
00097c  1c6d              ADDS     r5,r5,#1              ;1511
00097e  b2a8              UXTH     r0,r5                 ;1511
000980  2a2c              CMP      r2,#0x2c              ;1511
000982  d106              BNE      |L9.2450|
000984  2200              MOVS     r2,#0                 ;1513
                  |L9.2438|
000986  1c40              ADDS     r0,r0,#1              ;1513
000988  1c52              ADDS     r2,r2,#1              ;1515
00098a  b2d2              UXTB     r2,r2                 ;1513
00098c  b280              UXTH     r0,r0                 ;1515
00098e  2a05              CMP      r2,#5                 ;1513
000990  d3f9              BCC      |L9.2438|
                  |L9.2450|
000992  5c23              LDRB     r3,[r4,r0]            ;1521
000994  1c40              ADDS     r0,r0,#1              ;1521
000996  2200              MOVS     r2,#0                 ;1519
000998  b285              UXTH     r5,r0                 ;1521
00099a  2b2c              CMP      r3,#0x2c              ;1521
00099c  d10c              BNE      |L9.2488|
00099e  2000              MOVS     r0,#0                 ;1523
                  |L9.2464|
0009a0  5d63              LDRB     r3,[r4,r5]            ;1525
0009a2  eb020282          ADD      r2,r2,r2,LSL #2       ;1525
0009a6  1c6d              ADDS     r5,r5,#1              ;1525
0009a8  1c40              ADDS     r0,r0,#1              ;1525
0009aa  eb060242          ADD      r2,r6,r2,LSL #1       ;1525
0009ae  b2c0              UXTB     r0,r0                 ;1523
0009b0  441a              ADD      r2,r2,r3              ;1525
0009b2  b2ad              UXTH     r5,r5                 ;1525
0009b4  2805              CMP      r0,#5                 ;1523
0009b6  d3f3              BCC      |L9.2464|
                  |L9.2488|
0009b8  f8ca2014          STR      r2,[r10,#0x14]        ;1528  ; Para
0009bc  f8da0014          LDR      r0,[r10,#0x14]        ;1532  ; Para
0009c0  2700              MOVS     r7,#0                 ;1529
0009c2  4288              CMP      r0,r1                 ;1532
0009c4  d90c              BLS      |L9.2528|
0009c6  2001              MOVS     r0,#1                 ;1534
0009c8  f8cb0020          STR      r0,[r11,#0x20]        ;1534  ; Run_Control
0009cc  02c1              LSLS     r1,r0,#11             ;1535
0009ce  e003              B        |L9.2520|
                  |L9.2512|
0009d0  e09d              B        |L9.2830|
                  |L9.2514|
0009d2  e0f5              B        |L9.3008|
                  |L9.2516|
0009d4  e135              B        |L9.3138|
                  |L9.2518|
0009d6  e133              B        |L9.3136|
                  |L9.2520|
0009d8  4849              LDR      r0,|L9.2816|
0009da  f7fffffe          BL       GPIO_ResetBits
0009de  e007              B        |L9.2544|
                  |L9.2528|
0009e0  2000              MOVS     r0,#0                 ;1537
0009e2  f8cb0020          STR      r0,[r11,#0x20]        ;1537  ; Run_Control
0009e6  f44f6100          MOV      r1,#0x800             ;1538
0009ea  4845              LDR      r0,|L9.2816|
0009ec  f7fffffe          BL       GPIO_SetBits
                  |L9.2544|
0009f0  5d60              LDRB     r0,[r4,r5]            ;1540
0009f2  1c6d              ADDS     r5,r5,#1              ;1540
0009f4  b2ad              UXTH     r5,r5                 ;1540
0009f6  282c              CMP      r0,#0x2c              ;1540
0009f8  d10c              BNE      |L9.2580|
0009fa  2000              MOVS     r0,#0                 ;1542
                  |L9.2556|
0009fc  5d61              LDRB     r1,[r4,r5]            ;1544
0009fe  eb070287          ADD      r2,r7,r7,LSL #2       ;1544
000a02  eb060242          ADD      r2,r6,r2,LSL #1       ;1544
000a06  1c6d              ADDS     r5,r5,#1              ;1544
000a08  188f              ADDS     r7,r1,r2              ;1544
000a0a  1c40              ADDS     r0,r0,#1              ;1544
000a0c  b2ad              UXTH     r5,r5                 ;1544
000a0e  f01000ff          ANDS     r0,r0,#0xff           ;1542
000a12  d0f3              BEQ      |L9.2556|
                  |L9.2580|
000a14  4838              LDR      r0,|L9.2808|
000a16  7187              STRB     r7,[r0,#6]            ;1547
000a18  7980              LDRB     r0,[r0,#6]            ;1548  ; mainswitch
000a1a  bbc0              CBNZ     r0,|L9.2702|
000a1c  2001              MOVS     r0,#1                 ;1550
000a1e  f8cb0020          STR      r0,[r11,#0x20]        ;1550  ; Run_Control
                  |L9.2594|
000a22  f44f6100          MOV      r1,#0x800             ;1551
000a26  4836              LDR      r0,|L9.2816|
000a28  f7fffffe          BL       GPIO_ResetBits
000a2c  e05c              B        |L9.2792|
                  |L9.2606|
000a2e  5d61              LDRB     r1,[r4,r5]            ;1554
000a30  1c6d              ADDS     r5,r5,#1              ;1554
000a32  b2a8              UXTH     r0,r5                 ;1554
000a34  292c              CMP      r1,#0x2c              ;1554
000a36  d106              BNE      |L9.2630|
000a38  2100              MOVS     r1,#0                 ;1556
                  |L9.2618|
000a3a  1c40              ADDS     r0,r0,#1              ;1556
000a3c  1c49              ADDS     r1,r1,#1              ;1558
000a3e  b2c9              UXTB     r1,r1                 ;1556
000a40  b280              UXTH     r0,r0                 ;1558
000a42  2905              CMP      r1,#5                 ;1556
000a44  d3f9              BCC      |L9.2618|
                  |L9.2630|
000a46  5c21              LDRB     r1,[r4,r0]            ;1563
000a48  1c40              ADDS     r0,r0,#1              ;1563
000a4a  b280              UXTH     r0,r0                 ;1563
000a4c  292c              CMP      r1,#0x2c              ;1563
000a4e  d106              BNE      |L9.2654|
000a50  2100              MOVS     r1,#0                 ;1565
                  |L9.2642|
000a52  1c40              ADDS     r0,r0,#1              ;1565
000a54  1c49              ADDS     r1,r1,#1              ;1567
000a56  b2c9              UXTB     r1,r1                 ;1565
000a58  b280              UXTH     r0,r0                 ;1567
000a5a  2905              CMP      r1,#5                 ;1565
000a5c  d3f9              BCC      |L9.2642|
                  |L9.2654|
000a5e  5c23              LDRB     r3,[r4,r0]            ;1572
000a60  1c40              ADDS     r0,r0,#1              ;1572
000a62  2100              MOVS     r1,#0                 ;1570
000a64  b285              UXTH     r5,r0                 ;1572
000a66  2b2c              CMP      r3,#0x2c              ;1572
000a68  d10c              BNE      |L9.2692|
000a6a  2000              MOVS     r0,#0                 ;1574
                  |L9.2668|
000a6c  5d63              LDRB     r3,[r4,r5]            ;1576
000a6e  1c6d              ADDS     r5,r5,#1              ;1576
000a70  eb010181          ADD      r1,r1,r1,LSL #2       ;1576
000a74  eb060141          ADD      r1,r6,r1,LSL #1       ;1576
000a78  1c40              ADDS     r0,r0,#1              ;1576
000a7a  4419              ADD      r1,r1,r3              ;1576
000a7c  b2ad              UXTH     r5,r5                 ;1576
000a7e  f01000ff          ANDS     r0,r0,#0xff           ;1574
000a82  d0f3              BEQ      |L9.2668|
                  |L9.2692|
000a84  7191              STRB     r1,[r2,#6]            ;1579
000a86  7990              LDRB     r0,[r2,#6]            ;1580  ; mainswitch
000a88  b908              CBNZ     r0,|L9.2702|
000a8a  2000              MOVS     r0,#0                 ;1582
000a8c  7190              STRB     r0,[r2,#6]            ;1582
                  |L9.2702|
000a8e  e02b              B        |L9.2792|
                  |L9.2704|
000a90  5d61              LDRB     r1,[r4,r5]            ;1585
000a92  1c6d              ADDS     r5,r5,#1              ;1585
000a94  b2a8              UXTH     r0,r5                 ;1585
000a96  292c              CMP      r1,#0x2c              ;1585
000a98  d106              BNE      |L9.2728|
000a9a  2100              MOVS     r1,#0                 ;1587
                  |L9.2716|
000a9c  1c40              ADDS     r0,r0,#1              ;1587
000a9e  1c49              ADDS     r1,r1,#1              ;1589
000aa0  b2c9              UXTB     r1,r1                 ;1587
000aa2  b280              UXTH     r0,r0                 ;1589
000aa4  2905              CMP      r1,#5                 ;1587
000aa6  d3f9              BCC      |L9.2716|
                  |L9.2728|
000aa8  5c21              LDRB     r1,[r4,r0]            ;1594
000aaa  1c40              ADDS     r0,r0,#1              ;1594
000aac  b280              UXTH     r0,r0                 ;1594
000aae  292c              CMP      r1,#0x2c              ;1594
000ab0  d106              BNE      |L9.2752|
000ab2  2100              MOVS     r1,#0                 ;1596
                  |L9.2740|
000ab4  1c40              ADDS     r0,r0,#1              ;1596
000ab6  1c49              ADDS     r1,r1,#1              ;1598
000ab8  b2c9              UXTB     r1,r1                 ;1596
000aba  b280              UXTH     r0,r0                 ;1598
000abc  2905              CMP      r1,#5                 ;1596
000abe  d3f9              BCC      |L9.2740|
                  |L9.2752|
000ac0  5c23              LDRB     r3,[r4,r0]            ;1603
000ac2  1c40              ADDS     r0,r0,#1              ;1603
000ac4  2100              MOVS     r1,#0                 ;1601
000ac6  b285              UXTH     r5,r0                 ;1603
000ac8  2b2c              CMP      r3,#0x2c              ;1603
000aca  d10c              BNE      |L9.2790|
000acc  2000              MOVS     r0,#0                 ;1605
                  |L9.2766|
000ace  5d63              LDRB     r3,[r4,r5]            ;1607
000ad0  1c6d              ADDS     r5,r5,#1              ;1607
000ad2  eb010181          ADD      r1,r1,r1,LSL #2       ;1607
000ad6  eb060141          ADD      r1,r6,r1,LSL #1       ;1607
000ada  1c40              ADDS     r0,r0,#1              ;1607
000adc  4419              ADD      r1,r1,r3              ;1607
000ade  b2ad              UXTH     r5,r5                 ;1607
000ae0  f01000ff          ANDS     r0,r0,#0xff           ;1605
000ae4  d0f3              BEQ      |L9.2766|
                  |L9.2790|
000ae6  7191              STRB     r1,[r2,#6]            ;1610
                  |L9.2792|
000ae8  f7fffffe          BL       Off_GPOI_ResetSet
000aec  4802              LDR      r0,|L9.2808|
000aee  7980              LDRB     r0,[r0,#6]            ;1616  ; mainswitch
000af0  f7fffffe          BL       LIST_ONOFF
                  |L9.2804|
000af4  e008              B        |L9.2824|
                  |L9.2806|
000af6  e0d9              B        |L9.3244|
                  |L9.2808|
                          DCD      ||.data||
                  |L9.2812|
                          DCD      Run_Control
                  |L9.2816|
                          DCD      0x40020800
                  |L9.2820|
                          DCD      finishflag
                  |L9.2824|
000b08  f8049005          STRB     r9,[r4,r5]            ;1617
000b0c  e40c              B        |L9.808|
                  |L9.2830|
000b0e  5d60              LDRB     r0,[r4,r5]            ;1623
000b10  2308              MOVS     r3,#8                 ;1622
000b12  283f              CMP      r0,#0x3f              ;1623
000b14  d019              BEQ      |L9.2890|
000b16  2201              MOVS     r2,#1                 ;1632
000b18  2100              MOVS     r1,#0                 ;1633
                  |L9.2842|
000b1a  b141              CBZ      r1,|L9.2862|
000b1c  2904              CMP      r1,#4                 ;1635
000b1e  d006              BEQ      |L9.2862|
000b20  1868              ADDS     r0,r5,r1              ;1637
000b22  5c20              LDRB     r0,[r4,r0]            ;1637
000b24  f7fffffe          BL       IsDigitChar
000b28  2801              CMP      r0,#1                 ;1637
000b2a  d027              BEQ      |L9.2940|
000b2c  2200              MOVS     r2,#0                 ;1643
                  |L9.2862|
000b2e  1c49              ADDS     r1,r1,#1              ;1643
000b30  b2c9              UXTB     r1,r1                 ;1633
000b32  4299              CMP      r1,r3                 ;1633
000b34  d3f1              BCC      |L9.2842|
000b36  2a01              CMP      r2,#1                 ;1646
                  |L9.2872|
000b38  f47faa7b          BNE      |L9.50|
000b3c  18e8              ADDS     r0,r5,r3              ;1646
000b3e  5c20              LDRB     r0,[r4,r0]            ;1646
000b40  280d              CMP      r0,#0xd               ;1646
000b42  d1f9              BNE      |L9.2872|
000b44  2200              MOVS     r2,#0                 ;1651
000b46  4610              MOV      r0,r2                 ;1652
000b48  e031              B        |L9.2990|
                  |L9.2890|
000b4a  eeb58ac0          VCMPE.F32 s16,#0.0              ;1625
000b4e  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1625
000b52  db01              BLT      |L9.2904|
000b54  202b              MOVS     r0,#0x2b              ;1625
000b56  e000              B        |L9.2906|
                  |L9.2904|
000b58  202d              MOVS     r0,#0x2d              ;1625
                  |L9.2906|
000b5a  5560              STRB     r0,[r4,r5]            ;1625
000b5c  1c6d              ADDS     r5,r5,#1              ;1625
000b5e  b2ad              UXTH     r5,r5                 ;1625
000b60  ee180a10          VMOV     r0,s16                ;1626
000b64  f7fffffe          BL       __aeabi_f2d
000b68  ec410b10          VMOV     d0,r0,r1              ;1626
000b6c  1960              ADDS     r0,r4,r5              ;1626
000b6e  ec532b10          VMOV     r2,r3,d0              ;1626
000b72  a16a              ADR      r1,|L9.3356|
000b74  f7fffffe          BL       __2sprintf
000b78  3508              ADDS     r5,r5,#8              ;1626
000b7a  e097              B        |L9.3244|
                  |L9.2940|
000b7c  f0020201          AND      r2,r2,#1              ;1639
000b80  e7d5              B        |L9.2862|
                  |L9.2946|
000b82  b150              CBZ      r0,|L9.2970|
000b84  2804              CMP      r0,#4                 ;1659
000b86  d005              BEQ      |L9.2964|
000b88  5d61              LDRB     r1,[r4,r5]            ;1665
000b8a  eb020282          ADD      r2,r2,r2,LSL #2       ;1665
000b8e  eb060242          ADD      r2,r6,r2,LSL #1       ;1665
000b92  440a              ADD      r2,r2,r1              ;1665
                  |L9.2964|
000b94  1c6d              ADDS     r5,r5,#1              ;1665
000b96  b2ad              UXTH     r5,r5                 ;1661
000b98  e007              B        |L9.2986|
                  |L9.2970|
000b9a  5d61              LDRB     r1,[r4,r5]            ;1656
000b9c  1c6d              ADDS     r5,r5,#1              ;1656
000b9e  3930              SUBS     r1,r1,#0x30           ;1656
000ba0  ee001a10          VMOV     s0,r1                 ;1656
000ba4  b2ad              UXTH     r5,r5                 ;1656
000ba6  eeb88ac0          VCVT.F32.S32 s16,s0                ;1656
                  |L9.2986|
000baa  1c40              ADDS     r0,r0,#1              ;1656
000bac  b2c0              UXTB     r0,r0                 ;1652
                  |L9.2990|
000bae  4298              CMP      r0,r3                 ;1652
000bb0  d3e7              BCC      |L9.2946|
000bb2  eebc0ac8          VCVT.U32.F32 s0,s16                ;1667
000bb6  ee100a10          VMOV     r0,s0                 ;1667
000bba  b2c1              UXTB     r1,r0                 ;1667
000bbc  2000              MOVS     r0,#0                 ;1667
000bbe  e03d              B        |L9.3132|
                  |L9.3008|
000bc0  5d60              LDRB     r0,[r4,r5]            ;1674
000bc2  2308              MOVS     r3,#8                 ;1673
000bc4  283f              CMP      r0,#0x3f              ;1674
000bc6  d03b              BEQ      |L9.3136|
000bc8  2201              MOVS     r2,#1                 ;1683
000bca  2100              MOVS     r1,#0                 ;1684
                  |L9.3020|
000bcc  b141              CBZ      r1,|L9.3040|
000bce  2904              CMP      r1,#4                 ;1686
000bd0  d006              BEQ      |L9.3040|
000bd2  1868              ADDS     r0,r5,r1              ;1688
000bd4  5c20              LDRB     r0,[r4,r0]            ;1688
000bd6  f7fffffe          BL       IsDigitChar
000bda  2801              CMP      r0,#1                 ;1688
000bdc  d00d              BEQ      |L9.3066|
000bde  2200              MOVS     r2,#0                 ;1694
                  |L9.3040|
000be0  1c49              ADDS     r1,r1,#1              ;1694
000be2  b2c9              UXTB     r1,r1                 ;1684
000be4  4299              CMP      r1,r3                 ;1684
000be6  d3f1              BCC      |L9.3020|
000be8  2a01              CMP      r2,#1                 ;1697
                  |L9.3050|
000bea  d1a5              BNE      |L9.2872|
000bec  18e8              ADDS     r0,r5,r3              ;1697
000bee  5c20              LDRB     r0,[r4,r0]            ;1697
000bf0  280d              CMP      r0,#0xd               ;1697
000bf2  d1a1              BNE      |L9.2872|
000bf4  2200              MOVS     r2,#0                 ;1702
000bf6  4610              MOV      r0,r2                 ;1703
000bf8  e018              B        |L9.3116|
                  |L9.3066|
000bfa  f0020201          AND      r2,r2,#1              ;1690
000bfe  e7ef              B        |L9.3040|
                  |L9.3072|
000c00  b150              CBZ      r0,|L9.3096|
000c02  2804              CMP      r0,#4                 ;1710
000c04  d005              BEQ      |L9.3090|
000c06  5d61              LDRB     r1,[r4,r5]            ;1716
000c08  eb020282          ADD      r2,r2,r2,LSL #2       ;1716
000c0c  eb060242          ADD      r2,r6,r2,LSL #1       ;1716
000c10  440a              ADD      r2,r2,r1              ;1716
                  |L9.3090|
000c12  1c6d              ADDS     r5,r5,#1              ;1716
000c14  b2ad              UXTH     r5,r5                 ;1712
000c16  e007              B        |L9.3112|
                  |L9.3096|
000c18  5d61              LDRB     r1,[r4,r5]            ;1707
000c1a  1c6d              ADDS     r5,r5,#1              ;1707
000c1c  3930              SUBS     r1,r1,#0x30           ;1707
000c1e  ee001a10          VMOV     s0,r1                 ;1707
000c22  b2ad              UXTH     r5,r5                 ;1707
000c24  eeb88ac0          VCVT.F32.S32 s16,s0                ;1707
                  |L9.3112|
000c28  1c40              ADDS     r0,r0,#1              ;1707
000c2a  b2c0              UXTB     r0,r0                 ;1703
                  |L9.3116|
000c2c  4298              CMP      r0,r3                 ;1703
000c2e  d3e7              BCC      |L9.3072|
000c30  eebc0ac8          VCVT.U32.F32 s0,s16                ;1718
000c34  ee100a10          VMOV     r0,s0                 ;1718
000c38  b2c1              UXTB     r1,r0                 ;1718
000c3a  2001              MOVS     r0,#1                 ;1718
                  |L9.3132|
000c3c  f7fffffe          BL       CalHandle
                  |L9.3136|
000c40  e060              B        |L9.3332|
                  |L9.3138|
000c42  5d60              LDRB     r0,[r4,r5]            ;1725
000c44  2306              MOVS     r3,#6                 ;1724
000c46  283f              CMP      r0,#0x3f              ;1725
000c48  d018              BEQ      |L9.3196|
000c4a  2201              MOVS     r2,#1                 ;1734
000c4c  2100              MOVS     r1,#0                 ;1735
                  |L9.3150|
000c4e  b141              CBZ      r1,|L9.3170|
000c50  2904              CMP      r1,#4                 ;1737
000c52  d006              BEQ      |L9.3170|
000c54  1868              ADDS     r0,r5,r1              ;1739
000c56  5c20              LDRB     r0,[r4,r0]            ;1739
000c58  f7fffffe          BL       IsDigitChar
000c5c  2801              CMP      r0,#1                 ;1739
000c5e  d028              BEQ      |L9.3250|
000c60  2200              MOVS     r2,#0                 ;1745
                  |L9.3170|
000c62  1c49              ADDS     r1,r1,#1              ;1745
000c64  b2c9              UXTB     r1,r1                 ;1735
000c66  4299              CMP      r1,r3                 ;1735
000c68  d3f1              BCC      |L9.3150|
000c6a  2a01              CMP      r2,#1                 ;1748
000c6c  d1bd              BNE      |L9.3050|
000c6e  18e8              ADDS     r0,r5,r3              ;1748
000c70  5c20              LDRB     r0,[r4,r0]            ;1748
000c72  280d              CMP      r0,#0xd               ;1748
000c74  d1b9              BNE      |L9.3050|
000c76  2200              MOVS     r2,#0                 ;1753
000c78  4610              MOV      r0,r2                 ;1754
000c7a  e028              B        |L9.3278|
                  |L9.3196|
000c7c  eeb58ac0          VCMPE.F32 s16,#0.0              ;1727
000c80  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1727
000c84  db01              BLT      |L9.3210|
000c86  202b              MOVS     r0,#0x2b              ;1727
000c88  e000              B        |L9.3212|
                  |L9.3210|
000c8a  202d              MOVS     r0,#0x2d              ;1727
                  |L9.3212|
000c8c  5560              STRB     r0,[r4,r5]            ;1727
000c8e  1c6d              ADDS     r5,r5,#1              ;1727
000c90  b2ad              UXTH     r5,r5                 ;1727
000c92  ee180a10          VMOV     r0,s16                ;1728
000c96  f7fffffe          BL       __aeabi_f2d
000c9a  ec410b10          VMOV     d0,r0,r1              ;1728
000c9e  1960              ADDS     r0,r4,r5              ;1728
000ca0  ec532b10          VMOV     r2,r3,d0              ;1728
000ca4  a11d              ADR      r1,|L9.3356|
000ca6  f7fffffe          BL       __2sprintf
000caa  1dad              ADDS     r5,r5,#6              ;1728
                  |L9.3244|
000cac  b2a8              UXTH     r0,r5                 ;1729
000cae  f7ffbb0b          B        |L9.712|
                  |L9.3250|
000cb2  f0020201          AND      r2,r2,#1              ;1741
000cb6  e7d4              B        |L9.3170|
                  |L9.3256|
000cb8  5d61              LDRB     r1,[r4,r5]            ;1767
000cba  b188              CBZ      r0,|L9.3296|
000cbc  eb020282          ADD      r2,r2,r2,LSL #2       ;1767
000cc0  eb060242          ADD      r2,r6,r2,LSL #1       ;1767
000cc4  1c6d              ADDS     r5,r5,#1              ;1767
000cc6  440a              ADD      r2,r2,r1              ;1767
000cc8  b2ad              UXTH     r5,r5                 ;1767
                  |L9.3274|
000cca  1c40              ADDS     r0,r0,#1              ;1767
000ccc  b2c0              UXTB     r0,r0                 ;1754
                  |L9.3278|
000cce  4298              CMP      r0,r3                 ;1754
000cd0  d3f2              BCC      |L9.3256|
000cd2  eebc0ac8          VCVT.U32.F32 s0,s16                ;1769
000cd6  ee100a10          VMOV     r0,s0                 ;1769
000cda  b2c1              UXTB     r1,r0                 ;1769
000cdc  2002              MOVS     r0,#2                 ;1769
000cde  e7ad              B        |L9.3132|
                  |L9.3296|
000ce0  1c6d              ADDS     r5,r5,#1              ;1769
000ce2  3930              SUBS     r1,r1,#0x30           ;1758
000ce4  ee001a10          VMOV     s0,r1                 ;1758
000ce8  b2ad              UXTH     r5,r5                 ;1758
000cea  eeb88ac0          VCVT.F32.S32 s16,s0                ;1758
000cee  e7ec              B        |L9.3274|
                  |L9.3312|
000cf0  490c              LDR      r1,|L9.3364|
000cf2  2001              MOVS     r0,#1                 ;1795
000cf4  7008              STRB     r0,[r1,#0]            ;1795
000cf6  f7fffffe          BL       Write_Boot_Flag
000cfa  2f01              CMP      r7,#1                 ;1797
000cfc  d102              BNE      |L9.3332|
000cfe  2037              MOVS     r0,#0x37              ;1799
000d00  f7fffffe          BL       JumpBoot
                  |L9.3332|
000d04  f1b80f13          CMP      r8,#0x13              ;1919
000d08  f4bfa993          BCS      |L9.50|
000d0c  b033              ADD      sp,sp,#0xcc
000d0e  1c6d              ADDS     r5,r5,#1              ;1919
000d10  ecbd8b02          VPOP     {d8}
000d14  b2a8              UXTH     r0,r5                 ;1923
000d16  e8bd8ff0          POP      {r4-r11,pc}
;;;1925   
                          ENDP

000d1a  0000              DCW      0x0000
                  |L9.3356|
000d1c  2530332e          DCB      "%03.3f",0
000d20  336600  
000d23  00                DCB      0
                  |L9.3364|
                          DCD      bootflag

                          AREA ||i.SetErr_ACK||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  SetErr_ACK PROC
;;;902    
;;;903    u16 SetErr_ACK(char *buf, u8 addr ,u8 ucErr)
000000  b5f8              PUSH     {r3-r7,lr}
;;;904    {
000002  4604              MOV      r4,r0
;;;905    		u16 i=0;
;;;906    		u8 len = 0;
;;;907    		char stradd[3] = {0};
000004  2000              MOVS     r0,#0
;;;908    		int addlen=0;
;;;909    		memset(buf,0,sizeof(buf));
000006  9000              STR      r0,[sp,#0]
000008  6020              STR      r0,[r4,#0]
00000a  4616              MOV      r6,r2                 ;904
;;;910        	buf[i++] = ChrStartS;
00000c  203e              MOVS     r0,#0x3e
00000e  7020              STRB     r0,[r4,#0]
;;;911    		sprintf(stradd,"%d",addr);
000010  460a              MOV      r2,r1
000012  a11a              ADR      r1,|L10.124|
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       __2sprintf
;;;912    		addlen=strlen(stradd);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       strlen
000020  4605              MOV      r5,r0
;;;913    		strncat(&buf[i],stradd,addlen);
000022  1c60              ADDS     r0,r4,#1
000024  462a              MOV      r2,r5
000026  4669              MOV      r1,sp
000028  f7fffffe          BL       strncat
00002c  1c6d              ADDS     r5,r5,#1
;;;914    		i+=addlen;
00002e  b2a8              UXTH     r0,r5
;;;915    		buf[i++] = '/';
000030  212f              MOVS     r1,#0x2f
000032  5421              STRB     r1,[r4,r0]
000034  1c40              ADDS     r0,r0,#1
000036  b285              UXTH     r5,r0
;;;916    		switch(ucErr)
000038  2e01              CMP      r6,#1
00003a  d008              BEQ      |L10.78|
00003c  2e02              CMP      r6,#2
00003e  d001              BEQ      |L10.68|
000040  2e03              CMP      r6,#3
000042  d015              BEQ      |L10.112|
                  |L10.68|
;;;917            {
;;;918              case 1:         //
;;;919              	   len = 9;
;;;920              	   memmove(&buf[i],"PARA ERR!",len);   
;;;921              	   break;
;;;922    	      case 2:         //
;;;923              	   len = 8;
;;;924              	   memmove(&buf[i],"CMD ERR!",len);   
;;;925              	   break;
;;;926    	      case 3:         //
;;;927              	   len = 8;
;;;928              	   memmove(&buf[i],"REM ERR!",len);   
;;;929              	   break;
;;;930    		  default:    
;;;931                   len = 8;
000044  2608              MOVS     r6,#8
;;;932              	   memmove(&buf[i],"CMD ERR!",len);   
000046  1960              ADDS     r0,r4,r5
000048  4632              MOV      r2,r6
00004a  a10d              ADR      r1,|L10.128|
;;;933                   break;
00004c  e003              B        |L10.86|
                  |L10.78|
00004e  2609              MOVS     r6,#9                 ;919
000050  1960              ADDS     r0,r4,r5              ;920
000052  4632              MOV      r2,r6                 ;920
000054  a10d              ADR      r1,|L10.140|
                  |L10.86|
000056  f7fffffe          BL       __aeabi_memmove
;;;934    	    }
;;;935    	    i+=len;
00005a  19a8              ADDS     r0,r5,r6
00005c  b280              UXTH     r0,r0
;;;936    		buf[i++] = ChrEndR;
00005e  210d              MOVS     r1,#0xd
000060  5421              STRB     r1,[r4,r0]
000062  1c40              ADDS     r0,r0,#1
000064  b280              UXTH     r0,r0
;;;937    		buf[i++] = ChrEndS;
000066  210a              MOVS     r1,#0xa
000068  5421              STRB     r1,[r4,r0]
00006a  1c40              ADDS     r0,r0,#1
00006c  b280              UXTH     r0,r0
;;;938    		return i;
;;;939    }
00006e  bdf8              POP      {r3-r7,pc}
                  |L10.112|
000070  2608              MOVS     r6,#8                 ;927
000072  1960              ADDS     r0,r4,r5              ;928
000074  4632              MOV      r2,r6                 ;928
000076  a108              ADR      r1,|L10.152|
000078  e7ed              B        |L10.86|
;;;940    
                          ENDP

00007a  0000              DCW      0x0000
                  |L10.124|
00007c  256400            DCB      "%d",0
00007f  00                DCB      0
                  |L10.128|
000080  434d4420          DCB      "CMD ERR!",0
000084  45525221
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L10.140|
00008c  50415241          DCB      "PARA ERR!",0
000090  20455252
000094  2100    
000096  00                DCB      0
000097  00                DCB      0
                  |L10.152|
000098  52454d20          DCB      "REM ERR!",0
00009c  45525221
0000a0  00      
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0

                          AREA ||i.SetListPC||, CODE, READONLY, ALIGN=2

                  SetListPC PROC
;;;158    
;;;159    void SetListPC(void)
000000  4804              LDR      r0,|L11.20|
;;;160    {
000002  b510              PUSH     {r4,lr}
;;;161    	SetPowerC(Para.CDC_Limit_C);
000004  f8b00066          LDRH     r0,[r0,#0x66]  ; Para
000008  f7fffffe          BL       SetPowerC
;;;162    	listsend = 3;
00000c  4902              LDR      r1,|L11.24|
00000e  2003              MOVS     r0,#3
000010  7248              STRB     r0,[r1,#9]
;;;163    }
000012  bd10              POP      {r4,pc}
;;;164    
                          ENDP

                  |L11.20|
                          DCD      Para
                  |L11.24|
                          DCD      ||.data||

                          AREA ||i.SetListPS||, CODE, READONLY, ALIGN=2

                  SetListPS PROC
;;;165    
;;;166    void SetListPS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;167    {
;;;168    	if(mainswitch == 1)
000002  4c0d              LDR      r4,|L12.56|
000004  79a0              LDRB     r0,[r4,#6]  ; mainswitch
;;;169    	{
;;;170    		GPIO_SetBits(GPIOE,GPIO_Pin_2);
000006  4d0d              LDR      r5,|L12.60|
000008  2801              CMP      r0,#1                 ;168
00000a  d106              BNE      |L12.26|
00000c  2104              MOVS     r1,#4
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       GPIO_SetBits
;;;171    		Delay_ms(POWER_SW_DELAY);
000014  200a              MOVS     r0,#0xa
000016  f7fffffe          BL       Delay_ms
                  |L12.26|
;;;172    	}
;;;173    	
;;;174    	if(mainswitch == 0)
00001a  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00001c  b930              CBNZ     r0,|L12.44|
;;;175    	{
;;;176    		Delay_ms(POWER_SW_DELAY);
00001e  200a              MOVS     r0,#0xa
000020  f7fffffe          BL       Delay_ms
;;;177    		GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
000024  2104              MOVS     r1,#4
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       GPIO_ResetBits
                  |L12.44|
;;;178    	}
;;;179    	PowerSwitch(mainswitch);
00002c  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00002e  f7fffffe          BL       PowerSwitch
;;;180    	listsend = 0;
000032  2000              MOVS     r0,#0
000034  7260              STRB     r0,[r4,#9]
;;;181    }
000036  bd70              POP      {r4-r6,pc}
;;;182    
                          ENDP

                  |L12.56|
                          DCD      ||.data||
                  |L12.60|
                          DCD      0x40021000

                          AREA ||i.SetListPV||, CODE, READONLY, ALIGN=2

                  SetListPV PROC
;;;152    }
;;;153    void SetListPV(void)
000000  4804              LDR      r0,|L13.20|
;;;154    {
000002  b510              PUSH     {r4,lr}
;;;155    	SetPowerV(Para.CDC_OutPut_V);
000004  f8b00064          LDRH     r0,[r0,#0x64]  ; Para
000008  f7fffffe          BL       SetPowerV
;;;156    	listsend = 2;
00000c  4902              LDR      r1,|L13.24|
00000e  2002              MOVS     r0,#2
000010  7248              STRB     r0,[r1,#9]
;;;157    }
000012  bd10              POP      {r4,pc}
;;;158    
                          ENDP

                  |L13.20|
                          DCD      Para
                  |L13.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerC||, CODE, READONLY, ALIGN=2

                  SetPowerC PROC
;;;113    
;;;114    void SetPowerC(vu16 powc)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;115    {
;;;116    	MasterSendbuf[0] = 0x01;
000002  4c12              LDR      r4,|L14.76|
000004  2001              MOVS     r0,#1
000006  7020              STRB     r0,[r4,#0]
;;;117    	MasterSendbuf[1] = 0x06;
000008  2006              MOVS     r0,#6
00000a  7060              STRB     r0,[r4,#1]
;;;118    	MasterSendbuf[2] = 0x00;
00000c  2000              MOVS     r0,#0
00000e  70a0              STRB     r0,[r4,#2]
;;;119    	MasterSendbuf[3] = 0x31;
000010  2031              MOVS     r0,#0x31
000012  70e0              STRB     r0,[r4,#3]
;;;120    	MasterSendbuf[4] = (u8)(powc/10>>8);
000014  f8bd1000          LDRH     r1,[sp,#0]
000018  200a              MOVS     r0,#0xa
00001a  fbb1f1f0          UDIV     r1,r1,r0
00001e  0a09              LSRS     r1,r1,#8
000020  7121              STRB     r1,[r4,#4]
;;;121    	MasterSendbuf[5] = (u8)(powc/10);
000022  f8bd1000          LDRH     r1,[sp,#0]
000026  fbb1f0f0          UDIV     r0,r1,r0
00002a  7160              STRB     r0,[r4,#5]
;;;122    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00002c  2106              MOVS     r1,#6
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       Hardware_CRC
000034  71a0              STRB     r0,[r4,#6]
;;;123    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000036  2106              MOVS     r1,#6
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       Hardware_CRC
00003e  0a00              LSRS     r0,r0,#8
000040  71e0              STRB     r0,[r4,#7]
;;;124    	USART3WriteDMA(8);
000042  e8bd4038          POP      {r3-r5,lr}
000046  2008              MOVS     r0,#8
000048  f7ffbffe          B.W      USART3WriteDMA
;;;125    }
;;;126    
                          ENDP

                  |L14.76|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.SetPowerModeC||, CODE, READONLY, ALIGN=2

                  SetPowerModeC PROC
;;;132    
;;;133    void SetPowerModeC(void)
000000  4804              LDR      r0,|L15.20|
;;;134    {
000002  b510              PUSH     {r4,lr}
;;;135    	SetPowerC(Para.POWER_Limit_C);
000004  f8b00056          LDRH     r0,[r0,#0x56]  ; Para
000008  f7fffffe          BL       SetPowerC
;;;136    	sendwait = 3;
00000c  4902              LDR      r1,|L15.24|
00000e  2003              MOVS     r0,#3
000010  7208              STRB     r0,[r1,#8]
;;;137    }
000012  bd10              POP      {r4,pc}
;;;138    
                          ENDP

                  |L15.20|
                          DCD      Para
                  |L15.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerModeS||, CODE, READONLY, ALIGN=2

                  SetPowerModeS PROC
;;;138    
;;;139    void SetPowerModeS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;140    {
;;;141    	if(mainswitch == 1)
000002  4c0e              LDR      r4,|L16.60|
000004  79a1              LDRB     r1,[r4,#6]  ; mainswitch
;;;142    	{
;;;143    		GPIO_SetBits(GPIOE,GPIO_Pin_2);
000006  4d0e              LDR      r5,|L16.64|
000008  2901              CMP      r1,#1                 ;141
00000a  d002              BEQ      |L16.18|
;;;144    		Delay_ms(POWER_SW_DELAY);
;;;145    	}else if(mainswitch == 0)
00000c  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00000e  b140              CBZ      r0,|L16.34|
000010  e00e              B        |L16.48|
                  |L16.18|
000012  2104              MOVS     r1,#4                 ;143
000014  4628              MOV      r0,r5                 ;143
000016  f7fffffe          BL       GPIO_SetBits
00001a  200a              MOVS     r0,#0xa               ;144
00001c  f7fffffe          BL       Delay_ms
000020  e006              B        |L16.48|
                  |L16.34|
;;;146    	{
;;;147    		Delay_ms(POWER_SW_DELAY);
000022  200a              MOVS     r0,#0xa
000024  f7fffffe          BL       Delay_ms
;;;148    		GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
000028  2104              MOVS     r1,#4
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       GPIO_ResetBits
                  |L16.48|
;;;149    	}
;;;150    	PowerSwitch(mainswitch);
000030  79a0              LDRB     r0,[r4,#6]  ; mainswitch
000032  f7fffffe          BL       PowerSwitch
;;;151    	sendwait = 0;
000036  2000              MOVS     r0,#0
000038  7220              STRB     r0,[r4,#8]
;;;152    }
00003a  bd70              POP      {r4-r6,pc}
;;;153    void SetListPV(void)
                          ENDP

                  |L16.60|
                          DCD      ||.data||
                  |L16.64|
                          DCD      0x40021000

                          AREA ||i.SetPowerModeV||, CODE, READONLY, ALIGN=2

                  SetPowerModeV PROC
;;;126    
;;;127    void SetPowerModeV(void)
000000  4804              LDR      r0,|L17.20|
;;;128    {
000002  b510              PUSH     {r4,lr}
;;;129    	SetPowerV(Para.POWER_OutPut_V);
000004  f8b00054          LDRH     r0,[r0,#0x54]  ; Para
000008  f7fffffe          BL       SetPowerV
;;;130    	sendwait = 2;
00000c  4902              LDR      r1,|L17.24|
00000e  2002              MOVS     r0,#2
000010  7208              STRB     r0,[r1,#8]
;;;131    }
000012  bd10              POP      {r4,pc}
;;;132    
                          ENDP

                  |L17.20|
                          DCD      Para
                  |L17.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerV||, CODE, READONLY, ALIGN=2

                  SetPowerV PROC
;;;100    }
;;;101    void SetPowerV(vu16 powv)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;102    {
;;;103    	MasterSendbuf[0] = 0x01;
000002  4c12              LDR      r4,|L18.76|
000004  2001              MOVS     r0,#1
000006  7020              STRB     r0,[r4,#0]
;;;104    	MasterSendbuf[1] = 0x06;
000008  2006              MOVS     r0,#6
00000a  7060              STRB     r0,[r4,#1]
;;;105    	MasterSendbuf[2] = 0x00;
00000c  2000              MOVS     r0,#0
00000e  70a0              STRB     r0,[r4,#2]
;;;106    	MasterSendbuf[3] = 0x30;
000010  2030              MOVS     r0,#0x30
000012  70e0              STRB     r0,[r4,#3]
;;;107    	MasterSendbuf[4] = (u8)(powv/10>>8);
000014  f8bd1000          LDRH     r1,[sp,#0]
000018  200a              MOVS     r0,#0xa
00001a  fbb1f1f0          UDIV     r1,r1,r0
00001e  0a09              LSRS     r1,r1,#8
000020  7121              STRB     r1,[r4,#4]
;;;108    	MasterSendbuf[5] = (u8)(powv/10);
000022  f8bd1000          LDRH     r1,[sp,#0]
000026  fbb1f0f0          UDIV     r0,r1,r0
00002a  7160              STRB     r0,[r4,#5]
;;;109    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00002c  2106              MOVS     r1,#6
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       Hardware_CRC
000034  71a0              STRB     r0,[r4,#6]
;;;110    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000036  2106              MOVS     r1,#6
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       Hardware_CRC
00003e  0a00              LSRS     r0,r0,#8
000040  71e0              STRB     r0,[r4,#7]
;;;111    	USART3WriteDMA(8);
000042  e8bd4038          POP      {r3-r5,lr}
000046  2008              MOVS     r0,#8
000048  f7ffbffe          B.W      USART3WriteDMA
;;;112    }
;;;113    
                          ENDP

                  |L18.76|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.UART1_Send||, CODE, READONLY, ALIGN=2

                  UART1_Send PROC
;;;2317   
;;;2318   void UART1_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2319   {
;;;2320   	static vu8 UART_Buffer_Send_pointer=0;
;;;2321   		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L19.72|
000004  78e0              LDRB     r0,[r4,#3]  ; UART_Buffer_Send_pointer
000006  7921              LDRB     r1,[r4,#4]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L19.56|
;;;2322            {
;;;2323   				 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L19.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L19.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L19.54|
;;;2324   				 {
;;;2325   					USART_SendData(USART1,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  78e1              LDRB     r1,[r4,#3]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  4d0d              LDR      r5,|L19.84|
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       USART_SendData
                  |L19.36|
;;;2326   					while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);//等待发送完成
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L19.36|
;;;2327   					UART_Buffer_Send_pointer++;
000030  78e0              LDRB     r0,[r4,#3]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  70e0              STRB     r0,[r4,#3]
                  |L19.54|
;;;2328   				 }
;;;2329            }
;;;2330   		else 
;;;2331   		{
;;;2332   			UART_Buffer_Send_pointer=0;
;;;2333   			UART_SEND_flag=0;//发送完成一帧数据
;;;2334   		}
;;;2335   }
000036  bd70              POP      {r4-r6,pc}
                  |L19.56|
000038  2000              MOVS     r0,#0                 ;2332
00003a  70e0              STRB     r0,[r4,#3]            ;2332
00003c  4806              LDR      r0,|L19.88|
00003e  6801              LDR      r1,[r0,#0]            ;2333  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;2333
000044  6001              STR      r1,[r0,#0]            ;2333  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;2336   
                          ENDP

                  |L19.72|
                          DCD      ||.data||
                  |L19.76|
                          DCD      ||area_number.31||
                  |L19.80|
                          DCD      ADDR
                  |L19.84|
                          DCD      0x40011000
                  |L19.88|
                          DCD      flagA

                          AREA ||i.UART2_Send||, CODE, READONLY, ALIGN=2

                  UART2_Send PROC
;;;2298   }
;;;2299   void UART2_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2300   {
;;;2301   	static vu8 UART_Buffer_Send_pointer=0;
;;;2302   		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L20.72|
000004  78a0              LDRB     r0,[r4,#2]  ; UART_Buffer_Send_pointer
000006  7921              LDRB     r1,[r4,#4]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L20.56|
;;;2303            {
;;;2304   					 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L20.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L20.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L20.54|
;;;2305   					 {
;;;2306   						USART_SendData(USART2,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  78a1              LDRB     r1,[r4,#2]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  480d              LDR      r0,|L20.84|
00001e  f7fffffe          BL       USART_SendData
;;;2307   						while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);//等待发送完成
000022  4d0d              LDR      r5,|L20.88|
                  |L20.36|
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L20.36|
;;;2308   						UART_Buffer_Send_pointer++;
000030  78a0              LDRB     r0,[r4,#2]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  70a0              STRB     r0,[r4,#2]
                  |L20.54|
;;;2309   					}
;;;2310            }
;;;2311   		else 
;;;2312   		{
;;;2313   			UART_Buffer_Send_pointer=0;
;;;2314   			UART_SEND_flag=0;//发送完成一帧数据
;;;2315   		}
;;;2316   }
000036  bd70              POP      {r4-r6,pc}
                  |L20.56|
000038  2000              MOVS     r0,#0                 ;2313
00003a  70a0              STRB     r0,[r4,#2]            ;2313
00003c  4807              LDR      r0,|L20.92|
00003e  6801              LDR      r1,[r0,#0]            ;2314  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;2314
000044  6001              STR      r1,[r0,#0]            ;2314  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;2317   
                          ENDP

                  |L20.72|
                          DCD      ||.data||
                  |L20.76|
                          DCD      ||area_number.31||
                  |L20.80|
                          DCD      ADDR
                  |L20.84|
                          DCD      0x40004400
                  |L20.88|
                          DCD      0x40011000
                  |L20.92|
                          DCD      flagA

                          AREA ||i.USART2_Configuration||, CODE, READONLY, ALIGN=2

                  USART2_Configuration PROC
;;;1994   
;;;1995   void USART2_Configuration(void)//串口初始化函数
000000  b570              PUSH     {r4-r6,lr}
;;;1996   {  
;;;1997   	GPIO_InitTypeDef GPIO_InitStructure;
;;;1998   	USART_InitTypeDef USART_InitStructure;
;;;1999   	
;;;2000   	/* config USART1 clock */
;;;2001   	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
000002  2101              MOVS     r1,#1
000004  b088              SUB      sp,sp,#0x20           ;1996
000006  0448              LSLS     r0,r1,#17
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;2002   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);
00000c  4e2a              LDR      r6,|L21.184|
00000e  2207              MOVS     r2,#7
000010  2102              MOVS     r1,#2
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2003   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);
000018  2207              MOVS     r2,#7
00001a  2103              MOVS     r1,#3
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2004   	/* USART1 GPIO config */
;;;2005   	/* Configure USART1 Tx (PA.02) as alternate function push-pull */
;;;2006   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;2007   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000022  2502              MOVS     r5,#2
000024  2004              MOVS     r0,#4                 ;2006
000026  f88d5004          STRB     r5,[sp,#4]
;;;2008   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
00002c  9000              STR      r0,[sp,#0]            ;2007
00002e  f88d4006          STRB     r4,[sp,#6]
;;;2009   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f88d5005          STRB     r5,[sp,#5]
;;;2010   	GPIO_Init(GPIOA, &GPIO_InitStructure);    
000036  4669              MOV      r1,sp
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GPIO_Init
;;;2011   	/* Configure USART1 Rx (PA.03) as input floating */
;;;2012   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
00003e  2008              MOVS     r0,#8
;;;2013   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000040  9000              STR      r0,[sp,#0]
000042  f88d5004          STRB     r5,[sp,#4]
;;;2014   	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;2015   	
;;;2016   	/* USART1 mode config */
;;;2017   	USART_InitStructure.USART_BaudRate = 115200;
00004e  f44f30e1          MOV      r0,#0x1c200
;;;2018   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000052  9002              STR      r0,[sp,#8]
;;;2019   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2020   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000054  f8ad4010          STRH     r4,[sp,#0x10]
;;;2021   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2022   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
;;;2023   	USART_Init(USART2, &USART_InitStructure);
00005a  4d18              LDR      r5,|L21.188|
00005c  f8ad400c          STRH     r4,[sp,#0xc]          ;2018
000060  f8ad0012          STRH     r0,[sp,#0x12]         ;2022
000064  f8ad400e          STRH     r4,[sp,#0xe]          ;2019
000068  f8ad4014          STRH     r4,[sp,#0x14]         ;2021
00006c  a902              ADD      r1,sp,#8
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       USART_Init
;;;2024   	
;;;2025   	/******使能串口接收中断******************/
;;;2026   	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
000074  2201              MOVS     r2,#1
000076  f2405125          MOV      r1,#0x525
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_ITConfig
;;;2027   //	USART_ITConfig(USART2, USART_IT_ORE, ENABLE);	
;;;2028   	USART_Cmd(USART2, ENABLE);//使能串口1
000080  2101              MOVS     r1,#1
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USART_Cmd
;;;2029     USART_ClearFlag(USART2, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       USART_ClearFlag
000090  f44f60e0          MOV      r0,#0x700
000094  f7fffffe          BL       NVIC_PriorityGroupConfig
000098  2026              MOVS     r0,#0x26
00009a  f88d0018          STRB     r0,[sp,#0x18]
00009e  f88d4019          STRB     r4,[sp,#0x19]
0000a2  2001              MOVS     r0,#1
0000a4  f88d001a          STRB     r0,[sp,#0x1a]
0000a8  f88d001b          STRB     r0,[sp,#0x1b]
0000ac  a806              ADD      r0,sp,#0x18
0000ae  f7fffffe          BL       NVIC_Init
;;;2030     
;;;2031     USART2_NVIC_Config();//串口中断配置
;;;2032   }
0000b2  b008              ADD      sp,sp,#0x20
0000b4  bd70              POP      {r4-r6,pc}
;;;2033   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L21.184|
                          DCD      0x40020000
                  |L21.188|
                          DCD      0x40004400

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;2256   
;;;2257   void USART2_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2258   {
;;;2259   	u8 Res;
;;;2260    	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
000002  4c1c              LDR      r4,|L22.116|
000004  f2405525          MOV      r5,#0x525
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       USART_GetITStatus
000010  2800              CMP      r0,#0
000012  d013              BEQ      |L22.60|
;;;2261   	{
;;;2262   		USART_ClearITPendingBit(USART2,USART_IT_RXNE);
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       USART_ClearITPendingBit
;;;2263   		Res=USART_ReceiveData(USART2);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       USART_ReceiveData
;;;2264   
;;;2265   		if((USART_RX_STA&0x8000)==0)//接收未完成
000022  4a15              LDR      r2,|L22.120|
000024  b2c1              UXTB     r1,r0                 ;2263
000026  8950              LDRH     r0,[r2,#0xa]  ; USART_RX_STA
000028  0403              LSLS     r3,r0,#16
00002a  d407              BMI      |L22.60|
;;;2266   		{
;;;2267   		if(USART_RX_STA&0x4000)//接收到了0x0d
;;;2268   		{
;;;2269   			if(Res!=0x0a)
;;;2270   				USART_RX_STA=0;//接收错误,重新开始
;;;2271   			else 
;;;2272   			{
;;;2273   		//		SerialRemoteHandleL(USART_RX_STA,USART_RX_BUF);
;;;2274   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
00002c  4b13              LDR      r3,|L22.124|
00002e  0445              LSLS     r5,r0,#17             ;2267
000030  f04f0400          MOV      r4,#0                 ;2267
000034  d50b              BPL      |L22.78|
000036  290a              CMP      r1,#0xa               ;2269
000038  d001              BEQ      |L22.62|
                  |L22.58|
00003a  8154              STRH     r4,[r2,#0xa]          ;2270
                  |L22.60|
;;;2275   				USART_RX_STA++;
;;;2276   				USART_RX_CNT = USART_RX_STA;
;;;2277   				USART_RX_STA|=0x8000;	//接收完成了 			  //接收到回车的后字节  置位状态寄存器 
;;;2278   			}
;;;2279   		}
;;;2280   		else //还没收到0X0D
;;;2281   		{	
;;;2282   			if(Res==0x0d)
;;;2283   			{
;;;2284   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
;;;2285   				USART_RX_STA++;	
;;;2286   				USART_RX_STA|=0x4000;					 //接收到回车的前一字节  置位状态寄存器
;;;2287   			}
;;;2288   			else
;;;2289   				{
;;;2290   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
;;;2291   					USART_RX_STA++;									//长度+1 为下一次做准备
;;;2292   				if(USART_RX_STA>(USART_REC_LEN-1))
;;;2293   					USART_RX_STA=0;//接收数据错误,重新开始接收	  
;;;2294   				}		 
;;;2295   			}
;;;2296   		} 
;;;2297   	}
;;;2298   }
00003c  bd70              POP      {r4-r6,pc}
                  |L22.62|
00003e  f3c0040d          UBFX     r4,r0,#0,#14          ;2274
000042  1c40              ADDS     r0,r0,#1              ;2274
000044  5519              STRB     r1,[r3,r4]            ;2274
000046  8190              STRH     r0,[r2,#0xc]          ;2276
000048  f4404000          ORR      r0,r0,#0x8000         ;2277
00004c  e010              B        |L22.112|
                  |L22.78|
00004e  290d              CMP      r1,#0xd               ;2282
000050  d008              BEQ      |L22.100|
000052  f3c0050d          UBFX     r5,r0,#0,#14          ;2290
000056  1c40              ADDS     r0,r0,#1              ;2290
000058  b280              UXTH     r0,r0                 ;2291
00005a  5559              STRB     r1,[r3,r5]            ;2290
00005c  8150              STRH     r0,[r2,#0xa]          ;2291
00005e  28c7              CMP      r0,#0xc7              ;2292
000060  d8eb              BHI      |L22.58|
000062  bd70              POP      {r4-r6,pc}
                  |L22.100|
000064  f3c0040d          UBFX     r4,r0,#0,#14          ;2284
000068  1c40              ADDS     r0,r0,#1              ;2284
00006a  5519              STRB     r1,[r3,r4]            ;2284
00006c  f4404080          ORR      r0,r0,#0x4000         ;2286
                  |L22.112|
000070  8150              STRH     r0,[r2,#0xa]          ;2277
000072  bd70              POP      {r4-r6,pc}
;;;2299   void UART2_Send(void)
                          ENDP

                  |L22.116|
                          DCD      0x40004400
                  |L22.120|
                          DCD      ||.data||
                  |L22.124|
                          DCD      ||area_number.31||+0x14

                          AREA ||i.USART3HANDLE||, CODE, READONLY, ALIGN=2

                  USART3HANDLE PROC
;;;208    
;;;209    void USART3HANDLE(void)
000000  b538              PUSH     {r3-r5,lr}
;;;210    {
;;;211    	vu16 crcres;
;;;212    
;;;213    	if(MasterRecbuf[0] == 0x01)
000002  4c28              LDR      r4,|L23.164|
;;;214    	{
;;;215    		if(MasterRecbuf[1] == 0x03)
;;;216    		{
;;;217    			crcres = (MasterRecbuf[8] << 8) + MasterRecbuf[7];
;;;218    			if(crcres == Hardware_CRC(MasterRecbuf,7))
;;;219    			{
;;;220    				 
;;;221    				Para.CPOW_Voltage = (MasterRecbuf[3] << 8) + MasterRecbuf[4];
;;;222    				Para.CCurrent = (MasterRecbuf[5] << 8) + MasterRecbuf[6];
;;;223    				memset(MasterRecbuf,0,sizeof(MasterRecbuf));
;;;224    			}
;;;225    				if(sendwait == 3)
000004  4d28              LDR      r5,|L23.168|
000006  7820              LDRB     r0,[r4,#0]            ;213  ; MasterRecbuf
000008  2801              CMP      r0,#1                 ;213
00000a  d148              BNE      |L23.158|
00000c  7860              LDRB     r0,[r4,#1]            ;215  ; MasterRecbuf
00000e  2803              CMP      r0,#3                 ;215
000010  d002              BEQ      |L23.24|
;;;226    				{
;;;227    					SetPowerModeS();
;;;228    				}
;;;229    				if(sendwait == 2)
;;;230    				{
;;;231    					SetPowerModeC();
;;;232    				}
;;;233    				if(sendwait == 1)
;;;234    				{
;;;235    					SetPowerModeV();
;;;236    				}
;;;237    				if(listsend == 3)
;;;238    				{
;;;239    					SetListPS();
;;;240    				}
;;;241    				if(listsend == 2)
;;;242    				{
;;;243    					SetListPC();
;;;244    				}
;;;245    				if(listsend == 1)
;;;246    				{
;;;247    					SetListPV();
;;;248    				}
;;;249    		}else if(MasterRecbuf[1] == 0x06){
000012  2806              CMP      r0,#6
000014  d03c              BEQ      |L23.144|
000016  e042              B        |L23.158|
                  |L23.24|
000018  79e1              LDRB     r1,[r4,#7]            ;217  ; MasterRecbuf
00001a  7a20              LDRB     r0,[r4,#8]            ;217  ; MasterRecbuf
00001c  eb012000          ADD      r0,r1,r0,LSL #8       ;217
000020  f8ad0000          STRH     r0,[sp,#0]            ;217
000024  2107              MOVS     r1,#7                 ;218
000026  481f              LDR      r0,|L23.164|
000028  f7fffffe          BL       Hardware_CRC
00002c  f8bd1000          LDRH     r1,[sp,#0]            ;218
000030  4288              CMP      r0,r1                 ;218
000032  d10e              BNE      |L23.82|
000034  7920              LDRB     r0,[r4,#4]            ;221  ; MasterRecbuf
000036  78e1              LDRB     r1,[r4,#3]            ;221  ; MasterRecbuf
000038  eb002101          ADD      r1,r0,r1,LSL #8       ;221
00003c  481b              LDR      r0,|L23.172|
00003e  6281              STR      r1,[r0,#0x28]         ;221  ; Para
000040  79a1              LDRB     r1,[r4,#6]            ;222  ; MasterRecbuf
000042  7962              LDRB     r2,[r4,#5]            ;222  ; MasterRecbuf
000044  eb012102          ADD      r1,r1,r2,LSL #8       ;222
000048  6301              STR      r1,[r0,#0x30]         ;222  ; Para
00004a  2180              MOVS     r1,#0x80              ;223
00004c  4815              LDR      r0,|L23.164|
00004e  f7fffffe          BL       __aeabi_memclr
                  |L23.82|
000052  7a28              LDRB     r0,[r5,#8]            ;225  ; sendwait
000054  2803              CMP      r0,#3                 ;225
000056  d101              BNE      |L23.92|
000058  f7fffffe          BL       SetPowerModeS
                  |L23.92|
00005c  7a28              LDRB     r0,[r5,#8]            ;229  ; sendwait
00005e  2802              CMP      r0,#2                 ;229
000060  d101              BNE      |L23.102|
000062  f7fffffe          BL       SetPowerModeC
                  |L23.102|
000066  7a28              LDRB     r0,[r5,#8]            ;233  ; sendwait
000068  2801              CMP      r0,#1                 ;233
00006a  d101              BNE      |L23.112|
00006c  f7fffffe          BL       SetPowerModeV
                  |L23.112|
000070  7a68              LDRB     r0,[r5,#9]            ;237  ; listsend
000072  2803              CMP      r0,#3                 ;237
000074  d101              BNE      |L23.122|
000076  f7fffffe          BL       SetListPS
                  |L23.122|
00007a  7a68              LDRB     r0,[r5,#9]            ;241  ; listsend
00007c  2802              CMP      r0,#2                 ;241
00007e  d101              BNE      |L23.132|
000080  f7fffffe          BL       SetListPC
                  |L23.132|
000084  7a68              LDRB     r0,[r5,#9]            ;245  ; listsend
000086  2801              CMP      r0,#1                 ;245
000088  d109              BNE      |L23.158|
00008a  f7fffffe          BL       SetListPV
00008e  e006              B        |L23.158|
                  |L23.144|
;;;250    			memset(MasterRecbuf,0,sizeof(MasterRecbuf));
000090  2180              MOVS     r1,#0x80
000092  4804              LDR      r0,|L23.164|
000094  f7fffffe          BL       __aeabi_memclr
;;;251    			watchtest ++;
000098  6b28              LDR      r0,[r5,#0x30]  ; watchtest
00009a  1c40              ADDS     r0,r0,#1
00009c  6328              STR      r0,[r5,#0x30]  ; watchtest
                  |L23.158|
;;;252    		}
;;;253    	}	
;;;254    
;;;255    	
;;;256    	USART3_Recive_flg = 0;
00009e  2000              MOVS     r0,#0
0000a0  7068              STRB     r0,[r5,#1]
;;;257    }
0000a2  bd38              POP      {r3-r5,pc}
;;;258    
                          ENDP

                  |L23.164|
                          DCD      ||area_number.31||+0x15c
                  |L23.168|
                          DCD      ||.data||
                  |L23.172|
                          DCD      Para

                          AREA ||i.USART3WriteDMA||, CODE, READONLY, ALIGN=2

                  USART3WriteDMA PROC
;;;2199   
;;;2200   void USART3WriteDMA(u16 len)
000000  b570              PUSH     {r4-r6,lr}
;;;2201   {
000002  4605              MOV      r5,r0
;;;2202       USART_ClearFlag(USART3, USART_FLAG_TC);     //串口发送准备
000004  2140              MOVS     r1,#0x40
000006  4809              LDR      r0,|L24.44|
000008  f7fffffe          BL       USART_ClearFlag
;;;2203   	DMA_Cmd(DMA1_Stream3, DISABLE);//关闭DMA 数据流3
00000c  4c08              LDR      r4,|L24.48|
00000e  2100              MOVS     r1,#0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       DMA_Cmd
;;;2204       DMA_SetCurrDataCounter(DMA1_Stream3,len);//设置DMA发生长度
000016  4629              MOV      r1,r5
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       DMA_SetCurrDataCounter
;;;2205   	DMA_Cmd(DMA1_Stream3, ENABLE);// 打开DMA 数据流3
00001e  4620              MOV      r0,r4
000020  e8bd4070          POP      {r4-r6,lr}
000024  2101              MOVS     r1,#1
000026  f7ffbffe          B.W      DMA_Cmd
;;;2206      
;;;2207   }
;;;2208   
                          ENDP

00002a  0000              DCW      0x0000
                  |L24.44|
                          DCD      0x40004800
                  |L24.48|
                          DCD      0x40026058

                          AREA ||i.USART3_Configuration||, CODE, READONLY, ALIGN=2

                  USART3_Configuration PROC
;;;2146   
;;;2147   void USART3_Configuration()//???????
000000  b570              PUSH     {r4-r6,lr}
;;;2148   {  
;;;2149       GPIO_InitTypeDef GPIO_InitStructure;
;;;2150   	USART_InitTypeDef USART_InitStructure;
;;;2151   	
;;;2152   	/* config USART1 clock */
;;;2153   	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
000002  2101              MOVS     r1,#1
000004  b088              SUB      sp,sp,#0x20           ;2148
000006  0488              LSLS     r0,r1,#18
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;2154   //    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE); //?? GPIOA ??
;;;2155       
;;;2156   	GPIO_PinAFConfig(GPIOD,GPIO_PinSource8,GPIO_AF_USART3);
00000c  4c2a              LDR      r4,|L25.184|
00000e  2207              MOVS     r2,#7
000010  2108              MOVS     r1,#8
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2157   	GPIO_PinAFConfig(GPIOD,GPIO_PinSource9,GPIO_AF_USART3);
000018  2207              MOVS     r2,#7
00001a  2109              MOVS     r1,#9
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2158       
;;;2159   
;;;2160       
;;;2161       
;;;2162   	/* USART1 GPIO config */
;;;2163   	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;2164   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
000022  15a0              ASRS     r0,r4,#22
;;;2165   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000024  2502              MOVS     r5,#2
000026  9004              STR      r0,[sp,#0x10]
000028  f88d5014          STRB     r5,[sp,#0x14]
;;;2166   //     GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //??????
;;;2167   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00002c  f88d5015          STRB     r5,[sp,#0x15]
;;;2168   	GPIO_Init(GPIOD, &GPIO_InitStructure);    
000030  a904              ADD      r1,sp,#0x10
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       GPIO_Init
;;;2169   	/* Configure USART1 Rx (PA.10) as input floating */
;;;2170   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
000038  1560              ASRS     r0,r4,#21
;;;2171       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00003a  9004              STR      r0,[sp,#0x10]
00003c  f88d5014          STRB     r5,[sp,#0x14]
;;;2172   	GPIO_Init(GPIOD, &GPIO_InitStructure);
000040  a904              ADD      r1,sp,#0x10
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       GPIO_Init
;;;2173       
;;;2174   
;;;2175   	
;;;2176   	/* USART1 mode config */
;;;2177   	USART_InitStructure.USART_BaudRate = 9600;
;;;2178   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000048  2400              MOVS     r4,#0
00004a  f44f5016          MOV      r0,#0x2580            ;2177
00004e  9000              STR      r0,[sp,#0]
;;;2179   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2180   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000050  f8ad4008          STRH     r4,[sp,#8]
;;;2181   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2182   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000054  200c              MOVS     r0,#0xc
;;;2183   	USART_Init(USART3, &USART_InitStructure);
000056  4e19              LDR      r6,|L25.188|
000058  f8ad4004          STRH     r4,[sp,#4]            ;2178
00005c  f8ad000a          STRH     r0,[sp,#0xa]          ;2182
000060  f8ad4006          STRH     r4,[sp,#6]            ;2179
000064  f8ad400c          STRH     r4,[sp,#0xc]          ;2181
000068  4669              MOV      r1,sp
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       USART_Init
;;;2184       
;;;2185   
;;;2186   	
;;;2187   	/******????????******************/
;;;2188   	USART_ITConfig(USART3, USART_IT_IDLE, ENABLE);
000070  2201              MOVS     r2,#1
000072  f2404124          MOV      r1,#0x424
000076  4630              MOV      r0,r6
000078  f7fffffe          BL       USART_ITConfig
00007c  f44f60e0          MOV      r0,#0x700
000080  f7fffffe          BL       NVIC_PriorityGroupConfig
000084  2027              MOVS     r0,#0x27
000086  f88d0018          STRB     r0,[sp,#0x18]
00008a  f88d4019          STRB     r4,[sp,#0x19]
00008e  f88d501a          STRB     r5,[sp,#0x1a]
000092  2001              MOVS     r0,#1
000094  f88d001b          STRB     r0,[sp,#0x1b]
000098  a806              ADD      r0,sp,#0x18
00009a  f7fffffe          BL       NVIC_Init
;;;2189   	USART3_NVIC_Config();//??????
;;;2190   	USART3_DMA_init();
00009e  f7fffffe          BL       USART3_DMA_init
;;;2191   	USART_Cmd(USART3, ENABLE);//????1
0000a2  2101              MOVS     r1,#1
0000a4  4630              MOV      r0,r6
0000a6  f7fffffe          BL       USART_Cmd
;;;2192       USART_ClearFlag(USART3, USART_FLAG_TC);
0000aa  2140              MOVS     r1,#0x40
0000ac  4630              MOV      r0,r6
0000ae  f7fffffe          BL       USART_ClearFlag
;;;2193       
;;;2194     
;;;2195       
;;;2196   	
;;;2197   }
0000b2  b008              ADD      sp,sp,#0x20
0000b4  bd70              POP      {r4-r6,pc}
;;;2198   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L25.184|
                          DCD      0x40020c00
                  |L25.188|
                          DCD      0x40004800

                          AREA ||i.USART3_DMA_init||, CODE, READONLY, ALIGN=2

                  USART3_DMA_init PROC
;;;2047   
;;;2048   static void USART3_DMA_init(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2049   {
;;;2050       DMA_InitTypeDef DMA_InitStructure;
;;;2051       NVIC_InitTypeDef NVIC_InitStructure;
;;;2052   	
;;;2053   	//串口3使用DMA1 发送为数据流3  通道4   
;;;2054       //F4与F1DMA多了一个数据流的说法详细参考中文数据手册DMA 表35
;;;2055       /* 1.使能DMA2时钟 */
;;;2056   	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
000004  2101              MOVS     r1,#1
000006  b091              SUB      sp,sp,#0x44           ;2049
000008  0548              LSLS     r0,r1,#21
00000a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;2057   	
;;;2058   	//串口发送DMA配置
;;;2059       /* 2.配置使用DMA发送数据 */
;;;2060       DMA_DeInit(DMA1_Stream3); //DMA1 数据流 3
00000e  f8dfa0d8          LDR      r10,|L26.232|
000012  4650              MOV      r0,r10
000014  f7fffffe          BL       DMA_DeInit
;;;2061       DMA_InitStructure.DMA_Channel = DMA_Channel_4;  /* 配置DMA1通道4 */
000018  f04f6600          MOV      r6,#0x8000000
;;;2062       DMA_InitStructure.DMA_PeripheralBaseAddr  = (uint32_t)(&(USART3->DR)); /* 目的 */
;;;2063       DMA_InitStructure.DMA_Memory0BaseAddr     = (uint32_t)MasterSendbuf; /*源内存地址*/
00001c  4834              LDR      r0,|L26.240|
00001e  4f33              LDR      r7,|L26.236|
000020  9600              STR      r6,[sp,#0]
000022  e9cd7001          STRD     r7,r0,[sp,#4]
;;;2064       DMA_InitStructure.DMA_DIR                 = DMA_DIR_MemoryToPeripheral;  /*方向内            
;;;2065                                                                               存到外设*/
;;;2066       DMA_InitStructure.DMA_BufferSize          = MAXRxTxLen;                    
;;;2067       /* 长度 */                  
;;;2068       DMA_InitStructure.DMA_PeripheralInc       = DMA_PeripheralInc_Disable;    
000026  2400              MOVS     r4,#0
000028  2040              MOVS     r0,#0x40              ;2064
00002a  f04f0880          MOV      r8,#0x80              ;2066
;;;2069       /* 外设地址是否自增 */
;;;2070       DMA_InitStructure.DMA_MemoryInc           = DMA_MemoryInc_Enable;        
00002e  f44f6980          MOV      r9,#0x400
000032  9003              STR      r0,[sp,#0xc]
000034  e9cd8404          STRD     r8,r4,[sp,#0x10]
000038  e9cd9406          STRD     r9,r4,[sp,#0x18]
;;;2071       /* 内存地址是否自增 */
;;;2072       DMA_InitStructure.DMA_PeripheralDataSize  = DMA_PeripheralDataSize_Byte;  
;;;2073       /* 目的数据带宽 */
;;;2074       DMA_InitStructure.DMA_MemoryDataSize      = DMA_MemoryDataSize_Byte;      
;;;2075       /* 源数据宽度 */
;;;2076       DMA_InitStructure.DMA_Mode                = DMA_Mode_Normal;             
;;;2077       /* 单次传输模式/循环传输模式 */
;;;2078       DMA_InitStructure.DMA_Priority            = DMA_Priority_High;             
00003c  02c0              LSLS     r0,r0,#11
00003e  9408              STR      r4,[sp,#0x20]
000040  e9cd4009          STRD     r4,r0,[sp,#0x24]
;;;2079       /* DMA优先级 */
;;;2080       DMA_InitStructure.DMA_FIFOMode            = DMA_FIFOMode_Disable;          
;;;2081       /* FIFO模式/直接模式 */
;;;2082       DMA_InitStructure.DMA_FIFOThreshold       = DMA_FIFOThreshold_HalfFull; 
000044  2501              MOVS     r5,#1
000046  e9cd450b          STRD     r4,r5,[sp,#0x2c]
;;;2083       /* FIFO大小 */
;;;2084       DMA_InitStructure.DMA_MemoryBurst         = DMA_MemoryBurst_Single;      
;;;2085        /* 单次传输 */
;;;2086       DMA_InitStructure.DMA_PeripheralBurst     = DMA_PeripheralBurst_Single;
00004a  940d              STR      r4,[sp,#0x34]
;;;2087       /* 3. 配置DMA */
;;;2088       DMA_Init(DMA1_Stream3, &DMA_InitStructure);
00004c  4669              MOV      r1,sp
00004e  4650              MOV      r0,r10
000050  940e              STR      r4,[sp,#0x38]
000052  f7fffffe          BL       DMA_Init
;;;2089       /* 4.使能DMA中断 */
;;;2090       DMA_ITConfig(DMA1_Stream3, DMA_IT_TC, ENABLE);
000056  2201              MOVS     r2,#1
000058  2110              MOVS     r1,#0x10
00005a  4650              MOV      r0,r10
00005c  f7fffffe          BL       DMA_ITConfig
;;;2091       /* 5.使能串口的DMA发送接口 */
;;;2092       USART_DMACmd(USART3, USART_DMAReq_Tx, ENABLE);
000060  f1a70b04          SUB      r11,r7,#4
000064  2201              MOVS     r2,#1
000066  2180              MOVS     r1,#0x80
000068  4658              MOV      r0,r11
00006a  f7fffffe          BL       USART_DMACmd
;;;2093       /* 6. 配置DMA中断优先级 */
;;;2094       NVIC_InitStructure.NVIC_IRQChannel                   = DMA1_Stream3_IRQn;  
00006e  200e              MOVS     r0,#0xe
000070  f88d003c          STRB     r0,[sp,#0x3c]
;;;2095       //  DMA发生中断         
;;;2096       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;          
000074  f88d403d          STRB     r4,[sp,#0x3d]
;;;2097       NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 4; 
000078  2004              MOVS     r0,#4
00007a  f88d003e          STRB     r0,[sp,#0x3e]
;;;2098       NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;
00007e  f88d503f          STRB     r5,[sp,#0x3f]
;;;2099       NVIC_Init(&NVIC_InitStructure);
000082  a80f              ADD      r0,sp,#0x3c
000084  f7fffffe          BL       NVIC_Init
;;;2100   	
;;;2101       /* 7.不使能DMA */                  
;;;2102       DMA_Cmd(DMA1_Stream3, DISABLE);// 数据流2
000088  2100              MOVS     r1,#0
00008a  4650              MOV      r0,r10
00008c  f7fffffe          BL       DMA_Cmd
;;;2103   	//************************DMA接收***********************//
;;;2104   	/* 2.配置使用DMA接收数据 */
;;;2105       DMA_DeInit(DMA1_Stream1); 
000090  f8dfa054          LDR      r10,|L26.232|
000094  f1aa0a30          SUB      r10,r10,#0x30
000098  4650              MOV      r0,r10
00009a  f7fffffe          BL       DMA_DeInit
;;;2106       DMA_InitStructure.DMA_Channel             = DMA_Channel_4;               
;;;2107       /* 配置DMA通道 */
;;;2108       DMA_InitStructure.DMA_PeripheralBaseAddr  = (uint32_t)(&(USART3->DR));   
;;;2109       /* 源地址 */
;;;2110       DMA_InitStructure.DMA_Memory0BaseAddr     = (uint32_t)MasterRecbuf;    
00009e  4814              LDR      r0,|L26.240|
0000a0  a902              ADD      r1,sp,#8
0000a2  3080              ADDS     r0,r0,#0x80
0000a4  e8810111          STM      r1,{r0,r4,r8}
0000a8  e9cd4905          STRD     r4,r9,[sp,#0x14]
;;;2111       /* 目标地址 */
;;;2112       DMA_InitStructure.DMA_DIR                 = DMA_DIR_PeripheralToMemory;    
;;;2113       /* 方向外设向内存  */
;;;2114       DMA_InitStructure.DMA_BufferSize          = MAXRxTxLen;                    		
;;;2115       /* 长度 */                  
;;;2116       DMA_InitStructure.DMA_PeripheralInc       = DMA_PeripheralInc_Disable;    
;;;2117         /* 外设地址是否自增 */
;;;2118       DMA_InitStructure.DMA_MemoryInc           = DMA_MemoryInc_Enable;         
;;;2119       /* 内存地址是否自增 */
;;;2120       DMA_InitStructure.DMA_PeripheralDataSize  = DMA_MemoryDataSize_Byte;     
;;;2121       /* 目的数据带宽 */
;;;2122       DMA_InitStructure.DMA_MemoryDataSize      = DMA_MemoryDataSize_Byte;      
;;;2123       /* 源数据宽度 */
;;;2124       DMA_InitStructure.DMA_Mode                = DMA_Mode_Circular;             
0000ac  0228              LSLS     r0,r5,#8
0000ae  e9cd4008          STRD     r4,r0,[sp,#0x20]
;;;2125       /*循环传输模式 */
;;;2126       DMA_InitStructure.DMA_Priority            = DMA_Priority_VeryHigh;        
0000b2  a90a              ADD      r1,sp,#0x28
0000b4  9407              STR      r4,[sp,#0x1c]         ;2124
0000b6  f44f3040          MOV      r0,#0x30000
0000ba  e8810031          STM      r1,{r0,r4,r5}
;;;2127       /* DMA优先级 */
;;;2128       DMA_InitStructure.DMA_FIFOMode            = DMA_FIFOMode_Disable;         
;;;2129        /* FIFO模式/直接模式 */
;;;2130       DMA_InitStructure.DMA_FIFOThreshold       = DMA_FIFOThreshold_HalfFull; 
;;;2131       /* FIFO大小 */
;;;2132       DMA_InitStructure.DMA_MemoryBurst         = DMA_MemoryBurst_Single;       
;;;2133       /* 单次传输 */
;;;2134       DMA_InitStructure.DMA_PeripheralBurst     = DMA_PeripheralBurst_Single;
0000be  940d              STR      r4,[sp,#0x34]
;;;2135       /* 3. 配置DMA */
;;;2136       DMA_Init(DMA1_Stream1, &DMA_InitStructure);
0000c0  4669              MOV      r1,sp
0000c2  4650              MOV      r0,r10
0000c4  940e              STR      r4,[sp,#0x38]
0000c6  e9cd6700          STRD     r6,r7,[sp,#0]
0000ca  f7fffffe          BL       DMA_Init
;;;2137       /* 4.由于接收不需要DMA中断，故不设置DMA中断 */
;;;2138       /* 5.使能串口的DMA接收 */
;;;2139       USART_DMACmd(USART3,USART_DMAReq_Rx,ENABLE);
0000ce  2201              MOVS     r2,#1
0000d0  2140              MOVS     r1,#0x40
0000d2  4658              MOV      r0,r11
0000d4  f7fffffe          BL       USART_DMACmd
;;;2140       /* 6. 由于接收不需要DMA中断，故不能配置DMA中断优先级 */
;;;2141       /* 7.使能DMA */ 
;;;2142       DMA_Cmd(DMA1_Stream1,ENABLE);
0000d8  2101              MOVS     r1,#1
0000da  4650              MOV      r0,r10
0000dc  f7fffffe          BL       DMA_Cmd
;;;2143   }
0000e0  b011              ADD      sp,sp,#0x44
0000e2  e8bd8ff0          POP      {r4-r11,pc}
;;;2144   
                          ENDP

0000e6  0000              DCW      0x0000
                  |L26.232|
                          DCD      0x40026058
                  |L26.236|
                          DCD      0x40004804
                  |L26.240|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;2224   
;;;2225   void USART3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2226   {
;;;2227       u8 Clear = Clear;
;;;2228       u16 num = 0;
;;;2229            
;;;2230       if(USART_GetITStatus(USART3, USART_IT_IDLE) != RESET)
000002  4c18              LDR      r4,|L27.100|
000004  f2404124          MOV      r1,#0x424
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USART_GetITStatus
00000e  2800              CMP      r0,#0
000010  d024              BEQ      |L27.92|
;;;2231       {
;;;2232           Clear = USART3->SR;  //读SR寄存器清除                                                            
000012  8820              LDRH     r0,[r4,#0]
;;;2233          
;;;2234           Clear = USART3->DR;  //读DR寄存器清除                                                        
000014  1d20              ADDS     r0,r4,#4
000016  8800              LDRH     r0,[r0,#0]
;;;2235           DMA_Cmd(DMA1_Stream1,DISABLE);   //关闭DMA
000018  4d13              LDR      r5,|L27.104|
00001a  2100              MOVS     r1,#0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       DMA_Cmd
;;;2236   		DMA_ClearFlag(DMA1_Stream1,DMA_FLAG_TCIF2);
000022  f04f5181          MOV      r1,#0x10200000
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       DMA_ClearFlag
;;;2237           num = DMA_GetCurrDataCounter(DMA1_Stream1); //得到真正接收数据个数
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       DMA_GetCurrDataCounter
;;;2238           if(num < MAXRxTxLen)
;;;2239           {
;;;2240               USART3_Recive_leng   = MAXRxTxLen - num;
000032  4c0e              LDR      r4,|L27.108|
000034  2880              CMP      r0,#0x80              ;2238
000036  d212              BCS      |L27.94|
000038  f1c00080          RSB      r0,r0,#0x80
00003c  b2c0              UXTB     r0,r0
00003e  7020              STRB     r0,[r4,#0]
;;;2241           }else
;;;2242           {
;;;2243               USART3_Recive_leng = MAXRxTxLen;
;;;2244           }
;;;2245            
;;;2246           if(USART3_Recive_leng > MAXRxTxLen)
000040  2880              CMP      r0,#0x80
000042  d901              BLS      |L27.72|
;;;2247           {
;;;2248               USART3_Recive_leng = 0;  //避免接收数据超界                                               
000044  2000              MOVS     r0,#0
                  |L27.70|
000046  7020              STRB     r0,[r4,#0]            ;2243
                  |L27.72|
;;;2249           }
;;;2250           DMA_SetCurrDataCounter(DMA1_Stream1,MAXRxTxLen);//设置DMA传输长度                                                        
000048  2180              MOVS     r1,#0x80
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       DMA_SetCurrDataCounter
;;;2251           DMA_Cmd(DMA1_Stream1,ENABLE);  //开启DMA
000050  2101              MOVS     r1,#1
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       DMA_Cmd
;;;2252           USART3_Recive_flg = 1;    //数据接收成功                                                  
000058  2001              MOVS     r0,#1
00005a  7060              STRB     r0,[r4,#1]
                  |L27.92|
;;;2253           
;;;2254       } 
;;;2255   }
00005c  bd70              POP      {r4-r6,pc}
                  |L27.94|
00005e  2080              MOVS     r0,#0x80              ;2243
000060  e7f1              B        |L27.70|
;;;2256   
                          ENDP

000062  0000              DCW      0x0000
                  |L27.100|
                          DCD      0x40004800
                  |L27.104|
                          DCD      0x40026028
                  |L27.108|
                          DCD      ||.data||

                          AREA ||i.USART_Configuration||, CODE, READONLY, ALIGN=2

                  USART_Configuration PROC
;;;1941   
;;;1942   void USART_Configuration(void)//串口初始化函数
000000  b570              PUSH     {r4-r6,lr}
;;;1943   {  
000002  b088              SUB      sp,sp,#0x20
;;;1944   	GPIO_InitTypeDef GPIO_InitStructure;
;;;1945   	USART_InitTypeDef USART_InitStructure;
;;;1946   	
;;;1947   	/* config USART1 clock */
;;;1948   	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
000004  2101              MOVS     r1,#1
000006  2010              MOVS     r0,#0x10
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;1949   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1);
00000c  4e2a              LDR      r6,|L28.184|
00000e  2207              MOVS     r2,#7
000010  2109              MOVS     r1,#9
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;1950   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1);
000018  2207              MOVS     r2,#7
00001a  210a              MOVS     r1,#0xa
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;1951   	/* USART1 GPIO config */
;;;1952   	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;1953   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
;;;1954   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000022  2502              MOVS     r5,#2
000024  1570              ASRS     r0,r6,#21             ;1953
000026  f88d5004          STRB     r5,[sp,#4]
;;;1955   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
00002c  9000              STR      r0,[sp,#0]            ;1954
00002e  f88d4006          STRB     r4,[sp,#6]
;;;1956   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f88d5005          STRB     r5,[sp,#5]
;;;1957   	GPIO_Init(GPIOA, &GPIO_InitStructure);    
000036  4669              MOV      r1,sp
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GPIO_Init
;;;1958   	/* Configure USART1 Rx (PA.10) as input floating */
;;;1959   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
00003e  0268              LSLS     r0,r5,#9
;;;1960   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000040  9000              STR      r0,[sp,#0]
000042  f88d5004          STRB     r5,[sp,#4]
;;;1961   	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;1962   	
;;;1963   	/* USART1 mode config */
;;;1964   	USART_InitStructure.USART_BaudRate = 9600;
00004e  f44f5016          MOV      r0,#0x2580
;;;1965   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000052  9002              STR      r0,[sp,#8]
;;;1966   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;1967   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000054  f8ad4010          STRH     r4,[sp,#0x10]
;;;1968   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;1969   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
;;;1970   	USART_Init(USART1, &USART_InitStructure);
00005a  4d18              LDR      r5,|L28.188|
00005c  f8ad400c          STRH     r4,[sp,#0xc]          ;1965
000060  f8ad0012          STRH     r0,[sp,#0x12]         ;1969
000064  f8ad400e          STRH     r4,[sp,#0xe]          ;1966
000068  f8ad4014          STRH     r4,[sp,#0x14]         ;1968
00006c  a902              ADD      r1,sp,#8
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       USART_Init
;;;1971   	
;;;1972   	/******使能串口接收中断******************/
;;;1973   	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	
000074  2201              MOVS     r2,#1
000076  f2405125          MOV      r1,#0x525
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_ITConfig
;;;1974   	USART_Cmd(USART1, ENABLE);//使能串口1
000080  2101              MOVS     r1,#1
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USART_Cmd
;;;1975   	USART_ClearFlag(USART1, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       USART_ClearFlag
000090  f44f60e0          MOV      r0,#0x700
000094  f7fffffe          BL       NVIC_PriorityGroupConfig
000098  2025              MOVS     r0,#0x25
00009a  f88d0018          STRB     r0,[sp,#0x18]
00009e  f88d4019          STRB     r4,[sp,#0x19]
0000a2  2004              MOVS     r0,#4
0000a4  f88d001a          STRB     r0,[sp,#0x1a]
0000a8  2001              MOVS     r0,#1
0000aa  f88d001b          STRB     r0,[sp,#0x1b]
0000ae  a806              ADD      r0,sp,#0x18
0000b0  f7fffffe          BL       NVIC_Init
;;;1976     
;;;1977   	USART1_NVIC_Config();//串口中断配置
;;;1978   }			
0000b4  b008              ADD      sp,sp,#0x20
0000b6  bd70              POP      {r4-r6,pc}
;;;1979   
                          ENDP

                  |L28.184|
                          DCD      0x40020000
                  |L28.188|
                          DCD      0x40011000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UART_Buffer_Rece
                          %        16

                          AREA ||area_number.31||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.31||, ||.bss||
                  UART_Buffer_Send
                          %        20
                  USART_RX_BUF
                          %        200
                  MasterSendbuf
                          %        128
                  MasterRecbuf
                          %        128

                          AREA ||.data||, DATA, ALIGN=2

                  USART3_Recive_leng
000000  00                DCB      0x00
                  USART3_Recive_flg
000001  00                DCB      0x00
                  UART_Buffer_Send_pointer
000002  00                DCB      0x00
                  |symbol_number.101|
000003  00                DCB      0x00
                  Transmit_BUFFERsize
000004  00                DCB      0x00
                  MODE
000005  00                DCB      0x00
                  mainswitch
000006  00                DCB      0x00
                  Rraly
000007  00                DCB      0x00
                  sendwait
000008  00                DCB      0x00
                  listsend
000009  00                DCB      0x00
                  USART_RX_STA
00000a  0000              DCW      0x0000
                  USART_RX_CNT
00000c  0000              DCW      0x0000
00000e  0000              DCB      0x00,0x00
                  ||x1||
                          DCD      0x00000000
                  ||y1||
                          DCD      0x00000000
                  ||x2||
                          DCD      0x00000000
                  ||y2||
                          DCD      0x00000000
                  ||x3||
                          DCD      0x00000000
                  ||y3||
                          DCD      0x00000000
                  ||x4||
                          DCD      0x00000000
                  ||y4||
                          DCD      0x00000000
                  watchtest
                          DCD      0x00000000
                  CmdStr
000034  53544154          DCB      0x53,0x54,0x41,0x54
000038  55535f00          DCB      0x55,0x53,0x5f,0x00
00003c  004d4f44          DCB      0x00,0x4d,0x4f,0x44
000040  5f000000          DCB      0x5f,0x00,0x00,0x00
000044  00005452          DCB      0x00,0x00,0x54,0x52
000048  49475f00          DCB      0x49,0x47,0x5f,0x00
00004c  00000053          DCB      0x00,0x00,0x00,0x53
000050  45545041          DCB      0x45,0x54,0x50,0x41
000054  52415f00          DCB      0x52,0x41,0x5f,0x00
000058  5345544c          DCB      0x53,0x45,0x54,0x4c
00005c  4953545f          DCB      0x49,0x53,0x54,0x5f
000060  00504f57          DCB      0x00,0x50,0x4f,0x57
000064  565f0000          DCB      0x56,0x5f,0x00,0x00
000068  0000504f          DCB      0x00,0x00,0x50,0x4f
00006c  57495f00          DCB      0x57,0x49,0x5f,0x00
000070  00000041          DCB      0x00,0x00,0x00,0x41
000074  4443565f          DCB      0x44,0x43,0x56,0x5f
000078  00000000          DCB      0x00,0x00,0x00,0x00
00007c  4c4f5749          DCB      0x4c,0x4f,0x57,0x49
000080  5f000000          DCB      0x5f,0x00,0x00,0x00
000084  00484f52          DCB      0x00,0x48,0x4f,0x52
000088  4c5f0000          DCB      0x4c,0x5f,0x00,0x00
00008c  00004c56          DCB      0x00,0x00,0x4c,0x56
000090  4c5f0000          DCB      0x4c,0x5f,0x00,0x00
000094  00000053          DCB      0x00,0x00,0x00,0x53
000098  57495443          DCB      0x57,0x49,0x54,0x43
00009c  485f0000          DCB      0x48,0x5f,0x00,0x00
0000a0  43414c56          DCB      0x43,0x41,0x4c,0x56
0000a4  5f000000          DCB      0x5f,0x00,0x00,0x00
0000a8  0043414c          DCB      0x00,0x43,0x41,0x4c
0000ac  495f0000          DCB      0x49,0x5f,0x00,0x00
0000b0  00004341          DCB      0x00,0x00,0x43,0x41
0000b4  4c525f00          DCB      0x4c,0x52,0x5f,0x00
0000b8  00000044          DCB      0x00,0x00,0x00,0x44
0000bc  41435f00          DCB      0x41,0x43,0x5f,0x00
0000c0  00000000          DCB      0x00,0x00,0x00,0x00
0000c4  4f564552          DCB      0x4f,0x56,0x45,0x52
0000c8  5f000000          DCB      0x5f,0x00,0x00,0x00
0000cc  0054454d          DCB      0x00,0x54,0x45,0x4d
0000d0  505f0000          DCB      0x50,0x5f,0x00,0x00
0000d4  0000424f          DCB      0x00,0x00,0x42,0x4f
0000d8  4f545f00          DCB      0x4f,0x54,0x5f,0x00
0000dc  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.34||, DATA, ALIGN=0

                          EXPORTAS ||area_number.34||, ||.data||
                  UART_Buffer_Size
000000  00                DCB      0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  t_USART
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.data||
                  powsetdelay
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\drive\\usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REV16|
#line 129 "E:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_usart_c_7cc17ae7____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REVSH|
#line 144
|__asm___7_usart_c_7cc17ae7____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
