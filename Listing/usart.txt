; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\usart.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\usart.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=537 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\usart.crf --no_multibyte_chars ..\drive\usart.c]
                          THUMB

                          AREA ||i.CalHandle||, CODE, READONLY, ALIGN=2

                  CalHandle PROC
;;;523    //校准处理
;;;524    void CalHandle(u8 mode,u8 range,u32 data)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;525    {
;;;526    	if(mode == 0)//测量电压
;;;527    	{
;;;528    		if(range == 0)//低档位低段
;;;529    		{
;;;530    			calflag = 1;
;;;531    			LOAD_V_SW = 0;
;;;532    			x1 = Vmon_Load_value;
000004  4cff              LDR      r4,|L1.1028|
;;;533    			y1 = data;
;;;534    		}else if(range == 1){//低档位高段
;;;535    			
;;;536    			x2 = Vmon_Load_value;
;;;537    			y2 = data;
;;;538    			CalPara.TestLV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;539    			CalPara.OffsetLV[0] = (float)y2 - CalPara.TestLV[0]*(float)x2;
;;;540    			
;;;541    			Flag_DAC_OFF=0;
000006  f8df8404          LDR      r8,|L1.1036|
00000a  4615              MOV      r5,r2                 ;525
00000c  2300              MOVS     r3,#0                 ;525
00000e  f8d8c000          LDR      r12,[r8,#0]
000012  4efa              LDR      r6,|L1.1020|
000014  4afa              LDR      r2,|L1.1024|
000016  f8dfa3f0          LDR      r10,|L1.1032|
;;;542    			calflag = 0;
;;;543    		}else if(range == 2){//高档位低段
;;;544    			calflag = 1;
;;;545    			LOAD_V_SW = 1;
;;;546    			x1 = Vmon_Load_value;
;;;547    			y1 = data/10;
;;;548    		}else if(range == 3){//高档位高段
;;;549    			
;;;550    			x2 = Vmon_Load_value;
;;;551    			y2 = data/10;
;;;552    			CalPara.TestLV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;553    			CalPara.OffsetLV[1] = (float)y2 - CalPara.TestLV[1]*(float)x2;
;;;554    				//参数写进FLASH
;;;555    			Flag_DAC_OFF=0;
;;;556    			calflag = 0;
;;;557    		}else if(range == 4){//电源控制电压和测量1
;;;558    			calflag = 1;
;;;559    			Contr_Voltage = 3500;
;;;560    			Contr_Current = 5000;
00001a  f8dfe3f4          LDR      lr,|L1.1040|
;;;561    			OnOff_GPOI_ResetSet(0,1);
;;;562    		}else if(range == 5){//电源控制电压和测量2
;;;563    			x1 = data;
;;;564    			y1 = Contr_Voltage;
;;;565    			x3 = Vmon_POWE_value;
;;;566    			y3 = data;
;;;567    			Contr_Voltage = 10000;
;;;568    			Contr_Current = 5000;
;;;569    		}else if(range == 6){//电源控制电压和测量3
;;;570    			x2 = data;
;;;571    			y2 = Contr_Voltage;
;;;572    			x4 = Vmon_POWE_value;
;;;573    			y4 = data;
;;;574    			
;;;575    			CalPara.SetPV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;576    			CalPara.OffsetSetPV[0] = (float)y2 - CalPara.SetPV[0]*(float)x2;
;;;577    			
;;;578    			CalPara.TestPV[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;579    			CalPara.OffsetPV[0] = (float)y4 - CalPara.TestPV[0]*(float)x4;
;;;580    			
;;;581    			Flag_DAC_OFF=0;
;;;582    			calflag = 0;
;;;583    			Off_GPOI_ResetSet();
;;;584    		}else if(range == 7){//CV控制低档1
;;;585    			LOAD_MODE = 1;
;;;586    			LOAD_V_SW=0;
;;;587    			GPIO_ResetBits(GPIOB,GPIO_Pin_1);//电压档位为低档
;;;588    			calflag = 1;
;;;589    			Contr_Laod = 1000;
00001e  f8df93f4          LDR      r9,|L1.1044|
000022  edd40a05          VLDR     s1,[r4,#0x14]         ;532
000026  ed940a06          VLDR     s0,[r4,#0x18]         ;532
00002a  edd42a0a          VLDR     s5,[r4,#0x28]         ;532
00002e  ed942a09          VLDR     s4,[r4,#0x24]         ;532
000032  2701              MOVS     r7,#1                 ;530
000034  f02c0c08          BIC      r12,r12,#8            ;541
000038  b120              CBZ      r0,|L1.68|
;;;590    			OnOff_GPOI_ResetSet(2,1);
;;;591    		}else if(range == 8){//CV控制低档2
;;;592    			LOAD_MODE = 1;
;;;593    			LOAD_V_SW=0;
;;;594    			GPIO_ResetBits(GPIOB,GPIO_Pin_1);//电压档位为低档
;;;595    			x1 = data;
;;;596    			y1 = Contr_Laod;
;;;597    			Contr_Laod = 20000;
;;;598    //			OnOff_GPOI_ResetSet(2,1);
;;;599    		}else if(range == 9){//CV控制低档3
;;;600    			x2 = data;
;;;601    			y2 = Contr_Laod;
;;;602    			CalPara.SetCV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;603    			CalPara.OffsetCV[0] = (float)y2 - CalPara.SetCV[0]*(float)x2;
;;;604    				//参数写进FLASH
;;;605    			Flag_DAC_OFF=0;
;;;606    			calflag = 0;
;;;607    			Off_GPOI_ResetSet();
;;;608    		}else if(range == 10){//CV控制高档1
;;;609    			LOAD_MODE = 1;
;;;610    			LOAD_V_SW=1;
;;;611    			GPIO_SetBits(GPIOB,GPIO_Pin_1);//电压档位为高档
;;;612    			calflag = 1;
;;;613    			Contr_Laod = 1000;
;;;614    			OnOff_GPOI_ResetSet(2,1);
;;;615    		}else if(range == 11){//CV控制高档2
;;;616    			LOAD_MODE = 1;
;;;617    			LOAD_V_SW=1;
;;;618    			GPIO_SetBits(GPIOB,GPIO_Pin_1);//电压档位为高档
;;;619    			x1 = data/10;
;;;620    			y1 = Contr_Laod;
;;;621    			Contr_Laod = 20000;
;;;622    			OnOff_GPOI_ResetSet(2,1);
;;;623    		}else if(range == 12){//CV控制高档3
;;;624    			x2 = data/10;
;;;625    			y2 = Contr_Laod;
;;;626    			CalPara.SetCV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;627    			CalPara.OffsetCV[1] = (float)y2 - CalPara.SetCV[1]*(float)x2;
;;;628    				//参数写进FLASH
;;;629    			Flag_DAC_OFF=0;
;;;630    			calflag = 0;
;;;631    			Off_GPOI_ResetSet();
;;;632    		}
;;;633    	}else if(mode == 1){
00003a  2801              CMP      r0,#1
00003c  d077              BEQ      |L1.302|
;;;634    		if(range == 0)//负载电流低档位1
;;;635    		{		
;;;636    			LOAD_I_SW = 0;
;;;637    			Contr_Laod = 6000;
;;;638    			calflag = 1;
;;;639    			OnOff_GPOI_ResetSet(2,1);
;;;640    		}
;;;641    		else if(range == 1)//负载电流低档位2
;;;642    		{
;;;643    			LOAD_I_SW = 0;			
;;;644    			x1 = data;
;;;645    			y1 = Contr_Laod;
;;;646    			x4 = Imon_Load_value;
;;;647    			y4 = data;
;;;648    			Contr_Laod = 20000;
;;;649    		}else if(range == 2)//负载电流低档位3
;;;650    		{
;;;651    			LOAD_I_SW = 0;			
;;;652    			x2 = data;
;;;653    			y2 = Contr_Laod;
;;;654    			x5 = Imon_Load_value;
;;;655    			y5 = data;
;;;656    			Contr_Laod = 60000;
;;;657    		}else if(range == 3){//负载电流低档位4
;;;658    			
;;;659    			x3 = data;
;;;660    			y3 = Contr_Laod;
;;;661    			x6 = Imon_Load_value;
;;;662    			y6 = data;
;;;663    			
;;;664    			CalPara.SetLC[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;665    			CalPara.OffsetLC[0] = (float)y2 - CalPara.SetLC[0]*(float)x2;
;;;666    			CalPara.SetLC[1] = ((float)y3 - (float)y2)/((float)x3 - (float)x2);
;;;667    			CalPara.OffsetLC[1] = (float)y3 - CalPara.SetLC[1]*(float)x3;
;;;668    			
;;;669    			CalPara.TestLC[0] = ((float)y5 - (float)y4)/((float)x5 - (float)x4);
;;;670    			CalPara.OffsetTestLC[0] = (float)y5 - CalPara.TestLC[0]*(float)x5;
;;;671    			CalPara.TestLC[1] = ((float)y6 - (float)y5)/((float)x6 - (float)x5);
;;;672    			CalPara.OffsetTestLC[1] = (float)y6 - CalPara.TestLC[1]*(float)x6;
;;;673    				
;;;674    			Flag_DAC_OFF =0;
;;;675    			calflag = 0;
;;;676    			Off_GPOI_ResetSet();
;;;677    		}else if(range == 4){//负载电流高档位1
;;;678    			LOAD_I_SW = 1;
;;;679    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;680    			Contr_Laod = 6000;
;;;681    			calflag = 1;
;;;682    			OnOff_GPOI_ResetSet(2,1);
;;;683    		}else if(range == 5){//负载电流高档位2
;;;684    			
;;;685    			LOAD_I_SW = 1;
;;;686    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;687    			x1 = data;
;;;688    			y1 = Contr_Laod;
;;;689    			x5 = Imon_Load_value;
;;;690    			y5 = data;
;;;691    			Contr_Laod = 12000;
;;;692    		}else if(range == 6){//负载电流高档位3
;;;693    			
;;;694    			LOAD_I_SW = 1;
;;;695    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;696    			x2 = data;
;;;697    			y2 = Contr_Laod;
;;;698    			x6 = Imon_Load_value;
;;;699    			y6 = data;
;;;700    			Contr_Laod = 20000;
;;;701    		}else if(range == 7){//负载电流高档位4
;;;702    			
;;;703    			LOAD_I_SW = 1;
;;;704    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;705    			x3 = data;
;;;706    			y3 = Contr_Laod;
;;;707    			x7 = Imon_Load_value;
;;;708    			y7 = data;
;;;709    			Contr_Laod = 40000;
;;;710    		}else if(range == 8){//负载电流高档位5
;;;711    			
;;;712    			x4 = data;
;;;713    			y4 = Contr_Laod;
;;;714    			x8 = Imon_Load_value;
;;;715    			y8 = data;
;;;716    			
;;;717    			CalPara.SetLC[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;718    			CalPara.OffsetLC[2] = (float)y2 - CalPara.SetLC[2]*(float)x2;
;;;719    			CalPara.SetLC[3] = ((float)y3 - (float)y2)/((float)x3 - (float)x2);
;;;720    			CalPara.OffsetLC[3] = (float)y3 - CalPara.SetLC[3]*(float)x3;
;;;721    			CalPara.SetLC[4] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;722    			CalPara.OffsetLC[4] = (float)y4 - CalPara.SetLC[4]*(float)x4;
;;;723    			
;;;724    			CalPara.TestLC[2] = ((float)y6 - (float)y5)/((float)x6 - (float)x5);
;;;725    			CalPara.OffsetTestLC[2] = (float)y6 - CalPara.TestLC[2]*(float)x6;
;;;726    			CalPara.TestLC[3] = ((float)y7 - (float)y6)/((float)x7 - (float)x6);
;;;727    			CalPara.OffsetTestLC[3] = (float)y7 - CalPara.TestLC[3]*(float)x7;
;;;728    			CalPara.TestLC[4] = ((float)y8 - (float)y7)/((float)x8 - (float)x7);
;;;729    			CalPara.OffsetTestLC[4] = (float)y8 - CalPara.TestLC[4]*(float)x8;
;;;730    				
;;;731    			Flag_DAC_OFF =0;
;;;732    			calflag = 0;
;;;733    			Off_GPOI_ResetSet();
;;;734    		}else if(range == 9){//电源电流1
;;;735    			Contr_Voltage = 3500;
;;;736    			Contr_Current = 4000;
;;;737    			calflag = 1;
;;;738    			OnOff_GPOI_ResetSet(0,1);
;;;739    		}else if(range == 10){//电源电流2
;;;740    			
;;;741    			x1 = data;
;;;742    			y1 = Contr_Current;
;;;743    			x3 = Imon_POWE_value;
;;;744    			y3 = data;
;;;745    			Contr_Voltage = 3500;
;;;746    			Contr_Current = 14000;
;;;747    		}else if(range == 11){//电源电流3
;;;748    			
;;;749    			x2 = data;
;;;750    			y2 = Contr_Current;
;;;751    			x4 = Imon_POWE_value;
;;;752    			y4 = data;
;;;753    			
;;;754    			CalPara.SetPC[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;755    			CalPara.OffsetPC[0] = (float)y2 - CalPara.SetPC[0]*(float)x2;
;;;756    			
;;;757    			CalPara.TestPC[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;758    			CalPara.OffsetTestPC[0] = (float)y4 - CalPara.TestPC[0]*(float)x4;
;;;759    			
;;;760    			Flag_DAC_OFF=0;
;;;761    			calflag = 0;
;;;762    			Off_GPOI_ResetSet();
;;;763    		}
;;;764    	}else if(mode == 2){
00003e  2802              CMP      r0,#2
000040  d076              BEQ      |L1.304|
000042  e247              B        |L1.1236|
                  |L1.68|
000044  48f4              LDR      r0,|L1.1048|
000046  b1e9              CBZ      r1,|L1.132|
000048  2901              CMP      r1,#1                 ;534
00004a  d01e              BEQ      |L1.138|
00004c  f04f0b0a          MOV      r11,#0xa              ;547
000050  2902              CMP      r1,#2                 ;543
000052  d03e              BEQ      |L1.210|
000054  2903              CMP      r1,#3                 ;548
000056  d044              BEQ      |L1.226|
000058  f2413088          MOV      r0,#0x1388            ;560
00005c  2904              CMP      r1,#4                 ;557
00005e  d06a              BEQ      |L1.310|
000060  2905              CMP      r1,#5                 ;562
000062  d077              BEQ      |L1.340|
000064  2906              CMP      r1,#6                 ;569
000066  d06e              BEQ      |L1.326|
000068  48ec              LDR      r0,|L1.1052|
00006a  2907              CMP      r1,#7                 ;584
00006c  d06c              BEQ      |L1.328|
00006e  2908              CMP      r1,#8                 ;591
000070  d06b              BEQ      |L1.330|
000072  2909              CMP      r1,#9                 ;599
000074  d06a              BEQ      |L1.332|
000076  290a              CMP      r1,#0xa               ;608
000078  d069              BEQ      |L1.334|
00007a  290b              CMP      r1,#0xb               ;615
00007c  d068              BEQ      |L1.336|
00007e  290c              CMP      r1,#0xc               ;623
000080  d067              BEQ      |L1.338|
000082  e227              B        |L1.1236|
                  |L1.132|
000084  7037              STRB     r7,[r6,#0]            ;530
000086  61d3              STR      r3,[r2,#0x1c]         ;531  ; Run_Control
000088  e390              B        |L1.1964|
                  |L1.138|
00008a  8800              LDRH     r0,[r0,#0]            ;536  ; Vmon_Load_value
00008c  ee015a10          VMOV     s2,r5                 ;538
000090  eeb80a40          VCVT.F32.U32 s0,s0                 ;538
000094  eef80a60          VCVT.F32.U32 s1,s1                 ;538
000098  eeb81a41          VCVT.F32.U32 s2,s2                 ;538
00009c  e9c40507          STRD     r0,r5,[r4,#0x1c]      ;536
0000a0  ee311a40          VSUB.F32 s2,s2,s0              ;538
0000a4  ee000a10          VMOV     s0,r0                 ;538
0000a8  eeb80a40          VCVT.F32.U32 s0,s0                 ;538
0000ac  ee300a60          VSUB.F32 s0,s0,s1              ;538
0000b0  eec10a00          VDIV.F32 s1,s2,s0              ;538
0000b4  ee000a10          VMOV     s0,r0                 ;539
0000b8  eeb81a40          VCVT.F32.U32 s2,s0                 ;539
0000bc  ee005a10          VMOV     s0,r5                 ;539
0000c0  eeb80a40          VCVT.F32.U32 s0,s0                 ;539
0000c4  edca0a00          VSTR     s1,[r10,#0]           ;538
0000c8  ee000ac1          VMLS.F32 s0,s1,s2              ;539
0000cc  ed8a0a04          VSTR     s0,[r10,#0x10]        ;539
0000d0  e391              B        |L1.2038|
                  |L1.210|
0000d2  7037              STRB     r7,[r6,#0]            ;544
0000d4  61d7              STR      r7,[r2,#0x1c]         ;545  ; Run_Control
0000d6  8800              LDRH     r0,[r0,#0]            ;546  ; Vmon_Load_value
0000d8  6160              STR      r0,[r4,#0x14]         ;547  ; x1
0000da  fbb5f0fb          UDIV     r0,r5,r11             ;547
0000de  61a0              STR      r0,[r4,#0x18]         ;547  ; y1
0000e0  e1f8              B        |L1.1236|
                  |L1.226|
0000e2  8800              LDRH     r0,[r0,#0]            ;550  ; Vmon_Load_value
0000e4  fbb5f1fb          UDIV     r1,r5,r11             ;551
0000e8  ee011a10          VMOV     s2,r1                 ;552
0000ec  eeb80a40          VCVT.F32.U32 s0,s0                 ;552
0000f0  eef80a60          VCVT.F32.U32 s1,s1                 ;552
0000f4  eeb81a41          VCVT.F32.U32 s2,s2                 ;552
0000f8  e9c40107          STRD     r0,r1,[r4,#0x1c]      ;552
0000fc  ee311a40          VSUB.F32 s2,s2,s0              ;552
000100  ee000a10          VMOV     s0,r0                 ;552
000104  eeb80a40          VCVT.F32.U32 s0,s0                 ;552
000108  ee300a60          VSUB.F32 s0,s0,s1              ;552
00010c  eec10a00          VDIV.F32 s1,s2,s0              ;552
000110  ee000a10          VMOV     s0,r0                 ;553
000114  eeb81a40          VCVT.F32.U32 s2,s0                 ;553
000118  ee001a10          VMOV     s0,r1                 ;553
00011c  eeb80a40          VCVT.F32.U32 s0,s0                 ;553
000120  edca0a01          VSTR     s1,[r10,#4]           ;552
000124  ee000ac1          VMLS.F32 s0,s1,s2              ;553
000128  ed8a0a05          VSTR     s0,[r10,#0x14]        ;553
00012c  e363              B        |L1.2038|
                  |L1.302|
00012e  e0e2              B        |L1.758|
                  |L1.304|
000130  e31f              B        |L1.1906|
000132  e000              B        |L1.310|
000134  e00e              B        |L1.340|
                  |L1.310|
000136  7037              STRB     r7,[r6,#0]            ;558
000138  4ab9              LDR      r2,|L1.1056|
00013a  f64051ac          MOV      r1,#0xdac             ;559
00013e  8011              STRH     r1,[r2,#0]            ;559
000140  f8ae0000          STRH     r0,[lr,#0]            ;560
000144  e2ba              B        |L1.1724|
                  |L1.326|
000146  e012              B        |L1.366|
                  |L1.328|
000148  e05b              B        |L1.514|
                  |L1.330|
00014a  e060              B        |L1.526|
                  |L1.332|
00014c  e06a              B        |L1.548|
                  |L1.334|
00014e  e08e              B        |L1.622|
                  |L1.336|
000150  e09a              B        |L1.648|
                  |L1.338|
000152  e0a9              B        |L1.680|
                  |L1.340|
000154  49b2              LDR      r1,|L1.1056|
000156  6165              STR      r5,[r4,#0x14]         ;564  ; x1
000158  880a              LDRH     r2,[r1,#0]            ;564  ; Contr_Voltage
00015a  61a2              STR      r2,[r4,#0x18]         ;565  ; y1
00015c  4ab1              LDR      r2,|L1.1060|
00015e  8812              LDRH     r2,[r2,#0]            ;565  ; Vmon_POWE_value
000160  e9c42509          STRD     r2,r5,[r4,#0x24]      ;565
000164  f2427210          MOV      r2,#0x2710            ;567
000168  800a              STRH     r2,[r1,#0]            ;567
00016a  4671              MOV      r1,lr                 ;568
00016c  e2b6              B        |L1.1756|
                  |L1.366|
00016e  48ac              LDR      r0,|L1.1056|
000170  61e5              STR      r5,[r4,#0x1c]         ;571  ; x2
000172  8801              LDRH     r1,[r0,#0]            ;571  ; Contr_Voltage
000174  48ab              LDR      r0,|L1.1060|
000176  6221              STR      r1,[r4,#0x20]         ;572  ; y2
000178  8800              LDRH     r0,[r0,#0]            ;572  ; Vmon_POWE_value
00017a  ee011a10          VMOV     s2,r1                 ;575
00017e  eeb80a40          VCVT.F32.U32 s0,s0                 ;575
000182  eef80a60          VCVT.F32.U32 s1,s1                 ;575
000186  eeb81a41          VCVT.F32.U32 s2,s2                 ;575
00018a  e9c4050b          STRD     r0,r5,[r4,#0x2c]      ;572
00018e  ee311a40          VSUB.F32 s2,s2,s0              ;575
000192  ee005a10          VMOV     s0,r5                 ;575
000196  4652              MOV      r2,r10                ;575
000198  eeb80a40          VCVT.F32.U32 s0,s0                 ;575
00019c  ee300a60          VSUB.F32 s0,s0,s1              ;575
0001a0  eec10a00          VDIV.F32 s1,s2,s0              ;575
0001a4  ee005a10          VMOV     s0,r5                 ;576
0001a8  eeb81a40          VCVT.F32.U32 s2,s0                 ;576
0001ac  ee001a10          VMOV     s0,r1                 ;576
0001b0  eeb80a40          VCVT.F32.U32 s0,s0                 ;576
0001b4  edca0a02          VSTR     s1,[r10,#8]           ;575
0001b8  ee000ac1          VMLS.F32 s0,s1,s2              ;576
0001bc  eef80a62          VCVT.F32.U32 s1,s5                 ;578
0001c0  ed8a0a06          VSTR     s0,[r10,#0x18]        ;576
0001c4  ee005a10          VMOV     s0,r5                 ;578
0001c8  eeb80a40          VCVT.F32.U32 s0,s0                 ;578
0001cc  ee301a60          VSUB.F32 s2,s0,s1              ;578
0001d0  ee000a10          VMOV     s0,r0                 ;578
0001d4  eef80a42          VCVT.F32.U32 s1,s4                 ;578
0001d8  eeb80a40          VCVT.F32.U32 s0,s0                 ;578
0001dc  ee300a60          VSUB.F32 s0,s0,s1              ;578
0001e0  eec10a00          VDIV.F32 s1,s2,s0              ;578
0001e4  ee000a10          VMOV     s0,r0                 ;579
0001e8  eeb81a40          VCVT.F32.U32 s2,s0                 ;579
0001ec  ee005a10          VMOV     s0,r5                 ;579
0001f0  eeb80a40          VCVT.F32.U32 s0,s0                 ;579
0001f4  edc20a03          VSTR     s1,[r2,#0xc]          ;578
0001f8  ee000ac1          VMLS.F32 s0,s1,s2              ;579
0001fc  ed8a0a07          VSTR     s0,[r10,#0x1c]        ;579
000200  e24d              B        |L1.1694|
                  |L1.514|
000202  6197              STR      r7,[r2,#0x18]         ;585  ; Run_Control
000204  61d3              STR      r3,[r2,#0x1c]         ;586  ; Run_Control
000206  2102              MOVS     r1,#2                 ;587
000208  f7fffffe          BL       GPIO_ResetBits
00020c  e034              B        |L1.632|
                  |L1.526|
00020e  6197              STR      r7,[r2,#0x18]         ;592  ; Run_Control
000210  61d3              STR      r3,[r2,#0x1c]         ;593  ; Run_Control
000212  2102              MOVS     r1,#2                 ;594
000214  f7fffffe          BL       GPIO_ResetBits
000218  6165              STR      r5,[r4,#0x14]         ;596  ; x1
00021a  f8b91000          LDRH     r1,[r9,#0]            ;596  ; Contr_Laod
00021e  4648              MOV      r0,r9                 ;596
000220  61a1              STR      r1,[r4,#0x18]         ;597  ; y1
000222  e177              B        |L1.1300|
                  |L1.548|
000224  61e5              STR      r5,[r4,#0x1c]         ;601  ; x2
000226  f8b90000          LDRH     r0,[r9,#0]            ;601  ; Contr_Laod
00022a  eeb80a40          VCVT.F32.U32 s0,s0                 ;602
00022e  ee010a10          VMOV     s2,r0                 ;602
000232  eef80a60          VCVT.F32.U32 s1,s1                 ;602
000236  6220              STR      r0,[r4,#0x20]         ;602  ; y2
000238  eeb81a41          VCVT.F32.U32 s2,s2                 ;602
00023c  ee311a40          VSUB.F32 s2,s2,s0              ;602
000240  ee005a10          VMOV     s0,r5                 ;602
000244  eeb80a40          VCVT.F32.U32 s0,s0                 ;602
000248  ee300a60          VSUB.F32 s0,s0,s1              ;602
00024c  eec10a00          VDIV.F32 s1,s2,s0              ;602
000250  ee005a10          VMOV     s0,r5                 ;603
000254  eeb81a40          VCVT.F32.U32 s2,s0                 ;603
000258  ee000a10          VMOV     s0,r0                 ;603
00025c  eeb80a40          VCVT.F32.U32 s0,s0                 ;603
000260  edca0a0d          VSTR     s1,[r10,#0x34]        ;602
000264  ee000ac1          VMLS.F32 s0,s1,s2              ;603
000268  ed8a0a1b          VSTR     s0,[r10,#0x6c]        ;603
00026c  e217              B        |L1.1694|
                  |L1.622|
00026e  6197              STR      r7,[r2,#0x18]         ;609  ; Run_Control
000270  61d7              STR      r7,[r2,#0x1c]         ;610  ; Run_Control
000272  2102              MOVS     r1,#2                 ;611
000274  f7fffffe          BL       GPIO_SetBits
                  |L1.632|
000278  7037              STRB     r7,[r6,#0]            ;588
00027a  f44f707a          MOV      r0,#0x3e8             ;589
00027e  f8a90000          STRH     r0,[r9,#0]            ;589
                  |L1.642|
000282  2101              MOVS     r1,#1                 ;590
000284  2002              MOVS     r0,#2                 ;590
000286  e123              B        |L1.1232|
                  |L1.648|
000288  6197              STR      r7,[r2,#0x18]         ;616  ; Run_Control
00028a  61d7              STR      r7,[r2,#0x1c]         ;617  ; Run_Control
00028c  2102              MOVS     r1,#2                 ;618
00028e  f7fffffe          BL       GPIO_SetBits
000292  fbb5f0fb          UDIV     r0,r5,r11             ;619
000296  6160              STR      r0,[r4,#0x14]         ;620  ; x1
000298  f8b91000          LDRH     r1,[r9,#0]            ;620  ; Contr_Laod
00029c  61a1              STR      r1,[r4,#0x18]         ;621  ; y1
00029e  f6446120          MOV      r1,#0x4e20            ;621
0002a2  f8a91000          STRH     r1,[r9,#0]            ;621
0002a6  e7ec              B        |L1.642|
                  |L1.680|
0002a8  fbb5f0fb          UDIV     r0,r5,r11             ;624
0002ac  61e0              STR      r0,[r4,#0x1c]         ;625  ; x2
0002ae  f8b91000          LDRH     r1,[r9,#0]            ;625  ; Contr_Laod
0002b2  eeb80a40          VCVT.F32.U32 s0,s0                 ;626
0002b6  ee011a10          VMOV     s2,r1                 ;626
0002ba  eef80a60          VCVT.F32.U32 s1,s1                 ;626
0002be  6221              STR      r1,[r4,#0x20]         ;626  ; y2
0002c0  eeb81a41          VCVT.F32.U32 s2,s2                 ;626
0002c4  ee311a40          VSUB.F32 s2,s2,s0              ;626
0002c8  ee000a10          VMOV     s0,r0                 ;626
0002cc  eeb80a40          VCVT.F32.U32 s0,s0                 ;626
0002d0  ee300a60          VSUB.F32 s0,s0,s1              ;626
0002d4  eec10a00          VDIV.F32 s1,s2,s0              ;626
0002d8  ee000a10          VMOV     s0,r0                 ;627
0002dc  eeb81a40          VCVT.F32.U32 s2,s0                 ;627
0002e0  ee001a10          VMOV     s0,r1                 ;627
0002e4  eeb80a40          VCVT.F32.U32 s0,s0                 ;627
0002e8  edca0a0e          VSTR     s1,[r10,#0x38]        ;626
0002ec  ee000ac1          VMLS.F32 s0,s1,s2              ;627
0002f0  ed8a0a1c          VSTR     s0,[r10,#0x70]        ;627
0002f4  e1d3              B        |L1.1694|
                  |L1.758|
0002f6  b321              CBZ      r1,|L1.834|
0002f8  f8dfb12c          LDR      r11,|L1.1064|
0002fc  2901              CMP      r1,#1                 ;641
0002fe  d022              BEQ      |L1.838|
000300  2902              CMP      r1,#2                 ;649
000302  d02b              BEQ      |L1.860|
000304  483f              LDR      r0,|L1.1028|
000306  2903              CMP      r1,#3                 ;657
000308  edd03a0e          VLDR     s7,[r0,#0x38]         ;532
00030c  ed903a0d          VLDR     s6,[r0,#0x34]         ;532
000310  edd01a08          VLDR     s3,[r0,#0x20]         ;532
000314  ed901a07          VLDR     s2,[r0,#0x1c]         ;532
000318  d02e              BEQ      |L1.888|
00031a  f44f6000          MOV      r0,#0x800             ;679
00031e  2904              CMP      r1,#4                 ;677
000320  d068              BEQ      |L1.1012|
000322  2905              CMP      r1,#5                 ;683
000324  d067              BEQ      |L1.1014|
000326  2906              CMP      r1,#6                 ;692
000328  d066              BEQ      |L1.1016|
00032a  2907              CMP      r1,#7                 ;701
00032c  d065              BEQ      |L1.1018|
00032e  2908              CMP      r1,#8                 ;710
000330  d07e              BEQ      |L1.1072|
000332  2909              CMP      r1,#9                 ;734
000334  d07d              BEQ      |L1.1074|
000336  483d              LDR      r0,|L1.1068|
000338  290a              CMP      r1,#0xa               ;739
00033a  d07b              BEQ      |L1.1076|
00033c  290b              CMP      r1,#0xb               ;747
00033e  d07a              BEQ      |L1.1078|
000340  e322              B        |L1.2440|
                  |L1.834|
000342  6213              STR      r3,[r2,#0x20]         ;636  ; Run_Control
000344  e0be              B        |L1.1220|
                  |L1.838|
000346  6213              STR      r3,[r2,#0x20]         ;643  ; Run_Control
000348  6165              STR      r5,[r4,#0x14]         ;645  ; x1
00034a  f8b91000          LDRH     r1,[r9,#0]            ;645  ; Contr_Laod
00034e  4648              MOV      r0,r9                 ;645
000350  61a1              STR      r1,[r4,#0x18]         ;646  ; y1
000352  f8bb1000          LDRH     r1,[r11,#0]           ;646  ; Imon_Load_value
000356  e9c4150b          STRD     r1,r5,[r4,#0x2c]      ;646
00035a  e0db              B        |L1.1300|
                  |L1.860|
00035c  6213              STR      r3,[r2,#0x20]         ;651  ; Run_Control
00035e  61e5              STR      r5,[r4,#0x1c]         ;653  ; x2
000360  f8b91000          LDRH     r1,[r9,#0]            ;653  ; Contr_Laod
000364  4648              MOV      r0,r9                 ;653
000366  6221              STR      r1,[r4,#0x20]         ;654  ; y2
000368  f8bb1000          LDRH     r1,[r11,#0]           ;654  ; Imon_Load_value
00036c  e9c4150d          STRD     r1,r5,[r4,#0x34]      ;654
000370  f64e2160          MOV      r1,#0xea60            ;656
                  |L1.884|
000374  8001              STRH     r1,[r0,#0]            ;648
000376  e307              B        |L1.2440|
                  |L1.888|
000378  6265              STR      r5,[r4,#0x24]         ;660  ; x3
00037a  f8b92000          LDRH     r2,[r9,#0]            ;660  ; Contr_Laod
00037e  62a2              STR      r2,[r4,#0x28]         ;661  ; y3
000380  f8bb1000          LDRH     r1,[r11,#0]           ;661  ; Imon_Load_value
000384  eeb82a61          VCVT.F32.U32 s4,s3                 ;664
000388  eeb80a40          VCVT.F32.U32 s0,s0                 ;664
00038c  eef80a60          VCVT.F32.U32 s1,s1                 ;664
000390  e9c4150f          STRD     r1,r5,[r4,#0x3c]      ;664
000394  ee322a40          VSUB.F32 s4,s4,s0              ;664
000398  eeb80a41          VCVT.F32.U32 s0,s2                 ;664
00039c  4650              MOV      r0,r10                ;664
00039e  ee700a60          VSUB.F32 s1,s0,s1              ;664
0003a2  ee820a20          VDIV.F32 s0,s4,s1              ;664
0003a6  eeb82a41          VCVT.F32.U32 s4,s2                 ;665
0003aa  eef80a61          VCVT.F32.U32 s1,s3                 ;665
0003ae  ed8a0a08          VSTR     s0,[r10,#0x20]        ;664
0003b2  ee400a42          VMLS.F32 s1,s0,s4              ;665
0003b6  ee002a10          VMOV     s0,r2                 ;666
0003ba  eeb80a40          VCVT.F32.U32 s0,s0                 ;666
0003be  edca0a16          VSTR     s1,[r10,#0x58]        ;665
0003c2  eef80a61          VCVT.F32.U32 s1,s3                 ;666
0003c6  ee701a60          VSUB.F32 s3,s0,s1              ;666
0003ca  ee005a10          VMOV     s0,r5                 ;666
0003ce  eef80a41          VCVT.F32.U32 s1,s2                 ;666
0003d2  eeb80a40          VCVT.F32.U32 s0,s0                 ;666
0003d6  ee300a60          VSUB.F32 s0,s0,s1              ;666
0003da  eec10a80          VDIV.F32 s1,s3,s0              ;666
0003de  ee005a10          VMOV     s0,r5                 ;667
0003e2  eeb81a40          VCVT.F32.U32 s2,s0                 ;667
0003e6  ee002a10          VMOV     s0,r2                 ;667
0003ea  eeb80a40          VCVT.F32.U32 s0,s0                 ;667
0003ee  edca0a09          VSTR     s1,[r10,#0x24]        ;666
0003f2  e021              B        |L1.1080|
                  |L1.1012|
0003f4  e061              B        |L1.1210|
                  |L1.1014|
0003f6  e06e              B        |L1.1238|
                  |L1.1016|
0003f8  e07e              B        |L1.1272|
                  |L1.1018|
0003fa  e08e              B        |L1.1306|
                  |L1.1020|
                          DCD      calflag
                  |L1.1024|
                          DCD      Run_Control
                  |L1.1028|
                          DCD      ||.data||
                  |L1.1032|
                          DCD      CalPara
                  |L1.1036|
                          DCD      flagB
                  |L1.1040|
                          DCD      Contr_Current
                  |L1.1044|
                          DCD      Contr_Laod
                  |L1.1048|
                          DCD      Vmon_Load_value
                  |L1.1052|
                          DCD      0x40020400
                  |L1.1056|
                          DCD      Contr_Voltage
                  |L1.1060|
                          DCD      Vmon_POWE_value
                  |L1.1064|
                          DCD      Imon_Load_value
                  |L1.1068|
                          DCD      Imon_POWE_value
                  |L1.1072|
000430  e084              B        |L1.1340|
                  |L1.1074|
000432  e13a              B        |L1.1706|
                  |L1.1076|
000434  e145              B        |L1.1730|
                  |L1.1078|
000436  e153              B        |L1.1760|
                  |L1.1080|
000438  ee000ac1          VMLS.F32 s0,s1,s2              ;667
00043c  eef80a63          VCVT.F32.U32 s1,s7                 ;669
000440  eeb81a43          VCVT.F32.U32 s2,s6                 ;669
000444  ed800a17          VSTR     s0,[r0,#0x5c]         ;667
000448  ed940a0c          VLDR     s0,[r4,#0x30]         ;669
00044c  eeb80a40          VCVT.F32.U32 s0,s0                 ;669
000450  ee700ac0          VSUB.F32 s1,s1,s0              ;669
000454  ed940a0b          VLDR     s0,[r4,#0x2c]         ;669
000458  eeb80a40          VCVT.F32.U32 s0,s0                 ;669
00045c  ee311a40          VSUB.F32 s2,s2,s0              ;669
000460  ee800a81          VDIV.F32 s0,s1,s2              ;669
000464  eeb81a43          VCVT.F32.U32 s2,s6                 ;670
000468  eef80a63          VCVT.F32.U32 s1,s7                 ;670
00046c  ed800a0f          VSTR     s0,[r0,#0x3c]         ;669
000470  ee400a41          VMLS.F32 s1,s0,s2              ;670
000474  ee005a10          VMOV     s0,r5                 ;671
000478  eeb80a40          VCVT.F32.U32 s0,s0                 ;671
00047c  edc00a1d          VSTR     s1,[r0,#0x74]         ;670
000480  eef80a63          VCVT.F32.U32 s1,s7                 ;671
000484  ee301a60          VSUB.F32 s2,s0,s1              ;671
000488  ee001a10          VMOV     s0,r1                 ;671
00048c  eef80a43          VCVT.F32.U32 s1,s6                 ;671
000490  eeb80a40          VCVT.F32.U32 s0,s0                 ;671
000494  ee300a60          VSUB.F32 s0,s0,s1              ;671
000498  eec10a00          VDIV.F32 s1,s2,s0              ;671
00049c  ee001a10          VMOV     s0,r1                 ;672
0004a0  eeb81a40          VCVT.F32.U32 s2,s0                 ;672
0004a4  ee005a10          VMOV     s0,r5                 ;672
0004a8  eeb80a40          VCVT.F32.U32 s0,s0                 ;672
0004ac  edc00a10          VSTR     s1,[r0,#0x40]         ;671
0004b0  ee000ac1          VMLS.F32 s0,s1,s2              ;672
0004b4  ed8a0a1e          VSTR     s0,[r10,#0x78]        ;672
0004b8  e0f1              B        |L1.1694|
                  |L1.1210|
0004ba  6217              STR      r7,[r2,#0x20]         ;678  ; Run_Control
0004bc  4601              MOV      r1,r0                 ;679
0004be  48fe              LDR      r0,|L1.2232|
0004c0  f7fffffe          BL       GPIO_ResetBits
                  |L1.1220|
0004c4  f2417070          MOV      r0,#0x1770            ;637
0004c8  f8a90000          STRH     r0,[r9,#0]            ;637
0004cc  7037              STRB     r7,[r6,#0]            ;638
0004ce  e6d8              B        |L1.642|
                  |L1.1232|
0004d0  f7fffffe          BL       OnOff_GPOI_ResetSet
                  |L1.1236|
0004d4  e258              B        |L1.2440|
                  |L1.1238|
0004d6  6217              STR      r7,[r2,#0x20]         ;685  ; Run_Control
0004d8  4601              MOV      r1,r0                 ;686
0004da  48f7              LDR      r0,|L1.2232|
0004dc  f7fffffe          BL       GPIO_ResetBits
0004e0  6165              STR      r5,[r4,#0x14]         ;688  ; x1
0004e2  f8b91000          LDRH     r1,[r9,#0]            ;688  ; Contr_Laod
0004e6  4648              MOV      r0,r9                 ;688
0004e8  61a1              STR      r1,[r4,#0x18]         ;689  ; y1
0004ea  f8bb1000          LDRH     r1,[r11,#0]           ;689  ; Imon_Load_value
0004ee  e9c4150d          STRD     r1,r5,[r4,#0x34]      ;689
0004f2  f64261e0          MOV      r1,#0x2ee0            ;691
0004f6  e73d              B        |L1.884|
                  |L1.1272|
0004f8  6217              STR      r7,[r2,#0x20]         ;694  ; Run_Control
0004fa  4601              MOV      r1,r0                 ;695
0004fc  48ee              LDR      r0,|L1.2232|
0004fe  f7fffffe          BL       GPIO_ResetBits
000502  61e5              STR      r5,[r4,#0x1c]         ;697  ; x2
000504  f8b91000          LDRH     r1,[r9,#0]            ;697  ; Contr_Laod
000508  4648              MOV      r0,r9                 ;697
00050a  6221              STR      r1,[r4,#0x20]         ;698  ; y2
00050c  f8bb1000          LDRH     r1,[r11,#0]           ;698  ; Imon_Load_value
000510  e9c4150f          STRD     r1,r5,[r4,#0x3c]      ;698
                  |L1.1300|
000514  f6446120          MOV      r1,#0x4e20            ;597
000518  e72c              B        |L1.884|
                  |L1.1306|
00051a  6217              STR      r7,[r2,#0x20]         ;703  ; Run_Control
00051c  4601              MOV      r1,r0                 ;704
00051e  48e6              LDR      r0,|L1.2232|
000520  f7fffffe          BL       GPIO_ResetBits
000524  6265              STR      r5,[r4,#0x24]         ;706  ; x3
000526  f8b91000          LDRH     r1,[r9,#0]            ;706  ; Contr_Laod
00052a  4648              MOV      r0,r9                 ;706
00052c  62a1              STR      r1,[r4,#0x28]         ;707  ; y3
00052e  f8bb1000          LDRH     r1,[r11,#0]           ;707  ; Imon_Load_value
000532  e9c41511          STRD     r1,r5,[r4,#0x44]      ;707
000536  f6494140          MOV      r1,#0x9c40            ;709
00053a  e71b              B        |L1.884|
                  |L1.1340|
00053c  62e5              STR      r5,[r4,#0x2c]         ;713  ; x4
00053e  f8b92000          LDRH     r2,[r9,#0]            ;713  ; Contr_Laod
000542  6322              STR      r2,[r4,#0x30]         ;714  ; y4
000544  f8bb1000          LDRH     r1,[r11,#0]           ;714  ; Imon_Load_value
000548  eeb84a61          VCVT.F32.U32 s8,s3                 ;717
00054c  eeb80a40          VCVT.F32.U32 s0,s0                 ;717
000550  eef80a60          VCVT.F32.U32 s1,s1                 ;717
000554  e9c41513          STRD     r1,r5,[r4,#0x4c]      ;717
000558  ee344a40          VSUB.F32 s8,s8,s0              ;717
00055c  eeb80a41          VCVT.F32.U32 s0,s2                 ;717
000560  4650              MOV      r0,r10                ;717
000562  ee700a60          VSUB.F32 s1,s0,s1              ;717
000566  ee840a20          VDIV.F32 s0,s8,s1              ;717
00056a  eeb84a41          VCVT.F32.U32 s8,s2                 ;718
00056e  eef80a61          VCVT.F32.U32 s1,s3                 ;718
000572  eeb81a41          VCVT.F32.U32 s2,s2                 ;719
000576  ed8a0a0a          VSTR     s0,[r10,#0x28]        ;717
00057a  ee400a44          VMLS.F32 s1,s0,s8              ;718
00057e  eeb80a62          VCVT.F32.U32 s0,s5                 ;719
000582  edca0a18          VSTR     s1,[r10,#0x60]        ;718
000586  eef80a61          VCVT.F32.U32 s1,s3                 ;719
00058a  ee700a60          VSUB.F32 s1,s0,s1              ;719
00058e  eeb80a42          VCVT.F32.U32 s0,s4                 ;719
000592  ee301a41          VSUB.F32 s2,s0,s2              ;719
000596  ee800a81          VDIV.F32 s0,s1,s2              ;719
00059a  eeb81a42          VCVT.F32.U32 s2,s4                 ;720
00059e  eef80a62          VCVT.F32.U32 s1,s5                 ;720
0005a2  ed8a0a0b          VSTR     s0,[r10,#0x2c]        ;719
0005a6  ee400a41          VMLS.F32 s1,s0,s2              ;720
0005aa  ee002a10          VMOV     s0,r2                 ;721
0005ae  eeb80a40          VCVT.F32.U32 s0,s0                 ;721
0005b2  edc00a19          VSTR     s1,[r0,#0x64]         ;720
0005b6  eef80a62          VCVT.F32.U32 s1,s5                 ;721
0005ba  ee301a60          VSUB.F32 s2,s0,s1              ;721
0005be  ee005a10          VMOV     s0,r5                 ;721
0005c2  eef80a42          VCVT.F32.U32 s1,s4                 ;721
0005c6  eeb82a43          VCVT.F32.U32 s4,s6                 ;724
0005ca  eeb80a40          VCVT.F32.U32 s0,s0                 ;721
0005ce  ee300a60          VSUB.F32 s0,s0,s1              ;721
0005d2  eec10a00          VDIV.F32 s1,s2,s0              ;721
0005d6  ee005a10          VMOV     s0,r5                 ;722
0005da  eeb81a40          VCVT.F32.U32 s2,s0                 ;722
0005de  ee002a10          VMOV     s0,r2                 ;722
0005e2  eeb80a40          VCVT.F32.U32 s0,s0                 ;722
0005e6  edc00a0c          VSTR     s1,[r0,#0x30]         ;721
0005ea  ee000ac1          VMLS.F32 s0,s1,s2              ;722
0005ee  eeb81a63          VCVT.F32.U32 s2,s7                 ;724
0005f2  ed800a1a          VSTR     s0,[r0,#0x68]         ;722
0005f6  ed940a10          VLDR     s0,[r4,#0x40]         ;724
0005fa  eef80a40          VCVT.F32.U32 s1,s0                 ;724
0005fe  ee701ac1          VSUB.F32 s3,s1,s2              ;724
000602  ed941a0f          VLDR     s2,[r4,#0x3c]         ;724
000606  eef80a41          VCVT.F32.U32 s1,s2                 ;724
00060a  ee302ac2          VSUB.F32 s4,s1,s4              ;724
00060e  eec10a82          VDIV.F32 s1,s3,s4              ;724
000612  eeb82a41          VCVT.F32.U32 s4,s2                 ;725
000616  eef81a40          VCVT.F32.U32 s3,s0                 ;725
00061a  eeb80a40          VCVT.F32.U32 s0,s0                 ;726
00061e  eeb81a41          VCVT.F32.U32 s2,s2                 ;726
000622  edc00a11          VSTR     s1,[r0,#0x44]         ;724
000626  ee401ac2          VMLS.F32 s3,s1,s4              ;725
00062a  edc01a1f          VSTR     s3,[r0,#0x7c]         ;725
00062e  edd40a12          VLDR     s1,[r4,#0x48]         ;726
000632  eef81a60          VCVT.F32.U32 s3,s1                 ;726
000636  ee711ac0          VSUB.F32 s3,s3,s0              ;726
00063a  ed940a11          VLDR     s0,[r4,#0x44]         ;726
00063e  eeb82a40          VCVT.F32.U32 s4,s0                 ;726
000642  ee322a41          VSUB.F32 s4,s4,s2              ;726
000646  ee811a82          VDIV.F32 s2,s3,s4              ;726
00064a  eeb82a40          VCVT.F32.U32 s4,s0                 ;727
00064e  eef81a60          VCVT.F32.U32 s3,s1                 ;727
000652  eef80a60          VCVT.F32.U32 s1,s1                 ;728
000656  ed801a12          VSTR     s2,[r0,#0x48]         ;726
00065a  ee411a42          VMLS.F32 s3,s2,s4              ;727
00065e  ee015a10          VMOV     s2,r5                 ;728
000662  eeb81a41          VCVT.F32.U32 s2,s2                 ;728
000666  edc01a20          VSTR     s3,[r0,#0x80]         ;727
00066a  ee311a60          VSUB.F32 s2,s2,s1              ;728
00066e  ee001a90          VMOV     s1,r1                 ;728
000672  eeb80a40          VCVT.F32.U32 s0,s0                 ;728
000676  eef80a60          VCVT.F32.U32 s1,s1                 ;728
00067a  ee300ac0          VSUB.F32 s0,s1,s0              ;728
00067e  eec10a00          VDIV.F32 s1,s2,s0              ;728
000682  ee001a10          VMOV     s0,r1                 ;729
000686  eeb81a40          VCVT.F32.U32 s2,s0                 ;729
00068a  ee005a10          VMOV     s0,r5                 ;729
00068e  eeb80a40          VCVT.F32.U32 s0,s0                 ;729
000692  edc00a13          VSTR     s1,[r0,#0x4c]         ;728
000696  ee000ac1          VMLS.F32 s0,s1,s2              ;729
00069a  ed8a0a21          VSTR     s0,[r10,#0x84]        ;729
                  |L1.1694|
00069e  f8c8c000          STR      r12,[r8,#0]           ;675  ; flagB
0006a2  7033              STRB     r3,[r6,#0]            ;675
0006a4  f7fffffe          BL       Off_GPOI_ResetSet
0006a8  e16e              B        |L1.2440|
                  |L1.1706|
0006aa  4984              LDR      r1,|L1.2236|
0006ac  f64050ac          MOV      r0,#0xdac             ;735
0006b0  8008              STRH     r0,[r1,#0]            ;735
0006b2  f44f617a          MOV      r1,#0xfa0             ;736
0006b6  f8ae1000          STRH     r1,[lr,#0]            ;736
0006ba  7037              STRB     r7,[r6,#0]            ;737
                  |L1.1724|
0006bc  2101              MOVS     r1,#1                 ;561
0006be  2000              MOVS     r0,#0                 ;561
0006c0  e706              B        |L1.1232|
                  |L1.1730|
0006c2  6165              STR      r5,[r4,#0x14]         ;742  ; x1
0006c4  f8be2000          LDRH     r2,[lr,#0]            ;742  ; Contr_Current
0006c8  4671              MOV      r1,lr                 ;742
0006ca  61a2              STR      r2,[r4,#0x18]         ;743  ; y1
0006cc  8800              LDRH     r0,[r0,#0]            ;743  ; Imon_POWE_value
0006ce  e9c40509          STRD     r0,r5,[r4,#0x24]      ;743
0006d2  4a7a              LDR      r2,|L1.2236|
0006d4  f64050ac          MOV      r0,#0xdac             ;745
0006d8  8010              STRH     r0,[r2,#0]            ;745
0006da  0080              LSLS     r0,r0,#2              ;746
                  |L1.1756|
0006dc  8008              STRH     r0,[r1,#0]            ;746
0006de  e153              B        |L1.2440|
                  |L1.1760|
0006e0  61e5              STR      r5,[r4,#0x1c]         ;750  ; x2
0006e2  f8be1000          LDRH     r1,[lr,#0]            ;750  ; Contr_Current
0006e6  6221              STR      r1,[r4,#0x20]         ;751  ; y2
0006e8  8800              LDRH     r0,[r0,#0]            ;751  ; Imon_POWE_value
0006ea  ee011a10          VMOV     s2,r1                 ;754
0006ee  eeb80a40          VCVT.F32.U32 s0,s0                 ;754
0006f2  eef80a60          VCVT.F32.U32 s1,s1                 ;754
0006f6  eeb81a41          VCVT.F32.U32 s2,s2                 ;754
0006fa  e9c4050b          STRD     r0,r5,[r4,#0x2c]      ;751
0006fe  ee311a40          VSUB.F32 s2,s2,s0              ;754
000702  ee005a10          VMOV     s0,r5                 ;754
000706  4652              MOV      r2,r10                ;754
000708  eeb80a40          VCVT.F32.U32 s0,s0                 ;754
00070c  ee300a60          VSUB.F32 s0,s0,s1              ;754
000710  eec10a00          VDIV.F32 s1,s2,s0              ;754
000714  ee005a10          VMOV     s0,r5                 ;755
000718  eeb81a40          VCVT.F32.U32 s2,s0                 ;755
00071c  ee001a10          VMOV     s0,r1                 ;755
000720  eeb80a40          VCVT.F32.U32 s0,s0                 ;755
000724  edca0a14          VSTR     s1,[r10,#0x50]        ;754
000728  ee000ac1          VMLS.F32 s0,s1,s2              ;755
00072c  eef80a62          VCVT.F32.U32 s1,s5                 ;757
000730  ed8a0a22          VSTR     s0,[r10,#0x88]        ;755
000734  ee005a10          VMOV     s0,r5                 ;757
000738  eeb80a40          VCVT.F32.U32 s0,s0                 ;757
00073c  ee301a60          VSUB.F32 s2,s0,s1              ;757
000740  ee000a10          VMOV     s0,r0                 ;757
000744  eef80a42          VCVT.F32.U32 s1,s4                 ;757
000748  eeb80a40          VCVT.F32.U32 s0,s0                 ;757
00074c  ee300a60          VSUB.F32 s0,s0,s1              ;757
000750  eec10a00          VDIV.F32 s1,s2,s0              ;757
000754  ee000a10          VMOV     s0,r0                 ;758
000758  eeb81a40          VCVT.F32.U32 s2,s0                 ;758
00075c  ee005a10          VMOV     s0,r5                 ;758
000760  eeb80a40          VCVT.F32.U32 s0,s0                 ;758
000764  edc20a15          VSTR     s1,[r2,#0x54]         ;757
000768  ee000ac1          VMLS.F32 s0,s1,s2              ;758
00076c  ed8a0a23          VSTR     s0,[r10,#0x8c]        ;758
000770  e795              B        |L1.1694|
                  |L1.1906|
;;;765    		if(range == 0)//内阻低档位低段
;;;766    		{
;;;767    			RCONT_SW = 0;
;;;768    			calflag = 1;
;;;769    			x1 = Rmon_value;
000772  4853              LDR      r0,|L1.2240|
000774  b1c1              CBZ      r1,|L1.1960|
;;;770    			y1 = data;
;;;771    			
;;;772    //			Modify_A_READ=0;
;;;773    //			Modify_A_ACT=0;
;;;774    //			Modify_A_READ = Rmon_value;//测量电阻值
;;;775    //			Modify_A_ACT = data;//读取低段
;;;776    		}else if (range == 1)//内阻低档位高段
000776  2901              CMP      r1,#1
000778  d01a              BEQ      |L1.1968|
;;;777    		{
;;;778    
;;;779    			x2 = Rmon_value;
;;;780    			y2 = data;
;;;781    			CalPara.TestR[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;782    			CalPara.OffsetR[0] = (float)y2 - CalPara.TestR[0]*(float)x2;
;;;783    				//参数写进FLASH
;;;784    			Flag_DAC_OFF=0;
;;;785    			calflag = 0;
;;;786    		}else if(range == 2)//内阻高档位低段
00077a  2902              CMP      r1,#2
00077c  d06f              BEQ      |L1.2142|
;;;787    		{
;;;788    			RCONT_SW = 1;
;;;789    			calflag = 1;
;;;790    			x1 = Rmon_value;
;;;791    			y1 = data;
;;;792    		}else if (range == 3)//内阻高档位高段
00077e  2903              CMP      r1,#3
000780  d03a              BEQ      |L1.2040|
;;;793    		{
;;;794    			
;;;795    			x2 = Rmon_value;
;;;796    			y2 = data;
;;;797    			CalPara.TestR[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;798    			CalPara.OffsetR[1] = (float)y2 - CalPara.TestR[1]*(float)x2;
;;;799    				//参数写进FLASH
;;;800    			Flag_DAC_OFF=0;
;;;801    			calflag = 0;
;;;802    		}else if(range == 4)//识别电阻1低段
;;;803    		{
;;;804    			calflag = 1;
;;;805    //			x1 = (R1mon_value*1000)/(65535-R1mon_value);
;;;806    			x1 = (R1mon_value*1000)/(65535-R1mon_value);
000782  f8dfb140          LDR      r11,|L1.2244|
000786  f64f79ff          MOV      r9,#0xffff
00078a  2904              CMP      r1,#4                 ;802
00078c  d058              BEQ      |L1.2112|
;;;807    			y1 = data;
;;;808    		}else if (range == 5)//识别电阻1高段
00078e  2905              CMP      r1,#5
000790  d066              BEQ      |L1.2144|
;;;809    		{
;;;810    			
;;;811    //			x2 = (R1mon_value*1000)/(65535-R1mon_value);
;;;812    			x2 = (R1mon_value*1000)/(65535-R1mon_value);
;;;813    			y2 = data;
;;;814    			CalPara.TestR1[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;815    			CalPara.OffsetR1[0] = (float)y2 - CalPara.TestR1[0]*(float)x2;
;;;816    				//参数写进FLASH
;;;817    			Flag_DAC_OFF=0;
;;;818    			calflag = 0;
;;;819    		}else if(range == 6)//识别电阻2低段
;;;820    		{
;;;821    			calflag = 1;
;;;822    			x1 = (R2mon_value*1000)/(65535-R2mon_value);
000792  f8dfb134          LDR      r11,|L1.2248|
000796  2906              CMP      r1,#6                 ;819
000798  d052              BEQ      |L1.2112|
;;;823    			y1 = data;
;;;824    		}else if (range == 7)//识别电阻2高段
00079a  2907              CMP      r1,#7
00079c  d07e              BEQ      |L1.2204|
;;;825    		{
;;;826    			
;;;827    			x2 = (R2mon_value*1000)/(65535-R2mon_value);
;;;828    			y2 = data;
;;;829    			CalPara.TestR2[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;830    			CalPara.OffsetR2[0] = (float)y2 - CalPara.TestR2[0]*(float)x2;
;;;831    				//参数写进FLASH
;;;832    			Flag_DAC_OFF=0;
;;;833    			calflag = 0;
;;;834    		}else if(range == 8)//内阻高档位低段
00079e  2908              CMP      r1,#8
0007a0  d05d              BEQ      |L1.2142|
;;;835    		{
;;;836    			RCONT_SW = 1;
;;;837    			calflag = 1;
;;;838    			x1 = Rmon_value;
;;;839    			y1 = data;
;;;840    		}else if (range == 9)//内阻高档位高段
0007a2  2909              CMP      r1,#9
0007a4  d07b              BEQ      |L1.2206|
0007a6  e0ef              B        |L1.2440|
                  |L1.1960|
0007a8  6253              STR      r3,[r2,#0x24]         ;767  ; Run_Control
0007aa  e0c5              B        |L1.2360|
                  |L1.1964|
0007ac  8800              LDRH     r0,[r0,#0]            ;532  ; Vmon_Load_value
0007ae  e053              B        |L1.2136|
                  |L1.1968|
0007b0  8800              LDRH     r0,[r0,#0]            ;779  ; Rmon_value
0007b2  ee015a10          VMOV     s2,r5                 ;781
0007b6  eeb80a40          VCVT.F32.U32 s0,s0                 ;781
0007ba  eef80a60          VCVT.F32.U32 s1,s1                 ;781
0007be  eeb81a41          VCVT.F32.U32 s2,s2                 ;781
0007c2  e9c40507          STRD     r0,r5,[r4,#0x1c]      ;779
0007c6  ee311a40          VSUB.F32 s2,s2,s0              ;781
0007ca  ee000a10          VMOV     s0,r0                 ;781
0007ce  eeb80a40          VCVT.F32.U32 s0,s0                 ;781
0007d2  ee300a60          VSUB.F32 s0,s0,s1              ;781
0007d6  eec10a00          VDIV.F32 s1,s2,s0              ;781
0007da  ee000a10          VMOV     s0,r0                 ;782
0007de  eeb81a40          VCVT.F32.U32 s2,s0                 ;782
0007e2  ee005a10          VMOV     s0,r5                 ;782
0007e6  eeb80a40          VCVT.F32.U32 s0,s0                 ;782
0007ea  edca0a24          VSTR     s1,[r10,#0x90]        ;781
0007ee  ee000ac1          VMLS.F32 s0,s1,s2              ;782
0007f2  ed8a0a29          VSTR     s0,[r10,#0xa4]        ;782
                  |L1.2038|
0007f6  e0c4              B        |L1.2434|
                  |L1.2040|
0007f8  8800              LDRH     r0,[r0,#0]            ;795  ; Rmon_value
0007fa  ee015a10          VMOV     s2,r5                 ;797
0007fe  eeb80a40          VCVT.F32.U32 s0,s0                 ;797
000802  eef80a60          VCVT.F32.U32 s1,s1                 ;797
000806  eeb81a41          VCVT.F32.U32 s2,s2                 ;797
00080a  e9c40507          STRD     r0,r5,[r4,#0x1c]      ;795
00080e  ee311a40          VSUB.F32 s2,s2,s0              ;797
000812  ee000a10          VMOV     s0,r0                 ;797
000816  eeb80a40          VCVT.F32.U32 s0,s0                 ;797
00081a  ee300a60          VSUB.F32 s0,s0,s1              ;797
00081e  eec10a00          VDIV.F32 s1,s2,s0              ;797
000822  ee000a10          VMOV     s0,r0                 ;798
000826  eeb81a40          VCVT.F32.U32 s2,s0                 ;798
00082a  ee005a10          VMOV     s0,r5                 ;798
00082e  eeb80a40          VCVT.F32.U32 s0,s0                 ;798
000832  edca0a25          VSTR     s1,[r10,#0x94]        ;797
000836  ee000ac1          VMLS.F32 s0,s1,s2              ;798
00083a  ed8a0a2a          VSTR     s0,[r10,#0xa8]        ;798
00083e  e0a0              B        |L1.2434|
                  |L1.2112|
000840  7037              STRB     r7,[r6,#0]            ;804
000842  f8bb1000          LDRH     r1,[r11,#0]           ;806  ; R1mon_value
000846  f44f727a          MOV      r2,#0x3e8             ;806
00084a  4351              MULS     r1,r2,r1              ;806
00084c  f8bb2000          LDRH     r2,[r11,#0]           ;806  ; R1mon_value
000850  eba90002          SUB      r0,r9,r2              ;806
000854  fbb1f0f0          UDIV     r0,r1,r0              ;806
                  |L1.2136|
000858  e9c40505          STRD     r0,r5,[r4,#0x14]      ;806
00085c  e094              B        |L1.2440|
                  |L1.2142|
00085e  e06a              B        |L1.2358|
                  |L1.2144|
000860  f8bb1000          LDRH     r1,[r11,#0]           ;812  ; R1mon_value
000864  f44f727a          MOV      r2,#0x3e8             ;812
000868  4351              MULS     r1,r2,r1              ;812
00086a  f8bb2000          LDRH     r2,[r11,#0]           ;812  ; R1mon_value
00086e  ee015a10          VMOV     s2,r5                 ;814
000872  eba90002          SUB      r0,r9,r2              ;812
000876  fbb1f0f0          UDIV     r0,r1,r0              ;812
00087a  eeb81a41          VCVT.F32.U32 s2,s2                 ;814
00087e  eeb80a40          VCVT.F32.U32 s0,s0                 ;814
000882  eef80a60          VCVT.F32.U32 s1,s1                 ;814
000886  e9c40507          STRD     r0,r5,[r4,#0x1c]      ;812
00088a  ee311a40          VSUB.F32 s2,s2,s0              ;814
00088e  ee000a10          VMOV     s0,r0                 ;814
000892  eeb80a40          VCVT.F32.U32 s0,s0                 ;814
000896  ee300a60          VSUB.F32 s0,s0,s1              ;814
00089a  e001              B        |L1.2208|
                  |L1.2204|
00089c  e01d              B        |L1.2266|
                  |L1.2206|
00089e  e04d              B        |L1.2364|
                  |L1.2208|
0008a0  eec10a00          VDIV.F32 s1,s2,s0              ;814
0008a4  ee000a10          VMOV     s0,r0                 ;815
0008a8  eeb81a40          VCVT.F32.U32 s2,s0                 ;815
0008ac  ee005a10          VMOV     s0,r5                 ;815
0008b0  edca0a27          VSTR     s1,[r10,#0x9c]        ;814
0008b4  e00a              B        |L1.2252|
0008b6  0000              DCW      0x0000
                  |L1.2232|
                          DCD      0x40020800
                  |L1.2236|
                          DCD      Contr_Voltage
                  |L1.2240|
                          DCD      Rmon_value
                  |L1.2244|
                          DCD      R1mon_value
                  |L1.2248|
                          DCD      R2mon_value
                  |L1.2252|
0008cc  eeb80a40          VCVT.F32.U32 s0,s0                 ;815
0008d0  ee000ac1          VMLS.F32 s0,s1,s2              ;815
0008d4  ed8a0a2c          VSTR     s0,[r10,#0xb0]        ;815
0008d8  e053              B        |L1.2434|
                  |L1.2266|
0008da  f8bb1000          LDRH     r1,[r11,#0]           ;827  ; R2mon_value
0008de  f44f727a          MOV      r2,#0x3e8             ;827
0008e2  4351              MULS     r1,r2,r1              ;827
0008e4  f8bb2000          LDRH     r2,[r11,#0]           ;827  ; R2mon_value
0008e8  ee015a10          VMOV     s2,r5                 ;829
0008ec  eba90002          SUB      r0,r9,r2              ;827
0008f0  fbb1f0f0          UDIV     r0,r1,r0              ;827
0008f4  eeb81a41          VCVT.F32.U32 s2,s2                 ;829
0008f8  eeb80a40          VCVT.F32.U32 s0,s0                 ;829
0008fc  eef80a60          VCVT.F32.U32 s1,s1                 ;829
000900  e9c40507          STRD     r0,r5,[r4,#0x1c]      ;827
000904  ee311a40          VSUB.F32 s2,s2,s0              ;829
000908  ee000a10          VMOV     s0,r0                 ;829
00090c  eeb80a40          VCVT.F32.U32 s0,s0                 ;829
000910  ee300a60          VSUB.F32 s0,s0,s1              ;829
000914  eec10a00          VDIV.F32 s1,s2,s0              ;829
000918  ee000a10          VMOV     s0,r0                 ;830
00091c  eeb81a40          VCVT.F32.U32 s2,s0                 ;830
000920  ee005a10          VMOV     s0,r5                 ;830
000924  eeb80a40          VCVT.F32.U32 s0,s0                 ;830
000928  edca0a28          VSTR     s1,[r10,#0xa0]        ;829
00092c  ee000ac1          VMLS.F32 s0,s1,s2              ;830
000930  ed8a0a2d          VSTR     s0,[r10,#0xb4]        ;830
000934  e025              B        |L1.2434|
                  |L1.2358|
000936  6257              STR      r7,[r2,#0x24]         ;836  ; Run_Control
                  |L1.2360|
000938  7037              STRB     r7,[r6,#0]            ;837
00093a  e737              B        |L1.1964|
                  |L1.2364|
;;;841    		{
;;;842    			
;;;843    			x2 = Rmon_value;
00093c  8800              LDRH     r0,[r0,#0]  ; Rmon_value
;;;844    			y2 = data;
;;;845    			CalPara.TestR[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
00093e  ee015a10          VMOV     s2,r5
000942  eeb80a40          VCVT.F32.U32 s0,s0
000946  eef80a60          VCVT.F32.U32 s1,s1
00094a  eeb81a41          VCVT.F32.U32 s2,s2
00094e  e9c40507          STRD     r0,r5,[r4,#0x1c]      ;843
000952  ee311a40          VSUB.F32 s2,s2,s0
000956  ee000a10          VMOV     s0,r0
00095a  eeb80a40          VCVT.F32.U32 s0,s0
00095e  ee300a60          VSUB.F32 s0,s0,s1
000962  eec10a00          VDIV.F32 s1,s2,s0
;;;846    			CalPara.OffsetR[2] = (float)y2 - CalPara.TestR[2]*(float)x2;
000966  ee000a10          VMOV     s0,r0
00096a  eeb81a40          VCVT.F32.U32 s2,s0
00096e  ee005a10          VMOV     s0,r5
000972  eeb80a40          VCVT.F32.U32 s0,s0
000976  edca0a26          VSTR     s1,[r10,#0x98]        ;845
00097a  ee000ac1          VMLS.F32 s0,s1,s2
00097e  ed8a0a2b          VSTR     s0,[r10,#0xac]
                  |L1.2434|
;;;847    				//参数写进FLASH
;;;848    			Flag_DAC_OFF=0;
;;;849    			calflag = 0;
000982  f8c8c000          STR      r12,[r8,#0]  ; flagB
000986  7033              STRB     r3,[r6,#0]
                  |L1.2440|
;;;850    		}
;;;851    		
;;;852    	}
;;;853    		
;;;854    
;;;855    	Write_Flash_Bytes();
000988  e8bd5ff0          POP      {r4-r12,lr}
00098c  f7ffbffe          B.W      Write_Flash_Bytes
;;;856    //	else if(mode == 1){//测量电流
;;;857    //		if(range == 1)
;;;858    //		{
;;;859    //			x1 = abs(I_CS);
;;;860    //			y1 = data;
;;;861    //		}else if(range == 2){
;;;862    //			x2 = abs(I_CS);
;;;863    //			y2 = data;
;;;864    //			SaveDebug.TestIcal[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;865    //			SaveDebug.OffsetI[1] = (float)y2 - SaveDebug.TestIcal[1]*(float)x2;
;;;866    //		}else if(range == 4){
;;;867    //			x1 = abs(I_CS);
;;;868    //			y1 = data;
;;;869    //		}else if(range == 5){
;;;870    //			x2 = abs(I_CS);
;;;871    //			y2 = data;
;;;872    //			SaveDebug.TestIcal[4] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;873    //			SaveDebug.OffsetI[3] = (float)y2 - SaveDebug.TestIcal[4]*(float)x2;
;;;874    //		}else if(range == 0){
;;;875    //			SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[0]);
;;;876    //		}else if(range == 3){
;;;877    //			SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[0]));
;;;878    //		}
;;;879    ////		else if(range == 4){
;;;880    ////			x1 = V_CS;
;;;881    ////			y1 = data;
;;;882    ////		}else if(range == 5){
;;;883    ////			x2 = V_CS;
;;;884    ////			y2 = data;
;;;885    ////			SaveDebug.TestVcal[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;886    ////			SaveDebug.OffsetV[2] = (float)y2 - SaveDebug.TestVcal[2]*(float)x2;
;;;887    ////		}
;;;888    //		
;;;889    ////		if(range < 3)
;;;890    ////		{
;;;891    ////			if(range == 0)
;;;892    ////			{
;;;893    ////				SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[0]);
;;;894    ////			}else{
;;;895    ////				SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[1]);
;;;896    ////			}			
;;;897    ////		}else{
;;;898    ////			if(range == 3)
;;;899    ////			{
;;;900    ////				SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[0]));
;;;901    ////			}else{
;;;902    ////				SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[1]));
;;;903    ////			}
;;;904    ////		}
;;;905    ////		calflag = 1;
;;;906    //	}else if(mode == 2){//控制电压
;;;907    //		if(range == 0)
;;;908    //		{
;;;909    //			_D_ = 1000;
;;;910    //			x1 = data;
;;;911    //			y1 = _D_;
;;;912    //		}else if(range == 1){
;;;913    //			_D_ = 7000;
;;;914    //			x2 = data;
;;;915    //			y2 = _D_;
;;;916    //			SaveDebug.ControlV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;917    //			SaveDebug.OffsetCV[0] = (float)y2 - SaveDebug.ControlV[0]*(float)x2;
;;;918    //		}else if(range == 2){
;;;919    //			_D_ = 10000;
;;;920    //			x1 = data;
;;;921    //			y1 = _D_;
;;;922    //		}else if(range == 3){
;;;923    //			_D_ = 13000;
;;;924    //			x2 = data;
;;;925    //			y2 = _D_;
;;;926    //			SaveDebug.ControlV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;927    //			SaveDebug.OffsetCV[1] = (float)y2 - SaveDebug.ControlV[1]*(float)x2;
;;;928    //		}else if(range == 4){
;;;929    //			_D_ = 17000;
;;;930    //			x1 = data;
;;;931    //			y1 = _D_;
;;;932    //		}else if(range == 5){
;;;933    //			_D_ = 20000;
;;;934    //			x2 = data;
;;;935    //			y2 = _D_;
;;;936    //			SaveDebug.ControlV[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;937    //			SaveDebug.OffsetCV[2] = (float)y2 - SaveDebug.ControlV[2]*(float)x2;
;;;938    //		}else if(range == 6){
;;;939    //			_D_ = 24000;
;;;940    //			x1 = data;
;;;941    //			y1 = _D_;
;;;942    //		}else if(range == 7){
;;;943    //			_D_ = 27000;
;;;944    //			x2 = data;
;;;945    //			y2 = _D_;
;;;946    //			SaveDebug.ControlV[3] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;947    //			SaveDebug.OffsetCV[3] = (float)y2 - SaveDebug.ControlV[3]*(float)x2;
;;;948    //		}
;;;949    //		
;;;950    ////		if(range == 0)
;;;951    ////		{
;;;952    ////			SaveDebug.ControlV[range] = (float)1000/(float)data;
;;;953    ////		}else if(range == 1){
;;;954    ////			SaveDebug.ControlV[range] = (float)10000/(float)data;
;;;955    ////		}else if(range == 2){
;;;956    ////			SaveDebug.ControlV[range] = (float)15000/(float)data;
;;;957    ////		}else if(range == 3){
;;;958    ////			SaveDebug.ControlV[range] = (float)19000/(float)data;
;;;959    ////		}
;;;960    ////		calflag = 1;
;;;961    //	}else if(mode == 3){//电流清零
;;;962    //		SaveDebug.ClearI[range] = I_CS;
;;;963    ////		calflag = 1;
;;;964    //	}
;;;965    	
;;;966    }
;;;967    
                          ENDP


                          AREA ||i.DMA1_Stream3_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Stream3_IRQHandler PROC
;;;2353   
;;;2354   void DMA1_Stream3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2355   {
;;;2356   	//----DMA1 通道3完成中断，对应的中断也需要清除
;;;2357   	if(DMA_GetITStatus(DMA1_Stream3,DMA_IT_TCIF3) != RESET)   
000002  4d0c              LDR      r5,|L2.52|
000004  4c0c              LDR      r4,|L2.56|
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       DMA_GetITStatus
00000e  2800              CMP      r0,#0
000010  d00e              BEQ      |L2.48|
;;;2358       {
;;;2359   		/* 清除标志位 */
;;;2360   		DMA_ClearFlag(DMA1_Stream3,DMA_IT_TCIF3); 
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       DMA_ClearFlag
;;;2361   		/* 关闭DMA */
;;;2362   		DMA_Cmd(DMA1_Stream3,DISABLE);
00001a  2100              MOVS     r1,#0
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       DMA_Cmd
;;;2363   		
;;;2364   		while (!(USART3->SR & USART_FLAG_TC));  //硬件数据发送完毕
000022  4806              LDR      r0,|L2.60|
                  |L2.36|
000024  8801              LDRH     r1,[r0,#0]
000026  0649              LSLS     r1,r1,#25
000028  d5fc              BPL      |L2.36|
                  |L2.42|
;;;2365   		while (!(USART3->SR & USART_FLAG_TXE)); //等待数据从软件拷贝到硬件进行发送
00002a  8801              LDRH     r1,[r0,#0]
00002c  0609              LSLS     r1,r1,#24
00002e  d5fc              BPL      |L2.42|
                  |L2.48|
;;;2366   	}
;;;2367   }
000030  bd70              POP      {r4-r6,pc}
;;;2368   
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      0x18008000
                  |L2.56|
                          DCD      0x40026058
                  |L2.60|
                          DCD      0x40004800

                          AREA ||i.IsDigitChar||, CODE, READONLY, ALIGN=1

                  IsDigitChar PROC
;;;89     /*****************************************************************/
;;;90     unsigned short IsDigitChar(unsigned char a)             //如果a的值是数字的话返回1，否则返回0
000000  3830              SUBS     r0,r0,#0x30
;;;91     {
;;;92     	int b;
;;;93       if(a<0x30 || a>0x39)                     //数字1-9
000002  280a              CMP      r0,#0xa
000004  d301              BCC      |L3.10|
;;;94       	{
;;;95       	   b=0;
000006  2000              MOVS     r0,#0
;;;96       	}
;;;97       else
;;;98       	{
;;;99       	   b=1;
;;;100      	}
;;;101      return b;
;;;102    }
000008  4770              BX       lr
                  |L3.10|
00000a  2001              MOVS     r0,#1                 ;99
00000c  4770              BX       lr
;;;103    void SetPowerV(vu32 powv)
                          ENDP


                          AREA ||i.LIST_ONOFF||, CODE, READONLY, ALIGN=2

                  LIST_ONOFF PROC
;;;338    
;;;339    void LIST_ONOFF(vu8 value)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;340    {
;;;341    	switch(MODE)
000004  4863              LDR      r0,|L4.404|
000006  ed2d8b02          VPUSH    {d8}                  ;340
00000a  f890c005          LDRB     r12,[r0,#5]  ; MODE
;;;342    	{
;;;343    		case 0://电子负载ON/OFF
;;;344    		{
;;;345    			LOAD_MODE=0;
;;;346    			GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
;;;347    			if( value == 0 ){
;;;348    				
;;;349    				Flag_Swtich_ON = 0;
00000e  4d63              LDR      r5,|L4.412|
000010  2600              MOVS     r6,#0                 ;341
000012  f8df9184          LDR      r9,|L4.408|
;;;350    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
;;;351    			}
;;;352    			else if( value == 1 ){
;;;353    				
;;;354    				Flag_Swtich_ON = 1;
000016  682b              LDR      r3,[r5,#0]
;;;355    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;356    			}
;;;357    		}break;
;;;358    		case 1://稳压电源ON/OFF
;;;359    		{
;;;360    			if( value == 0 ){
;;;361    				listsend = 3;
;;;362    				listpowwatch1 ++;
;;;363    //				PowerSwitch(0);
;;;364    //				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;365    //				Para.CSET_Voltage = 0;
;;;366    //				Para.CSET_Current = 0;
;;;367    //				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;368    			}
;;;369    			else if( value == 1 ){
;;;370    				listsend = 1;
000018  2101              MOVS     r1,#1
;;;371    				listpowwatch2 ++;
;;;372    //				PowerSwitch(1);
;;;373    //				Para.CSET_Voltage = Para.CDC_OutPut_V;
;;;374    //				Para.CSET_Current = Para.CDC_Limit_C;
;;;375    //				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;376    //				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;377    			}
;;;378    		}break;
;;;379    		case 2://过流测试ON/OFF
;;;380    		{
;;;381    			listocwatch++;
;;;382    			if( value == 0 ){
;;;383    				
;;;384    				Off_GPOI_ResetSet();
;;;385    				trig_flag_state = 0;
;;;386    				max_discahrgeNum = 0;
;;;387    				Para.CSET_Current_Laod =  Para.IR_Start_C;
00001a  4c61              LDR      r4,|L4.416|
00001c  4f61              LDR      r7,|L4.420|
00001e  f0430240          ORR      r2,r3,#0x40           ;354
000022  f1bc0f05          CMP      r12,#5                ;341
000026  d226              BCS      |L4.118|
000028  e8dff00c          TBB      [pc,r12]              ;341
00002c  031a2f7c          DCB      0x03,0x1a,0x2f,0x7c
000030  9800              DCB      0x98,0x00
000032  f8c96018          STR      r6,[r9,#0x18]         ;345  ; Run_Control
000036  f44f5180          MOV      r1,#0x1000            ;346
00003a  4638              MOV      r0,r7                 ;346
00003c  f7fffffe          BL       GPIO_ResetBits
000040  f89d0008          LDRB     r0,[sp,#8]            ;347
000044  b140              CBZ      r0,|L4.88|
000046  f89d0008          LDRB     r0,[sp,#8]            ;352
00004a  2801              CMP      r0,#1                 ;352
00004c  d113              BNE      |L4.118|
00004e  6828              LDR      r0,[r5,#0]            ;354  ; flagA
000050  f0400040          ORR      r0,r0,#0x40           ;354
000054  6028              STR      r0,[r5,#0]            ;355  ; flagA
000056  e089              B        |L4.364|
                  |L4.88|
000058  6828              LDR      r0,[r5,#0]            ;349  ; flagA
00005a  f0200040          BIC      r0,r0,#0x40           ;349
00005e  e08f              B        |L4.384|
000060  f89d2008          LDRB     r2,[sp,#8]            ;360
000064  b15a              CBZ      r2,|L4.126|
000066  f89d2008          LDRB     r2,[sp,#8]            ;369
00006a  2a01              CMP      r2,#1                 ;369
00006c  d103              BNE      |L4.118|
00006e  7241              STRB     r1,[r0,#9]            ;370
000070  7b01              LDRB     r1,[r0,#0xc]          ;371  ; listpowwatch2
000072  1c49              ADDS     r1,r1,#1              ;371
000074  7301              STRB     r1,[r0,#0xc]          ;371
                  |L4.118|
;;;388    			}
;;;389    			else if( value == 1 ){
;;;390    				LOAD_I_SW = 1;
;;;391    				testv = DISS_Voltage;
;;;392    				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
;;;393    				Para.CSET_Current = 1000;
;;;394    				Para.CSET_Current_Laod =  Para.IR_Start_C;
;;;395    				shorttime = 0;
;;;396    				old_I = 0;
;;;397    				max_discahrgeNum = 0;
;;;398    				trig_flag_state = 1;
;;;399    				C_DISCHARGE = 1;        	
;;;400    				Flag_Swtich_ON = 1;
;;;401    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
;;;402    				max_discahrgeNum = (float)Para.IR_Start_C / 1000;				
;;;403    //				testv = DISS_Voltage;
;;;404    //				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
;;;405    //				Para.CSET_Current = 1000;
;;;406    //				Para.CSET_Current_Laod = Para.IR_Start_C;
;;;407    //				shorttime = 0;
;;;408    //				old_I = 0;
;;;409    //				max_discahrgeNum = 0;
;;;410    //				trig_flag_state = 1;
;;;411    //				C_DISCHARGE = 1;
;;;412    //				Flag_Swtich_ON = 1;
;;;413    //				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
;;;414    //				max_discahrgeNum = (float)Para.IR_Start_C / 1000;
;;;415    			}
;;;416    		}break;
;;;417    		case 3://过充测试ON/OFF
;;;418    		{
;;;419    			if( value == 0 ){
;;;420    				
;;;421    				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;422    				Para.CSET_Voltage = 0;
;;;423    				Para.CSET_Current = 0;
;;;424    				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;425    			}
;;;426    			else if( value == 1 ){
;;;427    				Para.CSET_Voltage = Para.CDC_OutPut_V;
;;;428    				Para.CSET_Current = Para.CDC_Limit_C;
;;;429    				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;430    				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;431    			}
;;;432    		}break;
;;;433    		case 4://电子负载ON/OFF
;;;434    		{
;;;435    			if( value == 0 ){
;;;436    				
;;;437    				Flag_Swtich_ON = 0;
;;;438    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
;;;439    			}
;;;440    			else if( value == 1 ){
;;;441    				
;;;442    				Flag_Swtich_ON = 1;
;;;443    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;444    			}
;;;445    		}break;
;;;446    	}
;;;447    }
000076  ecbd8b02          VPOP     {d8}
00007a  e8bd8ff8          POP      {r3-r11,pc}
                  |L4.126|
00007e  2103              MOVS     r1,#3                 ;361
000080  7241              STRB     r1,[r0,#9]            ;361
000082  7ac1              LDRB     r1,[r0,#0xb]          ;362  ; listpowwatch1
000084  1c49              ADDS     r1,r1,#1              ;362
000086  72c1              STRB     r1,[r0,#0xb]          ;362
000088  e7f5              B        |L4.118|
00008a  7a83              LDRB     r3,[r0,#0xa]          ;381  ; listocwatch
00008c  1c5b              ADDS     r3,r3,#1              ;381
00008e  7283              STRB     r3,[r0,#0xa]          ;381
000090  f89d0008          LDRB     r0,[sp,#8]            ;382
000094  f8dfa110          LDR      r10,|L4.424|
000098  ed9f8a44          VLDR     s16,|L4.428|
00009c  f8df8110          LDR      r8,|L4.432|
0000a0  b3b0              CBZ      r0,|L4.272|
0000a2  f89d0008          LDRB     r0,[sp,#8]            ;389
0000a6  2801              CMP      r0,#1                 ;389
0000a8  d1e5              BNE      |L4.118|
0000aa  f8c91020          STR      r1,[r9,#0x20]         ;390  ; Run_Control
0000ae  4841              LDR      r0,|L4.436|
0000b0  ed900a00          VLDR     s0,[r0,#0]            ;391
0000b4  4840              LDR      r0,|L4.440|
0000b6  ed800a00          VSTR     s0,[r0,#0]            ;391
0000ba  eddf8a40          VLDR     s17,|L4.444|
0000be  ee200a28          VMUL.F32 s0,s0,s17             ;392
0000c2  eebd0ac0          VCVT.S32.F32 s0,s0                 ;392
0000c6  ee100a10          VMOV     r0,s0                 ;392
0000ca  f500707a          ADD      r0,r0,#0x3e8          ;392
0000ce  60a0              STR      r0,[r4,#8]            ;392  ; Para
0000d0  f44f707a          MOV      r0,#0x3e8             ;393
0000d4  60e0              STR      r0,[r4,#0xc]          ;393  ; Para
0000d6  6c60              LDR      r0,[r4,#0x44]         ;394  ; Para
0000d8  6160              STR      r0,[r4,#0x14]         ;394  ; Para
0000da  4839              LDR      r0,|L4.448|
0000dc  7006              STRB     r6,[r0,#0]            ;395
0000de  4839              LDR      r0,|L4.452|
0000e0  4646              MOV      r6,r8                 ;397
0000e2  ed808a00          VSTR     s16,[r0,#0]           ;396
0000e6  ed888a00          VSTR     s16,[r8,#0]           ;397
0000ea  f88a1000          STRB     r1,[r10,#0]           ;398
0000ee  4836              LDR      r0,|L4.456|
0000f0  7001              STRB     r1,[r0,#0]            ;399
0000f2  2180              MOVS     r1,#0x80              ;401
0000f4  4638              MOV      r0,r7                 ;401
0000f6  602a              STR      r2,[r5,#0]            ;401  ; flagA
0000f8  f7fffffe          BL       GPIO_ResetBits
0000fc  6c60              LDR      r0,[r4,#0x44]         ;402  ; Para
0000fe  ee000a10          VMOV     s0,r0                 ;402
000102  eeb80a40          VCVT.F32.U32 s0,s0                 ;402
000106  eec00a28          VDIV.F32 s1,s0,s17             ;402
00010a  edc60a00          VSTR     s1,[r6,#0]            ;402
00010e  e7b2              B        |L4.118|
                  |L4.272|
000110  e7ff              B        |L4.274|
                  |L4.274|
000112  f7fffffe          BL       Off_GPOI_ResetSet
000116  f88a6000          STRB     r6,[r10,#0]           ;385
00011a  ed888a00          VSTR     s16,[r8,#0]           ;386
00011e  6c60              LDR      r0,[r4,#0x44]         ;387  ; Para
000120  6160              STR      r0,[r4,#0x14]         ;387  ; Para
000122  e7a8              B        |L4.118|
000124  f89d0008          LDRB     r0,[sp,#8]            ;419
000128  4d28              LDR      r5,|L4.460|
00012a  b170              CBZ      r0,|L4.330|
00012c  f89d0008          LDRB     r0,[sp,#8]            ;426
000130  2801              CMP      r0,#1                 ;426
000132  d1a0              BNE      |L4.118|
000134  6ee0              LDR      r0,[r4,#0x6c]         ;427  ; Para
000136  60a0              STR      r0,[r4,#8]            ;427  ; Para
000138  f8b40070          LDRH     r0,[r4,#0x70]         ;428  ; Para
00013c  60e0              STR      r0,[r4,#0xc]          ;428  ; Para
00013e  2104              MOVS     r1,#4                 ;429
000140  4628              MOV      r0,r5                 ;429
000142  f7fffffe          BL       GPIO_SetBits
000146  2102              MOVS     r1,#2                 ;430
000148  e01c              B        |L4.388|
                  |L4.330|
00014a  2102              MOVS     r1,#2                 ;421
00014c  4638              MOV      r0,r7                 ;421
00014e  f7fffffe          BL       GPIO_ResetBits
000152  60a6              STR      r6,[r4,#8]            ;422  ; Para
000154  60e6              STR      r6,[r4,#0xc]          ;423  ; Para
000156  2104              MOVS     r1,#4                 ;424
000158  4628              MOV      r0,r5                 ;424
00015a  e009              B        |L4.368|
00015c  f89d0008          LDRB     r0,[sp,#8]            ;435
000160  b160              CBZ      r0,|L4.380|
000162  f89d0008          LDRB     r0,[sp,#8]            ;440
000166  2801              CMP      r0,#1                 ;440
000168  d185              BNE      |L4.118|
00016a  602a              STR      r2,[r5,#0]            ;442  ; flagA
                  |L4.364|
00016c  2180              MOVS     r1,#0x80              ;355
00016e  4638              MOV      r0,r7                 ;355
                  |L4.368|
000170  ecbd8b02          VPOP     {d8}                  ;443
000174  e8bd4ff8          POP      {r3-r11,lr}           ;443
000178  f7ffbffe          B.W      GPIO_ResetBits
                  |L4.380|
00017c  f0230040          BIC      r0,r3,#0x40           ;437
                  |L4.384|
000180  2180              MOVS     r1,#0x80              ;350
000182  6028              STR      r0,[r5,#0]            ;350  ; flagA
                  |L4.388|
000184  4638              MOV      r0,r7                 ;438
000186  ecbd8b02          VPOP     {d8}                  ;438
00018a  e8bd4ff8          POP      {r3-r11,lr}           ;438
00018e  f7ffbffe          B.W      GPIO_SetBits
;;;448    
                          ENDP

000192  0000              DCW      0x0000
                  |L4.404|
                          DCD      ||.data||
                  |L4.408|
                          DCD      Run_Control
                  |L4.412|
                          DCD      flagA
                  |L4.416|
                          DCD      Para
                  |L4.420|
                          DCD      0x40020800
                  |L4.424|
                          DCD      trig_flag_state
                  |L4.428|
0001ac  00000000          DCFS     0x00000000 ; 0
                  |L4.432|
                          DCD      max_discahrgeNum
                  |L4.436|
                          DCD      DISS_Voltage
                  |L4.440|
                          DCD      testv
                  |L4.444|
0001bc  447a0000          DCFS     0x447a0000 ; 1000
                  |L4.448|
                          DCD      shorttime
                  |L4.452|
                          DCD      old_I
                  |L4.456|
                          DCD      C_DISCHARGE
                  |L4.460|
                          DCD      0x40021000

                          AREA ||i.MODE_ONOFF||, CODE, READONLY, ALIGN=2

                  MODE_ONOFF PROC
;;;264    
;;;265    void MODE_ONOFF(vu8 value)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;266    {
;;;267    	switch(MODE)
000004  4941              LDR      r1,|L5.268|
000006  ed2d8b02          VPUSH    {d8}                  ;266
00000a  794a              LDRB     r2,[r1,#5]  ; MODE
;;;268    	{
;;;269    		case 0://电子负载ON/OFF
;;;270    		{
;;;271    			if( value == 0 ){
;;;272    				
;;;273    				Flag_Swtich_ON = 0;
00000c  4d40              LDR      r5,|L5.272|
;;;274    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
00000e  4841              LDR      r0,|L5.276|
000010  b3ea              CBZ      r2,|L5.142|
;;;275    			}
;;;276    			else if( value == 1 ){
;;;277    				
;;;278    				Flag_Swtich_ON = 1;
;;;279    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;280    			}
;;;281    		}break;
;;;282    		case 1://稳压电源ON/OFF
;;;283    		{
;;;284    			sendwait = 1;
000012  2601              MOVS     r6,#1
000014  2a01              CMP      r2,#1                 ;267
000016  d06d              BEQ      |L5.244|
000018  2a02              CMP      r2,#2                 ;267
00001a  d14a              BNE      |L5.178|
;;;285    //			if( value == 0 ){
;;;286    //				sendwait = 1;
;;;287    ////				PowerSwitch(0);//关闭电源输出
;;;288    ////				Delay_ms(1000);
;;;289    ////				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;290    ////				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;291    //////				Delay_ms(1000);
;;;292    ////				Para.CSET_Voltage = 0;
;;;293    ////				Para.CSET_Current = 0;
;;;294    //////				Delay_ms(1000);
;;;295    ////				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;296    //			}
;;;297    //			else if( value == 1 ){
;;;298    ////				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;299    //////				Delay_ms(1000);
;;;300    ////				PowerSwitch(1);//打开电源输出
;;;301    //				
;;;302    //////				
;;;303    ////				Para.CSET_Voltage = Para.POWER_OutPut_V;
;;;304    ////				Para.CSET_Current = Para.POWER_Limit_C;
;;;305    //////				Delay_ms(1000);
;;;306    ////				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;307    //				
;;;308    //			}
;;;309    		}break;
;;;310    		case 2://过流测试ON/OFF
;;;311    		{
;;;312    			if( value == 0 ){
00001c  f89d1008          LDRB     r1,[sp,#8]
;;;313    				
;;;314    				Off_GPOI_ResetSet();
;;;315    				trig_flag_state = 0;
000020  f8df90f4          LDR      r9,|L5.280|
;;;316    				max_discahrgeNum = 0;
000024  ed9f8a3d          VLDR     s16,|L5.284|
000028  f8df80f4          LDR      r8,|L5.288|
;;;317    				Para.CSET_Current_Laod =  Para.IR_Start_C;
00002c  4c3d              LDR      r4,|L5.292|
00002e  2700              MOVS     r7,#0                 ;312
000030  b371              CBZ      r1,|L5.144|
;;;318    			}
;;;319    			else if( value == 1 ){
000032  f89d1008          LDRB     r1,[sp,#8]
000036  2901              CMP      r1,#1
000038  d13b              BNE      |L5.178|
;;;320    				LOAD_MODE = 0;
00003a  493b              LDR      r1,|L5.296|
00003c  618f              STR      r7,[r1,#0x18]  ; Run_Control
;;;321    				GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
00003e  1481              ASRS     r1,r0,#18
000040  4682              MOV      r10,r0
000042  f7fffffe          BL       GPIO_ResetBits
;;;322    				Para.CSET_Current_Laod =  Para.IR_Start_C;
000046  6c60              LDR      r0,[r4,#0x44]  ; Para
000048  6160              STR      r0,[r4,#0x14]  ; Para
;;;323    				testv = DISS_Voltage;
00004a  4838              LDR      r0,|L5.300|
;;;324    				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
00004c  eddf8a39          VLDR     s17,|L5.308|
000050  ed900a00          VLDR     s0,[r0,#0]            ;323
000054  4836              LDR      r0,|L5.304|
000056  ed800a00          VSTR     s0,[r0,#0]            ;323
00005a  ee200a28          VMUL.F32 s0,s0,s17
00005e  eebd0ac0          VCVT.S32.F32 s0,s0
000062  ee100a10          VMOV     r0,s0
000066  f500707a          ADD      r0,r0,#0x3e8
00006a  60a0              STR      r0,[r4,#8]  ; Para
;;;325    				Para.CSET_Current = 1000;
00006c  f44f707a          MOV      r0,#0x3e8
000070  60e0              STR      r0,[r4,#0xc]  ; Para
;;;326    				shorttime = 0;
000072  4831              LDR      r0,|L5.312|
000074  7007              STRB     r7,[r0,#0]
;;;327    				old_I = 0;
000076  4831              LDR      r0,|L5.316|
;;;328    				max_discahrgeNum = 0;
000078  4647              MOV      r7,r8
00007a  ed808a00          VSTR     s16,[r0,#0]           ;327
00007e  ed888a00          VSTR     s16,[r8,#0]
;;;329    				trig_flag_state = 1;
000082  f8896000          STRB     r6,[r9,#0]
;;;330    				C_DISCHARGE = 1;        	
000086  482e              LDR      r0,|L5.320|
000088  7006              STRB     r6,[r0,#0]
;;;331    				Flag_Swtich_ON = 1;
00008a  6828              LDR      r0,[r5,#0]  ; flagA
00008c  e001              B        |L5.146|
                  |L5.142|
00008e  e014              B        |L5.186|
                  |L5.144|
000090  e032              B        |L5.248|
                  |L5.146|
000092  f0400040          ORR      r0,r0,#0x40
;;;332    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
000096  6028              STR      r0,[r5,#0]  ; flagA
000098  2180              MOVS     r1,#0x80
00009a  4650              MOV      r0,r10
00009c  f7fffffe          BL       GPIO_ResetBits
;;;333    				max_discahrgeNum = (float)Para.IR_Start_C / 1000;
0000a0  6c60              LDR      r0,[r4,#0x44]  ; Para
0000a2  ee000a10          VMOV     s0,r0
0000a6  eeb80a40          VCVT.F32.U32 s0,s0
0000aa  eec00a28          VDIV.F32 s1,s0,s17
0000ae  edc70a00          VSTR     s1,[r7,#0]
                  |L5.178|
;;;334    			}
;;;335    		}break;
;;;336    	}
;;;337    }
0000b2  ecbd8b02          VPOP     {d8}
0000b6  e8bd8ff8          POP      {r3-r11,pc}
                  |L5.186|
0000ba  f89d2008          LDRB     r2,[sp,#8]            ;271
0000be  4914              LDR      r1,|L5.272|
0000c0  6809              LDR      r1,[r1,#0]            ;273
0000c2  b16a              CBZ      r2,|L5.224|
0000c4  f89d2008          LDRB     r2,[sp,#8]            ;276
0000c8  2a01              CMP      r2,#1                 ;276
0000ca  d1f2              BNE      |L5.178|
0000cc  f0410140          ORR      r1,r1,#0x40           ;278
0000d0  6029              STR      r1,[r5,#0]            ;279  ; flagA
0000d2  2180              MOVS     r1,#0x80              ;279
0000d4  ecbd8b02          VPOP     {d8}                  ;279
0000d8  e8bd4ff8          POP      {r3-r11,lr}           ;279
0000dc  f7ffbffe          B.W      GPIO_ResetBits
                  |L5.224|
0000e0  f0210140          BIC      r1,r1,#0x40           ;273
0000e4  6029              STR      r1,[r5,#0]            ;274  ; flagA
0000e6  2180              MOVS     r1,#0x80              ;274
0000e8  ecbd8b02          VPOP     {d8}                  ;274
0000ec  e8bd4ff8          POP      {r3-r11,lr}           ;274
0000f0  f7ffbffe          B.W      GPIO_SetBits
                  |L5.244|
0000f4  720e              STRB     r6,[r1,#8]            ;284
0000f6  e7dc              B        |L5.178|
                  |L5.248|
0000f8  f7fffffe          BL       Off_GPOI_ResetSet
0000fc  f8897000          STRB     r7,[r9,#0]            ;315
000100  ed888a00          VSTR     s16,[r8,#0]           ;316
000104  6c60              LDR      r0,[r4,#0x44]         ;317  ; Para
000106  6160              STR      r0,[r4,#0x14]         ;317  ; Para
000108  e7d3              B        |L5.178|
;;;338    
                          ENDP

00010a  0000              DCW      0x0000
                  |L5.268|
                          DCD      ||.data||
                  |L5.272|
                          DCD      flagA
                  |L5.276|
                          DCD      0x40020800
                  |L5.280|
                          DCD      trig_flag_state
                  |L5.284|
00011c  00000000          DCFS     0x00000000 ; 0
                  |L5.288|
                          DCD      max_discahrgeNum
                  |L5.292|
                          DCD      Para
                  |L5.296|
                          DCD      Run_Control
                  |L5.300|
                          DCD      DISS_Voltage
                  |L5.304|
                          DCD      testv
                  |L5.308|
000134  447a0000          DCFS     0x447a0000 ; 1000
                  |L5.312|
                          DCD      shorttime
                  |L5.316|
                          DCD      old_I
                  |L5.320|
                          DCD      C_DISCHARGE

                          AREA ||i.MODE_PARASET||, CODE, READONLY, ALIGN=2

                  MODE_PARASET PROC
;;;448    
;;;449    void MODE_PARASET(vu8 value)
000000  b570              PUSH     {r4-r6,lr}
;;;450    {
;;;451    	float ptrans;
;;;452    	switch(MODE)
000002  4a22              LDR      r2,|L6.140|
000004  7953              LDRB     r3,[r2,#5]  ; MODE
000006  2100              MOVS     r1,#0
;;;453    	{
;;;454    		case 0://电子负载
;;;455    		{
;;;456    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;457    //			mainswitch = 0;
;;;458    //			sendwait = 3;
;;;459    			LOAD_MODE = Para.CLOAD_MODE;
;;;460    			if(LOAD_MODE == 2)
;;;461    			{
;;;462    				ptrans = (float)Para.LOAD_P/1000;
;;;463    				Para.CSET_Current_Laod = (uint32_t)((ptrans/DISS_Voltage)*1000);
;;;464    			}else{
;;;465    				Para.CSET_Current_Laod = Para.LOAD_C;
;;;466    			}
;;;467    			Para.CSET_Voltage_Laod = Para.LOAD_V;
;;;468    			if(Para.CSET_Current_Laod > 15000)
;;;469    			{
;;;470    				LOAD_I_SW = 1;
000008  2501              MOVS     r5,#1
00000a  4c21              LDR      r4,|L6.144|
00000c  4821              LDR      r0,|L6.148|
00000e  2b05              CMP      r3,#5                 ;452
000010  d213              BCS      |L6.58|
000012  e8dff003          TBB      [pc,r3]               ;452
000016  0339              DCB      0x03,0x39
000018  2a323900          DCB      0x2a,0x32,0x39,0x00
00001c  6982              LDR      r2,[r0,#0x18]         ;459  ; Para
00001e  61a2              STR      r2,[r4,#0x18]         ;459  ; Run_Control
000020  69a2              LDR      r2,[r4,#0x18]         ;460  ; Run_Control
000022  2a02              CMP      r2,#2                 ;460
000024  d00a              BEQ      |L6.60|
000026  6dc2              LDR      r2,[r0,#0x5c]         ;465  ; Para
                  |L6.40|
000028  6142              STR      r2,[r0,#0x14]         ;465  ; Para
00002a  6e02              LDR      r2,[r0,#0x60]         ;467  ; Para
00002c  6102              STR      r2,[r0,#0x10]         ;467  ; Para
00002e  6940              LDR      r0,[r0,#0x14]         ;468  ; Para
000030  f6432298          MOV      r2,#0x3a98            ;468
000034  4290              CMP      r0,r2                 ;468
000036  d916              BLS      |L6.102|
                  |L6.56|
000038  6225              STR      r5,[r4,#0x20]  ; Run_Control
                  |L6.58|
;;;471    			}else{
;;;472    				LOAD_I_SW = 0;
;;;473    			}
;;;474    		}break;
;;;475    		case 1://稳压电源
;;;476    		{
;;;477    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;478    //			mainswitch = 0;
;;;479    //			if(USART3_Recive_flg == 1)
;;;480    //			{
;;;481    				sendwait = 1;
;;;482    //			}else{
;;;483    //				SetPowerMode();
;;;484    //			}
;;;485    //			Para.CSET_Voltage = Para.POWER_OutPut_V;
;;;486    //			SetPowerV(Para.POWER_OutPut_V);
;;;487    //	//			Para.CSET_Current = Para.POWER_Limit_C;
;;;488    //			SetPowerC(Para.POWER_Limit_C);
;;;489    		}break;
;;;490    		case 2://放电过流测试
;;;491    		{
;;;492    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;493    //			mainswitch = 0;
;;;494    //			sendwait = 3;
;;;495    			
;;;496    			LOAD_MODE = 0;
;;;497    			LOAD_I_SW = 1;
;;;498    			Para.CSET_Current = 1000;
;;;499    			Para.CSET_Current_Laod = Para.IR_Start_C;
;;;500    		}break;
;;;501    		case 3://列表
;;;502    		{
;;;503    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;504    //			mainswitch = 0;
;;;505    //			sendwait = 3;
;;;506    			
;;;507    			LOAD_MODE = 0;
;;;508    			GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
;;;509    			LOAD_I_SW = 1;
;;;510    //			Para.CSET_Current = 1000;
;;;511    		}break;
;;;512    		case 4://充电过流测试
;;;513    		{
;;;514    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;515    //			mainswitch = 0;
;;;516    //			sendwait = 3;
;;;517    			
;;;518    			sendwait = 1;
;;;519    		}break;
;;;520    	}
;;;521    }
00003a  bd70              POP      {r4-r6,pc}
                  |L6.60|
00003c  6e42              LDR      r2,[r0,#0x64]         ;462  ; Para
00003e  ee002a10          VMOV     s0,r2                 ;462
000042  4a16              LDR      r2,|L6.156|
000044  eeb81a40          VCVT.F32.U32 s2,s0                 ;462
000048  ed9f0a13          VLDR     s0,|L6.152|
00004c  edd21a00          VLDR     s3,[r2,#0]            ;463
000050  eec10a00          VDIV.F32 s1,s2,s0              ;462
000054  ee801aa1          VDIV.F32 s2,s1,s3              ;463
000058  ee210a00          VMUL.F32 s0,s2,s0              ;463
00005c  eebc0ac0          VCVT.U32.F32 s0,s0                 ;463
000060  ee102a10          VMOV     r2,s0                 ;463
000064  e7e0              B        |L6.40|
                  |L6.102|
000066  6221              STR      r1,[r4,#0x20]         ;472  ; Run_Control
000068  bd70              POP      {r4-r6,pc}
00006a  61a1              STR      r1,[r4,#0x18]         ;496  ; Run_Control
00006c  6225              STR      r5,[r4,#0x20]         ;497  ; Run_Control
00006e  f44f717a          MOV      r1,#0x3e8             ;498
000072  60c1              STR      r1,[r0,#0xc]          ;498  ; Para
000074  6c41              LDR      r1,[r0,#0x44]         ;499  ; Para
000076  6141              STR      r1,[r0,#0x14]         ;499  ; Para
000078  bd70              POP      {r4-r6,pc}
00007a  61a1              STR      r1,[r4,#0x18]         ;507  ; Run_Control
00007c  f44f5180          MOV      r1,#0x1000            ;508
000080  4807              LDR      r0,|L6.160|
000082  f7fffffe          BL       GPIO_ResetBits
000086  e7d7              B        |L6.56|
000088  7215              STRB     r5,[r2,#8]            ;518
00008a  bd70              POP      {r4-r6,pc}
;;;522    
                          ENDP

                  |L6.140|
                          DCD      ||.data||
                  |L6.144|
                          DCD      Run_Control
                  |L6.148|
                          DCD      Para
                  |L6.152|
000098  447a0000          DCFS     0x447a0000 ; 1000
                  |L6.156|
                          DCD      DISS_Voltage
                  |L6.160|
                          DCD      0x40020800

                          AREA ||i.PowerSwitch||, CODE, READONLY, ALIGN=2

                  PowerSwitch PROC
;;;188    
;;;189    void PowerSwitch(vu8 bit)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;190    {
;;;191    	MasterSendbuf[0] = 0x01;
000002  4c0f              LDR      r4,|L7.64|
000004  2001              MOVS     r0,#1
;;;192    	MasterSendbuf[1] = 0x06;
000006  2106              MOVS     r1,#6
000008  7020              STRB     r0,[r4,#0]            ;191
00000a  7061              STRB     r1,[r4,#1]
;;;193    	MasterSendbuf[2] = 0x00;
00000c  2100              MOVS     r1,#0
00000e  70a1              STRB     r1,[r4,#2]
;;;194    	MasterSendbuf[3] = 0x01;
000010  70e0              STRB     r0,[r4,#3]
;;;195    	MasterSendbuf[4] = (u8)(bit>>8);
000012  f89d0000          LDRB     r0,[sp,#0]
000016  7121              STRB     r1,[r4,#4]
;;;196    	MasterSendbuf[5] = (u8)(bit);
000018  f89d0000          LDRB     r0,[sp,#0]
00001c  7160              STRB     r0,[r4,#5]
;;;197    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00001e  2106              MOVS     r1,#6
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       Hardware_CRC
000026  71a0              STRB     r0,[r4,#6]
;;;198    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000028  2106              MOVS     r1,#6
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       Hardware_CRC
000030  0a00              LSRS     r0,r0,#8
000032  71e0              STRB     r0,[r4,#7]
;;;199    	USART3WriteDMA(8);
000034  e8bd4038          POP      {r3-r5,lr}
000038  2008              MOVS     r0,#8
00003a  f7ffbffe          B.W      USART3WriteDMA
;;;200    }
;;;201    
                          ENDP

00003e  0000              DCW      0x0000
                  |L7.64|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.ReadPowData||, CODE, READONLY, ALIGN=2

                  ReadPowData PROC
;;;201    
;;;202    void ReadPowData(void)
000000  b510              PUSH     {r4,lr}
;;;203    {
;;;204    	MasterSendbuf[0] = 0x01;
000002  4c0e              LDR      r4,|L8.60|
000004  2001              MOVS     r0,#1
;;;205    	MasterSendbuf[1] = 0x03;
;;;206    	MasterSendbuf[2] = 0x00;
;;;207    	MasterSendbuf[3] = 0x10;
000006  2110              MOVS     r1,#0x10
000008  7020              STRB     r0,[r4,#0]            ;204
00000a  2003              MOVS     r0,#3                 ;205
00000c  7060              STRB     r0,[r4,#1]            ;205
00000e  2000              MOVS     r0,#0                 ;206
000010  70a0              STRB     r0,[r4,#2]            ;206
000012  70e1              STRB     r1,[r4,#3]
;;;208    	MasterSendbuf[4] = 0x00;
000014  7120              STRB     r0,[r4,#4]
;;;209    	MasterSendbuf[5] = 0x02;
000016  2002              MOVS     r0,#2
000018  7160              STRB     r0,[r4,#5]
;;;210    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00001a  2106              MOVS     r1,#6
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       Hardware_CRC
000022  71a0              STRB     r0,[r4,#6]
;;;211    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000024  2106              MOVS     r1,#6
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       Hardware_CRC
00002c  0a00              LSRS     r0,r0,#8
00002e  71e0              STRB     r0,[r4,#7]
;;;212    	USART3WriteDMA(8);
000030  e8bd4010          POP      {r4,lr}
000034  2008              MOVS     r0,#8
000036  f7ffbffe          B.W      USART3WriteDMA
;;;213    }
;;;214    
                          ENDP

00003a  0000              DCW      0x0000
                  |L8.60|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.SerialRemoteHandleL||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  SerialRemoteHandleL PROC
;;;1005   
;;;1006   u16 SerialRemoteHandleL(u8 len,char* buf)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1007   {
000004  b0b3              SUB      sp,sp,#0xcc
000006  4604              MOV      r4,r0
;;;1008   
;;;1009     
;;;1010       u16 currCharNum;
;;;1011       u32 temp1;
;;;1012     u8 Gmode_Vale;
;;;1013   	u8 i,j;
;;;1014   	
;;;1015   	u8 addr = 0;
000008  2000              MOVS     r0,#0
00000a  460d              MOV      r5,r1                 ;1007
;;;1016   	char str[200]={0};
00000c  9032              STR      r0,[sp,#0xc8]
00000e  21c8              MOVS     r1,#0xc8
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       __aeabi_memclr4
;;;1017   	int cmd_flag=255;
;;;1018   	u8 templen =0;
;;;1019   	u8 tmpFg;
;;;1020   	u8 LM_S_Vale,LOW_I_Vale,H_L_Vale,SWITCH_Vale;
;;;1021   	u16 I_ADC_Vale,V_ADC_Vale;
;;;1022   	int32_t V_CS_Vale,I_CS_Vale;
;;;1023   	float Lvl_Vale,fadcx,fsingal, fVale;
;;;1024    
;;;1025   //	u8 len = 11;
;;;1026   	u8 pntlen = 0;
;;;1027   
;;;1028   
;;;1029   	
;;;1030   	currCharNum=0;
;;;1031   	if((buf[currCharNum] != ChrStartR) || (buf[len-2] != ChrEndR)||(buf[len-1] != ChrEndS))
000016  7828              LDRB     r0,[r5,#0]
000018  283c              CMP      r0,#0x3c
00001a  d108              BNE      |L9.46|
00001c  1928              ADDS     r0,r5,r4
00001e  f8101c02          LDRB     r1,[r0,#-2]
000022  290d              CMP      r1,#0xd
000024  d103              BNE      |L9.46|
000026  f8100c01          LDRB     r0,[r0,#-1]
00002a  280a              CMP      r0,#0xa
00002c  d001              BEQ      |L9.50|
                  |L9.46|
;;;1032       {
;;;1033   		return SetErr_ACK(buf,addr ,CMD_ERR); 
00002e  2202              MOVS     r2,#2
000030  e14a              B        |L9.712|
                  |L9.50|
;;;1034       } 
;;;1035   	str[currCharNum++] = ChrStartR;
000032  213c              MOVS     r1,#0x3c
000034  f88d1000          STRB     r1,[sp,#0]
;;;1036   	sprintf(&str[currCharNum],"%d",addr);
000038  a1fe              ADR      r1,|L9.1076|
00003a  f10d0001          ADD      r0,sp,#1
00003e  9a32              LDR      r2,[sp,#0xc8]
000040  f7fffffe          BL       __2sprintf
;;;1037   	strncat(str,"/",1);
000044  2201              MOVS     r2,#1
000046  a1fc              ADR      r1,|L9.1080|
000048  4668              MOV      r0,sp
00004a  f7fffffe          BL       strncat
;;;1038   	currCharNum =strlen(str);
00004e  4668              MOV      r0,sp
000050  f7fffffe          BL       strlen
000054  fa1ffa80          UXTH     r10,r0
;;;1039   	cmd_flag=strncmp(buf,str,strlen(str));
000058  4668              MOV      r0,sp
00005a  f7fffffe          BL       strlen
00005e  4602              MOV      r2,r0
000060  4669              MOV      r1,sp
000062  4628              MOV      r0,r5
000064  f7fffffe          BL       strncmp
;;;1040   	//testflag = cmd_flag;
;;;1041   	if(0!=cmd_flag)
000068  2800              CMP      r0,#0
00006a  d1e0              BNE      |L9.46|
;;;1042   	{
;;;1043   		return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1044   		
;;;1045   	}
;;;1046   	for (j=0;j<CmdNumb;j++)
;;;1047       {
;;;1048   		templen = strlen(CmdStr[j]);
00006c  f8dfb3cc          LDR      r11,|L9.1084|
000070  4680              MOV      r8,r0                 ;1046
;;;1049   		cmd_flag=strncmp(&buf[currCharNum],CmdStr[j],templen);
000072  eb05060a          ADD      r6,r5,r10
000076  bf00              NOP                            ;1048
                  |L9.120|
000078  eb0801c8          ADD      r1,r8,r8,LSL #3       ;1048
00007c  eb01040b          ADD      r4,r1,r11             ;1048
000080  4620              MOV      r0,r4                 ;1048
000082  f7fffffe          BL       strlen
000086  f00009ff          AND      r9,r0,#0xff           ;1048
00008a  4621              MOV      r1,r4
00008c  4630              MOV      r0,r6
00008e  464a              MOV      r2,r9
000090  f7fffffe          BL       strncmp
;;;1050   	    if(0==cmd_flag)
000094  b138              CBZ      r0,|L9.166|
000096  f1080801          ADD      r8,r8,#1
00009a  f00808ff          AND      r8,r8,#0xff           ;1046
00009e  f1b80f13          CMP      r8,#0x13              ;1046
0000a2  d3e9              BCC      |L9.120|
0000a4  e7c3              B        |L9.46|
                  |L9.166|
;;;1051   	    {
;;;1052   
;;;1053   		  buf[0] = ChrStartS;
0000a6  203e              MOVS     r0,#0x3e
0000a8  7028              STRB     r0,[r5,#0]
;;;1054   		  currCharNum+=templen;
0000aa  eb0a0009          ADD      r0,r10,r9
0000ae  b284              UXTH     r4,r0
;;;1055   		  switch(j)
;;;1056             {
;;;1057   			case 0:
;;;1058   				pntlen = 5;    //
;;;1059   				if(buf[currCharNum]=='?')
;;;1060   				{
;;;1061   
;;;1062   					
;;;1063   					sprintf(&buf[currCharNum],"%06d",Para.CVoltage);
;;;1064   					currCharNum+=6;
;;;1065   					
;;;1066   					buf[currCharNum++]=(',');
;;;1067   					sprintf(&buf[currCharNum],"%06d",Para.CLaod_Current);
;;;1068   					currCharNum+=6;
;;;1069   					
;;;1070   					buf[currCharNum++]=(',');
;;;1071   					sprintf(&buf[currCharNum],"%05d",Para.CPOW_Voltage);
;;;1072   					currCharNum+=pntlen;
;;;1073   					
;;;1074   					buf[currCharNum++]=(',');
;;;1075   					sprintf(&buf[currCharNum],"%05d",Para.CCurrent);
;;;1076   					currCharNum+=pntlen;
;;;1077   					
;;;1078   					buf[currCharNum++]=(',');
;;;1079   					sprintf(&buf[currCharNum],"%05d",Para.CR_VLUE);
;;;1080   					currCharNum+=pntlen;
;;;1081   					
;;;1082   					buf[currCharNum++]=(',');
;;;1083   					sprintf(&buf[currCharNum],"%04d",Para.CR1_VLUE);
;;;1084   					currCharNum+=4;
;;;1085   					
;;;1086   					buf[currCharNum++]=(',');
;;;1087   					sprintf(&buf[currCharNum],"%04d",Para.CR2_VLUE);
;;;1088   					currCharNum+=4;
;;;1089   
;;;1090   					buf[currCharNum++]=(',');
;;;1091   					sprintf(&buf[currCharNum],"%06d",(int)(max_discahrgeNum*1000));
;;;1092   					currCharNum+=6;
;;;1093   					
;;;1094   					buf[currCharNum++]=(',');
;;;1095   					sprintf(&buf[currCharNum],"%03d",shorttime);
;;;1096   					currCharNum+=3;
;;;1097   					
;;;1098   					buf[currCharNum++]=(',');
;;;1099   					sprintf(&buf[currCharNum],"%1d",mainswitch);
;;;1100   					currCharNum+=1;
;;;1101   					
;;;1102   					buf[currCharNum++]=(',');
;;;1103   					sprintf(&buf[currCharNum],"%1d",finishflag);
;;;1104   					currCharNum+=1;
;;;1105   					
;;;1106   					buf[currCharNum++]=(',');
;;;1107   					sprintf(&buf[currCharNum],"%1d",lockflag);
;;;1108   					currCharNum+=1;
;;;1109   					
;;;1110   					buf[currCharNum++]=(',');
;;;1111   					sprintf(&buf[currCharNum],"%2d",version);
;;;1112   					currCharNum+=2;
;;;1113   					
;;;1114   					buf[currCharNum++]=(',');
;;;1115   					sprintf(&buf[currCharNum],"%03d",Temperature);
;;;1116   					currCharNum+=3;
;;;1117   					
;;;1118   					buf[currCharNum++]=(',');
;;;1119   					sprintf(&buf[currCharNum],"%1d",overflag);
;;;1120   					currCharNum+=1;
;;;1121   //					buf[currCharNum++]=(',');
;;;1122   //					sprintf(&buf[currCharNum],"%d",H_L);
;;;1123   //					currCharNum++;
;;;1124   					
;;;1125   //					buf[currCharNum++]=(',');
;;;1126   //					sprintf(&buf[currCharNum],"%d",LM_S);
;;;1127   //					currCharNum++;
;;;1128   					
;;;1129   //					buf[currCharNum++]=(',');
;;;1130   //					sprintf(&buf[currCharNum],"%02d",(int)temperature);
;;;1131   //					currCharNum+=2;
;;;1132   					
;;;1133   				  buf[currCharNum++ ] = ChrEndR;
;;;1134   				  buf[currCharNum++ ] = ChrEndS;
;;;1135   				}
;;;1136   				else
;;;1137   				{
;;;1138   					return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1139   				}
;;;1140   				break;
;;;1141   			case 1:
;;;1142   				pntlen = 1;
;;;1143   				if(buf[currCharNum]=='?')
;;;1144   				{
;;;1145   					  sprintf(&buf[currCharNum],"%1d",MODE);
;;;1146   				    currCharNum+=pntlen;
;;;1147   				    buf[currCharNum ++] = ChrEndS;
;;;1148   					
;;;1149   				}
;;;1150   				else
;;;1151   				{
;;;1152   					pntlen = 1;				
;;;1153   					for(i=0,temp1=0;i<pntlen;i++)
;;;1154   					{
;;;1155   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1156   					}		                   
;;;1157   //					if(temp1>1)
;;;1158   //					{
;;;1159   //						return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1160   //					}
;;;1161   					MODE=temp1;
;;;1162   //					Off_GPOI_ResetSet();
;;;1163   					OnOff_GPOI_ResetSet( 2, 0 );
;;;1164   					mainswitch = 0;
;;;1165   					sendwait = 3;
;;;1166   					MODE_PARASET(MODE);
;;;1167   	//				Change_LM_Val(LM_S_Vale);
;;;1168   					buf[currCharNum++] = ChrEndR;
;;;1169   				}
;;;1170   				break;
;;;1171   				case 2:
;;;1172   				pntlen = 1;
;;;1173   				if(buf[currCharNum]=='?')
;;;1174   				{
;;;1175   					sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
0000b0  48e3              LDR      r0,|L9.1088|
0000b2  f8dfa390          LDR      r10,|L9.1092|
0000b6  f04f0b0d          MOV      r11,#0xd              ;1031
0000ba  f04f090a          MOV      r9,#0xa               ;1031
0000be  f06f062f          MVN      r6,#0x2f              ;1155
0000c2  f1b80f13          CMP      r8,#0x13              ;1055
0000c6  d2b2              BCS      |L9.46|
0000c8  e8dff008          TBB      [pc,r8]               ;1055
0000cc  0bbce1fc          DCB      0x0b,0xbc,0xe1,0xfc
0000d0  fbfa0a0a          DCB      0xfb,0xfa,0x0a,0x0a
0000d4  0a0a0a0a          DCB      0x0a,0x0a,0x0a,0x0a
0000d8  f9f8f70a          DCB      0xf9,0xf8,0xf7,0x0a
0000dc  0a0af600          DCB      0x0a,0x0a,0xf6,0x00
0000e0  e7a5              B        |L9.46|
0000e2  5d28              LDRB     r0,[r5,r4]            ;1059
0000e4  283f              CMP      r0,#0x3f              ;1059
0000e6  d1a2              BNE      |L9.46|
0000e8  f8da202c          LDR      r2,[r10,#0x2c]        ;1063  ; Para
0000ec  4656              MOV      r6,r10                ;1063
0000ee  1928              ADDS     r0,r5,r4              ;1063
0000f0  a1d5              ADR      r1,|L9.1096|
0000f2  f7fffffe          BL       __2sprintf
0000f6  1da4              ADDS     r4,r4,#6              ;1063
0000f8  b2a0              UXTH     r0,r4                 ;1064
0000fa  242c              MOVS     r4,#0x2c              ;1066
0000fc  542c              STRB     r4,[r5,r0]            ;1066
0000fe  1c40              ADDS     r0,r0,#1              ;1066
000100  6b72              LDR      r2,[r6,#0x34]         ;1067  ; Para
000102  b287              UXTH     r7,r0                 ;1066
000104  19e8              ADDS     r0,r5,r7              ;1067
000106  a1d0              ADR      r1,|L9.1096|
000108  f7fffffe          BL       __2sprintf
00010c  1dbf              ADDS     r7,r7,#6              ;1067
00010e  b2b8              UXTH     r0,r7                 ;1068
000110  542c              STRB     r4,[r5,r0]            ;1070
000112  1c40              ADDS     r0,r0,#1              ;1070
000114  6ab2              LDR      r2,[r6,#0x28]         ;1071  ; Para
000116  b287              UXTH     r7,r0                 ;1070
000118  19e8              ADDS     r0,r5,r7              ;1071
00011a  a1cd              ADR      r1,|L9.1104|
00011c  f7fffffe          BL       __2sprintf
000120  1d7f              ADDS     r7,r7,#5              ;1071
000122  b2b8              UXTH     r0,r7                 ;1072
000124  542c              STRB     r4,[r5,r0]            ;1074
000126  1c40              ADDS     r0,r0,#1              ;1074
000128  6b32              LDR      r2,[r6,#0x30]         ;1075  ; Para
00012a  b287              UXTH     r7,r0                 ;1074
00012c  19e8              ADDS     r0,r5,r7              ;1075
00012e  a1c8              ADR      r1,|L9.1104|
000130  f7fffffe          BL       __2sprintf
000134  1d7f              ADDS     r7,r7,#5              ;1075
000136  b2b8              UXTH     r0,r7                 ;1076
000138  542c              STRB     r4,[r5,r0]            ;1078
00013a  1c40              ADDS     r0,r0,#1              ;1078
00013c  6bb2              LDR      r2,[r6,#0x38]         ;1079  ; Para
00013e  b287              UXTH     r7,r0                 ;1078
000140  19e8              ADDS     r0,r5,r7              ;1079
000142  a1c3              ADR      r1,|L9.1104|
000144  f7fffffe          BL       __2sprintf
000148  1d7f              ADDS     r7,r7,#5              ;1079
00014a  b2b8              UXTH     r0,r7                 ;1080
00014c  542c              STRB     r4,[r5,r0]            ;1082
00014e  1c40              ADDS     r0,r0,#1              ;1082
000150  6bf2              LDR      r2,[r6,#0x3c]         ;1083  ; Para
000152  b287              UXTH     r7,r0                 ;1082
000154  19e8              ADDS     r0,r5,r7              ;1083
000156  a1c0              ADR      r1,|L9.1112|
000158  f7fffffe          BL       __2sprintf
00015c  1d3f              ADDS     r7,r7,#4              ;1083
00015e  b2b8              UXTH     r0,r7                 ;1084
000160  542c              STRB     r4,[r5,r0]            ;1086
000162  1c40              ADDS     r0,r0,#1              ;1086
000164  6c32              LDR      r2,[r6,#0x40]         ;1087  ; Para
000166  b287              UXTH     r7,r0                 ;1086
000168  19e8              ADDS     r0,r5,r7              ;1087
00016a  a1bb              ADR      r1,|L9.1112|
00016c  f7fffffe          BL       __2sprintf
000170  1d3f              ADDS     r7,r7,#4              ;1087
000172  b2b8              UXTH     r0,r7                 ;1088
000174  542c              STRB     r4,[r5,r0]            ;1090
000176  1c40              ADDS     r0,r0,#1              ;1090
000178  b286              UXTH     r6,r0                 ;1090
00017a  48b9              LDR      r0,|L9.1120|
00017c  ed900a00          VLDR     s0,[r0,#0]            ;1091
000180  eddf0ab8          VLDR     s1,|L9.1124|
000184  19a8              ADDS     r0,r5,r6              ;1091
000186  a1b0              ADR      r1,|L9.1096|
000188  ee200a20          VMUL.F32 s0,s0,s1              ;1091
00018c  eebd0ac0          VCVT.S32.F32 s0,s0                 ;1091
000190  ee102a10          VMOV     r2,s0                 ;1091
000194  f7fffffe          BL       __2sprintf
000198  1db6              ADDS     r6,r6,#6              ;1091
00019a  b2b0              UXTH     r0,r6                 ;1092
00019c  49b2              LDR      r1,|L9.1128|
00019e  542c              STRB     r4,[r5,r0]            ;1094
0001a0  1c40              ADDS     r0,r0,#1              ;1094
0001a2  b286              UXTH     r6,r0                 ;1094
0001a4  780a              LDRB     r2,[r1,#0]            ;1095  ; shorttime
0001a6  19a8              ADDS     r0,r5,r6              ;1095
0001a8  a1b0              ADR      r1,|L9.1132|
0001aa  f7fffffe          BL       __2sprintf
0001ae  1cf6              ADDS     r6,r6,#3              ;1095
0001b0  b2b0              UXTH     r0,r6                 ;1096
0001b2  49a2              LDR      r1,|L9.1084|
0001b4  542c              STRB     r4,[r5,r0]            ;1098
0001b6  1c40              ADDS     r0,r0,#1              ;1098
0001b8  b286              UXTH     r6,r0                 ;1098
0001ba  19a8              ADDS     r0,r5,r6              ;1099
0001bc  3958              SUBS     r1,r1,#0x58           ;1099
0001be  798a              LDRB     r2,[r1,#6]            ;1099  ; mainswitch
0001c0  a1ac              ADR      r1,|L9.1140|
0001c2  f7fffffe          BL       __2sprintf
0001c6  1c76              ADDS     r6,r6,#1              ;1099
0001c8  b2b0              UXTH     r0,r6                 ;1100
0001ca  49ab              LDR      r1,|L9.1144|
0001cc  542c              STRB     r4,[r5,r0]            ;1102
0001ce  1c40              ADDS     r0,r0,#1              ;1102
0001d0  b286              UXTH     r6,r0                 ;1102
0001d2  780a              LDRB     r2,[r1,#0]            ;1103  ; finishflag
0001d4  19a8              ADDS     r0,r5,r6              ;1103
0001d6  a1a7              ADR      r1,|L9.1140|
0001d8  f7fffffe          BL       __2sprintf
0001dc  1c76              ADDS     r6,r6,#1              ;1103
0001de  b2b0              UXTH     r0,r6                 ;1104
0001e0  49a6              LDR      r1,|L9.1148|
0001e2  542c              STRB     r4,[r5,r0]            ;1106
0001e4  1c40              ADDS     r0,r0,#1              ;1106
0001e6  b286              UXTH     r6,r0                 ;1106
0001e8  780a              LDRB     r2,[r1,#0]            ;1107  ; lockflag
0001ea  19a8              ADDS     r0,r5,r6              ;1107
0001ec  a1a1              ADR      r1,|L9.1140|
0001ee  f7fffffe          BL       __2sprintf
0001f2  1c76              ADDS     r6,r6,#1              ;1107
0001f4  b2b0              UXTH     r0,r6                 ;1108
0001f6  49a2              LDR      r1,|L9.1152|
0001f8  542c              STRB     r4,[r5,r0]            ;1110
0001fa  1c40              ADDS     r0,r0,#1              ;1110
0001fc  b286              UXTH     r6,r0                 ;1110
0001fe  780a              LDRB     r2,[r1,#0]            ;1111  ; version
000200  19a8              ADDS     r0,r5,r6              ;1111
000202  a1a0              ADR      r1,|L9.1156|
000204  f7fffffe          BL       __2sprintf
000208  1cb6              ADDS     r6,r6,#2              ;1111
00020a  b2b0              UXTH     r0,r6                 ;1112
00020c  499e              LDR      r1,|L9.1160|
00020e  542c              STRB     r4,[r5,r0]            ;1114
000210  1c40              ADDS     r0,r0,#1              ;1114
000212  b286              UXTH     r6,r0                 ;1114
000214  f9b12000          LDRSH    r2,[r1,#0]            ;1115  ; Temperature
000218  19a8              ADDS     r0,r5,r6              ;1115
00021a  a194              ADR      r1,|L9.1132|
00021c  f7fffffe          BL       __2sprintf
000220  1cf6              ADDS     r6,r6,#3              ;1115
000222  b2b0              UXTH     r0,r6                 ;1116
000224  4999              LDR      r1,|L9.1164|
000226  542c              STRB     r4,[r5,r0]            ;1118
000228  1c40              ADDS     r0,r0,#1              ;1118
00022a  b284              UXTH     r4,r0                 ;1118
00022c  780a              LDRB     r2,[r1,#0]            ;1119  ; overflag
00022e  1928              ADDS     r0,r5,r4              ;1119
000230  a190              ADR      r1,|L9.1140|
000232  f7fffffe          BL       __2sprintf
000236  1c64              ADDS     r4,r4,#1              ;1119
000238  b2a0              UXTH     r0,r4                 ;1120
00023a  f805b000          STRB     r11,[r5,r0]           ;1133
00023e  1c40              ADDS     r0,r0,#1              ;1133
000240  b280              UXTH     r0,r0                 ;1133
000242  e3ef              B        |L9.2596|
000244  5d28              LDRB     r0,[r5,r4]            ;1143
000246  2201              MOVS     r2,#1                 ;1142
000248  283f              CMP      r0,#0x3f              ;1143
00024a  d01a              BEQ      |L9.642|
00024c  2100              MOVS     r1,#0                 ;1153
00024e  4608              MOV      r0,r1                 ;1153
                  |L9.592|
000250  5d2b              LDRB     r3,[r5,r4]            ;1155
000252  eb000080          ADD      r0,r0,r0,LSL #2       ;1155
000256  1c64              ADDS     r4,r4,#1              ;1155
000258  1c49              ADDS     r1,r1,#1              ;1155
00025a  eb060040          ADD      r0,r6,r0,LSL #1       ;1155
00025e  b2c9              UXTB     r1,r1                 ;1153
000260  4418              ADD      r0,r0,r3              ;1155
000262  b2a4              UXTH     r4,r4                 ;1155
000264  4291              CMP      r1,r2                 ;1153
000266  d3f3              BCC      |L9.592|
000268  4e74              LDR      r6,|L9.1084|
00026a  3e58              SUBS     r6,r6,#0x58           ;1161
00026c  7170              STRB     r0,[r6,#5]            ;1161
00026e  2100              MOVS     r1,#0                 ;1163
000270  2002              MOVS     r0,#2                 ;1163
000272  f7fffffe          BL       OnOff_GPOI_ResetSet
000276  2000              MOVS     r0,#0                 ;1164
000278  71b0              STRB     r0,[r6,#6]            ;1164
00027a  2003              MOVS     r0,#3                 ;1165
00027c  7230              STRB     r0,[r6,#8]            ;1165
00027e  7970              LDRB     r0,[r6,#5]            ;1166  ; MODE
000280  e21c              B        |L9.1724|
                  |L9.642|
000282  496e              LDR      r1,|L9.1084|
000284  1928              ADDS     r0,r5,r4              ;1145
000286  3958              SUBS     r1,r1,#0x58           ;1145
000288  794a              LDRB     r2,[r1,#5]            ;1145  ; MODE
00028a  a17a              ADR      r1,|L9.1140|
00028c  e023              B        |L9.726|
00028e  5d29              LDRB     r1,[r5,r4]            ;1173
000290  2201              MOVS     r2,#1                 ;1172
000292  293f              CMP      r1,#0x3f              ;1173
                  |L9.660|
000294  d07d              BEQ      |L9.914|
;;;1176   				    currCharNum+=pntlen;
;;;1177   				    buf[currCharNum ++] = ChrEndS;
;;;1178   					
;;;1179   				}
;;;1180   				else
;;;1181   				{
;;;1182   					pntlen = 1;				
;;;1183   					for(i=0,temp1=0;i<pntlen;i++)
000296  2100              MOVS     r1,#0
000298  4608              MOV      r0,r1
                  |L9.666|
;;;1184   					{
;;;1185   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
00029a  5d2b              LDRB     r3,[r5,r4]
00029c  eb000080          ADD      r0,r0,r0,LSL #2
0002a0  1c64              ADDS     r4,r4,#1
0002a2  1c49              ADDS     r1,r1,#1
0002a4  eb060040          ADD      r0,r6,r0,LSL #1
0002a8  b2c9              UXTB     r1,r1                 ;1183
0002aa  4418              ADD      r0,r0,r3
0002ac  b2a4              UXTH     r4,r4
0002ae  4291              CMP      r1,r2                 ;1183
0002b0  d3f3              BCC      |L9.666|
;;;1186   					}		                   
;;;1187   					if(temp1>1)
0002b2  2801              CMP      r0,#1
0002b4  d913              BLS      |L9.734|
                  |L9.694|
;;;1188   					{
;;;1189   						return SetErr_ACK(buf, addr ,PARA_ERR);
0002b6  e006              B        |L9.710|
0002b8  e3fe              B        |L9.2744|
0002ba  e3fe              B        |L9.2746|
0002bc  e3fe              B        |L9.2748|
0002be  e3fe              B        |L9.2750|
0002c0  e3fe              B        |L9.2752|
0002c2  e1fe              B        |L9.1730|
0002c4  e012              B        |L9.748|
                  |L9.710|
0002c6  2201              MOVS     r2,#1
                  |L9.712|
;;;1190   					}
;;;1191   //					MODE=temp1;
;;;1192   					
;;;1193   					
;;;1194   					mainswitch = temp1;
;;;1195   //						Para.CSET_Voltage = 5000;
;;;1196   //						Para.CSET_Current = 1000;
;;;1197   					
;;;1198   						
;;;1199   					MODE_ONOFF(mainswitch);
;;;1200   	//				Change_LM_Val(LM_S_Vale);
;;;1201   					buf[currCharNum++] = ChrEndR;
;;;1202   		        }
;;;1203   				break;
;;;1204   				case 3:
;;;1205   				pntlen = 1;
;;;1206   				if(buf[currCharNum]=='?')
;;;1207   				{
;;;1208   					  sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1209   				    currCharNum+=pntlen;
;;;1210   				    buf[currCharNum ++] = ChrEndS;
;;;1211   					
;;;1212   				}
;;;1213   				else
;;;1214   				{
;;;1215   					if(currCharNum == 0x0b)
;;;1216   					{						
;;;1217   						for(i=0,temp1=0;i<6;i++)
;;;1218   						{
;;;1219   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1220   						}
;;;1221   					}		
;;;1222   					Para.IR_Start_C = temp1;//起始电流
;;;1223   					temp1 = 0;
;;;1224   					
;;;1225   					if(buf[currCharNum++] == ',')
;;;1226   					{
;;;1227   						for(i=0,temp1=0;i<5;i++)
;;;1228   						{
;;;1229   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1230   						}
;;;1231   					}	
;;;1232   					Para.IR_Step_C = temp1;//步进电流
;;;1233   					temp1 = 0;
;;;1234   					 
;;;1235   					if(buf[currCharNum++] == ',')
;;;1236   					{
;;;1237   						for(i=0,temp1=0;i<5;i++)
;;;1238   						{
;;;1239   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1240   						}
;;;1241   					}	
;;;1242   					Para.IR_Threshold_V = temp1;//门槛电压
;;;1243   					temp1 = 0;
;;;1244   					
;;;1245   					if(buf[currCharNum++] == ',')
;;;1246   					{
;;;1247   						for(i=0,temp1=0;i<3;i++)
;;;1248   						{
;;;1249   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1250   						}
;;;1251   					}	
;;;1252   					Para.IR_Step_Time = temp1;//步进时间
;;;1253   					temp1 = 0;
;;;1254   					
;;;1255   					if(buf[currCharNum++] == ',')
;;;1256   					{
;;;1257   						for(i=0,temp1=0;i<6;i++)
;;;1258   						{
;;;1259   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1260   						}
;;;1261   					}	
;;;1262   					Para.POWER_OutPut_V = temp1;//电源电压
;;;1263   					temp1 = 0;
;;;1264   					
;;;1265   					if(buf[currCharNum++] == ',')
;;;1266   					{
;;;1267   						for(i=0,temp1=0;i<5;i++)
;;;1268   						{
;;;1269   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1270   						}
;;;1271   					}	
;;;1272   					Para.POWER_Limit_C = temp1;//电源电流
;;;1273   					temp1 = 0;
;;;1274   					
;;;1275   					if(buf[currCharNum++] == ',')
;;;1276   					{
;;;1277   						for(i=0,temp1=0;i<5;i++)
;;;1278   						{
;;;1279   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1280   						}
;;;1281   					}	
;;;1282   					Para.POWER_Cutoff_C = temp1;//设置充电截止电流
;;;1283   					temp1 = 0;
;;;1284   					
;;;1285   					if(buf[currCharNum++] == ',')
;;;1286   					{
;;;1287   						for(i=0,temp1=0;i<6;i++)
;;;1288   						{
;;;1289   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1290   						}
;;;1291   					}	
;;;1292   					Para.LOAD_V = temp1;//负载电压
;;;1293   					temp1 = 0;
;;;1294   					
;;;1295   					if(buf[currCharNum++] == ',')
;;;1296   					{
;;;1297   						for(i=0,temp1=0;i<6;i++)
;;;1298   						{
;;;1299   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1300   						}
;;;1301   					}	
;;;1302   					Para.LOAD_C = temp1;//负载电流
;;;1303   					temp1 = 0;
;;;1304   					
;;;1305   					if(buf[currCharNum++] == ',')
;;;1306   					{
;;;1307   						for(i=0,temp1=0;i<6;i++)
;;;1308   						{
;;;1309   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1310   						}
;;;1311   					}	
;;;1312   					Para.LOAD_Cutoff_V = temp1;//设置负载截止电压
;;;1313   					temp1 = 0;
;;;1314   					
;;;1315   					if(buf[currCharNum++] == ',')
;;;1316   					{
;;;1317   						for(i=0,temp1=0;i<5;i++)
;;;1318   						{
;;;1319   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1320   						}
;;;1321   					}	
;;;1322   					Para.CDC_OutPut_V = temp1;//设置容量测试充电电压
;;;1323   					temp1 = 0;
;;;1324   					
;;;1325   					if(buf[currCharNum++] == ',')
;;;1326   					{
;;;1327   						for(i=0,temp1=0;i<5;i++)
;;;1328   						{
;;;1329   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1330   						}
;;;1331   					}	
;;;1332   					Para.CDC_Limit_C = temp1;//设置容量测试充电限制电流
;;;1333   					temp1 = 0;
;;;1334   					
;;;1335   					if(buf[currCharNum++] == ',')
;;;1336   					{
;;;1337   						for(i=0,temp1=0;i<5;i++)
;;;1338   						{
;;;1339   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1340   						}
;;;1341   					}	
;;;1342   					Para.CDC_Ccutoff_V = temp1;//设置容量测试充电截止电压
;;;1343   					temp1 = 0;
;;;1344   					
;;;1345   					if(buf[currCharNum++] == ',')
;;;1346   					{
;;;1347   						for(i=0,temp1=0;i<5;i++)
;;;1348   						{
;;;1349   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1350   						}
;;;1351   					}	
;;;1352   					Para.CDC_Ccutoff_C = temp1;//设置容量测试充电截止电流
;;;1353   					temp1 = 0;
;;;1354   					
;;;1355   					if(buf[currCharNum++] == ',')
;;;1356   					{
;;;1357   						for(i=0,temp1=0;i<5;i++)
;;;1358   						{
;;;1359   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1360   						}
;;;1361   					}	
;;;1362   					Para.CDC_Load_C = temp1;//设置容量测试放电电流
;;;1363   					temp1 = 0;
;;;1364   					
;;;1365   					if(buf[currCharNum++] == ',')
;;;1366   					{
;;;1367   						for(i=0,temp1=0;i<5;i++)
;;;1368   						{
;;;1369   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1370   						}
;;;1371   					}	
;;;1372   					Para.CDC_Dcutoff_V = temp1;//设置容量测试放电截止电压
;;;1373   					temp1 = 0;
;;;1374   					
;;;1375   					if(buf[currCharNum++] == ',')
;;;1376   					{
;;;1377   						for(i=0,temp1=0;i<3;i++)
;;;1378   						{
;;;1379   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1380   						}
;;;1381   					}	
;;;1382   					Para.CDC_Cycle_Time = temp1;//循环次数
;;;1383   					temp1 = 0;
;;;1384   					
;;;1385   					if(buf[currCharNum++] == ',')
;;;1386   					{
;;;1387   						for(i=0,temp1=0;i<3;i++)
;;;1388   						{
;;;1389   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1390   						}
;;;1391   					}	
;;;1392   					if(MODE == 0)
;;;1393   					{
;;;1394   						Para.CLOAD_MODE = temp1;//负载模式
;;;1395   					}
;;;1396   					temp1 = 0;
;;;1397   //					MODE_PARASET(MODE);
;;;1398   					
;;;1399   					if(buf[currCharNum++] == ',')
;;;1400   					{
;;;1401   						for(i=0,temp1=0;i<3;i++)
;;;1402   						{
;;;1403   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1404   						}
;;;1405   					}	
;;;1406   					Rraly = temp1;//内阻档位
;;;1407   					temp1 = 0;
;;;1408   					
;;;1409   					if(buf[currCharNum++] == ',')
;;;1410   					{
;;;1411   						for(i=0,temp1=0;i<3;i++)
;;;1412   						{
;;;1413   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1414   						}
;;;1415   					}	
;;;1416   					Para.ACT_DELAY = temp1;//激活延时
;;;1417   					temp1 = 0;
;;;1418   					
;;;1419   					if(buf[currCharNum++] == ',')
;;;1420   					{
;;;1421   						for(i=0,temp1=0;i<6;i++)
;;;1422   						{
;;;1423   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1424   						}
;;;1425   					}	
;;;1426   					Para.LOAD_P = temp1*10;//负载功率
;;;1427   					temp1 = 0;
;;;1428   					
;;;1429   					MODE_PARASET(MODE);
;;;1430   					
;;;1431   					 buf[currCharNum++] = ChrEndR;
;;;1432   		        }
;;;1433   				break;
;;;1434   				case 4:
;;;1435   				pntlen = 1;
;;;1436   				if(buf[currCharNum]=='?')
;;;1437   				{
;;;1438   					  sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1439   				    currCharNum+=pntlen;
;;;1440   				    buf[currCharNum ++] = ChrEndS;
;;;1441   					
;;;1442   				}
;;;1443   				else
;;;1444   				{
;;;1445   					if(currCharNum == 0x0b)
;;;1446   					{						
;;;1447   						for(i=0,temp1=0;i<2;i++)
;;;1448   						{
;;;1449   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1450   						}
;;;1451   					}
;;;1452   					MODE = temp1;//项目
;;;1453   					temp1 = 0;
;;;1454   					
;;;1455   					if(MODE == 0)
;;;1456   					{
;;;1457   						if(buf[currCharNum++] == ',')
;;;1458   						{
;;;1459   							for(i=0,temp1=0;i<6;i++)
;;;1460   							{
;;;1461   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1462   							}
;;;1463   						}	
;;;1464   						
;;;1465   						temp1 = 0;
;;;1466   						
;;;1467   						if(buf[currCharNum++] == ',')
;;;1468   						{
;;;1469   							for(i=0,temp1=0;i<5;i++)
;;;1470   							{
;;;1471   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1472   							}
;;;1473   						}	
;;;1474   						Para.CSET_Current_Laod = temp1;//负载电流
;;;1475   						temp1 = 0;
;;;1476   						
;;;1477   	
;;;1478   						if(Para.CSET_Current_Laod > 15000)
;;;1479   						{
;;;1480   							LOAD_I_SW = 1;
;;;1481   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1482   						}else{
;;;1483   							LOAD_I_SW = 0;
;;;1484   							GPIO_SetBits(GPIOC,GPIO_Pin_11);//电流测量为低档位
;;;1485   						}
;;;1486   						if(buf[currCharNum++] == ',')
;;;1487   						{
;;;1488   							for(i=0,temp1=0;i<1;i++)
;;;1489   							{
;;;1490   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1491   							}
;;;1492   						}
;;;1493   						mainswitch = temp1;//开关
;;;1494   						if(mainswitch == 0)
;;;1495   						{
;;;1496   							LOAD_I_SW = 1;
;;;1497   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1498   						}
;;;1499   					}else if(MODE == 1){
;;;1500   						if(buf[currCharNum++] == ',')
;;;1501   						{
;;;1502   							for(i=0,temp1=0;i<6;i++)
;;;1503   							{
;;;1504   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1505   							}
;;;1506   						}	
;;;1507   						Para.CDC_OutPut_V = temp1;//电源电压
;;;1508   						temp1 = 0;
;;;1509   						
;;;1510   						if(buf[currCharNum++] == ',')
;;;1511   						{
;;;1512   							for(i=0,temp1=0;i<5;i++)
;;;1513   							{
;;;1514   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1515   							}
;;;1516   						}	
;;;1517   						Para.CDC_Limit_C = temp1;//电源电流
;;;1518   						temp1 = 0;
;;;1519   						
;;;1520   						if(buf[currCharNum++] == ',')
;;;1521   						{
;;;1522   							for(i=0,temp1=0;i<1;i++)
;;;1523   							{
;;;1524   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1525   							}
;;;1526   						}
;;;1527   						mainswitch = temp1;//开关
;;;1528   					}else if(MODE == 2){
;;;1529   						LOAD_I_SW = 1;
;;;1530   						GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1531   						if(buf[currCharNum++] == ',')
;;;1532   						{
;;;1533   							for(i=0,temp1=0;i<6;i++)
;;;1534   							{
;;;1535   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1536   							}
;;;1537   						}	
;;;1538   						Para.IR_Start_C = temp1;//起始电流
;;;1539   						temp1 = 0;
;;;1540   						
;;;1541   						if(buf[currCharNum++] == ',')
;;;1542   						{
;;;1543   							for(i=0,temp1=0;i<5;i++)
;;;1544   							{
;;;1545   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1546   							}
;;;1547   						}	
;;;1548   						Para.IR_Step_C = temp1;//步进电流
;;;1549   						temp1 = 0;
;;;1550   						
;;;1551   						if(buf[currCharNum++] == ',')
;;;1552   						{
;;;1553   							for(i=0,temp1=0;i<1;i++)
;;;1554   							{
;;;1555   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1556   							}
;;;1557   						}
;;;1558   						mainswitch = temp1;//开关
;;;1559   						
;;;1560   						if(mainswitch == 1)
;;;1561   						{
;;;1562   							finishflag = 0;
;;;1563   						}
;;;1564   					}else if(MODE == 3){
;;;1565   						if(buf[currCharNum++] == ',')
;;;1566   						{
;;;1567   							for(i=0,temp1=0;i<6;i++)
;;;1568   							{
;;;1569   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1570   							}
;;;1571   						}	
;;;1572   						Para.CDC_OutPut_V = temp1;//电源电压
;;;1573   						temp1 = 0;
;;;1574   						
;;;1575   						
;;;1576   						if(buf[currCharNum++] == ',')
;;;1577   						{
;;;1578   							for(i=0,temp1=0;i<5;i++)
;;;1579   							{
;;;1580   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1581   							}
;;;1582   						}	
;;;1583   						Para.CDC_Limit_C = temp1;//电源电流
;;;1584   						temp1 = 0;
;;;1585   						
;;;1586   						if(buf[currCharNum++] == ',')
;;;1587   						{
;;;1588   							for(i=0,temp1=0;i<1;i++)
;;;1589   							{
;;;1590   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1591   							}
;;;1592   						}
;;;1593   						mainswitch = temp1;//开关
;;;1594   						
;;;1595   						
;;;1596   					}else if(MODE == 4){
;;;1597   						if(buf[currCharNum++] == ',')
;;;1598   						{
;;;1599   							for(i=0,temp1=0;i<6;i++)
;;;1600   							{
;;;1601   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1602   							}
;;;1603   						}	
;;;1604   						
;;;1605   						temp1 = 0;
;;;1606   						
;;;1607   						if(buf[currCharNum++] == ',')
;;;1608   						{
;;;1609   							for(i=0,temp1=0;i<5;i++)
;;;1610   							{
;;;1611   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1612   							}
;;;1613   						}	
;;;1614   						Para.CSET_Current_Laod = temp1;//负载电流
;;;1615   						temp1 = 0;
;;;1616   						
;;;1617   	
;;;1618   						if(Para.CSET_Current_Laod > 15000)
;;;1619   						{
;;;1620   							LOAD_I_SW = 1;
;;;1621   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1622   						}else{
;;;1623   							LOAD_I_SW = 0;
;;;1624   							GPIO_SetBits(GPIOC,GPIO_Pin_11);//电流测量为低档位
;;;1625   						}
;;;1626   						if(buf[currCharNum++] == ',')
;;;1627   						{
;;;1628   							for(i=0,temp1=0;i<1;i++)
;;;1629   							{
;;;1630   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1631   							}
;;;1632   						}
;;;1633   						mainswitch = temp1;//开关
;;;1634   						if(mainswitch == 0)
;;;1635   						{
;;;1636   							LOAD_I_SW = 1;
;;;1637   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1638   						}
;;;1639   					}else if(MODE == 5){
;;;1640   						if(buf[currCharNum++] == ',')
;;;1641   						{
;;;1642   							for(i=0,temp1=0;i<6;i++)
;;;1643   							{
;;;1644   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1645   							}
;;;1646   						}	
;;;1647   						temp1 = 0;
;;;1648   						
;;;1649   						if(buf[currCharNum++] == ',')
;;;1650   						{
;;;1651   							for(i=0,temp1=0;i<5;i++)
;;;1652   							{
;;;1653   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1654   							}
;;;1655   						}	
;;;1656   						temp1 = 0;
;;;1657   						
;;;1658   						if(buf[currCharNum++] == ',')
;;;1659   						{
;;;1660   							for(i=0,temp1=0;i<1;i++)
;;;1661   							{
;;;1662   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1663   							}
;;;1664   						}
;;;1665   						mainswitch = temp1;//开关
;;;1666   						if(mainswitch == 0)
;;;1667   						{
;;;1668   							mainswitch = 0;
;;;1669   						}
;;;1670   					}else if(MODE == 6){
;;;1671   						if(buf[currCharNum++] == ',')
;;;1672   						{
;;;1673   							for(i=0,temp1=0;i<6;i++)
;;;1674   							{
;;;1675   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1676   							}
;;;1677   						}	
;;;1678   						temp1 = 0;
;;;1679   						
;;;1680   						if(buf[currCharNum++] == ',')
;;;1681   						{
;;;1682   							for(i=0,temp1=0;i<5;i++)
;;;1683   							{
;;;1684   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1685   							}
;;;1686   						}	
;;;1687   						temp1 = 0;
;;;1688   						
;;;1689   						if(buf[currCharNum++] == ',')
;;;1690   						{
;;;1691   							for(i=0,temp1=0;i<1;i++)
;;;1692   							{
;;;1693   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1694   							}
;;;1695   						}
;;;1696   						mainswitch = temp1;//开关
;;;1697   					}
;;;1698   					
;;;1699   					temp1 = 0;
;;;1700   //					MODE_PARASET(MODE);
;;;1701   					Off_GPOI_ResetSet();
;;;1702   					LIST_ONOFF(mainswitch);
;;;1703   					buf[currCharNum++] = ChrEndR;
;;;1704   		        }
;;;1705   				break;
;;;1706   				case 12://电压校准
;;;1707   				{
;;;1708   					pntlen = 9;
;;;1709   					if(buf[currCharNum]=='?')
;;;1710   					{
;;;1711   						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1712   						sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1713   						currCharNum+=pntlen;
;;;1714   						buf[currCharNum++ ] = ChrEndS;
;;;1715   					}
;;;1716   					else
;;;1717   					{
;;;1718   						tmpFg = 1;
;;;1719   						for(i=0;i<pntlen;i++)
;;;1720   						{
;;;1721   						   if(i==0||i==5)
;;;1722   							  continue;
;;;1723   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1724   						   {
;;;1725   							  tmpFg = (tmpFg&0x01);
;;;1726   						   }
;;;1727   						   else
;;;1728   						   {
;;;1729   							  tmpFg = 0;
;;;1730   						   }
;;;1731   						}
;;;1732   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1733   						{
;;;1734   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1735   							
;;;1736   						}
;;;1737   						temp1=0;
;;;1738   						for(i=0;i<pntlen;i++)
;;;1739   						{
;;;1740   						   if(i==0)
;;;1741   						   {
;;;1742   							   fsingal = 10*(buf[currCharNum++]-0x30);
;;;1743   							   continue; 
;;;1744   						   }else if(i==1)
;;;1745   						   {
;;;1746   							  fsingal = fsingal+(buf[currCharNum++]-0x30);
;;;1747   							  continue; 
;;;1748   						   } 
;;;1749   						   else if(i==5)
;;;1750   						   {
;;;1751   							   currCharNum++;
;;;1752   							   continue; 
;;;1753   						   }
;;;1754   						   else									 
;;;1755   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1756   						}	
;;;1757   						CalHandle(0,fsingal,temp1);
;;;1758   						
;;;1759   					}
;;;1760   				}break;
;;;1761   				case 5:
;;;1762   				pntlen = 1;
;;;1763   				if(buf[currCharNum]=='?')
;;;1764   				{
;;;1765   					sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1766   				    currCharNum+=pntlen;
;;;1767   				    buf[currCharNum ++] = ChrEndS;
;;;1768   					
;;;1769   				}
;;;1770   				else
;;;1771   				{
;;;1772   					pntlen = 1;				
;;;1773   					for(i=0,temp1=0;i<pntlen;i++)
;;;1774   					{
;;;1775   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1776   					}		                   
;;;1777   					if(temp1>1)
;;;1778   					{
;;;1779   						return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1780   					}
;;;1781   //					MODE=temp1;
;;;1782   					
;;;1783   					
;;;1784   					overflag = temp1;
;;;1785   //						Para.CSET_Voltage = 5000;
;;;1786   //						Para.CSET_Current = 1000;
;;;1787   					
;;;1788   						
;;;1789   //					MODE_ONOFF(mainswitch);
;;;1790   	//				Change_LM_Val(LM_S_Vale);
;;;1791   					buf[currCharNum++] = ChrEndR;
;;;1792   		        }
;;;1793   				break;
;;;1794   				case 13://电流校准
;;;1795   				{
;;;1796   					pntlen = 9;
;;;1797   					if(buf[currCharNum]=='?')
;;;1798   					{
;;;1799   //						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1800   //									sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1801   //						currCharNum+=pntlen;
;;;1802   //						buf[currCharNum++ ] = ChrEndS;
;;;1803   					}
;;;1804   					else
;;;1805   					{
;;;1806   						tmpFg = 1;
;;;1807   						for(i=0;i<pntlen;i++)
;;;1808   						{
;;;1809   						   if(i==0||i==5)
;;;1810   							  continue;
;;;1811   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1812   						   {
;;;1813   							  tmpFg = (tmpFg&0x01);
;;;1814   						   }
;;;1815   						   else
;;;1816   						   {
;;;1817   							  tmpFg = 0;
;;;1818   						   }
;;;1819   						}
;;;1820   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1821   						{
;;;1822   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1823   							
;;;1824   						}
;;;1825   						temp1=0;
;;;1826   						for(i=0;i<pntlen;i++)
;;;1827   						{
;;;1828   						   if(i==0)
;;;1829   						   {
;;;1830   							   fsingal = 10*(buf[currCharNum++]-0x30);
;;;1831   							   continue; 
;;;1832   						   }else if(i==1)
;;;1833   						   {
;;;1834   							  fsingal = fsingal+(buf[currCharNum++]-0x30);
;;;1835   							  continue; 
;;;1836   						   } 
;;;1837   						   else if(i==5)
;;;1838   						   {
;;;1839   							   currCharNum++;
;;;1840   							   continue; 
;;;1841   						   }
;;;1842   						   else									 
;;;1843   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1844   						}
;;;1845   //						for(i=0;i<pntlen;i++)
;;;1846   //						{
;;;1847   //						   if(i==0)
;;;1848   //						   {
;;;1849   //							   fsingal = buf[currCharNum++]-0x30;
;;;1850   //							   continue; 
;;;1851   //						   } 
;;;1852   //						   else if(i==5)
;;;1853   //						   {
;;;1854   //							   currCharNum++;
;;;1855   //							   continue; 
;;;1856   //						   }
;;;1857   //						   else									 
;;;1858   //						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1859   //						}	
;;;1860   						CalHandle(1,fsingal,temp1);
;;;1861   						
;;;1862   					}
;;;1863   				}break;
;;;1864   				case 14://电阻校准
;;;1865   				{
;;;1866   					pntlen = 6;
;;;1867   					if(buf[currCharNum]=='?')
;;;1868   					{
;;;1869   						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1870   									sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1871   						currCharNum+=pntlen;
;;;1872   						buf[currCharNum++ ] = ChrEndS;
;;;1873   					}
;;;1874   					else
;;;1875   					{
;;;1876   						tmpFg = 1;
;;;1877   						for(i=0;i<pntlen;i++)
;;;1878   						{
;;;1879   						   if(i==0||i==4)
;;;1880   							  continue;
;;;1881   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1882   						   {
;;;1883   							  tmpFg = (tmpFg&0x01);
;;;1884   						   }
;;;1885   						   else
;;;1886   						   {
;;;1887   							  tmpFg = 0;
;;;1888   						   }
;;;1889   						}
;;;1890   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1891   						{
;;;1892   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1893   							
;;;1894   						}
;;;1895   						temp1=0;
;;;1896   						for(i=0;i<pntlen;i++)
;;;1897   						{
;;;1898   						   if(i==0)
;;;1899   						   {
;;;1900   							   fsingal = buf[currCharNum++]-0x30;
;;;1901   							   continue; 
;;;1902   						   } 
;;;1903   //						   else if(i==4)
;;;1904   //						   {
;;;1905   //							   currCharNum++;
;;;1906   //							   continue; 
;;;1907   //						   }
;;;1908   //						   else									 
;;;1909   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1910   						}
;;;1911   						CalHandle(2,fsingal,temp1);
;;;1912   						
;;;1913   					}
;;;1914   				}break;
;;;1915   				case 18:
;;;1916   				{
;;;1917   					if(buf[currCharNum]=='?')
;;;1918   					{
;;;1919   //						sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1920   //						currCharNum+=pntlen;
;;;1921   //						buf[currCharNum ++] = ChrEndS;
;;;1922   						
;;;1923   					}
;;;1924   					else
;;;1925   					{
;;;1926   						pntlen = 1;				
;;;1927   						for(i=0,temp1=0;i<pntlen;i++)
;;;1928   						{
;;;1929   							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1930   						}		                   
;;;1931   						if(temp1>1)
;;;1932   						{
;;;1933   							return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1934   						}
;;;1935   	//					MODE=temp1;
;;;1936   						
;;;1937   						jumpflag = temp1;
;;;1938   						bootflag=1;
;;;1939   						Write_Boot_Flag();
;;;1940   //						if(temp1 == 1)
;;;1941   //						{
;;;1942   //							JumpBoot(55);
;;;1943   //						}
;;;1944   						buf[currCharNum++] = ChrEndR;
;;;1945   					}
;;;1946   				}break;
;;;1947   //				case 15:
;;;1948   //				{
;;;1949   //					pntlen = 1;
;;;1950   //					if(buf[currCharNum]=='?')
;;;1951   //					{
;;;1952   //						sprintf(&buf[currCharNum],"%1d",Gmode_Vale);
;;;1953   //						currCharNum+=pntlen;
;;;1954   //						buf[currCharNum] = ChrEndR;
;;;1955   //						currCharNum++;
;;;1956   //	//				    buf[currCharNum ++] = ChrEndS;
;;;1957   //						
;;;1958   //					}
;;;1959   //					else
;;;1960   //					{
;;;1961   //						tmpFg = 1;
;;;1962   //						for(i=0;i<pntlen;i++)
;;;1963   //						{
;;;1964   //						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1965   //						   {
;;;1966   //							  tmpFg = (tmpFg&0x01);
;;;1967   //						   }
;;;1968   //						   else
;;;1969   //						   {
;;;1970   //							  tmpFg = 0;
;;;1971   //						   }
;;;1972   //						}
;;;1973   //						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1974   //						{
;;;1975   //							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1976   //							
;;;1977   //						}					
;;;1978   //						for(i=0,temp1=0;i<pntlen;i++)
;;;1979   //						{
;;;1980   //							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1981   //						}		                   
;;;1982   //						if(temp1 >Mode_H)
;;;1983   //						 {
;;;1984   //							 return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1985   //							 
;;;1986   //						 }
;;;1987   //						 if(H_L == 1)
;;;1988   //						 {
;;;1989   //							CalHandle(3,1,temp1);
;;;1990   //						 }else{
;;;1991   //							 CalHandle(3,0,temp1);
;;;1992   //						 }
;;;1993   //						 
;;;1994   ////								 Mode=temp1;
;;;1995   ////								Change_MODE_Val(Mode);
;;;1996   ////						 buf[currCharNum++] = ChrEndS;
;;;1997   //					}
;;;1998   //					break;
;;;1999   //				}break;
;;;2000   //				case 16:
;;;2001   //				{
;;;2002   //					pntlen = 3;
;;;2003   //					if(buf[currCharNum]=='?')
;;;2004   //					{
;;;2005   //						sprintf(&buf[currCharNum],"%1d",Gmode_Vale);
;;;2006   //						currCharNum+=pntlen;
;;;2007   //						buf[currCharNum] = ChrEndR;
;;;2008   //						currCharNum++;
;;;2009   //	//				    buf[currCharNum ++] = ChrEndS;
;;;2010   //						
;;;2011   //					}
;;;2012   //					else
;;;2013   //					{
;;;2014   //						tmpFg = 1;
;;;2015   //						for(i=0;i<pntlen;i++)
;;;2016   //						{
;;;2017   //						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;2018   //						   {
;;;2019   //							  tmpFg = (tmpFg&0x01);
;;;2020   //						   }
;;;2021   //						   else
;;;2022   //						   {
;;;2023   //							  tmpFg = 0;
;;;2024   //						   }
;;;2025   //						}
;;;2026   //						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;2027   //						{
;;;2028   //							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;2029   //							
;;;2030   //						}					
;;;2031   //						for(i=0,temp1=0;i<pntlen;i++)
;;;2032   //						{
;;;2033   //							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;2034   //						}		                   
;;;2035   //						 overflag = temp1;
;;;2036   //						 
;;;2037   ////								 Mode=temp1;
;;;2038   ////								Change_MODE_Val(Mode);
;;;2039   ////						 buf[currCharNum++] = ChrEndS;
;;;2040   //					}
;;;2041   //					break;
;;;2042   //				}break;
;;;2043   //				case 17:
;;;2044   //				{
;;;2045   //					pntlen = 2;
;;;2046   //					if(buf[currCharNum]=='?')
;;;2047   //					{
;;;2048   ////						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;2049   //									sprintf(&buf[currCharNum],"%02d",(int)temperature);
;;;2050   //						currCharNum+=pntlen;
;;;2051   //						buf[currCharNum++ ] = ChrEndR;
;;;2052   //						buf[currCharNum++ ] = ChrEndS;
;;;2053   //					}
;;;2054   //				}break;
;;;2055   			default:    //ERR
;;;2056              		 return SetErr_ACK(buf, addr ,CMD_ERR);
;;;2057   	 			  
;;;2058   		  }
;;;2059   		  break;
;;;2060   		}
;;;2061   		
;;;2062   	}
;;;2063   	if(j>=CmdNumb)
;;;2064   	{
;;;2065   		return SetErr_ACK(buf, addr ,CMD_ERR);			  
0002c8  4628              MOV      r0,r5
0002ca  9932              LDR      r1,[sp,#0xc8]
0002cc  f7fffffe          BL       SetErr_ACK
;;;2066   	}
;;;2067   	return currCharNum+1;
;;;2068   }
0002d0  b033              ADD      sp,sp,#0xcc
0002d2  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.726|
0002d6  f7fffffe          BL       __2sprintf
0002da  1c64              ADDS     r4,r4,#1              ;1145
0002dc  e3f1              B        |L9.2754|
                  |L9.734|
0002de  4957              LDR      r1,|L9.1084|
0002e0  3958              SUBS     r1,r1,#0x58           ;1194
0002e2  7188              STRB     r0,[r1,#6]            ;1194
0002e4  7988              LDRB     r0,[r1,#6]            ;1199  ; mainswitch
0002e6  f7fffffe          BL       MODE_ONOFF
0002ea  e3eb              B        |L9.2756|
                  |L9.748|
0002ec  5d29              LDRB     r1,[r5,r4]            ;1206
0002ee  293f              CMP      r1,#0x3f              ;1206
0002f0  d0d0              BEQ      |L9.660|
0002f2  2c0b              CMP      r4,#0xb               ;1215
0002f4  d10d              BNE      |L9.786|
0002f6  2000              MOVS     r0,#0                 ;1217
0002f8  4607              MOV      r7,r0                 ;1217
                  |L9.762|
0002fa  5d2a              LDRB     r2,[r5,r4]            ;1219
0002fc  eb070187          ADD      r1,r7,r7,LSL #2       ;1219
000300  eb060141          ADD      r1,r6,r1,LSL #1       ;1219
000304  1c64              ADDS     r4,r4,#1              ;1219
000306  1c40              ADDS     r0,r0,#1              ;1219
000308  1857              ADDS     r7,r2,r1              ;1219
00030a  b2c0              UXTB     r0,r0                 ;1217
00030c  b2a4              UXTH     r4,r4                 ;1219
00030e  2806              CMP      r0,#6                 ;1217
000310  d3f3              BCC      |L9.762|
                  |L9.786|
000312  4650              MOV      r0,r10                ;1222
000314  f8ca7044          STR      r7,[r10,#0x44]        ;1222  ; Para
000318  5d2b              LDRB     r3,[r5,r4]            ;1225
00031a  1c64              ADDS     r4,r4,#1              ;1225
00031c  2200              MOVS     r2,#0                 ;1223
00031e  b2a1              UXTH     r1,r4                 ;1225
000320  2b2c              CMP      r3,#0x2c              ;1225
000322  d10c              BNE      |L9.830|
000324  2300              MOVS     r3,#0                 ;1227
                  |L9.806|
000326  5c6c              LDRB     r4,[r5,r1]            ;1229
000328  eb020282          ADD      r2,r2,r2,LSL #2       ;1229
00032c  1c49              ADDS     r1,r1,#1              ;1229
00032e  1c5b              ADDS     r3,r3,#1              ;1229
000330  eb060242          ADD      r2,r6,r2,LSL #1       ;1229
000334  b2db              UXTB     r3,r3                 ;1227
000336  4422              ADD      r2,r2,r4              ;1229
000338  b289              UXTH     r1,r1                 ;1229
00033a  2b05              CMP      r3,#5                 ;1227
00033c  d3f3              BCC      |L9.806|
                  |L9.830|
00033e  f8a02048          STRH     r2,[r0,#0x48]         ;1232
000342  5c6a              LDRB     r2,[r5,r1]            ;1235
000344  1c49              ADDS     r1,r1,#1              ;1235
000346  2300              MOVS     r3,#0                 ;1233
000348  b289              UXTH     r1,r1                 ;1235
00034a  2a2c              CMP      r2,#0x2c              ;1235
00034c  d10c              BNE      |L9.872|
00034e  2200              MOVS     r2,#0                 ;1237
                  |L9.848|
000350  5c6c              LDRB     r4,[r5,r1]            ;1239
000352  eb030383          ADD      r3,r3,r3,LSL #2       ;1239
000356  1c49              ADDS     r1,r1,#1              ;1239
000358  1c52              ADDS     r2,r2,#1              ;1239
00035a  eb060343          ADD      r3,r6,r3,LSL #1       ;1239
00035e  b2d2              UXTB     r2,r2                 ;1237
000360  4423              ADD      r3,r3,r4              ;1239
000362  b289              UXTH     r1,r1                 ;1239
000364  2a05              CMP      r2,#5                 ;1237
000366  d3f3              BCC      |L9.848|
                  |L9.872|
000368  64c3              STR      r3,[r0,#0x4c]         ;1242  ; Para
00036a  5c6b              LDRB     r3,[r5,r1]            ;1245
00036c  1c49              ADDS     r1,r1,#1              ;1245
00036e  2200              MOVS     r2,#0                 ;1243
000370  b289              UXTH     r1,r1                 ;1245
000372  2b2c              CMP      r3,#0x2c              ;1245
000374  d10c              BNE      |L9.912|
000376  2300              MOVS     r3,#0                 ;1247
                  |L9.888|
000378  5c6c              LDRB     r4,[r5,r1]            ;1249
00037a  eb020282          ADD      r2,r2,r2,LSL #2       ;1249
00037e  1c49              ADDS     r1,r1,#1              ;1249
000380  1c5b              ADDS     r3,r3,#1              ;1249
000382  eb060242          ADD      r2,r6,r2,LSL #1       ;1249
000386  b2db              UXTB     r3,r3                 ;1247
000388  4422              ADD      r2,r2,r4              ;1249
00038a  b289              UXTH     r1,r1                 ;1249
00038c  2b03              CMP      r3,#3                 ;1247
00038e  d3f3              BCC      |L9.888|
                  |L9.912|
000390  e000              B        |L9.916|
                  |L9.914|
000392  e217              B        |L9.1988|
                  |L9.916|
000394  f8a02050          STRH     r2,[r0,#0x50]         ;1252
000398  5c6a              LDRB     r2,[r5,r1]            ;1255
00039a  1c49              ADDS     r1,r1,#1              ;1255
00039c  2300              MOVS     r3,#0                 ;1253
00039e  b289              UXTH     r1,r1                 ;1255
0003a0  2a2c              CMP      r2,#0x2c              ;1255
0003a2  d10c              BNE      |L9.958|
0003a4  2200              MOVS     r2,#0                 ;1257
                  |L9.934|
0003a6  5c6c              LDRB     r4,[r5,r1]            ;1259
0003a8  eb030383          ADD      r3,r3,r3,LSL #2       ;1259
0003ac  1c49              ADDS     r1,r1,#1              ;1259
0003ae  1c52              ADDS     r2,r2,#1              ;1259
0003b0  eb060343          ADD      r3,r6,r3,LSL #1       ;1259
0003b4  b2d2              UXTB     r2,r2                 ;1257
0003b6  4423              ADD      r3,r3,r4              ;1259
0003b8  b289              UXTH     r1,r1                 ;1259
0003ba  2a06              CMP      r2,#6                 ;1257
0003bc  d3f3              BCC      |L9.934|
                  |L9.958|
0003be  6543              STR      r3,[r0,#0x54]         ;1262  ; Para
0003c0  5c6b              LDRB     r3,[r5,r1]            ;1265
0003c2  1c49              ADDS     r1,r1,#1              ;1265
0003c4  2200              MOVS     r2,#0                 ;1263
0003c6  b289              UXTH     r1,r1                 ;1265
0003c8  2b2c              CMP      r3,#0x2c              ;1265
0003ca  d10c              BNE      |L9.998|
0003cc  2300              MOVS     r3,#0                 ;1267
                  |L9.974|
0003ce  5c6c              LDRB     r4,[r5,r1]            ;1269
0003d0  eb020282          ADD      r2,r2,r2,LSL #2       ;1269
0003d4  1c49              ADDS     r1,r1,#1              ;1269
0003d6  1c5b              ADDS     r3,r3,#1              ;1269
0003d8  eb060242          ADD      r2,r6,r2,LSL #1       ;1269
0003dc  b2db              UXTB     r3,r3                 ;1267
0003de  4422              ADD      r2,r2,r4              ;1269
0003e0  b289              UXTH     r1,r1                 ;1269
0003e2  2b05              CMP      r3,#5                 ;1267
0003e4  d3f3              BCC      |L9.974|
                  |L9.998|
0003e6  f8a02058          STRH     r2,[r0,#0x58]         ;1272
0003ea  5c6b              LDRB     r3,[r5,r1]            ;1275
0003ec  1c49              ADDS     r1,r1,#1              ;1275
0003ee  2200              MOVS     r2,#0                 ;1273
0003f0  b289              UXTH     r1,r1                 ;1275
0003f2  2b2c              CMP      r3,#0x2c              ;1275
0003f4  d10c              BNE      |L9.1040|
0003f6  2300              MOVS     r3,#0                 ;1277
                  |L9.1016|
0003f8  5c6c              LDRB     r4,[r5,r1]            ;1279
0003fa  eb020282          ADD      r2,r2,r2,LSL #2       ;1279
0003fe  1c49              ADDS     r1,r1,#1              ;1279
000400  1c5b              ADDS     r3,r3,#1              ;1279
000402  eb060242          ADD      r2,r6,r2,LSL #1       ;1279
000406  b2db              UXTB     r3,r3                 ;1277
000408  4422              ADD      r2,r2,r4              ;1279
00040a  b289              UXTH     r1,r1                 ;1279
00040c  2b05              CMP      r3,#5                 ;1277
00040e  d3f3              BCC      |L9.1016|
                  |L9.1040|
000410  f8a0205a          STRH     r2,[r0,#0x5a]         ;1282
000414  5c6a              LDRB     r2,[r5,r1]            ;1285
000416  1c49              ADDS     r1,r1,#1              ;1285
000418  2300              MOVS     r3,#0                 ;1283
00041a  b289              UXTH     r1,r1                 ;1285
00041c  2a2c              CMP      r2,#0x2c              ;1285
00041e  d13b              BNE      |L9.1176|
000420  2200              MOVS     r2,#0                 ;1287
                  |L9.1058|
000422  5c6c              LDRB     r4,[r5,r1]            ;1289
000424  eb030383          ADD      r3,r3,r3,LSL #2       ;1289
000428  eb060343          ADD      r3,r6,r3,LSL #1       ;1289
00042c  1c49              ADDS     r1,r1,#1              ;1289
00042e  4423              ADD      r3,r3,r4              ;1289
000430  b289              UXTH     r1,r1                 ;1289
000432  e02d              B        |L9.1168|
                  |L9.1076|
000434  256400            DCB      "%d",0
000437  00                DCB      0
                  |L9.1080|
000438  2f00              DCB      "/",0
00043a  00                DCB      0
00043b  00                DCB      0
                  |L9.1084|
                          DCD      ||.data||+0x58
                  |L9.1088|
                          DCD      C_DISCHARGE
                  |L9.1092|
                          DCD      Para
                  |L9.1096|
000448  25303664          DCB      "%06d",0
00044c  00      
00044d  00                DCB      0
00044e  00                DCB      0
00044f  00                DCB      0
                  |L9.1104|
000450  25303564          DCB      "%05d",0
000454  00      
000455  00                DCB      0
000456  00                DCB      0
000457  00                DCB      0
                  |L9.1112|
000458  25303464          DCB      "%04d",0
00045c  00      
00045d  00                DCB      0
00045e  00                DCB      0
00045f  00                DCB      0
                  |L9.1120|
                          DCD      max_discahrgeNum
                  |L9.1124|
000464  447a0000          DCFS     0x447a0000 ; 1000
                  |L9.1128|
                          DCD      shorttime
                  |L9.1132|
00046c  25303364          DCB      "%03d",0
000470  00      
000471  00                DCB      0
000472  00                DCB      0
000473  00                DCB      0
                  |L9.1140|
000474  25316400          DCB      "%1d",0
                  |L9.1144|
                          DCD      finishflag
                  |L9.1148|
                          DCD      lockflag
                  |L9.1152|
                          DCD      version
                  |L9.1156|
000484  25326400          DCB      "%2d",0
                  |L9.1160|
                          DCD      Temperature
                  |L9.1164|
                          DCD      overflag
                  |L9.1168|
000490  1c52              ADDS     r2,r2,#1              ;1289
000492  b2d2              UXTB     r2,r2                 ;1287
000494  2a06              CMP      r2,#6                 ;1287
000496  d3c4              BCC      |L9.1058|
                  |L9.1176|
000498  6603              STR      r3,[r0,#0x60]         ;1292  ; Para
00049a  5c6a              LDRB     r2,[r5,r1]            ;1295
00049c  1c49              ADDS     r1,r1,#1              ;1295
00049e  2300              MOVS     r3,#0                 ;1293
0004a0  b289              UXTH     r1,r1                 ;1295
0004a2  2a2c              CMP      r2,#0x2c              ;1295
0004a4  d10c              BNE      |L9.1216|
0004a6  2200              MOVS     r2,#0                 ;1297
                  |L9.1192|
0004a8  5c6c              LDRB     r4,[r5,r1]            ;1299
0004aa  eb030383          ADD      r3,r3,r3,LSL #2       ;1299
0004ae  1c49              ADDS     r1,r1,#1              ;1299
0004b0  1c52              ADDS     r2,r2,#1              ;1299
0004b2  eb060343          ADD      r3,r6,r3,LSL #1       ;1299
0004b6  b2d2              UXTB     r2,r2                 ;1297
0004b8  4423              ADD      r3,r3,r4              ;1299
0004ba  b289              UXTH     r1,r1                 ;1299
0004bc  2a06              CMP      r2,#6                 ;1297
0004be  d3f3              BCC      |L9.1192|
                  |L9.1216|
0004c0  65c3              STR      r3,[r0,#0x5c]         ;1302  ; Para
0004c2  5c6b              LDRB     r3,[r5,r1]            ;1305
0004c4  1c49              ADDS     r1,r1,#1              ;1305
0004c6  2200              MOVS     r2,#0                 ;1303
0004c8  b289              UXTH     r1,r1                 ;1305
0004ca  2b2c              CMP      r3,#0x2c              ;1305
0004cc  d10c              BNE      |L9.1256|
0004ce  2300              MOVS     r3,#0                 ;1307
                  |L9.1232|
0004d0  5c6c              LDRB     r4,[r5,r1]            ;1309
0004d2  eb020282          ADD      r2,r2,r2,LSL #2       ;1309
0004d6  1c49              ADDS     r1,r1,#1              ;1309
0004d8  1c5b              ADDS     r3,r3,#1              ;1309
0004da  eb060242          ADD      r2,r6,r2,LSL #1       ;1309
0004de  b2db              UXTB     r3,r3                 ;1307
0004e0  4422              ADD      r2,r2,r4              ;1309
0004e2  b289              UXTH     r1,r1                 ;1309
0004e4  2b06              CMP      r3,#6                 ;1307
0004e6  d3f3              BCC      |L9.1232|
                  |L9.1256|
0004e8  f8a02068          STRH     r2,[r0,#0x68]         ;1312
0004ec  5c6a              LDRB     r2,[r5,r1]            ;1315
0004ee  1c49              ADDS     r1,r1,#1              ;1315
0004f0  2300              MOVS     r3,#0                 ;1313
0004f2  b289              UXTH     r1,r1                 ;1315
0004f4  2a2c              CMP      r2,#0x2c              ;1315
0004f6  d10c              BNE      |L9.1298|
0004f8  2200              MOVS     r2,#0                 ;1317
                  |L9.1274|
0004fa  5c6c              LDRB     r4,[r5,r1]            ;1319
0004fc  eb030383          ADD      r3,r3,r3,LSL #2       ;1319
000500  1c49              ADDS     r1,r1,#1              ;1319
000502  1c52              ADDS     r2,r2,#1              ;1319
000504  eb060343          ADD      r3,r6,r3,LSL #1       ;1319
000508  b2d2              UXTB     r2,r2                 ;1317
00050a  4423              ADD      r3,r3,r4              ;1319
00050c  b289              UXTH     r1,r1                 ;1319
00050e  2a05              CMP      r2,#5                 ;1317
000510  d3f3              BCC      |L9.1274|
                  |L9.1298|
000512  66c3              STR      r3,[r0,#0x6c]         ;1322  ; Para
000514  5c6b              LDRB     r3,[r5,r1]            ;1325
000516  1c49              ADDS     r1,r1,#1              ;1325
000518  2200              MOVS     r2,#0                 ;1323
00051a  b289              UXTH     r1,r1                 ;1325
00051c  2b2c              CMP      r3,#0x2c              ;1325
00051e  d10c              BNE      |L9.1338|
000520  2300              MOVS     r3,#0                 ;1327
                  |L9.1314|
000522  5c6c              LDRB     r4,[r5,r1]            ;1329
000524  eb020282          ADD      r2,r2,r2,LSL #2       ;1329
000528  1c49              ADDS     r1,r1,#1              ;1329
00052a  1c5b              ADDS     r3,r3,#1              ;1329
00052c  eb060242          ADD      r2,r6,r2,LSL #1       ;1329
000530  b2db              UXTB     r3,r3                 ;1327
000532  4422              ADD      r2,r2,r4              ;1329
000534  b289              UXTH     r1,r1                 ;1329
000536  2b05              CMP      r3,#5                 ;1327
000538  d3f3              BCC      |L9.1314|
                  |L9.1338|
00053a  f8a02070          STRH     r2,[r0,#0x70]         ;1332
00053e  5c6a              LDRB     r2,[r5,r1]            ;1335
000540  1c49              ADDS     r1,r1,#1              ;1335
000542  2300              MOVS     r3,#0                 ;1333
000544  b289              UXTH     r1,r1                 ;1335
000546  2a2c              CMP      r2,#0x2c              ;1335
000548  d10c              BNE      |L9.1380|
00054a  2200              MOVS     r2,#0                 ;1337
                  |L9.1356|
00054c  5c6c              LDRB     r4,[r5,r1]            ;1339
00054e  eb030383          ADD      r3,r3,r3,LSL #2       ;1339
000552  1c49              ADDS     r1,r1,#1              ;1339
000554  1c52              ADDS     r2,r2,#1              ;1339
000556  eb060343          ADD      r3,r6,r3,LSL #1       ;1339
00055a  b2d2              UXTB     r2,r2                 ;1337
00055c  4423              ADD      r3,r3,r4              ;1339
00055e  b289              UXTH     r1,r1                 ;1339
000560  2a05              CMP      r2,#5                 ;1337
000562  d3f3              BCC      |L9.1356|
                  |L9.1380|
000564  6743              STR      r3,[r0,#0x74]         ;1342  ; Para
000566  5c6b              LDRB     r3,[r5,r1]            ;1345
000568  1c49              ADDS     r1,r1,#1              ;1345
00056a  2200              MOVS     r2,#0                 ;1343
00056c  b289              UXTH     r1,r1                 ;1345
00056e  2b2c              CMP      r3,#0x2c              ;1345
000570  d10c              BNE      |L9.1420|
000572  2300              MOVS     r3,#0                 ;1347
                  |L9.1396|
000574  5c6c              LDRB     r4,[r5,r1]            ;1349
000576  eb020282          ADD      r2,r2,r2,LSL #2       ;1349
00057a  1c49              ADDS     r1,r1,#1              ;1349
00057c  1c5b              ADDS     r3,r3,#1              ;1349
00057e  eb060242          ADD      r2,r6,r2,LSL #1       ;1349
000582  b2db              UXTB     r3,r3                 ;1347
000584  4422              ADD      r2,r2,r4              ;1349
000586  b289              UXTH     r1,r1                 ;1349
000588  2b05              CMP      r3,#5                 ;1347
00058a  d3f3              BCC      |L9.1396|
                  |L9.1420|
00058c  f8a02078          STRH     r2,[r0,#0x78]         ;1352
000590  5c6a              LDRB     r2,[r5,r1]            ;1355
000592  1c49              ADDS     r1,r1,#1              ;1355
000594  2300              MOVS     r3,#0                 ;1353
000596  b289              UXTH     r1,r1                 ;1355
000598  2a2c              CMP      r2,#0x2c              ;1355
00059a  d10c              BNE      |L9.1462|
00059c  2200              MOVS     r2,#0                 ;1357
                  |L9.1438|
00059e  5c6c              LDRB     r4,[r5,r1]            ;1359
0005a0  eb030383          ADD      r3,r3,r3,LSL #2       ;1359
0005a4  1c49              ADDS     r1,r1,#1              ;1359
0005a6  1c52              ADDS     r2,r2,#1              ;1359
0005a8  eb060343          ADD      r3,r6,r3,LSL #1       ;1359
0005ac  b2d2              UXTB     r2,r2                 ;1357
0005ae  4423              ADD      r3,r3,r4              ;1359
0005b0  b289              UXTH     r1,r1                 ;1359
0005b2  2a05              CMP      r2,#5                 ;1357
0005b4  d3f3              BCC      |L9.1438|
                  |L9.1462|
0005b6  67c3              STR      r3,[r0,#0x7c]         ;1362  ; Para
0005b8  5c6a              LDRB     r2,[r5,r1]            ;1365
0005ba  1c49              ADDS     r1,r1,#1              ;1365
0005bc  2300              MOVS     r3,#0                 ;1363
0005be  b289              UXTH     r1,r1                 ;1365
0005c0  2a2c              CMP      r2,#0x2c              ;1365
0005c2  d10c              BNE      |L9.1502|
0005c4  2200              MOVS     r2,#0                 ;1367
                  |L9.1478|
0005c6  5c6c              LDRB     r4,[r5,r1]            ;1369
0005c8  eb030383          ADD      r3,r3,r3,LSL #2       ;1369
0005cc  1c49              ADDS     r1,r1,#1              ;1369
0005ce  1c52              ADDS     r2,r2,#1              ;1369
0005d0  eb060343          ADD      r3,r6,r3,LSL #1       ;1369
0005d4  b2d2              UXTB     r2,r2                 ;1367
0005d6  4423              ADD      r3,r3,r4              ;1369
0005d8  b289              UXTH     r1,r1                 ;1369
0005da  2a05              CMP      r2,#5                 ;1367
0005dc  d3f3              BCC      |L9.1478|
                  |L9.1502|
0005de  f8c03080          STR      r3,[r0,#0x80]         ;1372  ; Para
0005e2  5c6b              LDRB     r3,[r5,r1]            ;1375
0005e4  1c49              ADDS     r1,r1,#1              ;1375
0005e6  2200              MOVS     r2,#0                 ;1373
0005e8  b289              UXTH     r1,r1                 ;1375
0005ea  2b2c              CMP      r3,#0x2c              ;1375
0005ec  d10c              BNE      |L9.1544|
0005ee  2300              MOVS     r3,#0                 ;1377
                  |L9.1520|
0005f0  5c6c              LDRB     r4,[r5,r1]            ;1379
0005f2  eb020282          ADD      r2,r2,r2,LSL #2       ;1379
0005f6  1c49              ADDS     r1,r1,#1              ;1379
0005f8  1c5b              ADDS     r3,r3,#1              ;1379
0005fa  eb060242          ADD      r2,r6,r2,LSL #1       ;1379
0005fe  b2db              UXTB     r3,r3                 ;1377
000600  4422              ADD      r2,r2,r4              ;1379
000602  b289              UXTH     r1,r1                 ;1379
000604  2b03              CMP      r3,#3                 ;1377
000606  d3f3              BCC      |L9.1520|
                  |L9.1544|
000608  f8802084          STRB     r2,[r0,#0x84]         ;1382
00060c  5c6a              LDRB     r2,[r5,r1]            ;1385
00060e  1c49              ADDS     r1,r1,#1              ;1385
000610  2300              MOVS     r3,#0                 ;1383
000612  b289              UXTH     r1,r1                 ;1385
000614  2a2c              CMP      r2,#0x2c              ;1385
000616  d10c              BNE      |L9.1586|
000618  2200              MOVS     r2,#0                 ;1387
                  |L9.1562|
00061a  5c6c              LDRB     r4,[r5,r1]            ;1389
00061c  eb030383          ADD      r3,r3,r3,LSL #2       ;1389
000620  1c49              ADDS     r1,r1,#1              ;1389
000622  1c52              ADDS     r2,r2,#1              ;1389
000624  eb060343          ADD      r3,r6,r3,LSL #1       ;1389
000628  b2d2              UXTB     r2,r2                 ;1387
00062a  4423              ADD      r3,r3,r4              ;1389
00062c  b289              UXTH     r1,r1                 ;1389
00062e  2a03              CMP      r2,#3                 ;1387
000630  d3f3              BCC      |L9.1562|
                  |L9.1586|
000632  4af8              LDR      r2,|L9.2580|
000634  7954              LDRB     r4,[r2,#5]            ;1392  ; MODE
000636  b904              CBNZ     r4,|L9.1594|
000638  6183              STR      r3,[r0,#0x18]         ;1394  ; Para
                  |L9.1594|
00063a  5c6c              LDRB     r4,[r5,r1]            ;1399
00063c  1c49              ADDS     r1,r1,#1              ;1399
00063e  2300              MOVS     r3,#0                 ;1396
000640  b289              UXTH     r1,r1                 ;1399
000642  2c2c              CMP      r4,#0x2c              ;1399
000644  d10c              BNE      |L9.1632|
000646  2400              MOVS     r4,#0                 ;1401
                  |L9.1608|
000648  5c6f              LDRB     r7,[r5,r1]            ;1403
00064a  eb030383          ADD      r3,r3,r3,LSL #2       ;1403
00064e  1c49              ADDS     r1,r1,#1              ;1403
000650  1c64              ADDS     r4,r4,#1              ;1403
000652  eb060343          ADD      r3,r6,r3,LSL #1       ;1403
000656  b2e4              UXTB     r4,r4                 ;1401
000658  443b              ADD      r3,r3,r7              ;1403
00065a  b289              UXTH     r1,r1                 ;1403
00065c  2c03              CMP      r4,#3                 ;1401
00065e  d3f3              BCC      |L9.1608|
                  |L9.1632|
000660  71d3              STRB     r3,[r2,#7]            ;1406
000662  5c6c              LDRB     r4,[r5,r1]            ;1409
000664  1c49              ADDS     r1,r1,#1              ;1409
000666  2300              MOVS     r3,#0                 ;1407
000668  b289              UXTH     r1,r1                 ;1409
00066a  2c2c              CMP      r4,#0x2c              ;1409
00066c  d10c              BNE      |L9.1672|
00066e  2400              MOVS     r4,#0                 ;1411
                  |L9.1648|
000670  5c6f              LDRB     r7,[r5,r1]            ;1413
000672  eb030383          ADD      r3,r3,r3,LSL #2       ;1413
000676  1c49              ADDS     r1,r1,#1              ;1413
000678  1c64              ADDS     r4,r4,#1              ;1413
00067a  eb060343          ADD      r3,r6,r3,LSL #1       ;1413
00067e  b2e4              UXTB     r4,r4                 ;1411
000680  443b              ADD      r3,r3,r7              ;1413
000682  b289              UXTH     r1,r1                 ;1413
000684  2c03              CMP      r4,#3                 ;1411
000686  d3f3              BCC      |L9.1648|
                  |L9.1672|
000688  f8803052          STRB     r3,[r0,#0x52]         ;1416
00068c  5c6f              LDRB     r7,[r5,r1]            ;1419
00068e  1c49              ADDS     r1,r1,#1              ;1419
000690  2300              MOVS     r3,#0                 ;1417
000692  b28c              UXTH     r4,r1                 ;1419
000694  2f2c              CMP      r7,#0x2c              ;1419
000696  d10c              BNE      |L9.1714|
000698  2100              MOVS     r1,#0                 ;1421
                  |L9.1690|
00069a  5d2f              LDRB     r7,[r5,r4]            ;1423
00069c  eb030383          ADD      r3,r3,r3,LSL #2       ;1423
0006a0  1c64              ADDS     r4,r4,#1              ;1423
0006a2  1c49              ADDS     r1,r1,#1              ;1423
0006a4  eb060343          ADD      r3,r6,r3,LSL #1       ;1423
0006a8  b2c9              UXTB     r1,r1                 ;1421
0006aa  443b              ADD      r3,r3,r7              ;1423
0006ac  b2a4              UXTH     r4,r4                 ;1423
0006ae  2906              CMP      r1,#6                 ;1421
0006b0  d3f3              BCC      |L9.1690|
                  |L9.1714|
0006b2  eb030183          ADD      r1,r3,r3,LSL #2       ;1426
0006b6  0049              LSLS     r1,r1,#1              ;1426
0006b8  6641              STR      r1,[r0,#0x64]         ;1426  ; Para
0006ba  7950              LDRB     r0,[r2,#5]            ;1429  ; MODE
                  |L9.1724|
0006bc  f7fffffe          BL       MODE_PARASET
0006c0  e36a              B        |L9.3480|
                  |L9.1730|
0006c2  5d29              LDRB     r1,[r5,r4]            ;1436
0006c4  293f              CMP      r1,#0x3f              ;1436
0006c6  d07d              BEQ      |L9.1988|
0006c8  2c0b              CMP      r4,#0xb               ;1445
0006ca  d10d              BNE      |L9.1768|
0006cc  2000              MOVS     r0,#0                 ;1447
0006ce  4607              MOV      r7,r0                 ;1447
                  |L9.1744|
0006d0  5d29              LDRB     r1,[r5,r4]            ;1449
0006d2  eb070287          ADD      r2,r7,r7,LSL #2       ;1449
0006d6  eb060242          ADD      r2,r6,r2,LSL #1       ;1449
0006da  1c64              ADDS     r4,r4,#1              ;1449
0006dc  1c40              ADDS     r0,r0,#1              ;1449
0006de  188f              ADDS     r7,r1,r2              ;1449
0006e0  b2c0              UXTB     r0,r0                 ;1447
0006e2  b2a4              UXTH     r4,r4                 ;1449
0006e4  2802              CMP      r0,#2                 ;1447
0006e6  d3f3              BCC      |L9.1744|
                  |L9.1768|
0006e8  f8df9328          LDR      r9,|L9.2580|
0006ec  f8897005          STRB     r7,[r9,#5]            ;1452
0006f0  f8990005          LDRB     r0,[r9,#5]            ;1455  ; MODE
0006f4  2700              MOVS     r7,#0                 ;1453
0006f6  f8df8320          LDR      r8,|L9.2584|
0006fa  f6432198          MOV      r1,#0x3a98            ;1478
0006fe  b1c0              CBZ      r0,|L9.1842|
000700  f8990005          LDRB     r0,[r9,#5]            ;1499  ; MODE
000704  464b              MOV      r3,r9                 ;1499
000706  2801              CMP      r0,#1                 ;1499
000708  d05d              BEQ      |L9.1990|
00070a  7958              LDRB     r0,[r3,#5]            ;1528  ; MODE
00070c  2802              CMP      r0,#2                 ;1528
00070e  d07d              BEQ      |L9.2060|
000710  f8990005          LDRB     r0,[r9,#5]            ;1564  ; MODE
000714  464a              MOV      r2,r9                 ;1564
000716  2803              CMP      r0,#3                 ;1564
000718  d079              BEQ      |L9.2062|
00071a  7950              LDRB     r0,[r2,#5]            ;1596  ; MODE
00071c  2804              CMP      r0,#4                 ;1596
00071e  d077              BEQ      |L9.2064|
000720  f8991005          LDRB     r1,[r9,#5]            ;1639  ; MODE
000724  4648              MOV      r0,r9                 ;1639
000726  2905              CMP      r1,#5                 ;1639
000728  d073              BEQ      |L9.2066|
00072a  7941              LDRB     r1,[r0,#5]            ;1670  ; MODE
00072c  2906              CMP      r1,#6                 ;1670
00072e  d071              BEQ      |L9.2068|
000730  e1e0              B        |L9.2804|
                  |L9.1842|
000732  5d2a              LDRB     r2,[r5,r4]            ;1457
000734  1c64              ADDS     r4,r4,#1              ;1457
000736  b2a0              UXTH     r0,r4                 ;1457
000738  2a2c              CMP      r2,#0x2c              ;1457
00073a  d106              BNE      |L9.1866|
00073c  2200              MOVS     r2,#0                 ;1459
                  |L9.1854|
00073e  1c40              ADDS     r0,r0,#1              ;1459
000740  1c52              ADDS     r2,r2,#1              ;1461
000742  b2d2              UXTB     r2,r2                 ;1459
000744  b280              UXTH     r0,r0                 ;1461
000746  2a06              CMP      r2,#6                 ;1459
000748  d3f9              BCC      |L9.1854|
                  |L9.1866|
00074a  5c2b              LDRB     r3,[r5,r0]            ;1467
00074c  1c40              ADDS     r0,r0,#1              ;1467
00074e  2200              MOVS     r2,#0                 ;1465
000750  b284              UXTH     r4,r0                 ;1467
000752  2b2c              CMP      r3,#0x2c              ;1467
000754  d10c              BNE      |L9.1904|
000756  2000              MOVS     r0,#0                 ;1469
                  |L9.1880|
000758  5d2b              LDRB     r3,[r5,r4]            ;1471
00075a  eb020282          ADD      r2,r2,r2,LSL #2       ;1471
00075e  1c64              ADDS     r4,r4,#1              ;1471
000760  1c40              ADDS     r0,r0,#1              ;1471
000762  eb060242          ADD      r2,r6,r2,LSL #1       ;1471
000766  b2c0              UXTB     r0,r0                 ;1469
000768  441a              ADD      r2,r2,r3              ;1471
00076a  b2a4              UXTH     r4,r4                 ;1471
00076c  2805              CMP      r0,#5                 ;1469
00076e  d3f3              BCC      |L9.1880|
                  |L9.1904|
000770  f8ca2014          STR      r2,[r10,#0x14]        ;1474  ; Para
000774  f8da0014          LDR      r0,[r10,#0x14]        ;1478  ; Para
000778  2700              MOVS     r7,#0                 ;1475
00077a  4288              CMP      r0,r1                 ;1478
00077c  d907              BLS      |L9.1934|
00077e  2001              MOVS     r0,#1                 ;1480
000780  f8c80020          STR      r0,[r8,#0x20]         ;1480  ; Run_Control
000784  02c1              LSLS     r1,r0,#11             ;1481
000786  48a5              LDR      r0,|L9.2588|
000788  f7fffffe          BL       GPIO_ResetBits
00078c  e007              B        |L9.1950|
                  |L9.1934|
00078e  2000              MOVS     r0,#0                 ;1483
000790  f8c80020          STR      r0,[r8,#0x20]         ;1483  ; Run_Control
000794  f44f6100          MOV      r1,#0x800             ;1484
000798  48a0              LDR      r0,|L9.2588|
00079a  f7fffffe          BL       GPIO_SetBits
                  |L9.1950|
00079e  5d28              LDRB     r0,[r5,r4]            ;1486
0007a0  1c64              ADDS     r4,r4,#1              ;1486
0007a2  b2a4              UXTH     r4,r4                 ;1486
0007a4  282c              CMP      r0,#0x2c              ;1486
0007a6  d10c              BNE      |L9.1986|
0007a8  2000              MOVS     r0,#0                 ;1488
                  |L9.1962|
0007aa  5d29              LDRB     r1,[r5,r4]            ;1490
0007ac  eb070287          ADD      r2,r7,r7,LSL #2       ;1490
0007b0  eb060242          ADD      r2,r6,r2,LSL #1       ;1490
0007b4  1c64              ADDS     r4,r4,#1              ;1490
0007b6  188f              ADDS     r7,r1,r2              ;1490
0007b8  1c40              ADDS     r0,r0,#1              ;1490
0007ba  b2a4              UXTH     r4,r4                 ;1490
0007bc  f01000ff          ANDS     r0,r0,#0xff           ;1488
0007c0  d0f3              BEQ      |L9.1962|
                  |L9.1986|
0007c2  e11a              B        |L9.2554|
                  |L9.1988|
0007c4  e21d              B        |L9.3074|
                  |L9.1990|
0007c6  5d29              LDRB     r1,[r5,r4]            ;1500
0007c8  1c64              ADDS     r4,r4,#1              ;1500
0007ca  b2a0              UXTH     r0,r4                 ;1500
0007cc  292c              CMP      r1,#0x2c              ;1500
0007ce  d10c              BNE      |L9.2026|
0007d0  2100              MOVS     r1,#0                 ;1502
                  |L9.2002|
0007d2  5c2a              LDRB     r2,[r5,r0]            ;1504
0007d4  eb070487          ADD      r4,r7,r7,LSL #2       ;1504
0007d8  eb060444          ADD      r4,r6,r4,LSL #1       ;1504
0007dc  1c40              ADDS     r0,r0,#1              ;1504
0007de  1c49              ADDS     r1,r1,#1              ;1504
0007e0  1917              ADDS     r7,r2,r4              ;1504
0007e2  b2c9              UXTB     r1,r1                 ;1502
0007e4  b280              UXTH     r0,r0                 ;1504
0007e6  2906              CMP      r1,#6                 ;1502
0007e8  d3f3              BCC      |L9.2002|
                  |L9.2026|
0007ea  4654              MOV      r4,r10                ;1507
0007ec  f8ca706c          STR      r7,[r10,#0x6c]        ;1507  ; Para
0007f0  5c29              LDRB     r1,[r5,r0]            ;1510
0007f2  1c40              ADDS     r0,r0,#1              ;1510
0007f4  2200              MOVS     r2,#0                 ;1508
0007f6  b280              UXTH     r0,r0                 ;1510
0007f8  292c              CMP      r1,#0x2c              ;1510
0007fa  d112              BNE      |L9.2082|
0007fc  2100              MOVS     r1,#0                 ;1512
                  |L9.2046|
0007fe  5c2f              LDRB     r7,[r5,r0]            ;1514
000800  eb020282          ADD      r2,r2,r2,LSL #2       ;1514
000804  eb060242          ADD      r2,r6,r2,LSL #1       ;1514
000808  443a              ADD      r2,r2,r7              ;1514
00080a  e004              B        |L9.2070|
                  |L9.2060|
00080c  e020              B        |L9.2128|
                  |L9.2062|
00080e  e06d              B        |L9.2284|
                  |L9.2064|
000810  e0ab              B        |L9.2410|
                  |L9.2066|
000812  e108              B        |L9.2598|
                  |L9.2068|
000814  e13a              B        |L9.2700|
                  |L9.2070|
000816  1c40              ADDS     r0,r0,#1              ;1514
000818  1c49              ADDS     r1,r1,#1              ;1514
00081a  b2c9              UXTB     r1,r1                 ;1512
00081c  b280              UXTH     r0,r0                 ;1514
00081e  2905              CMP      r1,#5                 ;1512
000820  d3ed              BCC      |L9.2046|
                  |L9.2082|
000822  f8a42070          STRH     r2,[r4,#0x70]         ;1517
000826  5c2a              LDRB     r2,[r5,r0]            ;1520
000828  1c40              ADDS     r0,r0,#1              ;1520
00082a  2100              MOVS     r1,#0                 ;1518
00082c  b284              UXTH     r4,r0                 ;1520
00082e  2a2c              CMP      r2,#0x2c              ;1520
000830  d10c              BNE      |L9.2124|
000832  2000              MOVS     r0,#0                 ;1522
                  |L9.2100|
000834  5d2a              LDRB     r2,[r5,r4]            ;1524
000836  1c64              ADDS     r4,r4,#1              ;1524
000838  eb010181          ADD      r1,r1,r1,LSL #2       ;1524
00083c  eb060141          ADD      r1,r6,r1,LSL #1       ;1524
000840  1c40              ADDS     r0,r0,#1              ;1524
000842  4411              ADD      r1,r1,r2              ;1524
000844  b2a4              UXTH     r4,r4                 ;1524
000846  f01000ff          ANDS     r0,r0,#0xff           ;1522
00084a  d0f3              BEQ      |L9.2100|
                  |L9.2124|
00084c  7199              STRB     r1,[r3,#6]            ;1527
00084e  e151              B        |L9.2804|
                  |L9.2128|
000850  2001              MOVS     r0,#1                 ;1529
000852  f8c80020          STR      r0,[r8,#0x20]         ;1529  ; Run_Control
000856  02c1              LSLS     r1,r0,#11             ;1530
000858  4870              LDR      r0,|L9.2588|
00085a  f7fffffe          BL       GPIO_ResetBits
00085e  5d29              LDRB     r1,[r5,r4]            ;1531
000860  1c64              ADDS     r4,r4,#1              ;1531
000862  b2a0              UXTH     r0,r4                 ;1531
000864  292c              CMP      r1,#0x2c              ;1531
000866  d10c              BNE      |L9.2178|
000868  2100              MOVS     r1,#0                 ;1533
                  |L9.2154|
00086a  5c2a              LDRB     r2,[r5,r0]            ;1535
00086c  eb070387          ADD      r3,r7,r7,LSL #2       ;1535
000870  eb060343          ADD      r3,r6,r3,LSL #1       ;1535
000874  1c40              ADDS     r0,r0,#1              ;1535
000876  1c49              ADDS     r1,r1,#1              ;1535
000878  18d7              ADDS     r7,r2,r3              ;1535
00087a  b2c9              UXTB     r1,r1                 ;1533
00087c  b280              UXTH     r0,r0                 ;1535
00087e  2906              CMP      r1,#6                 ;1533
000880  d3f3              BCC      |L9.2154|
                  |L9.2178|
000882  4653              MOV      r3,r10                ;1538
000884  f8ca7044          STR      r7,[r10,#0x44]        ;1538  ; Para
000888  5c2a              LDRB     r2,[r5,r0]            ;1541
00088a  1c40              ADDS     r0,r0,#1              ;1541
00088c  2100              MOVS     r1,#0                 ;1539
00088e  b280              UXTH     r0,r0                 ;1541
000890  2a2c              CMP      r2,#0x2c              ;1541
000892  d10c              BNE      |L9.2222|
000894  2200              MOVS     r2,#0                 ;1543
                  |L9.2198|
000896  5c2c              LDRB     r4,[r5,r0]            ;1545
000898  eb010181          ADD      r1,r1,r1,LSL #2       ;1545
00089c  1c40              ADDS     r0,r0,#1              ;1545
00089e  1c52              ADDS     r2,r2,#1              ;1545
0008a0  eb060141          ADD      r1,r6,r1,LSL #1       ;1545
0008a4  b2d2              UXTB     r2,r2                 ;1543
0008a6  4421              ADD      r1,r1,r4              ;1545
0008a8  b280              UXTH     r0,r0                 ;1545
0008aa  2a05              CMP      r2,#5                 ;1543
0008ac  d3f3              BCC      |L9.2198|
                  |L9.2222|
0008ae  f8a31048          STRH     r1,[r3,#0x48]         ;1548
0008b2  5c2a              LDRB     r2,[r5,r0]            ;1551
0008b4  1c40              ADDS     r0,r0,#1              ;1551
0008b6  2100              MOVS     r1,#0                 ;1549
0008b8  b284              UXTH     r4,r0                 ;1551
0008ba  2a2c              CMP      r2,#0x2c              ;1551
0008bc  d10c              BNE      |L9.2264|
0008be  2000              MOVS     r0,#0                 ;1553
                  |L9.2240|
0008c0  5d2a              LDRB     r2,[r5,r4]            ;1555
0008c2  1c64              ADDS     r4,r4,#1              ;1555
0008c4  eb010181          ADD      r1,r1,r1,LSL #2       ;1555
0008c8  eb060141          ADD      r1,r6,r1,LSL #1       ;1555
0008cc  1c40              ADDS     r0,r0,#1              ;1555
0008ce  4411              ADD      r1,r1,r2              ;1555
0008d0  b2a4              UXTH     r4,r4                 ;1555
0008d2  f01000ff          ANDS     r0,r0,#0xff           ;1553
0008d6  d0f3              BEQ      |L9.2240|
                  |L9.2264|
0008d8  f8891006          STRB     r1,[r9,#6]            ;1558
0008dc  f8990006          LDRB     r0,[r9,#6]            ;1560  ; mainswitch
0008e0  2801              CMP      r0,#1                 ;1560
0008e2  d102              BNE      |L9.2282|
0008e4  494e              LDR      r1,|L9.2592|
0008e6  2000              MOVS     r0,#0                 ;1562
0008e8  7008              STRB     r0,[r1,#0]            ;1562
                  |L9.2282|
0008ea  e103              B        |L9.2804|
                  |L9.2284|
0008ec  5d29              LDRB     r1,[r5,r4]            ;1565
0008ee  1c64              ADDS     r4,r4,#1              ;1565
0008f0  b2a0              UXTH     r0,r4                 ;1565
0008f2  292c              CMP      r1,#0x2c              ;1565
0008f4  d10c              BNE      |L9.2320|
0008f6  2100              MOVS     r1,#0                 ;1567
                  |L9.2296|
0008f8  5c2b              LDRB     r3,[r5,r0]            ;1569
0008fa  eb070487          ADD      r4,r7,r7,LSL #2       ;1569
0008fe  eb060444          ADD      r4,r6,r4,LSL #1       ;1569
000902  1c40              ADDS     r0,r0,#1              ;1569
000904  1c49              ADDS     r1,r1,#1              ;1569
000906  191f              ADDS     r7,r3,r4              ;1569
000908  b2c9              UXTB     r1,r1                 ;1567
00090a  b280              UXTH     r0,r0                 ;1569
00090c  2906              CMP      r1,#6                 ;1567
00090e  d3f3              BCC      |L9.2296|
                  |L9.2320|
000910  4654              MOV      r4,r10                ;1572
000912  f8ca706c          STR      r7,[r10,#0x6c]        ;1572  ; Para
000916  5c2b              LDRB     r3,[r5,r0]            ;1576
000918  1c40              ADDS     r0,r0,#1              ;1576
00091a  2100              MOVS     r1,#0                 ;1573
00091c  b280              UXTH     r0,r0                 ;1576
00091e  2b2c              CMP      r3,#0x2c              ;1576
000920  d10c              BNE      |L9.2364|
000922  2300              MOVS     r3,#0                 ;1578
                  |L9.2340|
000924  5c2f              LDRB     r7,[r5,r0]            ;1580
000926  eb010181          ADD      r1,r1,r1,LSL #2       ;1580
00092a  1c40              ADDS     r0,r0,#1              ;1580
00092c  1c5b              ADDS     r3,r3,#1              ;1580
00092e  eb060141          ADD      r1,r6,r1,LSL #1       ;1580
000932  b2db              UXTB     r3,r3                 ;1578
000934  4439              ADD      r1,r1,r7              ;1580
000936  b280              UXTH     r0,r0                 ;1580
000938  2b05              CMP      r3,#5                 ;1578
00093a  d3f3              BCC      |L9.2340|
                  |L9.2364|
00093c  f8a41070          STRH     r1,[r4,#0x70]         ;1583
000940  5c2b              LDRB     r3,[r5,r0]            ;1586
000942  1c40              ADDS     r0,r0,#1              ;1586
000944  2100              MOVS     r1,#0                 ;1584
000946  b284              UXTH     r4,r0                 ;1586
000948  2b2c              CMP      r3,#0x2c              ;1586
00094a  d10c              BNE      |L9.2406|
00094c  2000              MOVS     r0,#0                 ;1588
                  |L9.2382|
00094e  5d2b              LDRB     r3,[r5,r4]            ;1590
000950  1c64              ADDS     r4,r4,#1              ;1590
000952  eb010181          ADD      r1,r1,r1,LSL #2       ;1590
000956  eb060141          ADD      r1,r6,r1,LSL #1       ;1590
00095a  1c40              ADDS     r0,r0,#1              ;1590
00095c  4419              ADD      r1,r1,r3              ;1590
00095e  b2a4              UXTH     r4,r4                 ;1590
000960  f01000ff          ANDS     r0,r0,#0xff           ;1588
000964  d0f3              BEQ      |L9.2382|
                  |L9.2406|
000966  7191              STRB     r1,[r2,#6]            ;1593
000968  e0c4              B        |L9.2804|
                  |L9.2410|
00096a  5d2a              LDRB     r2,[r5,r4]            ;1597
00096c  1c64              ADDS     r4,r4,#1              ;1597
00096e  b2a0              UXTH     r0,r4                 ;1597
000970  2a2c              CMP      r2,#0x2c              ;1597
000972  d106              BNE      |L9.2434|
000974  2200              MOVS     r2,#0                 ;1599
                  |L9.2422|
000976  1c40              ADDS     r0,r0,#1              ;1599
000978  1c52              ADDS     r2,r2,#1              ;1601
00097a  b2d2              UXTB     r2,r2                 ;1599
00097c  b280              UXTH     r0,r0                 ;1601
00097e  2a06              CMP      r2,#6                 ;1599
000980  d3f9              BCC      |L9.2422|
                  |L9.2434|
000982  5c2b              LDRB     r3,[r5,r0]            ;1607
000984  1c40              ADDS     r0,r0,#1              ;1607
000986  2200              MOVS     r2,#0                 ;1605
000988  b284              UXTH     r4,r0                 ;1607
00098a  2b2c              CMP      r3,#0x2c              ;1607
00098c  d10c              BNE      |L9.2472|
00098e  2000              MOVS     r0,#0                 ;1609
                  |L9.2448|
000990  5d2b              LDRB     r3,[r5,r4]            ;1611
000992  eb020282          ADD      r2,r2,r2,LSL #2       ;1611
000996  1c64              ADDS     r4,r4,#1              ;1611
000998  1c40              ADDS     r0,r0,#1              ;1611
00099a  eb060242          ADD      r2,r6,r2,LSL #1       ;1611
00099e  b2c0              UXTB     r0,r0                 ;1609
0009a0  441a              ADD      r2,r2,r3              ;1611
0009a2  b2a4              UXTH     r4,r4                 ;1611
0009a4  2805              CMP      r0,#5                 ;1609
0009a6  d3f3              BCC      |L9.2448|
                  |L9.2472|
0009a8  f8ca2014          STR      r2,[r10,#0x14]        ;1614  ; Para
0009ac  f8da0014          LDR      r0,[r10,#0x14]        ;1618  ; Para
0009b0  2700              MOVS     r7,#0                 ;1615
0009b2  4288              CMP      r0,r1                 ;1618
0009b4  d907              BLS      |L9.2502|
0009b6  2001              MOVS     r0,#1                 ;1620
0009b8  f8c80020          STR      r0,[r8,#0x20]         ;1620  ; Run_Control
0009bc  02c1              LSLS     r1,r0,#11             ;1621
0009be  4817              LDR      r0,|L9.2588|
0009c0  f7fffffe          BL       GPIO_ResetBits
0009c4  e007              B        |L9.2518|
                  |L9.2502|
0009c6  2000              MOVS     r0,#0                 ;1623
0009c8  f8c80020          STR      r0,[r8,#0x20]         ;1623  ; Run_Control
0009cc  f44f6100          MOV      r1,#0x800             ;1624
0009d0  4812              LDR      r0,|L9.2588|
0009d2  f7fffffe          BL       GPIO_SetBits
                  |L9.2518|
0009d6  5d28              LDRB     r0,[r5,r4]            ;1626
0009d8  1c64              ADDS     r4,r4,#1              ;1626
0009da  b2a4              UXTH     r4,r4                 ;1626
0009dc  282c              CMP      r0,#0x2c              ;1626
0009de  d10c              BNE      |L9.2554|
0009e0  2000              MOVS     r0,#0                 ;1628
                  |L9.2530|
0009e2  5d29              LDRB     r1,[r5,r4]            ;1630
0009e4  eb070287          ADD      r2,r7,r7,LSL #2       ;1630
0009e8  eb060242          ADD      r2,r6,r2,LSL #1       ;1630
0009ec  1c64              ADDS     r4,r4,#1              ;1630
0009ee  188f              ADDS     r7,r1,r2              ;1630
0009f0  1c40              ADDS     r0,r0,#1              ;1630
0009f2  b2a4              UXTH     r4,r4                 ;1630
0009f4  f01000ff          ANDS     r0,r0,#0xff           ;1628
0009f8  d0f3              BEQ      |L9.2530|
                  |L9.2554|
0009fa  f8897006          STRB     r7,[r9,#6]            ;1633
0009fe  f8990006          LDRB     r0,[r9,#6]            ;1634  ; mainswitch
000a02  bbe8              CBNZ     r0,|L9.2688|
000a04  2001              MOVS     r0,#1                 ;1636
000a06  f8c80020          STR      r0,[r8,#0x20]         ;1636  ; Run_Control
000a0a  02c1              LSLS     r1,r0,#11             ;1637
000a0c  4803              LDR      r0,|L9.2588|
000a0e  f7fffffe          BL       GPIO_ResetBits
000a12  e06f              B        |L9.2804|
                  |L9.2580|
                          DCD      ||.data||
                  |L9.2584|
                          DCD      Run_Control
                  |L9.2588|
                          DCD      0x40020800
                  |L9.2592|
                          DCD      finishflag
                  |L9.2596|
000a24  e161              B        |L9.3306|
                  |L9.2598|
000a26  5d2a              LDRB     r2,[r5,r4]            ;1640
000a28  1c64              ADDS     r4,r4,#1              ;1640
000a2a  b2a1              UXTH     r1,r4                 ;1640
000a2c  2a2c              CMP      r2,#0x2c              ;1640
000a2e  d106              BNE      |L9.2622|
000a30  2200              MOVS     r2,#0                 ;1642
                  |L9.2610|
000a32  1c49              ADDS     r1,r1,#1              ;1642
000a34  1c52              ADDS     r2,r2,#1              ;1644
000a36  b2d2              UXTB     r2,r2                 ;1642
000a38  b289              UXTH     r1,r1                 ;1644
000a3a  2a06              CMP      r2,#6                 ;1642
000a3c  d3f9              BCC      |L9.2610|
                  |L9.2622|
000a3e  5c6a              LDRB     r2,[r5,r1]            ;1649
000a40  1c49              ADDS     r1,r1,#1              ;1649
000a42  b289              UXTH     r1,r1                 ;1649
000a44  2a2c              CMP      r2,#0x2c              ;1649
000a46  d106              BNE      |L9.2646|
000a48  2200              MOVS     r2,#0                 ;1651
                  |L9.2634|
000a4a  1c49              ADDS     r1,r1,#1              ;1651
000a4c  1c52              ADDS     r2,r2,#1              ;1653
000a4e  b2d2              UXTB     r2,r2                 ;1651
000a50  b289              UXTH     r1,r1                 ;1653
000a52  2a05              CMP      r2,#5                 ;1651
000a54  d3f9              BCC      |L9.2634|
                  |L9.2646|
000a56  5c6b              LDRB     r3,[r5,r1]            ;1658
000a58  1c49              ADDS     r1,r1,#1              ;1658
000a5a  2200              MOVS     r2,#0                 ;1656
000a5c  b28c              UXTH     r4,r1                 ;1658
000a5e  2b2c              CMP      r3,#0x2c              ;1658
000a60  d10c              BNE      |L9.2684|
000a62  2100              MOVS     r1,#0                 ;1660
                  |L9.2660|
000a64  5d2b              LDRB     r3,[r5,r4]            ;1662
000a66  1c64              ADDS     r4,r4,#1              ;1662
000a68  eb020282          ADD      r2,r2,r2,LSL #2       ;1662
000a6c  eb060242          ADD      r2,r6,r2,LSL #1       ;1662
000a70  1c49              ADDS     r1,r1,#1              ;1662
000a72  441a              ADD      r2,r2,r3              ;1662
000a74  b2a4              UXTH     r4,r4                 ;1662
000a76  f01101ff          ANDS     r1,r1,#0xff           ;1660
000a7a  d0f3              BEQ      |L9.2660|
                  |L9.2684|
000a7c  7182              STRB     r2,[r0,#6]            ;1665
000a7e  e000              B        |L9.2690|
                  |L9.2688|
000a80  e038              B        |L9.2804|
                  |L9.2690|
000a82  7981              LDRB     r1,[r0,#6]            ;1666  ; mainswitch
000a84  bbb1              CBNZ     r1,|L9.2804|
000a86  2100              MOVS     r1,#0                 ;1668
000a88  7181              STRB     r1,[r0,#6]            ;1668
000a8a  e033              B        |L9.2804|
                  |L9.2700|
000a8c  5d2a              LDRB     r2,[r5,r4]            ;1671
000a8e  1c64              ADDS     r4,r4,#1              ;1671
000a90  b2a1              UXTH     r1,r4                 ;1671
000a92  2a2c              CMP      r2,#0x2c              ;1671
000a94  d106              BNE      |L9.2724|
000a96  2200              MOVS     r2,#0                 ;1673
                  |L9.2712|
000a98  1c49              ADDS     r1,r1,#1              ;1673
000a9a  1c52              ADDS     r2,r2,#1              ;1675
000a9c  b2d2              UXTB     r2,r2                 ;1673
000a9e  b289              UXTH     r1,r1                 ;1675
000aa0  2a06              CMP      r2,#6                 ;1673
000aa2  d3f9              BCC      |L9.2712|
                  |L9.2724|
000aa4  5c6a              LDRB     r2,[r5,r1]            ;1680
000aa6  1c49              ADDS     r1,r1,#1              ;1680
000aa8  b289              UXTH     r1,r1                 ;1680
000aaa  2a2c              CMP      r2,#0x2c              ;1680
000aac  d10e              BNE      |L9.2764|
000aae  2200              MOVS     r2,#0                 ;1682
                  |L9.2736|
000ab0  1c49              ADDS     r1,r1,#1              ;1682
000ab2  b289              UXTH     r1,r1                 ;1684
000ab4  1c52              ADDS     r2,r2,#1              ;1684
000ab6  e006              B        |L9.2758|
                  |L9.2744|
000ab8  e152              B        |L9.3424|
                  |L9.2746|
000aba  e0f6              B        |L9.3242|
                  |L9.2748|
000abc  e0a8              B        |L9.3088|
                  |L9.2750|
000abe  e020              B        |L9.2818|
                  |L9.2752|
000ac0  e087              B        |L9.3026|
                  |L9.2754|
000ac2  e111              B        |L9.3304|
                  |L9.2756|
000ac4  e168              B        |L9.3480|
                  |L9.2758|
000ac6  b2d2              UXTB     r2,r2                 ;1682
000ac8  2a05              CMP      r2,#5                 ;1682
000aca  d3f1              BCC      |L9.2736|
                  |L9.2764|
000acc  5c6b              LDRB     r3,[r5,r1]            ;1689
000ace  1c49              ADDS     r1,r1,#1              ;1689
000ad0  2200              MOVS     r2,#0                 ;1687
000ad2  b28c              UXTH     r4,r1                 ;1689
000ad4  2b2c              CMP      r3,#0x2c              ;1689
000ad6  d10c              BNE      |L9.2802|
000ad8  2100              MOVS     r1,#0                 ;1691
                  |L9.2778|
000ada  5d2b              LDRB     r3,[r5,r4]            ;1693
000adc  1c64              ADDS     r4,r4,#1              ;1693
000ade  eb020282          ADD      r2,r2,r2,LSL #2       ;1693
000ae2  eb060242          ADD      r2,r6,r2,LSL #1       ;1693
000ae6  1c49              ADDS     r1,r1,#1              ;1693
000ae8  441a              ADD      r2,r2,r3              ;1693
000aea  b2a4              UXTH     r4,r4                 ;1693
000aec  f01101ff          ANDS     r1,r1,#0xff           ;1691
000af0  d0f3              BEQ      |L9.2778|
                  |L9.2802|
000af2  7182              STRB     r2,[r0,#6]            ;1696
                  |L9.2804|
000af4  f7fffffe          BL       Off_GPOI_ResetSet
000af8  f8990006          LDRB     r0,[r9,#6]            ;1702  ; mainswitch
000afc  f7fffffe          BL       LIST_ONOFF
000b00  e14a              B        |L9.3480|
                  |L9.2818|
000b02  5d28              LDRB     r0,[r5,r4]            ;1709
000b04  2309              MOVS     r3,#9                 ;1708
000b06  283f              CMP      r0,#0x3f              ;1709
000b08  d002              BEQ      |L9.2832|
000b0a  2201              MOVS     r2,#1                 ;1718
000b0c  2100              MOVS     r1,#0                 ;1719
000b0e  e022              B        |L9.2902|
                  |L9.2832|
000b10  eeb58ac0          VCMPE.F32 s16,#0.0              ;1711
000b14  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1711
000b18  db01              BLT      |L9.2846|
000b1a  202b              MOVS     r0,#0x2b              ;1711
000b1c  e000              B        |L9.2848|
                  |L9.2846|
000b1e  202d              MOVS     r0,#0x2d              ;1711
                  |L9.2848|
000b20  5528              STRB     r0,[r5,r4]            ;1711
000b22  1c64              ADDS     r4,r4,#1              ;1711
000b24  b2a4              UXTH     r4,r4                 ;1711
000b26  ee180a10          VMOV     r0,s16                ;1712
000b2a  f7fffffe          BL       __aeabi_f2d
000b2e  ec410b10          VMOV     d0,r0,r1              ;1712
000b32  1928              ADDS     r0,r5,r4              ;1712
000b34  ec532b10          VMOV     r2,r3,d0              ;1712
000b38  a19c              ADR      r1,|L9.3500|
000b3a  f7fffffe          BL       __2sprintf
000b3e  3409              ADDS     r4,r4,#9              ;1712
000b40  e0d2              B        |L9.3304|
                  |L9.2882|
000b42  b141              CBZ      r1,|L9.2902|
000b44  2905              CMP      r1,#5                 ;1721
000b46  d006              BEQ      |L9.2902|
000b48  1860              ADDS     r0,r4,r1              ;1723
000b4a  5c28              LDRB     r0,[r5,r0]            ;1723
000b4c  f7fffffe          BL       IsDigitChar
000b50  2801              CMP      r0,#1                 ;1723
000b52  d000              BEQ      |L9.2902|
000b54  2200              MOVS     r2,#0                 ;1729
                  |L9.2902|
000b56  1c49              ADDS     r1,r1,#1              ;1729
000b58  b2c9              UXTB     r1,r1                 ;1719
000b5a  4299              CMP      r1,r3                 ;1719
000b5c  d3f1              BCC      |L9.2882|
000b5e  2a00              CMP      r2,#0                 ;1732
                  |L9.2912|
000b60  f43faa65          BEQ      |L9.46|
000b64  18e0              ADDS     r0,r4,r3              ;1732
000b66  5c28              LDRB     r0,[r5,r0]            ;1732
000b68  280d              CMP      r0,#0xd               ;1732
                  |L9.2922|
000b6a  f47faa60          BNE      |L9.46|
000b6e  2200              MOVS     r2,#0                 ;1737
000b70  4610              MOV      r0,r2                 ;1738
000b72  e00d              B        |L9.2960|
                  |L9.2932|
000b74  b160              CBZ      r0,|L9.2960|
000b76  2801              CMP      r0,#1                 ;1744
000b78  d016              BEQ      |L9.2984|
000b7a  2805              CMP      r0,#5                 ;1749
000b7c  d005              BEQ      |L9.2954|
000b7e  5d29              LDRB     r1,[r5,r4]            ;1755
000b80  eb020282          ADD      r2,r2,r2,LSL #2       ;1755
000b84  eb060242          ADD      r2,r6,r2,LSL #1       ;1755
000b88  440a              ADD      r2,r2,r1              ;1755
                  |L9.2954|
000b8a  1c64              ADDS     r4,r4,#1              ;1755
000b8c  b2a4              UXTH     r4,r4                 ;1751
000b8e  e015              B        |L9.3004|
                  |L9.2960|
000b90  5d29              LDRB     r1,[r5,r4]            ;1742
000b92  3930              SUBS     r1,r1,#0x30           ;1742
000b94  eb010181          ADD      r1,r1,r1,LSL #2       ;1742
000b98  0049              LSLS     r1,r1,#1              ;1742
000b9a  ee001a10          VMOV     s0,r1                 ;1742
000b9e  1c64              ADDS     r4,r4,#1              ;1742
000ba0  b2a4              UXTH     r4,r4                 ;1742
000ba2  eeb80ac0          VCVT.F32.S32 s0,s0                 ;1742
000ba6  e009              B        |L9.3004|
                  |L9.2984|
000ba8  5d29              LDRB     r1,[r5,r4]            ;1746
000baa  1c64              ADDS     r4,r4,#1              ;1746
000bac  3930              SUBS     r1,r1,#0x30           ;1746
000bae  ee001a90          VMOV     s1,r1                 ;1746
000bb2  b2a4              UXTH     r4,r4                 ;1746
000bb4  eef80ae0          VCVT.F32.S32 s1,s1                 ;1746
000bb8  ee300a80          VADD.F32 s0,s1,s0              ;1746
                  |L9.3004|
000bbc  1c40              ADDS     r0,r0,#1              ;1746
000bbe  b2c0              UXTB     r0,r0                 ;1738
000bc0  4298              CMP      r0,r3                 ;1738
000bc2  d3d7              BCC      |L9.2932|
000bc4  eebc0ac0          VCVT.U32.F32 s0,s0                 ;1757
000bc8  ee100a10          VMOV     r0,s0                 ;1757
000bcc  b2c1              UXTB     r1,r0                 ;1757
000bce  2000              MOVS     r0,#0                 ;1757
000bd0  e0ba              B        |L9.3400|
                  |L9.3026|
000bd2  5d29              LDRB     r1,[r5,r4]            ;1763
000bd4  2201              MOVS     r2,#1                 ;1762
000bd6  293f              CMP      r1,#0x3f              ;1763
000bd8  d013              BEQ      |L9.3074|
000bda  2100              MOVS     r1,#0                 ;1773
000bdc  4608              MOV      r0,r1                 ;1773
                  |L9.3038|
000bde  5d2b              LDRB     r3,[r5,r4]            ;1775
000be0  eb000080          ADD      r0,r0,r0,LSL #2       ;1775
000be4  1c64              ADDS     r4,r4,#1              ;1775
000be6  1c49              ADDS     r1,r1,#1              ;1775
000be8  eb060040          ADD      r0,r6,r0,LSL #1       ;1775
000bec  b2c9              UXTB     r1,r1                 ;1773
000bee  4418              ADD      r0,r0,r3              ;1775
000bf0  b2a4              UXTH     r4,r4                 ;1775
000bf2  4291              CMP      r1,r2                 ;1773
000bf4  d3f3              BCC      |L9.3038|
000bf6  2801              CMP      r0,#1                 ;1777
000bf8  f63fab5d          BHI      |L9.694|
000bfc  496d              LDR      r1,|L9.3508|
000bfe  7008              STRB     r0,[r1,#0]            ;1784
000c00  e0ca              B        |L9.3480|
                  |L9.3074|
000c02  7802              LDRB     r2,[r0,#0]            ;1765  ; C_DISCHARGE
000c04  192b              ADDS     r3,r5,r4              ;1765
000c06  f2af7194          ADR      r1,|L9.1140|
000c0a  4618              MOV      r0,r3                 ;1765
000c0c  f7ffbb63          B        |L9.726|
                  |L9.3088|
000c10  5d28              LDRB     r0,[r5,r4]            ;1797
000c12  2309              MOVS     r3,#9                 ;1796
000c14  283f              CMP      r0,#0x3f              ;1797
000c16  d06c              BEQ      |L9.3314|
000c18  2201              MOVS     r2,#1                 ;1806
000c1a  2100              MOVS     r1,#0                 ;1807
000c1c  e009              B        |L9.3122|
                  |L9.3102|
000c1e  b141              CBZ      r1,|L9.3122|
000c20  2905              CMP      r1,#5                 ;1809
000c22  d006              BEQ      |L9.3122|
000c24  1860              ADDS     r0,r4,r1              ;1811
000c26  5c28              LDRB     r0,[r5,r0]            ;1811
000c28  f7fffffe          BL       IsDigitChar
000c2c  2801              CMP      r0,#1                 ;1811
000c2e  d000              BEQ      |L9.3122|
000c30  2200              MOVS     r2,#0                 ;1817
                  |L9.3122|
000c32  1c49              ADDS     r1,r1,#1              ;1817
000c34  b2c9              UXTB     r1,r1                 ;1807
000c36  4299              CMP      r1,r3                 ;1807
000c38  d3f1              BCC      |L9.3102|
000c3a  2a00              CMP      r2,#0                 ;1820
                  |L9.3132|
000c3c  d090              BEQ      |L9.2912|
000c3e  18e0              ADDS     r0,r4,r3              ;1820
000c40  5c28              LDRB     r0,[r5,r0]            ;1820
000c42  280d              CMP      r0,#0xd               ;1820
                  |L9.3140|
000c44  d191              BNE      |L9.2922|
000c46  2200              MOVS     r2,#0                 ;1825
000c48  4610              MOV      r0,r2                 ;1826
000c4a  e00d              B        |L9.3176|
                  |L9.3148|
000c4c  b160              CBZ      r0,|L9.3176|
000c4e  2801              CMP      r0,#1                 ;1832
000c50  d016              BEQ      |L9.3200|
000c52  2805              CMP      r0,#5                 ;1837
000c54  d005              BEQ      |L9.3170|
000c56  5d29              LDRB     r1,[r5,r4]            ;1843
000c58  eb020282          ADD      r2,r2,r2,LSL #2       ;1843
000c5c  eb060242          ADD      r2,r6,r2,LSL #1       ;1843
000c60  440a              ADD      r2,r2,r1              ;1843
                  |L9.3170|
000c62  1c64              ADDS     r4,r4,#1              ;1843
000c64  b2a4              UXTH     r4,r4                 ;1839
000c66  e015              B        |L9.3220|
                  |L9.3176|
000c68  5d29              LDRB     r1,[r5,r4]            ;1830
000c6a  3930              SUBS     r1,r1,#0x30           ;1830
000c6c  eb010181          ADD      r1,r1,r1,LSL #2       ;1830
000c70  0049              LSLS     r1,r1,#1              ;1830
000c72  ee001a10          VMOV     s0,r1                 ;1830
000c76  1c64              ADDS     r4,r4,#1              ;1830
000c78  b2a4              UXTH     r4,r4                 ;1830
000c7a  eeb80ac0          VCVT.F32.S32 s0,s0                 ;1830
000c7e  e009              B        |L9.3220|
                  |L9.3200|
000c80  5d29              LDRB     r1,[r5,r4]            ;1834
000c82  1c64              ADDS     r4,r4,#1              ;1834
000c84  3930              SUBS     r1,r1,#0x30           ;1834
000c86  ee001a90          VMOV     s1,r1                 ;1834
000c8a  b2a4              UXTH     r4,r4                 ;1834
000c8c  eef80ae0          VCVT.F32.S32 s1,s1                 ;1834
000c90  ee300a80          VADD.F32 s0,s1,s0              ;1834
                  |L9.3220|
000c94  1c40              ADDS     r0,r0,#1              ;1834
000c96  b2c0              UXTB     r0,r0                 ;1826
000c98  4298              CMP      r0,r3                 ;1826
000c9a  d3d7              BCC      |L9.3148|
000c9c  eebc0ac0          VCVT.U32.F32 s0,s0                 ;1860
000ca0  ee100a10          VMOV     r0,s0                 ;1860
000ca4  b2c1              UXTB     r1,r0                 ;1860
000ca6  2001              MOVS     r0,#1                 ;1860
000ca8  e04e              B        |L9.3400|
                  |L9.3242|
000caa  5d28              LDRB     r0,[r5,r4]            ;1867
000cac  2306              MOVS     r3,#6                 ;1866
000cae  283f              CMP      r0,#0x3f              ;1867
000cb0  d002              BEQ      |L9.3256|
000cb2  2201              MOVS     r2,#1                 ;1876
000cb4  2100              MOVS     r1,#0                 ;1877
000cb6  e027              B        |L9.3336|
                  |L9.3256|
000cb8  eeb58ac0          VCMPE.F32 s16,#0.0              ;1869
000cbc  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1869
000cc0  db01              BLT      |L9.3270|
000cc2  202b              MOVS     r0,#0x2b              ;1869
000cc4  e000              B        |L9.3272|
                  |L9.3270|
000cc6  202d              MOVS     r0,#0x2d              ;1869
                  |L9.3272|
000cc8  5528              STRB     r0,[r5,r4]            ;1869
000cca  1c64              ADDS     r4,r4,#1              ;1869
000ccc  b2a4              UXTH     r4,r4                 ;1869
000cce  ee180a10          VMOV     r0,s16                ;1870
000cd2  f7fffffe          BL       __aeabi_f2d
000cd6  ec410b10          VMOV     d0,r0,r1              ;1870
000cda  1928              ADDS     r0,r5,r4              ;1870
000cdc  ec532b10          VMOV     r2,r3,d0              ;1870
000ce0  a132              ADR      r1,|L9.3500|
000ce2  f7fffffe          BL       __2sprintf
000ce6  1da4              ADDS     r4,r4,#6              ;1870
                  |L9.3304|
000ce8  b2a0              UXTH     r0,r4                 ;1871
                  |L9.3306|
000cea  f8059000          STRB     r9,[r5,r0]            ;1872
000cee  1c40              ADDS     r0,r0,#1              ;1872
000cf0  b284              UXTH     r4,r0                 ;1872
                  |L9.3314|
000cf2  e055              B        |L9.3488|
                  |L9.3316|
000cf4  b141              CBZ      r1,|L9.3336|
000cf6  2904              CMP      r1,#4                 ;1879
000cf8  d006              BEQ      |L9.3336|
000cfa  1860              ADDS     r0,r4,r1              ;1881
000cfc  5c28              LDRB     r0,[r5,r0]            ;1881
000cfe  f7fffffe          BL       IsDigitChar
000d02  2801              CMP      r0,#1                 ;1881
000d04  d000              BEQ      |L9.3336|
000d06  2200              MOVS     r2,#0                 ;1887
                  |L9.3336|
000d08  1c49              ADDS     r1,r1,#1              ;1887
000d0a  b2c9              UXTB     r1,r1                 ;1877
000d0c  4299              CMP      r1,r3                 ;1877
000d0e  d3f1              BCC      |L9.3316|
000d10  2a00              CMP      r2,#0                 ;1890
000d12  d093              BEQ      |L9.3132|
000d14  18e0              ADDS     r0,r4,r3              ;1890
000d16  5c28              LDRB     r0,[r5,r0]            ;1890
000d18  280d              CMP      r0,#0xd               ;1890
000d1a  d193              BNE      |L9.3140|
000d1c  2200              MOVS     r2,#0                 ;1895
000d1e  4610              MOV      r0,r2                 ;1896
000d20  e015              B        |L9.3406|
                  |L9.3362|
000d22  b1a0              CBZ      r0,|L9.3406|
000d24  5d29              LDRB     r1,[r5,r4]            ;1909
000d26  eb020282          ADD      r2,r2,r2,LSL #2       ;1909
000d2a  eb060242          ADD      r2,r6,r2,LSL #1       ;1909
000d2e  1c64              ADDS     r4,r4,#1              ;1909
000d30  440a              ADD      r2,r2,r1              ;1909
000d32  b2a4              UXTH     r4,r4                 ;1909
                  |L9.3380|
000d34  1c40              ADDS     r0,r0,#1              ;1909
000d36  b2c0              UXTB     r0,r0                 ;1896
000d38  4298              CMP      r0,r3                 ;1896
000d3a  d3f2              BCC      |L9.3362|
000d3c  eebc0ac0          VCVT.U32.F32 s0,s0                 ;1911
000d40  ee100a10          VMOV     r0,s0                 ;1911
000d44  b2c1              UXTB     r1,r0                 ;1911
000d46  2002              MOVS     r0,#2                 ;1911
                  |L9.3400|
000d48  f7fffffe          BL       CalHandle
000d4c  e028              B        |L9.3488|
                  |L9.3406|
000d4e  5d29              LDRB     r1,[r5,r4]            ;1900
000d50  1c64              ADDS     r4,r4,#1              ;1900
000d52  3930              SUBS     r1,r1,#0x30           ;1900
000d54  ee001a10          VMOV     s0,r1                 ;1900
000d58  b2a4              UXTH     r4,r4                 ;1900
000d5a  eeb80ac0          VCVT.F32.S32 s0,s0                 ;1900
000d5e  e7e9              B        |L9.3380|
                  |L9.3424|
000d60  5d28              LDRB     r0,[r5,r4]            ;1917
000d62  283f              CMP      r0,#0x3f              ;1917
000d64  d01c              BEQ      |L9.3488|
000d66  2201              MOVS     r2,#1                 ;1926
000d68  2100              MOVS     r1,#0                 ;1927
000d6a  4608              MOV      r0,r1                 ;1927
                  |L9.3436|
000d6c  5d2b              LDRB     r3,[r5,r4]            ;1929
000d6e  eb000080          ADD      r0,r0,r0,LSL #2       ;1929
000d72  1c64              ADDS     r4,r4,#1              ;1929
000d74  1c49              ADDS     r1,r1,#1              ;1929
000d76  eb060040          ADD      r0,r6,r0,LSL #1       ;1929
000d7a  b2c9              UXTB     r1,r1                 ;1927
000d7c  4418              ADD      r0,r0,r3              ;1929
000d7e  b2a4              UXTH     r4,r4                 ;1929
000d80  4291              CMP      r1,r2                 ;1927
000d82  d3f3              BCC      |L9.3436|
000d84  2801              CMP      r0,#1                 ;1931
000d86  f63faa96          BHI      |L9.694|
000d8a  490b              LDR      r1,|L9.3512|
000d8c  7008              STRB     r0,[r1,#0]            ;1937
000d8e  490b              LDR      r1,|L9.3516|
000d90  2001              MOVS     r0,#1                 ;1938
000d92  7008              STRB     r0,[r1,#0]            ;1938
000d94  f7fffffe          BL       Write_Boot_Flag
                  |L9.3480|
000d98  f805b004          STRB     r11,[r5,r4]           ;1944
000d9c  1c64              ADDS     r4,r4,#1              ;1944
000d9e  b2a4              UXTH     r4,r4                 ;1944
                  |L9.3488|
000da0  1c64              ADDS     r4,r4,#1              ;1944
000da2  b033              ADD      sp,sp,#0xcc
000da4  b2a0              UXTH     r0,r4                 ;2067
000da6  e8bd8ff0          POP      {r4-r11,pc}
;;;2069   
                          ENDP

000daa  0000              DCW      0x0000
                  |L9.3500|
000dac  2530332e          DCB      "%03.3f",0
000db0  336600  
000db3  00                DCB      0
                  |L9.3508|
                          DCD      overflag
                  |L9.3512|
                          DCD      jumpflag
                  |L9.3516|
                          DCD      bootflag

                          AREA ||i.SetErr_ACK||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  SetErr_ACK PROC
;;;967    
;;;968    u16 SetErr_ACK(char *buf, u8 addr ,u8 ucErr)
000000  b5f8              PUSH     {r3-r7,lr}
;;;969    {
000002  4604              MOV      r4,r0
;;;970    		u16 i=0;
;;;971    		u8 len = 0;
;;;972    		char stradd[3] = {0};
000004  2000              MOVS     r0,#0
;;;973    		int addlen=0;
;;;974    		memset(buf,0,sizeof(buf));
000006  9000              STR      r0,[sp,#0]
000008  6020              STR      r0,[r4,#0]
00000a  4616              MOV      r6,r2                 ;969
;;;975        	buf[i++] = ChrStartS;
00000c  203e              MOVS     r0,#0x3e
00000e  7020              STRB     r0,[r4,#0]
;;;976    		sprintf(stradd,"%d",addr);
000010  460a              MOV      r2,r1
000012  a11a              ADR      r1,|L10.124|
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       __2sprintf
;;;977    		addlen=strlen(stradd);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       strlen
000020  4605              MOV      r5,r0
;;;978    		strncat(&buf[i],stradd,addlen);
000022  1c60              ADDS     r0,r4,#1
000024  462a              MOV      r2,r5
000026  4669              MOV      r1,sp
000028  f7fffffe          BL       strncat
00002c  1c6d              ADDS     r5,r5,#1
;;;979    		i+=addlen;
00002e  b2a8              UXTH     r0,r5
;;;980    		buf[i++] = '/';
000030  212f              MOVS     r1,#0x2f
000032  5421              STRB     r1,[r4,r0]
000034  1c40              ADDS     r0,r0,#1
000036  b285              UXTH     r5,r0
;;;981    		switch(ucErr)
000038  2e01              CMP      r6,#1
00003a  d008              BEQ      |L10.78|
00003c  2e02              CMP      r6,#2
00003e  d001              BEQ      |L10.68|
000040  2e03              CMP      r6,#3
000042  d015              BEQ      |L10.112|
                  |L10.68|
;;;982            {
;;;983              case 1:         //
;;;984              	   len = 9;
;;;985              	   memmove(&buf[i],"PARA ERR!",len);   
;;;986              	   break;
;;;987    	      case 2:         //
;;;988              	   len = 8;
;;;989              	   memmove(&buf[i],"CMD ERR!",len);   
;;;990              	   break;
;;;991    	      case 3:         //
;;;992              	   len = 8;
;;;993              	   memmove(&buf[i],"REM ERR!",len);   
;;;994              	   break;
;;;995    		  default:    
;;;996                   len = 8;
000044  2608              MOVS     r6,#8
;;;997              	   memmove(&buf[i],"CMD ERR!",len);   
000046  1960              ADDS     r0,r4,r5
000048  4632              MOV      r2,r6
00004a  a10d              ADR      r1,|L10.128|
;;;998                   break;
00004c  e003              B        |L10.86|
                  |L10.78|
00004e  2609              MOVS     r6,#9                 ;984
000050  1960              ADDS     r0,r4,r5              ;985
000052  4632              MOV      r2,r6                 ;985
000054  a10d              ADR      r1,|L10.140|
                  |L10.86|
000056  f7fffffe          BL       __aeabi_memmove
;;;999    	    }
;;;1000   	    i+=len;
00005a  19a8              ADDS     r0,r5,r6
00005c  b280              UXTH     r0,r0
;;;1001   		buf[i++] = ChrEndR;
00005e  210d              MOVS     r1,#0xd
000060  5421              STRB     r1,[r4,r0]
000062  1c40              ADDS     r0,r0,#1
000064  b280              UXTH     r0,r0
;;;1002   		buf[i++] = ChrEndS;
000066  210a              MOVS     r1,#0xa
000068  5421              STRB     r1,[r4,r0]
00006a  1c40              ADDS     r0,r0,#1
00006c  b280              UXTH     r0,r0
;;;1003   		return i;
;;;1004   }
00006e  bdf8              POP      {r3-r7,pc}
                  |L10.112|
000070  2608              MOVS     r6,#8                 ;992
000072  1960              ADDS     r0,r4,r5              ;993
000074  4632              MOV      r2,r6                 ;993
000076  a108              ADR      r1,|L10.152|
000078  e7ed              B        |L10.86|
;;;1005   
                          ENDP

00007a  0000              DCW      0x0000
                  |L10.124|
00007c  256400            DCB      "%d",0
00007f  00                DCB      0
                  |L10.128|
000080  434d4420          DCB      "CMD ERR!",0
000084  45525221
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L10.140|
00008c  50415241          DCB      "PARA ERR!",0
000090  20455252
000094  2100    
000096  00                DCB      0
000097  00                DCB      0
                  |L10.152|
000098  52454d20          DCB      "REM ERR!",0
00009c  45525221
0000a0  00      
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0

                          AREA ||i.SetListPC||, CODE, READONLY, ALIGN=2

                  SetListPC PROC
;;;162    
;;;163    void SetListPC(void)
000000  4804              LDR      r0,|L11.20|
;;;164    {
000002  b510              PUSH     {r4,lr}
;;;165    	SetPowerC(Para.CDC_Limit_C);
000004  f8b00070          LDRH     r0,[r0,#0x70]  ; Para
000008  f7fffffe          BL       SetPowerC
;;;166    	listsend = 3;
00000c  4902              LDR      r1,|L11.24|
00000e  2003              MOVS     r0,#3
000010  7248              STRB     r0,[r1,#9]
;;;167    }
000012  bd10              POP      {r4,pc}
;;;168    
                          ENDP

                  |L11.20|
                          DCD      Para
                  |L11.24|
                          DCD      ||.data||

                          AREA ||i.SetListPS||, CODE, READONLY, ALIGN=2

                  SetListPS PROC
;;;169    
;;;170    void SetListPS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;171    {
;;;172    	if(mainswitch == 1)
000002  4c0f              LDR      r4,|L12.64|
000004  79a0              LDRB     r0,[r4,#6]  ; mainswitch
;;;173    	{
;;;174    		GPIO_SetBits(GPIOE,GPIO_Pin_2);
000006  4d0f              LDR      r5,|L12.68|
000008  2801              CMP      r0,#1                 ;172
00000a  d109              BNE      |L12.32|
00000c  2104              MOVS     r1,#4
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       GPIO_SetBits
;;;175    		Delay_ms(POWER_SW_DELAY);
000014  200a              MOVS     r0,#0xa
000016  f7fffffe          BL       Delay_ms
;;;176    		PowerSwitch(mainswitch);
00001a  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00001c  f7fffffe          BL       PowerSwitch
                  |L12.32|
;;;177    	}
;;;178    	
;;;179    	if(mainswitch == 0)
000020  79a0              LDRB     r0,[r4,#6]  ; mainswitch
000022  b948              CBNZ     r0,|L12.56|
;;;180    	{
;;;181    		PowerSwitch(mainswitch);
000024  79a0              LDRB     r0,[r4,#6]  ; mainswitch
000026  f7fffffe          BL       PowerSwitch
;;;182    		Delay_ms(POWER_SW_DELAY);
00002a  200a              MOVS     r0,#0xa
00002c  f7fffffe          BL       Delay_ms
;;;183    		GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
000030  2104              MOVS     r1,#4
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       GPIO_ResetBits
                  |L12.56|
;;;184    	}
;;;185    	
;;;186    	listsend = 0;
000038  2000              MOVS     r0,#0
00003a  7260              STRB     r0,[r4,#9]
;;;187    }
00003c  bd70              POP      {r4-r6,pc}
;;;188    
                          ENDP

00003e  0000              DCW      0x0000
                  |L12.64|
                          DCD      ||.data||
                  |L12.68|
                          DCD      0x40021000

                          AREA ||i.SetListPV||, CODE, READONLY, ALIGN=2

                  SetListPV PROC
;;;156    }
;;;157    void SetListPV(void)
000000  4804              LDR      r0,|L13.20|
;;;158    {
000002  b510              PUSH     {r4,lr}
;;;159    	SetPowerV(Para.CDC_OutPut_V);
000004  6ec0              LDR      r0,[r0,#0x6c]  ; Para
000006  f7fffffe          BL       SetPowerV
;;;160    	listsend = 2;
00000a  4903              LDR      r1,|L13.24|
00000c  2002              MOVS     r0,#2
00000e  7248              STRB     r0,[r1,#9]
;;;161    }
000010  bd10              POP      {r4,pc}
;;;162    
                          ENDP

000012  0000              DCW      0x0000
                  |L13.20|
                          DCD      Para
                  |L13.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerC||, CODE, READONLY, ALIGN=2

                  SetPowerC PROC
;;;115    
;;;116    void SetPowerC(vu16 powc)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;117    {
;;;118    	MasterSendbuf[0] = 0x01;
000002  4c12              LDR      r4,|L14.76|
000004  2001              MOVS     r0,#1
000006  7020              STRB     r0,[r4,#0]
;;;119    	MasterSendbuf[1] = 0x06;
000008  2006              MOVS     r0,#6
00000a  7060              STRB     r0,[r4,#1]
;;;120    	MasterSendbuf[2] = 0x00;
00000c  2000              MOVS     r0,#0
00000e  70a0              STRB     r0,[r4,#2]
;;;121    	MasterSendbuf[3] = 0x31;
000010  2031              MOVS     r0,#0x31
000012  70e0              STRB     r0,[r4,#3]
;;;122    	MasterSendbuf[4] = (u8)(powc/10>>8);
000014  f8bd1000          LDRH     r1,[sp,#0]
000018  200a              MOVS     r0,#0xa
00001a  fbb1f1f0          UDIV     r1,r1,r0
00001e  0a09              LSRS     r1,r1,#8
000020  7121              STRB     r1,[r4,#4]
;;;123    	MasterSendbuf[5] = (u8)(powc/10);
000022  f8bd1000          LDRH     r1,[sp,#0]
000026  fbb1f0f0          UDIV     r0,r1,r0
00002a  7160              STRB     r0,[r4,#5]
;;;124    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00002c  2106              MOVS     r1,#6
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       Hardware_CRC
000034  71a0              STRB     r0,[r4,#6]
;;;125    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000036  2106              MOVS     r1,#6
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       Hardware_CRC
00003e  0a00              LSRS     r0,r0,#8
000040  71e0              STRB     r0,[r4,#7]
;;;126    	USART3WriteDMA(8);
000042  e8bd4038          POP      {r3-r5,lr}
000046  2008              MOVS     r0,#8
000048  f7ffbffe          B.W      USART3WriteDMA
;;;127    }
;;;128    
                          ENDP

                  |L14.76|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.SetPowerModeC||, CODE, READONLY, ALIGN=2

                  SetPowerModeC PROC
;;;134    
;;;135    void SetPowerModeC(void)
000000  4804              LDR      r0,|L15.20|
;;;136    {
000002  b510              PUSH     {r4,lr}
;;;137    	SetPowerC(Para.POWER_Limit_C);
000004  f8b00058          LDRH     r0,[r0,#0x58]  ; Para
000008  f7fffffe          BL       SetPowerC
;;;138    	sendwait = 3;
00000c  4902              LDR      r1,|L15.24|
00000e  2003              MOVS     r0,#3
000010  7208              STRB     r0,[r1,#8]
;;;139    }
000012  bd10              POP      {r4,pc}
;;;140    
                          ENDP

                  |L15.20|
                          DCD      Para
                  |L15.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerModeS||, CODE, READONLY, ALIGN=2

                  SetPowerModeS PROC
;;;140    
;;;141    void SetPowerModeS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;142    {
;;;143    	if(mainswitch == 1)
000002  4c10              LDR      r4,|L16.68|
000004  79a0              LDRB     r0,[r4,#6]  ; mainswitch
;;;144    	{
;;;145    		GPIO_SetBits(GPIOE,GPIO_Pin_2);
000006  4d10              LDR      r5,|L16.72|
000008  2801              CMP      r0,#1                 ;143
00000a  d002              BEQ      |L16.18|
;;;146    		Delay_ms(POWER_SW_DELAY);
;;;147    		PowerSwitch(mainswitch);
;;;148    	}else if(mainswitch == 0)
00000c  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00000e  b158              CBZ      r0,|L16.40|
000010  e014              B        |L16.60|
                  |L16.18|
000012  2104              MOVS     r1,#4                 ;145
000014  4628              MOV      r0,r5                 ;145
000016  f7fffffe          BL       GPIO_SetBits
00001a  200a              MOVS     r0,#0xa               ;146
00001c  f7fffffe          BL       Delay_ms
000020  79a0              LDRB     r0,[r4,#6]            ;147  ; mainswitch
000022  f7fffffe          BL       PowerSwitch
000026  e009              B        |L16.60|
                  |L16.40|
;;;149    	{
;;;150    		PowerSwitch(mainswitch);
000028  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00002a  f7fffffe          BL       PowerSwitch
;;;151    		Delay_ms(POWER_SW_DELAY);
00002e  200a              MOVS     r0,#0xa
000030  f7fffffe          BL       Delay_ms
;;;152    		GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
000034  2104              MOVS     r1,#4
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       GPIO_ResetBits
                  |L16.60|
;;;153    	}
;;;154    	
;;;155    	sendwait = 0;
00003c  2000              MOVS     r0,#0
00003e  7220              STRB     r0,[r4,#8]
;;;156    }
000040  bd70              POP      {r4-r6,pc}
;;;157    void SetListPV(void)
                          ENDP

000042  0000              DCW      0x0000
                  |L16.68|
                          DCD      ||.data||
                  |L16.72|
                          DCD      0x40021000

                          AREA ||i.SetPowerModeV||, CODE, READONLY, ALIGN=2

                  SetPowerModeV PROC
;;;128    
;;;129    void SetPowerModeV(void)
000000  4804              LDR      r0,|L17.20|
;;;130    {
000002  b510              PUSH     {r4,lr}
;;;131    	SetPowerV(Para.POWER_OutPut_V);
000004  6d40              LDR      r0,[r0,#0x54]  ; Para
000006  f7fffffe          BL       SetPowerV
;;;132    	sendwait = 2;
00000a  4903              LDR      r1,|L17.24|
00000c  2002              MOVS     r0,#2
00000e  7208              STRB     r0,[r1,#8]
;;;133    }
000010  bd10              POP      {r4,pc}
;;;134    
                          ENDP

000012  0000              DCW      0x0000
                  |L17.20|
                          DCD      Para
                  |L17.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerV||, CODE, READONLY, ALIGN=2

                  SetPowerV PROC
;;;102    }
;;;103    void SetPowerV(vu32 powv)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;104    {
;;;105    	MasterSendbuf[0] = 0x01;
000002  4c11              LDR      r4,|L18.72|
000004  2001              MOVS     r0,#1
000006  7020              STRB     r0,[r4,#0]
;;;106    	MasterSendbuf[1] = 0x06;
000008  2006              MOVS     r0,#6
00000a  7060              STRB     r0,[r4,#1]
;;;107    	MasterSendbuf[2] = 0x00;
00000c  2000              MOVS     r0,#0
00000e  70a0              STRB     r0,[r4,#2]
;;;108    	MasterSendbuf[3] = 0x30;
000010  2030              MOVS     r0,#0x30
000012  70e0              STRB     r0,[r4,#3]
;;;109    	MasterSendbuf[4] = (u8)(powv/10>>8);
000014  9900              LDR      r1,[sp,#0]
000016  200a              MOVS     r0,#0xa
000018  fbb1f1f0          UDIV     r1,r1,r0
00001c  0a09              LSRS     r1,r1,#8
00001e  7121              STRB     r1,[r4,#4]
;;;110    	MasterSendbuf[5] = (u8)(powv/10);
000020  9900              LDR      r1,[sp,#0]
000022  fbb1f0f0          UDIV     r0,r1,r0
000026  7160              STRB     r0,[r4,#5]
;;;111    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
000028  2106              MOVS     r1,#6
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       Hardware_CRC
000030  71a0              STRB     r0,[r4,#6]
;;;112    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000032  2106              MOVS     r1,#6
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       Hardware_CRC
00003a  0a00              LSRS     r0,r0,#8
00003c  71e0              STRB     r0,[r4,#7]
;;;113    	USART3WriteDMA(8);
00003e  e8bd4038          POP      {r3-r5,lr}
000042  2008              MOVS     r0,#8
000044  f7ffbffe          B.W      USART3WriteDMA
;;;114    }
;;;115    
                          ENDP

                  |L18.72|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.UART1_Send||, CODE, READONLY, ALIGN=2

                  UART1_Send PROC
;;;2461   
;;;2462   void UART1_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2463   {
;;;2464   	static vu8 UART_Buffer_Send_pointer=0;
;;;2465   		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L19.72|
000004  78e0              LDRB     r0,[r4,#3]  ; UART_Buffer_Send_pointer
000006  7921              LDRB     r1,[r4,#4]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L19.56|
;;;2466            {
;;;2467   				 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L19.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L19.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L19.54|
;;;2468   				 {
;;;2469   					USART_SendData(USART1,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  78e1              LDRB     r1,[r4,#3]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  4d0d              LDR      r5,|L19.84|
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       USART_SendData
                  |L19.36|
;;;2470   					while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);//等待发送完成
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L19.36|
;;;2471   					UART_Buffer_Send_pointer++;
000030  78e0              LDRB     r0,[r4,#3]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  70e0              STRB     r0,[r4,#3]
                  |L19.54|
;;;2472   				 }
;;;2473            }
;;;2474   		else 
;;;2475   		{
;;;2476   			UART_Buffer_Send_pointer=0;
;;;2477   			UART_SEND_flag=0;//发送完成一帧数据
;;;2478   		}
;;;2479   }
000036  bd70              POP      {r4-r6,pc}
                  |L19.56|
000038  2000              MOVS     r0,#0                 ;2476
00003a  70e0              STRB     r0,[r4,#3]            ;2476
00003c  4806              LDR      r0,|L19.88|
00003e  6801              LDR      r1,[r0,#0]            ;2477  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;2477
000044  6001              STR      r1,[r0,#0]            ;2477  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;2480   
                          ENDP

                  |L19.72|
                          DCD      ||.data||
                  |L19.76|
                          DCD      ||area_number.31||
                  |L19.80|
                          DCD      ADDR
                  |L19.84|
                          DCD      0x40011000
                  |L19.88|
                          DCD      flagA

                          AREA ||i.UART2_Send||, CODE, READONLY, ALIGN=2

                  UART2_Send PROC
;;;2442   }
;;;2443   void UART2_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2444   {
;;;2445   	static vu8 UART_Buffer_Send_pointer=0;
;;;2446   		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L20.72|
000004  78a0              LDRB     r0,[r4,#2]  ; UART_Buffer_Send_pointer
000006  7921              LDRB     r1,[r4,#4]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L20.56|
;;;2447            {
;;;2448   					 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L20.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L20.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L20.54|
;;;2449   					 {
;;;2450   						USART_SendData(USART2,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  78a1              LDRB     r1,[r4,#2]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  480d              LDR      r0,|L20.84|
00001e  f7fffffe          BL       USART_SendData
;;;2451   						while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);//等待发送完成
000022  4d0d              LDR      r5,|L20.88|
                  |L20.36|
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L20.36|
;;;2452   						UART_Buffer_Send_pointer++;
000030  78a0              LDRB     r0,[r4,#2]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  70a0              STRB     r0,[r4,#2]
                  |L20.54|
;;;2453   					}
;;;2454            }
;;;2455   		else 
;;;2456   		{
;;;2457   			UART_Buffer_Send_pointer=0;
;;;2458   			UART_SEND_flag=0;//发送完成一帧数据
;;;2459   		}
;;;2460   }
000036  bd70              POP      {r4-r6,pc}
                  |L20.56|
000038  2000              MOVS     r0,#0                 ;2457
00003a  70a0              STRB     r0,[r4,#2]            ;2457
00003c  4807              LDR      r0,|L20.92|
00003e  6801              LDR      r1,[r0,#0]            ;2458  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;2458
000044  6001              STR      r1,[r0,#0]            ;2458  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;2461   
                          ENDP

                  |L20.72|
                          DCD      ||.data||
                  |L20.76|
                          DCD      ||area_number.31||
                  |L20.80|
                          DCD      ADDR
                  |L20.84|
                          DCD      0x40004400
                  |L20.88|
                          DCD      0x40011000
                  |L20.92|
                          DCD      flagA

                          AREA ||i.USART2_Configuration||, CODE, READONLY, ALIGN=2

                  USART2_Configuration PROC
;;;2138   
;;;2139   void USART2_Configuration(void)//串口初始化函数
000000  b570              PUSH     {r4-r6,lr}
;;;2140   {  
;;;2141   	GPIO_InitTypeDef GPIO_InitStructure;
;;;2142   	USART_InitTypeDef USART_InitStructure;
;;;2143   	
;;;2144   	/* config USART1 clock */
;;;2145   	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
000002  2101              MOVS     r1,#1
000004  b088              SUB      sp,sp,#0x20           ;2140
000006  0448              LSLS     r0,r1,#17
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;2146   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);
00000c  4e2a              LDR      r6,|L21.184|
00000e  2207              MOVS     r2,#7
000010  2102              MOVS     r1,#2
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2147   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);
000018  2207              MOVS     r2,#7
00001a  2103              MOVS     r1,#3
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2148   	/* USART1 GPIO config */
;;;2149   	/* Configure USART1 Tx (PA.02) as alternate function push-pull */
;;;2150   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;2151   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000022  2502              MOVS     r5,#2
000024  2004              MOVS     r0,#4                 ;2150
000026  f88d5004          STRB     r5,[sp,#4]
;;;2152   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
00002c  9000              STR      r0,[sp,#0]            ;2151
00002e  f88d4006          STRB     r4,[sp,#6]
;;;2153   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f88d5005          STRB     r5,[sp,#5]
;;;2154   	GPIO_Init(GPIOA, &GPIO_InitStructure);    
000036  4669              MOV      r1,sp
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GPIO_Init
;;;2155   	/* Configure USART1 Rx (PA.03) as input floating */
;;;2156   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
00003e  2008              MOVS     r0,#8
;;;2157   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000040  9000              STR      r0,[sp,#0]
000042  f88d5004          STRB     r5,[sp,#4]
;;;2158   	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;2159   	
;;;2160   	/* USART1 mode config */
;;;2161   	USART_InitStructure.USART_BaudRate = 115200;
00004e  f44f30e1          MOV      r0,#0x1c200
;;;2162   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000052  9002              STR      r0,[sp,#8]
;;;2163   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2164   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000054  f8ad4010          STRH     r4,[sp,#0x10]
;;;2165   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2166   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
;;;2167   	USART_Init(USART2, &USART_InitStructure);
00005a  4d18              LDR      r5,|L21.188|
00005c  f8ad400c          STRH     r4,[sp,#0xc]          ;2162
000060  f8ad0012          STRH     r0,[sp,#0x12]         ;2166
000064  f8ad400e          STRH     r4,[sp,#0xe]          ;2163
000068  f8ad4014          STRH     r4,[sp,#0x14]         ;2165
00006c  a902              ADD      r1,sp,#8
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       USART_Init
;;;2168   	
;;;2169   	/******使能串口接收中断******************/
;;;2170   	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
000074  2201              MOVS     r2,#1
000076  f2405125          MOV      r1,#0x525
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_ITConfig
;;;2171   //	USART_ITConfig(USART2, USART_IT_ORE, ENABLE);	
;;;2172   	USART_Cmd(USART2, ENABLE);//使能串口1
000080  2101              MOVS     r1,#1
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USART_Cmd
;;;2173     USART_ClearFlag(USART2, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       USART_ClearFlag
000090  f44f60e0          MOV      r0,#0x700
000094  f7fffffe          BL       NVIC_PriorityGroupConfig
000098  2026              MOVS     r0,#0x26
00009a  f88d0018          STRB     r0,[sp,#0x18]
00009e  f88d4019          STRB     r4,[sp,#0x19]
0000a2  2001              MOVS     r0,#1
0000a4  f88d001a          STRB     r0,[sp,#0x1a]
0000a8  f88d001b          STRB     r0,[sp,#0x1b]
0000ac  a806              ADD      r0,sp,#0x18
0000ae  f7fffffe          BL       NVIC_Init
;;;2174     
;;;2175     USART2_NVIC_Config();//串口中断配置
;;;2176   }
0000b2  b008              ADD      sp,sp,#0x20
0000b4  bd70              POP      {r4-r6,pc}
;;;2177   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L21.184|
                          DCD      0x40020000
                  |L21.188|
                          DCD      0x40004400

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;2400   
;;;2401   void USART2_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2402   {
;;;2403   	u8 Res;
;;;2404    	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
000002  4c1c              LDR      r4,|L22.116|
000004  f2405525          MOV      r5,#0x525
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       USART_GetITStatus
000010  2800              CMP      r0,#0
000012  d013              BEQ      |L22.60|
;;;2405   	{
;;;2406   		USART_ClearITPendingBit(USART2,USART_IT_RXNE);
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       USART_ClearITPendingBit
;;;2407   		Res=USART_ReceiveData(USART2);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       USART_ReceiveData
;;;2408   
;;;2409   		if((USART_RX_STA&0x8000)==0)//接收未完成
000022  4915              LDR      r1,|L22.120|
000024  b2c2              UXTB     r2,r0                 ;2407
000026  89c8              LDRH     r0,[r1,#0xe]  ; USART_RX_STA
000028  0403              LSLS     r3,r0,#16
00002a  d407              BMI      |L22.60|
;;;2410   		{
;;;2411   		if(USART_RX_STA&0x4000)//接收到了0x0d
;;;2412   		{
;;;2413   			if(Res!=0x0a)
;;;2414   				USART_RX_STA=0;//接收错误,重新开始
;;;2415   			else 
;;;2416   			{
;;;2417   		//		SerialRemoteHandleL(USART_RX_STA,USART_RX_BUF);
;;;2418   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
00002c  4b13              LDR      r3,|L22.124|
00002e  0445              LSLS     r5,r0,#17             ;2411
000030  f04f0400          MOV      r4,#0                 ;2411
000034  d50b              BPL      |L22.78|
000036  2a0a              CMP      r2,#0xa               ;2413
000038  d001              BEQ      |L22.62|
                  |L22.58|
00003a  81cc              STRH     r4,[r1,#0xe]          ;2414
                  |L22.60|
;;;2419   				USART_RX_STA++;
;;;2420   				USART_RX_CNT = USART_RX_STA;
;;;2421   				USART_RX_STA|=0x8000;	//接收完成了 			  //接收到回车的后字节  置位状态寄存器 
;;;2422   			}
;;;2423   		}
;;;2424   		else //还没收到0X0D
;;;2425   		{	
;;;2426   			if(Res==0x0d)
;;;2427   			{
;;;2428   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
;;;2429   				USART_RX_STA++;	
;;;2430   				USART_RX_STA|=0x4000;					 //接收到回车的前一字节  置位状态寄存器
;;;2431   			}
;;;2432   			else
;;;2433   				{
;;;2434   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
;;;2435   					USART_RX_STA++;									//长度+1 为下一次做准备
;;;2436   				if(USART_RX_STA>(USART_REC_LEN-1))
;;;2437   					USART_RX_STA=0;//接收数据错误,重新开始接收	  
;;;2438   				}		 
;;;2439   			}
;;;2440   		} 
;;;2441   	}
;;;2442   }
00003c  bd70              POP      {r4-r6,pc}
                  |L22.62|
00003e  f3c0040d          UBFX     r4,r0,#0,#14          ;2418
000042  1c40              ADDS     r0,r0,#1              ;2418
000044  551a              STRB     r2,[r3,r4]            ;2418
000046  8208              STRH     r0,[r1,#0x10]         ;2420
000048  f4404000          ORR      r0,r0,#0x8000         ;2421
00004c  e010              B        |L22.112|
                  |L22.78|
00004e  2a0d              CMP      r2,#0xd               ;2426
000050  d008              BEQ      |L22.100|
000052  f3c0050d          UBFX     r5,r0,#0,#14          ;2434
000056  1c40              ADDS     r0,r0,#1              ;2434
000058  b280              UXTH     r0,r0                 ;2435
00005a  555a              STRB     r2,[r3,r5]            ;2434
00005c  81c8              STRH     r0,[r1,#0xe]          ;2435
00005e  28c7              CMP      r0,#0xc7              ;2436
000060  d8eb              BHI      |L22.58|
000062  bd70              POP      {r4-r6,pc}
                  |L22.100|
000064  f3c0040d          UBFX     r4,r0,#0,#14          ;2428
000068  1c40              ADDS     r0,r0,#1              ;2428
00006a  551a              STRB     r2,[r3,r4]            ;2428
00006c  f4404080          ORR      r0,r0,#0x4000         ;2430
                  |L22.112|
000070  81c8              STRH     r0,[r1,#0xe]          ;2421
000072  bd70              POP      {r4-r6,pc}
;;;2443   void UART2_Send(void)
                          ENDP

                  |L22.116|
                          DCD      0x40004400
                  |L22.120|
                          DCD      ||.data||
                  |L22.124|
                          DCD      ||area_number.31||+0x14

                          AREA ||i.USART3HANDLE||, CODE, READONLY, ALIGN=2

                  USART3HANDLE PROC
;;;214    
;;;215    void USART3HANDLE(void)
000000  b538              PUSH     {r3-r5,lr}
;;;216    {
;;;217    	vu16 crcres;
;;;218    
;;;219    	if(MasterRecbuf[0] == 0x01)
000002  4d28              LDR      r5,|L23.164|
;;;220    	{
;;;221    		if(MasterRecbuf[1] == 0x03)
;;;222    		{
;;;223    			crcres = (MasterRecbuf[8] << 8) + MasterRecbuf[7];
;;;224    			if(crcres == Hardware_CRC(MasterRecbuf,7))
;;;225    			{
;;;226    				 
;;;227    				Para.CPOW_Voltage = (MasterRecbuf[3] << 8) + MasterRecbuf[4];
;;;228    				Para.CCurrent = (MasterRecbuf[5] << 8) + MasterRecbuf[6];
;;;229    				memset(MasterRecbuf,0,sizeof(MasterRecbuf));
;;;230    			}
;;;231    				if(sendwait == 3)
000004  4c28              LDR      r4,|L23.168|
000006  7828              LDRB     r0,[r5,#0]            ;219  ; MasterRecbuf
000008  2801              CMP      r0,#1                 ;219
00000a  d148              BNE      |L23.158|
00000c  7868              LDRB     r0,[r5,#1]            ;221  ; MasterRecbuf
00000e  2803              CMP      r0,#3                 ;221
000010  d002              BEQ      |L23.24|
;;;232    				{
;;;233    					SetPowerModeS();
;;;234    				}
;;;235    				if(sendwait == 2)
;;;236    				{
;;;237    					SetPowerModeC();
;;;238    				}
;;;239    				if(sendwait == 1)
;;;240    				{
;;;241    					SetPowerModeV();
;;;242    				}
;;;243    				if(listsend == 3)
;;;244    				{
;;;245    					SetListPS();
;;;246    				}
;;;247    				if(listsend == 2)
;;;248    				{
;;;249    					SetListPC();
;;;250    				}
;;;251    				if(listsend == 1)
;;;252    				{
;;;253    					SetListPV();
;;;254    				}
;;;255    		}else if(MasterRecbuf[1] == 0x06){
000012  2806              CMP      r0,#6
000014  d03c              BEQ      |L23.144|
000016  e042              B        |L23.158|
                  |L23.24|
000018  79e8              LDRB     r0,[r5,#7]            ;223  ; MasterRecbuf
00001a  7a29              LDRB     r1,[r5,#8]            ;223  ; MasterRecbuf
00001c  eb002001          ADD      r0,r0,r1,LSL #8       ;223
000020  f8ad0000          STRH     r0,[sp,#0]            ;223
000024  2107              MOVS     r1,#7                 ;224
000026  481f              LDR      r0,|L23.164|
000028  f7fffffe          BL       Hardware_CRC
00002c  f8bd1000          LDRH     r1,[sp,#0]            ;224
000030  4288              CMP      r0,r1                 ;224
000032  d10e              BNE      |L23.82|
000034  7928              LDRB     r0,[r5,#4]            ;227  ; MasterRecbuf
000036  78e9              LDRB     r1,[r5,#3]            ;227  ; MasterRecbuf
000038  eb002101          ADD      r1,r0,r1,LSL #8       ;227
00003c  481b              LDR      r0,|L23.172|
00003e  6281              STR      r1,[r0,#0x28]         ;227  ; Para
000040  79a9              LDRB     r1,[r5,#6]            ;228  ; MasterRecbuf
000042  796a              LDRB     r2,[r5,#5]            ;228  ; MasterRecbuf
000044  eb012102          ADD      r1,r1,r2,LSL #8       ;228
000048  6301              STR      r1,[r0,#0x30]         ;228  ; Para
00004a  2180              MOVS     r1,#0x80              ;229
00004c  4815              LDR      r0,|L23.164|
00004e  f7fffffe          BL       __aeabi_memclr
                  |L23.82|
000052  7a20              LDRB     r0,[r4,#8]            ;231  ; sendwait
000054  2803              CMP      r0,#3                 ;231
000056  d101              BNE      |L23.92|
000058  f7fffffe          BL       SetPowerModeS
                  |L23.92|
00005c  7a20              LDRB     r0,[r4,#8]            ;235  ; sendwait
00005e  2802              CMP      r0,#2                 ;235
000060  d101              BNE      |L23.102|
000062  f7fffffe          BL       SetPowerModeC
                  |L23.102|
000066  7a20              LDRB     r0,[r4,#8]            ;239  ; sendwait
000068  2801              CMP      r0,#1                 ;239
00006a  d101              BNE      |L23.112|
00006c  f7fffffe          BL       SetPowerModeV
                  |L23.112|
000070  7a60              LDRB     r0,[r4,#9]            ;243  ; listsend
000072  2803              CMP      r0,#3                 ;243
000074  d101              BNE      |L23.122|
000076  f7fffffe          BL       SetListPS
                  |L23.122|
00007a  7a60              LDRB     r0,[r4,#9]            ;247  ; listsend
00007c  2802              CMP      r0,#2                 ;247
00007e  d101              BNE      |L23.132|
000080  f7fffffe          BL       SetListPC
                  |L23.132|
000084  7a60              LDRB     r0,[r4,#9]            ;251  ; listsend
000086  2801              CMP      r0,#1                 ;251
000088  d109              BNE      |L23.158|
00008a  f7fffffe          BL       SetListPV
00008e  e006              B        |L23.158|
                  |L23.144|
;;;256    			memset(MasterRecbuf,0,sizeof(MasterRecbuf));
000090  2180              MOVS     r1,#0x80
000092  4804              LDR      r0,|L23.164|
000094  f7fffffe          BL       __aeabi_memclr
;;;257    			watchtest ++;
000098  6d60              LDR      r0,[r4,#0x54]  ; watchtest
00009a  1c40              ADDS     r0,r0,#1
00009c  6560              STR      r0,[r4,#0x54]  ; watchtest
                  |L23.158|
;;;258    		}
;;;259    	}	
;;;260    
;;;261    	
;;;262    	USART3_Recive_flg = 0;
00009e  2000              MOVS     r0,#0
0000a0  7060              STRB     r0,[r4,#1]
;;;263    }
0000a2  bd38              POP      {r3-r5,pc}
;;;264    
                          ENDP

                  |L23.164|
                          DCD      ||area_number.31||+0x15c
                  |L23.168|
                          DCD      ||.data||
                  |L23.172|
                          DCD      Para

                          AREA ||i.USART3WriteDMA||, CODE, READONLY, ALIGN=2

                  USART3WriteDMA PROC
;;;2343   
;;;2344   void USART3WriteDMA(u16 len)
000000  b570              PUSH     {r4-r6,lr}
;;;2345   {
000002  4604              MOV      r4,r0
;;;2346       USART_ClearFlag(USART3, USART_FLAG_TC);     //串口发送准备
000004  2140              MOVS     r1,#0x40
000006  4809              LDR      r0,|L24.44|
000008  f7fffffe          BL       USART_ClearFlag
;;;2347   	DMA_Cmd(DMA1_Stream3, DISABLE);//关闭DMA 数据流3
00000c  4d08              LDR      r5,|L24.48|
00000e  2100              MOVS     r1,#0
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       DMA_Cmd
;;;2348       DMA_SetCurrDataCounter(DMA1_Stream3,len);//设置DMA发生长度
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       DMA_SetCurrDataCounter
;;;2349   	DMA_Cmd(DMA1_Stream3, ENABLE);// 打开DMA 数据流3
00001e  4628              MOV      r0,r5
000020  e8bd4070          POP      {r4-r6,lr}
000024  2101              MOVS     r1,#1
000026  f7ffbffe          B.W      DMA_Cmd
;;;2350      
;;;2351   }
;;;2352   
                          ENDP

00002a  0000              DCW      0x0000
                  |L24.44|
                          DCD      0x40004800
                  |L24.48|
                          DCD      0x40026058

                          AREA ||i.USART3_Configuration||, CODE, READONLY, ALIGN=2

                  USART3_Configuration PROC
;;;2290   
;;;2291   void USART3_Configuration()//???????
000000  b570              PUSH     {r4-r6,lr}
;;;2292   {  
;;;2293       GPIO_InitTypeDef GPIO_InitStructure;
;;;2294   	USART_InitTypeDef USART_InitStructure;
;;;2295   	
;;;2296   	/* config USART1 clock */
;;;2297   	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
000002  2101              MOVS     r1,#1
000004  b088              SUB      sp,sp,#0x20           ;2292
000006  0488              LSLS     r0,r1,#18
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;2298   //    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE); //?? GPIOA ??
;;;2299       
;;;2300   	GPIO_PinAFConfig(GPIOD,GPIO_PinSource8,GPIO_AF_USART3);
00000c  4c2a              LDR      r4,|L25.184|
00000e  2207              MOVS     r2,#7
000010  2108              MOVS     r1,#8
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2301   	GPIO_PinAFConfig(GPIOD,GPIO_PinSource9,GPIO_AF_USART3);
000018  2207              MOVS     r2,#7
00001a  2109              MOVS     r1,#9
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2302       
;;;2303   
;;;2304       
;;;2305       
;;;2306   	/* USART1 GPIO config */
;;;2307   	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;2308   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
000022  15a0              ASRS     r0,r4,#22
;;;2309   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000024  2502              MOVS     r5,#2
000026  9004              STR      r0,[sp,#0x10]
000028  f88d5014          STRB     r5,[sp,#0x14]
;;;2310   //     GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //??????
;;;2311   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00002c  f88d5015          STRB     r5,[sp,#0x15]
;;;2312   	GPIO_Init(GPIOD, &GPIO_InitStructure);    
000030  a904              ADD      r1,sp,#0x10
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       GPIO_Init
;;;2313   	/* Configure USART1 Rx (PA.10) as input floating */
;;;2314   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
000038  1560              ASRS     r0,r4,#21
;;;2315       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00003a  9004              STR      r0,[sp,#0x10]
00003c  f88d5014          STRB     r5,[sp,#0x14]
;;;2316   	GPIO_Init(GPIOD, &GPIO_InitStructure);
000040  a904              ADD      r1,sp,#0x10
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       GPIO_Init
;;;2317       
;;;2318   
;;;2319   	
;;;2320   	/* USART1 mode config */
;;;2321   	USART_InitStructure.USART_BaudRate = 9600;
;;;2322   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000048  2400              MOVS     r4,#0
00004a  f44f5016          MOV      r0,#0x2580            ;2321
00004e  9000              STR      r0,[sp,#0]
;;;2323   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2324   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000050  f8ad4008          STRH     r4,[sp,#8]
;;;2325   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2326   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000054  200c              MOVS     r0,#0xc
;;;2327   	USART_Init(USART3, &USART_InitStructure);
000056  4e19              LDR      r6,|L25.188|
000058  f8ad4004          STRH     r4,[sp,#4]            ;2322
00005c  f8ad000a          STRH     r0,[sp,#0xa]          ;2326
000060  f8ad4006          STRH     r4,[sp,#6]            ;2323
000064  f8ad400c          STRH     r4,[sp,#0xc]          ;2325
000068  4669              MOV      r1,sp
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       USART_Init
;;;2328       
;;;2329   
;;;2330   	
;;;2331   	/******????????******************/
;;;2332   	USART_ITConfig(USART3, USART_IT_IDLE, ENABLE);
000070  2201              MOVS     r2,#1
000072  f2404124          MOV      r1,#0x424
000076  4630              MOV      r0,r6
000078  f7fffffe          BL       USART_ITConfig
00007c  f44f60e0          MOV      r0,#0x700
000080  f7fffffe          BL       NVIC_PriorityGroupConfig
000084  2027              MOVS     r0,#0x27
000086  f88d0018          STRB     r0,[sp,#0x18]
00008a  f88d4019          STRB     r4,[sp,#0x19]
00008e  f88d501a          STRB     r5,[sp,#0x1a]
000092  2001              MOVS     r0,#1
000094  f88d001b          STRB     r0,[sp,#0x1b]
000098  a806              ADD      r0,sp,#0x18
00009a  f7fffffe          BL       NVIC_Init
;;;2333   	USART3_NVIC_Config();//??????
;;;2334   	USART3_DMA_init();
00009e  f7fffffe          BL       USART3_DMA_init
;;;2335   	USART_Cmd(USART3, ENABLE);//????1
0000a2  2101              MOVS     r1,#1
0000a4  4630              MOV      r0,r6
0000a6  f7fffffe          BL       USART_Cmd
;;;2336       USART_ClearFlag(USART3, USART_FLAG_TC);
0000aa  2140              MOVS     r1,#0x40
0000ac  4630              MOV      r0,r6
0000ae  f7fffffe          BL       USART_ClearFlag
;;;2337       
;;;2338     
;;;2339       
;;;2340   	
;;;2341   }
0000b2  b008              ADD      sp,sp,#0x20
0000b4  bd70              POP      {r4-r6,pc}
;;;2342   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L25.184|
                          DCD      0x40020c00
                  |L25.188|
                          DCD      0x40004800

                          AREA ||i.USART3_DMA_init||, CODE, READONLY, ALIGN=2

                  USART3_DMA_init PROC
;;;2191   
;;;2192   static void USART3_DMA_init(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2193   {
;;;2194       DMA_InitTypeDef DMA_InitStructure;
;;;2195       NVIC_InitTypeDef NVIC_InitStructure;
;;;2196   	
;;;2197   	//串口3使用DMA1 发送为数据流3  通道4   
;;;2198       //F4与F1DMA多了一个数据流的说法详细参考中文数据手册DMA 表35
;;;2199       /* 1.使能DMA2时钟 */
;;;2200   	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
000004  2101              MOVS     r1,#1
000006  b091              SUB      sp,sp,#0x44           ;2193
000008  0548              LSLS     r0,r1,#21
00000a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;2201   	
;;;2202   	//串口发送DMA配置
;;;2203       /* 2.配置使用DMA发送数据 */
;;;2204       DMA_DeInit(DMA1_Stream3); //DMA1 数据流 3
00000e  f8dfa0d8          LDR      r10,|L26.232|
000012  4650              MOV      r0,r10
000014  f7fffffe          BL       DMA_DeInit
;;;2205       DMA_InitStructure.DMA_Channel = DMA_Channel_4;  /* 配置DMA1通道4 */
000018  f04f6600          MOV      r6,#0x8000000
;;;2206       DMA_InitStructure.DMA_PeripheralBaseAddr  = (uint32_t)(&(USART3->DR)); /* 目的 */
;;;2207       DMA_InitStructure.DMA_Memory0BaseAddr     = (uint32_t)MasterSendbuf; /*源内存地址*/
00001c  4834              LDR      r0,|L26.240|
00001e  4f33              LDR      r7,|L26.236|
000020  9600              STR      r6,[sp,#0]
000022  e9cd7001          STRD     r7,r0,[sp,#4]
;;;2208       DMA_InitStructure.DMA_DIR                 = DMA_DIR_MemoryToPeripheral;  /*方向内            
;;;2209                                                                               存到外设*/
;;;2210       DMA_InitStructure.DMA_BufferSize          = MAXRxTxLen;                    
;;;2211       /* 长度 */                  
;;;2212       DMA_InitStructure.DMA_PeripheralInc       = DMA_PeripheralInc_Disable;    
000026  2400              MOVS     r4,#0
000028  2040              MOVS     r0,#0x40              ;2208
00002a  f04f0880          MOV      r8,#0x80              ;2210
;;;2213       /* 外设地址是否自增 */
;;;2214       DMA_InitStructure.DMA_MemoryInc           = DMA_MemoryInc_Enable;        
00002e  f44f6980          MOV      r9,#0x400
000032  9003              STR      r0,[sp,#0xc]
000034  e9cd8404          STRD     r8,r4,[sp,#0x10]
000038  e9cd9406          STRD     r9,r4,[sp,#0x18]
;;;2215       /* 内存地址是否自增 */
;;;2216       DMA_InitStructure.DMA_PeripheralDataSize  = DMA_PeripheralDataSize_Byte;  
;;;2217       /* 目的数据带宽 */
;;;2218       DMA_InitStructure.DMA_MemoryDataSize      = DMA_MemoryDataSize_Byte;      
;;;2219       /* 源数据宽度 */
;;;2220       DMA_InitStructure.DMA_Mode                = DMA_Mode_Normal;             
;;;2221       /* 单次传输模式/循环传输模式 */
;;;2222       DMA_InitStructure.DMA_Priority            = DMA_Priority_High;             
00003c  02c0              LSLS     r0,r0,#11
00003e  9408              STR      r4,[sp,#0x20]
000040  e9cd4009          STRD     r4,r0,[sp,#0x24]
;;;2223       /* DMA优先级 */
;;;2224       DMA_InitStructure.DMA_FIFOMode            = DMA_FIFOMode_Disable;          
;;;2225       /* FIFO模式/直接模式 */
;;;2226       DMA_InitStructure.DMA_FIFOThreshold       = DMA_FIFOThreshold_HalfFull; 
000044  2501              MOVS     r5,#1
000046  e9cd450b          STRD     r4,r5,[sp,#0x2c]
;;;2227       /* FIFO大小 */
;;;2228       DMA_InitStructure.DMA_MemoryBurst         = DMA_MemoryBurst_Single;      
;;;2229        /* 单次传输 */
;;;2230       DMA_InitStructure.DMA_PeripheralBurst     = DMA_PeripheralBurst_Single;
00004a  940d              STR      r4,[sp,#0x34]
;;;2231       /* 3. 配置DMA */
;;;2232       DMA_Init(DMA1_Stream3, &DMA_InitStructure);
00004c  4669              MOV      r1,sp
00004e  4650              MOV      r0,r10
000050  940e              STR      r4,[sp,#0x38]
000052  f7fffffe          BL       DMA_Init
;;;2233       /* 4.使能DMA中断 */
;;;2234       DMA_ITConfig(DMA1_Stream3, DMA_IT_TC, ENABLE);
000056  2201              MOVS     r2,#1
000058  2110              MOVS     r1,#0x10
00005a  4650              MOV      r0,r10
00005c  f7fffffe          BL       DMA_ITConfig
;;;2235       /* 5.使能串口的DMA发送接口 */
;;;2236       USART_DMACmd(USART3, USART_DMAReq_Tx, ENABLE);
000060  f1a70b04          SUB      r11,r7,#4
000064  2201              MOVS     r2,#1
000066  2180              MOVS     r1,#0x80
000068  4658              MOV      r0,r11
00006a  f7fffffe          BL       USART_DMACmd
;;;2237       /* 6. 配置DMA中断优先级 */
;;;2238       NVIC_InitStructure.NVIC_IRQChannel                   = DMA1_Stream3_IRQn;  
00006e  200e              MOVS     r0,#0xe
000070  f88d003c          STRB     r0,[sp,#0x3c]
;;;2239       //  DMA发生中断         
;;;2240       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;          
000074  f88d403d          STRB     r4,[sp,#0x3d]
;;;2241       NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 4; 
000078  2004              MOVS     r0,#4
00007a  f88d003e          STRB     r0,[sp,#0x3e]
;;;2242       NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;
00007e  f88d503f          STRB     r5,[sp,#0x3f]
;;;2243       NVIC_Init(&NVIC_InitStructure);
000082  a80f              ADD      r0,sp,#0x3c
000084  f7fffffe          BL       NVIC_Init
;;;2244   	
;;;2245       /* 7.不使能DMA */                  
;;;2246       DMA_Cmd(DMA1_Stream3, DISABLE);// 数据流2
000088  2100              MOVS     r1,#0
00008a  4650              MOV      r0,r10
00008c  f7fffffe          BL       DMA_Cmd
;;;2247   	//************************DMA接收***********************//
;;;2248   	/* 2.配置使用DMA接收数据 */
;;;2249       DMA_DeInit(DMA1_Stream1); 
000090  f8dfa054          LDR      r10,|L26.232|
000094  f1aa0a30          SUB      r10,r10,#0x30
000098  4650              MOV      r0,r10
00009a  f7fffffe          BL       DMA_DeInit
;;;2250       DMA_InitStructure.DMA_Channel             = DMA_Channel_4;               
;;;2251       /* 配置DMA通道 */
;;;2252       DMA_InitStructure.DMA_PeripheralBaseAddr  = (uint32_t)(&(USART3->DR));   
;;;2253       /* 源地址 */
;;;2254       DMA_InitStructure.DMA_Memory0BaseAddr     = (uint32_t)MasterRecbuf;    
00009e  4814              LDR      r0,|L26.240|
0000a0  a902              ADD      r1,sp,#8
0000a2  3080              ADDS     r0,r0,#0x80
0000a4  e8810111          STM      r1,{r0,r4,r8}
0000a8  e9cd4905          STRD     r4,r9,[sp,#0x14]
;;;2255       /* 目标地址 */
;;;2256       DMA_InitStructure.DMA_DIR                 = DMA_DIR_PeripheralToMemory;    
;;;2257       /* 方向外设向内存  */
;;;2258       DMA_InitStructure.DMA_BufferSize          = MAXRxTxLen;                    		
;;;2259       /* 长度 */                  
;;;2260       DMA_InitStructure.DMA_PeripheralInc       = DMA_PeripheralInc_Disable;    
;;;2261         /* 外设地址是否自增 */
;;;2262       DMA_InitStructure.DMA_MemoryInc           = DMA_MemoryInc_Enable;         
;;;2263       /* 内存地址是否自增 */
;;;2264       DMA_InitStructure.DMA_PeripheralDataSize  = DMA_MemoryDataSize_Byte;     
;;;2265       /* 目的数据带宽 */
;;;2266       DMA_InitStructure.DMA_MemoryDataSize      = DMA_MemoryDataSize_Byte;      
;;;2267       /* 源数据宽度 */
;;;2268       DMA_InitStructure.DMA_Mode                = DMA_Mode_Circular;             
0000ac  0228              LSLS     r0,r5,#8
0000ae  e9cd4008          STRD     r4,r0,[sp,#0x20]
;;;2269       /*循环传输模式 */
;;;2270       DMA_InitStructure.DMA_Priority            = DMA_Priority_VeryHigh;        
0000b2  a90a              ADD      r1,sp,#0x28
0000b4  9407              STR      r4,[sp,#0x1c]         ;2268
0000b6  f44f3040          MOV      r0,#0x30000
0000ba  e8810031          STM      r1,{r0,r4,r5}
;;;2271       /* DMA优先级 */
;;;2272       DMA_InitStructure.DMA_FIFOMode            = DMA_FIFOMode_Disable;         
;;;2273        /* FIFO模式/直接模式 */
;;;2274       DMA_InitStructure.DMA_FIFOThreshold       = DMA_FIFOThreshold_HalfFull; 
;;;2275       /* FIFO大小 */
;;;2276       DMA_InitStructure.DMA_MemoryBurst         = DMA_MemoryBurst_Single;       
;;;2277       /* 单次传输 */
;;;2278       DMA_InitStructure.DMA_PeripheralBurst     = DMA_PeripheralBurst_Single;
0000be  940d              STR      r4,[sp,#0x34]
;;;2279       /* 3. 配置DMA */
;;;2280       DMA_Init(DMA1_Stream1, &DMA_InitStructure);
0000c0  4669              MOV      r1,sp
0000c2  4650              MOV      r0,r10
0000c4  940e              STR      r4,[sp,#0x38]
0000c6  e9cd6700          STRD     r6,r7,[sp,#0]
0000ca  f7fffffe          BL       DMA_Init
;;;2281       /* 4.由于接收不需要DMA中断，故不设置DMA中断 */
;;;2282       /* 5.使能串口的DMA接收 */
;;;2283       USART_DMACmd(USART3,USART_DMAReq_Rx,ENABLE);
0000ce  2201              MOVS     r2,#1
0000d0  2140              MOVS     r1,#0x40
0000d2  4658              MOV      r0,r11
0000d4  f7fffffe          BL       USART_DMACmd
;;;2284       /* 6. 由于接收不需要DMA中断，故不能配置DMA中断优先级 */
;;;2285       /* 7.使能DMA */ 
;;;2286       DMA_Cmd(DMA1_Stream1,ENABLE);
0000d8  2101              MOVS     r1,#1
0000da  4650              MOV      r0,r10
0000dc  f7fffffe          BL       DMA_Cmd
;;;2287   }
0000e0  b011              ADD      sp,sp,#0x44
0000e2  e8bd8ff0          POP      {r4-r11,pc}
;;;2288   
                          ENDP

0000e6  0000              DCW      0x0000
                  |L26.232|
                          DCD      0x40026058
                  |L26.236|
                          DCD      0x40004804
                  |L26.240|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;2368   
;;;2369   void USART3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2370   {
;;;2371       u8 Clear = Clear;
;;;2372       u16 num = 0;
;;;2373            
;;;2374       if(USART_GetITStatus(USART3, USART_IT_IDLE) != RESET)
000002  4c18              LDR      r4,|L27.100|
000004  f2404124          MOV      r1,#0x424
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USART_GetITStatus
00000e  2800              CMP      r0,#0
000010  d024              BEQ      |L27.92|
;;;2375       {
;;;2376           Clear = USART3->SR;  //读SR寄存器清除                                                            
000012  8820              LDRH     r0,[r4,#0]
;;;2377          
;;;2378           Clear = USART3->DR;  //读DR寄存器清除                                                        
000014  1d20              ADDS     r0,r4,#4
000016  8800              LDRH     r0,[r0,#0]
;;;2379           DMA_Cmd(DMA1_Stream1,DISABLE);   //关闭DMA
000018  4d13              LDR      r5,|L27.104|
00001a  2100              MOVS     r1,#0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       DMA_Cmd
;;;2380   		DMA_ClearFlag(DMA1_Stream1,DMA_FLAG_TCIF2);
000022  f04f5181          MOV      r1,#0x10200000
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       DMA_ClearFlag
;;;2381           num = DMA_GetCurrDataCounter(DMA1_Stream1); //得到真正接收数据个数
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       DMA_GetCurrDataCounter
;;;2382           if(num < MAXRxTxLen)
;;;2383           {
;;;2384               USART3_Recive_leng   = MAXRxTxLen - num;
000032  4c0e              LDR      r4,|L27.108|
000034  2880              CMP      r0,#0x80              ;2382
000036  d212              BCS      |L27.94|
000038  f1c00080          RSB      r0,r0,#0x80
00003c  b2c0              UXTB     r0,r0
00003e  7020              STRB     r0,[r4,#0]
;;;2385           }else
;;;2386           {
;;;2387               USART3_Recive_leng = MAXRxTxLen;
;;;2388           }
;;;2389            
;;;2390           if(USART3_Recive_leng > MAXRxTxLen)
000040  2880              CMP      r0,#0x80
000042  d901              BLS      |L27.72|
;;;2391           {
;;;2392               USART3_Recive_leng = 0;  //避免接收数据超界                                               
000044  2000              MOVS     r0,#0
                  |L27.70|
000046  7020              STRB     r0,[r4,#0]            ;2387
                  |L27.72|
;;;2393           }
;;;2394           DMA_SetCurrDataCounter(DMA1_Stream1,MAXRxTxLen);//设置DMA传输长度                                                        
000048  2180              MOVS     r1,#0x80
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       DMA_SetCurrDataCounter
;;;2395           DMA_Cmd(DMA1_Stream1,ENABLE);  //开启DMA
000050  2101              MOVS     r1,#1
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       DMA_Cmd
;;;2396           USART3_Recive_flg = 1;    //数据接收成功                                                  
000058  2001              MOVS     r0,#1
00005a  7060              STRB     r0,[r4,#1]
                  |L27.92|
;;;2397           
;;;2398       } 
;;;2399   }
00005c  bd70              POP      {r4-r6,pc}
                  |L27.94|
00005e  2080              MOVS     r0,#0x80              ;2387
000060  e7f1              B        |L27.70|
;;;2400   
                          ENDP

000062  0000              DCW      0x0000
                  |L27.100|
                          DCD      0x40004800
                  |L27.104|
                          DCD      0x40026028
                  |L27.108|
                          DCD      ||.data||

                          AREA ||i.USART_Configuration||, CODE, READONLY, ALIGN=2

                  USART_Configuration PROC
;;;2085   
;;;2086   void USART_Configuration(void)//串口初始化函数
000000  b570              PUSH     {r4-r6,lr}
;;;2087   {  
000002  b088              SUB      sp,sp,#0x20
;;;2088   	GPIO_InitTypeDef GPIO_InitStructure;
;;;2089   	USART_InitTypeDef USART_InitStructure;
;;;2090   	
;;;2091   	/* config USART1 clock */
;;;2092   	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
000004  2101              MOVS     r1,#1
000006  2010              MOVS     r0,#0x10
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;2093   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1);
00000c  4e2a              LDR      r6,|L28.184|
00000e  2207              MOVS     r2,#7
000010  2109              MOVS     r1,#9
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2094   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1);
000018  2207              MOVS     r2,#7
00001a  210a              MOVS     r1,#0xa
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2095   	/* USART1 GPIO config */
;;;2096   	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;2097   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
;;;2098   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000022  2502              MOVS     r5,#2
000024  1570              ASRS     r0,r6,#21             ;2097
000026  f88d5004          STRB     r5,[sp,#4]
;;;2099   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
00002c  9000              STR      r0,[sp,#0]            ;2098
00002e  f88d4006          STRB     r4,[sp,#6]
;;;2100   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f88d5005          STRB     r5,[sp,#5]
;;;2101   	GPIO_Init(GPIOA, &GPIO_InitStructure);    
000036  4669              MOV      r1,sp
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GPIO_Init
;;;2102   	/* Configure USART1 Rx (PA.10) as input floating */
;;;2103   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
00003e  0268              LSLS     r0,r5,#9
;;;2104   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000040  9000              STR      r0,[sp,#0]
000042  f88d5004          STRB     r5,[sp,#4]
;;;2105   	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;2106   	
;;;2107   	/* USART1 mode config */
;;;2108   	USART_InitStructure.USART_BaudRate = 9600;
00004e  f44f5016          MOV      r0,#0x2580
;;;2109   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000052  9002              STR      r0,[sp,#8]
;;;2110   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2111   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000054  f8ad4010          STRH     r4,[sp,#0x10]
;;;2112   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2113   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
;;;2114   	USART_Init(USART1, &USART_InitStructure);
00005a  4d18              LDR      r5,|L28.188|
00005c  f8ad400c          STRH     r4,[sp,#0xc]          ;2109
000060  f8ad0012          STRH     r0,[sp,#0x12]         ;2113
000064  f8ad400e          STRH     r4,[sp,#0xe]          ;2110
000068  f8ad4014          STRH     r4,[sp,#0x14]         ;2112
00006c  a902              ADD      r1,sp,#8
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       USART_Init
;;;2115   	
;;;2116   	/******使能串口接收中断******************/
;;;2117   	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	
000074  2201              MOVS     r2,#1
000076  f2405125          MOV      r1,#0x525
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_ITConfig
;;;2118   	USART_Cmd(USART1, ENABLE);//使能串口1
000080  2101              MOVS     r1,#1
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USART_Cmd
;;;2119   	USART_ClearFlag(USART1, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       USART_ClearFlag
000090  f44f60e0          MOV      r0,#0x700
000094  f7fffffe          BL       NVIC_PriorityGroupConfig
000098  2025              MOVS     r0,#0x25
00009a  f88d0018          STRB     r0,[sp,#0x18]
00009e  f88d4019          STRB     r4,[sp,#0x19]
0000a2  2004              MOVS     r0,#4
0000a4  f88d001a          STRB     r0,[sp,#0x1a]
0000a8  2001              MOVS     r0,#1
0000aa  f88d001b          STRB     r0,[sp,#0x1b]
0000ae  a806              ADD      r0,sp,#0x18
0000b0  f7fffffe          BL       NVIC_Init
;;;2120     
;;;2121   	USART1_NVIC_Config();//串口中断配置
;;;2122   }			
0000b4  b008              ADD      sp,sp,#0x20
0000b6  bd70              POP      {r4-r6,pc}
;;;2123   
                          ENDP

                  |L28.184|
                          DCD      0x40020000
                  |L28.188|
                          DCD      0x40011000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UART_Buffer_Rece
                          %        16

                          AREA ||area_number.31||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.31||, ||.bss||
                  UART_Buffer_Send
                          %        20
                  USART_RX_BUF
                          %        200
                  MasterSendbuf
                          %        128
                  MasterRecbuf
                          %        128

                          AREA ||.data||, DATA, ALIGN=2

                  USART3_Recive_leng
000000  00                DCB      0x00
                  USART3_Recive_flg
000001  00                DCB      0x00
                  UART_Buffer_Send_pointer
000002  00                DCB      0x00
                  |symbol_number.106|
000003  00                DCB      0x00
                  Transmit_BUFFERsize
000004  00                DCB      0x00
                  MODE
000005  00                DCB      0x00
                  mainswitch
000006  00                DCB      0x00
                  Rraly
000007  00                DCB      0x00
                  sendwait
000008  00                DCB      0x00
                  listsend
000009  00                DCB      0x00
                  listocwatch
00000a  00                DCB      0x00
                  listpowwatch1
00000b  00                DCB      0x00
                  listpowwatch2
00000c  0000              DCB      0x00,0x00
                  USART_RX_STA
00000e  0000              DCW      0x0000
                  USART_RX_CNT
000010  0000              DCW      0x0000
000012  0000              DCB      0x00,0x00
                  ||x1||
                          DCD      0x00000000
                  ||y1||
                          DCD      0x00000000
                  ||x2||
                          DCD      0x00000000
                  ||y2||
                          DCD      0x00000000
                  ||x3||
                          DCD      0x00000000
                  ||y3||
                          DCD      0x00000000
                  ||x4||
                          DCD      0x00000000
                  ||y4||
                          DCD      0x00000000
                  ||x5||
                          DCD      0x00000000
                  ||y5||
                          DCD      0x00000000
                  ||x6||
                          DCD      0x00000000
                  ||y6||
                          DCD      0x00000000
                  ||x7||
                          DCD      0x00000000
                  ||y7||
                          DCD      0x00000000
                  ||x8||
                          DCD      0x00000000
                  ||y8||
                          DCD      0x00000000
                  watchtest
                          DCD      0x00000000
                  CmdStr
000058  53544154          DCB      0x53,0x54,0x41,0x54
00005c  55535f00          DCB      0x55,0x53,0x5f,0x00
000060  004d4f44          DCB      0x00,0x4d,0x4f,0x44
000064  5f000000          DCB      0x5f,0x00,0x00,0x00
000068  00005452          DCB      0x00,0x00,0x54,0x52
00006c  49475f00          DCB      0x49,0x47,0x5f,0x00
000070  00000053          DCB      0x00,0x00,0x00,0x53
000074  45545041          DCB      0x45,0x54,0x50,0x41
000078  52415f00          DCB      0x52,0x41,0x5f,0x00
00007c  5345544c          DCB      0x53,0x45,0x54,0x4c
000080  4953545f          DCB      0x49,0x53,0x54,0x5f
000084  004f5052          DCB      0x00,0x4f,0x50,0x52
000088  45534554          DCB      0x45,0x53,0x45,0x54
00008c  5f00504f          DCB      0x5f,0x00,0x50,0x4f
000090  57495f00          DCB      0x57,0x49,0x5f,0x00
000094  00000041          DCB      0x00,0x00,0x00,0x41
000098  4443565f          DCB      0x44,0x43,0x56,0x5f
00009c  00000000          DCB      0x00,0x00,0x00,0x00
0000a0  4c4f5749          DCB      0x4c,0x4f,0x57,0x49
0000a4  5f000000          DCB      0x5f,0x00,0x00,0x00
0000a8  00484f52          DCB      0x00,0x48,0x4f,0x52
0000ac  4c5f0000          DCB      0x4c,0x5f,0x00,0x00
0000b0  00004c56          DCB      0x00,0x00,0x4c,0x56
0000b4  4c5f0000          DCB      0x4c,0x5f,0x00,0x00
0000b8  00000053          DCB      0x00,0x00,0x00,0x53
0000bc  57495443          DCB      0x57,0x49,0x54,0x43
0000c0  485f0000          DCB      0x48,0x5f,0x00,0x00
0000c4  43414c56          DCB      0x43,0x41,0x4c,0x56
0000c8  5f000000          DCB      0x5f,0x00,0x00,0x00
0000cc  0043414c          DCB      0x00,0x43,0x41,0x4c
0000d0  495f0000          DCB      0x49,0x5f,0x00,0x00
0000d4  00004341          DCB      0x00,0x00,0x43,0x41
0000d8  4c525f00          DCB      0x4c,0x52,0x5f,0x00
0000dc  00000044          DCB      0x00,0x00,0x00,0x44
0000e0  41435f00          DCB      0x41,0x43,0x5f,0x00
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
0000e8  4f564552          DCB      0x4f,0x56,0x45,0x52
0000ec  5f000000          DCB      0x5f,0x00,0x00,0x00
0000f0  0054454d          DCB      0x00,0x54,0x45,0x4d
0000f4  505f0000          DCB      0x50,0x5f,0x00,0x00
0000f8  0000424f          DCB      0x00,0x00,0x42,0x4f
0000fc  4f545f00          DCB      0x4f,0x54,0x5f,0x00
000100  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.34||, DATA, ALIGN=0

                          EXPORTAS ||area_number.34||, ||.data||
                  UART_Buffer_Size
000000  00                DCB      0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  t_USART
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.data||
                  powsetdelay
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\drive\\usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REV16|
#line 129 "E:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_usart_c_7cc17ae7____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REVSH|
#line 144
|__asm___7_usart_c_7cc17ae7____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
