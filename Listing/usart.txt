; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\usart.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\usart.d --cpu=Cortex-M4.fp.sp --apcs=interwork --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=537 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\usart.crf --no_multibyte_chars ..\drive\usart.c]
                          THUMB

                          AREA ||i.CalHandle||, CODE, READONLY, ALIGN=2

                  CalHandle PROC
;;;523    //校准处理
;;;524    void CalHandle(u8 mode,u8 range,u32 data)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;525    {
000004  2300              MOVS     r3,#0
;;;526    	if(mode == 0)//测量电压
;;;527    	{
;;;528    		if(range == 0)//低档位低段
;;;529    		{
;;;530    			calflag = 1;
000006  4efe              LDR      r6,|L1.1024|
;;;531    			LOAD_V_SW = 0;
000008  f8dfc3f8          LDR      r12,|L1.1028|
00000c  4614              MOV      r4,r2                 ;525
00000e  2701              MOVS     r7,#1                 ;530
;;;532    			x1 = Vmon_Load_value;
000010  4dfd              LDR      r5,|L1.1032|
;;;533    			y1 = data;
;;;534    		}else if(range == 1){//低档位高段
;;;535    			
;;;536    			x2 = Vmon_Load_value;
;;;537    			y2 = data;
;;;538    			CalPara.TestLV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;539    			CalPara.OffsetLV[0] = (float)y2 - CalPara.TestLV[0]*(float)x2;
;;;540    			
;;;541    			Flag_DAC_OFF=0;
000012  f8dfa3fc          LDR      r10,|L1.1040|
000016  f8dfb3f4          LDR      r11,|L1.1036|
;;;542    			calflag = 0;
;;;543    		}else if(range == 2){//高档位低段
;;;544    			calflag = 1;
;;;545    			LOAD_V_SW = 1;
;;;546    			x1 = Vmon_Load_value;
;;;547    			y1 = data;
;;;548    		}else if(range == 3){//高档位高段
;;;549    			
;;;550    			x2 = Vmon_Load_value;
;;;551    			y2 = data;
;;;552    			CalPara.TestLV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;553    			CalPara.OffsetLV[1] = (float)y2 - CalPara.TestLV[1]*(float)x2;
;;;554    				//参数写进FLASH
;;;555    			Flag_DAC_OFF=0;
;;;556    			calflag = 0;
;;;557    		}else if(range == 4){//电源控制电压和测量1
;;;558    			calflag = 1;
;;;559    			Contr_Voltage = 3500;
;;;560    			Contr_Current = 5000;
00001a  f8dfe3f8          LDR      lr,|L1.1044|
00001e  f8da2000          LDR      r2,[r10,#0]           ;541
;;;561    			OnOff_GPOI_ResetSet(0,1);
;;;562    		}else if(range == 5){//电源控制电压和测量2
;;;563    			x1 = data;
;;;564    			y1 = Contr_Voltage;
;;;565    			x3 = Vmon_POWE_value;
;;;566    			y3 = data;
;;;567    			Contr_Voltage = 10000;
;;;568    			Contr_Current = 5000;
;;;569    		}else if(range == 6){//电源控制电压和测量3
;;;570    			x2 = data;
;;;571    			y2 = Contr_Voltage;
;;;572    			x4 = Vmon_POWE_value;
;;;573    			y4 = data;
;;;574    			
;;;575    			CalPara.SetPV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;576    			CalPara.OffsetSetPV[0] = (float)y2 - CalPara.SetPV[0]*(float)x2;
;;;577    			
;;;578    			CalPara.TestPV[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;579    			CalPara.OffsetPV[0] = (float)y4 - CalPara.TestPV[0]*(float)x4;
;;;580    			
;;;581    			Flag_DAC_OFF=0;
;;;582    			calflag = 0;
;;;583    			Off_GPOI_ResetSet();
;;;584    		}else if(range == 7){//CV控制低档1
;;;585    			LOAD_MODE = 1;
;;;586    			LOAD_V_SW=0;
;;;587    			GPIO_ResetBits(GPIOB,GPIO_Pin_1);//电压档位为低档
;;;588    			calflag = 1;
;;;589    			Contr_Laod = 1000;
000022  f8df93f4          LDR      r9,|L1.1048|
000026  edd50a05          VLDR     s1,[r5,#0x14]         ;532
00002a  ed950a06          VLDR     s0,[r5,#0x18]         ;532
00002e  edd52a0a          VLDR     s5,[r5,#0x28]         ;532
000032  ed952a09          VLDR     s4,[r5,#0x24]         ;532
000036  f0220208          BIC      r2,r2,#8              ;541
00003a  b120              CBZ      r0,|L1.70|
;;;590    			OnOff_GPOI_ResetSet(2,1);
;;;591    		}else if(range == 8){//CV控制低档2
;;;592    			LOAD_MODE = 1;
;;;593    			LOAD_V_SW=0;
;;;594    			GPIO_ResetBits(GPIOB,GPIO_Pin_1);//电压档位为低档
;;;595    			x1 = data;
;;;596    			y1 = Contr_Laod;
;;;597    			Contr_Laod = 20000;
;;;598    //			OnOff_GPOI_ResetSet(2,1);
;;;599    		}else if(range == 9){//CV控制低档3
;;;600    			x2 = data;
;;;601    			y2 = Contr_Laod;
;;;602    			CalPara.SetCV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;603    			CalPara.OffsetCV[0] = (float)y2 - CalPara.SetCV[0]*(float)x2;
;;;604    				//参数写进FLASH
;;;605    			Flag_DAC_OFF=0;
;;;606    			calflag = 0;
;;;607    			Off_GPOI_ResetSet();
;;;608    		}else if(range == 10){//CV控制高档1
;;;609    			LOAD_MODE = 1;
;;;610    			LOAD_V_SW=1;
;;;611    			GPIO_SetBits(GPIOB,GPIO_Pin_1);//电压档位为高档
;;;612    			calflag = 1;
;;;613    			Contr_Laod = 1000;
;;;614    			OnOff_GPOI_ResetSet(2,1);
;;;615    		}else if(range == 11){//CV控制高档2
;;;616    			LOAD_MODE = 1;
;;;617    			LOAD_V_SW=1;
;;;618    			GPIO_SetBits(GPIOB,GPIO_Pin_1);//电压档位为高档
;;;619    			x1 = data;
;;;620    			y1 = Contr_Laod;
;;;621    			Contr_Laod = 20000;
;;;622    			OnOff_GPOI_ResetSet(2,1);
;;;623    		}else if(range == 12){//CV控制高档3
;;;624    			x2 = data;
;;;625    			y2 = Contr_Laod;
;;;626    			CalPara.SetCV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;627    			CalPara.OffsetCV[1] = (float)y2 - CalPara.SetCV[1]*(float)x2;
;;;628    				//参数写进FLASH
;;;629    			Flag_DAC_OFF=0;
;;;630    			calflag = 0;
;;;631    			Off_GPOI_ResetSet();
;;;632    		}
;;;633    	}else if(mode == 1){
00003c  2801              CMP      r0,#1
00003e  d074              BEQ      |L1.298|
;;;634    		if(range == 0)//负载电流低档位1
;;;635    		{		
;;;636    			LOAD_I_SW = 0;
;;;637    			Contr_Laod = 3000;
;;;638    			calflag = 1;
;;;639    			OnOff_GPOI_ResetSet(2,1);
;;;640    		}
;;;641    		else if(range == 1)//负载电流低档位2
;;;642    		{
;;;643    			LOAD_I_SW = 0;			
;;;644    			x1 = data;
;;;645    			y1 = Contr_Laod;
;;;646    			x4 = Imon_Load_value;
;;;647    			y4 = data;
;;;648    			Contr_Laod = 20000;
;;;649    		}else if(range == 2)//负载电流低档位3
;;;650    		{
;;;651    			LOAD_I_SW = 0;			
;;;652    			x2 = data;
;;;653    			y2 = Contr_Laod;
;;;654    			x5 = Imon_Load_value;
;;;655    			y5 = data;
;;;656    			Contr_Laod = 60000;
;;;657    		}else if(range == 3){//负载电流低档位4
;;;658    			
;;;659    			x3 = data;
;;;660    			y3 = Contr_Laod;
;;;661    			x6 = Imon_Load_value;
;;;662    			y6 = data;
;;;663    			
;;;664    			CalPara.SetLC[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;665    			CalPara.OffsetLC[0] = (float)y2 - CalPara.SetLC[0]*(float)x2;
;;;666    			CalPara.SetLC[1] = ((float)y3 - (float)y2)/((float)x3 - (float)x2);
;;;667    			CalPara.OffsetLC[1] = (float)y3 - CalPara.SetLC[1]*(float)x3;
;;;668    			
;;;669    			CalPara.TestLC[0] = ((float)y5 - (float)y4)/((float)x5 - (float)x4);
;;;670    			CalPara.OffsetTestLC[0] = (float)y5 - CalPara.TestLC[0]*(float)x5;
;;;671    			CalPara.TestLC[1] = ((float)y6 - (float)y5)/((float)x6 - (float)x5);
;;;672    			CalPara.OffsetTestLC[1] = (float)y6 - CalPara.TestLC[1]*(float)x6;
;;;673    				
;;;674    			Flag_DAC_OFF =0;
;;;675    			calflag = 0;
;;;676    			Off_GPOI_ResetSet();
;;;677    		}else if(range == 4){//负载电流高档位1
;;;678    			LOAD_I_SW = 1;
;;;679    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;680    			Contr_Laod = 6000;
;;;681    			calflag = 1;
;;;682    			OnOff_GPOI_ResetSet(2,1);
;;;683    		}else if(range == 5){//负载电流高档位2
;;;684    			
;;;685    			LOAD_I_SW = 1;
;;;686    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;687    			x1 = data;
;;;688    			y1 = Contr_Laod;
;;;689    			x5 = Imon_Load_value;
;;;690    			y5 = data;
;;;691    			Contr_Laod = 12000;
;;;692    		}else if(range == 6){//负载电流高档位3
;;;693    			
;;;694    			LOAD_I_SW = 1;
;;;695    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;696    			x2 = data;
;;;697    			y2 = Contr_Laod;
;;;698    			x6 = Imon_Load_value;
;;;699    			y6 = data;
;;;700    			Contr_Laod = 20000;
;;;701    		}else if(range == 7){//负载电流高档位4
;;;702    			
;;;703    			LOAD_I_SW = 1;
;;;704    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;705    			x3 = data;
;;;706    			y3 = Contr_Laod;
;;;707    			x7 = Imon_Load_value;
;;;708    			y7 = data;
;;;709    			Contr_Laod = 27000;
;;;710    		}else if(range == 8){//负载电流高档位5
;;;711    			
;;;712    			x4 = data;
;;;713    			y4 = Contr_Laod;
;;;714    			x8 = Imon_Load_value;
;;;715    			y8 = data;
;;;716    			
;;;717    			CalPara.SetLC[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;718    			CalPara.OffsetLC[2] = (float)y2 - CalPara.SetLC[2]*(float)x2;
;;;719    			CalPara.SetLC[3] = ((float)y3 - (float)y2)/((float)x3 - (float)x2);
;;;720    			CalPara.OffsetLC[3] = (float)y3 - CalPara.SetLC[3]*(float)x3;
;;;721    			CalPara.SetLC[4] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;722    			CalPara.OffsetLC[4] = (float)y4 - CalPara.SetLC[4]*(float)x4;
;;;723    			
;;;724    			CalPara.TestLC[2] = ((float)y6 - (float)y5)/((float)x6 - (float)x5);
;;;725    			CalPara.OffsetTestLC[2] = (float)y6 - CalPara.TestLC[2]*(float)x6;
;;;726    			CalPara.TestLC[3] = ((float)y7 - (float)y6)/((float)x7 - (float)x6);
;;;727    			CalPara.OffsetTestLC[3] = (float)y7 - CalPara.TestLC[3]*(float)x7;
;;;728    			CalPara.TestLC[4] = ((float)y8 - (float)y7)/((float)x8 - (float)x7);
;;;729    			CalPara.OffsetTestLC[4] = (float)y8 - CalPara.TestLC[4]*(float)x8;
;;;730    				
;;;731    			Flag_DAC_OFF =0;
;;;732    			calflag = 0;
;;;733    			Off_GPOI_ResetSet();
;;;734    		}else if(range == 9){//电源电流1
;;;735    			Contr_Voltage = 3500;
;;;736    			Contr_Current = 4000;
;;;737    			calflag = 1;
;;;738    			OnOff_GPOI_ResetSet(0,1);
;;;739    		}else if(range == 10){//电源电流2
;;;740    			
;;;741    			x1 = data;
;;;742    			y1 = Contr_Current;
;;;743    			x3 = Imon_POWE_value;
;;;744    			y3 = data;
;;;745    			Contr_Voltage = 3500;
;;;746    			Contr_Current = 14000;
;;;747    		}else if(range == 11){//电源电流3
;;;748    			
;;;749    			x2 = data;
;;;750    			y2 = Contr_Current;
;;;751    			x4 = Imon_POWE_value;
;;;752    			y4 = data;
;;;753    			
;;;754    			CalPara.SetPC[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;755    			CalPara.OffsetPC[0] = (float)y2 - CalPara.SetPC[0]*(float)x2;
;;;756    			
;;;757    			CalPara.TestPC[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;758    			CalPara.OffsetTestPC[0] = (float)y4 - CalPara.TestPC[0]*(float)x4;
;;;759    			
;;;760    			Flag_DAC_OFF=0;
;;;761    			calflag = 0;
;;;762    			Off_GPOI_ResetSet();
;;;763    		}
;;;764    	}else if(mode == 2){
000040  2802              CMP      r0,#2
000042  d073              BEQ      |L1.300|
000044  e24f              B        |L1.1254|
                  |L1.70|
000046  48f5              LDR      r0,|L1.1052|
000048  b1f1              CBZ      r1,|L1.136|
00004a  2901              CMP      r1,#1                 ;534
00004c  d020              BEQ      |L1.144|
00004e  2902              CMP      r1,#2                 ;543
000050  d042              BEQ      |L1.216|
000052  2903              CMP      r1,#3                 ;548
000054  d045              BEQ      |L1.226|
000056  f2413888          MOV      r8,#0x1388            ;560
00005a  2904              CMP      r1,#4                 ;557
00005c  d068              BEQ      |L1.304|
00005e  48f0              LDR      r0,|L1.1056|
000060  2905              CMP      r1,#5                 ;562
000062  d06d              BEQ      |L1.320|
000064  2906              CMP      r1,#6                 ;569
000066  d07f              BEQ      |L1.360|
000068  48ee              LDR      r0,|L1.1060|
00006a  f44f787a          MOV      r8,#0x3e8             ;589
00006e  2907              CMP      r1,#7                 ;584
000070  d074              BEQ      |L1.348|
000072  2908              CMP      r1,#8                 ;591
000074  d073              BEQ      |L1.350|
000076  2909              CMP      r1,#9                 ;599
000078  d072              BEQ      |L1.352|
00007a  290a              CMP      r1,#0xa               ;608
00007c  d071              BEQ      |L1.354|
00007e  290b              CMP      r1,#0xb               ;615
000080  d070              BEQ      |L1.356|
000082  290c              CMP      r1,#0xc               ;623
000084  d06f              BEQ      |L1.358|
000086  e22e              B        |L1.1254|
                  |L1.136|
000088  7037              STRB     r7,[r6,#0]            ;530
00008a  f8cc301c          STR      r3,[r12,#0x1c]        ;531  ; Run_Control
00008e  e026              B        |L1.222|
                  |L1.144|
000090  8800              LDRH     r0,[r0,#0]            ;536  ; Vmon_Load_value
000092  ee014a10          VMOV     s2,r4                 ;538
000096  eeb80a40          VCVT.F32.U32 s0,s0                 ;538
00009a  eef80a60          VCVT.F32.U32 s1,s1                 ;538
00009e  eeb81a41          VCVT.F32.U32 s2,s2                 ;538
0000a2  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;536
0000a6  ee311a40          VSUB.F32 s2,s2,s0              ;538
0000aa  ee000a10          VMOV     s0,r0                 ;538
0000ae  eeb80a40          VCVT.F32.U32 s0,s0                 ;538
0000b2  ee700a60          VSUB.F32 s1,s0,s1              ;538
0000b6  ee810a20          VDIV.F32 s0,s2,s1              ;538
0000ba  ee000a90          VMOV     s1,r0                 ;539
0000be  eeb81a60          VCVT.F32.U32 s2,s1                 ;539
0000c2  ee004a90          VMOV     s1,r4                 ;539
0000c6  eef80a60          VCVT.F32.U32 s1,s1                 ;539
0000ca  ed8b0a00          VSTR     s0,[r11,#0]           ;538
0000ce  ee400a41          VMLS.F32 s1,s0,s2              ;539
0000d2  edcb0a04          VSTR     s1,[r11,#0x10]        ;539
0000d6  e395              B        |L1.2052|
                  |L1.216|
0000d8  7037              STRB     r7,[r6,#0]            ;544
0000da  f8cc701c          STR      r7,[r12,#0x1c]        ;545  ; Run_Control
                  |L1.222|
0000de  8800              LDRH     r0,[r0,#0]            ;532  ; Vmon_Load_value
0000e0  e3c1              B        |L1.2150|
                  |L1.226|
0000e2  8800              LDRH     r0,[r0,#0]            ;550  ; Vmon_Load_value
0000e4  ee014a10          VMOV     s2,r4                 ;552
0000e8  eeb80a40          VCVT.F32.U32 s0,s0                 ;552
0000ec  eef80a60          VCVT.F32.U32 s1,s1                 ;552
0000f0  eeb81a41          VCVT.F32.U32 s2,s2                 ;552
0000f4  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;550
0000f8  ee311a40          VSUB.F32 s2,s2,s0              ;552
0000fc  ee000a10          VMOV     s0,r0                 ;552
000100  eeb80a40          VCVT.F32.U32 s0,s0                 ;552
000104  ee700a60          VSUB.F32 s1,s0,s1              ;552
000108  ee810a20          VDIV.F32 s0,s2,s1              ;552
00010c  ee000a90          VMOV     s1,r0                 ;553
000110  eeb81a60          VCVT.F32.U32 s2,s1                 ;553
000114  ee004a90          VMOV     s1,r4                 ;553
000118  eef80a60          VCVT.F32.U32 s1,s1                 ;553
00011c  ed8b0a01          VSTR     s0,[r11,#4]           ;552
000120  ee400a41          VMLS.F32 s1,s0,s2              ;553
000124  edcb0a05          VSTR     s1,[r11,#0x14]        ;553
000128  e36c              B        |L1.2052|
                  |L1.298|
00012a  e0e6              B        |L1.762|
                  |L1.300|
00012c  e329              B        |L1.1922|
00012e  e7ff              B        |L1.304|
                  |L1.304|
000130  7037              STRB     r7,[r6,#0]            ;558
000132  48bd              LDR      r0,|L1.1064|
000134  f64051ac          MOV      r1,#0xdac             ;559
000138  8001              STRH     r1,[r0,#0]            ;559
00013a  f8ae8000          STRH     r8,[lr,#0]            ;560
00013e  e2c6              B        |L1.1742|
                  |L1.320|
000140  49b9              LDR      r1,|L1.1064|
000142  616c              STR      r4,[r5,#0x14]         ;564  ; x1
000144  880a              LDRH     r2,[r1,#0]            ;564  ; Contr_Voltage
000146  61aa              STR      r2,[r5,#0x18]         ;565  ; y1
000148  8800              LDRH     r0,[r0,#0]            ;565  ; Vmon_POWE_value
00014a  e9c50409          STRD     r0,r4,[r5,#0x24]      ;565
00014e  f2427010          MOV      r0,#0x2710            ;567
000152  8008              STRH     r0,[r1,#0]            ;567
000154  f8ae8000          STRH     r8,[lr,#0]            ;568
000158  e1c5              B        |L1.1254|
00015a  e005              B        |L1.360|
                  |L1.348|
00015c  e04d              B        |L1.506|
                  |L1.350|
00015e  e057              B        |L1.528|
                  |L1.352|
000160  e063              B        |L1.554|
                  |L1.354|
000162  e087              B        |L1.628|
                  |L1.356|
000164  e094              B        |L1.656|
                  |L1.358|
000166  e0a3              B        |L1.688|
                  |L1.360|
000168  49af              LDR      r1,|L1.1064|
00016a  61ec              STR      r4,[r5,#0x1c]         ;571  ; x2
00016c  8809              LDRH     r1,[r1,#0]            ;571  ; Contr_Voltage
00016e  6229              STR      r1,[r5,#0x20]         ;572  ; y2
000170  8800              LDRH     r0,[r0,#0]            ;572  ; Vmon_POWE_value
000172  ee011a10          VMOV     s2,r1                 ;575
000176  eeb80a40          VCVT.F32.U32 s0,s0                 ;575
00017a  eef80a60          VCVT.F32.U32 s1,s1                 ;575
00017e  eeb81a41          VCVT.F32.U32 s2,s2                 ;575
000182  e9c5040b          STRD     r0,r4,[r5,#0x2c]      ;572
000186  ee311a40          VSUB.F32 s2,s2,s0              ;575
00018a  ee004a10          VMOV     s0,r4                 ;575
00018e  465d              MOV      r5,r11                ;575
000190  eeb80a40          VCVT.F32.U32 s0,s0                 ;575
000194  ee700a60          VSUB.F32 s1,s0,s1              ;575
000198  ee810a20          VDIV.F32 s0,s2,s1              ;575
00019c  ee004a90          VMOV     s1,r4                 ;576
0001a0  eeb81a60          VCVT.F32.U32 s2,s1                 ;576
0001a4  ee001a90          VMOV     s1,r1                 ;576
0001a8  eef80a60          VCVT.F32.U32 s1,s1                 ;576
0001ac  ed8b0a02          VSTR     s0,[r11,#8]           ;575
0001b0  ee400a41          VMLS.F32 s1,s0,s2              ;576
0001b4  ee004a10          VMOV     s0,r4                 ;578
0001b8  eeb81a42          VCVT.F32.U32 s2,s4                 ;578
0001bc  eeb80a40          VCVT.F32.U32 s0,s0                 ;578
0001c0  edcb0a06          VSTR     s1,[r11,#0x18]        ;576
0001c4  eef80a62          VCVT.F32.U32 s1,s5                 ;578
0001c8  ee700a60          VSUB.F32 s1,s0,s1              ;578
0001cc  ee000a10          VMOV     s0,r0                 ;578
0001d0  eeb80a40          VCVT.F32.U32 s0,s0                 ;578
0001d4  ee301a41          VSUB.F32 s2,s0,s2              ;578
0001d8  ee800a81          VDIV.F32 s0,s1,s2              ;578
0001dc  ee000a90          VMOV     s1,r0                 ;579
0001e0  eeb81a60          VCVT.F32.U32 s2,s1                 ;579
0001e4  ee004a90          VMOV     s1,r4                 ;579
0001e8  eef80a60          VCVT.F32.U32 s1,s1                 ;579
0001ec  ed850a03          VSTR     s0,[r5,#0xc]          ;578
0001f0  ee400a41          VMLS.F32 s1,s0,s2              ;579
0001f4  edcb0a07          VSTR     s1,[r11,#0x1c]        ;579
0001f8  e25a              B        |L1.1712|
                  |L1.506|
0001fa  f8cc7018          STR      r7,[r12,#0x18]        ;585  ; Run_Control
0001fe  f8cc301c          STR      r3,[r12,#0x1c]        ;586  ; Run_Control
000202  2102              MOVS     r1,#2                 ;587
000204  f7fffffe          BL       GPIO_ResetBits
000208  7037              STRB     r7,[r6,#0]            ;588
00020a  f8a98000          STRH     r8,[r9,#0]            ;589
00020e  e03c              B        |L1.650|
                  |L1.528|
000210  f8cc7018          STR      r7,[r12,#0x18]        ;592  ; Run_Control
000214  f8cc301c          STR      r3,[r12,#0x1c]        ;593  ; Run_Control
000218  2102              MOVS     r1,#2                 ;594
00021a  f7fffffe          BL       GPIO_ResetBits
00021e  616c              STR      r4,[r5,#0x14]         ;596  ; x1
000220  f8b91000          LDRH     r1,[r9,#0]            ;596  ; Contr_Laod
000224  4648              MOV      r0,r9                 ;596
000226  61a9              STR      r1,[r5,#0x18]         ;597  ; y1
000228  e17d              B        |L1.1318|
                  |L1.554|
00022a  61ec              STR      r4,[r5,#0x1c]         ;601  ; x2
00022c  f8b90000          LDRH     r0,[r9,#0]            ;601  ; Contr_Laod
000230  eeb80a40          VCVT.F32.U32 s0,s0                 ;602
000234  ee010a10          VMOV     s2,r0                 ;602
000238  eef80a60          VCVT.F32.U32 s1,s1                 ;602
00023c  6228              STR      r0,[r5,#0x20]         ;602  ; y2
00023e  eeb81a41          VCVT.F32.U32 s2,s2                 ;602
000242  ee311a40          VSUB.F32 s2,s2,s0              ;602
000246  ee004a10          VMOV     s0,r4                 ;602
00024a  eeb80a40          VCVT.F32.U32 s0,s0                 ;602
00024e  ee700a60          VSUB.F32 s1,s0,s1              ;602
000252  ee810a20          VDIV.F32 s0,s2,s1              ;602
000256  ee004a90          VMOV     s1,r4                 ;603
00025a  eeb81a60          VCVT.F32.U32 s2,s1                 ;603
00025e  ee000a90          VMOV     s1,r0                 ;603
000262  eef80a60          VCVT.F32.U32 s1,s1                 ;603
000266  ed8b0a0d          VSTR     s0,[r11,#0x34]        ;602
00026a  ee400a41          VMLS.F32 s1,s0,s2              ;603
00026e  edcb0a1b          VSTR     s1,[r11,#0x6c]        ;603
000272  e21d              B        |L1.1712|
                  |L1.628|
000274  f8cc7018          STR      r7,[r12,#0x18]        ;609  ; Run_Control
000278  f8cc701c          STR      r7,[r12,#0x1c]        ;610  ; Run_Control
00027c  2102              MOVS     r1,#2                 ;611
00027e  f7fffffe          BL       GPIO_SetBits
000282  7037              STRB     r7,[r6,#0]            ;612
000284  4641              MOV      r1,r8                 ;613
000286  4648              MOV      r0,r9                 ;613
000288  e010              B        |L1.684|
                  |L1.650|
00028a  2101              MOVS     r1,#1                 ;590
00028c  2002              MOVS     r0,#2                 ;590
00028e  e128              B        |L1.1250|
                  |L1.656|
000290  f8cc7018          STR      r7,[r12,#0x18]        ;616  ; Run_Control
000294  f8cc701c          STR      r7,[r12,#0x1c]        ;617  ; Run_Control
000298  2102              MOVS     r1,#2                 ;618
00029a  f7fffffe          BL       GPIO_SetBits
00029e  616c              STR      r4,[r5,#0x14]         ;620  ; x1
0002a0  f8b91000          LDRH     r1,[r9,#0]            ;620  ; Contr_Laod
0002a4  4648              MOV      r0,r9                 ;620
0002a6  61a9              STR      r1,[r5,#0x18]         ;621  ; y1
0002a8  f6446120          MOV      r1,#0x4e20            ;621
                  |L1.684|
0002ac  8001              STRH     r1,[r0,#0]            ;621
0002ae  e7ec              B        |L1.650|
                  |L1.688|
0002b0  61ec              STR      r4,[r5,#0x1c]         ;625  ; x2
0002b2  f8b90000          LDRH     r0,[r9,#0]            ;625  ; Contr_Laod
0002b6  eeb80a40          VCVT.F32.U32 s0,s0                 ;626
0002ba  ee010a10          VMOV     s2,r0                 ;626
0002be  eef80a60          VCVT.F32.U32 s1,s1                 ;626
0002c2  6228              STR      r0,[r5,#0x20]         ;626  ; y2
0002c4  eeb81a41          VCVT.F32.U32 s2,s2                 ;626
0002c8  ee311a40          VSUB.F32 s2,s2,s0              ;626
0002cc  ee004a10          VMOV     s0,r4                 ;626
0002d0  eeb80a40          VCVT.F32.U32 s0,s0                 ;626
0002d4  ee700a60          VSUB.F32 s1,s0,s1              ;626
0002d8  ee810a20          VDIV.F32 s0,s2,s1              ;626
0002dc  ee004a90          VMOV     s1,r4                 ;627
0002e0  eeb81a60          VCVT.F32.U32 s2,s1                 ;627
0002e4  ee000a90          VMOV     s1,r0                 ;627
0002e8  eef80a60          VCVT.F32.U32 s1,s1                 ;627
0002ec  ed8b0a0e          VSTR     s0,[r11,#0x38]        ;626
0002f0  ee400a41          VMLS.F32 s1,s0,s2              ;627
0002f4  edcb0a1c          VSTR     s1,[r11,#0x70]        ;627
0002f8  e1da              B        |L1.1712|
                  |L1.762|
0002fa  b321              CBZ      r1,|L1.838|
0002fc  2901              CMP      r1,#1                 ;641
0002fe  d027              BEQ      |L1.848|
000300  2902              CMP      r1,#2                 ;649
000302  d031              BEQ      |L1.872|
000304  f8df8100          LDR      r8,|L1.1032|
000308  2903              CMP      r1,#3                 ;657
00030a  edd83a0e          VLDR     s7,[r8,#0x38]         ;532
00030e  ed983a0d          VLDR     s6,[r8,#0x34]         ;532
000312  edd81a08          VLDR     s3,[r8,#0x20]         ;532
000316  ed981a07          VLDR     s2,[r8,#0x1c]         ;532
00031a  d034              BEQ      |L1.902|
00031c  4843              LDR      r0,|L1.1068|
00031e  f44f6800          MOV      r8,#0x800             ;679
000322  2904              CMP      r1,#4                 ;677
000324  d067              BEQ      |L1.1014|
000326  2905              CMP      r1,#5                 ;683
000328  d066              BEQ      |L1.1016|
00032a  2906              CMP      r1,#6                 ;692
00032c  d065              BEQ      |L1.1018|
00032e  2907              CMP      r1,#7                 ;701
000330  d064              BEQ      |L1.1020|
000332  2908              CMP      r1,#8                 ;710
000334  d063              BEQ      |L1.1022|
000336  2909              CMP      r1,#9                 ;734
000338  d07e              BEQ      |L1.1080|
00033a  4f3d              LDR      r7,|L1.1072|
00033c  290a              CMP      r1,#0xa               ;739
00033e  d07c              BEQ      |L1.1082|
000340  290b              CMP      r1,#0xb               ;747
000342  d07b              BEQ      |L1.1084|
000344  e328              B        |L1.2456|
                  |L1.838|
000346  f8cc3020          STR      r3,[r12,#0x20]        ;636  ; Run_Control
00034a  f64031b8          MOV      r1,#0xbb8             ;637
00034e  e0c4              B        |L1.1242|
                  |L1.848|
000350  f8cc3020          STR      r3,[r12,#0x20]        ;643  ; Run_Control
000354  616c              STR      r4,[r5,#0x14]         ;645  ; x1
000356  f8b91000          LDRH     r1,[r9,#0]            ;645  ; Contr_Laod
00035a  4648              MOV      r0,r9                 ;645
00035c  61a9              STR      r1,[r5,#0x18]         ;646  ; y1
00035e  4935              LDR      r1,|L1.1076|
000360  8809              LDRH     r1,[r1,#0]            ;646  ; Imon_Load_value
000362  e9c5140b          STRD     r1,r4,[r5,#0x2c]      ;646
000366  e0de              B        |L1.1318|
                  |L1.872|
000368  f8cc3020          STR      r3,[r12,#0x20]        ;651  ; Run_Control
00036c  61ec              STR      r4,[r5,#0x1c]         ;653  ; x2
00036e  f8b91000          LDRH     r1,[r9,#0]            ;653  ; Contr_Laod
000372  4648              MOV      r0,r9                 ;653
000374  6229              STR      r1,[r5,#0x20]         ;654  ; y2
000376  492f              LDR      r1,|L1.1076|
000378  8809              LDRH     r1,[r1,#0]            ;654  ; Imon_Load_value
00037a  e9c5140d          STRD     r1,r4,[r5,#0x34]      ;654
00037e  f64e2160          MOV      r1,#0xea60            ;656
                  |L1.898|
000382  8001              STRH     r1,[r0,#0]            ;648
000384  e308              B        |L1.2456|
                  |L1.902|
000386  626c              STR      r4,[r5,#0x24]         ;660  ; x3
000388  f8b97000          LDRH     r7,[r9,#0]            ;660  ; Contr_Laod
00038c  4829              LDR      r0,|L1.1076|
00038e  62af              STR      r7,[r5,#0x28]         ;661  ; y3
000390  8801              LDRH     r1,[r0,#0]            ;661  ; Imon_Load_value
000392  eeb82a61          VCVT.F32.U32 s4,s3                 ;664
000396  eeb80a40          VCVT.F32.U32 s0,s0                 ;664
00039a  eef80a60          VCVT.F32.U32 s1,s1                 ;664
00039e  e9c5140f          STRD     r1,r4,[r5,#0x3c]      ;664
0003a2  ee322a40          VSUB.F32 s4,s4,s0              ;664
0003a6  eeb80a41          VCVT.F32.U32 s0,s2                 ;664
0003aa  4658              MOV      r0,r11                ;664
0003ac  ee700a60          VSUB.F32 s1,s0,s1              ;664
0003b0  ee820a20          VDIV.F32 s0,s4,s1              ;664
0003b4  eeb82a41          VCVT.F32.U32 s4,s2                 ;665
0003b8  eef80a61          VCVT.F32.U32 s1,s3                 ;665
0003bc  eeb81a41          VCVT.F32.U32 s2,s2                 ;666
0003c0  ed8b0a08          VSTR     s0,[r11,#0x20]        ;664
0003c4  ee400a42          VMLS.F32 s1,s0,s4              ;665
0003c8  ee007a10          VMOV     s0,r7                 ;666
0003cc  eeb80a40          VCVT.F32.U32 s0,s0                 ;666
0003d0  edcb0a16          VSTR     s1,[r11,#0x58]        ;665
0003d4  eef80a61          VCVT.F32.U32 s1,s3                 ;666
0003d8  ee700a60          VSUB.F32 s1,s0,s1              ;666
0003dc  ee004a10          VMOV     s0,r4                 ;666
0003e0  eeb80a40          VCVT.F32.U32 s0,s0                 ;666
0003e4  ee301a41          VSUB.F32 s2,s0,s2              ;666
0003e8  ee800a81          VDIV.F32 s0,s1,s2              ;666
0003ec  ee004a90          VMOV     s1,r4                 ;667
0003f0  ed8b0a09          VSTR     s0,[r11,#0x24]        ;666
0003f4  e023              B        |L1.1086|
                  |L1.1014|
0003f6  e069              B        |L1.1228|
                  |L1.1016|
0003f8  e076              B        |L1.1256|
                  |L1.1018|
0003fa  e086              B        |L1.1290|
                  |L1.1020|
0003fc  e096              B        |L1.1324|
                  |L1.1022|
0003fe  e0a6              B        |L1.1358|
                  |L1.1024|
                          DCD      calflag
                  |L1.1028|
                          DCD      Run_Control
                  |L1.1032|
                          DCD      ||.data||
                  |L1.1036|
                          DCD      CalPara
                  |L1.1040|
                          DCD      flagB
                  |L1.1044|
                          DCD      Contr_Current
                  |L1.1048|
                          DCD      Contr_Laod
                  |L1.1052|
                          DCD      Vmon_Load_value
                  |L1.1056|
                          DCD      Vmon_POWE_value
                  |L1.1060|
                          DCD      0x40020400
                  |L1.1064|
                          DCD      Contr_Voltage
                  |L1.1068|
                          DCD      0x40020800
                  |L1.1072|
                          DCD      Imon_POWE_value
                  |L1.1076|
                          DCD      Imon_Load_value
                  |L1.1080|
000438  e140              B        |L1.1724|
                  |L1.1082|
00043a  e14b              B        |L1.1748|
                  |L1.1084|
00043c  e158              B        |L1.1776|
                  |L1.1086|
00043e  eeb81a60          VCVT.F32.U32 s2,s1                 ;667
000442  ee007a90          VMOV     s1,r7                 ;667
000446  eef80a60          VCVT.F32.U32 s1,s1                 ;667
00044a  ee400a41          VMLS.F32 s1,s0,s2              ;667
00044e  eeb81a43          VCVT.F32.U32 s2,s6                 ;669
000452  edc00a17          VSTR     s1,[r0,#0x5c]         ;667
000456  ed950a0c          VLDR     s0,[r5,#0x30]         ;669
00045a  eef80a63          VCVT.F32.U32 s1,s7                 ;669
00045e  eeb80a40          VCVT.F32.U32 s0,s0                 ;669
000462  ee700ac0          VSUB.F32 s1,s1,s0              ;669
000466  ed950a0b          VLDR     s0,[r5,#0x2c]         ;669
00046a  eeb80a40          VCVT.F32.U32 s0,s0                 ;669
00046e  ee311a40          VSUB.F32 s2,s2,s0              ;669
000472  ee800a81          VDIV.F32 s0,s1,s2              ;669
000476  eeb81a43          VCVT.F32.U32 s2,s6                 ;670
00047a  eef80a63          VCVT.F32.U32 s1,s7                 ;670
00047e  ed800a0f          VSTR     s0,[r0,#0x3c]         ;669
000482  ee400a41          VMLS.F32 s1,s0,s2              ;670
000486  ee004a10          VMOV     s0,r4                 ;671
00048a  eeb81a43          VCVT.F32.U32 s2,s6                 ;671
00048e  eeb80a40          VCVT.F32.U32 s0,s0                 ;671
000492  edc00a1d          VSTR     s1,[r0,#0x74]         ;670
000496  eef80a63          VCVT.F32.U32 s1,s7                 ;671
00049a  ee700a60          VSUB.F32 s1,s0,s1              ;671
00049e  ee001a10          VMOV     s0,r1                 ;671
0004a2  eeb80a40          VCVT.F32.U32 s0,s0                 ;671
0004a6  ee301a41          VSUB.F32 s2,s0,s2              ;671
0004aa  ee800a81          VDIV.F32 s0,s1,s2              ;671
0004ae  ee001a90          VMOV     s1,r1                 ;672
0004b2  eeb81a60          VCVT.F32.U32 s2,s1                 ;672
0004b6  ee004a90          VMOV     s1,r4                 ;672
0004ba  eef80a60          VCVT.F32.U32 s1,s1                 ;672
0004be  ed800a10          VSTR     s0,[r0,#0x40]         ;671
0004c2  ee400a41          VMLS.F32 s1,s0,s2              ;672
0004c6  edcb0a1e          VSTR     s1,[r11,#0x78]        ;672
0004ca  e0f1              B        |L1.1712|
                  |L1.1228|
0004cc  f8cc7020          STR      r7,[r12,#0x20]        ;678  ; Run_Control
0004d0  4641              MOV      r1,r8                 ;679
0004d2  f7fffffe          BL       GPIO_ResetBits
0004d6  f2417170          MOV      r1,#0x1770            ;680
                  |L1.1242|
0004da  f8a91000          STRH     r1,[r9,#0]            ;637
0004de  7037              STRB     r7,[r6,#0]            ;638
0004e0  e6d3              B        |L1.650|
                  |L1.1250|
0004e2  f7fffffe          BL       OnOff_GPOI_ResetSet
                  |L1.1254|
0004e6  e257              B        |L1.2456|
                  |L1.1256|
0004e8  f8cc7020          STR      r7,[r12,#0x20]        ;685  ; Run_Control
0004ec  4641              MOV      r1,r8                 ;686
0004ee  f7fffffe          BL       GPIO_ResetBits
0004f2  616c              STR      r4,[r5,#0x14]         ;688  ; x1
0004f4  f8b91000          LDRH     r1,[r9,#0]            ;688  ; Contr_Laod
0004f8  4648              MOV      r0,r9                 ;688
0004fa  61a9              STR      r1,[r5,#0x18]         ;689  ; y1
0004fc  49fe              LDR      r1,|L1.2296|
0004fe  8809              LDRH     r1,[r1,#0]            ;689  ; Imon_Load_value
000500  e9c5140d          STRD     r1,r4,[r5,#0x34]      ;689
000504  f64261e0          MOV      r1,#0x2ee0            ;691
000508  e73b              B        |L1.898|
                  |L1.1290|
00050a  f8cc7020          STR      r7,[r12,#0x20]        ;694  ; Run_Control
00050e  4641              MOV      r1,r8                 ;695
000510  f7fffffe          BL       GPIO_ResetBits
000514  61ec              STR      r4,[r5,#0x1c]         ;697  ; x2
000516  f8b91000          LDRH     r1,[r9,#0]            ;697  ; Contr_Laod
00051a  4648              MOV      r0,r9                 ;697
00051c  6229              STR      r1,[r5,#0x20]         ;698  ; y2
00051e  49f6              LDR      r1,|L1.2296|
000520  8809              LDRH     r1,[r1,#0]            ;698  ; Imon_Load_value
000522  e9c5140f          STRD     r1,r4,[r5,#0x3c]      ;698
                  |L1.1318|
000526  f6446120          MOV      r1,#0x4e20            ;597
00052a  e72a              B        |L1.898|
                  |L1.1324|
00052c  f8cc7020          STR      r7,[r12,#0x20]        ;703  ; Run_Control
000530  4641              MOV      r1,r8                 ;704
000532  f7fffffe          BL       GPIO_ResetBits
000536  626c              STR      r4,[r5,#0x24]         ;706  ; x3
000538  f8b91000          LDRH     r1,[r9,#0]            ;706  ; Contr_Laod
00053c  4648              MOV      r0,r9                 ;706
00053e  62a9              STR      r1,[r5,#0x28]         ;707  ; y3
000540  49ed              LDR      r1,|L1.2296|
000542  8809              LDRH     r1,[r1,#0]            ;707  ; Imon_Load_value
000544  e9c51411          STRD     r1,r4,[r5,#0x44]      ;707
000548  f6461178          MOV      r1,#0x6978            ;709
00054c  e719              B        |L1.898|
                  |L1.1358|
00054e  62ec              STR      r4,[r5,#0x2c]         ;713  ; x4
000550  f8b97000          LDRH     r7,[r9,#0]            ;713  ; Contr_Laod
000554  48e8              LDR      r0,|L1.2296|
000556  632f              STR      r7,[r5,#0x30]         ;714  ; y4
000558  8801              LDRH     r1,[r0,#0]            ;714  ; Imon_Load_value
00055a  eeb84a61          VCVT.F32.U32 s8,s3                 ;717
00055e  eeb80a40          VCVT.F32.U32 s0,s0                 ;717
000562  eef80a60          VCVT.F32.U32 s1,s1                 ;717
000566  e9c51413          STRD     r1,r4,[r5,#0x4c]      ;717
00056a  ee344a40          VSUB.F32 s8,s8,s0              ;717
00056e  eeb80a41          VCVT.F32.U32 s0,s2                 ;717
000572  4658              MOV      r0,r11                ;717
000574  ee700a60          VSUB.F32 s1,s0,s1              ;717
000578  ee840a20          VDIV.F32 s0,s8,s1              ;717
00057c  eeb84a41          VCVT.F32.U32 s8,s2                 ;718
000580  eef80a61          VCVT.F32.U32 s1,s3                 ;718
000584  eeb81a41          VCVT.F32.U32 s2,s2                 ;719
000588  ed8b0a0a          VSTR     s0,[r11,#0x28]        ;717
00058c  ee400a44          VMLS.F32 s1,s0,s8              ;718
000590  eeb80a62          VCVT.F32.U32 s0,s5                 ;719
000594  edcb0a18          VSTR     s1,[r11,#0x60]        ;718
000598  eef80a61          VCVT.F32.U32 s1,s3                 ;719
00059c  ee700a60          VSUB.F32 s1,s0,s1              ;719
0005a0  eeb80a42          VCVT.F32.U32 s0,s4                 ;719
0005a4  ee301a41          VSUB.F32 s2,s0,s2              ;719
0005a8  ee800a81          VDIV.F32 s0,s1,s2              ;719
0005ac  eeb81a42          VCVT.F32.U32 s2,s4                 ;720
0005b0  eef80a62          VCVT.F32.U32 s1,s5                 ;720
0005b4  ed8b0a0b          VSTR     s0,[r11,#0x2c]        ;719
0005b8  ee400a41          VMLS.F32 s1,s0,s2              ;720
0005bc  ee007a10          VMOV     s0,r7                 ;721
0005c0  eeb81a42          VCVT.F32.U32 s2,s4                 ;721
0005c4  eeb82a43          VCVT.F32.U32 s4,s6                 ;724
0005c8  eeb80a40          VCVT.F32.U32 s0,s0                 ;721
0005cc  edc00a19          VSTR     s1,[r0,#0x64]         ;720
0005d0  eef80a62          VCVT.F32.U32 s1,s5                 ;721
0005d4  ee700a60          VSUB.F32 s1,s0,s1              ;721
0005d8  ee004a10          VMOV     s0,r4                 ;721
0005dc  eeb80a40          VCVT.F32.U32 s0,s0                 ;721
0005e0  ee301a41          VSUB.F32 s2,s0,s2              ;721
0005e4  ee800a81          VDIV.F32 s0,s1,s2              ;721
0005e8  ee004a90          VMOV     s1,r4                 ;722
0005ec  eeb81a60          VCVT.F32.U32 s2,s1                 ;722
0005f0  ee007a90          VMOV     s1,r7                 ;722
0005f4  eef80a60          VCVT.F32.U32 s1,s1                 ;722
0005f8  ed800a0c          VSTR     s0,[r0,#0x30]         ;721
0005fc  ee400a41          VMLS.F32 s1,s0,s2              ;722
000600  eeb81a63          VCVT.F32.U32 s2,s7                 ;724
000604  edc00a1a          VSTR     s1,[r0,#0x68]         ;722
000608  ed950a10          VLDR     s0,[r5,#0x40]         ;724
00060c  eef80a40          VCVT.F32.U32 s1,s0                 ;724
000610  ee701ac1          VSUB.F32 s3,s1,s2              ;724
000614  edd50a0f          VLDR     s1,[r5,#0x3c]         ;724
000618  eeb81a60          VCVT.F32.U32 s2,s1                 ;724
00061c  ee312a42          VSUB.F32 s4,s2,s4              ;724
000620  ee811a82          VDIV.F32 s2,s3,s4              ;724
000624  eeb82a60          VCVT.F32.U32 s4,s1                 ;725
000628  eef81a40          VCVT.F32.U32 s3,s0                 ;725
00062c  eeb80a40          VCVT.F32.U32 s0,s0                 ;726
000630  eef80a60          VCVT.F32.U32 s1,s1                 ;726
000634  ed801a11          VSTR     s2,[r0,#0x44]         ;724
000638  ee411a42          VMLS.F32 s3,s2,s4              ;725
00063c  edc01a1f          VSTR     s3,[r0,#0x7c]         ;725
000640  ed951a12          VLDR     s2,[r5,#0x48]         ;726
000644  eef81a41          VCVT.F32.U32 s3,s2                 ;726
000648  ee711ac0          VSUB.F32 s3,s3,s0              ;726
00064c  ed950a11          VLDR     s0,[r5,#0x44]         ;726
000650  eeb82a40          VCVT.F32.U32 s4,s0                 ;726
000654  ee322a60          VSUB.F32 s4,s4,s1              ;726
000658  eec10a82          VDIV.F32 s1,s3,s4              ;726
00065c  eeb82a40          VCVT.F32.U32 s4,s0                 ;727
000660  eef81a41          VCVT.F32.U32 s3,s2                 ;727
000664  eeb81a41          VCVT.F32.U32 s2,s2                 ;728
000668  edc00a12          VSTR     s1,[r0,#0x48]         ;726
00066c  ee401ac2          VMLS.F32 s3,s1,s4              ;727
000670  ee004a90          VMOV     s1,r4                 ;728
000674  eef80a60          VCVT.F32.U32 s1,s1                 ;728
000678  edc01a20          VSTR     s3,[r0,#0x80]         ;727
00067c  ee301ac1          VSUB.F32 s2,s1,s2              ;728
000680  ee001a90          VMOV     s1,r1                 ;728
000684  eeb80a40          VCVT.F32.U32 s0,s0                 ;728
000688  eef80a60          VCVT.F32.U32 s1,s1                 ;728
00068c  ee700ac0          VSUB.F32 s1,s1,s0              ;728
000690  ee810a20          VDIV.F32 s0,s2,s1              ;728
000694  ee001a90          VMOV     s1,r1                 ;729
000698  eeb81a60          VCVT.F32.U32 s2,s1                 ;729
00069c  ee004a90          VMOV     s1,r4                 ;729
0006a0  eef80a60          VCVT.F32.U32 s1,s1                 ;729
0006a4  ed800a13          VSTR     s0,[r0,#0x4c]         ;728
0006a8  ee400a41          VMLS.F32 s1,s0,s2              ;729
0006ac  edcb0a21          VSTR     s1,[r11,#0x84]        ;729
                  |L1.1712|
0006b0  f8ca2000          STR      r2,[r10,#0]           ;675  ; flagB
0006b4  7033              STRB     r3,[r6,#0]            ;675
0006b6  f7fffffe          BL       Off_GPOI_ResetSet
0006ba  e16d              B        |L1.2456|
                  |L1.1724|
0006bc  498f              LDR      r1,|L1.2300|
0006be  f64050ac          MOV      r0,#0xdac             ;735
0006c2  8008              STRH     r0,[r1,#0]            ;735
0006c4  f44f617a          MOV      r1,#0xfa0             ;736
0006c8  f8ae1000          STRH     r1,[lr,#0]            ;736
0006cc  7037              STRB     r7,[r6,#0]            ;737
                  |L1.1742|
0006ce  2101              MOVS     r1,#1                 ;561
0006d0  2000              MOVS     r0,#0                 ;561
0006d2  e706              B        |L1.1250|
                  |L1.1748|
0006d4  616c              STR      r4,[r5,#0x14]         ;742  ; x1
0006d6  f8be1000          LDRH     r1,[lr,#0]            ;742  ; Contr_Current
0006da  4670              MOV      r0,lr                 ;742
0006dc  61a9              STR      r1,[r5,#0x18]         ;743  ; y1
0006de  8839              LDRH     r1,[r7,#0]            ;743  ; Imon_POWE_value
0006e0  e9c51409          STRD     r1,r4,[r5,#0x24]      ;743
0006e4  4985              LDR      r1,|L1.2300|
0006e6  f64052ac          MOV      r2,#0xdac             ;745
0006ea  800a              STRH     r2,[r1,#0]            ;745
0006ec  0091              LSLS     r1,r2,#2              ;746
0006ee  e648              B        |L1.898|
                  |L1.1776|
0006f0  61ec              STR      r4,[r5,#0x1c]         ;750  ; x2
0006f2  f8be0000          LDRH     r0,[lr,#0]            ;750  ; Contr_Current
0006f6  6228              STR      r0,[r5,#0x20]         ;751  ; y2
0006f8  8839              LDRH     r1,[r7,#0]            ;751  ; Imon_POWE_value
0006fa  ee010a10          VMOV     s2,r0                 ;754
0006fe  eeb80a40          VCVT.F32.U32 s0,s0                 ;754
000702  eef80a60          VCVT.F32.U32 s1,s1                 ;754
000706  eeb81a41          VCVT.F32.U32 s2,s2                 ;754
00070a  e9c5140b          STRD     r1,r4,[r5,#0x2c]      ;751
00070e  ee311a40          VSUB.F32 s2,s2,s0              ;754
000712  ee004a10          VMOV     s0,r4                 ;754
000716  465d              MOV      r5,r11                ;754
000718  eeb80a40          VCVT.F32.U32 s0,s0                 ;754
00071c  ee700a60          VSUB.F32 s1,s0,s1              ;754
000720  ee810a20          VDIV.F32 s0,s2,s1              ;754
000724  ee004a90          VMOV     s1,r4                 ;755
000728  eeb81a60          VCVT.F32.U32 s2,s1                 ;755
00072c  ee000a90          VMOV     s1,r0                 ;755
000730  eef80a60          VCVT.F32.U32 s1,s1                 ;755
000734  ed8b0a14          VSTR     s0,[r11,#0x50]        ;754
000738  ee400a41          VMLS.F32 s1,s0,s2              ;755
00073c  ee004a10          VMOV     s0,r4                 ;757
000740  eeb81a42          VCVT.F32.U32 s2,s4                 ;757
000744  eeb80a40          VCVT.F32.U32 s0,s0                 ;757
000748  edcb0a22          VSTR     s1,[r11,#0x88]        ;755
00074c  eef80a62          VCVT.F32.U32 s1,s5                 ;757
000750  ee700a60          VSUB.F32 s1,s0,s1              ;757
000754  ee001a10          VMOV     s0,r1                 ;757
000758  eeb80a40          VCVT.F32.U32 s0,s0                 ;757
00075c  ee301a41          VSUB.F32 s2,s0,s2              ;757
000760  ee800a81          VDIV.F32 s0,s1,s2              ;757
000764  ee001a90          VMOV     s1,r1                 ;758
000768  eeb81a60          VCVT.F32.U32 s2,s1                 ;758
00076c  ee004a90          VMOV     s1,r4                 ;758
000770  eef80a60          VCVT.F32.U32 s1,s1                 ;758
000774  ed850a15          VSTR     s0,[r5,#0x54]         ;757
000778  ee400a41          VMLS.F32 s1,s0,s2              ;758
00077c  edcb0a23          VSTR     s1,[r11,#0x8c]        ;758
000780  e796              B        |L1.1712|
                  |L1.1922|
;;;765    		if(range == 0)//内阻低档位低段
;;;766    		{
;;;767    			RCONT_SW = 0;
;;;768    			calflag = 1;
;;;769    			x1 = Rmon_value;
000782  485f              LDR      r0,|L1.2304|
000784  b1c1              CBZ      r1,|L1.1976|
;;;770    			y1 = data;
;;;771    			
;;;772    //			Modify_A_READ=0;
;;;773    //			Modify_A_ACT=0;
;;;774    //			Modify_A_READ = Rmon_value;//测量电阻值
;;;775    //			Modify_A_ACT = data;//读取低段
;;;776    		}else if (range == 1)//内阻低档位高段
000786  2901              CMP      r1,#1
000788  d019              BEQ      |L1.1982|
;;;777    		{
;;;778    
;;;779    			x2 = Rmon_value;
;;;780    			y2 = data;
;;;781    			CalPara.TestR[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;782    			CalPara.OffsetR[0] = (float)y2 - CalPara.TestR[0]*(float)x2;
;;;783    				//参数写进FLASH
;;;784    			Flag_DAC_OFF=0;
;;;785    			calflag = 0;
;;;786    		}else if(range == 2)//内阻高档位低段
00078a  2902              CMP      r1,#2
00078c  d07e              BEQ      |L1.2188|
;;;787    		{
;;;788    			RCONT_SW = 1;
;;;789    			calflag = 1;
;;;790    			x1 = Rmon_value;
;;;791    			y1 = data;
;;;792    		}else if (range == 3)//内阻高档位高段
00078e  2903              CMP      r1,#3
000790  d039              BEQ      |L1.2054|
;;;793    		{
;;;794    			
;;;795    			x2 = Rmon_value;
;;;796    			y2 = data;
;;;797    			CalPara.TestR[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;798    			CalPara.OffsetR[1] = (float)y2 - CalPara.TestR[1]*(float)x2;
;;;799    				//参数写进FLASH
;;;800    			Flag_DAC_OFF=0;
;;;801    			calflag = 0;
;;;802    		}else if(range == 4)//识别电阻1低段
;;;803    		{
;;;804    			calflag = 1;
;;;805    //			x1 = (R1mon_value*1000)/(65535-R1mon_value);
;;;806    			x1 = (R1mon_value*1000)/(65535-R1mon_value);
000792  f8df9170          LDR      r9,|L1.2308|
000796  f64f78ff          MOV      r8,#0xffff
00079a  2904              CMP      r1,#4                 ;802
00079c  d057              BEQ      |L1.2126|
;;;807    			y1 = data;
;;;808    		}else if (range == 5)//识别电阻1高段
00079e  2905              CMP      r1,#5
0007a0  d064              BEQ      |L1.2156|
;;;809    		{
;;;810    			
;;;811    //			x2 = (R1mon_value*1000)/(65535-R1mon_value);
;;;812    			x2 = (R1mon_value*1000)/(65535-R1mon_value);
;;;813    			y2 = data;
;;;814    			CalPara.TestR1[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;815    			CalPara.OffsetR1[0] = (float)y2 - CalPara.TestR1[0]*(float)x2;
;;;816    				//参数写进FLASH
;;;817    			Flag_DAC_OFF=0;
;;;818    			calflag = 0;
;;;819    		}else if(range == 6)//识别电阻2低段
;;;820    		{
;;;821    			calflag = 1;
;;;822    			x1 = (R2mon_value*1000)/(65535-R2mon_value);
0007a2  f8df9164          LDR      r9,|L1.2312|
0007a6  2906              CMP      r1,#6                 ;819
0007a8  d051              BEQ      |L1.2126|
;;;823    			y1 = data;
;;;824    		}else if (range == 7)//识别电阻2高段
0007aa  2907              CMP      r1,#7
0007ac  d06f              BEQ      |L1.2190|
;;;825    		{
;;;826    			
;;;827    			x2 = (R2mon_value*1000)/(65535-R2mon_value);
;;;828    			y2 = data;
;;;829    			CalPara.TestR2[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;830    			CalPara.OffsetR2[0] = (float)y2 - CalPara.TestR2[0]*(float)x2;
;;;831    				//参数写进FLASH
;;;832    			Flag_DAC_OFF=0;
;;;833    			calflag = 0;
;;;834    		}else if(range == 8)//内阻高档位低段
0007ae  2908              CMP      r1,#8
0007b0  d06c              BEQ      |L1.2188|
;;;835    		{
;;;836    			RCONT_SW = 1;
;;;837    			calflag = 1;
;;;838    			x1 = Rmon_value;
;;;839    			y1 = data;
;;;840    		}else if (range == 9)//内阻高档位高段
0007b2  2909              CMP      r1,#9
0007b4  d06c              BEQ      |L1.2192|
0007b6  e0ef              B        |L1.2456|
                  |L1.1976|
0007b8  f8cc3024          STR      r3,[r12,#0x24]        ;767  ; Run_Control
0007bc  e0c3              B        |L1.2374|
                  |L1.1982|
0007be  8800              LDRH     r0,[r0,#0]            ;779  ; Rmon_value
0007c0  ee014a10          VMOV     s2,r4                 ;781
0007c4  eeb80a40          VCVT.F32.U32 s0,s0                 ;781
0007c8  eef80a60          VCVT.F32.U32 s1,s1                 ;781
0007cc  eeb81a41          VCVT.F32.U32 s2,s2                 ;781
0007d0  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;779
0007d4  ee311a40          VSUB.F32 s2,s2,s0              ;781
0007d8  ee000a10          VMOV     s0,r0                 ;781
0007dc  eeb80a40          VCVT.F32.U32 s0,s0                 ;781
0007e0  ee700a60          VSUB.F32 s1,s0,s1              ;781
0007e4  ee810a20          VDIV.F32 s0,s2,s1              ;781
0007e8  ee000a90          VMOV     s1,r0                 ;782
0007ec  eeb81a60          VCVT.F32.U32 s2,s1                 ;782
0007f0  ee004a90          VMOV     s1,r4                 ;782
0007f4  eef80a60          VCVT.F32.U32 s1,s1                 ;782
0007f8  ed8b0a24          VSTR     s0,[r11,#0x90]        ;781
0007fc  ee400a41          VMLS.F32 s1,s0,s2              ;782
000800  edcb0a29          VSTR     s1,[r11,#0xa4]        ;782
                  |L1.2052|
000804  e0c5              B        |L1.2450|
                  |L1.2054|
000806  8800              LDRH     r0,[r0,#0]            ;795  ; Rmon_value
000808  ee014a10          VMOV     s2,r4                 ;797
00080c  eeb80a40          VCVT.F32.U32 s0,s0                 ;797
000810  eef80a60          VCVT.F32.U32 s1,s1                 ;797
000814  eeb81a41          VCVT.F32.U32 s2,s2                 ;797
000818  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;795
00081c  ee311a40          VSUB.F32 s2,s2,s0              ;797
000820  ee000a10          VMOV     s0,r0                 ;797
000824  eeb80a40          VCVT.F32.U32 s0,s0                 ;797
000828  ee700a60          VSUB.F32 s1,s0,s1              ;797
00082c  ee810a20          VDIV.F32 s0,s2,s1              ;797
000830  ee000a90          VMOV     s1,r0                 ;798
000834  eeb81a60          VCVT.F32.U32 s2,s1                 ;798
000838  ee004a90          VMOV     s1,r4                 ;798
00083c  eef80a60          VCVT.F32.U32 s1,s1                 ;798
000840  ed8b0a25          VSTR     s0,[r11,#0x94]        ;797
000844  ee400a41          VMLS.F32 s1,s0,s2              ;798
000848  edcb0a2a          VSTR     s1,[r11,#0xa8]        ;798
00084c  e0a1              B        |L1.2450|
                  |L1.2126|
00084e  7037              STRB     r7,[r6,#0]            ;804
000850  f8b90000          LDRH     r0,[r9,#0]            ;806  ; R1mon_value
000854  f44f727a          MOV      r2,#0x3e8             ;806
000858  f8b91000          LDRH     r1,[r9,#0]            ;806  ; R1mon_value
00085c  4350              MULS     r0,r2,r0              ;806
00085e  eba80101          SUB      r1,r8,r1              ;806
000862  fbb0f0f1          UDIV     r0,r0,r1              ;806
                  |L1.2150|
000866  e9c50405          STRD     r0,r4,[r5,#0x14]      ;806
00086a  e095              B        |L1.2456|
                  |L1.2156|
00086c  f8b91000          LDRH     r1,[r9,#0]            ;812  ; R1mon_value
000870  f44f777a          MOV      r7,#0x3e8             ;812
000874  f8b90000          LDRH     r0,[r9,#0]            ;812  ; R1mon_value
000878  4379              MULS     r1,r7,r1              ;812
00087a  eba80000          SUB      r0,r8,r0              ;812
00087e  fbb1f0f0          UDIV     r0,r1,r0              ;812
000882  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;812
000886  ee014a10          VMOV     s2,r4                 ;814
00088a  e002              B        |L1.2194|
                  |L1.2188|
00088c  e059              B        |L1.2370|
                  |L1.2190|
00088e  e01f              B        |L1.2256|
                  |L1.2192|
000890  e05c              B        |L1.2380|
                  |L1.2194|
000892  eeb81a41          VCVT.F32.U32 s2,s2                 ;814
000896  eeb80a40          VCVT.F32.U32 s0,s0                 ;814
00089a  eef80a60          VCVT.F32.U32 s1,s1                 ;814
00089e  ee311a40          VSUB.F32 s2,s2,s0              ;814
0008a2  ee000a10          VMOV     s0,r0                 ;814
0008a6  eeb80a40          VCVT.F32.U32 s0,s0                 ;814
0008aa  ee700a60          VSUB.F32 s1,s0,s1              ;814
0008ae  ee810a20          VDIV.F32 s0,s2,s1              ;814
0008b2  ee000a90          VMOV     s1,r0                 ;815
0008b6  eeb81a60          VCVT.F32.U32 s2,s1                 ;815
0008ba  ee004a90          VMOV     s1,r4                 ;815
0008be  eef80a60          VCVT.F32.U32 s1,s1                 ;815
0008c2  ed8b0a27          VSTR     s0,[r11,#0x9c]        ;814
0008c6  ee400a41          VMLS.F32 s1,s0,s2              ;815
0008ca  edcb0a2c          VSTR     s1,[r11,#0xb0]        ;815
0008ce  e060              B        |L1.2450|
                  |L1.2256|
0008d0  f8b91000          LDRH     r1,[r9,#0]            ;827  ; R2mon_value
0008d4  f44f777a          MOV      r7,#0x3e8             ;827
0008d8  f8b90000          LDRH     r0,[r9,#0]            ;827  ; R2mon_value
0008dc  4379              MULS     r1,r7,r1              ;827
0008de  eba80000          SUB      r0,r8,r0              ;827
0008e2  fbb1f0f0          UDIV     r0,r1,r0              ;827
0008e6  ee014a10          VMOV     s2,r4                 ;829
0008ea  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;827
0008ee  eeb81a41          VCVT.F32.U32 s2,s2                 ;829
0008f2  eeb80a40          VCVT.F32.U32 s0,s0                 ;829
0008f6  e009              B        |L1.2316|
                  |L1.2296|
                          DCD      Imon_Load_value
                  |L1.2300|
                          DCD      Contr_Voltage
                  |L1.2304|
                          DCD      Rmon_value
                  |L1.2308|
                          DCD      R1mon_value
                  |L1.2312|
                          DCD      R2mon_value
                  |L1.2316|
00090c  ee311a40          VSUB.F32 s2,s2,s0              ;829
000910  ee000a10          VMOV     s0,r0                 ;829
000914  eef80a60          VCVT.F32.U32 s1,s1                 ;829
000918  eeb80a40          VCVT.F32.U32 s0,s0                 ;829
00091c  ee700a60          VSUB.F32 s1,s0,s1              ;829
000920  ee810a20          VDIV.F32 s0,s2,s1              ;829
000924  ee000a90          VMOV     s1,r0                 ;830
000928  eeb81a60          VCVT.F32.U32 s2,s1                 ;830
00092c  ee004a90          VMOV     s1,r4                 ;830
000930  eef80a60          VCVT.F32.U32 s1,s1                 ;830
000934  ed8b0a28          VSTR     s0,[r11,#0xa0]        ;829
000938  ee400a41          VMLS.F32 s1,s0,s2              ;830
00093c  edcb0a2d          VSTR     s1,[r11,#0xb4]        ;830
000940  e027              B        |L1.2450|
                  |L1.2370|
000942  f8cc7024          STR      r7,[r12,#0x24]        ;836  ; Run_Control
                  |L1.2374|
000946  7037              STRB     r7,[r6,#0]            ;837
000948  f7ffbbc9          B        |L1.222|
                  |L1.2380|
;;;841    		{
;;;842    			
;;;843    			x2 = Rmon_value;
00094c  8800              LDRH     r0,[r0,#0]  ; Rmon_value
;;;844    			y2 = data;
;;;845    			CalPara.TestR[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
00094e  ee014a10          VMOV     s2,r4
000952  eeb80a40          VCVT.F32.U32 s0,s0
000956  eef80a60          VCVT.F32.U32 s1,s1
00095a  eeb81a41          VCVT.F32.U32 s2,s2
00095e  e9c50407          STRD     r0,r4,[r5,#0x1c]      ;843
000962  ee311a40          VSUB.F32 s2,s2,s0
000966  ee000a10          VMOV     s0,r0
00096a  eeb80a40          VCVT.F32.U32 s0,s0
00096e  ee700a60          VSUB.F32 s1,s0,s1
000972  ee810a20          VDIV.F32 s0,s2,s1
;;;846    			CalPara.OffsetR[2] = (float)y2 - CalPara.TestR[2]*(float)x2;
000976  ee000a90          VMOV     s1,r0
00097a  eeb81a60          VCVT.F32.U32 s2,s1
00097e  ee004a90          VMOV     s1,r4
000982  eef80a60          VCVT.F32.U32 s1,s1
000986  ed8b0a26          VSTR     s0,[r11,#0x98]        ;845
00098a  ee400a41          VMLS.F32 s1,s0,s2
00098e  edcb0a2b          VSTR     s1,[r11,#0xac]
                  |L1.2450|
;;;847    				//参数写进FLASH
;;;848    			Flag_DAC_OFF=0;
;;;849    			calflag = 0;
000992  f8ca2000          STR      r2,[r10,#0]  ; flagB
000996  7033              STRB     r3,[r6,#0]
                  |L1.2456|
;;;850    		}
;;;851    		
;;;852    	}
;;;853    		
;;;854    
;;;855    	Write_Flash_Bytes();
000998  e8bd5ff0          POP      {r4-r12,lr}
00099c  f7ffbffe          B.W      Write_Flash_Bytes
;;;856    //	else if(mode == 1){//测量电流
;;;857    //		if(range == 1)
;;;858    //		{
;;;859    //			x1 = abs(I_CS);
;;;860    //			y1 = data;
;;;861    //		}else if(range == 2){
;;;862    //			x2 = abs(I_CS);
;;;863    //			y2 = data;
;;;864    //			SaveDebug.TestIcal[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;865    //			SaveDebug.OffsetI[1] = (float)y2 - SaveDebug.TestIcal[1]*(float)x2;
;;;866    //		}else if(range == 4){
;;;867    //			x1 = abs(I_CS);
;;;868    //			y1 = data;
;;;869    //		}else if(range == 5){
;;;870    //			x2 = abs(I_CS);
;;;871    //			y2 = data;
;;;872    //			SaveDebug.TestIcal[4] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;873    //			SaveDebug.OffsetI[3] = (float)y2 - SaveDebug.TestIcal[4]*(float)x2;
;;;874    //		}else if(range == 0){
;;;875    //			SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[0]);
;;;876    //		}else if(range == 3){
;;;877    //			SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[0]));
;;;878    //		}
;;;879    ////		else if(range == 4){
;;;880    ////			x1 = V_CS;
;;;881    ////			y1 = data;
;;;882    ////		}else if(range == 5){
;;;883    ////			x2 = V_CS;
;;;884    ////			y2 = data;
;;;885    ////			SaveDebug.TestVcal[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;886    ////			SaveDebug.OffsetV[2] = (float)y2 - SaveDebug.TestVcal[2]*(float)x2;
;;;887    ////		}
;;;888    //		
;;;889    ////		if(range < 3)
;;;890    ////		{
;;;891    ////			if(range == 0)
;;;892    ////			{
;;;893    ////				SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[0]);
;;;894    ////			}else{
;;;895    ////				SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[1]);
;;;896    ////			}			
;;;897    ////		}else{
;;;898    ////			if(range == 3)
;;;899    ////			{
;;;900    ////				SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[0]));
;;;901    ////			}else{
;;;902    ////				SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[1]));
;;;903    ////			}
;;;904    ////		}
;;;905    ////		calflag = 1;
;;;906    //	}else if(mode == 2){//控制电压
;;;907    //		if(range == 0)
;;;908    //		{
;;;909    //			_D_ = 1000;
;;;910    //			x1 = data;
;;;911    //			y1 = _D_;
;;;912    //		}else if(range == 1){
;;;913    //			_D_ = 7000;
;;;914    //			x2 = data;
;;;915    //			y2 = _D_;
;;;916    //			SaveDebug.ControlV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;917    //			SaveDebug.OffsetCV[0] = (float)y2 - SaveDebug.ControlV[0]*(float)x2;
;;;918    //		}else if(range == 2){
;;;919    //			_D_ = 10000;
;;;920    //			x1 = data;
;;;921    //			y1 = _D_;
;;;922    //		}else if(range == 3){
;;;923    //			_D_ = 13000;
;;;924    //			x2 = data;
;;;925    //			y2 = _D_;
;;;926    //			SaveDebug.ControlV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;927    //			SaveDebug.OffsetCV[1] = (float)y2 - SaveDebug.ControlV[1]*(float)x2;
;;;928    //		}else if(range == 4){
;;;929    //			_D_ = 17000;
;;;930    //			x1 = data;
;;;931    //			y1 = _D_;
;;;932    //		}else if(range == 5){
;;;933    //			_D_ = 20000;
;;;934    //			x2 = data;
;;;935    //			y2 = _D_;
;;;936    //			SaveDebug.ControlV[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;937    //			SaveDebug.OffsetCV[2] = (float)y2 - SaveDebug.ControlV[2]*(float)x2;
;;;938    //		}else if(range == 6){
;;;939    //			_D_ = 24000;
;;;940    //			x1 = data;
;;;941    //			y1 = _D_;
;;;942    //		}else if(range == 7){
;;;943    //			_D_ = 27000;
;;;944    //			x2 = data;
;;;945    //			y2 = _D_;
;;;946    //			SaveDebug.ControlV[3] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;947    //			SaveDebug.OffsetCV[3] = (float)y2 - SaveDebug.ControlV[3]*(float)x2;
;;;948    //		}
;;;949    //		
;;;950    ////		if(range == 0)
;;;951    ////		{
;;;952    ////			SaveDebug.ControlV[range] = (float)1000/(float)data;
;;;953    ////		}else if(range == 1){
;;;954    ////			SaveDebug.ControlV[range] = (float)10000/(float)data;
;;;955    ////		}else if(range == 2){
;;;956    ////			SaveDebug.ControlV[range] = (float)15000/(float)data;
;;;957    ////		}else if(range == 3){
;;;958    ////			SaveDebug.ControlV[range] = (float)19000/(float)data;
;;;959    ////		}
;;;960    ////		calflag = 1;
;;;961    //	}else if(mode == 3){//电流清零
;;;962    //		SaveDebug.ClearI[range] = I_CS;
;;;963    ////		calflag = 1;
;;;964    //	}
;;;965    	
;;;966    }
;;;967    
                          ENDP


                          AREA ||i.DMA1_Stream3_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Stream3_IRQHandler PROC
;;;2334   
;;;2335   void DMA1_Stream3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2336   {
;;;2337   	//----DMA1 通道3完成中断，对应的中断也需要清除
;;;2338   	if(DMA_GetITStatus(DMA1_Stream3,DMA_IT_TCIF3) != RESET)   
000002  4d0c              LDR      r5,|L2.52|
000004  4c0c              LDR      r4,|L2.56|
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       DMA_GetITStatus
00000e  2800              CMP      r0,#0
000010  d00e              BEQ      |L2.48|
;;;2339       {
;;;2340   		/* 清除标志位 */
;;;2341   		DMA_ClearFlag(DMA1_Stream3,DMA_IT_TCIF3); 
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       DMA_ClearFlag
;;;2342   		/* 关闭DMA */
;;;2343   		DMA_Cmd(DMA1_Stream3,DISABLE);
00001a  2100              MOVS     r1,#0
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       DMA_Cmd
;;;2344   		
;;;2345   		while (!(USART3->SR & USART_FLAG_TC));  //硬件数据发送完毕
000022  4806              LDR      r0,|L2.60|
                  |L2.36|
000024  8801              LDRH     r1,[r0,#0]
000026  0649              LSLS     r1,r1,#25
000028  d5fc              BPL      |L2.36|
                  |L2.42|
;;;2346   		while (!(USART3->SR & USART_FLAG_TXE)); //等待数据从软件拷贝到硬件进行发送
00002a  8801              LDRH     r1,[r0,#0]
00002c  0609              LSLS     r1,r1,#24
00002e  d5fc              BPL      |L2.42|
                  |L2.48|
;;;2347   	}
;;;2348   }
000030  bd70              POP      {r4-r6,pc}
;;;2349   
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      0x18008000
                  |L2.56|
                          DCD      0x40026058
                  |L2.60|
                          DCD      0x40004800

                          AREA ||i.IsDigitChar||, CODE, READONLY, ALIGN=1

                  IsDigitChar PROC
;;;89     /*****************************************************************/
;;;90     unsigned short IsDigitChar(unsigned char a)             //如果a的值是数字的话返回1，否则返回0
000000  3830              SUBS     r0,r0,#0x30
;;;91     {
;;;92     	int b;
;;;93       if(a<0x30 || a>0x39)                     //数字1-9
000002  280a              CMP      r0,#0xa
000004  d301              BCC      |L3.10|
;;;94       	{
;;;95       	   b=0;
000006  2000              MOVS     r0,#0
;;;96       	}
;;;97       else
;;;98       	{
;;;99       	   b=1;
;;;100      	}
;;;101      return b;
;;;102    }
000008  4770              BX       lr
                  |L3.10|
00000a  2001              MOVS     r0,#1                 ;99
00000c  4770              BX       lr
;;;103    void SetPowerV(vu32 powv)
                          ENDP


                          AREA ||i.LIST_ONOFF||, CODE, READONLY, ALIGN=2

                  LIST_ONOFF PROC
;;;338    
;;;339    void LIST_ONOFF(vu8 value)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;340    {
;;;341    	switch(MODE)
000004  4a62              LDR      r2,|L4.400|
000006  ed2d8b02          VPUSH    {d8}                  ;340
00000a  f892c005          LDRB     r12,[r2,#5]  ; MODE
;;;342    	{
;;;343    		case 0://电子负载ON/OFF
;;;344    		{
;;;345    			LOAD_MODE=0;
;;;346    			GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
;;;347    			if( value == 0 ){
;;;348    				
;;;349    				Flag_Swtich_ON = 0;
00000e  4c62              LDR      r4,|L4.408|
000010  2600              MOVS     r6,#0                 ;341
000012  f8df9180          LDR      r9,|L4.404|
;;;350    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
;;;351    			}
;;;352    			else if( value == 1 ){
;;;353    				
;;;354    				Flag_Swtich_ON = 1;
000016  6821              LDR      r1,[r4,#0]
;;;355    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;356    			}
;;;357    		}break;
;;;358    		case 1://稳压电源ON/OFF
;;;359    		{
;;;360    			if( value == 0 ){
;;;361    				listsend = 3;
;;;362    				listpowwatch1 ++;
;;;363    //				PowerSwitch(0);
;;;364    //				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;365    //				Para.CSET_Voltage = 0;
;;;366    //				Para.CSET_Current = 0;
;;;367    //				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;368    			}
;;;369    			else if( value == 1 ){
;;;370    				listsend = 1;
000018  2301              MOVS     r3,#1
;;;371    				listpowwatch2 ++;
;;;372    //				PowerSwitch(1);
;;;373    //				Para.CSET_Voltage = Para.CDC_OutPut_V;
;;;374    //				Para.CSET_Current = Para.CDC_Limit_C;
;;;375    //				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;376    //				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;377    			}
;;;378    		}break;
;;;379    		case 2://过流测试ON/OFF
;;;380    		{
;;;381    			listocwatch++;
;;;382    			if( value == 0 ){
;;;383    				
;;;384    				Off_GPOI_ResetSet();
;;;385    				trig_flag_state = 0;
;;;386    				max_discahrgeNum = 0;
;;;387    				Para.CSET_Current_Laod =  Para.IR_Start_C;
00001a  4d60              LDR      r5,|L4.412|
00001c  4f60              LDR      r7,|L4.416|
00001e  f0410040          ORR      r0,r1,#0x40           ;354
000022  f1bc0f05          CMP      r12,#5                ;341
000026  d225              BCS      |L4.116|
000028  e8dff00c          TBB      [pc,r12]              ;341
00002c  03192e7b          DCB      0x03,0x19,0x2e,0x7b
000030  9700              DCB      0x97,0x00
000032  f8c96018          STR      r6,[r9,#0x18]         ;345  ; Run_Control
000036  f44f5180          MOV      r1,#0x1000            ;346
00003a  4638              MOV      r0,r7                 ;346
00003c  f7fffffe          BL       GPIO_ResetBits
000040  f89d0008          LDRB     r0,[sp,#8]            ;347
000044  b138              CBZ      r0,|L4.86|
000046  f89d0008          LDRB     r0,[sp,#8]            ;352
00004a  2801              CMP      r0,#1                 ;352
00004c  d112              BNE      |L4.116|
00004e  6820              LDR      r0,[r4,#0]            ;354  ; flagA
000050  f0400040          ORR      r0,r0,#0x40           ;354
000054  e088              B        |L4.360|
                  |L4.86|
000056  6820              LDR      r0,[r4,#0]            ;349  ; flagA
000058  f0200040          BIC      r0,r0,#0x40           ;349
00005c  e08f              B        |L4.382|
00005e  f89d0008          LDRB     r0,[sp,#8]            ;360
000062  b158              CBZ      r0,|L4.124|
000064  f89d0008          LDRB     r0,[sp,#8]            ;369
000068  2801              CMP      r0,#1                 ;369
00006a  d103              BNE      |L4.116|
00006c  7253              STRB     r3,[r2,#9]            ;370
00006e  7b10              LDRB     r0,[r2,#0xc]          ;371  ; listpowwatch2
000070  1c40              ADDS     r0,r0,#1              ;371
000072  7310              STRB     r0,[r2,#0xc]          ;371
                  |L4.116|
;;;388    			}
;;;389    			else if( value == 1 ){
;;;390    				LOAD_I_SW = 1;
;;;391    				testv = DISS_Voltage;
;;;392    				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
;;;393    				Para.CSET_Current = 1000;
;;;394    				Para.CSET_Current_Laod =  Para.IR_Start_C;
;;;395    				shorttime = 0;
;;;396    				old_I = 0;
;;;397    				max_discahrgeNum = 0;
;;;398    				trig_flag_state = 1;
;;;399    				C_DISCHARGE = 1;        	
;;;400    				Flag_Swtich_ON = 1;
;;;401    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
;;;402    				max_discahrgeNum = (float)Para.IR_Start_C / 1000;				
;;;403    //				testv = DISS_Voltage;
;;;404    //				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
;;;405    //				Para.CSET_Current = 1000;
;;;406    //				Para.CSET_Current_Laod = Para.IR_Start_C;
;;;407    //				shorttime = 0;
;;;408    //				old_I = 0;
;;;409    //				max_discahrgeNum = 0;
;;;410    //				trig_flag_state = 1;
;;;411    //				C_DISCHARGE = 1;
;;;412    //				Flag_Swtich_ON = 1;
;;;413    //				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
;;;414    //				max_discahrgeNum = (float)Para.IR_Start_C / 1000;
;;;415    			}
;;;416    		}break;
;;;417    		case 3://过充测试ON/OFF
;;;418    		{
;;;419    			if( value == 0 ){
;;;420    				
;;;421    				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;422    				Para.CSET_Voltage = 0;
;;;423    				Para.CSET_Current = 0;
;;;424    				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;425    			}
;;;426    			else if( value == 1 ){
;;;427    				Para.CSET_Voltage = Para.CDC_OutPut_V;
;;;428    				Para.CSET_Current = Para.CDC_Limit_C;
;;;429    				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;430    				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;431    			}
;;;432    		}break;
;;;433    		case 4://电子负载ON/OFF
;;;434    		{
;;;435    			if( value == 0 ){
;;;436    				
;;;437    				Flag_Swtich_ON = 0;
;;;438    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
;;;439    			}
;;;440    			else if( value == 1 ){
;;;441    				
;;;442    				Flag_Swtich_ON = 1;
;;;443    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;444    			}
;;;445    		}break;
;;;446    	}
;;;447    }
000074  ecbd8b02          VPOP     {d8}
000078  e8bd8ff8          POP      {r3-r11,pc}
                  |L4.124|
00007c  2003              MOVS     r0,#3                 ;361
00007e  7250              STRB     r0,[r2,#9]            ;361
000080  7ad0              LDRB     r0,[r2,#0xb]          ;362  ; listpowwatch1
000082  1c40              ADDS     r0,r0,#1              ;362
000084  72d0              STRB     r0,[r2,#0xb]          ;362
000086  e7f5              B        |L4.116|
000088  7a91              LDRB     r1,[r2,#0xa]          ;381  ; listocwatch
00008a  1c49              ADDS     r1,r1,#1              ;381
00008c  7291              STRB     r1,[r2,#0xa]          ;381
00008e  f89d1008          LDRB     r1,[sp,#8]            ;382
000092  f8dfa110          LDR      r10,|L4.420|
000096  ed9f8a44          VLDR     s16,|L4.424|
00009a  f8df8110          LDR      r8,|L4.428|
00009e  b3b1              CBZ      r1,|L4.270|
0000a0  f89d1008          LDRB     r1,[sp,#8]            ;389
0000a4  2901              CMP      r1,#1                 ;389
0000a6  d1e5              BNE      |L4.116|
0000a8  f8c93020          STR      r3,[r9,#0x20]         ;390  ; Run_Control
0000ac  4940              LDR      r1,|L4.432|
0000ae  ed910a00          VLDR     s0,[r1,#0]            ;391
0000b2  4940              LDR      r1,|L4.436|
0000b4  ed810a00          VSTR     s0,[r1,#0]            ;391
0000b8  eddf8a3f          VLDR     s17,|L4.440|
0000bc  ee200a28          VMUL.F32 s0,s0,s17             ;392
0000c0  eebd0ac0          VCVT.S32.F32 s0,s0                 ;392
0000c4  ee101a10          VMOV     r1,s0                 ;392
0000c8  f501717a          ADD      r1,r1,#0x3e8          ;392
0000cc  60a9              STR      r1,[r5,#8]            ;392  ; Para
0000ce  f44f717a          MOV      r1,#0x3e8             ;393
0000d2  60e9              STR      r1,[r5,#0xc]          ;393  ; Para
0000d4  6c69              LDR      r1,[r5,#0x44]         ;394  ; Para
0000d6  6169              STR      r1,[r5,#0x14]         ;394  ; Para
0000d8  4938              LDR      r1,|L4.444|
0000da  700e              STRB     r6,[r1,#0]            ;395
0000dc  4938              LDR      r1,|L4.448|
0000de  4646              MOV      r6,r8                 ;397
0000e0  ed818a00          VSTR     s16,[r1,#0]           ;396
0000e4  ed888a00          VSTR     s16,[r8,#0]           ;397
0000e8  f88a3000          STRB     r3,[r10,#0]           ;398
0000ec  4935              LDR      r1,|L4.452|
0000ee  700b              STRB     r3,[r1,#0]            ;399
0000f0  6020              STR      r0,[r4,#0]            ;401  ; flagA
0000f2  2180              MOVS     r1,#0x80              ;401
0000f4  4638              MOV      r0,r7                 ;401
0000f6  f7fffffe          BL       GPIO_ResetBits
0000fa  6c68              LDR      r0,[r5,#0x44]         ;402  ; Para
0000fc  ee000a10          VMOV     s0,r0                 ;402
000100  eeb80a40          VCVT.F32.U32 s0,s0                 ;402
000104  eec00a28          VDIV.F32 s1,s0,s17             ;402
000108  edc60a00          VSTR     s1,[r6,#0]            ;402
00010c  e7b2              B        |L4.116|
                  |L4.270|
00010e  e7ff              B        |L4.272|
                  |L4.272|
000110  f7fffffe          BL       Off_GPOI_ResetSet
000114  f88a6000          STRB     r6,[r10,#0]           ;385
000118  ed888a00          VSTR     s16,[r8,#0]           ;386
00011c  6c68              LDR      r0,[r5,#0x44]         ;387  ; Para
00011e  6168              STR      r0,[r5,#0x14]         ;387  ; Para
000120  e7a8              B        |L4.116|
000122  f89d0008          LDRB     r0,[sp,#8]            ;419
000126  4c28              LDR      r4,|L4.456|
000128  b170              CBZ      r0,|L4.328|
00012a  f89d0008          LDRB     r0,[sp,#8]            ;426
00012e  2801              CMP      r0,#1                 ;426
000130  d1a0              BNE      |L4.116|
000132  6ee8              LDR      r0,[r5,#0x6c]         ;427  ; Para
000134  60a8              STR      r0,[r5,#8]            ;427  ; Para
000136  f8b50070          LDRH     r0,[r5,#0x70]         ;428  ; Para
00013a  60e8              STR      r0,[r5,#0xc]          ;428  ; Para
00013c  2104              MOVS     r1,#4                 ;429
00013e  4620              MOV      r0,r4                 ;429
000140  f7fffffe          BL       GPIO_SetBits
000144  2102              MOVS     r1,#2                 ;430
000146  e01c              B        |L4.386|
                  |L4.328|
000148  2102              MOVS     r1,#2                 ;421
00014a  4638              MOV      r0,r7                 ;421
00014c  f7fffffe          BL       GPIO_ResetBits
000150  60ae              STR      r6,[r5,#8]            ;422  ; Para
000152  60ee              STR      r6,[r5,#0xc]          ;423  ; Para
000154  2104              MOVS     r1,#4                 ;424
000156  4620              MOV      r0,r4                 ;424
000158  e009              B        |L4.366|
00015a  f89d2008          LDRB     r2,[sp,#8]            ;435
00015e  b162              CBZ      r2,|L4.378|
000160  f89d1008          LDRB     r1,[sp,#8]            ;440
000164  2901              CMP      r1,#1                 ;440
000166  d185              BNE      |L4.116|
                  |L4.360|
000168  6020              STR      r0,[r4,#0]            ;443  ; flagA
00016a  2180              MOVS     r1,#0x80              ;443
00016c  4638              MOV      r0,r7                 ;443
                  |L4.366|
00016e  ecbd8b02          VPOP     {d8}                  ;443
000172  e8bd4ff8          POP      {r3-r11,lr}           ;443
000176  f7ffbffe          B.W      GPIO_ResetBits
                  |L4.378|
00017a  f0210040          BIC      r0,r1,#0x40           ;437
                  |L4.382|
00017e  2180              MOVS     r1,#0x80              ;350
000180  6020              STR      r0,[r4,#0]            ;350  ; flagA
                  |L4.386|
000182  4638              MOV      r0,r7                 ;438
000184  ecbd8b02          VPOP     {d8}                  ;438
000188  e8bd4ff8          POP      {r3-r11,lr}           ;438
00018c  f7ffbffe          B.W      GPIO_SetBits
;;;448    
                          ENDP

                  |L4.400|
                          DCD      ||.data||
                  |L4.404|
                          DCD      Run_Control
                  |L4.408|
                          DCD      flagA
                  |L4.412|
                          DCD      Para
                  |L4.416|
                          DCD      0x40020800
                  |L4.420|
                          DCD      trig_flag_state
                  |L4.424|
0001a8  00000000          DCFS     0x00000000 ; 0
                  |L4.428|
                          DCD      max_discahrgeNum
                  |L4.432|
                          DCD      DISS_Voltage
                  |L4.436|
                          DCD      testv
                  |L4.440|
0001b8  447a0000          DCFS     0x447a0000 ; 1000
                  |L4.444|
                          DCD      shorttime
                  |L4.448|
                          DCD      old_I
                  |L4.452|
                          DCD      C_DISCHARGE
                  |L4.456|
                          DCD      0x40021000

                          AREA ||i.MODE_ONOFF||, CODE, READONLY, ALIGN=2

                  MODE_ONOFF PROC
;;;264    
;;;265    void MODE_ONOFF(vu8 value)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;266    {
;;;267    	switch(MODE)
000004  4a41              LDR      r2,|L5.268|
000006  ed2d8b02          VPUSH    {d8}                  ;266
00000a  7951              LDRB     r1,[r2,#5]  ; MODE
;;;268    	{
;;;269    		case 0://电子负载ON/OFF
;;;270    		{
;;;271    			if( value == 0 ){
;;;272    				
;;;273    				Flag_Swtich_ON = 0;
00000c  4d40              LDR      r5,|L5.272|
;;;274    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
00000e  4841              LDR      r0,|L5.276|
000010  b3e9              CBZ      r1,|L5.142|
;;;275    			}
;;;276    			else if( value == 1 ){
;;;277    				
;;;278    				Flag_Swtich_ON = 1;
;;;279    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;280    			}
;;;281    		}break;
;;;282    		case 1://稳压电源ON/OFF
;;;283    		{
;;;284    			sendwait = 1;
000012  2601              MOVS     r6,#1
000014  2901              CMP      r1,#1                 ;267
000016  d06d              BEQ      |L5.244|
000018  2902              CMP      r1,#2                 ;267
00001a  d14a              BNE      |L5.178|
;;;285    //			if( value == 0 ){
;;;286    //				sendwait = 1;
;;;287    ////				PowerSwitch(0);//关闭电源输出
;;;288    ////				Delay_ms(1000);
;;;289    ////				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;290    ////				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;291    //////				Delay_ms(1000);
;;;292    ////				Para.CSET_Voltage = 0;
;;;293    ////				Para.CSET_Current = 0;
;;;294    //////				Delay_ms(1000);
;;;295    ////				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;296    //			}
;;;297    //			else if( value == 1 ){
;;;298    ////				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;299    //////				Delay_ms(1000);
;;;300    ////				PowerSwitch(1);//打开电源输出
;;;301    //				
;;;302    //////				
;;;303    ////				Para.CSET_Voltage = Para.POWER_OutPut_V;
;;;304    ////				Para.CSET_Current = Para.POWER_Limit_C;
;;;305    //////				Delay_ms(1000);
;;;306    ////				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;307    //				
;;;308    //			}
;;;309    		}break;
;;;310    		case 2://过流测试ON/OFF
;;;311    		{
;;;312    			if( value == 0 ){
00001c  f89d1008          LDRB     r1,[sp,#8]
;;;313    				
;;;314    				Off_GPOI_ResetSet();
;;;315    				trig_flag_state = 0;
000020  f8df90f4          LDR      r9,|L5.280|
;;;316    				max_discahrgeNum = 0;
000024  ed9f8a3d          VLDR     s16,|L5.284|
000028  f8df80f4          LDR      r8,|L5.288|
;;;317    				Para.CSET_Current_Laod =  Para.IR_Start_C;
00002c  4c3d              LDR      r4,|L5.292|
00002e  2700              MOVS     r7,#0                 ;312
000030  b371              CBZ      r1,|L5.144|
;;;318    			}
;;;319    			else if( value == 1 ){
000032  f89d1008          LDRB     r1,[sp,#8]
000036  2901              CMP      r1,#1
000038  d13b              BNE      |L5.178|
;;;320    				LOAD_MODE = 0;
00003a  493b              LDR      r1,|L5.296|
00003c  618f              STR      r7,[r1,#0x18]  ; Run_Control
;;;321    				GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
00003e  1481              ASRS     r1,r0,#18
000040  4682              MOV      r10,r0
000042  f7fffffe          BL       GPIO_ResetBits
;;;322    				Para.CSET_Current_Laod =  Para.IR_Start_C;
000046  6c60              LDR      r0,[r4,#0x44]  ; Para
000048  6160              STR      r0,[r4,#0x14]  ; Para
;;;323    				testv = DISS_Voltage;
00004a  4838              LDR      r0,|L5.300|
;;;324    				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
00004c  eddf8a39          VLDR     s17,|L5.308|
000050  ed900a00          VLDR     s0,[r0,#0]            ;323
000054  4836              LDR      r0,|L5.304|
000056  ed800a00          VSTR     s0,[r0,#0]            ;323
00005a  ee200a28          VMUL.F32 s0,s0,s17
00005e  eebd0ac0          VCVT.S32.F32 s0,s0
000062  ee100a10          VMOV     r0,s0
000066  f500707a          ADD      r0,r0,#0x3e8
00006a  60a0              STR      r0,[r4,#8]  ; Para
;;;325    				Para.CSET_Current = 1000;
00006c  f44f707a          MOV      r0,#0x3e8
000070  60e0              STR      r0,[r4,#0xc]  ; Para
;;;326    				shorttime = 0;
000072  4831              LDR      r0,|L5.312|
000074  7007              STRB     r7,[r0,#0]
;;;327    				old_I = 0;
000076  4831              LDR      r0,|L5.316|
;;;328    				max_discahrgeNum = 0;
000078  4647              MOV      r7,r8
00007a  ed808a00          VSTR     s16,[r0,#0]           ;327
00007e  ed888a00          VSTR     s16,[r8,#0]
;;;329    				trig_flag_state = 1;
000082  f8896000          STRB     r6,[r9,#0]
;;;330    				C_DISCHARGE = 1;        	
000086  482e              LDR      r0,|L5.320|
000088  7006              STRB     r6,[r0,#0]
;;;331    				Flag_Swtich_ON = 1;
00008a  6828              LDR      r0,[r5,#0]  ; flagA
00008c  e001              B        |L5.146|
                  |L5.142|
00008e  e014              B        |L5.186|
                  |L5.144|
000090  e032              B        |L5.248|
                  |L5.146|
000092  f0400040          ORR      r0,r0,#0x40
;;;332    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
000096  6028              STR      r0,[r5,#0]  ; flagA
000098  2180              MOVS     r1,#0x80
00009a  4650              MOV      r0,r10
00009c  f7fffffe          BL       GPIO_ResetBits
;;;333    				max_discahrgeNum = (float)Para.IR_Start_C / 1000;
0000a0  6c60              LDR      r0,[r4,#0x44]  ; Para
0000a2  ee000a10          VMOV     s0,r0
0000a6  eeb80a40          VCVT.F32.U32 s0,s0
0000aa  eec00a28          VDIV.F32 s1,s0,s17
0000ae  edc70a00          VSTR     s1,[r7,#0]
                  |L5.178|
;;;334    			}
;;;335    		}break;
;;;336    	}
;;;337    }
0000b2  ecbd8b02          VPOP     {d8}
0000b6  e8bd8ff8          POP      {r3-r11,pc}
                  |L5.186|
0000ba  f89d2008          LDRB     r2,[sp,#8]            ;271
0000be  4914              LDR      r1,|L5.272|
0000c0  6809              LDR      r1,[r1,#0]            ;273
0000c2  b16a              CBZ      r2,|L5.224|
0000c4  f89d2008          LDRB     r2,[sp,#8]            ;276
0000c8  2a01              CMP      r2,#1                 ;276
0000ca  d1f2              BNE      |L5.178|
0000cc  f0410140          ORR      r1,r1,#0x40           ;278
0000d0  6029              STR      r1,[r5,#0]            ;279  ; flagA
0000d2  2180              MOVS     r1,#0x80              ;279
0000d4  ecbd8b02          VPOP     {d8}                  ;279
0000d8  e8bd4ff8          POP      {r3-r11,lr}           ;279
0000dc  f7ffbffe          B.W      GPIO_ResetBits
                  |L5.224|
0000e0  f0210140          BIC      r1,r1,#0x40           ;273
0000e4  6029              STR      r1,[r5,#0]            ;274  ; flagA
0000e6  2180              MOVS     r1,#0x80              ;274
0000e8  ecbd8b02          VPOP     {d8}                  ;274
0000ec  e8bd4ff8          POP      {r3-r11,lr}           ;274
0000f0  f7ffbffe          B.W      GPIO_SetBits
                  |L5.244|
0000f4  7216              STRB     r6,[r2,#8]            ;284
0000f6  e7dc              B        |L5.178|
                  |L5.248|
0000f8  f7fffffe          BL       Off_GPOI_ResetSet
0000fc  f8897000          STRB     r7,[r9,#0]            ;315
000100  ed888a00          VSTR     s16,[r8,#0]           ;316
000104  6c60              LDR      r0,[r4,#0x44]         ;317  ; Para
000106  6160              STR      r0,[r4,#0x14]         ;317  ; Para
000108  e7d3              B        |L5.178|
;;;338    
                          ENDP

00010a  0000              DCW      0x0000
                  |L5.268|
                          DCD      ||.data||
                  |L5.272|
                          DCD      flagA
                  |L5.276|
                          DCD      0x40020800
                  |L5.280|
                          DCD      trig_flag_state
                  |L5.284|
00011c  00000000          DCFS     0x00000000 ; 0
                  |L5.288|
                          DCD      max_discahrgeNum
                  |L5.292|
                          DCD      Para
                  |L5.296|
                          DCD      Run_Control
                  |L5.300|
                          DCD      DISS_Voltage
                  |L5.304|
                          DCD      testv
                  |L5.308|
000134  447a0000          DCFS     0x447a0000 ; 1000
                  |L5.312|
                          DCD      shorttime
                  |L5.316|
                          DCD      old_I
                  |L5.320|
                          DCD      C_DISCHARGE

                          AREA ||i.MODE_PARASET||, CODE, READONLY, ALIGN=2

                  MODE_PARASET PROC
;;;448    
;;;449    void MODE_PARASET(vu8 value)
000000  b570              PUSH     {r4-r6,lr}
;;;450    {
;;;451    	float ptrans;
;;;452    	switch(MODE)
000002  4a23              LDR      r2,|L6.144|
000004  7953              LDRB     r3,[r2,#5]  ; MODE
000006  2100              MOVS     r1,#0
;;;453    	{
;;;454    		case 0://电子负载
;;;455    		{
;;;456    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;457    //			mainswitch = 0;
;;;458    //			sendwait = 3;
;;;459    			LOAD_MODE = Para.CLOAD_MODE;
;;;460    			if(LOAD_MODE == 2)
;;;461    			{
;;;462    				ptrans = (float)Para.LOAD_P/1000;
;;;463    				Para.CSET_Current_Laod = (uint32_t)((ptrans/DISS_Voltage)*1000);
;;;464    			}else{
;;;465    				Para.CSET_Current_Laod = Para.LOAD_C;
;;;466    			}
;;;467    			Para.CSET_Voltage_Laod = Para.LOAD_V;
;;;468    			if(Para.CSET_Current_Laod > 15000)
;;;469    			{
;;;470    				LOAD_I_SW = 1;
000008  2401              MOVS     r4,#1
00000a  4d22              LDR      r5,|L6.148|
00000c  4822              LDR      r0,|L6.152|
00000e  2b05              CMP      r3,#5                 ;452
000010  d214              BCS      |L6.60|
000012  e8dff003          TBB      [pc,r3]               ;452
000016  033a              DCB      0x03,0x3a
000018  2b333a00          DCB      0x2b,0x33,0x3a,0x00
00001c  6982              LDR      r2,[r0,#0x18]         ;459  ; Para
00001e  61aa              STR      r2,[r5,#0x18]         ;459  ; Run_Control
000020  69aa              LDR      r2,[r5,#0x18]         ;460  ; Run_Control
000022  2a02              CMP      r2,#2                 ;460
000024  d00b              BEQ      |L6.62|
000026  6dc2              LDR      r2,[r0,#0x5c]         ;465  ; Para
                  |L6.40|
000028  6142              STR      r2,[r0,#0x14]         ;465  ; Para
00002a  f8b02060          LDRH     r2,[r0,#0x60]         ;467  ; Para
00002e  6102              STR      r2,[r0,#0x10]         ;467  ; Para
000030  6940              LDR      r0,[r0,#0x14]         ;468  ; Para
000032  f6432298          MOV      r2,#0x3a98            ;468
000036  4290              CMP      r0,r2                 ;468
000038  d916              BLS      |L6.104|
                  |L6.58|
00003a  622c              STR      r4,[r5,#0x20]  ; Run_Control
                  |L6.60|
;;;471    			}else{
;;;472    				LOAD_I_SW = 0;
;;;473    			}
;;;474    		}break;
;;;475    		case 1://稳压电源
;;;476    		{
;;;477    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;478    //			mainswitch = 0;
;;;479    //			if(USART3_Recive_flg == 1)
;;;480    //			{
;;;481    				sendwait = 1;
;;;482    //			}else{
;;;483    //				SetPowerMode();
;;;484    //			}
;;;485    //			Para.CSET_Voltage = Para.POWER_OutPut_V;
;;;486    //			SetPowerV(Para.POWER_OutPut_V);
;;;487    //	//			Para.CSET_Current = Para.POWER_Limit_C;
;;;488    //			SetPowerC(Para.POWER_Limit_C);
;;;489    		}break;
;;;490    		case 2://放电过流测试
;;;491    		{
;;;492    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;493    //			mainswitch = 0;
;;;494    //			sendwait = 3;
;;;495    			
;;;496    			LOAD_MODE = 0;
;;;497    			LOAD_I_SW = 1;
;;;498    			Para.CSET_Current = 1000;
;;;499    			Para.CSET_Current_Laod = Para.IR_Start_C;
;;;500    		}break;
;;;501    		case 3://列表
;;;502    		{
;;;503    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;504    //			mainswitch = 0;
;;;505    //			sendwait = 3;
;;;506    			
;;;507    			LOAD_MODE = 0;
;;;508    			GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
;;;509    			LOAD_I_SW = 1;
;;;510    //			Para.CSET_Current = 1000;
;;;511    		}break;
;;;512    		case 4://充电过流测试
;;;513    		{
;;;514    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;515    //			mainswitch = 0;
;;;516    //			sendwait = 3;
;;;517    			
;;;518    			sendwait = 1;
;;;519    		}break;
;;;520    	}
;;;521    }
00003c  bd70              POP      {r4-r6,pc}
                  |L6.62|
00003e  6e42              LDR      r2,[r0,#0x64]         ;462  ; Para
000040  eddf0a16          VLDR     s1,|L6.156|
000044  ee002a10          VMOV     s0,r2                 ;462
000048  4a15              LDR      r2,|L6.160|
00004a  eeb81a40          VCVT.F32.U32 s2,s0                 ;462
00004e  edd21a00          VLDR     s3,[r2,#0]            ;463
000052  ee810a20          VDIV.F32 s0,s2,s1              ;462
000056  ee801a21          VDIV.F32 s2,s0,s3              ;463
00005a  ee210a20          VMUL.F32 s0,s2,s1              ;463
00005e  eebc0ac0          VCVT.U32.F32 s0,s0                 ;463
000062  ee102a10          VMOV     r2,s0                 ;463
000066  e7df              B        |L6.40|
                  |L6.104|
000068  6229              STR      r1,[r5,#0x20]         ;472  ; Run_Control
00006a  bd70              POP      {r4-r6,pc}
00006c  61a9              STR      r1,[r5,#0x18]         ;496  ; Run_Control
00006e  622c              STR      r4,[r5,#0x20]         ;497  ; Run_Control
000070  f44f717a          MOV      r1,#0x3e8             ;498
000074  60c1              STR      r1,[r0,#0xc]          ;498  ; Para
000076  6c41              LDR      r1,[r0,#0x44]         ;499  ; Para
000078  6141              STR      r1,[r0,#0x14]         ;499  ; Para
00007a  bd70              POP      {r4-r6,pc}
00007c  61a9              STR      r1,[r5,#0x18]         ;507  ; Run_Control
00007e  f44f5180          MOV      r1,#0x1000            ;508
000082  4808              LDR      r0,|L6.164|
000084  f7fffffe          BL       GPIO_ResetBits
000088  e7d7              B        |L6.58|
00008a  7214              STRB     r4,[r2,#8]            ;518
00008c  bd70              POP      {r4-r6,pc}
;;;522    
                          ENDP

00008e  0000              DCW      0x0000
                  |L6.144|
                          DCD      ||.data||
                  |L6.148|
                          DCD      Run_Control
                  |L6.152|
                          DCD      Para
                  |L6.156|
00009c  447a0000          DCFS     0x447a0000 ; 1000
                  |L6.160|
                          DCD      DISS_Voltage
                  |L6.164|
                          DCD      0x40020800

                          AREA ||i.PowerSwitch||, CODE, READONLY, ALIGN=2

                  PowerSwitch PROC
;;;188    
;;;189    void PowerSwitch(vu8 bit)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;190    {
;;;191    	MasterSendbuf[0] = 0x01;
000002  4c0f              LDR      r4,|L7.64|
000004  2001              MOVS     r0,#1
;;;192    	MasterSendbuf[1] = 0x06;
000006  2106              MOVS     r1,#6
000008  7020              STRB     r0,[r4,#0]            ;191
00000a  7061              STRB     r1,[r4,#1]
;;;193    	MasterSendbuf[2] = 0x00;
00000c  2100              MOVS     r1,#0
00000e  70a1              STRB     r1,[r4,#2]
;;;194    	MasterSendbuf[3] = 0x01;
000010  70e0              STRB     r0,[r4,#3]
;;;195    	MasterSendbuf[4] = (u8)(bit>>8);
000012  f89d0000          LDRB     r0,[sp,#0]
000016  7121              STRB     r1,[r4,#4]
;;;196    	MasterSendbuf[5] = (u8)(bit);
000018  f89d0000          LDRB     r0,[sp,#0]
00001c  7160              STRB     r0,[r4,#5]
;;;197    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00001e  2106              MOVS     r1,#6
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       Hardware_CRC
000026  71a0              STRB     r0,[r4,#6]
;;;198    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000028  2106              MOVS     r1,#6
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       Hardware_CRC
000030  0a00              LSRS     r0,r0,#8
000032  71e0              STRB     r0,[r4,#7]
;;;199    	USART3WriteDMA(8);
000034  e8bd4038          POP      {r3-r5,lr}
000038  2008              MOVS     r0,#8
00003a  f7ffbffe          B.W      USART3WriteDMA
;;;200    }
;;;201    
                          ENDP

00003e  0000              DCW      0x0000
                  |L7.64|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.ReadPowData||, CODE, READONLY, ALIGN=2

                  ReadPowData PROC
;;;201    
;;;202    void ReadPowData(void)
000000  b510              PUSH     {r4,lr}
;;;203    {
;;;204    	MasterSendbuf[0] = 0x01;
000002  4c0e              LDR      r4,|L8.60|
000004  2001              MOVS     r0,#1
;;;205    	MasterSendbuf[1] = 0x03;
;;;206    	MasterSendbuf[2] = 0x00;
;;;207    	MasterSendbuf[3] = 0x10;
000006  2110              MOVS     r1,#0x10
000008  7020              STRB     r0,[r4,#0]            ;204
00000a  2003              MOVS     r0,#3                 ;205
00000c  7060              STRB     r0,[r4,#1]            ;205
00000e  2000              MOVS     r0,#0                 ;206
000010  70a0              STRB     r0,[r4,#2]            ;206
000012  70e1              STRB     r1,[r4,#3]
;;;208    	MasterSendbuf[4] = 0x00;
000014  7120              STRB     r0,[r4,#4]
;;;209    	MasterSendbuf[5] = 0x02;
000016  2002              MOVS     r0,#2
000018  7160              STRB     r0,[r4,#5]
;;;210    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00001a  2106              MOVS     r1,#6
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       Hardware_CRC
000022  71a0              STRB     r0,[r4,#6]
;;;211    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000024  2106              MOVS     r1,#6
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       Hardware_CRC
00002c  0a00              LSRS     r0,r0,#8
00002e  71e0              STRB     r0,[r4,#7]
;;;212    	USART3WriteDMA(8);
000030  e8bd4010          POP      {r4,lr}
000034  2008              MOVS     r0,#8
000036  f7ffbffe          B.W      USART3WriteDMA
;;;213    }
;;;214    
                          ENDP

00003a  0000              DCW      0x0000
                  |L8.60|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.SerialRemoteHandleL||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  SerialRemoteHandleL PROC
;;;1005   
;;;1006   u16 SerialRemoteHandleL(u8 len,char* buf)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1007   {
000004  ed2d8b02          VPUSH    {d8}
000008  b0b3              SUB      sp,sp,#0xcc
00000a  4604              MOV      r4,r0
;;;1008   
;;;1009     
;;;1010       u16 currCharNum;
;;;1011       u32 temp1;
;;;1012     u8 Gmode_Vale;
;;;1013   	u8 i,j;
;;;1014   	
;;;1015   	u8 addr = 0;
00000c  2000              MOVS     r0,#0
00000e  460d              MOV      r5,r1                 ;1007
;;;1016   	char str[200]={0};
000010  9032              STR      r0,[sp,#0xc8]
000012  21c8              MOVS     r1,#0xc8
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       __aeabi_memclr4
;;;1017   	int cmd_flag=255;
;;;1018   	u8 templen =0;
;;;1019   	u8 tmpFg;
;;;1020   	u8 LM_S_Vale,LOW_I_Vale,H_L_Vale,SWITCH_Vale;
;;;1021   	u16 I_ADC_Vale,V_ADC_Vale;
;;;1022   	int32_t V_CS_Vale,I_CS_Vale;
;;;1023   	float Lvl_Vale,fadcx,fsingal, fVale;
;;;1024    
;;;1025   //	u8 len = 11;
;;;1026   	u8 pntlen = 0;
;;;1027   
;;;1028   
;;;1029   	
;;;1030   	currCharNum=0;
;;;1031   	if((buf[currCharNum] != ChrStartR) || (buf[len-2] != ChrEndR)||(buf[len-1] != ChrEndS))
00001a  7828              LDRB     r0,[r5,#0]
00001c  283c              CMP      r0,#0x3c
00001e  d108              BNE      |L9.50|
000020  1928              ADDS     r0,r5,r4
000022  f8101c02          LDRB     r1,[r0,#-2]
000026  290d              CMP      r1,#0xd
000028  d103              BNE      |L9.50|
00002a  f8100c01          LDRB     r0,[r0,#-1]
00002e  280a              CMP      r0,#0xa
000030  d001              BEQ      |L9.54|
                  |L9.50|
;;;1032       {
;;;1033   		return SetErr_ACK(buf,addr ,CMD_ERR); 
000032  2202              MOVS     r2,#2
000034  e14e              B        |L9.724|
                  |L9.54|
;;;1034       } 
;;;1035   	str[currCharNum++] = ChrStartR;
000036  213c              MOVS     r1,#0x3c
000038  f88d1000          STRB     r1,[sp,#0]
;;;1036   	sprintf(&str[currCharNum],"%d",addr);
00003c  a1fe              ADR      r1,|L9.1080|
00003e  f10d0001          ADD      r0,sp,#1
000042  9a32              LDR      r2,[sp,#0xc8]
000044  f7fffffe          BL       __2sprintf
;;;1037   	strncat(str,"/",1);
000048  2201              MOVS     r2,#1
00004a  a1fc              ADR      r1,|L9.1084|
00004c  4668              MOV      r0,sp
00004e  f7fffffe          BL       strncat
;;;1038   	currCharNum =strlen(str);
000052  4668              MOV      r0,sp
000054  f7fffffe          BL       strlen
000058  fa1ffa80          UXTH     r10,r0
;;;1039   	cmd_flag=strncmp(buf,str,strlen(str));
00005c  4668              MOV      r0,sp
00005e  f7fffffe          BL       strlen
000062  4602              MOV      r2,r0
000064  4669              MOV      r1,sp
000066  4628              MOV      r0,r5
000068  f7fffffe          BL       strncmp
;;;1040   	//testflag = cmd_flag;
;;;1041   	if(0!=cmd_flag)
00006c  2800              CMP      r0,#0
00006e  d1e0              BNE      |L9.50|
;;;1042   	{
;;;1043   		return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1044   		
;;;1045   	}
;;;1046   	for (j=0;j<CmdNumb;j++)
;;;1047       {
;;;1048   		templen = strlen(CmdStr[j]);
000070  f8dfb3cc          LDR      r11,|L9.1088|
000074  4680              MOV      r8,r0                 ;1046
;;;1049   		cmd_flag=strncmp(&buf[currCharNum],CmdStr[j],templen);
000076  eb05040a          ADD      r4,r5,r10
                  |L9.122|
00007a  eb0801c8          ADD      r1,r8,r8,LSL #3       ;1048
00007e  eb01000b          ADD      r0,r1,r11             ;1048
000082  4606              MOV      r6,r0                 ;1048
000084  f7fffffe          BL       strlen
000088  f00009ff          AND      r9,r0,#0xff           ;1048
00008c  4631              MOV      r1,r6                 ;1048
00008e  4620              MOV      r0,r4                 ;1048
000090  464a              MOV      r2,r9
000092  f7fffffe          BL       strncmp
;;;1050   	    if(0==cmd_flag)
000096  b138              CBZ      r0,|L9.168|
000098  f1080001          ADD      r0,r8,#1              ;1046
00009c  f00008ff          AND      r8,r0,#0xff           ;1046
0000a0  f1b80f13          CMP      r8,#0x13              ;1046
0000a4  d3e9              BCC      |L9.122|
0000a6  e7c4              B        |L9.50|
                  |L9.168|
;;;1051   	    {
;;;1052   
;;;1053   		  buf[0] = ChrStartS;
0000a8  203e              MOVS     r0,#0x3e
0000aa  7028              STRB     r0,[r5,#0]
;;;1054   		  currCharNum+=templen;
0000ac  eb0a0009          ADD      r0,r10,r9
0000b0  b284              UXTH     r4,r0
;;;1055   		  switch(j)
;;;1056             {
;;;1057   			case 0:
;;;1058   				pntlen = 5;    //
;;;1059   				if(buf[currCharNum]=='?')
;;;1060   				{
;;;1061   
;;;1062   					
;;;1063   					sprintf(&buf[currCharNum],"%05d",Para.CVoltage);
;;;1064   					currCharNum+=pntlen;
;;;1065   					
;;;1066   					buf[currCharNum++]=(',');
;;;1067   					sprintf(&buf[currCharNum],"%06d",Para.CLaod_Current);
;;;1068   					currCharNum+=6;
;;;1069   					
;;;1070   					buf[currCharNum++]=(',');
;;;1071   					sprintf(&buf[currCharNum],"%05d",Para.CPOW_Voltage);
;;;1072   					currCharNum+=pntlen;
;;;1073   					
;;;1074   					buf[currCharNum++]=(',');
;;;1075   					sprintf(&buf[currCharNum],"%05d",Para.CCurrent);
;;;1076   					currCharNum+=pntlen;
;;;1077   					
;;;1078   					buf[currCharNum++]=(',');
;;;1079   					sprintf(&buf[currCharNum],"%05d",Para.CR_VLUE);
;;;1080   					currCharNum+=pntlen;
;;;1081   					
;;;1082   					buf[currCharNum++]=(',');
;;;1083   					sprintf(&buf[currCharNum],"%04d",Para.CR1_VLUE);
;;;1084   					currCharNum+=4;
;;;1085   					
;;;1086   					buf[currCharNum++]=(',');
;;;1087   					sprintf(&buf[currCharNum],"%04d",Para.CR2_VLUE);
;;;1088   					currCharNum+=4;
;;;1089   
;;;1090   					buf[currCharNum++]=(',');
;;;1091   					sprintf(&buf[currCharNum],"%06d",(int)(max_discahrgeNum*1000));
;;;1092   					currCharNum+=6;
;;;1093   					
;;;1094   					buf[currCharNum++]=(',');
;;;1095   					sprintf(&buf[currCharNum],"%03d",shorttime);
;;;1096   					currCharNum+=3;
;;;1097   					
;;;1098   					buf[currCharNum++]=(',');
;;;1099   					sprintf(&buf[currCharNum],"%1d",mainswitch);
;;;1100   					currCharNum+=1;
;;;1101   					
;;;1102   					buf[currCharNum++]=(',');
;;;1103   					sprintf(&buf[currCharNum],"%1d",finishflag);
;;;1104   					currCharNum+=1;
;;;1105   					
;;;1106   					buf[currCharNum++]=(',');
;;;1107   					sprintf(&buf[currCharNum],"%1d",lockflag);
;;;1108   					currCharNum+=1;
;;;1109   					
;;;1110   					buf[currCharNum++]=(',');
;;;1111   					sprintf(&buf[currCharNum],"%2d",version);
;;;1112   					currCharNum+=2;
;;;1113   					
;;;1114   					buf[currCharNum++]=(',');
;;;1115   					sprintf(&buf[currCharNum],"%03d",Temperature);
;;;1116   					currCharNum+=3;
;;;1117   					
;;;1118   					buf[currCharNum++]=(',');
;;;1119   					sprintf(&buf[currCharNum],"%1d",overflag);
;;;1120   					currCharNum+=1;
;;;1121   //					buf[currCharNum++]=(',');
;;;1122   //					sprintf(&buf[currCharNum],"%d",H_L);
;;;1123   //					currCharNum++;
;;;1124   					
;;;1125   //					buf[currCharNum++]=(',');
;;;1126   //					sprintf(&buf[currCharNum],"%d",LM_S);
;;;1127   //					currCharNum++;
;;;1128   					
;;;1129   //					buf[currCharNum++]=(',');
;;;1130   //					sprintf(&buf[currCharNum],"%02d",(int)temperature);
;;;1131   //					currCharNum+=2;
;;;1132   					
;;;1133   				  buf[currCharNum++ ] = ChrEndR;
;;;1134   				  buf[currCharNum++ ] = ChrEndS;
;;;1135   				}
;;;1136   				else
;;;1137   				{
;;;1138   					return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1139   				}
;;;1140   				break;
;;;1141   			case 1:
;;;1142   				pntlen = 1;
;;;1143   				if(buf[currCharNum]=='?')
;;;1144   				{
;;;1145   					  sprintf(&buf[currCharNum],"%1d",MODE);
;;;1146   				    currCharNum+=pntlen;
;;;1147   				    buf[currCharNum ++] = ChrEndS;
;;;1148   					
;;;1149   				}
;;;1150   				else
;;;1151   				{
;;;1152   					pntlen = 1;				
;;;1153   					for(i=0,temp1=0;i<pntlen;i++)
;;;1154   					{
;;;1155   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1156   					}		                   
;;;1157   //					if(temp1>1)
;;;1158   //					{
;;;1159   //						return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1160   //					}
;;;1161   					MODE=temp1;
;;;1162   //					Off_GPOI_ResetSet();
;;;1163   					OnOff_GPOI_ResetSet( 2, 0 );
;;;1164   					mainswitch = 0;
;;;1165   					sendwait = 3;
;;;1166   					MODE_PARASET(MODE);
;;;1167   	//				Change_LM_Val(LM_S_Vale);
;;;1168   					buf[currCharNum++] = ChrEndR;
;;;1169   				}
;;;1170   				break;
;;;1171   				case 2:
;;;1172   				pntlen = 1;
;;;1173   				if(buf[currCharNum]=='?')
;;;1174   				{
;;;1175   					sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
0000b2  48e4              LDR      r0,|L9.1092|
0000b4  f8dfa390          LDR      r10,|L9.1096|
0000b8  f04f0b0d          MOV      r11,#0xd              ;1031
0000bc  f04f090a          MOV      r9,#0xa               ;1031
0000c0  f06f062f          MVN      r6,#0x2f              ;1155
0000c4  f1b80f13          CMP      r8,#0x13              ;1055
0000c8  d2b3              BCS      |L9.50|
0000ca  e8dff008          TBB      [pc,r8]               ;1055
0000ce  0bbc              DCB      0x0b,0xbc
0000d0  e6fdfcfb          DCB      0xe6,0xfd,0xfc,0xfb
0000d4  0a0a0a0a          DCB      0x0a,0x0a,0x0a,0x0a
0000d8  0a0afaf9          DCB      0x0a,0x0a,0xfa,0xf9
0000dc  f80a0a0a          DCB      0xf8,0x0a,0x0a,0x0a
0000e0  f700              DCB      0xf7,0x00
0000e2  e7a6              B        |L9.50|
0000e4  5d28              LDRB     r0,[r5,r4]            ;1059
0000e6  283f              CMP      r0,#0x3f              ;1059
0000e8  d1a3              BNE      |L9.50|
0000ea  f8da202c          LDR      r2,[r10,#0x2c]        ;1063  ; Para
0000ee  4656              MOV      r6,r10                ;1063
0000f0  1928              ADDS     r0,r5,r4              ;1063
0000f2  a1d6              ADR      r1,|L9.1100|
0000f4  f7fffffe          BL       __2sprintf
0000f8  1d64              ADDS     r4,r4,#5              ;1063
0000fa  b2a0              UXTH     r0,r4                 ;1064
0000fc  242c              MOVS     r4,#0x2c              ;1066
0000fe  542c              STRB     r4,[r5,r0]            ;1066
000100  1c40              ADDS     r0,r0,#1              ;1066
000102  6b72              LDR      r2,[r6,#0x34]         ;1067  ; Para
000104  b287              UXTH     r7,r0                 ;1066
000106  19e8              ADDS     r0,r5,r7              ;1067
000108  a1d2              ADR      r1,|L9.1108|
00010a  f7fffffe          BL       __2sprintf
00010e  1dbf              ADDS     r7,r7,#6              ;1067
000110  b2b8              UXTH     r0,r7                 ;1068
000112  542c              STRB     r4,[r5,r0]            ;1070
000114  1c40              ADDS     r0,r0,#1              ;1070
000116  6ab2              LDR      r2,[r6,#0x28]         ;1071  ; Para
000118  b287              UXTH     r7,r0                 ;1070
00011a  19e8              ADDS     r0,r5,r7              ;1071
00011c  a1cb              ADR      r1,|L9.1100|
00011e  f7fffffe          BL       __2sprintf
000122  1d7f              ADDS     r7,r7,#5              ;1071
000124  b2b8              UXTH     r0,r7                 ;1072
000126  542c              STRB     r4,[r5,r0]            ;1074
000128  1c40              ADDS     r0,r0,#1              ;1074
00012a  6b32              LDR      r2,[r6,#0x30]         ;1075  ; Para
00012c  b287              UXTH     r7,r0                 ;1074
00012e  19e8              ADDS     r0,r5,r7              ;1075
000130  a1c6              ADR      r1,|L9.1100|
000132  f7fffffe          BL       __2sprintf
000136  1d7f              ADDS     r7,r7,#5              ;1075
000138  b2b8              UXTH     r0,r7                 ;1076
00013a  542c              STRB     r4,[r5,r0]            ;1078
00013c  1c40              ADDS     r0,r0,#1              ;1078
00013e  6bb2              LDR      r2,[r6,#0x38]         ;1079  ; Para
000140  b287              UXTH     r7,r0                 ;1078
000142  19e8              ADDS     r0,r5,r7              ;1079
000144  a1c1              ADR      r1,|L9.1100|
000146  f7fffffe          BL       __2sprintf
00014a  1d7f              ADDS     r7,r7,#5              ;1079
00014c  b2b8              UXTH     r0,r7                 ;1080
00014e  542c              STRB     r4,[r5,r0]            ;1082
000150  1c40              ADDS     r0,r0,#1              ;1082
000152  6bf2              LDR      r2,[r6,#0x3c]         ;1083  ; Para
000154  b287              UXTH     r7,r0                 ;1082
000156  19e8              ADDS     r0,r5,r7              ;1083
000158  a1c0              ADR      r1,|L9.1116|
00015a  f7fffffe          BL       __2sprintf
00015e  1d3f              ADDS     r7,r7,#4              ;1083
000160  b2b8              UXTH     r0,r7                 ;1084
000162  542c              STRB     r4,[r5,r0]            ;1086
000164  1c40              ADDS     r0,r0,#1              ;1086
000166  6c32              LDR      r2,[r6,#0x40]         ;1087  ; Para
000168  b287              UXTH     r7,r0                 ;1086
00016a  19e8              ADDS     r0,r5,r7              ;1087
00016c  a1bb              ADR      r1,|L9.1116|
00016e  f7fffffe          BL       __2sprintf
000172  1d3f              ADDS     r7,r7,#4              ;1087
000174  b2b8              UXTH     r0,r7                 ;1088
000176  542c              STRB     r4,[r5,r0]            ;1090
000178  1c40              ADDS     r0,r0,#1              ;1090
00017a  b286              UXTH     r6,r0                 ;1090
00017c  48b9              LDR      r0,|L9.1124|
00017e  ed900a00          VLDR     s0,[r0,#0]            ;1091
000182  eddf0ab9          VLDR     s1,|L9.1128|
000186  19a8              ADDS     r0,r5,r6              ;1091
000188  a1b2              ADR      r1,|L9.1108|
00018a  ee200a20          VMUL.F32 s0,s0,s1              ;1091
00018e  eebd0ac0          VCVT.S32.F32 s0,s0                 ;1091
000192  ee102a10          VMOV     r2,s0                 ;1091
000196  f7fffffe          BL       __2sprintf
00019a  1db6              ADDS     r6,r6,#6              ;1091
00019c  b2b0              UXTH     r0,r6                 ;1092
00019e  49b3              LDR      r1,|L9.1132|
0001a0  542c              STRB     r4,[r5,r0]            ;1094
0001a2  1c40              ADDS     r0,r0,#1              ;1094
0001a4  b286              UXTH     r6,r0                 ;1094
0001a6  780a              LDRB     r2,[r1,#0]            ;1095  ; shorttime
0001a8  19a8              ADDS     r0,r5,r6              ;1095
0001aa  a1b1              ADR      r1,|L9.1136|
0001ac  f7fffffe          BL       __2sprintf
0001b0  1cf6              ADDS     r6,r6,#3              ;1095
0001b2  b2b0              UXTH     r0,r6                 ;1096
0001b4  49a2              LDR      r1,|L9.1088|
0001b6  542c              STRB     r4,[r5,r0]            ;1098
0001b8  1c40              ADDS     r0,r0,#1              ;1098
0001ba  b286              UXTH     r6,r0                 ;1098
0001bc  19a8              ADDS     r0,r5,r6              ;1099
0001be  3958              SUBS     r1,r1,#0x58           ;1099
0001c0  798a              LDRB     r2,[r1,#6]            ;1099  ; mainswitch
0001c2  a1ad              ADR      r1,|L9.1144|
0001c4  f7fffffe          BL       __2sprintf
0001c8  1c76              ADDS     r6,r6,#1              ;1099
0001ca  b2b0              UXTH     r0,r6                 ;1100
0001cc  49ab              LDR      r1,|L9.1148|
0001ce  542c              STRB     r4,[r5,r0]            ;1102
0001d0  1c40              ADDS     r0,r0,#1              ;1102
0001d2  b286              UXTH     r6,r0                 ;1102
0001d4  780a              LDRB     r2,[r1,#0]            ;1103  ; finishflag
0001d6  19a8              ADDS     r0,r5,r6              ;1103
0001d8  a1a7              ADR      r1,|L9.1144|
0001da  f7fffffe          BL       __2sprintf
0001de  1c76              ADDS     r6,r6,#1              ;1103
0001e0  b2b0              UXTH     r0,r6                 ;1104
0001e2  49a7              LDR      r1,|L9.1152|
0001e4  542c              STRB     r4,[r5,r0]            ;1106
0001e6  1c40              ADDS     r0,r0,#1              ;1106
0001e8  b286              UXTH     r6,r0                 ;1106
0001ea  780a              LDRB     r2,[r1,#0]            ;1107  ; lockflag
0001ec  19a8              ADDS     r0,r5,r6              ;1107
0001ee  a1a2              ADR      r1,|L9.1144|
0001f0  f7fffffe          BL       __2sprintf
0001f4  1c76              ADDS     r6,r6,#1              ;1107
0001f6  b2b0              UXTH     r0,r6                 ;1108
0001f8  49a2              LDR      r1,|L9.1156|
0001fa  542c              STRB     r4,[r5,r0]            ;1110
0001fc  1c40              ADDS     r0,r0,#1              ;1110
0001fe  b286              UXTH     r6,r0                 ;1110
000200  780a              LDRB     r2,[r1,#0]            ;1111  ; version
000202  19a8              ADDS     r0,r5,r6              ;1111
000204  a1a0              ADR      r1,|L9.1160|
000206  f7fffffe          BL       __2sprintf
00020a  1cb6              ADDS     r6,r6,#2              ;1111
00020c  b2b0              UXTH     r0,r6                 ;1112
00020e  499f              LDR      r1,|L9.1164|
000210  542c              STRB     r4,[r5,r0]            ;1114
000212  1c40              ADDS     r0,r0,#1              ;1114
000214  b286              UXTH     r6,r0                 ;1114
000216  f9b12000          LDRSH    r2,[r1,#0]            ;1115  ; Temperature
00021a  19a8              ADDS     r0,r5,r6              ;1115
00021c  a194              ADR      r1,|L9.1136|
00021e  f7fffffe          BL       __2sprintf
000222  1cf6              ADDS     r6,r6,#3              ;1115
000224  b2b0              UXTH     r0,r6                 ;1116
000226  499a              LDR      r1,|L9.1168|
000228  542c              STRB     r4,[r5,r0]            ;1118
00022a  1c40              ADDS     r0,r0,#1              ;1118
00022c  b284              UXTH     r4,r0                 ;1118
00022e  780a              LDRB     r2,[r1,#0]            ;1119  ; overflag
000230  1928              ADDS     r0,r5,r4              ;1119
000232  a191              ADR      r1,|L9.1144|
000234  f7fffffe          BL       __2sprintf
000238  1c64              ADDS     r4,r4,#1              ;1119
00023a  b2a0              UXTH     r0,r4                 ;1120
00023c  f805b000          STRB     r11,[r5,r0]           ;1133
000240  1c40              ADDS     r0,r0,#1              ;1133
000242  b280              UXTH     r0,r0                 ;1133
000244  e024              B        |L9.656|
000246  5d28              LDRB     r0,[r5,r4]            ;1143
000248  2201              MOVS     r2,#1                 ;1142
00024a  283f              CMP      r0,#0x3f              ;1143
00024c  d01a              BEQ      |L9.644|
00024e  2000              MOVS     r0,#0                 ;1153
000250  4601              MOV      r1,r0                 ;1153
                  |L9.594|
000252  5d2b              LDRB     r3,[r5,r4]            ;1155
000254  eb010181          ADD      r1,r1,r1,LSL #2       ;1155
000258  1c64              ADDS     r4,r4,#1              ;1155
00025a  1c40              ADDS     r0,r0,#1              ;1155
00025c  eb060141          ADD      r1,r6,r1,LSL #1       ;1155
000260  b2c0              UXTB     r0,r0                 ;1153
000262  4419              ADD      r1,r1,r3              ;1155
000264  b2a4              UXTH     r4,r4                 ;1155
000266  4290              CMP      r0,r2                 ;1153
000268  d3f3              BCC      |L9.594|
00026a  4e75              LDR      r6,|L9.1088|
00026c  3e58              SUBS     r6,r6,#0x58           ;1161
00026e  7171              STRB     r1,[r6,#5]            ;1161
000270  2100              MOVS     r1,#0                 ;1163
000272  2002              MOVS     r0,#2                 ;1163
000274  f7fffffe          BL       OnOff_GPOI_ResetSet
000278  2000              MOVS     r0,#0                 ;1164
00027a  71b0              STRB     r0,[r6,#6]            ;1164
00027c  2003              MOVS     r0,#3                 ;1165
00027e  7230              STRB     r0,[r6,#8]            ;1165
000280  7970              LDRB     r0,[r6,#5]            ;1166  ; MODE
000282  e228              B        |L9.1750|
                  |L9.644|
000284  496e              LDR      r1,|L9.1088|
000286  1928              ADDS     r0,r5,r4              ;1145
000288  3958              SUBS     r1,r1,#0x58           ;1145
00028a  794a              LDRB     r2,[r1,#5]            ;1145  ; MODE
00028c  a17a              ADR      r1,|L9.1144|
00028e  e02a              B        |L9.742|
                  |L9.656|
000290  f8059000          STRB     r9,[r5,r0]            ;1134
000294  1c40              ADDS     r0,r0,#1              ;1134
000296  b284              UXTH     r4,r0                 ;1134
000298  e3fd              B        |L9.2710|
00029a  5d29              LDRB     r1,[r5,r4]            ;1173
00029c  2201              MOVS     r2,#1                 ;1172
00029e  293f              CMP      r1,#0x3f              ;1173
                  |L9.672|
0002a0  d07e              BEQ      |L9.928|
;;;1176   				    currCharNum+=pntlen;
;;;1177   				    buf[currCharNum ++] = ChrEndS;
;;;1178   					
;;;1179   				}
;;;1180   				else
;;;1181   				{
;;;1182   					pntlen = 1;				
;;;1183   					for(i=0,temp1=0;i<pntlen;i++)
0002a2  2100              MOVS     r1,#0
0002a4  4608              MOV      r0,r1
                  |L9.678|
;;;1184   					{
;;;1185   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
0002a6  5d2b              LDRB     r3,[r5,r4]
0002a8  1c64              ADDS     r4,r4,#1
0002aa  eb000080          ADD      r0,r0,r0,LSL #2
0002ae  eb060040          ADD      r0,r6,r0,LSL #1
0002b2  1c49              ADDS     r1,r1,#1
0002b4  4418              ADD      r0,r0,r3
0002b6  b2a4              UXTH     r4,r4
0002b8  b2c9              UXTB     r1,r1                 ;1183
0002ba  e006              B        |L9.714|
0002bc  e3ed              B        |L9.2714|
0002be  e3ed              B        |L9.2716|
0002c0  e3ed              B        |L9.2718|
0002c2  e3ed              B        |L9.2720|
0002c4  e3ed              B        |L9.2722|
0002c6  e209              B        |L9.1756|
0002c8  e01c              B        |L9.772|
                  |L9.714|
0002ca  4291              CMP      r1,r2                 ;1183
0002cc  d3eb              BCC      |L9.678|
;;;1186   					}		                   
;;;1187   					if(temp1>1)
0002ce  2801              CMP      r0,#1
0002d0  d90d              BLS      |L9.750|
                  |L9.722|
;;;1188   					{
;;;1189   						return SetErr_ACK(buf, addr ,PARA_ERR);
0002d2  2201              MOVS     r2,#1
                  |L9.724|
;;;1190   					}
;;;1191   //					MODE=temp1;
;;;1192   					
;;;1193   					
;;;1194   					mainswitch = temp1;
;;;1195   //						Para.CSET_Voltage = 5000;
;;;1196   //						Para.CSET_Current = 1000;
;;;1197   					
;;;1198   						
;;;1199   					MODE_ONOFF(mainswitch);
;;;1200   	//				Change_LM_Val(LM_S_Vale);
;;;1201   					buf[currCharNum++] = ChrEndR;
;;;1202   		        }
;;;1203   				break;
;;;1204   				case 3:
;;;1205   				pntlen = 1;
;;;1206   				if(buf[currCharNum]=='?')
;;;1207   				{
;;;1208   					  sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1209   				    currCharNum+=pntlen;
;;;1210   				    buf[currCharNum ++] = ChrEndS;
;;;1211   					
;;;1212   				}
;;;1213   				else
;;;1214   				{
;;;1215   					if(currCharNum == 0x0b)
;;;1216   					{						
;;;1217   						for(i=0,temp1=0;i<5;i++)
;;;1218   						{
;;;1219   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1220   						}
;;;1221   					}		
;;;1222   					Para.IR_Start_C = temp1;//起始电流
;;;1223   					temp1 = 0;
;;;1224   					
;;;1225   					if(buf[currCharNum++] == ',')
;;;1226   					{
;;;1227   						for(i=0,temp1=0;i<5;i++)
;;;1228   						{
;;;1229   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1230   						}
;;;1231   					}	
;;;1232   					Para.IR_Step_C = temp1;//步进电流
;;;1233   					temp1 = 0;
;;;1234   					 
;;;1235   					if(buf[currCharNum++] == ',')
;;;1236   					{
;;;1237   						for(i=0,temp1=0;i<5;i++)
;;;1238   						{
;;;1239   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1240   						}
;;;1241   					}	
;;;1242   					Para.IR_Threshold_V = temp1;//门槛电压
;;;1243   					temp1 = 0;
;;;1244   					
;;;1245   					if(buf[currCharNum++] == ',')
;;;1246   					{
;;;1247   						for(i=0,temp1=0;i<3;i++)
;;;1248   						{
;;;1249   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1250   						}
;;;1251   					}	
;;;1252   					Para.IR_Step_Time = temp1;//步进时间
;;;1253   					temp1 = 0;
;;;1254   					
;;;1255   					if(buf[currCharNum++] == ',')
;;;1256   					{
;;;1257   						for(i=0,temp1=0;i<6;i++)
;;;1258   						{
;;;1259   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1260   						}
;;;1261   					}	
;;;1262   					Para.POWER_OutPut_V = temp1;//电源电压
;;;1263   					temp1 = 0;
;;;1264   					
;;;1265   					if(buf[currCharNum++] == ',')
;;;1266   					{
;;;1267   						for(i=0,temp1=0;i<5;i++)
;;;1268   						{
;;;1269   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1270   						}
;;;1271   					}	
;;;1272   					Para.POWER_Limit_C = temp1;//电源电流
;;;1273   					temp1 = 0;
;;;1274   					
;;;1275   					if(buf[currCharNum++] == ',')
;;;1276   					{
;;;1277   						for(i=0,temp1=0;i<5;i++)
;;;1278   						{
;;;1279   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1280   						}
;;;1281   					}	
;;;1282   					Para.POWER_Cutoff_C = temp1;//设置充电截止电流
;;;1283   					temp1 = 0;
;;;1284   					
;;;1285   					if(buf[currCharNum++] == ',')
;;;1286   					{
;;;1287   						for(i=0,temp1=0;i<5;i++)
;;;1288   						{
;;;1289   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1290   						}
;;;1291   					}	
;;;1292   					Para.LOAD_V = temp1;//负载电压
;;;1293   					temp1 = 0;
;;;1294   					
;;;1295   					if(buf[currCharNum++] == ',')
;;;1296   					{
;;;1297   						for(i=0,temp1=0;i<5;i++)
;;;1298   						{
;;;1299   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1300   						}
;;;1301   					}	
;;;1302   					Para.LOAD_C = temp1;//负载电流
;;;1303   					temp1 = 0;
;;;1304   					
;;;1305   					if(buf[currCharNum++] == ',')
;;;1306   					{
;;;1307   						for(i=0,temp1=0;i<5;i++)
;;;1308   						{
;;;1309   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1310   						}
;;;1311   					}	
;;;1312   					Para.LOAD_Cutoff_V = temp1;//设置负载截止电压
;;;1313   					temp1 = 0;
;;;1314   					
;;;1315   					if(buf[currCharNum++] == ',')
;;;1316   					{
;;;1317   						for(i=0,temp1=0;i<5;i++)
;;;1318   						{
;;;1319   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1320   						}
;;;1321   					}	
;;;1322   					Para.CDC_OutPut_V = temp1;//设置容量测试充电电压
;;;1323   					temp1 = 0;
;;;1324   					
;;;1325   					if(buf[currCharNum++] == ',')
;;;1326   					{
;;;1327   						for(i=0,temp1=0;i<5;i++)
;;;1328   						{
;;;1329   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1330   						}
;;;1331   					}	
;;;1332   					Para.CDC_Limit_C = temp1;//设置容量测试充电限制电流
;;;1333   					temp1 = 0;
;;;1334   					
;;;1335   					if(buf[currCharNum++] == ',')
;;;1336   					{
;;;1337   						for(i=0,temp1=0;i<5;i++)
;;;1338   						{
;;;1339   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1340   						}
;;;1341   					}	
;;;1342   					Para.CDC_Ccutoff_V = temp1;//设置容量测试充电截止电压
;;;1343   					temp1 = 0;
;;;1344   					
;;;1345   					if(buf[currCharNum++] == ',')
;;;1346   					{
;;;1347   						for(i=0,temp1=0;i<5;i++)
;;;1348   						{
;;;1349   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1350   						}
;;;1351   					}	
;;;1352   					Para.CDC_Ccutoff_C = temp1;//设置容量测试充电截止电流
;;;1353   					temp1 = 0;
;;;1354   					
;;;1355   					if(buf[currCharNum++] == ',')
;;;1356   					{
;;;1357   						for(i=0,temp1=0;i<5;i++)
;;;1358   						{
;;;1359   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1360   						}
;;;1361   					}	
;;;1362   					Para.CDC_Load_C = temp1;//设置容量测试放电电流
;;;1363   					temp1 = 0;
;;;1364   					
;;;1365   					if(buf[currCharNum++] == ',')
;;;1366   					{
;;;1367   						for(i=0,temp1=0;i<5;i++)
;;;1368   						{
;;;1369   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1370   						}
;;;1371   					}	
;;;1372   					Para.CDC_Dcutoff_V = temp1;//设置容量测试放电截止电压
;;;1373   					temp1 = 0;
;;;1374   					
;;;1375   					if(buf[currCharNum++] == ',')
;;;1376   					{
;;;1377   						for(i=0,temp1=0;i<3;i++)
;;;1378   						{
;;;1379   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1380   						}
;;;1381   					}	
;;;1382   					Para.CDC_Cycle_Time = temp1;//循环次数
;;;1383   					temp1 = 0;
;;;1384   					
;;;1385   					if(buf[currCharNum++] == ',')
;;;1386   					{
;;;1387   						for(i=0,temp1=0;i<3;i++)
;;;1388   						{
;;;1389   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1390   						}
;;;1391   					}	
;;;1392   					if(MODE == 0)
;;;1393   					{
;;;1394   						Para.CLOAD_MODE = temp1;//负载模式
;;;1395   					}
;;;1396   					temp1 = 0;
;;;1397   //					MODE_PARASET(MODE);
;;;1398   					
;;;1399   					if(buf[currCharNum++] == ',')
;;;1400   					{
;;;1401   						for(i=0,temp1=0;i<3;i++)
;;;1402   						{
;;;1403   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1404   						}
;;;1405   					}	
;;;1406   					Rraly = temp1;//内阻档位
;;;1407   					temp1 = 0;
;;;1408   					
;;;1409   					if(buf[currCharNum++] == ',')
;;;1410   					{
;;;1411   						for(i=0,temp1=0;i<3;i++)
;;;1412   						{
;;;1413   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1414   						}
;;;1415   					}	
;;;1416   					Para.ACT_DELAY = temp1;//激活延时
;;;1417   					temp1 = 0;
;;;1418   					
;;;1419   					if(buf[currCharNum++] == ',')
;;;1420   					{
;;;1421   						for(i=0,temp1=0;i<6;i++)
;;;1422   						{
;;;1423   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1424   						}
;;;1425   					}	
;;;1426   					Para.LOAD_P = temp1*10;//负载功率
;;;1427   					temp1 = 0;
;;;1428   					
;;;1429   					MODE_PARASET(MODE);
;;;1430   					
;;;1431   					 buf[currCharNum++] = ChrEndR;
;;;1432   		        }
;;;1433   				break;
;;;1434   				case 4:
;;;1435   				pntlen = 1;
;;;1436   				if(buf[currCharNum]=='?')
;;;1437   				{
;;;1438   					  sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1439   				    currCharNum+=pntlen;
;;;1440   				    buf[currCharNum ++] = ChrEndS;
;;;1441   					
;;;1442   				}
;;;1443   				else
;;;1444   				{
;;;1445   					if(currCharNum == 0x0b)
;;;1446   					{						
;;;1447   						for(i=0,temp1=0;i<2;i++)
;;;1448   						{
;;;1449   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1450   						}
;;;1451   					}
;;;1452   					MODE = temp1;//项目
;;;1453   					temp1 = 0;
;;;1454   					
;;;1455   					if(MODE == 0)
;;;1456   					{
;;;1457   						if(buf[currCharNum++] == ',')
;;;1458   						{
;;;1459   							for(i=0,temp1=0;i<6;i++)
;;;1460   							{
;;;1461   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1462   							}
;;;1463   						}	
;;;1464   						
;;;1465   						temp1 = 0;
;;;1466   						
;;;1467   						if(buf[currCharNum++] == ',')
;;;1468   						{
;;;1469   							for(i=0,temp1=0;i<5;i++)
;;;1470   							{
;;;1471   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1472   							}
;;;1473   						}	
;;;1474   						Para.CSET_Current_Laod = temp1;//负载电流
;;;1475   						temp1 = 0;
;;;1476   						
;;;1477   	
;;;1478   						if(Para.CSET_Current_Laod > 15000)
;;;1479   						{
;;;1480   							LOAD_I_SW = 1;
;;;1481   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1482   						}else{
;;;1483   							LOAD_I_SW = 0;
;;;1484   							GPIO_SetBits(GPIOC,GPIO_Pin_11);//电流测量为低档位
;;;1485   						}
;;;1486   						if(buf[currCharNum++] == ',')
;;;1487   						{
;;;1488   							for(i=0,temp1=0;i<1;i++)
;;;1489   							{
;;;1490   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1491   							}
;;;1492   						}
;;;1493   						mainswitch = temp1;//开关
;;;1494   						if(mainswitch == 0)
;;;1495   						{
;;;1496   							LOAD_I_SW = 1;
;;;1497   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1498   						}
;;;1499   					}else if(MODE == 1){
;;;1500   						if(buf[currCharNum++] == ',')
;;;1501   						{
;;;1502   							for(i=0,temp1=0;i<6;i++)
;;;1503   							{
;;;1504   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1505   							}
;;;1506   						}	
;;;1507   						Para.CDC_OutPut_V = temp1;//电源电压
;;;1508   						temp1 = 0;
;;;1509   						
;;;1510   						if(buf[currCharNum++] == ',')
;;;1511   						{
;;;1512   							for(i=0,temp1=0;i<5;i++)
;;;1513   							{
;;;1514   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1515   							}
;;;1516   						}	
;;;1517   						Para.CDC_Limit_C = temp1;//电源电流
;;;1518   						temp1 = 0;
;;;1519   						
;;;1520   						if(buf[currCharNum++] == ',')
;;;1521   						{
;;;1522   							for(i=0,temp1=0;i<1;i++)
;;;1523   							{
;;;1524   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1525   							}
;;;1526   						}
;;;1527   						mainswitch = temp1;//开关
;;;1528   					}else if(MODE == 2){
;;;1529   						LOAD_I_SW = 1;
;;;1530   						GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1531   						if(buf[currCharNum++] == ',')
;;;1532   						{
;;;1533   							for(i=0,temp1=0;i<6;i++)
;;;1534   							{
;;;1535   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1536   							}
;;;1537   						}	
;;;1538   						Para.IR_Start_C = temp1;//起始电流
;;;1539   						temp1 = 0;
;;;1540   						
;;;1541   						if(buf[currCharNum++] == ',')
;;;1542   						{
;;;1543   							for(i=0,temp1=0;i<5;i++)
;;;1544   							{
;;;1545   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1546   							}
;;;1547   						}	
;;;1548   						Para.IR_Step_C = temp1;//步进电流
;;;1549   						temp1 = 0;
;;;1550   						
;;;1551   						if(buf[currCharNum++] == ',')
;;;1552   						{
;;;1553   							for(i=0,temp1=0;i<1;i++)
;;;1554   							{
;;;1555   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1556   							}
;;;1557   						}
;;;1558   						mainswitch = temp1;//开关
;;;1559   						
;;;1560   						if(mainswitch == 1)
;;;1561   						{
;;;1562   							finishflag = 0;
;;;1563   						}
;;;1564   					}else if(MODE == 3){
;;;1565   						if(buf[currCharNum++] == ',')
;;;1566   						{
;;;1567   							for(i=0,temp1=0;i<6;i++)
;;;1568   							{
;;;1569   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1570   							}
;;;1571   						}	
;;;1572   						Para.CDC_OutPut_V = temp1;//电源电压
;;;1573   						temp1 = 0;
;;;1574   						
;;;1575   						
;;;1576   						if(buf[currCharNum++] == ',')
;;;1577   						{
;;;1578   							for(i=0,temp1=0;i<5;i++)
;;;1579   							{
;;;1580   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1581   							}
;;;1582   						}	
;;;1583   						Para.CDC_Limit_C = temp1;//电源电流
;;;1584   						temp1 = 0;
;;;1585   						
;;;1586   						if(buf[currCharNum++] == ',')
;;;1587   						{
;;;1588   							for(i=0,temp1=0;i<1;i++)
;;;1589   							{
;;;1590   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1591   							}
;;;1592   						}
;;;1593   						mainswitch = temp1;//开关
;;;1594   						
;;;1595   						
;;;1596   					}else if(MODE == 4){
;;;1597   						if(buf[currCharNum++] == ',')
;;;1598   						{
;;;1599   							for(i=0,temp1=0;i<6;i++)
;;;1600   							{
;;;1601   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1602   							}
;;;1603   						}	
;;;1604   						
;;;1605   						temp1 = 0;
;;;1606   						
;;;1607   						if(buf[currCharNum++] == ',')
;;;1608   						{
;;;1609   							for(i=0,temp1=0;i<5;i++)
;;;1610   							{
;;;1611   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1612   							}
;;;1613   						}	
;;;1614   						Para.CSET_Current_Laod = temp1;//负载电流
;;;1615   						temp1 = 0;
;;;1616   						
;;;1617   	
;;;1618   						if(Para.CSET_Current_Laod > 15000)
;;;1619   						{
;;;1620   							LOAD_I_SW = 1;
;;;1621   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1622   						}else{
;;;1623   							LOAD_I_SW = 0;
;;;1624   							GPIO_SetBits(GPIOC,GPIO_Pin_11);//电流测量为低档位
;;;1625   						}
;;;1626   						if(buf[currCharNum++] == ',')
;;;1627   						{
;;;1628   							for(i=0,temp1=0;i<1;i++)
;;;1629   							{
;;;1630   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1631   							}
;;;1632   						}
;;;1633   						mainswitch = temp1;//开关
;;;1634   						if(mainswitch == 0)
;;;1635   						{
;;;1636   							LOAD_I_SW = 1;
;;;1637   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1638   						}
;;;1639   					}else if(MODE == 5){
;;;1640   						if(buf[currCharNum++] == ',')
;;;1641   						{
;;;1642   							for(i=0,temp1=0;i<6;i++)
;;;1643   							{
;;;1644   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1645   							}
;;;1646   						}	
;;;1647   						temp1 = 0;
;;;1648   						
;;;1649   						if(buf[currCharNum++] == ',')
;;;1650   						{
;;;1651   							for(i=0,temp1=0;i<5;i++)
;;;1652   							{
;;;1653   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1654   							}
;;;1655   						}	
;;;1656   						temp1 = 0;
;;;1657   						
;;;1658   						if(buf[currCharNum++] == ',')
;;;1659   						{
;;;1660   							for(i=0,temp1=0;i<1;i++)
;;;1661   							{
;;;1662   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1663   							}
;;;1664   						}
;;;1665   						mainswitch = temp1;//开关
;;;1666   						if(mainswitch == 0)
;;;1667   						{
;;;1668   							mainswitch = 0;
;;;1669   						}
;;;1670   					}else if(MODE == 6){
;;;1671   						if(buf[currCharNum++] == ',')
;;;1672   						{
;;;1673   							for(i=0,temp1=0;i<6;i++)
;;;1674   							{
;;;1675   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1676   							}
;;;1677   						}	
;;;1678   						temp1 = 0;
;;;1679   						
;;;1680   						if(buf[currCharNum++] == ',')
;;;1681   						{
;;;1682   							for(i=0,temp1=0;i<5;i++)
;;;1683   							{
;;;1684   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1685   							}
;;;1686   						}	
;;;1687   						temp1 = 0;
;;;1688   						
;;;1689   						if(buf[currCharNum++] == ',')
;;;1690   						{
;;;1691   							for(i=0,temp1=0;i<1;i++)
;;;1692   							{
;;;1693   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1694   							}
;;;1695   						}
;;;1696   						mainswitch = temp1;//开关
;;;1697   					}
;;;1698   					
;;;1699   					temp1 = 0;
;;;1700   //					MODE_PARASET(MODE);
;;;1701   					Off_GPOI_ResetSet();
;;;1702   					LIST_ONOFF(mainswitch);
;;;1703   					buf[currCharNum++] = ChrEndR;
;;;1704   		        }
;;;1705   				break;
;;;1706   				case 12://电压校准
;;;1707   				{
;;;1708   					pntlen = 9;
;;;1709   					if(buf[currCharNum]=='?')
;;;1710   					{
;;;1711   						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1712   						sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1713   						currCharNum+=pntlen;
;;;1714   						buf[currCharNum++ ] = ChrEndS;
;;;1715   					}
;;;1716   					else
;;;1717   					{
;;;1718   						tmpFg = 1;
;;;1719   						for(i=0;i<pntlen;i++)
;;;1720   						{
;;;1721   						   if(i==0||i==5)
;;;1722   							  continue;
;;;1723   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1724   						   {
;;;1725   							  tmpFg = (tmpFg&0x01);
;;;1726   						   }
;;;1727   						   else
;;;1728   						   {
;;;1729   							  tmpFg = 0;
;;;1730   						   }
;;;1731   						}
;;;1732   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1733   						{
;;;1734   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1735   							
;;;1736   						}
;;;1737   						temp1=0;
;;;1738   						for(i=0;i<pntlen;i++)
;;;1739   						{
;;;1740   						   if(i==0)
;;;1741   						   {
;;;1742   							   fsingal = 10*(buf[currCharNum++]-0x30);
;;;1743   							   continue; 
;;;1744   						   }else if(i==1)
;;;1745   						   {
;;;1746   							  fsingal = fsingal+(buf[currCharNum++]-0x30);
;;;1747   							  continue; 
;;;1748   						   } 
;;;1749   						   else if(i==5)
;;;1750   						   {
;;;1751   							   currCharNum++;
;;;1752   							   continue; 
;;;1753   						   }
;;;1754   						   else									 
;;;1755   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1756   						}	
;;;1757   						CalHandle(0,fsingal,temp1);
;;;1758   						
;;;1759   					}
;;;1760   				}break;
;;;1761   				case 5:
;;;1762   				pntlen = 1;
;;;1763   				if(buf[currCharNum]=='?')
;;;1764   				{
;;;1765   					sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1766   				    currCharNum+=pntlen;
;;;1767   				    buf[currCharNum ++] = ChrEndS;
;;;1768   					
;;;1769   				}
;;;1770   				else
;;;1771   				{
;;;1772   					pntlen = 1;				
;;;1773   					for(i=0,temp1=0;i<pntlen;i++)
;;;1774   					{
;;;1775   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1776   					}		                   
;;;1777   					if(temp1>1)
;;;1778   					{
;;;1779   						return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1780   					}
;;;1781   //					MODE=temp1;
;;;1782   					
;;;1783   					
;;;1784   					overflag = temp1;
;;;1785   //						Para.CSET_Voltage = 5000;
;;;1786   //						Para.CSET_Current = 1000;
;;;1787   					
;;;1788   						
;;;1789   //					MODE_ONOFF(mainswitch);
;;;1790   	//				Change_LM_Val(LM_S_Vale);
;;;1791   					buf[currCharNum++] = ChrEndR;
;;;1792   		        }
;;;1793   				break;
;;;1794   				case 13://电流校准
;;;1795   				{
;;;1796   					pntlen = 8;
;;;1797   					if(buf[currCharNum]=='?')
;;;1798   					{
;;;1799   //						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1800   //									sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1801   //						currCharNum+=pntlen;
;;;1802   //						buf[currCharNum++ ] = ChrEndS;
;;;1803   					}
;;;1804   					else
;;;1805   					{
;;;1806   						tmpFg = 1;
;;;1807   						for(i=0;i<pntlen;i++)
;;;1808   						{
;;;1809   						   if(i==0||i==4)
;;;1810   							  continue;
;;;1811   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1812   						   {
;;;1813   							  tmpFg = (tmpFg&0x01);
;;;1814   						   }
;;;1815   						   else
;;;1816   						   {
;;;1817   							  tmpFg = 0;
;;;1818   						   }
;;;1819   						}
;;;1820   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1821   						{
;;;1822   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1823   							
;;;1824   						}
;;;1825   						temp1=0;
;;;1826   						for(i=0;i<pntlen;i++)
;;;1827   						{
;;;1828   						   if(i==0)
;;;1829   						   {
;;;1830   							   fsingal = buf[currCharNum++]-0x30;
;;;1831   							   continue; 
;;;1832   						   } 
;;;1833   						   else if(i==4)
;;;1834   						   {
;;;1835   							   currCharNum++;
;;;1836   							   continue; 
;;;1837   						   }
;;;1838   						   else									 
;;;1839   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1840   						}	
;;;1841   						CalHandle(1,fsingal,temp1);
;;;1842   						
;;;1843   					}
;;;1844   				}break;
;;;1845   				case 14://电阻校准
;;;1846   				{
;;;1847   					pntlen = 6;
;;;1848   					if(buf[currCharNum]=='?')
;;;1849   					{
;;;1850   						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1851   									sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1852   						currCharNum+=pntlen;
;;;1853   						buf[currCharNum++ ] = ChrEndS;
;;;1854   					}
;;;1855   					else
;;;1856   					{
;;;1857   						tmpFg = 1;
;;;1858   						for(i=0;i<pntlen;i++)
;;;1859   						{
;;;1860   						   if(i==0||i==4)
;;;1861   							  continue;
;;;1862   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1863   						   {
;;;1864   							  tmpFg = (tmpFg&0x01);
;;;1865   						   }
;;;1866   						   else
;;;1867   						   {
;;;1868   							  tmpFg = 0;
;;;1869   						   }
;;;1870   						}
;;;1871   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1872   						{
;;;1873   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1874   							
;;;1875   						}
;;;1876   						temp1=0;
;;;1877   						for(i=0;i<pntlen;i++)
;;;1878   						{
;;;1879   						   if(i==0)
;;;1880   						   {
;;;1881   							   fsingal = buf[currCharNum++]-0x30;
;;;1882   							   continue; 
;;;1883   						   } 
;;;1884   //						   else if(i==4)
;;;1885   //						   {
;;;1886   //							   currCharNum++;
;;;1887   //							   continue; 
;;;1888   //						   }
;;;1889   //						   else									 
;;;1890   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1891   						}
;;;1892   						CalHandle(2,fsingal,temp1);
;;;1893   						
;;;1894   					}
;;;1895   				}break;
;;;1896   				case 18:
;;;1897   				{
;;;1898   					if(buf[currCharNum]=='?')
;;;1899   					{
;;;1900   //						sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1901   //						currCharNum+=pntlen;
;;;1902   //						buf[currCharNum ++] = ChrEndS;
;;;1903   						
;;;1904   					}
;;;1905   					else
;;;1906   					{
;;;1907   						pntlen = 1;				
;;;1908   						for(i=0,temp1=0;i<pntlen;i++)
;;;1909   						{
;;;1910   							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1911   						}		                   
;;;1912   						if(temp1>1)
;;;1913   						{
;;;1914   							return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1915   						}
;;;1916   	//					MODE=temp1;
;;;1917   						
;;;1918   						jumpflag = temp1;
;;;1919   						bootflag=1;
;;;1920   						Write_Boot_Flag();
;;;1921   //						if(temp1 == 1)
;;;1922   //						{
;;;1923   //							JumpBoot(55);
;;;1924   //						}
;;;1925   						buf[currCharNum++] = ChrEndR;
;;;1926   					}
;;;1927   				}break;
;;;1928   //				case 15:
;;;1929   //				{
;;;1930   //					pntlen = 1;
;;;1931   //					if(buf[currCharNum]=='?')
;;;1932   //					{
;;;1933   //						sprintf(&buf[currCharNum],"%1d",Gmode_Vale);
;;;1934   //						currCharNum+=pntlen;
;;;1935   //						buf[currCharNum] = ChrEndR;
;;;1936   //						currCharNum++;
;;;1937   //	//				    buf[currCharNum ++] = ChrEndS;
;;;1938   //						
;;;1939   //					}
;;;1940   //					else
;;;1941   //					{
;;;1942   //						tmpFg = 1;
;;;1943   //						for(i=0;i<pntlen;i++)
;;;1944   //						{
;;;1945   //						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1946   //						   {
;;;1947   //							  tmpFg = (tmpFg&0x01);
;;;1948   //						   }
;;;1949   //						   else
;;;1950   //						   {
;;;1951   //							  tmpFg = 0;
;;;1952   //						   }
;;;1953   //						}
;;;1954   //						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1955   //						{
;;;1956   //							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1957   //							
;;;1958   //						}					
;;;1959   //						for(i=0,temp1=0;i<pntlen;i++)
;;;1960   //						{
;;;1961   //							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1962   //						}		                   
;;;1963   //						if(temp1 >Mode_H)
;;;1964   //						 {
;;;1965   //							 return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1966   //							 
;;;1967   //						 }
;;;1968   //						 if(H_L == 1)
;;;1969   //						 {
;;;1970   //							CalHandle(3,1,temp1);
;;;1971   //						 }else{
;;;1972   //							 CalHandle(3,0,temp1);
;;;1973   //						 }
;;;1974   //						 
;;;1975   ////								 Mode=temp1;
;;;1976   ////								Change_MODE_Val(Mode);
;;;1977   ////						 buf[currCharNum++] = ChrEndS;
;;;1978   //					}
;;;1979   //					break;
;;;1980   //				}break;
;;;1981   //				case 16:
;;;1982   //				{
;;;1983   //					pntlen = 3;
;;;1984   //					if(buf[currCharNum]=='?')
;;;1985   //					{
;;;1986   //						sprintf(&buf[currCharNum],"%1d",Gmode_Vale);
;;;1987   //						currCharNum+=pntlen;
;;;1988   //						buf[currCharNum] = ChrEndR;
;;;1989   //						currCharNum++;
;;;1990   //	//				    buf[currCharNum ++] = ChrEndS;
;;;1991   //						
;;;1992   //					}
;;;1993   //					else
;;;1994   //					{
;;;1995   //						tmpFg = 1;
;;;1996   //						for(i=0;i<pntlen;i++)
;;;1997   //						{
;;;1998   //						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1999   //						   {
;;;2000   //							  tmpFg = (tmpFg&0x01);
;;;2001   //						   }
;;;2002   //						   else
;;;2003   //						   {
;;;2004   //							  tmpFg = 0;
;;;2005   //						   }
;;;2006   //						}
;;;2007   //						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;2008   //						{
;;;2009   //							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;2010   //							
;;;2011   //						}					
;;;2012   //						for(i=0,temp1=0;i<pntlen;i++)
;;;2013   //						{
;;;2014   //							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;2015   //						}		                   
;;;2016   //						 overflag = temp1;
;;;2017   //						 
;;;2018   ////								 Mode=temp1;
;;;2019   ////								Change_MODE_Val(Mode);
;;;2020   ////						 buf[currCharNum++] = ChrEndS;
;;;2021   //					}
;;;2022   //					break;
;;;2023   //				}break;
;;;2024   //				case 17:
;;;2025   //				{
;;;2026   //					pntlen = 2;
;;;2027   //					if(buf[currCharNum]=='?')
;;;2028   //					{
;;;2029   ////						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;2030   //									sprintf(&buf[currCharNum],"%02d",(int)temperature);
;;;2031   //						currCharNum+=pntlen;
;;;2032   //						buf[currCharNum++ ] = ChrEndR;
;;;2033   //						buf[currCharNum++ ] = ChrEndS;
;;;2034   //					}
;;;2035   //				}break;
;;;2036   			default:    //ERR
;;;2037              		 return SetErr_ACK(buf, addr ,CMD_ERR);
;;;2038   	 			  
;;;2039   		  }
;;;2040   		  break;
;;;2041   		}
;;;2042   		
;;;2043   	}
;;;2044   	if(j>=CmdNumb)
;;;2045   	{
;;;2046   		return SetErr_ACK(buf, addr ,CMD_ERR);			  
0002d4  4628              MOV      r0,r5
0002d6  9932              LDR      r1,[sp,#0xc8]
0002d8  f7fffffe          BL       SetErr_ACK
;;;2047   	}
;;;2048   	return currCharNum+1;
;;;2049   }
0002dc  b033              ADD      sp,sp,#0xcc
0002de  ecbd8b02          VPOP     {d8}
0002e2  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.742|
0002e6  f7fffffe          BL       __2sprintf
0002ea  1c64              ADDS     r4,r4,#1              ;1145
0002ec  e3fe              B        |L9.2796|
                  |L9.750|
0002ee  4954              LDR      r1,|L9.1088|
0002f0  3958              SUBS     r1,r1,#0x58           ;1194
0002f2  7188              STRB     r0,[r1,#6]            ;1194
0002f4  7988              LDRB     r0,[r1,#6]            ;1199  ; mainswitch
0002f6  f7fffffe          BL       MODE_ONOFF
                  |L9.762|
0002fa  f805b004          STRB     r11,[r5,r4]           ;1168
0002fe  1c64              ADDS     r4,r4,#1              ;1168
000300  b2a4              UXTH     r4,r4                 ;1168
000302  e3f4              B        |L9.2798|
                  |L9.772|
000304  5d29              LDRB     r1,[r5,r4]            ;1206
000306  293f              CMP      r1,#0x3f              ;1206
000308  d0ca              BEQ      |L9.672|
00030a  2c0b              CMP      r4,#0xb               ;1215
00030c  d10d              BNE      |L9.810|
00030e  2000              MOVS     r0,#0                 ;1217
000310  4607              MOV      r7,r0                 ;1217
                  |L9.786|
000312  5d29              LDRB     r1,[r5,r4]            ;1219
000314  eb070287          ADD      r2,r7,r7,LSL #2       ;1219
000318  eb060242          ADD      r2,r6,r2,LSL #1       ;1219
00031c  1c64              ADDS     r4,r4,#1              ;1219
00031e  1c40              ADDS     r0,r0,#1              ;1219
000320  188f              ADDS     r7,r1,r2              ;1219
000322  b2c0              UXTB     r0,r0                 ;1217
000324  b2a4              UXTH     r4,r4                 ;1219
000326  2805              CMP      r0,#5                 ;1217
000328  d3f3              BCC      |L9.786|
                  |L9.810|
00032a  4651              MOV      r1,r10                ;1222
00032c  f8ca7044          STR      r7,[r10,#0x44]        ;1222  ; Para
000330  5d2a              LDRB     r2,[r5,r4]            ;1225
000332  1c64              ADDS     r4,r4,#1              ;1225
000334  2300              MOVS     r3,#0                 ;1223
000336  b2a0              UXTH     r0,r4                 ;1225
000338  2a2c              CMP      r2,#0x2c              ;1225
00033a  d10c              BNE      |L9.854|
00033c  2200              MOVS     r2,#0                 ;1227
                  |L9.830|
00033e  5c2c              LDRB     r4,[r5,r0]            ;1229
000340  eb030383          ADD      r3,r3,r3,LSL #2       ;1229
000344  1c40              ADDS     r0,r0,#1              ;1229
000346  1c52              ADDS     r2,r2,#1              ;1229
000348  eb060343          ADD      r3,r6,r3,LSL #1       ;1229
00034c  b2d2              UXTB     r2,r2                 ;1227
00034e  4423              ADD      r3,r3,r4              ;1229
000350  b280              UXTH     r0,r0                 ;1229
000352  2a05              CMP      r2,#5                 ;1227
000354  d3f3              BCC      |L9.830|
                  |L9.854|
000356  f8a13048          STRH     r3,[r1,#0x48]         ;1232
00035a  5c2a              LDRB     r2,[r5,r0]            ;1235
00035c  1c40              ADDS     r0,r0,#1              ;1235
00035e  2300              MOVS     r3,#0                 ;1233
000360  b280              UXTH     r0,r0                 ;1235
000362  2a2c              CMP      r2,#0x2c              ;1235
000364  d10c              BNE      |L9.896|
000366  2200              MOVS     r2,#0                 ;1237
                  |L9.872|
000368  5c2c              LDRB     r4,[r5,r0]            ;1239
00036a  eb030383          ADD      r3,r3,r3,LSL #2       ;1239
00036e  1c40              ADDS     r0,r0,#1              ;1239
000370  1c52              ADDS     r2,r2,#1              ;1239
000372  eb060343          ADD      r3,r6,r3,LSL #1       ;1239
000376  b2d2              UXTB     r2,r2                 ;1237
000378  4423              ADD      r3,r3,r4              ;1239
00037a  b280              UXTH     r0,r0                 ;1239
00037c  2a05              CMP      r2,#5                 ;1237
00037e  d3f3              BCC      |L9.872|
                  |L9.896|
000380  64cb              STR      r3,[r1,#0x4c]         ;1242  ; Para
000382  5c2a              LDRB     r2,[r5,r0]            ;1245
000384  1c40              ADDS     r0,r0,#1              ;1245
000386  2300              MOVS     r3,#0                 ;1243
000388  b280              UXTH     r0,r0                 ;1245
00038a  2a2c              CMP      r2,#0x2c              ;1245
00038c  d10e              BNE      |L9.940|
00038e  2200              MOVS     r2,#0                 ;1247
                  |L9.912|
000390  5c2c              LDRB     r4,[r5,r0]            ;1249
000392  eb030383          ADD      r3,r3,r3,LSL #2       ;1249
000396  eb060343          ADD      r3,r6,r3,LSL #1       ;1249
00039a  4423              ADD      r3,r3,r4              ;1249
00039c  1c40              ADDS     r0,r0,#1              ;1249
00039e  e000              B        |L9.930|
                  |L9.928|
0003a0  e21e              B        |L9.2016|
                  |L9.930|
0003a2  1c52              ADDS     r2,r2,#1              ;1249
0003a4  b2d2              UXTB     r2,r2                 ;1247
0003a6  b280              UXTH     r0,r0                 ;1249
0003a8  2a03              CMP      r2,#3                 ;1247
0003aa  d3f1              BCC      |L9.912|
                  |L9.940|
0003ac  f8a13050          STRH     r3,[r1,#0x50]         ;1252
0003b0  5c2a              LDRB     r2,[r5,r0]            ;1255
0003b2  1c40              ADDS     r0,r0,#1              ;1255
0003b4  2300              MOVS     r3,#0                 ;1253
0003b6  b280              UXTH     r0,r0                 ;1255
0003b8  2a2c              CMP      r2,#0x2c              ;1255
0003ba  d10c              BNE      |L9.982|
0003bc  2200              MOVS     r2,#0                 ;1257
                  |L9.958|
0003be  5c2c              LDRB     r4,[r5,r0]            ;1259
0003c0  eb030383          ADD      r3,r3,r3,LSL #2       ;1259
0003c4  1c40              ADDS     r0,r0,#1              ;1259
0003c6  1c52              ADDS     r2,r2,#1              ;1259
0003c8  eb060343          ADD      r3,r6,r3,LSL #1       ;1259
0003cc  b2d2              UXTB     r2,r2                 ;1257
0003ce  4423              ADD      r3,r3,r4              ;1259
0003d0  b280              UXTH     r0,r0                 ;1259
0003d2  2a06              CMP      r2,#6                 ;1257
0003d4  d3f3              BCC      |L9.958|
                  |L9.982|
0003d6  654b              STR      r3,[r1,#0x54]         ;1262  ; Para
0003d8  5c2a              LDRB     r2,[r5,r0]            ;1265
0003da  1c40              ADDS     r0,r0,#1              ;1265
0003dc  2300              MOVS     r3,#0                 ;1263
0003de  b280              UXTH     r0,r0                 ;1265
0003e0  2a2c              CMP      r2,#0x2c              ;1265
0003e2  d10c              BNE      |L9.1022|
0003e4  2200              MOVS     r2,#0                 ;1267
                  |L9.998|
0003e6  5c2c              LDRB     r4,[r5,r0]            ;1269
0003e8  eb030383          ADD      r3,r3,r3,LSL #2       ;1269
0003ec  1c40              ADDS     r0,r0,#1              ;1269
0003ee  1c52              ADDS     r2,r2,#1              ;1269
0003f0  eb060343          ADD      r3,r6,r3,LSL #1       ;1269
0003f4  b2d2              UXTB     r2,r2                 ;1267
0003f6  4423              ADD      r3,r3,r4              ;1269
0003f8  b280              UXTH     r0,r0                 ;1269
0003fa  2a05              CMP      r2,#5                 ;1267
0003fc  d3f3              BCC      |L9.998|
                  |L9.1022|
0003fe  f8a13058          STRH     r3,[r1,#0x58]         ;1272
000402  5c2a              LDRB     r2,[r5,r0]            ;1275
000404  1c40              ADDS     r0,r0,#1              ;1275
000406  2300              MOVS     r3,#0                 ;1273
000408  b280              UXTH     r0,r0                 ;1275
00040a  2a2c              CMP      r2,#0x2c              ;1275
00040c  d10c              BNE      |L9.1064|
00040e  2200              MOVS     r2,#0                 ;1277
                  |L9.1040|
000410  5c2c              LDRB     r4,[r5,r0]            ;1279
000412  eb030383          ADD      r3,r3,r3,LSL #2       ;1279
000416  1c40              ADDS     r0,r0,#1              ;1279
000418  1c52              ADDS     r2,r2,#1              ;1279
00041a  eb060343          ADD      r3,r6,r3,LSL #1       ;1279
00041e  b2d2              UXTB     r2,r2                 ;1277
000420  4423              ADD      r3,r3,r4              ;1279
000422  b280              UXTH     r0,r0                 ;1279
000424  2a05              CMP      r2,#5                 ;1277
000426  d3f3              BCC      |L9.1040|
                  |L9.1064|
000428  f8a1305a          STRH     r3,[r1,#0x5a]         ;1282
00042c  5c2a              LDRB     r2,[r5,r0]            ;1285
00042e  1c40              ADDS     r0,r0,#1              ;1285
000430  2300              MOVS     r3,#0                 ;1283
000432  b280              UXTH     r0,r0                 ;1285
000434  2a2c              CMP      r2,#0x2c              ;1285
000436  e02d              B        |L9.1172|
                  |L9.1080|
000438  256400            DCB      "%d",0
00043b  00                DCB      0
                  |L9.1084|
00043c  2f00              DCB      "/",0
00043e  00                DCB      0
00043f  00                DCB      0
                  |L9.1088|
                          DCD      ||.data||+0x58
                  |L9.1092|
                          DCD      C_DISCHARGE
                  |L9.1096|
                          DCD      Para
                  |L9.1100|
00044c  25303564          DCB      "%05d",0
000450  00      
000451  00                DCB      0
000452  00                DCB      0
000453  00                DCB      0
                  |L9.1108|
000454  25303664          DCB      "%06d",0
000458  00      
000459  00                DCB      0
00045a  00                DCB      0
00045b  00                DCB      0
                  |L9.1116|
00045c  25303464          DCB      "%04d",0
000460  00      
000461  00                DCB      0
000462  00                DCB      0
000463  00                DCB      0
                  |L9.1124|
                          DCD      max_discahrgeNum
                  |L9.1128|
000468  447a0000          DCFS     0x447a0000 ; 1000
                  |L9.1132|
                          DCD      shorttime
                  |L9.1136|
000470  25303364          DCB      "%03d",0
000474  00      
000475  00                DCB      0
000476  00                DCB      0
000477  00                DCB      0
                  |L9.1144|
000478  25316400          DCB      "%1d",0
                  |L9.1148|
                          DCD      finishflag
                  |L9.1152|
                          DCD      lockflag
                  |L9.1156|
                          DCD      version
                  |L9.1160|
000488  25326400          DCB      "%2d",0
                  |L9.1164|
                          DCD      Temperature
                  |L9.1168|
                          DCD      overflag
                  |L9.1172|
000494  d10c              BNE      |L9.1200|
000496  2200              MOVS     r2,#0                 ;1287
                  |L9.1176|
000498  5c2c              LDRB     r4,[r5,r0]            ;1289
00049a  eb030383          ADD      r3,r3,r3,LSL #2       ;1289
00049e  1c40              ADDS     r0,r0,#1              ;1289
0004a0  1c52              ADDS     r2,r2,#1              ;1289
0004a2  eb060343          ADD      r3,r6,r3,LSL #1       ;1289
0004a6  b2d2              UXTB     r2,r2                 ;1287
0004a8  4423              ADD      r3,r3,r4              ;1289
0004aa  b280              UXTH     r0,r0                 ;1289
0004ac  2a05              CMP      r2,#5                 ;1287
0004ae  d3f3              BCC      |L9.1176|
                  |L9.1200|
0004b0  f8a13060          STRH     r3,[r1,#0x60]         ;1292
0004b4  5c2a              LDRB     r2,[r5,r0]            ;1295
0004b6  1c40              ADDS     r0,r0,#1              ;1295
0004b8  2300              MOVS     r3,#0                 ;1293
0004ba  b280              UXTH     r0,r0                 ;1295
0004bc  2a2c              CMP      r2,#0x2c              ;1295
0004be  d10c              BNE      |L9.1242|
0004c0  2200              MOVS     r2,#0                 ;1297
                  |L9.1218|
0004c2  5c2c              LDRB     r4,[r5,r0]            ;1299
0004c4  eb030383          ADD      r3,r3,r3,LSL #2       ;1299
0004c8  1c40              ADDS     r0,r0,#1              ;1299
0004ca  1c52              ADDS     r2,r2,#1              ;1299
0004cc  eb060343          ADD      r3,r6,r3,LSL #1       ;1299
0004d0  b2d2              UXTB     r2,r2                 ;1297
0004d2  4423              ADD      r3,r3,r4              ;1299
0004d4  b280              UXTH     r0,r0                 ;1299
0004d6  2a05              CMP      r2,#5                 ;1297
0004d8  d3f3              BCC      |L9.1218|
                  |L9.1242|
0004da  65cb              STR      r3,[r1,#0x5c]         ;1302  ; Para
0004dc  5c2a              LDRB     r2,[r5,r0]            ;1305
0004de  1c40              ADDS     r0,r0,#1              ;1305
0004e0  2300              MOVS     r3,#0                 ;1303
0004e2  b280              UXTH     r0,r0                 ;1305
0004e4  2a2c              CMP      r2,#0x2c              ;1305
0004e6  d10c              BNE      |L9.1282|
0004e8  2200              MOVS     r2,#0                 ;1307
                  |L9.1258|
0004ea  5c2c              LDRB     r4,[r5,r0]            ;1309
0004ec  eb030383          ADD      r3,r3,r3,LSL #2       ;1309
0004f0  1c40              ADDS     r0,r0,#1              ;1309
0004f2  1c52              ADDS     r2,r2,#1              ;1309
0004f4  eb060343          ADD      r3,r6,r3,LSL #1       ;1309
0004f8  b2d2              UXTB     r2,r2                 ;1307
0004fa  4423              ADD      r3,r3,r4              ;1309
0004fc  b280              UXTH     r0,r0                 ;1309
0004fe  2a05              CMP      r2,#5                 ;1307
000500  d3f3              BCC      |L9.1258|
                  |L9.1282|
000502  f8a13068          STRH     r3,[r1,#0x68]         ;1312
000506  5c2a              LDRB     r2,[r5,r0]            ;1315
000508  1c40              ADDS     r0,r0,#1              ;1315
00050a  2300              MOVS     r3,#0                 ;1313
00050c  b280              UXTH     r0,r0                 ;1315
00050e  2a2c              CMP      r2,#0x2c              ;1315
000510  d10c              BNE      |L9.1324|
000512  2200              MOVS     r2,#0                 ;1317
                  |L9.1300|
000514  5c2c              LDRB     r4,[r5,r0]            ;1319
000516  eb030383          ADD      r3,r3,r3,LSL #2       ;1319
00051a  1c40              ADDS     r0,r0,#1              ;1319
00051c  1c52              ADDS     r2,r2,#1              ;1319
00051e  eb060343          ADD      r3,r6,r3,LSL #1       ;1319
000522  b2d2              UXTB     r2,r2                 ;1317
000524  4423              ADD      r3,r3,r4              ;1319
000526  b280              UXTH     r0,r0                 ;1319
000528  2a05              CMP      r2,#5                 ;1317
00052a  d3f3              BCC      |L9.1300|
                  |L9.1324|
00052c  66cb              STR      r3,[r1,#0x6c]         ;1322  ; Para
00052e  5c2a              LDRB     r2,[r5,r0]            ;1325
000530  1c40              ADDS     r0,r0,#1              ;1325
000532  2300              MOVS     r3,#0                 ;1323
000534  b280              UXTH     r0,r0                 ;1325
000536  2a2c              CMP      r2,#0x2c              ;1325
000538  d10c              BNE      |L9.1364|
00053a  2200              MOVS     r2,#0                 ;1327
                  |L9.1340|
00053c  5c2c              LDRB     r4,[r5,r0]            ;1329
00053e  eb030383          ADD      r3,r3,r3,LSL #2       ;1329
000542  1c40              ADDS     r0,r0,#1              ;1329
000544  1c52              ADDS     r2,r2,#1              ;1329
000546  eb060343          ADD      r3,r6,r3,LSL #1       ;1329
00054a  b2d2              UXTB     r2,r2                 ;1327
00054c  4423              ADD      r3,r3,r4              ;1329
00054e  b280              UXTH     r0,r0                 ;1329
000550  2a05              CMP      r2,#5                 ;1327
000552  d3f3              BCC      |L9.1340|
                  |L9.1364|
000554  f8a13070          STRH     r3,[r1,#0x70]         ;1332
000558  5c2a              LDRB     r2,[r5,r0]            ;1335
00055a  1c40              ADDS     r0,r0,#1              ;1335
00055c  2300              MOVS     r3,#0                 ;1333
00055e  b280              UXTH     r0,r0                 ;1335
000560  2a2c              CMP      r2,#0x2c              ;1335
000562  d10c              BNE      |L9.1406|
000564  2200              MOVS     r2,#0                 ;1337
                  |L9.1382|
000566  5c2c              LDRB     r4,[r5,r0]            ;1339
000568  eb030383          ADD      r3,r3,r3,LSL #2       ;1339
00056c  1c40              ADDS     r0,r0,#1              ;1339
00056e  1c52              ADDS     r2,r2,#1              ;1339
000570  eb060343          ADD      r3,r6,r3,LSL #1       ;1339
000574  b2d2              UXTB     r2,r2                 ;1337
000576  4423              ADD      r3,r3,r4              ;1339
000578  b280              UXTH     r0,r0                 ;1339
00057a  2a05              CMP      r2,#5                 ;1337
00057c  d3f3              BCC      |L9.1382|
                  |L9.1406|
00057e  674b              STR      r3,[r1,#0x74]         ;1342  ; Para
000580  5c2a              LDRB     r2,[r5,r0]            ;1345
000582  1c40              ADDS     r0,r0,#1              ;1345
000584  2300              MOVS     r3,#0                 ;1343
000586  b280              UXTH     r0,r0                 ;1345
000588  2a2c              CMP      r2,#0x2c              ;1345
00058a  d10c              BNE      |L9.1446|
00058c  2200              MOVS     r2,#0                 ;1347
                  |L9.1422|
00058e  5c2c              LDRB     r4,[r5,r0]            ;1349
000590  eb030383          ADD      r3,r3,r3,LSL #2       ;1349
000594  1c40              ADDS     r0,r0,#1              ;1349
000596  1c52              ADDS     r2,r2,#1              ;1349
000598  eb060343          ADD      r3,r6,r3,LSL #1       ;1349
00059c  b2d2              UXTB     r2,r2                 ;1347
00059e  4423              ADD      r3,r3,r4              ;1349
0005a0  b280              UXTH     r0,r0                 ;1349
0005a2  2a05              CMP      r2,#5                 ;1347
0005a4  d3f3              BCC      |L9.1422|
                  |L9.1446|
0005a6  f8a13078          STRH     r3,[r1,#0x78]         ;1352
0005aa  5c2a              LDRB     r2,[r5,r0]            ;1355
0005ac  1c40              ADDS     r0,r0,#1              ;1355
0005ae  2300              MOVS     r3,#0                 ;1353
0005b0  b280              UXTH     r0,r0                 ;1355
0005b2  2a2c              CMP      r2,#0x2c              ;1355
0005b4  d10c              BNE      |L9.1488|
0005b6  2200              MOVS     r2,#0                 ;1357
                  |L9.1464|
0005b8  5c2c              LDRB     r4,[r5,r0]            ;1359
0005ba  eb030383          ADD      r3,r3,r3,LSL #2       ;1359
0005be  1c40              ADDS     r0,r0,#1              ;1359
0005c0  1c52              ADDS     r2,r2,#1              ;1359
0005c2  eb060343          ADD      r3,r6,r3,LSL #1       ;1359
0005c6  b2d2              UXTB     r2,r2                 ;1357
0005c8  4423              ADD      r3,r3,r4              ;1359
0005ca  b280              UXTH     r0,r0                 ;1359
0005cc  2a05              CMP      r2,#5                 ;1357
0005ce  d3f3              BCC      |L9.1464|
                  |L9.1488|
0005d0  67cb              STR      r3,[r1,#0x7c]         ;1362  ; Para
0005d2  5c2a              LDRB     r2,[r5,r0]            ;1365
0005d4  1c40              ADDS     r0,r0,#1              ;1365
0005d6  2300              MOVS     r3,#0                 ;1363
0005d8  b280              UXTH     r0,r0                 ;1365
0005da  2a2c              CMP      r2,#0x2c              ;1365
0005dc  d10c              BNE      |L9.1528|
0005de  2200              MOVS     r2,#0                 ;1367
                  |L9.1504|
0005e0  5c2c              LDRB     r4,[r5,r0]            ;1369
0005e2  eb030383          ADD      r3,r3,r3,LSL #2       ;1369
0005e6  1c40              ADDS     r0,r0,#1              ;1369
0005e8  1c52              ADDS     r2,r2,#1              ;1369
0005ea  eb060343          ADD      r3,r6,r3,LSL #1       ;1369
0005ee  b2d2              UXTB     r2,r2                 ;1367
0005f0  4423              ADD      r3,r3,r4              ;1369
0005f2  b280              UXTH     r0,r0                 ;1369
0005f4  2a05              CMP      r2,#5                 ;1367
0005f6  d3f3              BCC      |L9.1504|
                  |L9.1528|
0005f8  f8c13080          STR      r3,[r1,#0x80]         ;1372  ; Para
0005fc  5c2a              LDRB     r2,[r5,r0]            ;1375
0005fe  1c40              ADDS     r0,r0,#1              ;1375
000600  2300              MOVS     r3,#0                 ;1373
000602  b280              UXTH     r0,r0                 ;1375
000604  2a2c              CMP      r2,#0x2c              ;1375
000606  d10c              BNE      |L9.1570|
000608  2200              MOVS     r2,#0                 ;1377
                  |L9.1546|
00060a  5c2c              LDRB     r4,[r5,r0]            ;1379
00060c  eb030383          ADD      r3,r3,r3,LSL #2       ;1379
000610  1c40              ADDS     r0,r0,#1              ;1379
000612  1c52              ADDS     r2,r2,#1              ;1379
000614  eb060343          ADD      r3,r6,r3,LSL #1       ;1379
000618  b2d2              UXTB     r2,r2                 ;1377
00061a  4423              ADD      r3,r3,r4              ;1379
00061c  b280              UXTH     r0,r0                 ;1379
00061e  2a03              CMP      r2,#3                 ;1377
000620  d3f3              BCC      |L9.1546|
                  |L9.1570|
000622  f8813084          STRB     r3,[r1,#0x84]         ;1382
000626  5c2a              LDRB     r2,[r5,r0]            ;1385
000628  1c40              ADDS     r0,r0,#1              ;1385
00062a  2400              MOVS     r4,#0                 ;1383
00062c  b280              UXTH     r0,r0                 ;1385
00062e  2a2c              CMP      r2,#0x2c              ;1385
000630  d10c              BNE      |L9.1612|
000632  2200              MOVS     r2,#0                 ;1387
                  |L9.1588|
000634  5c2b              LDRB     r3,[r5,r0]            ;1389
000636  eb040484          ADD      r4,r4,r4,LSL #2       ;1389
00063a  1c40              ADDS     r0,r0,#1              ;1389
00063c  1c52              ADDS     r2,r2,#1              ;1389
00063e  eb060444          ADD      r4,r6,r4,LSL #1       ;1389
000642  b2d2              UXTB     r2,r2                 ;1387
000644  441c              ADD      r4,r4,r3              ;1389
000646  b280              UXTH     r0,r0                 ;1389
000648  2a03              CMP      r2,#3                 ;1387
00064a  d3f3              BCC      |L9.1588|
                  |L9.1612|
00064c  4bf9              LDR      r3,|L9.2612|
00064e  795a              LDRB     r2,[r3,#5]            ;1392  ; MODE
000650  b902              CBNZ     r2,|L9.1620|
000652  618c              STR      r4,[r1,#0x18]         ;1394  ; Para
                  |L9.1620|
000654  5c2a              LDRB     r2,[r5,r0]            ;1399
000656  1c40              ADDS     r0,r0,#1              ;1399
000658  2400              MOVS     r4,#0                 ;1396
00065a  b280              UXTH     r0,r0                 ;1399
00065c  2a2c              CMP      r2,#0x2c              ;1399
00065e  d10c              BNE      |L9.1658|
000660  2200              MOVS     r2,#0                 ;1401
                  |L9.1634|
000662  5c2f              LDRB     r7,[r5,r0]            ;1403
000664  eb040484          ADD      r4,r4,r4,LSL #2       ;1403
000668  1c40              ADDS     r0,r0,#1              ;1403
00066a  1c52              ADDS     r2,r2,#1              ;1403
00066c  eb060444          ADD      r4,r6,r4,LSL #1       ;1403
000670  b2d2              UXTB     r2,r2                 ;1401
000672  443c              ADD      r4,r4,r7              ;1403
000674  b280              UXTH     r0,r0                 ;1403
000676  2a03              CMP      r2,#3                 ;1401
000678  d3f3              BCC      |L9.1634|
                  |L9.1658|
00067a  71dc              STRB     r4,[r3,#7]            ;1406
00067c  5c2a              LDRB     r2,[r5,r0]            ;1409
00067e  1c40              ADDS     r0,r0,#1              ;1409
000680  2400              MOVS     r4,#0                 ;1407
000682  b280              UXTH     r0,r0                 ;1409
000684  2a2c              CMP      r2,#0x2c              ;1409
000686  d10c              BNE      |L9.1698|
000688  2200              MOVS     r2,#0                 ;1411
                  |L9.1674|
00068a  5c2f              LDRB     r7,[r5,r0]            ;1413
00068c  eb040484          ADD      r4,r4,r4,LSL #2       ;1413
000690  1c40              ADDS     r0,r0,#1              ;1413
000692  1c52              ADDS     r2,r2,#1              ;1413
000694  eb060444          ADD      r4,r6,r4,LSL #1       ;1413
000698  b2d2              UXTB     r2,r2                 ;1411
00069a  443c              ADD      r4,r4,r7              ;1413
00069c  b280              UXTH     r0,r0                 ;1413
00069e  2a03              CMP      r2,#3                 ;1411
0006a0  d3f3              BCC      |L9.1674|
                  |L9.1698|
0006a2  f8814052          STRB     r4,[r1,#0x52]         ;1416
0006a6  5c2f              LDRB     r7,[r5,r0]            ;1419
0006a8  1c40              ADDS     r0,r0,#1              ;1419
0006aa  2200              MOVS     r2,#0                 ;1417
0006ac  b284              UXTH     r4,r0                 ;1419
0006ae  2f2c              CMP      r7,#0x2c              ;1419
0006b0  d10c              BNE      |L9.1740|
0006b2  2000              MOVS     r0,#0                 ;1421
                  |L9.1716|
0006b4  5d2f              LDRB     r7,[r5,r4]            ;1423
0006b6  eb020282          ADD      r2,r2,r2,LSL #2       ;1423
0006ba  1c64              ADDS     r4,r4,#1              ;1423
0006bc  1c40              ADDS     r0,r0,#1              ;1423
0006be  eb060242          ADD      r2,r6,r2,LSL #1       ;1423
0006c2  b2c0              UXTB     r0,r0                 ;1421
0006c4  443a              ADD      r2,r2,r7              ;1423
0006c6  b2a4              UXTH     r4,r4                 ;1423
0006c8  2806              CMP      r0,#6                 ;1421
0006ca  d3f3              BCC      |L9.1716|
                  |L9.1740|
0006cc  eb020082          ADD      r0,r2,r2,LSL #2       ;1426
0006d0  0040              LSLS     r0,r0,#1              ;1426
0006d2  6648              STR      r0,[r1,#0x64]         ;1426  ; Para
0006d4  7958              LDRB     r0,[r3,#5]            ;1429  ; MODE
                  |L9.1750|
0006d6  f7fffffe          BL       MODE_PARASET
                  |L9.1754|
0006da  e60e              B        |L9.762|
                  |L9.1756|
0006dc  5d29              LDRB     r1,[r5,r4]            ;1436
0006de  293f              CMP      r1,#0x3f              ;1436
0006e0  d07e              BEQ      |L9.2016|
0006e2  2c0b              CMP      r4,#0xb               ;1445
0006e4  d10d              BNE      |L9.1794|
0006e6  2000              MOVS     r0,#0                 ;1447
0006e8  4607              MOV      r7,r0                 ;1447
                  |L9.1770|
0006ea  5d29              LDRB     r1,[r5,r4]            ;1449
0006ec  eb070287          ADD      r2,r7,r7,LSL #2       ;1449
0006f0  eb060242          ADD      r2,r6,r2,LSL #1       ;1449
0006f4  1c64              ADDS     r4,r4,#1              ;1449
0006f6  1c40              ADDS     r0,r0,#1              ;1449
0006f8  188f              ADDS     r7,r1,r2              ;1449
0006fa  b2c0              UXTB     r0,r0                 ;1447
0006fc  b2a4              UXTH     r4,r4                 ;1449
0006fe  2802              CMP      r0,#2                 ;1447
000700  d3f3              BCC      |L9.1770|
                  |L9.1794|
000702  48cc              LDR      r0,|L9.2612|
000704  7147              STRB     r7,[r0,#5]            ;1452
000706  7940              LDRB     r0,[r0,#5]            ;1455  ; MODE
000708  2700              MOVS     r7,#0                 ;1453
00070a  f8df932c          LDR      r9,|L9.2616|
00070e  f6432198          MOV      r1,#0x3a98            ;1478
000712  b1b0              CBZ      r0,|L9.1858|
000714  4ac7              LDR      r2,|L9.2612|
000716  7950              LDRB     r0,[r2,#5]            ;1499  ; MODE
000718  2801              CMP      r0,#1                 ;1499
00071a  d065              BEQ      |L9.2024|
00071c  4610              MOV      r0,r2                 ;1528
00071e  7940              LDRB     r0,[r0,#5]            ;1528  ; MODE
000720  2802              CMP      r0,#2                 ;1528
000722  d07d              BEQ      |L9.2080|
000724  7950              LDRB     r0,[r2,#5]            ;1564  ; MODE
000726  2803              CMP      r0,#3                 ;1564
000728  d07b              BEQ      |L9.2082|
00072a  4610              MOV      r0,r2                 ;1596
00072c  7940              LDRB     r0,[r0,#5]            ;1596  ; MODE
00072e  2804              CMP      r0,#4                 ;1596
000730  d078              BEQ      |L9.2084|
000732  4611              MOV      r1,r2                 ;1639
000734  7948              LDRB     r0,[r1,#5]            ;1639  ; MODE
000736  2805              CMP      r0,#5                 ;1639
000738  d075              BEQ      |L9.2086|
00073a  7948              LDRB     r0,[r1,#5]            ;1670  ; MODE
00073c  2806              CMP      r0,#6                 ;1670
00073e  d073              BEQ      |L9.2088|
                  |L9.1856|
000740  e1e8              B        |L9.2836|
                  |L9.1858|
000742  5d2a              LDRB     r2,[r5,r4]            ;1457
000744  1c64              ADDS     r4,r4,#1              ;1457
000746  b2a0              UXTH     r0,r4                 ;1457
000748  2a2c              CMP      r2,#0x2c              ;1457
00074a  d106              BNE      |L9.1882|
00074c  2200              MOVS     r2,#0                 ;1459
                  |L9.1870|
00074e  1c40              ADDS     r0,r0,#1              ;1459
000750  1c52              ADDS     r2,r2,#1              ;1461
000752  b2d2              UXTB     r2,r2                 ;1459
000754  b280              UXTH     r0,r0                 ;1461
000756  2a06              CMP      r2,#6                 ;1459
000758  d3f9              BCC      |L9.1870|
                  |L9.1882|
00075a  5c2b              LDRB     r3,[r5,r0]            ;1467
00075c  1c40              ADDS     r0,r0,#1              ;1467
00075e  2200              MOVS     r2,#0                 ;1465
000760  b284              UXTH     r4,r0                 ;1467
000762  2b2c              CMP      r3,#0x2c              ;1467
000764  d10c              BNE      |L9.1920|
000766  2000              MOVS     r0,#0                 ;1469
                  |L9.1896|
000768  5d2b              LDRB     r3,[r5,r4]            ;1471
00076a  eb020282          ADD      r2,r2,r2,LSL #2       ;1471
00076e  1c64              ADDS     r4,r4,#1              ;1471
000770  1c40              ADDS     r0,r0,#1              ;1471
000772  eb060242          ADD      r2,r6,r2,LSL #1       ;1471
000776  b2c0              UXTB     r0,r0                 ;1469
000778  441a              ADD      r2,r2,r3              ;1471
00077a  b2a4              UXTH     r4,r4                 ;1471
00077c  2805              CMP      r0,#5                 ;1469
00077e  d3f3              BCC      |L9.1896|
                  |L9.1920|
000780  f8ca2014          STR      r2,[r10,#0x14]        ;1474  ; Para
000784  f8da0014          LDR      r0,[r10,#0x14]        ;1478  ; Para
000788  2700              MOVS     r7,#0                 ;1475
00078a  4288              CMP      r0,r1                 ;1478
00078c  d907              BLS      |L9.1950|
00078e  2101              MOVS     r1,#1                 ;1480
000790  f8c91020          STR      r1,[r9,#0x20]         ;1480  ; Run_Control
000794  02c9              LSLS     r1,r1,#11             ;1481
000796  48a9              LDR      r0,|L9.2620|
000798  f7fffffe          BL       GPIO_ResetBits
00079c  e007              B        |L9.1966|
                  |L9.1950|
00079e  2100              MOVS     r1,#0                 ;1483
0007a0  f8c91020          STR      r1,[r9,#0x20]         ;1483  ; Run_Control
0007a4  f44f6100          MOV      r1,#0x800             ;1484
0007a8  48a4              LDR      r0,|L9.2620|
0007aa  f7fffffe          BL       GPIO_SetBits
                  |L9.1966|
0007ae  5d28              LDRB     r0,[r5,r4]            ;1486
0007b0  1c64              ADDS     r4,r4,#1              ;1486
0007b2  b2a4              UXTH     r4,r4                 ;1486
0007b4  282c              CMP      r0,#0x2c              ;1486
0007b6  d10c              BNE      |L9.2002|
0007b8  2000              MOVS     r0,#0                 ;1488
                  |L9.1978|
0007ba  5d29              LDRB     r1,[r5,r4]            ;1490
0007bc  eb070287          ADD      r2,r7,r7,LSL #2       ;1490
0007c0  eb060242          ADD      r2,r6,r2,LSL #1       ;1490
0007c4  1c64              ADDS     r4,r4,#1              ;1490
0007c6  188f              ADDS     r7,r1,r2              ;1490
0007c8  1c40              ADDS     r0,r0,#1              ;1490
0007ca  b2a4              UXTH     r4,r4                 ;1490
0007cc  f01000ff          ANDS     r0,r0,#0xff           ;1488
0007d0  d0f3              BEQ      |L9.1978|
                  |L9.2002|
0007d2  4898              LDR      r0,|L9.2612|
0007d4  7187              STRB     r7,[r0,#6]            ;1493
0007d6  7980              LDRB     r0,[r0,#6]            ;1494  ; mainswitch
0007d8  2800              CMP      r0,#0                 ;1494
0007da  d1b1              BNE      |L9.1856|
0007dc  2001              MOVS     r0,#1                 ;1496
0007de  e000              B        |L9.2018|
                  |L9.2016|
0007e0  e220              B        |L9.3108|
                  |L9.2018|
0007e2  f8c90020          STR      r0,[r9,#0x20]         ;1496  ; Run_Control
0007e6  e11e              B        |L9.2598|
                  |L9.2024|
0007e8  5d29              LDRB     r1,[r5,r4]            ;1500
0007ea  1c64              ADDS     r4,r4,#1              ;1500
0007ec  b2a0              UXTH     r0,r4                 ;1500
0007ee  292c              CMP      r1,#0x2c              ;1500
0007f0  d10c              BNE      |L9.2060|
0007f2  2100              MOVS     r1,#0                 ;1502
                  |L9.2036|
0007f4  5c2b              LDRB     r3,[r5,r0]            ;1504
0007f6  eb070487          ADD      r4,r7,r7,LSL #2       ;1504
0007fa  eb060444          ADD      r4,r6,r4,LSL #1       ;1504
0007fe  1c40              ADDS     r0,r0,#1              ;1504
000800  1c49              ADDS     r1,r1,#1              ;1504
000802  191f              ADDS     r7,r3,r4              ;1504
000804  b2c9              UXTB     r1,r1                 ;1502
000806  b280              UXTH     r0,r0                 ;1504
000808  2906              CMP      r1,#6                 ;1502
00080a  d3f3              BCC      |L9.2036|
                  |L9.2060|
00080c  4654              MOV      r4,r10                ;1507
00080e  f8ca706c          STR      r7,[r10,#0x6c]        ;1507  ; Para
000812  5c29              LDRB     r1,[r5,r0]            ;1510
000814  1c40              ADDS     r0,r0,#1              ;1510
000816  2300              MOVS     r3,#0                 ;1508
000818  b280              UXTH     r0,r0                 ;1510
00081a  292c              CMP      r1,#0x2c              ;1510
00081c  d112              BNE      |L9.2116|
00081e  e004              B        |L9.2090|
                  |L9.2080|
000820  e026              B        |L9.2160|
                  |L9.2082|
000822  e072              B        |L9.2314|
                  |L9.2084|
000824  e0b0              B        |L9.2440|
                  |L9.2086|
000826  e10d              B        |L9.2628|
                  |L9.2088|
000828  e145              B        |L9.2742|
                  |L9.2090|
00082a  2100              MOVS     r1,#0                 ;1512
                  |L9.2092|
00082c  5c2f              LDRB     r7,[r5,r0]            ;1514
00082e  eb030383          ADD      r3,r3,r3,LSL #2       ;1514
000832  1c40              ADDS     r0,r0,#1              ;1514
000834  1c49              ADDS     r1,r1,#1              ;1514
000836  eb060343          ADD      r3,r6,r3,LSL #1       ;1514
00083a  b2c9              UXTB     r1,r1                 ;1512
00083c  443b              ADD      r3,r3,r7              ;1514
00083e  b280              UXTH     r0,r0                 ;1514
000840  2905              CMP      r1,#5                 ;1512
000842  d3f3              BCC      |L9.2092|
                  |L9.2116|
000844  f8a43070          STRH     r3,[r4,#0x70]         ;1517
000848  5c2b              LDRB     r3,[r5,r0]            ;1520
00084a  1c40              ADDS     r0,r0,#1              ;1520
00084c  2100              MOVS     r1,#0                 ;1518
00084e  b284              UXTH     r4,r0                 ;1520
000850  2b2c              CMP      r3,#0x2c              ;1520
000852  d10c              BNE      |L9.2158|
000854  2000              MOVS     r0,#0                 ;1522
                  |L9.2134|
000856  5d2b              LDRB     r3,[r5,r4]            ;1524
000858  1c64              ADDS     r4,r4,#1              ;1524
00085a  eb010181          ADD      r1,r1,r1,LSL #2       ;1524
00085e  eb060141          ADD      r1,r6,r1,LSL #1       ;1524
000862  1c40              ADDS     r0,r0,#1              ;1524
000864  4419              ADD      r1,r1,r3              ;1524
000866  b2a4              UXTH     r4,r4                 ;1524
000868  f01000ff          ANDS     r0,r0,#0xff           ;1522
00086c  d0f3              BEQ      |L9.2134|
                  |L9.2158|
00086e  e089              B        |L9.2436|
                  |L9.2160|
000870  2001              MOVS     r0,#1                 ;1529
000872  f8c90020          STR      r0,[r9,#0x20]         ;1529  ; Run_Control
000876  02c1              LSLS     r1,r0,#11             ;1530
000878  4870              LDR      r0,|L9.2620|
00087a  f7fffffe          BL       GPIO_ResetBits
00087e  5d29              LDRB     r1,[r5,r4]            ;1531
000880  1c64              ADDS     r4,r4,#1              ;1531
000882  b2a0              UXTH     r0,r4                 ;1531
000884  292c              CMP      r1,#0x2c              ;1531
000886  d10c              BNE      |L9.2210|
000888  2100              MOVS     r1,#0                 ;1533
                  |L9.2186|
00088a  5c2a              LDRB     r2,[r5,r0]            ;1535
00088c  eb070387          ADD      r3,r7,r7,LSL #2       ;1535
000890  eb060343          ADD      r3,r6,r3,LSL #1       ;1535
000894  1c40              ADDS     r0,r0,#1              ;1535
000896  1c49              ADDS     r1,r1,#1              ;1535
000898  18d7              ADDS     r7,r2,r3              ;1535
00089a  b2c9              UXTB     r1,r1                 ;1533
00089c  b280              UXTH     r0,r0                 ;1535
00089e  2906              CMP      r1,#6                 ;1533
0008a0  d3f3              BCC      |L9.2186|
                  |L9.2210|
0008a2  4653              MOV      r3,r10                ;1538
0008a4  f8ca7044          STR      r7,[r10,#0x44]        ;1538  ; Para
0008a8  5c29              LDRB     r1,[r5,r0]            ;1541
0008aa  1c40              ADDS     r0,r0,#1              ;1541
0008ac  2200              MOVS     r2,#0                 ;1539
0008ae  b280              UXTH     r0,r0                 ;1541
0008b0  292c              CMP      r1,#0x2c              ;1541
0008b2  d10c              BNE      |L9.2254|
0008b4  2100              MOVS     r1,#0                 ;1543
                  |L9.2230|
0008b6  5c2c              LDRB     r4,[r5,r0]            ;1545
0008b8  eb020282          ADD      r2,r2,r2,LSL #2       ;1545
0008bc  1c40              ADDS     r0,r0,#1              ;1545
0008be  1c49              ADDS     r1,r1,#1              ;1545
0008c0  eb060242          ADD      r2,r6,r2,LSL #1       ;1545
0008c4  b2c9              UXTB     r1,r1                 ;1543
0008c6  4422              ADD      r2,r2,r4              ;1545
0008c8  b280              UXTH     r0,r0                 ;1545
0008ca  2905              CMP      r1,#5                 ;1543
0008cc  d3f3              BCC      |L9.2230|
                  |L9.2254|
0008ce  f8a32048          STRH     r2,[r3,#0x48]         ;1548
0008d2  5c2a              LDRB     r2,[r5,r0]            ;1551
0008d4  1c40              ADDS     r0,r0,#1              ;1551
0008d6  2100              MOVS     r1,#0                 ;1549
0008d8  b284              UXTH     r4,r0                 ;1551
0008da  2a2c              CMP      r2,#0x2c              ;1551
0008dc  d10c              BNE      |L9.2296|
0008de  2000              MOVS     r0,#0                 ;1553
                  |L9.2272|
0008e0  5d2a              LDRB     r2,[r5,r4]            ;1555
0008e2  1c64              ADDS     r4,r4,#1              ;1555
0008e4  eb010181          ADD      r1,r1,r1,LSL #2       ;1555
0008e8  eb060141          ADD      r1,r6,r1,LSL #1       ;1555
0008ec  1c40              ADDS     r0,r0,#1              ;1555
0008ee  4411              ADD      r1,r1,r2              ;1555
0008f0  b2a4              UXTH     r4,r4                 ;1555
0008f2  f01000ff          ANDS     r0,r0,#0xff           ;1553
0008f6  d0f3              BEQ      |L9.2272|
                  |L9.2296|
0008f8  484e              LDR      r0,|L9.2612|
0008fa  7181              STRB     r1,[r0,#6]            ;1558
0008fc  7980              LDRB     r0,[r0,#6]            ;1560  ; mainswitch
0008fe  2801              CMP      r0,#1                 ;1560
000900  d102              BNE      |L9.2312|
000902  494f              LDR      r1,|L9.2624|
000904  2000              MOVS     r0,#0                 ;1562
000906  7008              STRB     r0,[r1,#0]            ;1562
                  |L9.2312|
000908  e104              B        |L9.2836|
                  |L9.2314|
00090a  5d29              LDRB     r1,[r5,r4]            ;1565
00090c  1c64              ADDS     r4,r4,#1              ;1565
00090e  b2a0              UXTH     r0,r4                 ;1565
000910  292c              CMP      r1,#0x2c              ;1565
000912  d10c              BNE      |L9.2350|
000914  2100              MOVS     r1,#0                 ;1567
                  |L9.2326|
000916  5c2b              LDRB     r3,[r5,r0]            ;1569
000918  eb070487          ADD      r4,r7,r7,LSL #2       ;1569
00091c  eb060444          ADD      r4,r6,r4,LSL #1       ;1569
000920  1c40              ADDS     r0,r0,#1              ;1569
000922  1c49              ADDS     r1,r1,#1              ;1569
000924  191f              ADDS     r7,r3,r4              ;1569
000926  b2c9              UXTB     r1,r1                 ;1567
000928  b280              UXTH     r0,r0                 ;1569
00092a  2906              CMP      r1,#6                 ;1567
00092c  d3f3              BCC      |L9.2326|
                  |L9.2350|
00092e  4654              MOV      r4,r10                ;1572
000930  f8ca706c          STR      r7,[r10,#0x6c]        ;1572  ; Para
000934  5c29              LDRB     r1,[r5,r0]            ;1576
000936  1c40              ADDS     r0,r0,#1              ;1576
000938  2300              MOVS     r3,#0                 ;1573
00093a  b280              UXTH     r0,r0                 ;1576
00093c  292c              CMP      r1,#0x2c              ;1576
00093e  d10c              BNE      |L9.2394|
000940  2100              MOVS     r1,#0                 ;1578
                  |L9.2370|
000942  5c2f              LDRB     r7,[r5,r0]            ;1580
000944  eb030383          ADD      r3,r3,r3,LSL #2       ;1580
000948  1c40              ADDS     r0,r0,#1              ;1580
00094a  1c49              ADDS     r1,r1,#1              ;1580
00094c  eb060343          ADD      r3,r6,r3,LSL #1       ;1580
000950  b2c9              UXTB     r1,r1                 ;1578
000952  443b              ADD      r3,r3,r7              ;1580
000954  b280              UXTH     r0,r0                 ;1580
000956  2905              CMP      r1,#5                 ;1578
000958  d3f3              BCC      |L9.2370|
                  |L9.2394|
00095a  f8a43070          STRH     r3,[r4,#0x70]         ;1583
00095e  5c2b              LDRB     r3,[r5,r0]            ;1586
000960  1c40              ADDS     r0,r0,#1              ;1586
000962  2100              MOVS     r1,#0                 ;1584
000964  b284              UXTH     r4,r0                 ;1586
000966  2b2c              CMP      r3,#0x2c              ;1586
000968  d10c              BNE      |L9.2436|
00096a  2000              MOVS     r0,#0                 ;1588
                  |L9.2412|
00096c  5d2b              LDRB     r3,[r5,r4]            ;1590
00096e  1c64              ADDS     r4,r4,#1              ;1590
000970  eb010181          ADD      r1,r1,r1,LSL #2       ;1590
000974  eb060141          ADD      r1,r6,r1,LSL #1       ;1590
000978  1c40              ADDS     r0,r0,#1              ;1590
00097a  4419              ADD      r1,r1,r3              ;1590
00097c  b2a4              UXTH     r4,r4                 ;1590
00097e  f01000ff          ANDS     r0,r0,#0xff           ;1588
000982  d0f3              BEQ      |L9.2412|
                  |L9.2436|
000984  7191              STRB     r1,[r2,#6]            ;1593
000986  e0c5              B        |L9.2836|
                  |L9.2440|
000988  5d2a              LDRB     r2,[r5,r4]            ;1597
00098a  1c64              ADDS     r4,r4,#1              ;1597
00098c  b2a0              UXTH     r0,r4                 ;1597
00098e  2a2c              CMP      r2,#0x2c              ;1597
000990  d106              BNE      |L9.2464|
000992  2200              MOVS     r2,#0                 ;1599
                  |L9.2452|
000994  1c40              ADDS     r0,r0,#1              ;1599
000996  1c52              ADDS     r2,r2,#1              ;1601
000998  b2d2              UXTB     r2,r2                 ;1599
00099a  b280              UXTH     r0,r0                 ;1601
00099c  2a06              CMP      r2,#6                 ;1599
00099e  d3f9              BCC      |L9.2452|
                  |L9.2464|
0009a0  5c2b              LDRB     r3,[r5,r0]            ;1607
0009a2  1c40              ADDS     r0,r0,#1              ;1607
0009a4  2200              MOVS     r2,#0                 ;1605
0009a6  b284              UXTH     r4,r0                 ;1607
0009a8  2b2c              CMP      r3,#0x2c              ;1607
0009aa  d10c              BNE      |L9.2502|
0009ac  2000              MOVS     r0,#0                 ;1609
                  |L9.2478|
0009ae  5d2b              LDRB     r3,[r5,r4]            ;1611
0009b0  eb020282          ADD      r2,r2,r2,LSL #2       ;1611
0009b4  1c64              ADDS     r4,r4,#1              ;1611
0009b6  1c40              ADDS     r0,r0,#1              ;1611
0009b8  eb060242          ADD      r2,r6,r2,LSL #1       ;1611
0009bc  b2c0              UXTB     r0,r0                 ;1609
0009be  441a              ADD      r2,r2,r3              ;1611
0009c0  b2a4              UXTH     r4,r4                 ;1611
0009c2  2805              CMP      r0,#5                 ;1609
0009c4  d3f3              BCC      |L9.2478|
                  |L9.2502|
0009c6  f8ca2014          STR      r2,[r10,#0x14]        ;1614  ; Para
0009ca  f8da0014          LDR      r0,[r10,#0x14]        ;1618  ; Para
0009ce  2700              MOVS     r7,#0                 ;1615
0009d0  4288              CMP      r0,r1                 ;1618
0009d2  d907              BLS      |L9.2532|
0009d4  2001              MOVS     r0,#1                 ;1620
0009d6  f8c90020          STR      r0,[r9,#0x20]         ;1620  ; Run_Control
0009da  02c1              LSLS     r1,r0,#11             ;1621
0009dc  4817              LDR      r0,|L9.2620|
0009de  f7fffffe          BL       GPIO_ResetBits
0009e2  e007              B        |L9.2548|
                  |L9.2532|
0009e4  2000              MOVS     r0,#0                 ;1623
0009e6  f8c90020          STR      r0,[r9,#0x20]         ;1623  ; Run_Control
0009ea  f44f6100          MOV      r1,#0x800             ;1624
0009ee  4813              LDR      r0,|L9.2620|
0009f0  f7fffffe          BL       GPIO_SetBits
                  |L9.2548|
0009f4  5d28              LDRB     r0,[r5,r4]            ;1626
0009f6  1c64              ADDS     r4,r4,#1              ;1626
0009f8  b2a4              UXTH     r4,r4                 ;1626
0009fa  282c              CMP      r0,#0x2c              ;1626
0009fc  d10c              BNE      |L9.2584|
0009fe  2000              MOVS     r0,#0                 ;1628
                  |L9.2560|
000a00  5d29              LDRB     r1,[r5,r4]            ;1630
000a02  eb070287          ADD      r2,r7,r7,LSL #2       ;1630
000a06  eb060242          ADD      r2,r6,r2,LSL #1       ;1630
000a0a  1c64              ADDS     r4,r4,#1              ;1630
000a0c  188f              ADDS     r7,r1,r2              ;1630
000a0e  1c40              ADDS     r0,r0,#1              ;1630
000a10  b2a4              UXTH     r4,r4                 ;1630
000a12  f01000ff          ANDS     r0,r0,#0xff           ;1628
000a16  d0f3              BEQ      |L9.2560|
                  |L9.2584|
000a18  4806              LDR      r0,|L9.2612|
000a1a  7187              STRB     r7,[r0,#6]            ;1633
000a1c  7980              LDRB     r0,[r0,#6]            ;1634  ; mainswitch
000a1e  bbd8              CBNZ     r0,|L9.2712|
000a20  2101              MOVS     r1,#1                 ;1636
000a22  f8c91020          STR      r1,[r9,#0x20]         ;1636  ; Run_Control
                  |L9.2598|
000a26  f44f6100          MOV      r1,#0x800             ;1637
000a2a  4804              LDR      r0,|L9.2620|
000a2c  f7fffffe          BL       GPIO_ResetBits
000a30  e070              B        |L9.2836|
000a32  0000              DCW      0x0000
                  |L9.2612|
                          DCD      ||.data||
                  |L9.2616|
                          DCD      Run_Control
                  |L9.2620|
                          DCD      0x40020800
                  |L9.2624|
                          DCD      finishflag
                  |L9.2628|
000a44  5d2a              LDRB     r2,[r5,r4]            ;1640
000a46  1c64              ADDS     r4,r4,#1              ;1640
000a48  b2a0              UXTH     r0,r4                 ;1640
000a4a  2a2c              CMP      r2,#0x2c              ;1640
000a4c  d106              BNE      |L9.2652|
000a4e  2200              MOVS     r2,#0                 ;1642
                  |L9.2640|
000a50  1c40              ADDS     r0,r0,#1              ;1642
000a52  1c52              ADDS     r2,r2,#1              ;1644
000a54  b2d2              UXTB     r2,r2                 ;1642
000a56  b280              UXTH     r0,r0                 ;1644
000a58  2a06              CMP      r2,#6                 ;1642
000a5a  d3f9              BCC      |L9.2640|
                  |L9.2652|
000a5c  5c2a              LDRB     r2,[r5,r0]            ;1649
000a5e  1c40              ADDS     r0,r0,#1              ;1649
000a60  b280              UXTH     r0,r0                 ;1649
000a62  2a2c              CMP      r2,#0x2c              ;1649
000a64  d106              BNE      |L9.2676|
000a66  2200              MOVS     r2,#0                 ;1651
                  |L9.2664|
000a68  1c40              ADDS     r0,r0,#1              ;1651
000a6a  1c52              ADDS     r2,r2,#1              ;1653
000a6c  b2d2              UXTB     r2,r2                 ;1651
000a6e  b280              UXTH     r0,r0                 ;1653
000a70  2a05              CMP      r2,#5                 ;1651
000a72  d3f9              BCC      |L9.2664|
                  |L9.2676|
000a74  5c2b              LDRB     r3,[r5,r0]            ;1658
000a76  1c40              ADDS     r0,r0,#1              ;1658
000a78  2200              MOVS     r2,#0                 ;1656
000a7a  b284              UXTH     r4,r0                 ;1658
000a7c  2b2c              CMP      r3,#0x2c              ;1658
000a7e  d114              BNE      |L9.2730|
000a80  2000              MOVS     r0,#0                 ;1660
                  |L9.2690|
000a82  5d2b              LDRB     r3,[r5,r4]            ;1662
000a84  eb020282          ADD      r2,r2,r2,LSL #2       ;1662
000a88  1c64              ADDS     r4,r4,#1              ;1662
000a8a  eb060242          ADD      r2,r6,r2,LSL #1       ;1662
000a8e  441a              ADD      r2,r2,r3              ;1662
000a90  b2a4              UXTH     r4,r4                 ;1662
000a92  1c40              ADDS     r0,r0,#1              ;1662
000a94  e006              B        |L9.2724|
                  |L9.2710|
000a96  e111              B        |L9.3260|
                  |L9.2712|
000a98  e03c              B        |L9.2836|
                  |L9.2714|
000a9a  e167              B        |L9.3436|
                  |L9.2716|
000a9c  e10f              B        |L9.3262|
                  |L9.2718|
000a9e  e0c8              B        |L9.3122|
                  |L9.2720|
000aa0  e03f              B        |L9.2850|
                  |L9.2722|
000aa2  e0a7              B        |L9.3060|
                  |L9.2724|
000aa4  f01000ff          ANDS     r0,r0,#0xff           ;1660
000aa8  d0eb              BEQ      |L9.2690|
                  |L9.2730|
000aaa  718a              STRB     r2,[r1,#6]            ;1665
000aac  7988              LDRB     r0,[r1,#6]            ;1666  ; mainswitch
000aae  bb88              CBNZ     r0,|L9.2836|
000ab0  2000              MOVS     r0,#0                 ;1668
000ab2  7188              STRB     r0,[r1,#6]            ;1668
000ab4  e02e              B        |L9.2836|
                  |L9.2742|
000ab6  5d2a              LDRB     r2,[r5,r4]            ;1671
000ab8  1c64              ADDS     r4,r4,#1              ;1671
000aba  b2a0              UXTH     r0,r4                 ;1671
000abc  2a2c              CMP      r2,#0x2c              ;1671
000abe  d106              BNE      |L9.2766|
000ac0  2200              MOVS     r2,#0                 ;1673
                  |L9.2754|
000ac2  1c40              ADDS     r0,r0,#1              ;1673
000ac4  1c52              ADDS     r2,r2,#1              ;1675
000ac6  b2d2              UXTB     r2,r2                 ;1673
000ac8  b280              UXTH     r0,r0                 ;1675
000aca  2a06              CMP      r2,#6                 ;1673
000acc  d3f9              BCC      |L9.2754|
                  |L9.2766|
000ace  5c2a              LDRB     r2,[r5,r0]            ;1680
000ad0  1c40              ADDS     r0,r0,#1              ;1680
000ad2  b280              UXTH     r0,r0                 ;1680
000ad4  2a2c              CMP      r2,#0x2c              ;1680
000ad6  d106              BNE      |L9.2790|
000ad8  2200              MOVS     r2,#0                 ;1682
                  |L9.2778|
000ada  1c40              ADDS     r0,r0,#1              ;1682
000adc  1c52              ADDS     r2,r2,#1              ;1684
000ade  b2d2              UXTB     r2,r2                 ;1682
000ae0  b280              UXTH     r0,r0                 ;1684
000ae2  2a05              CMP      r2,#5                 ;1682
000ae4  d3f9              BCC      |L9.2778|
                  |L9.2790|
000ae6  2200              MOVS     r2,#0                 ;1687
000ae8  5c2b              LDRB     r3,[r5,r0]            ;1689
000aea  e001              B        |L9.2800|
                  |L9.2796|
000aec  e11c              B        |L9.3368|
                  |L9.2798|
000aee  e0e1              B        |L9.3252|
                  |L9.2800|
000af0  1c40              ADDS     r0,r0,#1              ;1689
000af2  b284              UXTH     r4,r0                 ;1689
000af4  2b2c              CMP      r3,#0x2c              ;1689
000af6  d10c              BNE      |L9.2834|
000af8  2000              MOVS     r0,#0                 ;1691
                  |L9.2810|
000afa  5d2b              LDRB     r3,[r5,r4]            ;1693
000afc  1c64              ADDS     r4,r4,#1              ;1693
000afe  eb020282          ADD      r2,r2,r2,LSL #2       ;1693
000b02  eb060242          ADD      r2,r6,r2,LSL #1       ;1693
000b06  1c40              ADDS     r0,r0,#1              ;1693
000b08  441a              ADD      r2,r2,r3              ;1693
000b0a  b2a4              UXTH     r4,r4                 ;1693
000b0c  f01000ff          ANDS     r0,r0,#0xff           ;1691
000b10  d0f3              BEQ      |L9.2810|
                  |L9.2834|
000b12  718a              STRB     r2,[r1,#6]            ;1696
                  |L9.2836|
000b14  f7fffffe          BL       Off_GPOI_ResetSet
000b18  48a6              LDR      r0,|L9.3508|
000b1a  7980              LDRB     r0,[r0,#6]            ;1702  ; mainswitch
000b1c  f7fffffe          BL       LIST_ONOFF
000b20  e5db              B        |L9.1754|
                  |L9.2850|
000b22  5d28              LDRB     r0,[r5,r4]            ;1709
000b24  2309              MOVS     r3,#9                 ;1708
000b26  283f              CMP      r0,#0x3f              ;1709
000b28  d019              BEQ      |L9.2910|
000b2a  2201              MOVS     r2,#1                 ;1718
000b2c  2100              MOVS     r1,#0                 ;1719
                  |L9.2862|
000b2e  b141              CBZ      r1,|L9.2882|
000b30  2905              CMP      r1,#5                 ;1721
000b32  d006              BEQ      |L9.2882|
000b34  1860              ADDS     r0,r4,r1              ;1723
000b36  5c28              LDRB     r0,[r5,r0]            ;1723
000b38  f7fffffe          BL       IsDigitChar
000b3c  2801              CMP      r0,#1                 ;1723
000b3e  d027              BEQ      |L9.2960|
000b40  2200              MOVS     r2,#0                 ;1729
                  |L9.2882|
000b42  1c49              ADDS     r1,r1,#1              ;1729
000b44  b2c9              UXTB     r1,r1                 ;1719
000b46  4299              CMP      r1,r3                 ;1719
000b48  d3f1              BCC      |L9.2862|
000b4a  2a01              CMP      r2,#1                 ;1732
                  |L9.2892|
000b4c  f47faa71          BNE      |L9.50|
000b50  18e0              ADDS     r0,r4,r3              ;1732
000b52  5c28              LDRB     r0,[r5,r0]            ;1732
000b54  280d              CMP      r0,#0xd               ;1732
000b56  d1f9              BNE      |L9.2892|
000b58  2200              MOVS     r2,#0                 ;1737
000b5a  4610              MOV      r0,r2                 ;1738
000b5c  e041              B        |L9.3042|
                  |L9.2910|
000b5e  eeb58ac0          VCMPE.F32 s16,#0.0              ;1711
000b62  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1711
000b66  db01              BLT      |L9.2924|
000b68  202b              MOVS     r0,#0x2b              ;1711
000b6a  e000              B        |L9.2926|
                  |L9.2924|
000b6c  202d              MOVS     r0,#0x2d              ;1711
                  |L9.2926|
000b6e  5528              STRB     r0,[r5,r4]            ;1711
000b70  1c64              ADDS     r4,r4,#1              ;1711
000b72  b2a4              UXTH     r4,r4                 ;1711
000b74  ee180a10          VMOV     r0,s16                ;1712
000b78  f7fffffe          BL       __aeabi_f2d
000b7c  ec410b10          VMOV     d0,r0,r1              ;1712
000b80  1928              ADDS     r0,r5,r4              ;1712
000b82  ec532b10          VMOV     r2,r3,d0              ;1712
000b86  a18c              ADR      r1,|L9.3512|
000b88  f7fffffe          BL       __2sprintf
000b8c  3409              ADDS     r4,r4,#9              ;1712
000b8e  e0cb              B        |L9.3368|
                  |L9.2960|
000b90  f0020201          AND      r2,r2,#1              ;1725
000b94  e7d5              B        |L9.2882|
                  |L9.2966|
000b96  b160              CBZ      r0,|L9.2994|
000b98  2801              CMP      r0,#1                 ;1744
000b9a  d016              BEQ      |L9.3018|
000b9c  2805              CMP      r0,#5                 ;1749
000b9e  d005              BEQ      |L9.2988|
000ba0  5d29              LDRB     r1,[r5,r4]            ;1755
000ba2  eb020282          ADD      r2,r2,r2,LSL #2       ;1755
000ba6  eb060242          ADD      r2,r6,r2,LSL #1       ;1755
000baa  440a              ADD      r2,r2,r1              ;1755
                  |L9.2988|
000bac  1c64              ADDS     r4,r4,#1              ;1755
000bae  b2a4              UXTH     r4,r4                 ;1751
000bb0  e015              B        |L9.3038|
                  |L9.2994|
000bb2  5d29              LDRB     r1,[r5,r4]            ;1742
000bb4  3930              SUBS     r1,r1,#0x30           ;1742
000bb6  eb010181          ADD      r1,r1,r1,LSL #2       ;1742
000bba  0049              LSLS     r1,r1,#1              ;1742
000bbc  ee001a10          VMOV     s0,r1                 ;1742
000bc0  1c64              ADDS     r4,r4,#1              ;1742
000bc2  b2a4              UXTH     r4,r4                 ;1742
000bc4  eeb88ac0          VCVT.F32.S32 s16,s0                ;1742
000bc8  e009              B        |L9.3038|
                  |L9.3018|
000bca  5d29              LDRB     r1,[r5,r4]            ;1746
000bcc  1c64              ADDS     r4,r4,#1              ;1746
000bce  3930              SUBS     r1,r1,#0x30           ;1746
000bd0  ee001a10          VMOV     s0,r1                 ;1746
000bd4  b2a4              UXTH     r4,r4                 ;1746
000bd6  eeb80ac0          VCVT.F32.S32 s0,s0                 ;1746
000bda  ee308a08          VADD.F32 s16,s0,s16            ;1746
                  |L9.3038|
000bde  1c40              ADDS     r0,r0,#1              ;1746
000be0  b2c0              UXTB     r0,r0                 ;1738
                  |L9.3042|
000be2  4298              CMP      r0,r3                 ;1738
000be4  d3d7              BCC      |L9.2966|
000be6  eebc0ac8          VCVT.U32.F32 s0,s16                ;1757
000bea  ee100a10          VMOV     r0,s0                 ;1757
000bee  b2c1              UXTB     r1,r0                 ;1757
000bf0  2000              MOVS     r0,#0                 ;1757
000bf2  e05d              B        |L9.3248|
                  |L9.3060|
000bf4  5d29              LDRB     r1,[r5,r4]            ;1763
000bf6  2201              MOVS     r2,#1                 ;1762
000bf8  293f              CMP      r1,#0x3f              ;1763
000bfa  d013              BEQ      |L9.3108|
000bfc  2100              MOVS     r1,#0                 ;1773
000bfe  4608              MOV      r0,r1                 ;1773
                  |L9.3072|
000c00  5d2b              LDRB     r3,[r5,r4]            ;1775
000c02  eb000080          ADD      r0,r0,r0,LSL #2       ;1775
000c06  1c64              ADDS     r4,r4,#1              ;1775
000c08  1c49              ADDS     r1,r1,#1              ;1775
000c0a  eb060040          ADD      r0,r6,r0,LSL #1       ;1775
000c0e  b2c9              UXTB     r1,r1                 ;1773
000c10  4418              ADD      r0,r0,r3              ;1775
000c12  b2a4              UXTH     r4,r4                 ;1775
000c14  4291              CMP      r1,r2                 ;1773
000c16  d3f3              BCC      |L9.3072|
000c18  2801              CMP      r0,#1                 ;1777
000c1a  f63fab5a          BHI      |L9.722|
000c1e  4968              LDR      r1,|L9.3520|
000c20  7008              STRB     r0,[r1,#0]            ;1784
000c22  e55a              B        |L9.1754|
                  |L9.3108|
000c24  7802              LDRB     r2,[r0,#0]            ;1765  ; C_DISCHARGE
000c26  192b              ADDS     r3,r5,r4              ;1765
000c28  f2af71b4          ADR      r1,|L9.1144|
000c2c  4618              MOV      r0,r3                 ;1765
000c2e  f7ffbb5a          B        |L9.742|
                  |L9.3122|
000c32  5d28              LDRB     r0,[r5,r4]            ;1797
000c34  2308              MOVS     r3,#8                 ;1796
000c36  283f              CMP      r0,#0x3f              ;1797
000c38  d040              BEQ      |L9.3260|
000c3a  2201              MOVS     r2,#1                 ;1806
000c3c  2100              MOVS     r1,#0                 ;1807
                  |L9.3134|
000c3e  b141              CBZ      r1,|L9.3154|
000c40  2904              CMP      r1,#4                 ;1809
000c42  d006              BEQ      |L9.3154|
000c44  1860              ADDS     r0,r4,r1              ;1811
000c46  5c28              LDRB     r0,[r5,r0]            ;1811
000c48  f7fffffe          BL       IsDigitChar
000c4c  2801              CMP      r0,#1                 ;1811
000c4e  d00e              BEQ      |L9.3182|
000c50  2200              MOVS     r2,#0                 ;1817
                  |L9.3154|
000c52  1c49              ADDS     r1,r1,#1              ;1817
000c54  b2c9              UXTB     r1,r1                 ;1807
000c56  4299              CMP      r1,r3                 ;1807
000c58  d3f1              BCC      |L9.3134|
000c5a  2a01              CMP      r2,#1                 ;1820
                  |L9.3164|
000c5c  f47fa9e9          BNE      |L9.50|
000c60  18e0              ADDS     r0,r4,r3              ;1820
000c62  5c28              LDRB     r0,[r5,r0]            ;1820
000c64  280d              CMP      r0,#0xd               ;1820
000c66  d1f9              BNE      |L9.3164|
000c68  2200              MOVS     r2,#0                 ;1825
000c6a  4610              MOV      r0,r2                 ;1826
000c6c  e018              B        |L9.3232|
                  |L9.3182|
000c6e  f0020201          AND      r2,r2,#1              ;1813
000c72  e7ee              B        |L9.3154|
                  |L9.3188|
000c74  b150              CBZ      r0,|L9.3212|
000c76  2804              CMP      r0,#4                 ;1833
000c78  d005              BEQ      |L9.3206|
000c7a  5d29              LDRB     r1,[r5,r4]            ;1839
000c7c  eb020282          ADD      r2,r2,r2,LSL #2       ;1839
000c80  eb060242          ADD      r2,r6,r2,LSL #1       ;1839
000c84  440a              ADD      r2,r2,r1              ;1839
                  |L9.3206|
000c86  1c64              ADDS     r4,r4,#1              ;1839
000c88  b2a4              UXTH     r4,r4                 ;1835
000c8a  e007              B        |L9.3228|
                  |L9.3212|
000c8c  5d29              LDRB     r1,[r5,r4]            ;1830
000c8e  1c64              ADDS     r4,r4,#1              ;1830
000c90  3930              SUBS     r1,r1,#0x30           ;1830
000c92  ee001a10          VMOV     s0,r1                 ;1830
000c96  b2a4              UXTH     r4,r4                 ;1830
000c98  eeb88ac0          VCVT.F32.S32 s16,s0                ;1830
                  |L9.3228|
000c9c  1c40              ADDS     r0,r0,#1              ;1830
000c9e  b2c0              UXTB     r0,r0                 ;1826
                  |L9.3232|
000ca0  4298              CMP      r0,r3                 ;1826
000ca2  d3e7              BCC      |L9.3188|
000ca4  eebc0ac8          VCVT.U32.F32 s0,s16                ;1841
000ca8  ee100a10          VMOV     r0,s0                 ;1841
000cac  b2c1              UXTB     r1,r0                 ;1841
000cae  2001              MOVS     r0,#1                 ;1841
                  |L9.3248|
000cb0  f7fffffe          BL       CalHandle
                  |L9.3252|
000cb4  f1b80f13          CMP      r8,#0x13              ;2044
000cb8  f4bfa9bb          BCS      |L9.50|
                  |L9.3260|
000cbc  e073              B        |L9.3494|
                  |L9.3262|
000cbe  5d28              LDRB     r0,[r5,r4]            ;1848
000cc0  2306              MOVS     r3,#6                 ;1847
000cc2  283f              CMP      r0,#0x3f              ;1848
000cc4  d018              BEQ      |L9.3320|
000cc6  2201              MOVS     r2,#1                 ;1857
000cc8  2100              MOVS     r1,#0                 ;1858
                  |L9.3274|
000cca  b141              CBZ      r1,|L9.3294|
000ccc  2904              CMP      r1,#4                 ;1860
000cce  d006              BEQ      |L9.3294|
000cd0  1860              ADDS     r0,r4,r1              ;1862
000cd2  5c28              LDRB     r0,[r5,r0]            ;1862
000cd4  f7fffffe          BL       IsDigitChar
000cd8  2801              CMP      r0,#1                 ;1862
000cda  d028              BEQ      |L9.3374|
000cdc  2200              MOVS     r2,#0                 ;1868
                  |L9.3294|
000cde  1c49              ADDS     r1,r1,#1              ;1868
000ce0  b2c9              UXTB     r1,r1                 ;1858
000ce2  4299              CMP      r1,r3                 ;1858
000ce4  d3f1              BCC      |L9.3274|
000ce6  2a01              CMP      r2,#1                 ;1871
000ce8  d1b8              BNE      |L9.3164|
000cea  18e0              ADDS     r0,r4,r3              ;1871
000cec  5c28              LDRB     r0,[r5,r0]            ;1871
000cee  280d              CMP      r0,#0xd               ;1871
000cf0  d1b4              BNE      |L9.3164|
000cf2  2200              MOVS     r2,#0                 ;1876
000cf4  4610              MOV      r0,r2                 ;1877
000cf6  e028              B        |L9.3402|
                  |L9.3320|
000cf8  eeb58ac0          VCMPE.F32 s16,#0.0              ;1850
000cfc  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1850
000d00  db01              BLT      |L9.3334|
000d02  202b              MOVS     r0,#0x2b              ;1850
000d04  e000              B        |L9.3336|
                  |L9.3334|
000d06  202d              MOVS     r0,#0x2d              ;1850
                  |L9.3336|
000d08  5528              STRB     r0,[r5,r4]            ;1850
000d0a  1c64              ADDS     r4,r4,#1              ;1850
000d0c  b2a4              UXTH     r4,r4                 ;1850
000d0e  ee180a10          VMOV     r0,s16                ;1851
000d12  f7fffffe          BL       __aeabi_f2d
000d16  ec410b10          VMOV     d0,r0,r1              ;1851
000d1a  1928              ADDS     r0,r5,r4              ;1851
000d1c  ec532b10          VMOV     r2,r3,d0              ;1851
000d20  a125              ADR      r1,|L9.3512|
000d22  f7fffffe          BL       __2sprintf
000d26  1da4              ADDS     r4,r4,#6              ;1851
                  |L9.3368|
000d28  b2a0              UXTH     r0,r4                 ;1852
000d2a  f7ffbab1          B        |L9.656|
                  |L9.3374|
000d2e  f0020201          AND      r2,r2,#1              ;1864
000d32  e7d4              B        |L9.3294|
                  |L9.3380|
000d34  5d29              LDRB     r1,[r5,r4]            ;1890
000d36  b188              CBZ      r0,|L9.3420|
000d38  eb020282          ADD      r2,r2,r2,LSL #2       ;1890
000d3c  eb060242          ADD      r2,r6,r2,LSL #1       ;1890
000d40  1c64              ADDS     r4,r4,#1              ;1890
000d42  440a              ADD      r2,r2,r1              ;1890
000d44  b2a4              UXTH     r4,r4                 ;1890
                  |L9.3398|
000d46  1c40              ADDS     r0,r0,#1              ;1890
000d48  b2c0              UXTB     r0,r0                 ;1877
                  |L9.3402|
000d4a  4298              CMP      r0,r3                 ;1877
000d4c  d3f2              BCC      |L9.3380|
000d4e  eebc0ac8          VCVT.U32.F32 s0,s16                ;1892
000d52  ee100a10          VMOV     r0,s0                 ;1892
000d56  b2c1              UXTB     r1,r0                 ;1892
000d58  2002              MOVS     r0,#2                 ;1892
000d5a  e7a9              B        |L9.3248|
                  |L9.3420|
000d5c  1c64              ADDS     r4,r4,#1              ;1892
000d5e  3930              SUBS     r1,r1,#0x30           ;1881
000d60  ee001a10          VMOV     s0,r1                 ;1881
000d64  b2a4              UXTH     r4,r4                 ;1881
000d66  eeb88ac0          VCVT.F32.S32 s16,s0                ;1881
000d6a  e7ec              B        |L9.3398|
                  |L9.3436|
000d6c  5d28              LDRB     r0,[r5,r4]            ;1898
000d6e  283f              CMP      r0,#0x3f              ;1898
000d70  d019              BEQ      |L9.3494|
000d72  2201              MOVS     r2,#1                 ;1907
000d74  2100              MOVS     r1,#0                 ;1908
000d76  4608              MOV      r0,r1                 ;1908
                  |L9.3448|
000d78  5d2b              LDRB     r3,[r5,r4]            ;1910
000d7a  eb000080          ADD      r0,r0,r0,LSL #2       ;1910
000d7e  1c64              ADDS     r4,r4,#1              ;1910
000d80  1c49              ADDS     r1,r1,#1              ;1910
000d82  eb060040          ADD      r0,r6,r0,LSL #1       ;1910
000d86  b2c9              UXTB     r1,r1                 ;1908
000d88  4418              ADD      r0,r0,r3              ;1910
000d8a  b2a4              UXTH     r4,r4                 ;1910
000d8c  4291              CMP      r1,r2                 ;1908
000d8e  d3f3              BCC      |L9.3448|
000d90  2801              CMP      r0,#1                 ;1912
000d92  f63faa9e          BHI      |L9.722|
000d96  490b              LDR      r1,|L9.3524|
000d98  7008              STRB     r0,[r1,#0]            ;1918
000d9a  490b              LDR      r1,|L9.3528|
000d9c  2001              MOVS     r0,#1                 ;1919
000d9e  7008              STRB     r0,[r1,#0]            ;1919
000da0  f7fffffe          BL       Write_Boot_Flag
000da4  e499              B        |L9.1754|
                  |L9.3494|
000da6  b033              ADD      sp,sp,#0xcc
000da8  1c64              ADDS     r4,r4,#1              ;1925
000daa  ecbd8b02          VPOP     {d8}
000dae  b2a0              UXTH     r0,r4                 ;2048
000db0  e8bd8ff0          POP      {r4-r11,pc}
;;;2050   
                          ENDP

                  |L9.3508|
                          DCD      ||.data||
                  |L9.3512|
000db8  2530332e          DCB      "%03.3f",0
000dbc  336600  
000dbf  00                DCB      0
                  |L9.3520|
                          DCD      overflag
                  |L9.3524|
                          DCD      jumpflag
                  |L9.3528|
                          DCD      bootflag

                          AREA ||i.SetErr_ACK||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  SetErr_ACK PROC
;;;967    
;;;968    u16 SetErr_ACK(char *buf, u8 addr ,u8 ucErr)
000000  b5f8              PUSH     {r3-r7,lr}
;;;969    {
000002  4604              MOV      r4,r0
;;;970    		u16 i=0;
;;;971    		u8 len = 0;
;;;972    		char stradd[3] = {0};
000004  2000              MOVS     r0,#0
;;;973    		int addlen=0;
;;;974    		memset(buf,0,sizeof(buf));
000006  9000              STR      r0,[sp,#0]
000008  6020              STR      r0,[r4,#0]
00000a  4616              MOV      r6,r2                 ;969
;;;975        	buf[i++] = ChrStartS;
00000c  203e              MOVS     r0,#0x3e
00000e  7020              STRB     r0,[r4,#0]
;;;976    		sprintf(stradd,"%d",addr);
000010  460a              MOV      r2,r1
000012  a11a              ADR      r1,|L10.124|
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       __2sprintf
;;;977    		addlen=strlen(stradd);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       strlen
000020  4605              MOV      r5,r0
;;;978    		strncat(&buf[i],stradd,addlen);
000022  1c60              ADDS     r0,r4,#1
000024  462a              MOV      r2,r5
000026  4669              MOV      r1,sp
000028  f7fffffe          BL       strncat
00002c  1c6d              ADDS     r5,r5,#1
;;;979    		i+=addlen;
00002e  b2a8              UXTH     r0,r5
;;;980    		buf[i++] = '/';
000030  212f              MOVS     r1,#0x2f
000032  5421              STRB     r1,[r4,r0]
000034  1c40              ADDS     r0,r0,#1
000036  b285              UXTH     r5,r0
;;;981    		switch(ucErr)
000038  2e01              CMP      r6,#1
00003a  d008              BEQ      |L10.78|
00003c  2e02              CMP      r6,#2
00003e  d001              BEQ      |L10.68|
000040  2e03              CMP      r6,#3
000042  d015              BEQ      |L10.112|
                  |L10.68|
;;;982            {
;;;983              case 1:         //
;;;984              	   len = 9;
;;;985              	   memmove(&buf[i],"PARA ERR!",len);   
;;;986              	   break;
;;;987    	      case 2:         //
;;;988              	   len = 8;
;;;989              	   memmove(&buf[i],"CMD ERR!",len);   
;;;990              	   break;
;;;991    	      case 3:         //
;;;992              	   len = 8;
;;;993              	   memmove(&buf[i],"REM ERR!",len);   
;;;994              	   break;
;;;995    		  default:    
;;;996                   len = 8;
000044  2608              MOVS     r6,#8
;;;997              	   memmove(&buf[i],"CMD ERR!",len);   
000046  1960              ADDS     r0,r4,r5
000048  4632              MOV      r2,r6
00004a  a10d              ADR      r1,|L10.128|
;;;998                   break;
00004c  e003              B        |L10.86|
                  |L10.78|
00004e  2609              MOVS     r6,#9                 ;984
000050  1960              ADDS     r0,r4,r5              ;985
000052  4632              MOV      r2,r6                 ;985
000054  a10d              ADR      r1,|L10.140|
                  |L10.86|
000056  f7fffffe          BL       __aeabi_memmove
;;;999    	    }
;;;1000   	    i+=len;
00005a  19a8              ADDS     r0,r5,r6
00005c  b280              UXTH     r0,r0
;;;1001   		buf[i++] = ChrEndR;
00005e  210d              MOVS     r1,#0xd
000060  5421              STRB     r1,[r4,r0]
000062  1c40              ADDS     r0,r0,#1
000064  b280              UXTH     r0,r0
;;;1002   		buf[i++] = ChrEndS;
000066  210a              MOVS     r1,#0xa
000068  5421              STRB     r1,[r4,r0]
00006a  1c40              ADDS     r0,r0,#1
00006c  b280              UXTH     r0,r0
;;;1003   		return i;
;;;1004   }
00006e  bdf8              POP      {r3-r7,pc}
                  |L10.112|
000070  2608              MOVS     r6,#8                 ;992
000072  1960              ADDS     r0,r4,r5              ;993
000074  4632              MOV      r2,r6                 ;993
000076  a108              ADR      r1,|L10.152|
000078  e7ed              B        |L10.86|
;;;1005   
                          ENDP

00007a  0000              DCW      0x0000
                  |L10.124|
00007c  256400            DCB      "%d",0
00007f  00                DCB      0
                  |L10.128|
000080  434d4420          DCB      "CMD ERR!",0
000084  45525221
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L10.140|
00008c  50415241          DCB      "PARA ERR!",0
000090  20455252
000094  2100    
000096  00                DCB      0
000097  00                DCB      0
                  |L10.152|
000098  52454d20          DCB      "REM ERR!",0
00009c  45525221
0000a0  00      
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0

                          AREA ||i.SetListPC||, CODE, READONLY, ALIGN=2

                  SetListPC PROC
;;;162    
;;;163    void SetListPC(void)
000000  4804              LDR      r0,|L11.20|
;;;164    {
000002  b510              PUSH     {r4,lr}
;;;165    	SetPowerC(Para.CDC_Limit_C);
000004  f8b00070          LDRH     r0,[r0,#0x70]  ; Para
000008  f7fffffe          BL       SetPowerC
;;;166    	listsend = 3;
00000c  4902              LDR      r1,|L11.24|
00000e  2003              MOVS     r0,#3
000010  7248              STRB     r0,[r1,#9]
;;;167    }
000012  bd10              POP      {r4,pc}
;;;168    
                          ENDP

                  |L11.20|
                          DCD      Para
                  |L11.24|
                          DCD      ||.data||

                          AREA ||i.SetListPS||, CODE, READONLY, ALIGN=2

                  SetListPS PROC
;;;169    
;;;170    void SetListPS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;171    {
;;;172    	if(mainswitch == 1)
000002  4c0f              LDR      r4,|L12.64|
000004  79a0              LDRB     r0,[r4,#6]  ; mainswitch
;;;173    	{
;;;174    		GPIO_SetBits(GPIOE,GPIO_Pin_2);
000006  4d0f              LDR      r5,|L12.68|
000008  2801              CMP      r0,#1                 ;172
00000a  d109              BNE      |L12.32|
00000c  2104              MOVS     r1,#4
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       GPIO_SetBits
;;;175    		Delay_ms(POWER_SW_DELAY);
000014  200a              MOVS     r0,#0xa
000016  f7fffffe          BL       Delay_ms
;;;176    		PowerSwitch(mainswitch);
00001a  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00001c  f7fffffe          BL       PowerSwitch
                  |L12.32|
;;;177    	}
;;;178    	
;;;179    	if(mainswitch == 0)
000020  79a0              LDRB     r0,[r4,#6]  ; mainswitch
000022  b948              CBNZ     r0,|L12.56|
;;;180    	{
;;;181    		PowerSwitch(mainswitch);
000024  79a0              LDRB     r0,[r4,#6]  ; mainswitch
000026  f7fffffe          BL       PowerSwitch
;;;182    		Delay_ms(POWER_SW_DELAY);
00002a  200a              MOVS     r0,#0xa
00002c  f7fffffe          BL       Delay_ms
;;;183    		GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
000030  2104              MOVS     r1,#4
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       GPIO_ResetBits
                  |L12.56|
;;;184    	}
;;;185    	
;;;186    	listsend = 0;
000038  2000              MOVS     r0,#0
00003a  7260              STRB     r0,[r4,#9]
;;;187    }
00003c  bd70              POP      {r4-r6,pc}
;;;188    
                          ENDP

00003e  0000              DCW      0x0000
                  |L12.64|
                          DCD      ||.data||
                  |L12.68|
                          DCD      0x40021000

                          AREA ||i.SetListPV||, CODE, READONLY, ALIGN=2

                  SetListPV PROC
;;;156    }
;;;157    void SetListPV(void)
000000  4804              LDR      r0,|L13.20|
;;;158    {
000002  b510              PUSH     {r4,lr}
;;;159    	SetPowerV(Para.CDC_OutPut_V);
000004  6ec0              LDR      r0,[r0,#0x6c]  ; Para
000006  f7fffffe          BL       SetPowerV
;;;160    	listsend = 2;
00000a  4903              LDR      r1,|L13.24|
00000c  2002              MOVS     r0,#2
00000e  7248              STRB     r0,[r1,#9]
;;;161    }
000010  bd10              POP      {r4,pc}
;;;162    
                          ENDP

000012  0000              DCW      0x0000
                  |L13.20|
                          DCD      Para
                  |L13.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerC||, CODE, READONLY, ALIGN=2

                  SetPowerC PROC
;;;115    
;;;116    void SetPowerC(vu16 powc)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;117    {
;;;118    	MasterSendbuf[0] = 0x01;
000002  4c12              LDR      r4,|L14.76|
000004  2001              MOVS     r0,#1
000006  7020              STRB     r0,[r4,#0]
;;;119    	MasterSendbuf[1] = 0x06;
000008  2006              MOVS     r0,#6
00000a  7060              STRB     r0,[r4,#1]
;;;120    	MasterSendbuf[2] = 0x00;
00000c  2000              MOVS     r0,#0
00000e  70a0              STRB     r0,[r4,#2]
;;;121    	MasterSendbuf[3] = 0x31;
000010  2031              MOVS     r0,#0x31
000012  70e0              STRB     r0,[r4,#3]
;;;122    	MasterSendbuf[4] = (u8)(powc/10>>8);
000014  f8bd1000          LDRH     r1,[sp,#0]
000018  200a              MOVS     r0,#0xa
00001a  fbb1f1f0          UDIV     r1,r1,r0
00001e  0a09              LSRS     r1,r1,#8
000020  7121              STRB     r1,[r4,#4]
;;;123    	MasterSendbuf[5] = (u8)(powc/10);
000022  f8bd1000          LDRH     r1,[sp,#0]
000026  fbb1f0f0          UDIV     r0,r1,r0
00002a  7160              STRB     r0,[r4,#5]
;;;124    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00002c  2106              MOVS     r1,#6
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       Hardware_CRC
000034  71a0              STRB     r0,[r4,#6]
;;;125    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000036  2106              MOVS     r1,#6
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       Hardware_CRC
00003e  0a00              LSRS     r0,r0,#8
000040  71e0              STRB     r0,[r4,#7]
;;;126    	USART3WriteDMA(8);
000042  e8bd4038          POP      {r3-r5,lr}
000046  2008              MOVS     r0,#8
000048  f7ffbffe          B.W      USART3WriteDMA
;;;127    }
;;;128    
                          ENDP

                  |L14.76|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.SetPowerModeC||, CODE, READONLY, ALIGN=2

                  SetPowerModeC PROC
;;;134    
;;;135    void SetPowerModeC(void)
000000  4804              LDR      r0,|L15.20|
;;;136    {
000002  b510              PUSH     {r4,lr}
;;;137    	SetPowerC(Para.POWER_Limit_C);
000004  f8b00058          LDRH     r0,[r0,#0x58]  ; Para
000008  f7fffffe          BL       SetPowerC
;;;138    	sendwait = 3;
00000c  4902              LDR      r1,|L15.24|
00000e  2003              MOVS     r0,#3
000010  7208              STRB     r0,[r1,#8]
;;;139    }
000012  bd10              POP      {r4,pc}
;;;140    
                          ENDP

                  |L15.20|
                          DCD      Para
                  |L15.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerModeS||, CODE, READONLY, ALIGN=2

                  SetPowerModeS PROC
;;;140    
;;;141    void SetPowerModeS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;142    {
;;;143    	if(mainswitch == 1)
000002  4c10              LDR      r4,|L16.68|
000004  79a0              LDRB     r0,[r4,#6]  ; mainswitch
;;;144    	{
;;;145    		GPIO_SetBits(GPIOE,GPIO_Pin_2);
000006  4d10              LDR      r5,|L16.72|
000008  2801              CMP      r0,#1                 ;143
00000a  d002              BEQ      |L16.18|
;;;146    		Delay_ms(POWER_SW_DELAY);
;;;147    		PowerSwitch(mainswitch);
;;;148    	}else if(mainswitch == 0)
00000c  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00000e  b158              CBZ      r0,|L16.40|
000010  e014              B        |L16.60|
                  |L16.18|
000012  2104              MOVS     r1,#4                 ;145
000014  4628              MOV      r0,r5                 ;145
000016  f7fffffe          BL       GPIO_SetBits
00001a  200a              MOVS     r0,#0xa               ;146
00001c  f7fffffe          BL       Delay_ms
000020  79a0              LDRB     r0,[r4,#6]            ;147  ; mainswitch
000022  f7fffffe          BL       PowerSwitch
000026  e009              B        |L16.60|
                  |L16.40|
;;;149    	{
;;;150    		PowerSwitch(mainswitch);
000028  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00002a  f7fffffe          BL       PowerSwitch
;;;151    		Delay_ms(POWER_SW_DELAY);
00002e  200a              MOVS     r0,#0xa
000030  f7fffffe          BL       Delay_ms
;;;152    		GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
000034  2104              MOVS     r1,#4
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       GPIO_ResetBits
                  |L16.60|
;;;153    	}
;;;154    	
;;;155    	sendwait = 0;
00003c  2000              MOVS     r0,#0
00003e  7220              STRB     r0,[r4,#8]
;;;156    }
000040  bd70              POP      {r4-r6,pc}
;;;157    void SetListPV(void)
                          ENDP

000042  0000              DCW      0x0000
                  |L16.68|
                          DCD      ||.data||
                  |L16.72|
                          DCD      0x40021000

                          AREA ||i.SetPowerModeV||, CODE, READONLY, ALIGN=2

                  SetPowerModeV PROC
;;;128    
;;;129    void SetPowerModeV(void)
000000  4804              LDR      r0,|L17.20|
;;;130    {
000002  b510              PUSH     {r4,lr}
;;;131    	SetPowerV(Para.POWER_OutPut_V);
000004  6d40              LDR      r0,[r0,#0x54]  ; Para
000006  f7fffffe          BL       SetPowerV
;;;132    	sendwait = 2;
00000a  4903              LDR      r1,|L17.24|
00000c  2002              MOVS     r0,#2
00000e  7208              STRB     r0,[r1,#8]
;;;133    }
000010  bd10              POP      {r4,pc}
;;;134    
                          ENDP

000012  0000              DCW      0x0000
                  |L17.20|
                          DCD      Para
                  |L17.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerV||, CODE, READONLY, ALIGN=2

                  SetPowerV PROC
;;;102    }
;;;103    void SetPowerV(vu32 powv)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;104    {
;;;105    	MasterSendbuf[0] = 0x01;
000002  4c11              LDR      r4,|L18.72|
000004  2001              MOVS     r0,#1
000006  7020              STRB     r0,[r4,#0]
;;;106    	MasterSendbuf[1] = 0x06;
000008  2006              MOVS     r0,#6
00000a  7060              STRB     r0,[r4,#1]
;;;107    	MasterSendbuf[2] = 0x00;
00000c  2000              MOVS     r0,#0
00000e  70a0              STRB     r0,[r4,#2]
;;;108    	MasterSendbuf[3] = 0x30;
000010  2030              MOVS     r0,#0x30
000012  70e0              STRB     r0,[r4,#3]
;;;109    	MasterSendbuf[4] = (u8)(powv/10>>8);
000014  9900              LDR      r1,[sp,#0]
000016  200a              MOVS     r0,#0xa
000018  fbb1f1f0          UDIV     r1,r1,r0
00001c  0a09              LSRS     r1,r1,#8
00001e  7121              STRB     r1,[r4,#4]
;;;110    	MasterSendbuf[5] = (u8)(powv/10);
000020  9900              LDR      r1,[sp,#0]
000022  fbb1f0f0          UDIV     r0,r1,r0
000026  7160              STRB     r0,[r4,#5]
;;;111    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
000028  2106              MOVS     r1,#6
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       Hardware_CRC
000030  71a0              STRB     r0,[r4,#6]
;;;112    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000032  2106              MOVS     r1,#6
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       Hardware_CRC
00003a  0a00              LSRS     r0,r0,#8
00003c  71e0              STRB     r0,[r4,#7]
;;;113    	USART3WriteDMA(8);
00003e  e8bd4038          POP      {r3-r5,lr}
000042  2008              MOVS     r0,#8
000044  f7ffbffe          B.W      USART3WriteDMA
;;;114    }
;;;115    
                          ENDP

                  |L18.72|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.UART1_Send||, CODE, READONLY, ALIGN=2

                  UART1_Send PROC
;;;2442   
;;;2443   void UART1_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2444   {
;;;2445   	static vu8 UART_Buffer_Send_pointer=0;
;;;2446   		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L19.72|
000004  78e0              LDRB     r0,[r4,#3]  ; UART_Buffer_Send_pointer
000006  7921              LDRB     r1,[r4,#4]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L19.56|
;;;2447            {
;;;2448   				 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L19.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L19.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L19.54|
;;;2449   				 {
;;;2450   					USART_SendData(USART1,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  78e1              LDRB     r1,[r4,#3]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  4d0d              LDR      r5,|L19.84|
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       USART_SendData
                  |L19.36|
;;;2451   					while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);//等待发送完成
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L19.36|
;;;2452   					UART_Buffer_Send_pointer++;
000030  78e0              LDRB     r0,[r4,#3]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  70e0              STRB     r0,[r4,#3]
                  |L19.54|
;;;2453   				 }
;;;2454            }
;;;2455   		else 
;;;2456   		{
;;;2457   			UART_Buffer_Send_pointer=0;
;;;2458   			UART_SEND_flag=0;//发送完成一帧数据
;;;2459   		}
;;;2460   }
000036  bd70              POP      {r4-r6,pc}
                  |L19.56|
000038  2000              MOVS     r0,#0                 ;2457
00003a  70e0              STRB     r0,[r4,#3]            ;2457
00003c  4806              LDR      r0,|L19.88|
00003e  6801              LDR      r1,[r0,#0]            ;2458  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;2458
000044  6001              STR      r1,[r0,#0]            ;2458  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;2461   
                          ENDP

                  |L19.72|
                          DCD      ||.data||
                  |L19.76|
                          DCD      ||area_number.31||
                  |L19.80|
                          DCD      ADDR
                  |L19.84|
                          DCD      0x40011000
                  |L19.88|
                          DCD      flagA

                          AREA ||i.UART2_Send||, CODE, READONLY, ALIGN=2

                  UART2_Send PROC
;;;2423   }
;;;2424   void UART2_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2425   {
;;;2426   	static vu8 UART_Buffer_Send_pointer=0;
;;;2427   		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L20.72|
000004  78a0              LDRB     r0,[r4,#2]  ; UART_Buffer_Send_pointer
000006  7921              LDRB     r1,[r4,#4]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L20.56|
;;;2428            {
;;;2429   					 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L20.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L20.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L20.54|
;;;2430   					 {
;;;2431   						USART_SendData(USART2,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  78a1              LDRB     r1,[r4,#2]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  480d              LDR      r0,|L20.84|
00001e  f7fffffe          BL       USART_SendData
;;;2432   						while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);//等待发送完成
000022  4d0d              LDR      r5,|L20.88|
                  |L20.36|
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L20.36|
;;;2433   						UART_Buffer_Send_pointer++;
000030  78a0              LDRB     r0,[r4,#2]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  70a0              STRB     r0,[r4,#2]
                  |L20.54|
;;;2434   					}
;;;2435            }
;;;2436   		else 
;;;2437   		{
;;;2438   			UART_Buffer_Send_pointer=0;
;;;2439   			UART_SEND_flag=0;//发送完成一帧数据
;;;2440   		}
;;;2441   }
000036  bd70              POP      {r4-r6,pc}
                  |L20.56|
000038  2000              MOVS     r0,#0                 ;2438
00003a  70a0              STRB     r0,[r4,#2]            ;2438
00003c  4807              LDR      r0,|L20.92|
00003e  6801              LDR      r1,[r0,#0]            ;2439  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;2439
000044  6001              STR      r1,[r0,#0]            ;2439  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;2442   
                          ENDP

                  |L20.72|
                          DCD      ||.data||
                  |L20.76|
                          DCD      ||area_number.31||
                  |L20.80|
                          DCD      ADDR
                  |L20.84|
                          DCD      0x40004400
                  |L20.88|
                          DCD      0x40011000
                  |L20.92|
                          DCD      flagA

                          AREA ||i.USART2_Configuration||, CODE, READONLY, ALIGN=2

                  USART2_Configuration PROC
;;;2119   
;;;2120   void USART2_Configuration(void)//串口初始化函数
000000  b570              PUSH     {r4-r6,lr}
;;;2121   {  
;;;2122   	GPIO_InitTypeDef GPIO_InitStructure;
;;;2123   	USART_InitTypeDef USART_InitStructure;
;;;2124   	
;;;2125   	/* config USART1 clock */
;;;2126   	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
000002  2101              MOVS     r1,#1
000004  b088              SUB      sp,sp,#0x20           ;2121
000006  0448              LSLS     r0,r1,#17
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;2127   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);
00000c  4e2a              LDR      r6,|L21.184|
00000e  2207              MOVS     r2,#7
000010  2102              MOVS     r1,#2
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2128   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);
000018  2207              MOVS     r2,#7
00001a  2103              MOVS     r1,#3
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2129   	/* USART1 GPIO config */
;;;2130   	/* Configure USART1 Tx (PA.02) as alternate function push-pull */
;;;2131   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;2132   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000022  2502              MOVS     r5,#2
000024  2004              MOVS     r0,#4                 ;2131
000026  f88d5004          STRB     r5,[sp,#4]
;;;2133   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
00002c  9000              STR      r0,[sp,#0]            ;2132
00002e  f88d4006          STRB     r4,[sp,#6]
;;;2134   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f88d5005          STRB     r5,[sp,#5]
;;;2135   	GPIO_Init(GPIOA, &GPIO_InitStructure);    
000036  4669              MOV      r1,sp
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GPIO_Init
;;;2136   	/* Configure USART1 Rx (PA.03) as input floating */
;;;2137   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
00003e  2008              MOVS     r0,#8
;;;2138   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000040  9000              STR      r0,[sp,#0]
000042  f88d5004          STRB     r5,[sp,#4]
;;;2139   	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;2140   	
;;;2141   	/* USART1 mode config */
;;;2142   	USART_InitStructure.USART_BaudRate = 115200;
00004e  f44f30e1          MOV      r0,#0x1c200
;;;2143   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000052  9002              STR      r0,[sp,#8]
;;;2144   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2145   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000054  f8ad4010          STRH     r4,[sp,#0x10]
;;;2146   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2147   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
;;;2148   	USART_Init(USART2, &USART_InitStructure);
00005a  4d18              LDR      r5,|L21.188|
00005c  f8ad400c          STRH     r4,[sp,#0xc]          ;2143
000060  f8ad0012          STRH     r0,[sp,#0x12]         ;2147
000064  f8ad400e          STRH     r4,[sp,#0xe]          ;2144
000068  f8ad4014          STRH     r4,[sp,#0x14]         ;2146
00006c  a902              ADD      r1,sp,#8
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       USART_Init
;;;2149   	
;;;2150   	/******使能串口接收中断******************/
;;;2151   	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
000074  2201              MOVS     r2,#1
000076  f2405125          MOV      r1,#0x525
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_ITConfig
;;;2152   //	USART_ITConfig(USART2, USART_IT_ORE, ENABLE);	
;;;2153   	USART_Cmd(USART2, ENABLE);//使能串口1
000080  2101              MOVS     r1,#1
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USART_Cmd
;;;2154     USART_ClearFlag(USART2, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       USART_ClearFlag
000090  f44f60e0          MOV      r0,#0x700
000094  f7fffffe          BL       NVIC_PriorityGroupConfig
000098  2026              MOVS     r0,#0x26
00009a  f88d0018          STRB     r0,[sp,#0x18]
00009e  f88d4019          STRB     r4,[sp,#0x19]
0000a2  2001              MOVS     r0,#1
0000a4  f88d001a          STRB     r0,[sp,#0x1a]
0000a8  f88d001b          STRB     r0,[sp,#0x1b]
0000ac  a806              ADD      r0,sp,#0x18
0000ae  f7fffffe          BL       NVIC_Init
;;;2155     
;;;2156     USART2_NVIC_Config();//串口中断配置
;;;2157   }
0000b2  b008              ADD      sp,sp,#0x20
0000b4  bd70              POP      {r4-r6,pc}
;;;2158   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L21.184|
                          DCD      0x40020000
                  |L21.188|
                          DCD      0x40004400

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;2381   
;;;2382   void USART2_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2383   {
;;;2384   	u8 Res;
;;;2385    	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
000002  4c1c              LDR      r4,|L22.116|
000004  f2405525          MOV      r5,#0x525
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       USART_GetITStatus
000010  2800              CMP      r0,#0
000012  d013              BEQ      |L22.60|
;;;2386   	{
;;;2387   		USART_ClearITPendingBit(USART2,USART_IT_RXNE);
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       USART_ClearITPendingBit
;;;2388   		Res=USART_ReceiveData(USART2);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       USART_ReceiveData
;;;2389   
;;;2390   		if((USART_RX_STA&0x8000)==0)//接收未完成
000022  4a15              LDR      r2,|L22.120|
000024  b2c1              UXTB     r1,r0                 ;2388
000026  89d0              LDRH     r0,[r2,#0xe]  ; USART_RX_STA
000028  0403              LSLS     r3,r0,#16
00002a  d407              BMI      |L22.60|
;;;2391   		{
;;;2392   		if(USART_RX_STA&0x4000)//接收到了0x0d
;;;2393   		{
;;;2394   			if(Res!=0x0a)
;;;2395   				USART_RX_STA=0;//接收错误,重新开始
;;;2396   			else 
;;;2397   			{
;;;2398   		//		SerialRemoteHandleL(USART_RX_STA,USART_RX_BUF);
;;;2399   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
00002c  4b13              LDR      r3,|L22.124|
00002e  0445              LSLS     r5,r0,#17             ;2392
000030  f04f0400          MOV      r4,#0                 ;2392
000034  d50b              BPL      |L22.78|
000036  290a              CMP      r1,#0xa               ;2394
000038  d001              BEQ      |L22.62|
                  |L22.58|
00003a  81d4              STRH     r4,[r2,#0xe]          ;2395
                  |L22.60|
;;;2400   				USART_RX_STA++;
;;;2401   				USART_RX_CNT = USART_RX_STA;
;;;2402   				USART_RX_STA|=0x8000;	//接收完成了 			  //接收到回车的后字节  置位状态寄存器 
;;;2403   			}
;;;2404   		}
;;;2405   		else //还没收到0X0D
;;;2406   		{	
;;;2407   			if(Res==0x0d)
;;;2408   			{
;;;2409   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
;;;2410   				USART_RX_STA++;	
;;;2411   				USART_RX_STA|=0x4000;					 //接收到回车的前一字节  置位状态寄存器
;;;2412   			}
;;;2413   			else
;;;2414   				{
;;;2415   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
;;;2416   					USART_RX_STA++;									//长度+1 为下一次做准备
;;;2417   				if(USART_RX_STA>(USART_REC_LEN-1))
;;;2418   					USART_RX_STA=0;//接收数据错误,重新开始接收	  
;;;2419   				}		 
;;;2420   			}
;;;2421   		} 
;;;2422   	}
;;;2423   }
00003c  bd70              POP      {r4-r6,pc}
                  |L22.62|
00003e  f3c0040d          UBFX     r4,r0,#0,#14          ;2399
000042  1c40              ADDS     r0,r0,#1              ;2399
000044  5519              STRB     r1,[r3,r4]            ;2399
000046  8210              STRH     r0,[r2,#0x10]         ;2401
000048  f4404000          ORR      r0,r0,#0x8000         ;2402
00004c  e010              B        |L22.112|
                  |L22.78|
00004e  290d              CMP      r1,#0xd               ;2407
000050  d008              BEQ      |L22.100|
000052  f3c0050d          UBFX     r5,r0,#0,#14          ;2415
000056  1c40              ADDS     r0,r0,#1              ;2415
000058  b280              UXTH     r0,r0                 ;2416
00005a  5559              STRB     r1,[r3,r5]            ;2415
00005c  81d0              STRH     r0,[r2,#0xe]          ;2416
00005e  28c7              CMP      r0,#0xc7              ;2417
000060  d8eb              BHI      |L22.58|
000062  bd70              POP      {r4-r6,pc}
                  |L22.100|
000064  f3c0040d          UBFX     r4,r0,#0,#14          ;2409
000068  1c40              ADDS     r0,r0,#1              ;2409
00006a  5519              STRB     r1,[r3,r4]            ;2409
00006c  f4404080          ORR      r0,r0,#0x4000         ;2411
                  |L22.112|
000070  81d0              STRH     r0,[r2,#0xe]          ;2402
000072  bd70              POP      {r4-r6,pc}
;;;2424   void UART2_Send(void)
                          ENDP

                  |L22.116|
                          DCD      0x40004400
                  |L22.120|
                          DCD      ||.data||
                  |L22.124|
                          DCD      ||area_number.31||+0x14

                          AREA ||i.USART3HANDLE||, CODE, READONLY, ALIGN=2

                  USART3HANDLE PROC
;;;214    
;;;215    void USART3HANDLE(void)
000000  b538              PUSH     {r3-r5,lr}
;;;216    {
;;;217    	vu16 crcres;
;;;218    
;;;219    	if(MasterRecbuf[0] == 0x01)
000002  4c28              LDR      r4,|L23.164|
;;;220    	{
;;;221    		if(MasterRecbuf[1] == 0x03)
;;;222    		{
;;;223    			crcres = (MasterRecbuf[8] << 8) + MasterRecbuf[7];
;;;224    			if(crcres == Hardware_CRC(MasterRecbuf,7))
;;;225    			{
;;;226    				 
;;;227    				Para.CPOW_Voltage = (MasterRecbuf[3] << 8) + MasterRecbuf[4];
;;;228    				Para.CCurrent = (MasterRecbuf[5] << 8) + MasterRecbuf[6];
;;;229    				memset(MasterRecbuf,0,sizeof(MasterRecbuf));
;;;230    			}
;;;231    				if(sendwait == 3)
000004  4d28              LDR      r5,|L23.168|
000006  7820              LDRB     r0,[r4,#0]            ;219  ; MasterRecbuf
000008  2801              CMP      r0,#1                 ;219
00000a  d148              BNE      |L23.158|
00000c  7860              LDRB     r0,[r4,#1]            ;221  ; MasterRecbuf
00000e  2803              CMP      r0,#3                 ;221
000010  d002              BEQ      |L23.24|
;;;232    				{
;;;233    					SetPowerModeS();
;;;234    				}
;;;235    				if(sendwait == 2)
;;;236    				{
;;;237    					SetPowerModeC();
;;;238    				}
;;;239    				if(sendwait == 1)
;;;240    				{
;;;241    					SetPowerModeV();
;;;242    				}
;;;243    				if(listsend == 3)
;;;244    				{
;;;245    					SetListPS();
;;;246    				}
;;;247    				if(listsend == 2)
;;;248    				{
;;;249    					SetListPC();
;;;250    				}
;;;251    				if(listsend == 1)
;;;252    				{
;;;253    					SetListPV();
;;;254    				}
;;;255    		}else if(MasterRecbuf[1] == 0x06){
000012  2806              CMP      r0,#6
000014  d03c              BEQ      |L23.144|
000016  e042              B        |L23.158|
                  |L23.24|
000018  79e1              LDRB     r1,[r4,#7]            ;223  ; MasterRecbuf
00001a  7a20              LDRB     r0,[r4,#8]            ;223  ; MasterRecbuf
00001c  eb012000          ADD      r0,r1,r0,LSL #8       ;223
000020  f8ad0000          STRH     r0,[sp,#0]            ;223
000024  2107              MOVS     r1,#7                 ;224
000026  481f              LDR      r0,|L23.164|
000028  f7fffffe          BL       Hardware_CRC
00002c  f8bd1000          LDRH     r1,[sp,#0]            ;224
000030  4288              CMP      r0,r1                 ;224
000032  d10e              BNE      |L23.82|
000034  7920              LDRB     r0,[r4,#4]            ;227  ; MasterRecbuf
000036  78e1              LDRB     r1,[r4,#3]            ;227  ; MasterRecbuf
000038  eb002101          ADD      r1,r0,r1,LSL #8       ;227
00003c  481b              LDR      r0,|L23.172|
00003e  6281              STR      r1,[r0,#0x28]         ;227  ; Para
000040  79a1              LDRB     r1,[r4,#6]            ;228  ; MasterRecbuf
000042  7962              LDRB     r2,[r4,#5]            ;228  ; MasterRecbuf
000044  eb012102          ADD      r1,r1,r2,LSL #8       ;228
000048  6301              STR      r1,[r0,#0x30]         ;228  ; Para
00004a  2180              MOVS     r1,#0x80              ;229
00004c  4815              LDR      r0,|L23.164|
00004e  f7fffffe          BL       __aeabi_memclr
                  |L23.82|
000052  7a28              LDRB     r0,[r5,#8]            ;231  ; sendwait
000054  2803              CMP      r0,#3                 ;231
000056  d101              BNE      |L23.92|
000058  f7fffffe          BL       SetPowerModeS
                  |L23.92|
00005c  7a28              LDRB     r0,[r5,#8]            ;235  ; sendwait
00005e  2802              CMP      r0,#2                 ;235
000060  d101              BNE      |L23.102|
000062  f7fffffe          BL       SetPowerModeC
                  |L23.102|
000066  7a28              LDRB     r0,[r5,#8]            ;239  ; sendwait
000068  2801              CMP      r0,#1                 ;239
00006a  d101              BNE      |L23.112|
00006c  f7fffffe          BL       SetPowerModeV
                  |L23.112|
000070  7a68              LDRB     r0,[r5,#9]            ;243  ; listsend
000072  2803              CMP      r0,#3                 ;243
000074  d101              BNE      |L23.122|
000076  f7fffffe          BL       SetListPS
                  |L23.122|
00007a  7a68              LDRB     r0,[r5,#9]            ;247  ; listsend
00007c  2802              CMP      r0,#2                 ;247
00007e  d101              BNE      |L23.132|
000080  f7fffffe          BL       SetListPC
                  |L23.132|
000084  7a68              LDRB     r0,[r5,#9]            ;251  ; listsend
000086  2801              CMP      r0,#1                 ;251
000088  d109              BNE      |L23.158|
00008a  f7fffffe          BL       SetListPV
00008e  e006              B        |L23.158|
                  |L23.144|
;;;256    			memset(MasterRecbuf,0,sizeof(MasterRecbuf));
000090  2180              MOVS     r1,#0x80
000092  4804              LDR      r0,|L23.164|
000094  f7fffffe          BL       __aeabi_memclr
;;;257    			watchtest ++;
000098  6d68              LDR      r0,[r5,#0x54]  ; watchtest
00009a  1c40              ADDS     r0,r0,#1
00009c  6568              STR      r0,[r5,#0x54]  ; watchtest
                  |L23.158|
;;;258    		}
;;;259    	}	
;;;260    
;;;261    	
;;;262    	USART3_Recive_flg = 0;
00009e  2000              MOVS     r0,#0
0000a0  7068              STRB     r0,[r5,#1]
;;;263    }
0000a2  bd38              POP      {r3-r5,pc}
;;;264    
                          ENDP

                  |L23.164|
                          DCD      ||area_number.31||+0x15c
                  |L23.168|
                          DCD      ||.data||
                  |L23.172|
                          DCD      Para

                          AREA ||i.USART3WriteDMA||, CODE, READONLY, ALIGN=2

                  USART3WriteDMA PROC
;;;2324   
;;;2325   void USART3WriteDMA(u16 len)
000000  b570              PUSH     {r4-r6,lr}
;;;2326   {
000002  4605              MOV      r5,r0
;;;2327       USART_ClearFlag(USART3, USART_FLAG_TC);     //串口发送准备
000004  2140              MOVS     r1,#0x40
000006  4809              LDR      r0,|L24.44|
000008  f7fffffe          BL       USART_ClearFlag
;;;2328   	DMA_Cmd(DMA1_Stream3, DISABLE);//关闭DMA 数据流3
00000c  4c08              LDR      r4,|L24.48|
00000e  2100              MOVS     r1,#0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       DMA_Cmd
;;;2329       DMA_SetCurrDataCounter(DMA1_Stream3,len);//设置DMA发生长度
000016  4629              MOV      r1,r5
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       DMA_SetCurrDataCounter
;;;2330   	DMA_Cmd(DMA1_Stream3, ENABLE);// 打开DMA 数据流3
00001e  4620              MOV      r0,r4
000020  e8bd4070          POP      {r4-r6,lr}
000024  2101              MOVS     r1,#1
000026  f7ffbffe          B.W      DMA_Cmd
;;;2331      
;;;2332   }
;;;2333   
                          ENDP

00002a  0000              DCW      0x0000
                  |L24.44|
                          DCD      0x40004800
                  |L24.48|
                          DCD      0x40026058

                          AREA ||i.USART3_Configuration||, CODE, READONLY, ALIGN=2

                  USART3_Configuration PROC
;;;2271   
;;;2272   void USART3_Configuration()//???????
000000  b570              PUSH     {r4-r6,lr}
;;;2273   {  
;;;2274       GPIO_InitTypeDef GPIO_InitStructure;
;;;2275   	USART_InitTypeDef USART_InitStructure;
;;;2276   	
;;;2277   	/* config USART1 clock */
;;;2278   	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
000002  2101              MOVS     r1,#1
000004  b088              SUB      sp,sp,#0x20           ;2273
000006  0488              LSLS     r0,r1,#18
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;2279   //    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE); //?? GPIOA ??
;;;2280       
;;;2281   	GPIO_PinAFConfig(GPIOD,GPIO_PinSource8,GPIO_AF_USART3);
00000c  4c2a              LDR      r4,|L25.184|
00000e  2207              MOVS     r2,#7
000010  2108              MOVS     r1,#8
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2282   	GPIO_PinAFConfig(GPIOD,GPIO_PinSource9,GPIO_AF_USART3);
000018  2207              MOVS     r2,#7
00001a  2109              MOVS     r1,#9
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2283       
;;;2284   
;;;2285       
;;;2286       
;;;2287   	/* USART1 GPIO config */
;;;2288   	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;2289   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
000022  15a0              ASRS     r0,r4,#22
;;;2290   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000024  2502              MOVS     r5,#2
000026  9004              STR      r0,[sp,#0x10]
000028  f88d5014          STRB     r5,[sp,#0x14]
;;;2291   //     GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //??????
;;;2292   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00002c  f88d5015          STRB     r5,[sp,#0x15]
;;;2293   	GPIO_Init(GPIOD, &GPIO_InitStructure);    
000030  a904              ADD      r1,sp,#0x10
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       GPIO_Init
;;;2294   	/* Configure USART1 Rx (PA.10) as input floating */
;;;2295   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
000038  1560              ASRS     r0,r4,#21
;;;2296       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00003a  9004              STR      r0,[sp,#0x10]
00003c  f88d5014          STRB     r5,[sp,#0x14]
;;;2297   	GPIO_Init(GPIOD, &GPIO_InitStructure);
000040  a904              ADD      r1,sp,#0x10
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       GPIO_Init
;;;2298       
;;;2299   
;;;2300   	
;;;2301   	/* USART1 mode config */
;;;2302   	USART_InitStructure.USART_BaudRate = 9600;
;;;2303   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000048  2400              MOVS     r4,#0
00004a  f44f5016          MOV      r0,#0x2580            ;2302
00004e  9000              STR      r0,[sp,#0]
;;;2304   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2305   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000050  f8ad4008          STRH     r4,[sp,#8]
;;;2306   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2307   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000054  200c              MOVS     r0,#0xc
;;;2308   	USART_Init(USART3, &USART_InitStructure);
000056  4e19              LDR      r6,|L25.188|
000058  f8ad4004          STRH     r4,[sp,#4]            ;2303
00005c  f8ad000a          STRH     r0,[sp,#0xa]          ;2307
000060  f8ad4006          STRH     r4,[sp,#6]            ;2304
000064  f8ad400c          STRH     r4,[sp,#0xc]          ;2306
000068  4669              MOV      r1,sp
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       USART_Init
;;;2309       
;;;2310   
;;;2311   	
;;;2312   	/******????????******************/
;;;2313   	USART_ITConfig(USART3, USART_IT_IDLE, ENABLE);
000070  2201              MOVS     r2,#1
000072  f2404124          MOV      r1,#0x424
000076  4630              MOV      r0,r6
000078  f7fffffe          BL       USART_ITConfig
00007c  f44f60e0          MOV      r0,#0x700
000080  f7fffffe          BL       NVIC_PriorityGroupConfig
000084  2027              MOVS     r0,#0x27
000086  f88d0018          STRB     r0,[sp,#0x18]
00008a  f88d4019          STRB     r4,[sp,#0x19]
00008e  f88d501a          STRB     r5,[sp,#0x1a]
000092  2001              MOVS     r0,#1
000094  f88d001b          STRB     r0,[sp,#0x1b]
000098  a806              ADD      r0,sp,#0x18
00009a  f7fffffe          BL       NVIC_Init
;;;2314   	USART3_NVIC_Config();//??????
;;;2315   	USART3_DMA_init();
00009e  f7fffffe          BL       USART3_DMA_init
;;;2316   	USART_Cmd(USART3, ENABLE);//????1
0000a2  2101              MOVS     r1,#1
0000a4  4630              MOV      r0,r6
0000a6  f7fffffe          BL       USART_Cmd
;;;2317       USART_ClearFlag(USART3, USART_FLAG_TC);
0000aa  2140              MOVS     r1,#0x40
0000ac  4630              MOV      r0,r6
0000ae  f7fffffe          BL       USART_ClearFlag
;;;2318       
;;;2319     
;;;2320       
;;;2321   	
;;;2322   }
0000b2  b008              ADD      sp,sp,#0x20
0000b4  bd70              POP      {r4-r6,pc}
;;;2323   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L25.184|
                          DCD      0x40020c00
                  |L25.188|
                          DCD      0x40004800

                          AREA ||i.USART3_DMA_init||, CODE, READONLY, ALIGN=2

                  USART3_DMA_init PROC
;;;2172   
;;;2173   static void USART3_DMA_init(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2174   {
;;;2175       DMA_InitTypeDef DMA_InitStructure;
;;;2176       NVIC_InitTypeDef NVIC_InitStructure;
;;;2177   	
;;;2178   	//串口3使用DMA1 发送为数据流3  通道4   
;;;2179       //F4与F1DMA多了一个数据流的说法详细参考中文数据手册DMA 表35
;;;2180       /* 1.使能DMA2时钟 */
;;;2181   	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
000004  2101              MOVS     r1,#1
000006  b091              SUB      sp,sp,#0x44           ;2174
000008  0548              LSLS     r0,r1,#21
00000a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;2182   	
;;;2183   	//串口发送DMA配置
;;;2184       /* 2.配置使用DMA发送数据 */
;;;2185       DMA_DeInit(DMA1_Stream3); //DMA1 数据流 3
00000e  f8dfa0d8          LDR      r10,|L26.232|
000012  4650              MOV      r0,r10
000014  f7fffffe          BL       DMA_DeInit
;;;2186       DMA_InitStructure.DMA_Channel = DMA_Channel_4;  /* 配置DMA1通道4 */
000018  f04f6600          MOV      r6,#0x8000000
;;;2187       DMA_InitStructure.DMA_PeripheralBaseAddr  = (uint32_t)(&(USART3->DR)); /* 目的 */
;;;2188       DMA_InitStructure.DMA_Memory0BaseAddr     = (uint32_t)MasterSendbuf; /*源内存地址*/
00001c  4834              LDR      r0,|L26.240|
00001e  4f33              LDR      r7,|L26.236|
000020  9600              STR      r6,[sp,#0]
000022  e9cd7001          STRD     r7,r0,[sp,#4]
;;;2189       DMA_InitStructure.DMA_DIR                 = DMA_DIR_MemoryToPeripheral;  /*方向内            
;;;2190                                                                               存到外设*/
;;;2191       DMA_InitStructure.DMA_BufferSize          = MAXRxTxLen;                    
;;;2192       /* 长度 */                  
;;;2193       DMA_InitStructure.DMA_PeripheralInc       = DMA_PeripheralInc_Disable;    
000026  2400              MOVS     r4,#0
000028  2040              MOVS     r0,#0x40              ;2189
00002a  f04f0880          MOV      r8,#0x80              ;2191
;;;2194       /* 外设地址是否自增 */
;;;2195       DMA_InitStructure.DMA_MemoryInc           = DMA_MemoryInc_Enable;        
00002e  f44f6980          MOV      r9,#0x400
000032  9003              STR      r0,[sp,#0xc]
000034  e9cd8404          STRD     r8,r4,[sp,#0x10]
000038  e9cd9406          STRD     r9,r4,[sp,#0x18]
;;;2196       /* 内存地址是否自增 */
;;;2197       DMA_InitStructure.DMA_PeripheralDataSize  = DMA_PeripheralDataSize_Byte;  
;;;2198       /* 目的数据带宽 */
;;;2199       DMA_InitStructure.DMA_MemoryDataSize      = DMA_MemoryDataSize_Byte;      
;;;2200       /* 源数据宽度 */
;;;2201       DMA_InitStructure.DMA_Mode                = DMA_Mode_Normal;             
;;;2202       /* 单次传输模式/循环传输模式 */
;;;2203       DMA_InitStructure.DMA_Priority            = DMA_Priority_High;             
00003c  02c0              LSLS     r0,r0,#11
00003e  9408              STR      r4,[sp,#0x20]
000040  e9cd4009          STRD     r4,r0,[sp,#0x24]
;;;2204       /* DMA优先级 */
;;;2205       DMA_InitStructure.DMA_FIFOMode            = DMA_FIFOMode_Disable;          
;;;2206       /* FIFO模式/直接模式 */
;;;2207       DMA_InitStructure.DMA_FIFOThreshold       = DMA_FIFOThreshold_HalfFull; 
000044  2501              MOVS     r5,#1
000046  e9cd450b          STRD     r4,r5,[sp,#0x2c]
;;;2208       /* FIFO大小 */
;;;2209       DMA_InitStructure.DMA_MemoryBurst         = DMA_MemoryBurst_Single;      
;;;2210        /* 单次传输 */
;;;2211       DMA_InitStructure.DMA_PeripheralBurst     = DMA_PeripheralBurst_Single;
00004a  940d              STR      r4,[sp,#0x34]
;;;2212       /* 3. 配置DMA */
;;;2213       DMA_Init(DMA1_Stream3, &DMA_InitStructure);
00004c  4669              MOV      r1,sp
00004e  4650              MOV      r0,r10
000050  940e              STR      r4,[sp,#0x38]
000052  f7fffffe          BL       DMA_Init
;;;2214       /* 4.使能DMA中断 */
;;;2215       DMA_ITConfig(DMA1_Stream3, DMA_IT_TC, ENABLE);
000056  2201              MOVS     r2,#1
000058  2110              MOVS     r1,#0x10
00005a  4650              MOV      r0,r10
00005c  f7fffffe          BL       DMA_ITConfig
;;;2216       /* 5.使能串口的DMA发送接口 */
;;;2217       USART_DMACmd(USART3, USART_DMAReq_Tx, ENABLE);
000060  f1a70b04          SUB      r11,r7,#4
000064  2201              MOVS     r2,#1
000066  2180              MOVS     r1,#0x80
000068  4658              MOV      r0,r11
00006a  f7fffffe          BL       USART_DMACmd
;;;2218       /* 6. 配置DMA中断优先级 */
;;;2219       NVIC_InitStructure.NVIC_IRQChannel                   = DMA1_Stream3_IRQn;  
00006e  200e              MOVS     r0,#0xe
000070  f88d003c          STRB     r0,[sp,#0x3c]
;;;2220       //  DMA发生中断         
;;;2221       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;          
000074  f88d403d          STRB     r4,[sp,#0x3d]
;;;2222       NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 4; 
000078  2004              MOVS     r0,#4
00007a  f88d003e          STRB     r0,[sp,#0x3e]
;;;2223       NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;
00007e  f88d503f          STRB     r5,[sp,#0x3f]
;;;2224       NVIC_Init(&NVIC_InitStructure);
000082  a80f              ADD      r0,sp,#0x3c
000084  f7fffffe          BL       NVIC_Init
;;;2225   	
;;;2226       /* 7.不使能DMA */                  
;;;2227       DMA_Cmd(DMA1_Stream3, DISABLE);// 数据流2
000088  2100              MOVS     r1,#0
00008a  4650              MOV      r0,r10
00008c  f7fffffe          BL       DMA_Cmd
;;;2228   	//************************DMA接收***********************//
;;;2229   	/* 2.配置使用DMA接收数据 */
;;;2230       DMA_DeInit(DMA1_Stream1); 
000090  f8dfa054          LDR      r10,|L26.232|
000094  f1aa0a30          SUB      r10,r10,#0x30
000098  4650              MOV      r0,r10
00009a  f7fffffe          BL       DMA_DeInit
;;;2231       DMA_InitStructure.DMA_Channel             = DMA_Channel_4;               
;;;2232       /* 配置DMA通道 */
;;;2233       DMA_InitStructure.DMA_PeripheralBaseAddr  = (uint32_t)(&(USART3->DR));   
;;;2234       /* 源地址 */
;;;2235       DMA_InitStructure.DMA_Memory0BaseAddr     = (uint32_t)MasterRecbuf;    
00009e  4814              LDR      r0,|L26.240|
0000a0  a902              ADD      r1,sp,#8
0000a2  3080              ADDS     r0,r0,#0x80
0000a4  e8810111          STM      r1,{r0,r4,r8}
0000a8  e9cd4905          STRD     r4,r9,[sp,#0x14]
;;;2236       /* 目标地址 */
;;;2237       DMA_InitStructure.DMA_DIR                 = DMA_DIR_PeripheralToMemory;    
;;;2238       /* 方向外设向内存  */
;;;2239       DMA_InitStructure.DMA_BufferSize          = MAXRxTxLen;                    		
;;;2240       /* 长度 */                  
;;;2241       DMA_InitStructure.DMA_PeripheralInc       = DMA_PeripheralInc_Disable;    
;;;2242         /* 外设地址是否自增 */
;;;2243       DMA_InitStructure.DMA_MemoryInc           = DMA_MemoryInc_Enable;         
;;;2244       /* 内存地址是否自增 */
;;;2245       DMA_InitStructure.DMA_PeripheralDataSize  = DMA_MemoryDataSize_Byte;     
;;;2246       /* 目的数据带宽 */
;;;2247       DMA_InitStructure.DMA_MemoryDataSize      = DMA_MemoryDataSize_Byte;      
;;;2248       /* 源数据宽度 */
;;;2249       DMA_InitStructure.DMA_Mode                = DMA_Mode_Circular;             
0000ac  0228              LSLS     r0,r5,#8
0000ae  e9cd4008          STRD     r4,r0,[sp,#0x20]
;;;2250       /*循环传输模式 */
;;;2251       DMA_InitStructure.DMA_Priority            = DMA_Priority_VeryHigh;        
0000b2  a90a              ADD      r1,sp,#0x28
0000b4  9407              STR      r4,[sp,#0x1c]         ;2249
0000b6  f44f3040          MOV      r0,#0x30000
0000ba  e8810031          STM      r1,{r0,r4,r5}
;;;2252       /* DMA优先级 */
;;;2253       DMA_InitStructure.DMA_FIFOMode            = DMA_FIFOMode_Disable;         
;;;2254        /* FIFO模式/直接模式 */
;;;2255       DMA_InitStructure.DMA_FIFOThreshold       = DMA_FIFOThreshold_HalfFull; 
;;;2256       /* FIFO大小 */
;;;2257       DMA_InitStructure.DMA_MemoryBurst         = DMA_MemoryBurst_Single;       
;;;2258       /* 单次传输 */
;;;2259       DMA_InitStructure.DMA_PeripheralBurst     = DMA_PeripheralBurst_Single;
0000be  940d              STR      r4,[sp,#0x34]
;;;2260       /* 3. 配置DMA */
;;;2261       DMA_Init(DMA1_Stream1, &DMA_InitStructure);
0000c0  4669              MOV      r1,sp
0000c2  4650              MOV      r0,r10
0000c4  940e              STR      r4,[sp,#0x38]
0000c6  e9cd6700          STRD     r6,r7,[sp,#0]
0000ca  f7fffffe          BL       DMA_Init
;;;2262       /* 4.由于接收不需要DMA中断，故不设置DMA中断 */
;;;2263       /* 5.使能串口的DMA接收 */
;;;2264       USART_DMACmd(USART3,USART_DMAReq_Rx,ENABLE);
0000ce  2201              MOVS     r2,#1
0000d0  2140              MOVS     r1,#0x40
0000d2  4658              MOV      r0,r11
0000d4  f7fffffe          BL       USART_DMACmd
;;;2265       /* 6. 由于接收不需要DMA中断，故不能配置DMA中断优先级 */
;;;2266       /* 7.使能DMA */ 
;;;2267       DMA_Cmd(DMA1_Stream1,ENABLE);
0000d8  2101              MOVS     r1,#1
0000da  4650              MOV      r0,r10
0000dc  f7fffffe          BL       DMA_Cmd
;;;2268   }
0000e0  b011              ADD      sp,sp,#0x44
0000e2  e8bd8ff0          POP      {r4-r11,pc}
;;;2269   
                          ENDP

0000e6  0000              DCW      0x0000
                  |L26.232|
                          DCD      0x40026058
                  |L26.236|
                          DCD      0x40004804
                  |L26.240|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;2349   
;;;2350   void USART3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2351   {
;;;2352       u8 Clear = Clear;
;;;2353       u16 num = 0;
;;;2354            
;;;2355       if(USART_GetITStatus(USART3, USART_IT_IDLE) != RESET)
000002  4c18              LDR      r4,|L27.100|
000004  f2404124          MOV      r1,#0x424
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USART_GetITStatus
00000e  2800              CMP      r0,#0
000010  d024              BEQ      |L27.92|
;;;2356       {
;;;2357           Clear = USART3->SR;  //读SR寄存器清除                                                            
000012  8820              LDRH     r0,[r4,#0]
;;;2358          
;;;2359           Clear = USART3->DR;  //读DR寄存器清除                                                        
000014  1d20              ADDS     r0,r4,#4
000016  8800              LDRH     r0,[r0,#0]
;;;2360           DMA_Cmd(DMA1_Stream1,DISABLE);   //关闭DMA
000018  4d13              LDR      r5,|L27.104|
00001a  2100              MOVS     r1,#0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       DMA_Cmd
;;;2361   		DMA_ClearFlag(DMA1_Stream1,DMA_FLAG_TCIF2);
000022  f04f5181          MOV      r1,#0x10200000
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       DMA_ClearFlag
;;;2362           num = DMA_GetCurrDataCounter(DMA1_Stream1); //得到真正接收数据个数
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       DMA_GetCurrDataCounter
;;;2363           if(num < MAXRxTxLen)
;;;2364           {
;;;2365               USART3_Recive_leng   = MAXRxTxLen - num;
000032  4c0e              LDR      r4,|L27.108|
000034  2880              CMP      r0,#0x80              ;2363
000036  d212              BCS      |L27.94|
000038  f1c00080          RSB      r0,r0,#0x80
00003c  b2c0              UXTB     r0,r0
00003e  7020              STRB     r0,[r4,#0]
;;;2366           }else
;;;2367           {
;;;2368               USART3_Recive_leng = MAXRxTxLen;
;;;2369           }
;;;2370            
;;;2371           if(USART3_Recive_leng > MAXRxTxLen)
000040  2880              CMP      r0,#0x80
000042  d901              BLS      |L27.72|
;;;2372           {
;;;2373               USART3_Recive_leng = 0;  //避免接收数据超界                                               
000044  2000              MOVS     r0,#0
                  |L27.70|
000046  7020              STRB     r0,[r4,#0]            ;2368
                  |L27.72|
;;;2374           }
;;;2375           DMA_SetCurrDataCounter(DMA1_Stream1,MAXRxTxLen);//设置DMA传输长度                                                        
000048  2180              MOVS     r1,#0x80
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       DMA_SetCurrDataCounter
;;;2376           DMA_Cmd(DMA1_Stream1,ENABLE);  //开启DMA
000050  2101              MOVS     r1,#1
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       DMA_Cmd
;;;2377           USART3_Recive_flg = 1;    //数据接收成功                                                  
000058  2001              MOVS     r0,#1
00005a  7060              STRB     r0,[r4,#1]
                  |L27.92|
;;;2378           
;;;2379       } 
;;;2380   }
00005c  bd70              POP      {r4-r6,pc}
                  |L27.94|
00005e  2080              MOVS     r0,#0x80              ;2368
000060  e7f1              B        |L27.70|
;;;2381   
                          ENDP

000062  0000              DCW      0x0000
                  |L27.100|
                          DCD      0x40004800
                  |L27.104|
                          DCD      0x40026028
                  |L27.108|
                          DCD      ||.data||

                          AREA ||i.USART_Configuration||, CODE, READONLY, ALIGN=2

                  USART_Configuration PROC
;;;2066   
;;;2067   void USART_Configuration(void)//串口初始化函数
000000  b570              PUSH     {r4-r6,lr}
;;;2068   {  
000002  b088              SUB      sp,sp,#0x20
;;;2069   	GPIO_InitTypeDef GPIO_InitStructure;
;;;2070   	USART_InitTypeDef USART_InitStructure;
;;;2071   	
;;;2072   	/* config USART1 clock */
;;;2073   	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
000004  2101              MOVS     r1,#1
000006  2010              MOVS     r0,#0x10
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;2074   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1);
00000c  4e2a              LDR      r6,|L28.184|
00000e  2207              MOVS     r2,#7
000010  2109              MOVS     r1,#9
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2075   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1);
000018  2207              MOVS     r2,#7
00001a  210a              MOVS     r1,#0xa
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2076   	/* USART1 GPIO config */
;;;2077   	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;2078   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
;;;2079   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000022  2502              MOVS     r5,#2
000024  1570              ASRS     r0,r6,#21             ;2078
000026  f88d5004          STRB     r5,[sp,#4]
;;;2080   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
00002c  9000              STR      r0,[sp,#0]            ;2079
00002e  f88d4006          STRB     r4,[sp,#6]
;;;2081   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f88d5005          STRB     r5,[sp,#5]
;;;2082   	GPIO_Init(GPIOA, &GPIO_InitStructure);    
000036  4669              MOV      r1,sp
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GPIO_Init
;;;2083   	/* Configure USART1 Rx (PA.10) as input floating */
;;;2084   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
00003e  0268              LSLS     r0,r5,#9
;;;2085   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000040  9000              STR      r0,[sp,#0]
000042  f88d5004          STRB     r5,[sp,#4]
;;;2086   	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;2087   	
;;;2088   	/* USART1 mode config */
;;;2089   	USART_InitStructure.USART_BaudRate = 9600;
00004e  f44f5016          MOV      r0,#0x2580
;;;2090   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000052  9002              STR      r0,[sp,#8]
;;;2091   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2092   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000054  f8ad4010          STRH     r4,[sp,#0x10]
;;;2093   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2094   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
;;;2095   	USART_Init(USART1, &USART_InitStructure);
00005a  4d18              LDR      r5,|L28.188|
00005c  f8ad400c          STRH     r4,[sp,#0xc]          ;2090
000060  f8ad0012          STRH     r0,[sp,#0x12]         ;2094
000064  f8ad400e          STRH     r4,[sp,#0xe]          ;2091
000068  f8ad4014          STRH     r4,[sp,#0x14]         ;2093
00006c  a902              ADD      r1,sp,#8
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       USART_Init
;;;2096   	
;;;2097   	/******使能串口接收中断******************/
;;;2098   	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	
000074  2201              MOVS     r2,#1
000076  f2405125          MOV      r1,#0x525
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_ITConfig
;;;2099   	USART_Cmd(USART1, ENABLE);//使能串口1
000080  2101              MOVS     r1,#1
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USART_Cmd
;;;2100   	USART_ClearFlag(USART1, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       USART_ClearFlag
000090  f44f60e0          MOV      r0,#0x700
000094  f7fffffe          BL       NVIC_PriorityGroupConfig
000098  2025              MOVS     r0,#0x25
00009a  f88d0018          STRB     r0,[sp,#0x18]
00009e  f88d4019          STRB     r4,[sp,#0x19]
0000a2  2004              MOVS     r0,#4
0000a4  f88d001a          STRB     r0,[sp,#0x1a]
0000a8  2001              MOVS     r0,#1
0000aa  f88d001b          STRB     r0,[sp,#0x1b]
0000ae  a806              ADD      r0,sp,#0x18
0000b0  f7fffffe          BL       NVIC_Init
;;;2101     
;;;2102   	USART1_NVIC_Config();//串口中断配置
;;;2103   }			
0000b4  b008              ADD      sp,sp,#0x20
0000b6  bd70              POP      {r4-r6,pc}
;;;2104   
                          ENDP

                  |L28.184|
                          DCD      0x40020000
                  |L28.188|
                          DCD      0x40011000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UART_Buffer_Rece
                          %        16

                          AREA ||area_number.31||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.31||, ||.bss||
                  UART_Buffer_Send
                          %        20
                  USART_RX_BUF
                          %        200
                  MasterSendbuf
                          %        128
                  MasterRecbuf
                          %        128

                          AREA ||.data||, DATA, ALIGN=2

                  USART3_Recive_leng
000000  00                DCB      0x00
                  USART3_Recive_flg
000001  00                DCB      0x00
                  UART_Buffer_Send_pointer
000002  00                DCB      0x00
                  |symbol_number.106|
000003  00                DCB      0x00
                  Transmit_BUFFERsize
000004  00                DCB      0x00
                  MODE
000005  00                DCB      0x00
                  mainswitch
000006  00                DCB      0x00
                  Rraly
000007  00                DCB      0x00
                  sendwait
000008  00                DCB      0x00
                  listsend
000009  00                DCB      0x00
                  listocwatch
00000a  00                DCB      0x00
                  listpowwatch1
00000b  00                DCB      0x00
                  listpowwatch2
00000c  0000              DCB      0x00,0x00
                  USART_RX_STA
00000e  0000              DCW      0x0000
                  USART_RX_CNT
000010  0000              DCW      0x0000
000012  0000              DCB      0x00,0x00
                  ||x1||
                          DCD      0x00000000
                  ||y1||
                          DCD      0x00000000
                  ||x2||
                          DCD      0x00000000
                  ||y2||
                          DCD      0x00000000
                  ||x3||
                          DCD      0x00000000
                  ||y3||
                          DCD      0x00000000
                  ||x4||
                          DCD      0x00000000
                  ||y4||
                          DCD      0x00000000
                  ||x5||
                          DCD      0x00000000
                  ||y5||
                          DCD      0x00000000
                  ||x6||
                          DCD      0x00000000
                  ||y6||
                          DCD      0x00000000
                  ||x7||
                          DCD      0x00000000
                  ||y7||
                          DCD      0x00000000
                  ||x8||
                          DCD      0x00000000
                  ||y8||
                          DCD      0x00000000
                  watchtest
                          DCD      0x00000000
                  CmdStr
000058  53544154          DCB      0x53,0x54,0x41,0x54
00005c  55535f00          DCB      0x55,0x53,0x5f,0x00
000060  004d4f44          DCB      0x00,0x4d,0x4f,0x44
000064  5f000000          DCB      0x5f,0x00,0x00,0x00
000068  00005452          DCB      0x00,0x00,0x54,0x52
00006c  49475f00          DCB      0x49,0x47,0x5f,0x00
000070  00000053          DCB      0x00,0x00,0x00,0x53
000074  45545041          DCB      0x45,0x54,0x50,0x41
000078  52415f00          DCB      0x52,0x41,0x5f,0x00
00007c  5345544c          DCB      0x53,0x45,0x54,0x4c
000080  4953545f          DCB      0x49,0x53,0x54,0x5f
000084  004f5052          DCB      0x00,0x4f,0x50,0x52
000088  45534554          DCB      0x45,0x53,0x45,0x54
00008c  5f00504f          DCB      0x5f,0x00,0x50,0x4f
000090  57495f00          DCB      0x57,0x49,0x5f,0x00
000094  00000041          DCB      0x00,0x00,0x00,0x41
000098  4443565f          DCB      0x44,0x43,0x56,0x5f
00009c  00000000          DCB      0x00,0x00,0x00,0x00
0000a0  4c4f5749          DCB      0x4c,0x4f,0x57,0x49
0000a4  5f000000          DCB      0x5f,0x00,0x00,0x00
0000a8  00484f52          DCB      0x00,0x48,0x4f,0x52
0000ac  4c5f0000          DCB      0x4c,0x5f,0x00,0x00
0000b0  00004c56          DCB      0x00,0x00,0x4c,0x56
0000b4  4c5f0000          DCB      0x4c,0x5f,0x00,0x00
0000b8  00000053          DCB      0x00,0x00,0x00,0x53
0000bc  57495443          DCB      0x57,0x49,0x54,0x43
0000c0  485f0000          DCB      0x48,0x5f,0x00,0x00
0000c4  43414c56          DCB      0x43,0x41,0x4c,0x56
0000c8  5f000000          DCB      0x5f,0x00,0x00,0x00
0000cc  0043414c          DCB      0x00,0x43,0x41,0x4c
0000d0  495f0000          DCB      0x49,0x5f,0x00,0x00
0000d4  00004341          DCB      0x00,0x00,0x43,0x41
0000d8  4c525f00          DCB      0x4c,0x52,0x5f,0x00
0000dc  00000044          DCB      0x00,0x00,0x00,0x44
0000e0  41435f00          DCB      0x41,0x43,0x5f,0x00
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
0000e8  4f564552          DCB      0x4f,0x56,0x45,0x52
0000ec  5f000000          DCB      0x5f,0x00,0x00,0x00
0000f0  0054454d          DCB      0x00,0x54,0x45,0x4d
0000f4  505f0000          DCB      0x50,0x5f,0x00,0x00
0000f8  0000424f          DCB      0x00,0x00,0x42,0x4f
0000fc  4f545f00          DCB      0x4f,0x54,0x5f,0x00
000100  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.34||, DATA, ALIGN=0

                          EXPORTAS ||area_number.34||, ||.data||
                  UART_Buffer_Size
000000  00                DCB      0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  t_USART
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.data||
                  powsetdelay
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\drive\\usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REV16|
#line 129 "E:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_usart_c_7cc17ae7____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REVSH|
#line 144
|__asm___7_usart_c_7cc17ae7____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
