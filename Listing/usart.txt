; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\usart.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\usart.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=538 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\usart.crf --no_multibyte_chars ..\drive\usart.c]
                          THUMB

                          AREA ||i.CalHandle||, CODE, READONLY, ALIGN=2

                  CalHandle PROC
;;;594    //校准处理
;;;595    void CalHandle(u8 mode,u8 range,u32 data)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;596    {
000004  4615              MOV      r5,r2
;;;597    	if(mode == 0)//测量电压
;;;598    	{
;;;599    		if(range == 0)//低档位低段
;;;600    		{
;;;601    			calflag = 1;
000006  4efe              LDR      r6,|L1.1024|
;;;602    			LOAD_V_SW = 0;
000008  4afe              LDR      r2,|L1.1028|
00000a  2700              MOVS     r7,#0                 ;596
00000c  f04f0801          MOV      r8,#1                 ;601
;;;603    			x1 = Vmon_Load_value;
000010  4cfd              LDR      r4,|L1.1032|
;;;604    			y1 = data;
;;;605    		}else if(range == 1){//低档位高段
;;;606    			
;;;607    			x2 = Vmon_Load_value;
;;;608    			y2 = data;
;;;609    			CalPara.TestLV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;610    			CalPara.OffsetLV[0] = (float)y2 - CalPara.TestLV[0]*(float)x2;
;;;611    			
;;;612    			Flag_DAC_OFF=0;
000012  f8dfc3fc          LDR      r12,|L1.1040|
000016  f8dfa3f4          LDR      r10,|L1.1036|
;;;613    			calflag = 0;
;;;614    		}else if(range == 2){//高档位低段
;;;615    			calflag = 1;
;;;616    			LOAD_V_SW = 1;
;;;617    			x1 = Vmon_Load_value;
;;;618    			y1 = data/10;
;;;619    		}else if(range == 3){//高档位高段
;;;620    			
;;;621    			x2 = Vmon_Load_value;
;;;622    			y2 = data/10;
;;;623    			CalPara.TestLV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;624    			CalPara.OffsetLV[1] = (float)y2 - CalPara.TestLV[1]*(float)x2;
;;;625    				//参数写进FLASH
;;;626    			Flag_DAC_OFF=0;
;;;627    			calflag = 0;
;;;628    		}else if(range == 4){//电源控制电压和测量1
;;;629    			calflag = 1;
;;;630    			Contr_Voltage = 3500;
;;;631    			Contr_Current = 5000;
;;;632    			OnOff_GPOI_ResetSet(0,1);
;;;633    		}else if(range == 5){//电源控制电压和测量2
;;;634    			x1 = data;
;;;635    			y1 = Contr_Voltage;
;;;636    			x3 = Vmon_POWE_value;
;;;637    			y3 = data;
;;;638    			Contr_Voltage = 10000;
;;;639    			Contr_Current = 5000;
;;;640    		}else if(range == 6){//电源控制电压和测量3
;;;641    			x2 = data;
;;;642    			y2 = Contr_Voltage;
;;;643    			x4 = Vmon_POWE_value;
;;;644    			y4 = data;
;;;645    			
;;;646    			CalPara.SetPV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;647    			CalPara.OffsetSetPV[0] = (float)y2 - CalPara.SetPV[0]*(float)x2;
;;;648    			
;;;649    			CalPara.TestPV[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;650    			CalPara.OffsetPV[0] = (float)y4 - CalPara.TestPV[0]*(float)x4;
;;;651    			
;;;652    			Flag_DAC_OFF=0;
;;;653    			calflag = 0;
;;;654    			Off_GPOI_ResetSet();
;;;655    		}else if(range == 7){//CV控制低档1
;;;656    			LOAD_MODE = 1;
;;;657    			LOAD_V_SW=0;
;;;658    			GPIO_ResetBits(GPIOB,GPIO_Pin_1);//电压档位为低档
;;;659    			calflag = 1;
;;;660    			Contr_Laod = 1000;
00001a  f8df93f8          LDR      r9,|L1.1044|
00001e  f8dc3000          LDR      r3,[r12,#0]           ;612
000022  edd40a05          VLDR     s1,[r4,#0x14]         ;603
000026  ed940a06          VLDR     s0,[r4,#0x18]         ;603
00002a  edd42a0a          VLDR     s5,[r4,#0x28]         ;603
00002e  ed942a09          VLDR     s4,[r4,#0x24]         ;603
000032  f0230308          BIC      r3,r3,#8              ;612
000036  b130              CBZ      r0,|L1.70|
;;;661    			OnOff_GPOI_ResetSet(2,1);
;;;662    		}else if(range == 8){//CV控制低档2
;;;663    			LOAD_MODE = 1;
;;;664    			LOAD_V_SW=0;
;;;665    			GPIO_ResetBits(GPIOB,GPIO_Pin_1);//电压档位为低档
;;;666    			x1 = data;
;;;667    			y1 = Contr_Laod;
;;;668    			Contr_Laod = 20000;
;;;669    //			OnOff_GPOI_ResetSet(2,1);
;;;670    		}else if(range == 9){//CV控制低档3
;;;671    			x2 = data;
;;;672    			y2 = Contr_Laod;
;;;673    			CalPara.SetCV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;674    			CalPara.OffsetCV[0] = (float)y2 - CalPara.SetCV[0]*(float)x2;
;;;675    				//参数写进FLASH
;;;676    			Flag_DAC_OFF=0;
;;;677    			calflag = 0;
;;;678    			Off_GPOI_ResetSet();
;;;679    		}else if(range == 10){//CV控制高档1
;;;680    			LOAD_MODE = 1;
;;;681    			LOAD_V_SW=1;
;;;682    			GPIO_SetBits(GPIOB,GPIO_Pin_1);//电压档位为高档
;;;683    			calflag = 1;
;;;684    			Contr_Laod = 1000;
;;;685    			OnOff_GPOI_ResetSet(2,1);
;;;686    		}else if(range == 11){//CV控制高档2
;;;687    			LOAD_MODE = 1;
;;;688    			LOAD_V_SW=1;
;;;689    			GPIO_SetBits(GPIOB,GPIO_Pin_1);//电压档位为高档
;;;690    			x1 = data/10;
;;;691    			y1 = Contr_Laod;
;;;692    			Contr_Laod = 20000;
;;;693    			OnOff_GPOI_ResetSet(2,1);
;;;694    		}else if(range == 12){//CV控制高档3
;;;695    			x2 = data/10;
;;;696    			y2 = Contr_Laod;
;;;697    			CalPara.SetCV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;698    			CalPara.OffsetCV[1] = (float)y2 - CalPara.SetCV[1]*(float)x2;
;;;699    				//参数写进FLASH
;;;700    			Flag_DAC_OFF=0;
;;;701    			calflag = 0;
;;;702    			Off_GPOI_ResetSet();
;;;703    		}
;;;704    	}else if(mode == 1){
;;;705    		if(range == 0)//负载电流低档位1
;;;706    		{		
;;;707    			LOAD_I_SW = 0;
;;;708    			Contr_Laod = 10000;
;;;709    			calflag = 1;
;;;710    			OnOff_GPOI_ResetSet(2,1);
;;;711    		}
;;;712    		else if(range == 1)//负载电流低档位2
;;;713    		{
;;;714    			LOAD_I_SW = 0;			
;;;715    			x1 = data;
;;;716    			y1 = Contr_Laod;
;;;717    			x4 = Imon_Load_value;
;;;718    			y4 = data;
;;;719    			Contr_Laod = 20000;
;;;720    		}else if(range == 2)//负载电流低档位3
;;;721    		{
;;;722    			LOAD_I_SW = 0;			
;;;723    			x2 = data;
;;;724    			y2 = Contr_Laod;
;;;725    			x5 = Imon_Load_value;
;;;726    			y5 = data;
;;;727    			Contr_Laod = 60000;
;;;728    		}else if(range == 3){//负载电流低档位4
;;;729    			
;;;730    			x3 = data;
;;;731    			y3 = Contr_Laod;
;;;732    			x6 = Imon_Load_value;
;;;733    			y6 = data;
;;;734    			
;;;735    			CalPara.SetLC[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;736    			CalPara.OffsetLC[0] = (float)y2 - CalPara.SetLC[0]*(float)x2;
;;;737    			CalPara.SetLC[1] = ((float)y3 - (float)y2)/((float)x3 - (float)x2);
;;;738    			CalPara.OffsetLC[1] = (float)y3 - CalPara.SetLC[1]*(float)x3;
;;;739    			
;;;740    			CalPara.TestLC[0] = ((float)y5 - (float)y4)/((float)x5 - (float)x4);
;;;741    			CalPara.OffsetTestLC[0] = (float)y5 - CalPara.TestLC[0]*(float)x5;
;;;742    			CalPara.TestLC[1] = ((float)y6 - (float)y5)/((float)x6 - (float)x5);
;;;743    			CalPara.OffsetTestLC[1] = (float)y6 - CalPara.TestLC[1]*(float)x6;
;;;744    				
;;;745    			Flag_DAC_OFF =0;
;;;746    			calflag = 0;
;;;747    			Off_GPOI_ResetSet();
;;;748    		}else if(range == 4){//负载电流高档位1
;;;749    			LOAD_I_SW = 1;
;;;750    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
000038  f44f6e00          MOV      lr,#0x800
00003c  2801              CMP      r0,#1                 ;704
00003e  d07b              BEQ      |L1.312|
;;;751    			Contr_Laod = 6000;
;;;752    			calflag = 1;
;;;753    			OnOff_GPOI_ResetSet(2,1);
;;;754    		}else if(range == 5){//负载电流高档位2
;;;755    			
;;;756    			LOAD_I_SW = 1;
;;;757    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;758    			x1 = data;
;;;759    			y1 = Contr_Laod;
;;;760    			x5 = Imon_Load_value;
;;;761    			y5 = data;
;;;762    			Contr_Laod = 12000;
;;;763    		}else if(range == 6){//负载电流高档位3
;;;764    			
;;;765    			LOAD_I_SW = 1;
;;;766    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;767    			x2 = data;
;;;768    			y2 = Contr_Laod;
;;;769    			x6 = Imon_Load_value;
;;;770    			y6 = data;
;;;771    			Contr_Laod = 20000;
;;;772    		}else if(range == 7){//负载电流高档位4
;;;773    			
;;;774    			LOAD_I_SW = 1;
;;;775    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;776    			x3 = data;
;;;777    			y3 = Contr_Laod;
;;;778    			x7 = Imon_Load_value;
;;;779    			y7 = data;
;;;780    			Contr_Laod = 40000;
;;;781    		}else if(range == 8){//负载电流高档位5
;;;782    			
;;;783    			x4 = data;
;;;784    			y4 = Contr_Laod;
;;;785    			x8 = Imon_Load_value;
;;;786    			y8 = data;
;;;787    			
;;;788    			CalPara.SetLC[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;789    			CalPara.OffsetLC[2] = (float)y2 - CalPara.SetLC[2]*(float)x2;
;;;790    			CalPara.SetLC[3] = ((float)y3 - (float)y2)/((float)x3 - (float)x2);
;;;791    			CalPara.OffsetLC[3] = (float)y3 - CalPara.SetLC[3]*(float)x3;
;;;792    			CalPara.SetLC[4] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;793    			CalPara.OffsetLC[4] = (float)y4 - CalPara.SetLC[4]*(float)x4;
;;;794    			
;;;795    			CalPara.TestLC[2] = ((float)y6 - (float)y5)/((float)x6 - (float)x5);
;;;796    			CalPara.OffsetTestLC[2] = (float)y6 - CalPara.TestLC[2]*(float)x6;
;;;797    			CalPara.TestLC[3] = ((float)y7 - (float)y6)/((float)x7 - (float)x6);
;;;798    			CalPara.OffsetTestLC[3] = (float)y7 - CalPara.TestLC[3]*(float)x7;
;;;799    			CalPara.TestLC[4] = ((float)y8 - (float)y7)/((float)x8 - (float)x7);
;;;800    			CalPara.OffsetTestLC[4] = (float)y8 - CalPara.TestLC[4]*(float)x8;
;;;801    				
;;;802    			Flag_DAC_OFF =0;
;;;803    			calflag = 0;
;;;804    			Off_GPOI_ResetSet();
;;;805    		}else if(range == 9){//电源电流1
;;;806    			Contr_Voltage = 3500;
;;;807    			Contr_Current = 4000;
;;;808    			calflag = 1;
;;;809    			OnOff_GPOI_ResetSet(0,1);
;;;810    		}else if(range == 10){//电源电流2
;;;811    			
;;;812    			x1 = data;
;;;813    			y1 = Contr_Current;
;;;814    			x3 = Imon_POWE_value;
;;;815    			y3 = data;
;;;816    			Contr_Voltage = 3500;
;;;817    			Contr_Current = 14000;
;;;818    		}else if(range == 11){//电源电流3
;;;819    			
;;;820    			x2 = data;
;;;821    			y2 = Contr_Current;
;;;822    			x4 = Imon_POWE_value;
;;;823    			y4 = data;
;;;824    			
;;;825    			CalPara.SetPC[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;826    			CalPara.OffsetPC[0] = (float)y2 - CalPara.SetPC[0]*(float)x2;
;;;827    			
;;;828    			CalPara.TestPC[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;829    			CalPara.OffsetTestPC[0] = (float)y4 - CalPara.TestPC[0]*(float)x4;
;;;830    			
;;;831    			Flag_DAC_OFF=0;
;;;832    			calflag = 0;
;;;833    			Off_GPOI_ResetSet();
;;;834    		}
;;;835    	}else if(mode == 2){
000040  2802              CMP      r0,#2
000042  d07a              BEQ      |L1.314|
000044  e257              B        |L1.1270|
                  |L1.70|
000046  48f4              LDR      r0,|L1.1048|
000048  b1f1              CBZ      r1,|L1.136|
00004a  2901              CMP      r1,#1                 ;605
00004c  d020              BEQ      |L1.144|
00004e  f04f0b0a          MOV      r11,#0xa              ;618
000052  2902              CMP      r1,#2                 ;614
000054  d040              BEQ      |L1.216|
000056  2903              CMP      r1,#3                 ;619
000058  d048              BEQ      |L1.236|
00005a  f2413e88          MOV      lr,#0x1388            ;631
00005e  2904              CMP      r1,#4                 ;628
000060  d070              BEQ      |L1.324|
000062  48ee              LDR      r0,|L1.1052|
000064  2905              CMP      r1,#5                 ;633
000066  d07c              BEQ      |L1.354|
000068  2906              CMP      r1,#6                 ;640
00006a  d069              BEQ      |L1.320|
00006c  48ec              LDR      r0,|L1.1056|
00006e  2907              CMP      r1,#7                 ;655
000070  d067              BEQ      |L1.322|
000072  2908              CMP      r1,#8                 ;662
000074  d070              BEQ      |L1.344|
000076  2909              CMP      r1,#9                 ;670
000078  d06f              BEQ      |L1.346|
00007a  290a              CMP      r1,#0xa               ;679
00007c  d06e              BEQ      |L1.348|
00007e  290b              CMP      r1,#0xb               ;686
000080  d06d              BEQ      |L1.350|
000082  290c              CMP      r1,#0xc               ;694
000084  d06c              BEQ      |L1.352|
000086  e236              B        |L1.1270|
                  |L1.136|
000088  f8868000          STRB     r8,[r6,#0]            ;601
00008c  61d7              STR      r7,[r2,#0x1c]         ;602  ; Run_Control
00008e  e3ad              B        |L1.2028|
                  |L1.144|
000090  8800              LDRH     r0,[r0,#0]            ;607  ; Vmon_Load_value
000092  ee015a10          VMOV     s2,r5                 ;609
000096  eeb80a40          VCVT.F32.U32 s0,s0                 ;609
00009a  eef80a60          VCVT.F32.U32 s1,s1                 ;609
00009e  eeb81a41          VCVT.F32.U32 s2,s2                 ;609
0000a2  e9c40507          STRD     r0,r5,[r4,#0x1c]      ;607
0000a6  ee311a40          VSUB.F32 s2,s2,s0              ;609
0000aa  ee000a10          VMOV     s0,r0                 ;609
0000ae  eeb80a40          VCVT.F32.U32 s0,s0                 ;609
0000b2  ee300a60          VSUB.F32 s0,s0,s1              ;609
0000b6  eec10a00          VDIV.F32 s1,s2,s0              ;609
0000ba  ee000a10          VMOV     s0,r0                 ;610
0000be  eeb81a40          VCVT.F32.U32 s2,s0                 ;610
0000c2  ee005a10          VMOV     s0,r5                 ;610
0000c6  eeb80a40          VCVT.F32.U32 s0,s0                 ;610
0000ca  edca0a00          VSTR     s1,[r10,#0]           ;609
0000ce  ee000ac1          VMLS.F32 s0,s1,s2              ;610
0000d2  ed8a0a04          VSTR     s0,[r10,#0x10]        ;610
0000d6  e3af              B        |L1.2104|
                  |L1.216|
0000d8  f8868000          STRB     r8,[r6,#0]            ;615
0000dc  f8c2801c          STR      r8,[r2,#0x1c]         ;616  ; Run_Control
0000e0  8800              LDRH     r0,[r0,#0]            ;617  ; Vmon_Load_value
0000e2  6160              STR      r0,[r4,#0x14]         ;618  ; x1
0000e4  fbb5f0fb          UDIV     r0,r5,r11             ;618
0000e8  61a0              STR      r0,[r4,#0x18]         ;618  ; y1
0000ea  e204              B        |L1.1270|
                  |L1.236|
0000ec  8800              LDRH     r0,[r0,#0]            ;621  ; Vmon_Load_value
0000ee  fbb5f1fb          UDIV     r1,r5,r11             ;622
0000f2  ee011a10          VMOV     s2,r1                 ;623
0000f6  eeb80a40          VCVT.F32.U32 s0,s0                 ;623
0000fa  eef80a60          VCVT.F32.U32 s1,s1                 ;623
0000fe  eeb81a41          VCVT.F32.U32 s2,s2                 ;623
000102  e9c40107          STRD     r0,r1,[r4,#0x1c]      ;623
000106  ee311a40          VSUB.F32 s2,s2,s0              ;623
00010a  ee000a10          VMOV     s0,r0                 ;623
00010e  eeb80a40          VCVT.F32.U32 s0,s0                 ;623
000112  ee300a60          VSUB.F32 s0,s0,s1              ;623
000116  eec10a00          VDIV.F32 s1,s2,s0              ;623
00011a  ee000a10          VMOV     s0,r0                 ;624
00011e  eeb81a40          VCVT.F32.U32 s2,s0                 ;624
000122  ee001a10          VMOV     s0,r1                 ;624
000126  eeb80a40          VCVT.F32.U32 s0,s0                 ;624
00012a  edca0a01          VSTR     s1,[r10,#4]           ;623
00012e  ee000ac1          VMLS.F32 s0,s1,s2              ;624
000132  ed8a0a05          VSTR     s0,[r10,#0x14]        ;624
000136  e37f              B        |L1.2104|
                  |L1.312|
000138  e0ea              B        |L1.784|
                  |L1.314|
00013a  e32e              B        |L1.1946|
00013c  e002              B        |L1.324|
00013e  e010              B        |L1.354|
                  |L1.320|
000140  e01c              B        |L1.380|
                  |L1.322|
000142  e064              B        |L1.526|
                  |L1.324|
000144  f8868000          STRB     r8,[r6,#0]            ;629
000148  48b6              LDR      r0,|L1.1060|
00014a  f64051ac          MOV      r1,#0xdac             ;630
00014e  8001              STRH     r1,[r0,#0]            ;630
000150  49b5              LDR      r1,|L1.1064|
000152  f8a1e000          STRH     lr,[r1,#0]            ;631
000156  e2c6              B        |L1.1766|
                  |L1.344|
000158  e060              B        |L1.540|
                  |L1.346|
00015a  e06b              B        |L1.564|
                  |L1.348|
00015c  e08f              B        |L1.638|
                  |L1.350|
00015e  e09e              B        |L1.670|
                  |L1.352|
000160  e0af              B        |L1.706|
                  |L1.354|
000162  49b0              LDR      r1,|L1.1060|
000164  6165              STR      r5,[r4,#0x14]         ;635  ; x1
000166  880a              LDRH     r2,[r1,#0]            ;635  ; Contr_Voltage
000168  61a2              STR      r2,[r4,#0x18]         ;636  ; y1
00016a  8800              LDRH     r0,[r0,#0]            ;636  ; Vmon_POWE_value
00016c  e9c40509          STRD     r0,r5,[r4,#0x24]      ;636
000170  f2427010          MOV      r0,#0x2710            ;638
000174  8008              STRH     r0,[r1,#0]            ;638
000176  4670              MOV      r0,lr                 ;639
000178  49ab              LDR      r1,|L1.1064|
00017a  e2c3              B        |L1.1796|
                  |L1.380|
00017c  49a9              LDR      r1,|L1.1060|
00017e  61e5              STR      r5,[r4,#0x1c]         ;642  ; x2
000180  8809              LDRH     r1,[r1,#0]            ;642  ; Contr_Voltage
000182  6221              STR      r1,[r4,#0x20]         ;643  ; y2
000184  8800              LDRH     r0,[r0,#0]            ;643  ; Vmon_POWE_value
000186  ee011a10          VMOV     s2,r1                 ;646
00018a  eeb80a40          VCVT.F32.U32 s0,s0                 ;646
00018e  eef80a60          VCVT.F32.U32 s1,s1                 ;646
000192  eeb81a41          VCVT.F32.U32 s2,s2                 ;646
000196  e9c4050b          STRD     r0,r5,[r4,#0x2c]      ;643
00019a  ee311a40          VSUB.F32 s2,s2,s0              ;646
00019e  ee005a10          VMOV     s0,r5                 ;646
0001a2  4652              MOV      r2,r10                ;646
0001a4  eeb80a40          VCVT.F32.U32 s0,s0                 ;646
0001a8  ee300a60          VSUB.F32 s0,s0,s1              ;646
0001ac  eec10a00          VDIV.F32 s1,s2,s0              ;646
0001b0  ee005a10          VMOV     s0,r5                 ;647
0001b4  eeb81a40          VCVT.F32.U32 s2,s0                 ;647
0001b8  ee001a10          VMOV     s0,r1                 ;647
0001bc  eeb80a40          VCVT.F32.U32 s0,s0                 ;647
0001c0  edca0a02          VSTR     s1,[r10,#8]           ;646
0001c4  ee000ac1          VMLS.F32 s0,s1,s2              ;647
0001c8  eef80a62          VCVT.F32.U32 s1,s5                 ;649
0001cc  ed8a0a06          VSTR     s0,[r10,#0x18]        ;647
0001d0  ee005a10          VMOV     s0,r5                 ;649
0001d4  eeb80a40          VCVT.F32.U32 s0,s0                 ;649
0001d8  ee301a60          VSUB.F32 s2,s0,s1              ;649
0001dc  ee000a10          VMOV     s0,r0                 ;649
0001e0  eef80a42          VCVT.F32.U32 s1,s4                 ;649
0001e4  eeb80a40          VCVT.F32.U32 s0,s0                 ;649
0001e8  ee300a60          VSUB.F32 s0,s0,s1              ;649
0001ec  eec10a00          VDIV.F32 s1,s2,s0              ;649
0001f0  ee000a10          VMOV     s0,r0                 ;650
0001f4  eeb81a40          VCVT.F32.U32 s2,s0                 ;650
0001f8  ee005a10          VMOV     s0,r5                 ;650
0001fc  eeb80a40          VCVT.F32.U32 s0,s0                 ;650
000200  edc20a03          VSTR     s1,[r2,#0xc]          ;649
000204  ee000ac1          VMLS.F32 s0,s1,s2              ;650
000208  ed8a0a07          VSTR     s0,[r10,#0x1c]        ;650
00020c  e25b              B        |L1.1734|
                  |L1.526|
00020e  f8c28018          STR      r8,[r2,#0x18]         ;656  ; Run_Control
000212  61d7              STR      r7,[r2,#0x1c]         ;657  ; Run_Control
000214  2102              MOVS     r1,#2                 ;658
000216  f7fffffe          BL       GPIO_ResetBits
00021a  e037              B        |L1.652|
                  |L1.540|
00021c  f8c28018          STR      r8,[r2,#0x18]         ;663  ; Run_Control
000220  61d7              STR      r7,[r2,#0x1c]         ;664  ; Run_Control
000222  2102              MOVS     r1,#2                 ;665
000224  f7fffffe          BL       GPIO_ResetBits
000228  6165              STR      r5,[r4,#0x14]         ;667  ; x1
00022a  f8b91000          LDRH     r1,[r9,#0]            ;667  ; Contr_Laod
00022e  4648              MOV      r0,r9                 ;667
000230  61a1              STR      r1,[r4,#0x18]         ;668  ; y1
000232  e182              B        |L1.1338|
                  |L1.564|
000234  61e5              STR      r5,[r4,#0x1c]         ;672  ; x2
000236  f8b90000          LDRH     r0,[r9,#0]            ;672  ; Contr_Laod
00023a  eeb80a40          VCVT.F32.U32 s0,s0                 ;673
00023e  ee010a10          VMOV     s2,r0                 ;673
000242  eef80a60          VCVT.F32.U32 s1,s1                 ;673
000246  6220              STR      r0,[r4,#0x20]         ;673  ; y2
000248  eeb81a41          VCVT.F32.U32 s2,s2                 ;673
00024c  ee311a40          VSUB.F32 s2,s2,s0              ;673
000250  ee005a10          VMOV     s0,r5                 ;673
000254  eeb80a40          VCVT.F32.U32 s0,s0                 ;673
000258  ee300a60          VSUB.F32 s0,s0,s1              ;673
00025c  eec10a00          VDIV.F32 s1,s2,s0              ;673
000260  ee005a10          VMOV     s0,r5                 ;674
000264  eeb81a40          VCVT.F32.U32 s2,s0                 ;674
000268  ee000a10          VMOV     s0,r0                 ;674
00026c  eeb80a40          VCVT.F32.U32 s0,s0                 ;674
000270  edca0a0d          VSTR     s1,[r10,#0x34]        ;673
000274  ee000ac1          VMLS.F32 s0,s1,s2              ;674
000278  ed8a0a1b          VSTR     s0,[r10,#0x6c]        ;674
00027c  e223              B        |L1.1734|
                  |L1.638|
00027e  f8c28018          STR      r8,[r2,#0x18]         ;680  ; Run_Control
000282  f8c2801c          STR      r8,[r2,#0x1c]         ;681  ; Run_Control
000286  2102              MOVS     r1,#2                 ;682
000288  f7fffffe          BL       GPIO_SetBits
                  |L1.652|
00028c  f8868000          STRB     r8,[r6,#0]            ;659
000290  f44f707a          MOV      r0,#0x3e8             ;660
000294  f8a90000          STRH     r0,[r9,#0]            ;660
                  |L1.664|
000298  2101              MOVS     r1,#1                 ;661
00029a  2002              MOVS     r0,#2                 ;661
00029c  e129              B        |L1.1266|
                  |L1.670|
00029e  f8c28018          STR      r8,[r2,#0x18]         ;687  ; Run_Control
0002a2  f8c2801c          STR      r8,[r2,#0x1c]         ;688  ; Run_Control
0002a6  2102              MOVS     r1,#2                 ;689
0002a8  f7fffffe          BL       GPIO_SetBits
0002ac  fbb5f0fb          UDIV     r0,r5,r11             ;690
0002b0  6160              STR      r0,[r4,#0x14]         ;691  ; x1
0002b2  f8b91000          LDRH     r1,[r9,#0]            ;691  ; Contr_Laod
0002b6  61a1              STR      r1,[r4,#0x18]         ;692  ; y1
0002b8  f6446120          MOV      r1,#0x4e20            ;692
0002bc  f8a91000          STRH     r1,[r9,#0]            ;692
0002c0  e7ea              B        |L1.664|
                  |L1.706|
0002c2  fbb5f0fb          UDIV     r0,r5,r11             ;695
0002c6  61e0              STR      r0,[r4,#0x1c]         ;696  ; x2
0002c8  f8b91000          LDRH     r1,[r9,#0]            ;696  ; Contr_Laod
0002cc  eeb80a40          VCVT.F32.U32 s0,s0                 ;697
0002d0  ee011a10          VMOV     s2,r1                 ;697
0002d4  eef80a60          VCVT.F32.U32 s1,s1                 ;697
0002d8  6221              STR      r1,[r4,#0x20]         ;697  ; y2
0002da  eeb81a41          VCVT.F32.U32 s2,s2                 ;697
0002de  ee311a40          VSUB.F32 s2,s2,s0              ;697
0002e2  ee000a10          VMOV     s0,r0                 ;697
0002e6  eeb80a40          VCVT.F32.U32 s0,s0                 ;697
0002ea  ee300a60          VSUB.F32 s0,s0,s1              ;697
0002ee  eec10a00          VDIV.F32 s1,s2,s0              ;697
0002f2  ee000a10          VMOV     s0,r0                 ;698
0002f6  eeb81a40          VCVT.F32.U32 s2,s0                 ;698
0002fa  ee001a10          VMOV     s0,r1                 ;698
0002fe  eeb80a40          VCVT.F32.U32 s0,s0                 ;698
000302  edca0a0e          VSTR     s1,[r10,#0x38]        ;697
000306  ee000ac1          VMLS.F32 s0,s1,s2              ;698
00030a  ed8a0a1c          VSTR     s0,[r10,#0x70]        ;698
00030e  e1da              B        |L1.1734|
                  |L1.784|
000310  b311              CBZ      r1,|L1.856|
000312  f8dfb118          LDR      r11,|L1.1068|
000316  2901              CMP      r1,#1                 ;712
000318  d024              BEQ      |L1.868|
00031a  2902              CMP      r1,#2                 ;720
00031c  d02d              BEQ      |L1.890|
00031e  483a              LDR      r0,|L1.1032|
000320  2903              CMP      r1,#3                 ;728
000322  edd03a0e          VLDR     s7,[r0,#0x38]         ;603
000326  ed903a0d          VLDR     s6,[r0,#0x34]         ;603
00032a  edd01a08          VLDR     s3,[r0,#0x20]         ;603
00032e  ed901a07          VLDR     s2,[r0,#0x1c]         ;603
000332  d030              BEQ      |L1.918|
000334  2904              CMP      r1,#4                 ;748
000336  d062              BEQ      |L1.1022|
000338  2905              CMP      r1,#5                 ;754
00033a  d07b              BEQ      |L1.1076|
00033c  2906              CMP      r1,#6                 ;763
00033e  d07a              BEQ      |L1.1078|
000340  2907              CMP      r1,#7                 ;772
000342  d079              BEQ      |L1.1080|
000344  2908              CMP      r1,#8                 ;781
000346  d078              BEQ      |L1.1082|
000348  2909              CMP      r1,#9                 ;805
00034a  d077              BEQ      |L1.1084|
00034c  4838              LDR      r0,|L1.1072|
00034e  290a              CMP      r1,#0xa               ;810
000350  d075              BEQ      |L1.1086|
000352  290b              CMP      r1,#0xb               ;818
000354  d074              BEQ      |L1.1088|
000356  e348              B        |L1.2538|
                  |L1.856|
000358  6217              STR      r7,[r2,#0x20]         ;707  ; Run_Control
00035a  f2427010          MOV      r0,#0x2710            ;708
00035e  f8a90000          STRH     r0,[r9,#0]            ;708
000362  e0c3              B        |L1.1260|
                  |L1.868|
000364  6217              STR      r7,[r2,#0x20]         ;714  ; Run_Control
000366  6165              STR      r5,[r4,#0x14]         ;716  ; x1
000368  f8b91000          LDRH     r1,[r9,#0]            ;716  ; Contr_Laod
00036c  4648              MOV      r0,r9                 ;716
00036e  61a1              STR      r1,[r4,#0x18]         ;717  ; y1
000370  f8bb1000          LDRH     r1,[r11,#0]           ;717  ; Imon_Load_value
000374  e9c4150b          STRD     r1,r5,[r4,#0x2c]      ;717
000378  e0df              B        |L1.1338|
                  |L1.890|
00037a  6217              STR      r7,[r2,#0x20]         ;722  ; Run_Control
00037c  61e5              STR      r5,[r4,#0x1c]         ;724  ; x2
00037e  f8b91000          LDRH     r1,[r9,#0]            ;724  ; Contr_Laod
000382  4648              MOV      r0,r9                 ;724
000384  6221              STR      r1,[r4,#0x20]         ;725  ; y2
000386  f8bb1000          LDRH     r1,[r11,#0]           ;725  ; Imon_Load_value
00038a  e9c4150d          STRD     r1,r5,[r4,#0x34]      ;725
00038e  f64e2160          MOV      r1,#0xea60            ;727
                  |L1.914|
000392  8001              STRH     r1,[r0,#0]            ;719
000394  e329              B        |L1.2538|
                  |L1.918|
000396  6265              STR      r5,[r4,#0x24]         ;731  ; x3
000398  f8b92000          LDRH     r2,[r9,#0]            ;731  ; Contr_Laod
00039c  62a2              STR      r2,[r4,#0x28]         ;732  ; y3
00039e  f8bb1000          LDRH     r1,[r11,#0]           ;732  ; Imon_Load_value
0003a2  eeb82a61          VCVT.F32.U32 s4,s3                 ;735
0003a6  eeb80a40          VCVT.F32.U32 s0,s0                 ;735
0003aa  eef80a60          VCVT.F32.U32 s1,s1                 ;735
0003ae  e9c4150f          STRD     r1,r5,[r4,#0x3c]      ;735
0003b2  ee322a40          VSUB.F32 s4,s4,s0              ;735
0003b6  eeb80a41          VCVT.F32.U32 s0,s2                 ;735
0003ba  4650              MOV      r0,r10                ;735
0003bc  ee700a60          VSUB.F32 s1,s0,s1              ;735
0003c0  ee820a20          VDIV.F32 s0,s4,s1              ;735
0003c4  eeb82a41          VCVT.F32.U32 s4,s2                 ;736
0003c8  eef80a61          VCVT.F32.U32 s1,s3                 ;736
0003cc  ed8a0a08          VSTR     s0,[r10,#0x20]        ;735
0003d0  ee400a42          VMLS.F32 s1,s0,s4              ;736
0003d4  ee002a10          VMOV     s0,r2                 ;737
0003d8  eeb80a40          VCVT.F32.U32 s0,s0                 ;737
0003dc  edca0a16          VSTR     s1,[r10,#0x58]        ;736
0003e0  eef80a61          VCVT.F32.U32 s1,s3                 ;737
0003e4  ee701a60          VSUB.F32 s3,s0,s1              ;737
0003e8  ee005a10          VMOV     s0,r5                 ;737
0003ec  eef80a41          VCVT.F32.U32 s1,s2                 ;737
0003f0  eeb80a40          VCVT.F32.U32 s0,s0                 ;737
0003f4  ee300a60          VSUB.F32 s0,s0,s1              ;737
0003f8  eec10a80          VDIV.F32 s1,s3,s0              ;737
0003fc  e021              B        |L1.1090|
                  |L1.1022|
0003fe  e06b              B        |L1.1240|
                  |L1.1024|
                          DCD      calflag
                  |L1.1028|
                          DCD      Run_Control
                  |L1.1032|
                          DCD      ||.data||
                  |L1.1036|
                          DCD      CalPara
                  |L1.1040|
                          DCD      flagB
                  |L1.1044|
                          DCD      Contr_Laod
                  |L1.1048|
                          DCD      Vmon_Load_value
                  |L1.1052|
                          DCD      Vmon_POWE_value
                  |L1.1056|
                          DCD      0x40020400
                  |L1.1060|
                          DCD      Contr_Voltage
                  |L1.1064|
                          DCD      Contr_Current
                  |L1.1068|
                          DCD      Imon_Load_value
                  |L1.1072|
                          DCD      Imon_POWE_value
                  |L1.1076|
000434  e060              B        |L1.1272|
                  |L1.1078|
000436  e071              B        |L1.1308|
                  |L1.1080|
000438  e082              B        |L1.1344|
                  |L1.1082|
00043a  e093              B        |L1.1380|
                  |L1.1084|
00043c  e149              B        |L1.1746|
                  |L1.1086|
00043e  e155              B        |L1.1772|
                  |L1.1088|
000440  e162              B        |L1.1800|
                  |L1.1090|
000442  ee005a10          VMOV     s0,r5                 ;738
000446  edca0a09          VSTR     s1,[r10,#0x24]        ;738
00044a  eeb81a40          VCVT.F32.U32 s2,s0                 ;738
00044e  ee002a10          VMOV     s0,r2                 ;738
000452  eeb80a40          VCVT.F32.U32 s0,s0                 ;738
000456  ee000ac1          VMLS.F32 s0,s1,s2              ;738
00045a  eef80a63          VCVT.F32.U32 s1,s7                 ;740
00045e  eeb81a43          VCVT.F32.U32 s2,s6                 ;740
000462  ed800a17          VSTR     s0,[r0,#0x5c]         ;738
000466  ed940a0c          VLDR     s0,[r4,#0x30]         ;740
00046a  eeb80a40          VCVT.F32.U32 s0,s0                 ;740
00046e  ee700ac0          VSUB.F32 s1,s1,s0              ;740
000472  ed940a0b          VLDR     s0,[r4,#0x2c]         ;740
000476  eeb80a40          VCVT.F32.U32 s0,s0                 ;740
00047a  ee311a40          VSUB.F32 s2,s2,s0              ;740
00047e  ee800a81          VDIV.F32 s0,s1,s2              ;740
000482  eeb81a43          VCVT.F32.U32 s2,s6                 ;741
000486  eef80a63          VCVT.F32.U32 s1,s7                 ;741
00048a  ed800a0f          VSTR     s0,[r0,#0x3c]         ;740
00048e  ee400a41          VMLS.F32 s1,s0,s2              ;741
000492  ee005a10          VMOV     s0,r5                 ;742
000496  eeb80a40          VCVT.F32.U32 s0,s0                 ;742
00049a  edc00a1d          VSTR     s1,[r0,#0x74]         ;741
00049e  eef80a63          VCVT.F32.U32 s1,s7                 ;742
0004a2  ee301a60          VSUB.F32 s2,s0,s1              ;742
0004a6  ee001a10          VMOV     s0,r1                 ;742
0004aa  eef80a43          VCVT.F32.U32 s1,s6                 ;742
0004ae  eeb80a40          VCVT.F32.U32 s0,s0                 ;742
0004b2  ee300a60          VSUB.F32 s0,s0,s1              ;742
0004b6  eec10a00          VDIV.F32 s1,s2,s0              ;742
0004ba  ee001a10          VMOV     s0,r1                 ;743
0004be  eeb81a40          VCVT.F32.U32 s2,s0                 ;743
0004c2  ee005a10          VMOV     s0,r5                 ;743
0004c6  eeb80a40          VCVT.F32.U32 s0,s0                 ;743
0004ca  edc00a10          VSTR     s1,[r0,#0x40]         ;742
0004ce  ee000ac1          VMLS.F32 s0,s1,s2              ;743
0004d2  ed8a0a1e          VSTR     s0,[r10,#0x78]        ;743
0004d6  e0f6              B        |L1.1734|
                  |L1.1240|
0004d8  f8c28020          STR      r8,[r2,#0x20]         ;749  ; Run_Control
0004dc  4671              MOV      r1,lr                 ;750
0004de  48f8              LDR      r0,|L1.2240|
0004e0  f7fffffe          BL       GPIO_ResetBits
0004e4  f2417170          MOV      r1,#0x1770            ;751
0004e8  f8a91000          STRH     r1,[r9,#0]            ;751
                  |L1.1260|
0004ec  f8868000          STRB     r8,[r6,#0]            ;709
0004f0  e6d2              B        |L1.664|
                  |L1.1266|
0004f2  f7fffffe          BL       OnOff_GPOI_ResetSet
                  |L1.1270|
0004f6  e278              B        |L1.2538|
                  |L1.1272|
0004f8  f8c28020          STR      r8,[r2,#0x20]         ;756  ; Run_Control
0004fc  4671              MOV      r1,lr                 ;757
0004fe  48f0              LDR      r0,|L1.2240|
000500  f7fffffe          BL       GPIO_ResetBits
000504  6165              STR      r5,[r4,#0x14]         ;759  ; x1
000506  f8b91000          LDRH     r1,[r9,#0]            ;759  ; Contr_Laod
00050a  4648              MOV      r0,r9                 ;759
00050c  61a1              STR      r1,[r4,#0x18]         ;760  ; y1
00050e  f8bb1000          LDRH     r1,[r11,#0]           ;760  ; Imon_Load_value
000512  e9c4150d          STRD     r1,r5,[r4,#0x34]      ;760
000516  f64261e0          MOV      r1,#0x2ee0            ;762
00051a  e73a              B        |L1.914|
                  |L1.1308|
00051c  f8c28020          STR      r8,[r2,#0x20]         ;765  ; Run_Control
000520  4671              MOV      r1,lr                 ;766
000522  48e7              LDR      r0,|L1.2240|
000524  f7fffffe          BL       GPIO_ResetBits
000528  61e5              STR      r5,[r4,#0x1c]         ;768  ; x2
00052a  f8b91000          LDRH     r1,[r9,#0]            ;768  ; Contr_Laod
00052e  4648              MOV      r0,r9                 ;768
000530  6221              STR      r1,[r4,#0x20]         ;769  ; y2
000532  f8bb1000          LDRH     r1,[r11,#0]           ;769  ; Imon_Load_value
000536  e9c4150f          STRD     r1,r5,[r4,#0x3c]      ;769
                  |L1.1338|
00053a  f6446120          MOV      r1,#0x4e20            ;668
00053e  e728              B        |L1.914|
                  |L1.1344|
000540  f8c28020          STR      r8,[r2,#0x20]         ;774  ; Run_Control
000544  4671              MOV      r1,lr                 ;775
000546  48de              LDR      r0,|L1.2240|
000548  f7fffffe          BL       GPIO_ResetBits
00054c  6265              STR      r5,[r4,#0x24]         ;777  ; x3
00054e  f8b91000          LDRH     r1,[r9,#0]            ;777  ; Contr_Laod
000552  4648              MOV      r0,r9                 ;777
000554  62a1              STR      r1,[r4,#0x28]         ;778  ; y3
000556  f8bb1000          LDRH     r1,[r11,#0]           ;778  ; Imon_Load_value
00055a  e9c41511          STRD     r1,r5,[r4,#0x44]      ;778
00055e  f6494140          MOV      r1,#0x9c40            ;780
000562  e716              B        |L1.914|
                  |L1.1380|
000564  62e5              STR      r5,[r4,#0x2c]         ;784  ; x4
000566  f8b92000          LDRH     r2,[r9,#0]            ;784  ; Contr_Laod
00056a  6322              STR      r2,[r4,#0x30]         ;785  ; y4
00056c  f8bb1000          LDRH     r1,[r11,#0]           ;785  ; Imon_Load_value
000570  eeb84a61          VCVT.F32.U32 s8,s3                 ;788
000574  eeb80a40          VCVT.F32.U32 s0,s0                 ;788
000578  eef80a60          VCVT.F32.U32 s1,s1                 ;788
00057c  e9c41513          STRD     r1,r5,[r4,#0x4c]      ;788
000580  ee344a40          VSUB.F32 s8,s8,s0              ;788
000584  eeb80a41          VCVT.F32.U32 s0,s2                 ;788
000588  4650              MOV      r0,r10                ;788
00058a  ee700a60          VSUB.F32 s1,s0,s1              ;788
00058e  ee840a20          VDIV.F32 s0,s8,s1              ;788
000592  eeb84a41          VCVT.F32.U32 s8,s2                 ;789
000596  eef80a61          VCVT.F32.U32 s1,s3                 ;789
00059a  eeb81a41          VCVT.F32.U32 s2,s2                 ;790
00059e  ed8a0a0a          VSTR     s0,[r10,#0x28]        ;788
0005a2  ee400a44          VMLS.F32 s1,s0,s8              ;789
0005a6  eeb80a62          VCVT.F32.U32 s0,s5                 ;790
0005aa  edca0a18          VSTR     s1,[r10,#0x60]        ;789
0005ae  eef80a61          VCVT.F32.U32 s1,s3                 ;790
0005b2  ee700a60          VSUB.F32 s1,s0,s1              ;790
0005b6  eeb80a42          VCVT.F32.U32 s0,s4                 ;790
0005ba  ee301a41          VSUB.F32 s2,s0,s2              ;790
0005be  ee800a81          VDIV.F32 s0,s1,s2              ;790
0005c2  eeb81a42          VCVT.F32.U32 s2,s4                 ;791
0005c6  eef80a62          VCVT.F32.U32 s1,s5                 ;791
0005ca  ed8a0a0b          VSTR     s0,[r10,#0x2c]        ;790
0005ce  ee400a41          VMLS.F32 s1,s0,s2              ;791
0005d2  ee002a10          VMOV     s0,r2                 ;792
0005d6  eeb80a40          VCVT.F32.U32 s0,s0                 ;792
0005da  edc00a19          VSTR     s1,[r0,#0x64]         ;791
0005de  eef80a62          VCVT.F32.U32 s1,s5                 ;792
0005e2  ee301a60          VSUB.F32 s2,s0,s1              ;792
0005e6  ee005a10          VMOV     s0,r5                 ;792
0005ea  eef80a42          VCVT.F32.U32 s1,s4                 ;792
0005ee  eeb82a43          VCVT.F32.U32 s4,s6                 ;795
0005f2  eeb80a40          VCVT.F32.U32 s0,s0                 ;792
0005f6  ee300a60          VSUB.F32 s0,s0,s1              ;792
0005fa  eec10a00          VDIV.F32 s1,s2,s0              ;792
0005fe  ee005a10          VMOV     s0,r5                 ;793
000602  eeb81a40          VCVT.F32.U32 s2,s0                 ;793
000606  ee002a10          VMOV     s0,r2                 ;793
00060a  eeb80a40          VCVT.F32.U32 s0,s0                 ;793
00060e  edc00a0c          VSTR     s1,[r0,#0x30]         ;792
000612  ee000ac1          VMLS.F32 s0,s1,s2              ;793
000616  eeb81a63          VCVT.F32.U32 s2,s7                 ;795
00061a  ed800a1a          VSTR     s0,[r0,#0x68]         ;793
00061e  ed940a10          VLDR     s0,[r4,#0x40]         ;795
000622  eef80a40          VCVT.F32.U32 s1,s0                 ;795
000626  ee701ac1          VSUB.F32 s3,s1,s2              ;795
00062a  ed941a0f          VLDR     s2,[r4,#0x3c]         ;795
00062e  eef80a41          VCVT.F32.U32 s1,s2                 ;795
000632  ee302ac2          VSUB.F32 s4,s1,s4              ;795
000636  eec10a82          VDIV.F32 s1,s3,s4              ;795
00063a  eeb82a41          VCVT.F32.U32 s4,s2                 ;796
00063e  eef81a40          VCVT.F32.U32 s3,s0                 ;796
000642  eeb80a40          VCVT.F32.U32 s0,s0                 ;797
000646  eeb81a41          VCVT.F32.U32 s2,s2                 ;797
00064a  edc00a11          VSTR     s1,[r0,#0x44]         ;795
00064e  ee401ac2          VMLS.F32 s3,s1,s4              ;796
000652  edc01a1f          VSTR     s3,[r0,#0x7c]         ;796
000656  edd40a12          VLDR     s1,[r4,#0x48]         ;797
00065a  eef81a60          VCVT.F32.U32 s3,s1                 ;797
00065e  ee711ac0          VSUB.F32 s3,s3,s0              ;797
000662  ed940a11          VLDR     s0,[r4,#0x44]         ;797
000666  eeb82a40          VCVT.F32.U32 s4,s0                 ;797
00066a  ee322a41          VSUB.F32 s4,s4,s2              ;797
00066e  ee811a82          VDIV.F32 s2,s3,s4              ;797
000672  eeb82a40          VCVT.F32.U32 s4,s0                 ;798
000676  eef81a60          VCVT.F32.U32 s3,s1                 ;798
00067a  eef80a60          VCVT.F32.U32 s1,s1                 ;799
00067e  ed801a12          VSTR     s2,[r0,#0x48]         ;797
000682  ee411a42          VMLS.F32 s3,s2,s4              ;798
000686  ee015a10          VMOV     s2,r5                 ;799
00068a  eeb81a41          VCVT.F32.U32 s2,s2                 ;799
00068e  edc01a20          VSTR     s3,[r0,#0x80]         ;798
000692  ee311a60          VSUB.F32 s2,s2,s1              ;799
000696  ee001a90          VMOV     s1,r1                 ;799
00069a  eeb80a40          VCVT.F32.U32 s0,s0                 ;799
00069e  eef80a60          VCVT.F32.U32 s1,s1                 ;799
0006a2  ee300ac0          VSUB.F32 s0,s1,s0              ;799
0006a6  eec10a00          VDIV.F32 s1,s2,s0              ;799
0006aa  ee001a10          VMOV     s0,r1                 ;800
0006ae  eeb81a40          VCVT.F32.U32 s2,s0                 ;800
0006b2  ee005a10          VMOV     s0,r5                 ;800
0006b6  eeb80a40          VCVT.F32.U32 s0,s0                 ;800
0006ba  edc00a13          VSTR     s1,[r0,#0x4c]         ;799
0006be  ee000ac1          VMLS.F32 s0,s1,s2              ;800
0006c2  ed8a0a21          VSTR     s0,[r10,#0x84]        ;800
                  |L1.1734|
0006c6  f8cc3000          STR      r3,[r12,#0]           ;746  ; flagB
0006ca  7037              STRB     r7,[r6,#0]            ;746
0006cc  f7fffffe          BL       Off_GPOI_ResetSet
0006d0  e18b              B        |L1.2538|
                  |L1.1746|
0006d2  497c              LDR      r1,|L1.2244|
0006d4  f64050ac          MOV      r0,#0xdac             ;806
0006d8  8008              STRH     r0,[r1,#0]            ;806
0006da  487b              LDR      r0,|L1.2248|
0006dc  f44f617a          MOV      r1,#0xfa0             ;807
0006e0  8001              STRH     r1,[r0,#0]            ;807
0006e2  f8868000          STRB     r8,[r6,#0]            ;808
                  |L1.1766|
0006e6  2101              MOVS     r1,#1                 ;632
0006e8  2000              MOVS     r0,#0                 ;632
0006ea  e702              B        |L1.1266|
                  |L1.1772|
0006ec  4976              LDR      r1,|L1.2248|
0006ee  6165              STR      r5,[r4,#0x14]         ;813  ; x1
0006f0  880a              LDRH     r2,[r1,#0]            ;813  ; Contr_Current
0006f2  61a2              STR      r2,[r4,#0x18]         ;814  ; y1
0006f4  8800              LDRH     r0,[r0,#0]            ;814  ; Imon_POWE_value
0006f6  e9c40509          STRD     r0,r5,[r4,#0x24]      ;814
0006fa  4a72              LDR      r2,|L1.2244|
0006fc  f64050ac          MOV      r0,#0xdac             ;816
000700  8010              STRH     r0,[r2,#0]            ;816
000702  0080              LSLS     r0,r0,#2              ;817
                  |L1.1796|
000704  8008              STRH     r0,[r1,#0]            ;817
000706  e170              B        |L1.2538|
                  |L1.1800|
000708  496f              LDR      r1,|L1.2248|
00070a  61e5              STR      r5,[r4,#0x1c]         ;821  ; x2
00070c  8809              LDRH     r1,[r1,#0]            ;821  ; Contr_Current
00070e  6221              STR      r1,[r4,#0x20]         ;822  ; y2
000710  8800              LDRH     r0,[r0,#0]            ;822  ; Imon_POWE_value
000712  ee011a10          VMOV     s2,r1                 ;825
000716  eeb80a40          VCVT.F32.U32 s0,s0                 ;825
00071a  eef80a60          VCVT.F32.U32 s1,s1                 ;825
00071e  eeb81a41          VCVT.F32.U32 s2,s2                 ;825
000722  e9c4050b          STRD     r0,r5,[r4,#0x2c]      ;822
000726  ee311a40          VSUB.F32 s2,s2,s0              ;825
00072a  ee005a10          VMOV     s0,r5                 ;825
00072e  4652              MOV      r2,r10                ;825
000730  eeb80a40          VCVT.F32.U32 s0,s0                 ;825
000734  ee300a60          VSUB.F32 s0,s0,s1              ;825
000738  eec10a00          VDIV.F32 s1,s2,s0              ;825
00073c  ee005a10          VMOV     s0,r5                 ;826
000740  eeb81a40          VCVT.F32.U32 s2,s0                 ;826
000744  ee001a10          VMOV     s0,r1                 ;826
000748  eeb80a40          VCVT.F32.U32 s0,s0                 ;826
00074c  edca0a14          VSTR     s1,[r10,#0x50]        ;825
000750  ee000ac1          VMLS.F32 s0,s1,s2              ;826
000754  eef80a62          VCVT.F32.U32 s1,s5                 ;828
000758  ed8a0a22          VSTR     s0,[r10,#0x88]        ;826
00075c  ee005a10          VMOV     s0,r5                 ;828
000760  eeb80a40          VCVT.F32.U32 s0,s0                 ;828
000764  ee301a60          VSUB.F32 s2,s0,s1              ;828
000768  ee000a10          VMOV     s0,r0                 ;828
00076c  eef80a42          VCVT.F32.U32 s1,s4                 ;828
000770  eeb80a40          VCVT.F32.U32 s0,s0                 ;828
000774  ee300a60          VSUB.F32 s0,s0,s1              ;828
000778  eec10a00          VDIV.F32 s1,s2,s0              ;828
00077c  ee000a10          VMOV     s0,r0                 ;829
000780  eeb81a40          VCVT.F32.U32 s2,s0                 ;829
000784  ee005a10          VMOV     s0,r5                 ;829
000788  eeb80a40          VCVT.F32.U32 s0,s0                 ;829
00078c  edc20a15          VSTR     s1,[r2,#0x54]         ;828
000790  ee000ac1          VMLS.F32 s0,s1,s2              ;829
000794  ed8a0a23          VSTR     s0,[r10,#0x8c]        ;829
000798  e795              B        |L1.1734|
                  |L1.1946|
;;;836    		if(range == 0)//内阻低档位低段
;;;837    		{
;;;838    			LOAD_I_SW = 1;
;;;839    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;840    			RCONT_SW = 0;
;;;841    			calflag = 1;
;;;842    			x1 = Rmon_value;
00079a  f8df9130          LDR      r9,|L1.2252|
00079e  b1c1              CBZ      r1,|L1.2002|
;;;843    			y1 = data;
;;;844    			
;;;845    //			Modify_A_READ=0;
;;;846    //			Modify_A_ACT=0;
;;;847    //			Modify_A_READ = Rmon_value;//测量电阻值
;;;848    //			Modify_A_ACT = data;//读取低段
;;;849    		}else if (range == 1)//内阻低档位高段
0007a0  2901              CMP      r1,#1
0007a2  d025              BEQ      |L1.2032|
;;;850    		{
;;;851    			
;;;852    			x2 = Rmon_value;
;;;853    			y2 = data;
;;;854    			CalPara.TestR[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;855    			CalPara.OffsetR[0] = (float)y2 - CalPara.TestR[0]*(float)x2;
;;;856    				//参数写进FLASH
;;;857    			Flag_DAC_OFF=0;
;;;858    			calflag = 0;
;;;859    		}else if(range == 2)//内阻高档位低段
0007a4  2902              CMP      r1,#2
0007a6  d048              BEQ      |L1.2106|
;;;860    		{
;;;861    			LOAD_I_SW = 1;
;;;862    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;863    			RCONT_SW = 1;
;;;864    			calflag = 1;
;;;865    			x1 = Rmon_value;
;;;866    			y1 = data;
;;;867    		}else if (range == 3)//内阻高档位高段
0007a8  2903              CMP      r1,#3
0007aa  d050              BEQ      |L1.2126|
;;;868    		{
;;;869    			
;;;870    			x2 = Rmon_value;
;;;871    			y2 = data;
;;;872    			CalPara.TestR[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;873    			CalPara.OffsetR[1] = (float)y2 - CalPara.TestR[1]*(float)x2;
;;;874    				//参数写进FLASH
;;;875    			Flag_DAC_OFF=0;
;;;876    			calflag = 0;
;;;877    		}else if(range == 4)//识别电阻1低段
;;;878    		{
;;;879    			calflag = 1;
;;;880    //			x1 = (R1mon_value*1000)/(65535-R1mon_value);
;;;881    			x1 = (R1mon_value*1000)/(65535-R1mon_value);
0007ac  f8dfb120          LDR      r11,|L1.2256|
0007b0  f64f70ff          MOV      r0,#0xffff
0007b4  2904              CMP      r1,#4                 ;877
0007b6  d074              BEQ      |L1.2210|
;;;882    			y1 = data;
;;;883    		}else if (range == 5)//识别电阻1高段
0007b8  2905              CMP      r1,#5
0007ba  d06e              BEQ      |L1.2202|
;;;884    		{
;;;885    			
;;;886    //			x2 = (R1mon_value*1000)/(65535-R1mon_value);
;;;887    			x2 = (R1mon_value*1000)/(65535-R1mon_value);
;;;888    			y2 = data;
;;;889    			CalPara.TestR1[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;890    			CalPara.OffsetR1[0] = (float)y2 - CalPara.TestR1[0]*(float)x2;
;;;891    				//参数写进FLASH
;;;892    			Flag_DAC_OFF=0;
;;;893    			calflag = 0;
;;;894    		}else if(range == 6)//识别电阻2低段
;;;895    		{
;;;896    			calflag = 1;
;;;897    			x1 = (R2mon_value*1000)/(65535-R2mon_value);
0007bc  f8dfb114          LDR      r11,|L1.2260|
0007c0  2906              CMP      r1,#6                 ;894
0007c2  d06e              BEQ      |L1.2210|
;;;898    			y1 = data;
;;;899    		}else if (range == 7)//识别电阻2高段
0007c4  2907              CMP      r1,#7
0007c6  d069              BEQ      |L1.2204|
;;;900    		{
;;;901    			
;;;902    			x2 = (R2mon_value*1000)/(65535-R2mon_value);
;;;903    			y2 = data;
;;;904    			CalPara.TestR2[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;905    			CalPara.OffsetR2[0] = (float)y2 - CalPara.TestR2[0]*(float)x2;
;;;906    				//参数写进FLASH
;;;907    			Flag_DAC_OFF=0;
;;;908    			calflag = 0;
;;;909    		}else if(range == 8)//内阻高档位低段
0007c8  2908              CMP      r1,#8
0007ca  d068              BEQ      |L1.2206|
;;;910    		{
;;;911    			RCONT_SW = 1;
;;;912    			calflag = 1;
;;;913    			x1 = Rmon_value;
;;;914    			y1 = data;
;;;915    		}else if (range == 9)//内阻高档位高段
0007cc  2909              CMP      r1,#9
0007ce  d067              BEQ      |L1.2208|
0007d0  e10b              B        |L1.2538|
                  |L1.2002|
0007d2  4640              MOV      r0,r8                 ;838
0007d4  46c2              MOV      r10,r8                ;838
0007d6  4690              MOV      r8,r2                 ;838
0007d8  6210              STR      r0,[r2,#0x20]         ;838  ; Run_Control
0007da  4671              MOV      r1,lr                 ;839
0007dc  4838              LDR      r0,|L1.2240|
0007de  f7fffffe          BL       GPIO_ResetBits
0007e2  f8c87024          STR      r7,[r8,#0x24]         ;840  ; Run_Control
0007e6  f886a000          STRB     r10,[r6,#0]           ;841
0007ea  e0d5              B        |L1.2456|
                  |L1.2028|
0007ec  8800              LDRH     r0,[r0,#0]            ;603  ; Vmon_Load_value
0007ee  e064              B        |L1.2234|
                  |L1.2032|
0007f0  f8b90000          LDRH     r0,[r9,#0]            ;852  ; Rmon_value
0007f4  ee015a10          VMOV     s2,r5                 ;854
0007f8  eeb80a40          VCVT.F32.U32 s0,s0                 ;854
0007fc  eef80a60          VCVT.F32.U32 s1,s1                 ;854
000800  eeb81a41          VCVT.F32.U32 s2,s2                 ;854
000804  e9c40507          STRD     r0,r5,[r4,#0x1c]      ;852
000808  ee311a40          VSUB.F32 s2,s2,s0              ;854
00080c  ee000a10          VMOV     s0,r0                 ;854
000810  eeb80a40          VCVT.F32.U32 s0,s0                 ;854
000814  ee300a60          VSUB.F32 s0,s0,s1              ;854
000818  eec10a00          VDIV.F32 s1,s2,s0              ;854
00081c  ee000a10          VMOV     s0,r0                 ;855
000820  eeb81a40          VCVT.F32.U32 s2,s0                 ;855
000824  ee005a10          VMOV     s0,r5                 ;855
000828  eeb80a40          VCVT.F32.U32 s0,s0                 ;855
00082c  edca0a24          VSTR     s1,[r10,#0x90]        ;854
000830  ee000ac1          VMLS.F32 s0,s1,s2              ;855
000834  ed8a0a29          VSTR     s0,[r10,#0xa4]        ;855
                  |L1.2104|
000838  e0d4              B        |L1.2532|
                  |L1.2106|
00083a  4617              MOV      r7,r2                 ;861
00083c  f8c28020          STR      r8,[r2,#0x20]         ;861  ; Run_Control
000840  4671              MOV      r1,lr                 ;862
000842  481f              LDR      r0,|L1.2240|
000844  f7fffffe          BL       GPIO_ResetBits
000848  f8c78024          STR      r8,[r7,#0x24]         ;863  ; Run_Control
00084c  e0a2              B        |L1.2452|
                  |L1.2126|
00084e  f8b90000          LDRH     r0,[r9,#0]            ;870  ; Rmon_value
000852  ee015a10          VMOV     s2,r5                 ;872
000856  eeb80a40          VCVT.F32.U32 s0,s0                 ;872
00085a  eef80a60          VCVT.F32.U32 s1,s1                 ;872
00085e  eeb81a41          VCVT.F32.U32 s2,s2                 ;872
000862  e9c40507          STRD     r0,r5,[r4,#0x1c]      ;870
000866  ee311a40          VSUB.F32 s2,s2,s0              ;872
00086a  ee000a10          VMOV     s0,r0                 ;872
00086e  eeb80a40          VCVT.F32.U32 s0,s0                 ;872
000872  ee300a60          VSUB.F32 s0,s0,s1              ;872
000876  eec10a00          VDIV.F32 s1,s2,s0              ;872
00087a  ee000a10          VMOV     s0,r0                 ;873
00087e  eeb81a40          VCVT.F32.U32 s2,s0                 ;873
000882  ee005a10          VMOV     s0,r5                 ;873
000886  eeb80a40          VCVT.F32.U32 s0,s0                 ;873
00088a  edca0a25          VSTR     s1,[r10,#0x94]        ;872
00088e  ee000ac1          VMLS.F32 s0,s1,s2              ;873
000892  ed8a0a2a          VSTR     s0,[r10,#0xa8]        ;873
000896  e0a5              B        |L1.2532|
000898  e003              B        |L1.2210|
                  |L1.2202|
00089a  e01d              B        |L1.2264|
                  |L1.2204|
00089c  e04a              B        |L1.2356|
                  |L1.2206|
00089e  e077              B        |L1.2448|
                  |L1.2208|
0008a0  e07c              B        |L1.2460|
                  |L1.2210|
0008a2  f8868000          STRB     r8,[r6,#0]            ;879
0008a6  f8bb2000          LDRH     r2,[r11,#0]           ;881  ; R1mon_value
0008aa  f44f737a          MOV      r3,#0x3e8             ;881
0008ae  f8bb1000          LDRH     r1,[r11,#0]           ;881  ; R1mon_value
0008b2  435a              MULS     r2,r3,r2              ;881
0008b4  1a40              SUBS     r0,r0,r1              ;881
0008b6  fbb2f0f0          UDIV     r0,r2,r0              ;881
                  |L1.2234|
0008ba  e9c40505          STRD     r0,r5,[r4,#0x14]      ;881
0008be  e094              B        |L1.2538|
                  |L1.2240|
                          DCD      0x40020800
                  |L1.2244|
                          DCD      Contr_Voltage
                  |L1.2248|
                          DCD      Contr_Current
                  |L1.2252|
                          DCD      Rmon_value
                  |L1.2256|
                          DCD      R1mon_value
                  |L1.2260|
                          DCD      R2mon_value
                  |L1.2264|
0008d8  f8bb2000          LDRH     r2,[r11,#0]           ;887  ; R1mon_value
0008dc  f44f787a          MOV      r8,#0x3e8             ;887
0008e0  f8bb1000          LDRH     r1,[r11,#0]           ;887  ; R1mon_value
0008e4  fb02f208          MUL      r2,r2,r8              ;887
0008e8  ee015a10          VMOV     s2,r5                 ;889
0008ec  1a40              SUBS     r0,r0,r1              ;887
0008ee  fbb2f0f0          UDIV     r0,r2,r0              ;887
0008f2  eeb81a41          VCVT.F32.U32 s2,s2                 ;889
0008f6  eeb80a40          VCVT.F32.U32 s0,s0                 ;889
0008fa  eef80a60          VCVT.F32.U32 s1,s1                 ;889
0008fe  e9c40507          STRD     r0,r5,[r4,#0x1c]      ;887
000902  ee311a40          VSUB.F32 s2,s2,s0              ;889
000906  ee000a10          VMOV     s0,r0                 ;889
00090a  eeb80a40          VCVT.F32.U32 s0,s0                 ;889
00090e  ee300a60          VSUB.F32 s0,s0,s1              ;889
000912  eec10a00          VDIV.F32 s1,s2,s0              ;889
000916  ee000a10          VMOV     s0,r0                 ;890
00091a  eeb81a40          VCVT.F32.U32 s2,s0                 ;890
00091e  ee005a10          VMOV     s0,r5                 ;890
000922  eeb80a40          VCVT.F32.U32 s0,s0                 ;890
000926  edca0a27          VSTR     s1,[r10,#0x9c]        ;889
00092a  ee000ac1          VMLS.F32 s0,s1,s2              ;890
00092e  ed8a0a2c          VSTR     s0,[r10,#0xb0]        ;890
000932  e057              B        |L1.2532|
                  |L1.2356|
000934  f8bb2000          LDRH     r2,[r11,#0]           ;902  ; R2mon_value
000938  f44f787a          MOV      r8,#0x3e8             ;902
00093c  f8bb1000          LDRH     r1,[r11,#0]           ;902  ; R2mon_value
000940  fb02f208          MUL      r2,r2,r8              ;902
000944  ee015a10          VMOV     s2,r5                 ;904
000948  1a40              SUBS     r0,r0,r1              ;902
00094a  fbb2f0f0          UDIV     r0,r2,r0              ;902
00094e  eeb81a41          VCVT.F32.U32 s2,s2                 ;904
000952  eeb80a40          VCVT.F32.U32 s0,s0                 ;904
000956  eef80a60          VCVT.F32.U32 s1,s1                 ;904
00095a  e9c40507          STRD     r0,r5,[r4,#0x1c]      ;902
00095e  ee311a40          VSUB.F32 s2,s2,s0              ;904
000962  ee000a10          VMOV     s0,r0                 ;904
000966  eeb80a40          VCVT.F32.U32 s0,s0                 ;904
00096a  ee300a60          VSUB.F32 s0,s0,s1              ;904
00096e  eec10a00          VDIV.F32 s1,s2,s0              ;904
000972  ee000a10          VMOV     s0,r0                 ;905
000976  eeb81a40          VCVT.F32.U32 s2,s0                 ;905
00097a  ee005a10          VMOV     s0,r5                 ;905
00097e  eeb80a40          VCVT.F32.U32 s0,s0                 ;905
000982  edca0a28          VSTR     s1,[r10,#0xa0]        ;904
000986  ee000ac1          VMLS.F32 s0,s1,s2              ;905
00098a  ed8a0a2d          VSTR     s0,[r10,#0xb4]        ;905
00098e  e029              B        |L1.2532|
                  |L1.2448|
000990  f8c28024          STR      r8,[r2,#0x24]         ;911  ; Run_Control
                  |L1.2452|
000994  f8868000          STRB     r8,[r6,#0]            ;912
                  |L1.2456|
000998  4648              MOV      r0,r9                 ;913
00099a  e727              B        |L1.2028|
                  |L1.2460|
;;;916    		{
;;;917    			
;;;918    			x2 = Rmon_value;
00099c  f8b90000          LDRH     r0,[r9,#0]  ; Rmon_value
;;;919    			y2 = data;
;;;920    			CalPara.TestR[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
0009a0  ee015a10          VMOV     s2,r5
0009a4  eeb80a40          VCVT.F32.U32 s0,s0
0009a8  eef80a60          VCVT.F32.U32 s1,s1
0009ac  eeb81a41          VCVT.F32.U32 s2,s2
0009b0  e9c40507          STRD     r0,r5,[r4,#0x1c]      ;918
0009b4  ee311a40          VSUB.F32 s2,s2,s0
0009b8  ee000a10          VMOV     s0,r0
0009bc  eeb80a40          VCVT.F32.U32 s0,s0
0009c0  ee300a60          VSUB.F32 s0,s0,s1
0009c4  eec10a00          VDIV.F32 s1,s2,s0
;;;921    			CalPara.OffsetR[2] = (float)y2 - CalPara.TestR[2]*(float)x2;
0009c8  ee000a10          VMOV     s0,r0
0009cc  eeb81a40          VCVT.F32.U32 s2,s0
0009d0  ee005a10          VMOV     s0,r5
0009d4  eeb80a40          VCVT.F32.U32 s0,s0
0009d8  edca0a26          VSTR     s1,[r10,#0x98]        ;920
0009dc  ee000ac1          VMLS.F32 s0,s1,s2
0009e0  ed8a0a2b          VSTR     s0,[r10,#0xac]
                  |L1.2532|
;;;922    				//参数写进FLASH
;;;923    			Flag_DAC_OFF=0;
;;;924    			calflag = 0;
0009e4  f8cc3000          STR      r3,[r12,#0]  ; flagB
0009e8  7037              STRB     r7,[r6,#0]
                  |L1.2538|
;;;925    		}
;;;926    		
;;;927    	}
;;;928    		
;;;929    
;;;930    	Write_Flash_Bytes();
0009ea  e8bd5ff0          POP      {r4-r12,lr}
0009ee  f7ffbffe          B.W      Write_Flash_Bytes
;;;931    //	else if(mode == 1){//测量电流
;;;932    //		if(range == 1)
;;;933    //		{
;;;934    //			x1 = abs(I_CS);
;;;935    //			y1 = data;
;;;936    //		}else if(range == 2){
;;;937    //			x2 = abs(I_CS);
;;;938    //			y2 = data;
;;;939    //			SaveDebug.TestIcal[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;940    //			SaveDebug.OffsetI[1] = (float)y2 - SaveDebug.TestIcal[1]*(float)x2;
;;;941    //		}else if(range == 4){
;;;942    //			x1 = abs(I_CS);
;;;943    //			y1 = data;
;;;944    //		}else if(range == 5){
;;;945    //			x2 = abs(I_CS);
;;;946    //			y2 = data;
;;;947    //			SaveDebug.TestIcal[4] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;948    //			SaveDebug.OffsetI[3] = (float)y2 - SaveDebug.TestIcal[4]*(float)x2;
;;;949    //		}else if(range == 0){
;;;950    //			SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[0]);
;;;951    //		}else if(range == 3){
;;;952    //			SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[0]));
;;;953    //		}
;;;954    ////		else if(range == 4){
;;;955    ////			x1 = V_CS;
;;;956    ////			y1 = data;
;;;957    ////		}else if(range == 5){
;;;958    ////			x2 = V_CS;
;;;959    ////			y2 = data;
;;;960    ////			SaveDebug.TestVcal[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;961    ////			SaveDebug.OffsetV[2] = (float)y2 - SaveDebug.TestVcal[2]*(float)x2;
;;;962    ////		}
;;;963    //		
;;;964    ////		if(range < 3)
;;;965    ////		{
;;;966    ////			if(range == 0)
;;;967    ////			{
;;;968    ////				SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[0]);
;;;969    ////			}else{
;;;970    ////				SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[1]);
;;;971    ////			}			
;;;972    ////		}else{
;;;973    ////			if(range == 3)
;;;974    ////			{
;;;975    ////				SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[0]));
;;;976    ////			}else{
;;;977    ////				SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[1]));
;;;978    ////			}
;;;979    ////		}
;;;980    ////		calflag = 1;
;;;981    //	}else if(mode == 2){//控制电压
;;;982    //		if(range == 0)
;;;983    //		{
;;;984    //			_D_ = 1000;
;;;985    //			x1 = data;
;;;986    //			y1 = _D_;
;;;987    //		}else if(range == 1){
;;;988    //			_D_ = 7000;
;;;989    //			x2 = data;
;;;990    //			y2 = _D_;
;;;991    //			SaveDebug.ControlV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;992    //			SaveDebug.OffsetCV[0] = (float)y2 - SaveDebug.ControlV[0]*(float)x2;
;;;993    //		}else if(range == 2){
;;;994    //			_D_ = 10000;
;;;995    //			x1 = data;
;;;996    //			y1 = _D_;
;;;997    //		}else if(range == 3){
;;;998    //			_D_ = 13000;
;;;999    //			x2 = data;
;;;1000   //			y2 = _D_;
;;;1001   //			SaveDebug.ControlV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;1002   //			SaveDebug.OffsetCV[1] = (float)y2 - SaveDebug.ControlV[1]*(float)x2;
;;;1003   //		}else if(range == 4){
;;;1004   //			_D_ = 17000;
;;;1005   //			x1 = data;
;;;1006   //			y1 = _D_;
;;;1007   //		}else if(range == 5){
;;;1008   //			_D_ = 20000;
;;;1009   //			x2 = data;
;;;1010   //			y2 = _D_;
;;;1011   //			SaveDebug.ControlV[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;1012   //			SaveDebug.OffsetCV[2] = (float)y2 - SaveDebug.ControlV[2]*(float)x2;
;;;1013   //		}else if(range == 6){
;;;1014   //			_D_ = 24000;
;;;1015   //			x1 = data;
;;;1016   //			y1 = _D_;
;;;1017   //		}else if(range == 7){
;;;1018   //			_D_ = 27000;
;;;1019   //			x2 = data;
;;;1020   //			y2 = _D_;
;;;1021   //			SaveDebug.ControlV[3] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;1022   //			SaveDebug.OffsetCV[3] = (float)y2 - SaveDebug.ControlV[3]*(float)x2;
;;;1023   //		}
;;;1024   //		
;;;1025   ////		if(range == 0)
;;;1026   ////		{
;;;1027   ////			SaveDebug.ControlV[range] = (float)1000/(float)data;
;;;1028   ////		}else if(range == 1){
;;;1029   ////			SaveDebug.ControlV[range] = (float)10000/(float)data;
;;;1030   ////		}else if(range == 2){
;;;1031   ////			SaveDebug.ControlV[range] = (float)15000/(float)data;
;;;1032   ////		}else if(range == 3){
;;;1033   ////			SaveDebug.ControlV[range] = (float)19000/(float)data;
;;;1034   ////		}
;;;1035   ////		calflag = 1;
;;;1036   //	}else if(mode == 3){//电流清零
;;;1037   //		SaveDebug.ClearI[range] = I_CS;
;;;1038   ////		calflag = 1;
;;;1039   //	}
;;;1040   	
;;;1041   }
;;;1042   
                          ENDP


                          AREA ||i.DMA1_Stream3_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Stream3_IRQHandler PROC
;;;2429   
;;;2430   void DMA1_Stream3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2431   {
;;;2432   	//----DMA1 通道3完成中断，对应的中断也需要清除
;;;2433   	if(DMA_GetITStatus(DMA1_Stream3,DMA_IT_TCIF3) != RESET)   
000002  4d0c              LDR      r5,|L2.52|
000004  4c0c              LDR      r4,|L2.56|
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       DMA_GetITStatus
00000e  2800              CMP      r0,#0
000010  d00e              BEQ      |L2.48|
;;;2434       {
;;;2435   		/* 清除标志位 */
;;;2436   		DMA_ClearFlag(DMA1_Stream3,DMA_IT_TCIF3); 
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       DMA_ClearFlag
;;;2437   		/* 关闭DMA */
;;;2438   		DMA_Cmd(DMA1_Stream3,DISABLE);
00001a  2100              MOVS     r1,#0
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       DMA_Cmd
;;;2439   		
;;;2440   		while (!(USART3->SR & USART_FLAG_TC));  //硬件数据发送完毕
000022  4806              LDR      r0,|L2.60|
                  |L2.36|
000024  8801              LDRH     r1,[r0,#0]
000026  0649              LSLS     r1,r1,#25
000028  d5fc              BPL      |L2.36|
                  |L2.42|
;;;2441   		while (!(USART3->SR & USART_FLAG_TXE)); //等待数据从软件拷贝到硬件进行发送
00002a  8801              LDRH     r1,[r0,#0]
00002c  0609              LSLS     r1,r1,#24
00002e  d5fc              BPL      |L2.42|
                  |L2.48|
;;;2442   	}
;;;2443   }
000030  bd70              POP      {r4-r6,pc}
;;;2444   
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      0x18008000
                  |L2.56|
                          DCD      0x40026058
                  |L2.60|
                          DCD      0x40004800

                          AREA ||i.IsDigitChar||, CODE, READONLY, ALIGN=1

                  IsDigitChar PROC
;;;91     /*****************************************************************/
;;;92     unsigned short IsDigitChar(unsigned char a)             //如果a的值是数字的话返回1，否则返回0
000000  3830              SUBS     r0,r0,#0x30
;;;93     {
;;;94     	int b;
;;;95       if(a<0x30 || a>0x39)                     //数字1-9
000002  280a              CMP      r0,#0xa
000004  d301              BCC      |L3.10|
;;;96       	{
;;;97       	   b=0;
000006  2000              MOVS     r0,#0
;;;98       	}
;;;99       else
;;;100      	{
;;;101      	   b=1;
;;;102      	}
;;;103      return b;
;;;104    }
000008  4770              BX       lr
                  |L3.10|
00000a  2001              MOVS     r0,#1                 ;101
00000c  4770              BX       lr
;;;105    void SetPowerV(vu32 powv)
                          ENDP


                          AREA ||i.LIST_ONOFF||, CODE, READONLY, ALIGN=2

                  LIST_ONOFF PROC
;;;403    
;;;404    void LIST_ONOFF(vu8 value)
000000  e92d43f1          PUSH     {r0,r4-r9,lr}
;;;405    {
;;;406    	switch(MODE)
000004  4b63              LDR      r3,|L4.404|
000006  ed2d8b02          VPUSH    {d8}                  ;405
00000a  f893c005          LDRB     r12,[r3,#5]  ; MODE
;;;407    	{
;;;408    		case 0://电子负载ON/OFF
;;;409    		{
;;;410    			LOAD_MODE=0;
;;;411    			GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
;;;412    			if( value == 0 ){
;;;413    				
;;;414    				Flag_Swtich_ON = 0;
00000e  4d63              LDR      r5,|L4.412|
000010  2600              MOVS     r6,#0                 ;406
000012  4a61              LDR      r2,|L4.408|
;;;415    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	 
;;;416    //				TIM_SetCompare1(TIM1,33000/2);				
;;;417    			}
;;;418    			else if( value == 1 ){
;;;419    				
;;;420    				Flag_Swtich_ON = 1;
000014  6829              LDR      r1,[r5,#0]
;;;421    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;422    //				TIM_SetCompare1(TIM1,0);
;;;423    			}
;;;424    		}break;
;;;425    		case 1://稳压电源ON/OFF
;;;426    		{
;;;427    			if( value == 0 ){
;;;428    				PowerCommWaitHandle(3,1);
;;;429    //				listsend = 3;
;;;430    				listpowwatch1 ++;
;;;431    //				PowerSwitch(0);
;;;432    //				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;433    //				Para.CSET_Voltage = 0;
;;;434    //				Para.CSET_Current = 0;
;;;435    //				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;436    			}
;;;437    			else if( value == 1 ){
;;;438    				PowerCommWaitHandle(1,1);
;;;439    //				listsend = 1;
;;;440    				listpowwatch2 ++;
;;;441    //				PowerSwitch(1);
;;;442    //				Para.CSET_Voltage = Para.CDC_OutPut_V;
;;;443    //				Para.CSET_Current = Para.CDC_Limit_C;
;;;444    //				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;445    //				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;446    			}
;;;447    		}break;
;;;448    		case 2://过流测试ON/OFF
;;;449    		{
;;;450    			listocwatch++;
;;;451    			if( value == 0 ){
;;;452    				
;;;453    				Off_GPOI_ResetSet();
;;;454    				trig_flag_state = 0;
;;;455    				max_discahrgeNum = 0;
;;;456    				Para.CSET_Current_Laod =  Para.IR_Start_C;
000016  4c62              LDR      r4,|L4.416|
000018  4f62              LDR      r7,|L4.420|
00001a  f0410040          ORR      r0,r1,#0x40           ;420
00001e  f1bc0f05          CMP      r12,#5                ;406
000022  d227              BCS      |L4.116|
000024  e8dff00c          TBB      [pc,r12]              ;406
000028  0318327e          DCB      0x03,0x18,0x32,0x7e
00002c  9a00              DCB      0x9a,0x00
00002e  6196              STR      r6,[r2,#0x18]         ;410  ; Run_Control
000030  f44f5180          MOV      r1,#0x1000            ;411
000034  4638              MOV      r0,r7                 ;411
000036  f7fffffe          BL       GPIO_ResetBits
00003a  f89d0008          LDRB     r0,[sp,#8]            ;412
00003e  b138              CBZ      r0,|L4.80|
000040  f89d0008          LDRB     r0,[sp,#8]            ;418
000044  2801              CMP      r0,#1                 ;418
000046  d115              BNE      |L4.116|
000048  6828              LDR      r0,[r5,#0]            ;420  ; flagA
00004a  f0400040          ORR      r0,r0,#0x40           ;420
00004e  e08c              B        |L4.362|
                  |L4.80|
000050  6828              LDR      r0,[r5,#0]            ;414  ; flagA
000052  f0200040          BIC      r0,r0,#0x40           ;414
000056  e093              B        |L4.384|
000058  f89d0008          LDRB     r0,[sp,#8]            ;427
00005c  b170              CBZ      r0,|L4.124|
00005e  f89d0008          LDRB     r0,[sp,#8]            ;437
000062  2801              CMP      r0,#1                 ;437
000064  d106              BNE      |L4.116|
000066  2101              MOVS     r1,#1                 ;438
000068  4608              MOV      r0,r1                 ;438
00006a  f7fffffe          BL       PowerCommWaitHandle
00006e  7b98              LDRB     r0,[r3,#0xe]          ;440  ; listpowwatch2
000070  1c40              ADDS     r0,r0,#1              ;440
000072  7398              STRB     r0,[r3,#0xe]          ;440
                  |L4.116|
;;;457    			}
;;;458    			else if( value == 1 ){
;;;459    //				TIM_SetCompare1(TIM1,0);
;;;460    				LOAD_I_SW = 1;
;;;461    				testv = DISS_Voltage;
;;;462    				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
;;;463    				Para.CSET_Current = 1000;
;;;464    				Para.CSET_Current_Laod =  Para.IR_Start_C;
;;;465    				shorttime = 0;
;;;466    				old_I = 0;
;;;467    				max_discahrgeNum = 0;
;;;468    				trig_flag_state = 1;
;;;469    				C_DISCHARGE = 1;        	
;;;470    				Flag_Swtich_ON = 1;
;;;471    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
;;;472    				max_discahrgeNum = (float)Para.IR_Start_C / 1000;				
;;;473    //				testv = DISS_Voltage;
;;;474    //				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
;;;475    //				Para.CSET_Current = 1000;
;;;476    //				Para.CSET_Current_Laod = Para.IR_Start_C;
;;;477    //				shorttime = 0;
;;;478    //				old_I = 0;
;;;479    //				max_discahrgeNum = 0;
;;;480    //				trig_flag_state = 1;
;;;481    //				C_DISCHARGE = 1;
;;;482    //				Flag_Swtich_ON = 1;
;;;483    //				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
;;;484    //				max_discahrgeNum = (float)Para.IR_Start_C / 1000;
;;;485    			}
;;;486    		}break;
;;;487    		case 3://过充测试ON/OFF
;;;488    		{
;;;489    			if( value == 0 ){
;;;490    				
;;;491    				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;492    				Para.CSET_Voltage = 0;
;;;493    				Para.CSET_Current = 0;
;;;494    				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;495    			}
;;;496    			else if( value == 1 ){
;;;497    				Para.CSET_Voltage = Para.CDC_OutPut_V;
;;;498    				Para.CSET_Current = Para.CDC_Limit_C;
;;;499    				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;500    				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;501    			}
;;;502    		}break;
;;;503    		case 4://电子负载ON/OFF
;;;504    		{
;;;505    			if( value == 0 ){
;;;506    //				TIM_SetCompare1(TIM1,33000/2);
;;;507    				Flag_Swtich_ON = 0;
;;;508    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
;;;509    			}
;;;510    			else if( value == 1 ){
;;;511    //				TIM_SetCompare1(TIM1,0);
;;;512    				Flag_Swtich_ON = 1;
;;;513    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;514    			}
;;;515    		}break;
;;;516    	}
;;;517    }
000074  ecbd8b02          VPOP     {d8}
000078  e8bd83f8          POP      {r3-r9,pc}
                  |L4.124|
00007c  2101              MOVS     r1,#1                 ;428
00007e  2003              MOVS     r0,#3                 ;428
000080  f7fffffe          BL       PowerCommWaitHandle
000084  7b58              LDRB     r0,[r3,#0xd]          ;430  ; listpowwatch1
000086  1c40              ADDS     r0,r0,#1              ;430
000088  7358              STRB     r0,[r3,#0xd]          ;430
00008a  e7f3              B        |L4.116|
00008c  7b19              LDRB     r1,[r3,#0xc]          ;450  ; listocwatch
00008e  1c49              ADDS     r1,r1,#1              ;450
000090  7319              STRB     r1,[r3,#0xc]          ;450
000092  f89d1008          LDRB     r1,[sp,#8]            ;451
000096  f8df9110          LDR      r9,|L4.424|
00009a  ed9f8a44          VLDR     s16,|L4.428|
00009e  f8df8110          LDR      r8,|L4.432|
0000a2  b3a9              CBZ      r1,|L4.272|
0000a4  f89d1008          LDRB     r1,[sp,#8]            ;458
0000a8  2901              CMP      r1,#1                 ;458
0000aa  d1e3              BNE      |L4.116|
0000ac  6211              STR      r1,[r2,#0x20]         ;460  ; Run_Control
0000ae  4a41              LDR      r2,|L4.436|
0000b0  ed920a00          VLDR     s0,[r2,#0]            ;461
0000b4  4a40              LDR      r2,|L4.440|
0000b6  ed820a00          VSTR     s0,[r2,#0]            ;461
0000ba  eddf8a40          VLDR     s17,|L4.444|
0000be  ee200a28          VMUL.F32 s0,s0,s17             ;462
0000c2  eebd0ac0          VCVT.S32.F32 s0,s0                 ;462
0000c6  ee102a10          VMOV     r2,s0                 ;462
0000ca  f502727a          ADD      r2,r2,#0x3e8          ;462
0000ce  60a2              STR      r2,[r4,#8]            ;462  ; Para
0000d0  f44f727a          MOV      r2,#0x3e8             ;463
0000d4  60e2              STR      r2,[r4,#0xc]          ;463  ; Para
0000d6  6c62              LDR      r2,[r4,#0x44]         ;464  ; Para
0000d8  6162              STR      r2,[r4,#0x14]         ;464  ; Para
0000da  4a39              LDR      r2,|L4.448|
0000dc  7016              STRB     r6,[r2,#0]            ;465
0000de  4a39              LDR      r2,|L4.452|
0000e0  4646              MOV      r6,r8                 ;467
0000e2  ed828a00          VSTR     s16,[r2,#0]           ;466
0000e6  ed888a00          VSTR     s16,[r8,#0]           ;467
0000ea  f8891000          STRB     r1,[r9,#0]            ;468
0000ee  4a36              LDR      r2,|L4.456|
0000f0  7011              STRB     r1,[r2,#0]            ;469
0000f2  6028              STR      r0,[r5,#0]            ;471  ; flagA
0000f4  2180              MOVS     r1,#0x80              ;471
0000f6  4638              MOV      r0,r7                 ;471
0000f8  f7fffffe          BL       GPIO_ResetBits
0000fc  6c60              LDR      r0,[r4,#0x44]         ;472  ; Para
0000fe  ee000a10          VMOV     s0,r0                 ;472
000102  eeb80a40          VCVT.F32.U32 s0,s0                 ;472
000106  eec00a28          VDIV.F32 s1,s0,s17             ;472
00010a  edc60a00          VSTR     s1,[r6,#0]            ;472
00010e  e7b1              B        |L4.116|
                  |L4.272|
000110  e7ff              B        |L4.274|
                  |L4.274|
000112  f7fffffe          BL       Off_GPOI_ResetSet
000116  f8896000          STRB     r6,[r9,#0]            ;454
00011a  ed888a00          VSTR     s16,[r8,#0]           ;455
00011e  6c60              LDR      r0,[r4,#0x44]         ;456  ; Para
000120  6160              STR      r0,[r4,#0x14]         ;456  ; Para
000122  e7a7              B        |L4.116|
000124  f89d0008          LDRB     r0,[sp,#8]            ;489
000128  4d28              LDR      r5,|L4.460|
00012a  b170              CBZ      r0,|L4.330|
00012c  f89d0008          LDRB     r0,[sp,#8]            ;496
000130  2801              CMP      r0,#1                 ;496
000132  d19f              BNE      |L4.116|
000134  6ee0              LDR      r0,[r4,#0x6c]         ;497  ; Para
000136  60a0              STR      r0,[r4,#8]            ;497  ; Para
000138  f8b40070          LDRH     r0,[r4,#0x70]         ;498  ; Para
00013c  60e0              STR      r0,[r4,#0xc]          ;498  ; Para
00013e  2104              MOVS     r1,#4                 ;499
000140  4628              MOV      r0,r5                 ;499
000142  f7fffffe          BL       GPIO_SetBits
000146  2102              MOVS     r1,#2                 ;500
000148  e01c              B        |L4.388|
                  |L4.330|
00014a  2102              MOVS     r1,#2                 ;491
00014c  4638              MOV      r0,r7                 ;491
00014e  f7fffffe          BL       GPIO_ResetBits
000152  60a6              STR      r6,[r4,#8]            ;492  ; Para
000154  60e6              STR      r6,[r4,#0xc]          ;493  ; Para
000156  2104              MOVS     r1,#4                 ;494
000158  4628              MOV      r0,r5                 ;494
00015a  e009              B        |L4.368|
00015c  f89d2008          LDRB     r2,[sp,#8]            ;505
000160  b162              CBZ      r2,|L4.380|
000162  f89d1008          LDRB     r1,[sp,#8]            ;510
000166  2901              CMP      r1,#1                 ;510
000168  d184              BNE      |L4.116|
                  |L4.362|
00016a  6028              STR      r0,[r5,#0]            ;513  ; flagA
00016c  2180              MOVS     r1,#0x80              ;513
00016e  4638              MOV      r0,r7                 ;513
                  |L4.368|
000170  ecbd8b02          VPOP     {d8}                  ;513
000174  e8bd43f8          POP      {r3-r9,lr}            ;513
000178  f7ffbffe          B.W      GPIO_ResetBits
                  |L4.380|
00017c  f0210040          BIC      r0,r1,#0x40           ;507
                  |L4.384|
000180  2180              MOVS     r1,#0x80              ;415
000182  6028              STR      r0,[r5,#0]            ;415  ; flagA
                  |L4.388|
000184  4638              MOV      r0,r7                 ;508
000186  ecbd8b02          VPOP     {d8}                  ;508
00018a  e8bd43f8          POP      {r3-r9,lr}            ;508
00018e  f7ffbffe          B.W      GPIO_SetBits
;;;518    
                          ENDP

000192  0000              DCW      0x0000
                  |L4.404|
                          DCD      ||.data||
                  |L4.408|
                          DCD      Run_Control
                  |L4.412|
                          DCD      flagA
                  |L4.416|
                          DCD      Para
                  |L4.420|
                          DCD      0x40020800
                  |L4.424|
                          DCD      trig_flag_state
                  |L4.428|
0001ac  00000000          DCFS     0x00000000 ; 0
                  |L4.432|
                          DCD      max_discahrgeNum
                  |L4.436|
                          DCD      DISS_Voltage
                  |L4.440|
                          DCD      testv
                  |L4.444|
0001bc  447a0000          DCFS     0x447a0000 ; 1000
                  |L4.448|
                          DCD      shorttime
                  |L4.452|
                          DCD      old_I
                  |L4.456|
                          DCD      C_DISCHARGE
                  |L4.460|
                          DCD      0x40021000

                          AREA ||i.MODE_ONOFF||, CODE, READONLY, ALIGN=2

                  MODE_ONOFF PROC
;;;319    
;;;320    void MODE_ONOFF(vu8 value)
000000  e92d43f1          PUSH     {r0,r4-r9,lr}
;;;321    {
;;;322    	switch(MODE)
000004  4846              LDR      r0,|L5.288|
000006  ed2d8b02          VPUSH    {d8}                  ;321
00000a  7941              LDRB     r1,[r0,#5]  ; MODE
;;;323    	{
;;;324    		case 0://电子负载ON/OFF
;;;325    		{
;;;326    			if( value == 0 ){
;;;327    				
;;;328    				Flag_Swtich_ON = 0;
00000c  4d45              LDR      r5,|L5.292|
;;;329    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	
00000e  4846              LDR      r0,|L5.296|
000010  b3f1              CBZ      r1,|L5.144|
000012  2901              CMP      r1,#1                 ;322
000014  d06c              BEQ      |L5.240|
000016  2902              CMP      r1,#2                 ;322
000018  d149              BNE      |L5.174|
;;;330    //				TIM_SetCompare1(TIM1,33000/2);
;;;331    			}
;;;332    			else if( value == 1 ){
;;;333    				
;;;334    				Flag_Swtich_ON = 1;
;;;335    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;336    //				TIM_SetCompare1(TIM1,0);
;;;337    			}
;;;338    		}break;
;;;339    		case 1://稳压电源ON/OFF
;;;340    		{
;;;341    			if( value == 0 )
;;;342    			{
;;;343    				PowerCommWaitHandle(3,0);
;;;344    //				sendwait = 3;
;;;345    			}else{
;;;346    				PowerCommWaitHandle(1,0);
;;;347    //				sendwait = 1;
;;;348    			}
;;;349    //			if( value == 0 ){
;;;350    //				sendwait = 1;
;;;351    ////				PowerSwitch(0);//关闭电源输出
;;;352    ////				Delay_ms(1000);
;;;353    ////				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;354    ////				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;355    //////				Delay_ms(1000);
;;;356    ////				Para.CSET_Voltage = 0;
;;;357    ////				Para.CSET_Current = 0;
;;;358    //////				Delay_ms(1000);
;;;359    ////				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;360    //			}
;;;361    //			else if( value == 1 ){
;;;362    ////				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;363    //////				Delay_ms(1000);
;;;364    ////				PowerSwitch(1);//打开电源输出
;;;365    //				
;;;366    //////				
;;;367    ////				Para.CSET_Voltage = Para.POWER_OutPut_V;
;;;368    ////				Para.CSET_Current = Para.POWER_Limit_C;
;;;369    //////				Delay_ms(1000);
;;;370    ////				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;371    //				
;;;372    //			}
;;;373    		}break;
;;;374    		case 2://过流测试ON/OFF
;;;375    		{
;;;376    			if( value == 0 ){
00001a  f89d1008          LDRB     r1,[sp,#8]
;;;377    				
;;;378    				Off_GPOI_ResetSet();
;;;379    				trig_flag_state = 0;
00001e  f8df810c          LDR      r8,|L5.300|
000022  2700              MOVS     r7,#0                 ;376
;;;380    				max_discahrgeNum = 0;
000024  ed9f8a42          VLDR     s16,|L5.304|
000028  4e42              LDR      r6,|L5.308|
;;;381    				Para.CSET_Current_Laod =  Para.IR_Start_C;
00002a  4c43              LDR      r4,|L5.312|
00002c  b389              CBZ      r1,|L5.146|
;;;382    			}
;;;383    			else if( value == 1 ){
00002e  f89d1008          LDRB     r1,[sp,#8]
000032  2901              CMP      r1,#1
000034  d13b              BNE      |L5.174|
;;;384    //				TIM_SetCompare1(TIM1,0);
;;;385    				LOAD_MODE = 0;
000036  4941              LDR      r1,|L5.316|
000038  618f              STR      r7,[r1,#0x18]  ; Run_Control
;;;386    				GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
00003a  1481              ASRS     r1,r0,#18
00003c  4681              MOV      r9,r0
00003e  f7fffffe          BL       GPIO_ResetBits
;;;387    				Para.CSET_Current_Laod =  Para.IR_Start_C;
000042  6c60              LDR      r0,[r4,#0x44]  ; Para
000044  6160              STR      r0,[r4,#0x14]  ; Para
;;;388    				testv = DISS_Voltage;
000046  483e              LDR      r0,|L5.320|
;;;389    				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
000048  eddf8a3f          VLDR     s17,|L5.328|
00004c  ed900a00          VLDR     s0,[r0,#0]            ;388
000050  483c              LDR      r0,|L5.324|
000052  ed800a00          VSTR     s0,[r0,#0]            ;388
000056  ee200a28          VMUL.F32 s0,s0,s17
00005a  eebd0ac0          VCVT.S32.F32 s0,s0
00005e  ee100a10          VMOV     r0,s0
000062  f500707a          ADD      r0,r0,#0x3e8
000066  60a0              STR      r0,[r4,#8]  ; Para
;;;390    				Para.CSET_Current = 1000;
000068  f44f707a          MOV      r0,#0x3e8
00006c  60e0              STR      r0,[r4,#0xc]  ; Para
;;;391    				shorttime = 0;
00006e  4837              LDR      r0,|L5.332|
000070  7007              STRB     r7,[r0,#0]
;;;392    				old_I = 0;
000072  4837              LDR      r0,|L5.336|
000074  ed808a00          VSTR     s16,[r0,#0]
;;;393    				max_discahrgeNum = 0;
000078  ed868a00          VSTR     s16,[r6,#0]
;;;394    				trig_flag_state = 1;
00007c  2001              MOVS     r0,#1
00007e  f8880000          STRB     r0,[r8,#0]
;;;395    				C_DISCHARGE = 1;        	
000082  4934              LDR      r1,|L5.340|
000084  7008              STRB     r0,[r1,#0]
;;;396    				Flag_Swtich_ON = 1;
000086  6828              LDR      r0,[r5,#0]  ; flagA
;;;397    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
000088  2180              MOVS     r1,#0x80
00008a  f0400040          ORR      r0,r0,#0x40           ;396
00008e  e001              B        |L5.148|
                  |L5.144|
000090  e011              B        |L5.182|
                  |L5.146|
000092  e03b              B        |L5.268|
                  |L5.148|
000094  6028              STR      r0,[r5,#0]  ; flagA
000096  4648              MOV      r0,r9
000098  f7fffffe          BL       GPIO_ResetBits
;;;398    				max_discahrgeNum = (float)Para.IR_Start_C / 1000;
00009c  6c60              LDR      r0,[r4,#0x44]  ; Para
00009e  ee000a10          VMOV     s0,r0
0000a2  eeb80a40          VCVT.F32.U32 s0,s0
0000a6  eec00a28          VDIV.F32 s1,s0,s17
0000aa  edc60a00          VSTR     s1,[r6,#0]
                  |L5.174|
;;;399    			}
;;;400    		}break;
;;;401    	}
;;;402    }
0000ae  ecbd8b02          VPOP     {d8}
0000b2  e8bd83f8          POP      {r3-r9,pc}
                  |L5.182|
0000b6  f89d2008          LDRB     r2,[sp,#8]            ;326
0000ba  491a              LDR      r1,|L5.292|
0000bc  6809              LDR      r1,[r1,#0]            ;328
0000be  b16a              CBZ      r2,|L5.220|
0000c0  f89d2008          LDRB     r2,[sp,#8]            ;332
0000c4  2a01              CMP      r2,#1                 ;332
0000c6  d1f2              BNE      |L5.174|
0000c8  f0410140          ORR      r1,r1,#0x40           ;334
0000cc  6029              STR      r1,[r5,#0]            ;335  ; flagA
0000ce  2180              MOVS     r1,#0x80              ;335
0000d0  ecbd8b02          VPOP     {d8}                  ;335
0000d4  e8bd43f8          POP      {r3-r9,lr}            ;335
0000d8  f7ffbffe          B.W      GPIO_ResetBits
                  |L5.220|
0000dc  f0210140          BIC      r1,r1,#0x40           ;328
0000e0  6029              STR      r1,[r5,#0]            ;329  ; flagA
0000e2  2180              MOVS     r1,#0x80              ;329
0000e4  ecbd8b02          VPOP     {d8}                  ;329
0000e8  e8bd43f8          POP      {r3-r9,lr}            ;329
0000ec  f7ffbffe          B.W      GPIO_SetBits
                  |L5.240|
0000f0  f89d0008          LDRB     r0,[sp,#8]            ;341
0000f4  f04f0100          MOV      r1,#0                 ;346
0000f8  b130              CBZ      r0,|L5.264|
0000fa  2001              MOVS     r0,#1                 ;346
                  |L5.252|
0000fc  ecbd8b02          VPOP     {d8}                  ;346
000100  e8bd43f8          POP      {r3-r9,lr}            ;346
000104  f7ffbffe          B.W      PowerCommWaitHandle
                  |L5.264|
000108  2003              MOVS     r0,#3                 ;343
00010a  e7f7              B        |L5.252|
                  |L5.268|
00010c  f7fffffe          BL       Off_GPOI_ResetSet
000110  f8887000          STRB     r7,[r8,#0]            ;379
000114  ed868a00          VSTR     s16,[r6,#0]           ;380
000118  6c60              LDR      r0,[r4,#0x44]         ;381  ; Para
00011a  6160              STR      r0,[r4,#0x14]         ;381  ; Para
00011c  e7c7              B        |L5.174|
;;;403    
                          ENDP

00011e  0000              DCW      0x0000
                  |L5.288|
                          DCD      ||.data||
                  |L5.292|
                          DCD      flagA
                  |L5.296|
                          DCD      0x40020800
                  |L5.300|
                          DCD      trig_flag_state
                  |L5.304|
000130  00000000          DCFS     0x00000000 ; 0
                  |L5.308|
                          DCD      max_discahrgeNum
                  |L5.312|
                          DCD      Para
                  |L5.316|
                          DCD      Run_Control
                  |L5.320|
                          DCD      DISS_Voltage
                  |L5.324|
                          DCD      testv
                  |L5.328|
000148  447a0000          DCFS     0x447a0000 ; 1000
                  |L5.332|
                          DCD      shorttime
                  |L5.336|
                          DCD      old_I
                  |L5.340|
                          DCD      C_DISCHARGE

                          AREA ||i.MODE_PARASET||, CODE, READONLY, ALIGN=2

                  MODE_PARASET PROC
;;;518    
;;;519    void MODE_PARASET(vu8 value)
000000  b570              PUSH     {r4-r6,lr}
;;;520    {
;;;521    	float ptrans;
;;;522    	switch(MODE)
000002  4824              LDR      r0,|L6.148|
000004  7942              LDRB     r2,[r0,#5]  ; MODE
000006  2100              MOVS     r1,#0
;;;523    	{
;;;524    		case 0://电子负载
;;;525    		{
;;;526    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;527    //			mainswitch = 0;
;;;528    //			sendwait = 3;
;;;529    			LOAD_MODE = Para.CLOAD_MODE;
;;;530    			if(LOAD_MODE == 2)
;;;531    			{
;;;532    				ptrans = (float)Para.LOAD_P/1000;
;;;533    				Para.CSET_Current_Laod = (uint32_t)((ptrans/DISS_Voltage)*1000);
;;;534    			}else{
;;;535    				Para.CSET_Current_Laod = Para.LOAD_C;
;;;536    			}
;;;537    			Para.CSET_Voltage_Laod = Para.LOAD_V;
;;;538    			if(Para.CSET_Current_Laod > 15000)
;;;539    			{
;;;540    				LOAD_I_SW = 1;
000008  2501              MOVS     r5,#1
00000a  4c23              LDR      r4,|L6.152|
00000c  4823              LDR      r0,|L6.156|
00000e  2a05              CMP      r2,#5                 ;522
000010  d213              BCS      |L6.58|
000012  e8dff002          TBB      [pc,r2]               ;522
000016  0339              DCB      0x03,0x39
000018  2a323900          DCB      0x2a,0x32,0x39,0x00
00001c  6982              LDR      r2,[r0,#0x18]         ;529  ; Para
00001e  61a2              STR      r2,[r4,#0x18]         ;529  ; Run_Control
000020  69a2              LDR      r2,[r4,#0x18]         ;530  ; Run_Control
000022  2a02              CMP      r2,#2                 ;530
000024  d00a              BEQ      |L6.60|
000026  6dc2              LDR      r2,[r0,#0x5c]         ;535  ; Para
                  |L6.40|
000028  6142              STR      r2,[r0,#0x14]         ;535  ; Para
00002a  6e02              LDR      r2,[r0,#0x60]         ;537  ; Para
00002c  6102              STR      r2,[r0,#0x10]         ;537  ; Para
00002e  6940              LDR      r0,[r0,#0x14]         ;538  ; Para
000030  f6432298          MOV      r2,#0x3a98            ;538
000034  4290              CMP      r0,r2                 ;538
000036  d916              BLS      |L6.102|
                  |L6.56|
000038  6225              STR      r5,[r4,#0x20]  ; Run_Control
                  |L6.58|
;;;541    			}else{
;;;542    				LOAD_I_SW = 0;
;;;543    			}
;;;544    		}break;
;;;545    		case 1://稳压电源
;;;546    		{
;;;547    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;548    //			mainswitch = 0;
;;;549    //			if(USART3_Recive_flg == 1)
;;;550    //			{
;;;551    			PowerCommWaitHandle(1,0);
;;;552    //				sendwait = 1;
;;;553    //			}else{
;;;554    //				SetPowerMode();
;;;555    //			}
;;;556    //			Para.CSET_Voltage = Para.POWER_OutPut_V;
;;;557    //			SetPowerV(Para.POWER_OutPut_V);
;;;558    //	//			Para.CSET_Current = Para.POWER_Limit_C;
;;;559    //			SetPowerC(Para.POWER_Limit_C);
;;;560    		}break;
;;;561    		case 2://放电过流测试
;;;562    		{
;;;563    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;564    //			mainswitch = 0;
;;;565    //			sendwait = 3;
;;;566    			
;;;567    			LOAD_MODE = 0;
;;;568    			LOAD_I_SW = 1;
;;;569    			Para.CSET_Current = 1000;
;;;570    			Para.CSET_Current_Laod = Para.IR_Start_C;
;;;571    		}break;
;;;572    		case 3://列表
;;;573    		{
;;;574    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;575    //			mainswitch = 0;
;;;576    //			sendwait = 3;
;;;577    			
;;;578    			LOAD_MODE = 0;
;;;579    			GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
;;;580    			LOAD_I_SW = 1;
;;;581    //			Para.CSET_Current = 1000;
;;;582    		}break;
;;;583    		case 4://充电过流测试
;;;584    		{
;;;585    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;586    //			mainswitch = 0;
;;;587    //			sendwait = 3;
;;;588    			PowerCommWaitHandle(1,0);
;;;589    //			sendwait = 1;
;;;590    		}break;
;;;591    	}
;;;592    }
00003a  bd70              POP      {r4-r6,pc}
                  |L6.60|
00003c  6e42              LDR      r2,[r0,#0x64]         ;532  ; Para
00003e  ee002a10          VMOV     s0,r2                 ;532
000042  4a18              LDR      r2,|L6.164|
000044  eeb81a40          VCVT.F32.U32 s2,s0                 ;532
000048  ed9f0a15          VLDR     s0,|L6.160|
00004c  edd21a00          VLDR     s3,[r2,#0]            ;533
000050  eec10a00          VDIV.F32 s1,s2,s0              ;532
000054  ee801aa1          VDIV.F32 s2,s1,s3              ;533
000058  ee210a00          VMUL.F32 s0,s2,s0              ;533
00005c  eebc0ac0          VCVT.U32.F32 s0,s0                 ;533
000060  ee102a10          VMOV     r2,s0                 ;533
000064  e7e0              B        |L6.40|
                  |L6.102|
000066  6221              STR      r1,[r4,#0x20]         ;542  ; Run_Control
000068  bd70              POP      {r4-r6,pc}
00006a  61a1              STR      r1,[r4,#0x18]         ;567  ; Run_Control
00006c  6225              STR      r5,[r4,#0x20]         ;568  ; Run_Control
00006e  f44f717a          MOV      r1,#0x3e8             ;569
000072  60c1              STR      r1,[r0,#0xc]          ;569  ; Para
000074  6c41              LDR      r1,[r0,#0x44]         ;570  ; Para
000076  6141              STR      r1,[r0,#0x14]         ;570  ; Para
000078  bd70              POP      {r4-r6,pc}
00007a  61a1              STR      r1,[r4,#0x18]         ;578  ; Run_Control
00007c  f44f5180          MOV      r1,#0x1000            ;579
000080  4809              LDR      r0,|L6.168|
000082  f7fffffe          BL       GPIO_ResetBits
000086  e7d7              B        |L6.56|
000088  e8bd4070          POP      {r4-r6,lr}            ;588
00008c  2100              MOVS     r1,#0                 ;588
00008e  2001              MOVS     r0,#1                 ;588
000090  f7ffbffe          B.W      PowerCommWaitHandle
;;;593    
                          ENDP

                  |L6.148|
                          DCD      ||.data||
                  |L6.152|
                          DCD      Run_Control
                  |L6.156|
                          DCD      Para
                  |L6.160|
0000a0  447a0000          DCFS     0x447a0000 ; 1000
                  |L6.164|
                          DCD      DISS_Voltage
                  |L6.168|
                          DCD      0x40020800

                          AREA ||i.PowerCommWaitHandle||, CODE, READONLY, ALIGN=2

                  PowerCommWaitHandle PROC
;;;216    //如果在前一组通讯还未完成时收到新的电源控制命令，则把这组命令存起来，等前一组通讯完成后再发送
;;;217    void PowerCommWaitHandle(u8 command,u8 mode)
000000  4a07              LDR      r2,|L7.32|
;;;218    {
000002  b129              CBZ      r1,|L7.16|
;;;219    	if(mode == 0)//普通操作
;;;220    	{
;;;221    		if(sendwait != 0)
;;;222    		{
;;;223    			waitcommand1 = command;
;;;224    		}else{
;;;225    			sendwait = command;
;;;226    		}
;;;227    	}else if(mode == 1){//列表操作
000004  2901              CMP      r1,#1
000006  d102              BNE      |L7.14|
;;;228    		if(sendwait != 0)
000008  7a11              LDRB     r1,[r2,#8]  ; sendwait
00000a  b139              CBZ      r1,|L7.28|
;;;229    		{
;;;230    			waitcommand2 = command;
00000c  72d0              STRB     r0,[r2,#0xb]
                  |L7.14|
;;;231    		}else{
;;;232    			listsend = command;
;;;233    		}
;;;234    	}
;;;235    }
00000e  4770              BX       lr
                  |L7.16|
000010  7a11              LDRB     r1,[r2,#8]            ;221  ; sendwait
000012  b109              CBZ      r1,|L7.24|
000014  7290              STRB     r0,[r2,#0xa]          ;223
000016  4770              BX       lr
                  |L7.24|
000018  7210              STRB     r0,[r2,#8]            ;225
00001a  4770              BX       lr
                  |L7.28|
00001c  7250              STRB     r0,[r2,#9]            ;232
00001e  4770              BX       lr
;;;236    
                          ENDP

                  |L7.32|
                          DCD      ||.data||

                          AREA ||i.PowerSwitch||, CODE, READONLY, ALIGN=2

                  PowerSwitch PROC
;;;190    
;;;191    void PowerSwitch(vu8 bit)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;192    {
;;;193    	MasterSendbuf[0] = 0x01;
000002  4c0f              LDR      r4,|L8.64|
000004  2001              MOVS     r0,#1
;;;194    	MasterSendbuf[1] = 0x06;
000006  2106              MOVS     r1,#6
000008  7020              STRB     r0,[r4,#0]            ;193
00000a  7061              STRB     r1,[r4,#1]
;;;195    	MasterSendbuf[2] = 0x00;
00000c  2100              MOVS     r1,#0
00000e  70a1              STRB     r1,[r4,#2]
;;;196    	MasterSendbuf[3] = 0x01;
000010  70e0              STRB     r0,[r4,#3]
;;;197    	MasterSendbuf[4] = (u8)(bit>>8);
000012  f89d0000          LDRB     r0,[sp,#0]
000016  7121              STRB     r1,[r4,#4]
;;;198    	MasterSendbuf[5] = (u8)(bit);
000018  f89d0000          LDRB     r0,[sp,#0]
00001c  7160              STRB     r0,[r4,#5]
;;;199    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00001e  2106              MOVS     r1,#6
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       Hardware_CRC
000026  71a0              STRB     r0,[r4,#6]
;;;200    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000028  2106              MOVS     r1,#6
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       Hardware_CRC
000030  0a00              LSRS     r0,r0,#8
000032  71e0              STRB     r0,[r4,#7]
;;;201    	USART3WriteDMA(8);
000034  e8bd4038          POP      {r3-r5,lr}
000038  2008              MOVS     r0,#8
00003a  f7ffbffe          B.W      USART3WriteDMA
;;;202    }
;;;203    
                          ENDP

00003e  0000              DCW      0x0000
                  |L8.64|
                          DCD      ||area_number.32||+0xdc

                          AREA ||i.ReadPowData||, CODE, READONLY, ALIGN=2

                  ReadPowData PROC
;;;203    
;;;204    void ReadPowData(void)
000000  b510              PUSH     {r4,lr}
;;;205    {
;;;206    	MasterSendbuf[0] = 0x01;
000002  4c0e              LDR      r4,|L9.60|
000004  2001              MOVS     r0,#1
;;;207    	MasterSendbuf[1] = 0x03;
;;;208    	MasterSendbuf[2] = 0x00;
;;;209    	MasterSendbuf[3] = 0x10;
000006  2110              MOVS     r1,#0x10
000008  7020              STRB     r0,[r4,#0]            ;206
00000a  2003              MOVS     r0,#3                 ;207
00000c  7060              STRB     r0,[r4,#1]            ;207
00000e  2000              MOVS     r0,#0                 ;208
000010  70a0              STRB     r0,[r4,#2]            ;208
000012  70e1              STRB     r1,[r4,#3]
;;;210    	MasterSendbuf[4] = 0x00;
000014  7120              STRB     r0,[r4,#4]
;;;211    	MasterSendbuf[5] = 0x02;
000016  2002              MOVS     r0,#2
000018  7160              STRB     r0,[r4,#5]
;;;212    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00001a  2106              MOVS     r1,#6
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       Hardware_CRC
000022  71a0              STRB     r0,[r4,#6]
;;;213    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000024  2106              MOVS     r1,#6
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       Hardware_CRC
00002c  0a00              LSRS     r0,r0,#8
00002e  71e0              STRB     r0,[r4,#7]
;;;214    	USART3WriteDMA(8);
000030  e8bd4010          POP      {r4,lr}
000034  2008              MOVS     r0,#8
000036  f7ffbffe          B.W      USART3WriteDMA
;;;215    }
;;;216    //如果在前一组通讯还未完成时收到新的电源控制命令，则把这组命令存起来，等前一组通讯完成后再发送
                          ENDP

00003a  0000              DCW      0x0000
                  |L9.60|
                          DCD      ||area_number.32||+0xdc

                          AREA ||i.SerialRemoteHandleL||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  SerialRemoteHandleL PROC
;;;1080   
;;;1081   u16 SerialRemoteHandleL(u8 len,char* buf)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1082   {
000004  b0b3              SUB      sp,sp,#0xcc
000006  4604              MOV      r4,r0
;;;1083   
;;;1084     
;;;1085       u16 currCharNum;
;;;1086       u32 temp1;
;;;1087     u8 Gmode_Vale;
;;;1088   	u8 i,j;
;;;1089   	
;;;1090   	u8 addr = 0;
000008  2000              MOVS     r0,#0
00000a  460d              MOV      r5,r1                 ;1082
;;;1091   	char str[200]={0};
00000c  9032              STR      r0,[sp,#0xc8]
00000e  21c8              MOVS     r1,#0xc8
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       __aeabi_memclr4
;;;1092   	int cmd_flag=255;
;;;1093   	u8 templen =0;
;;;1094   	u8 tmpFg;
;;;1095   	u8 LM_S_Vale,LOW_I_Vale,H_L_Vale,SWITCH_Vale;
;;;1096   	u16 I_ADC_Vale,V_ADC_Vale;
;;;1097   	int32_t V_CS_Vale,I_CS_Vale;
;;;1098   	float Lvl_Vale,fadcx,fsingal, fVale;
;;;1099    
;;;1100   //	u8 len = 11;
;;;1101   	u8 pntlen = 0;
;;;1102   
;;;1103   
;;;1104   	
;;;1105   	currCharNum=0;
;;;1106   	if((buf[currCharNum] != ChrStartR) || (buf[len-2] != ChrEndR)||(buf[len-1] != ChrEndS))
000016  7828              LDRB     r0,[r5,#0]
000018  283c              CMP      r0,#0x3c
00001a  d108              BNE      |L10.46|
00001c  1928              ADDS     r0,r5,r4
00001e  f8101c02          LDRB     r1,[r0,#-2]
000022  290d              CMP      r1,#0xd
000024  d103              BNE      |L10.46|
000026  f8100c01          LDRB     r0,[r0,#-1]
00002a  280a              CMP      r0,#0xa
00002c  d001              BEQ      |L10.50|
                  |L10.46|
;;;1107       {
;;;1108   		return SetErr_ACK(buf,addr ,CMD_ERR); 
00002e  2202              MOVS     r2,#2
000030  e14c              B        |L10.716|
                  |L10.50|
;;;1109       } 
;;;1110   	str[currCharNum++] = ChrStartR;
000032  213c              MOVS     r1,#0x3c
000034  f88d1000          STRB     r1,[sp,#0]
;;;1111   	sprintf(&str[currCharNum],"%d",addr);
000038  a1fe              ADR      r1,|L10.1076|
00003a  f10d0001          ADD      r0,sp,#1
00003e  9a32              LDR      r2,[sp,#0xc8]
000040  f7fffffe          BL       __2sprintf
;;;1112   	strncat(str,"/",1);
000044  2201              MOVS     r2,#1
000046  a1fc              ADR      r1,|L10.1080|
000048  4668              MOV      r0,sp
00004a  f7fffffe          BL       strncat
;;;1113   	currCharNum =strlen(str);
00004e  4668              MOV      r0,sp
000050  f7fffffe          BL       strlen
000054  fa1ffa80          UXTH     r10,r0
;;;1114   	cmd_flag=strncmp(buf,str,strlen(str));
000058  4668              MOV      r0,sp
00005a  f7fffffe          BL       strlen
00005e  4602              MOV      r2,r0
000060  4669              MOV      r1,sp
000062  4628              MOV      r0,r5
000064  f7fffffe          BL       strncmp
;;;1115   	//testflag = cmd_flag;
;;;1116   	if(0!=cmd_flag)
000068  2800              CMP      r0,#0
00006a  d1e0              BNE      |L10.46|
;;;1117   	{
;;;1118   		return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1119   		
;;;1120   	}
;;;1121   	for (j=0;j<CmdNumb;j++)
;;;1122       {
;;;1123   		templen = strlen(CmdStr[j]);
00006c  f8dfb3cc          LDR      r11,|L10.1084|
000070  4680              MOV      r8,r0                 ;1121
;;;1124   		cmd_flag=strncmp(&buf[currCharNum],CmdStr[j],templen);
000072  eb05060a          ADD      r6,r5,r10
000076  bf00              NOP                            ;1123
                  |L10.120|
000078  eb0801c8          ADD      r1,r8,r8,LSL #3       ;1123
00007c  eb01040b          ADD      r4,r1,r11             ;1123
000080  4620              MOV      r0,r4                 ;1123
000082  f7fffffe          BL       strlen
000086  f00009ff          AND      r9,r0,#0xff           ;1123
00008a  4621              MOV      r1,r4
00008c  4630              MOV      r0,r6
00008e  464a              MOV      r2,r9
000090  f7fffffe          BL       strncmp
;;;1125   	    if(0==cmd_flag)
000094  b138              CBZ      r0,|L10.166|
000096  f1080801          ADD      r8,r8,#1
00009a  f00808ff          AND      r8,r8,#0xff           ;1121
00009e  f1b80f13          CMP      r8,#0x13              ;1121
0000a2  d3e9              BCC      |L10.120|
0000a4  e7c3              B        |L10.46|
                  |L10.166|
;;;1126   	    {
;;;1127   
;;;1128   		  buf[0] = ChrStartS;
0000a6  203e              MOVS     r0,#0x3e
0000a8  7028              STRB     r0,[r5,#0]
;;;1129   		  currCharNum+=templen;
0000aa  eb0a0009          ADD      r0,r10,r9
0000ae  b284              UXTH     r4,r0
;;;1130   		  switch(j)
;;;1131             {
;;;1132   			case 0:
;;;1133   				pntlen = 5;    //
;;;1134   				if(buf[currCharNum]=='?')
;;;1135   				{
;;;1136   
;;;1137   					
;;;1138   					sprintf(&buf[currCharNum],"%06d",Para.CVoltage);
;;;1139   					currCharNum+=6;
;;;1140   					
;;;1141   					buf[currCharNum++]=(',');
;;;1142   					sprintf(&buf[currCharNum],"%06d",Para.CLaod_Current);
;;;1143   					currCharNum+=6;
;;;1144   					
;;;1145   					buf[currCharNum++]=(',');
;;;1146   					sprintf(&buf[currCharNum],"%05d",Para.CPOW_Voltage);
;;;1147   					currCharNum+=pntlen;
;;;1148   					
;;;1149   					buf[currCharNum++]=(',');
;;;1150   					sprintf(&buf[currCharNum],"%05d",Para.CCurrent);
;;;1151   					currCharNum+=pntlen;
;;;1152   					
;;;1153   					buf[currCharNum++]=(',');
;;;1154   					sprintf(&buf[currCharNum],"%05d",Para.CR_VLUE);
;;;1155   					currCharNum+=pntlen;
;;;1156   					
;;;1157   					buf[currCharNum++]=(',');
;;;1158   					sprintf(&buf[currCharNum],"%04d",Para.CR1_VLUE);
;;;1159   					currCharNum+=4;
;;;1160   					
;;;1161   					buf[currCharNum++]=(',');
;;;1162   					sprintf(&buf[currCharNum],"%04d",Para.CR2_VLUE);
;;;1163   					currCharNum+=4;
;;;1164   
;;;1165   					buf[currCharNum++]=(',');
;;;1166   					sprintf(&buf[currCharNum],"%06d",(int)(max_discahrgeNum*1000));
;;;1167   					currCharNum+=6;
;;;1168   					
;;;1169   					buf[currCharNum++]=(',');
;;;1170   					sprintf(&buf[currCharNum],"%03d",shorttime);
;;;1171   					currCharNum+=3;
;;;1172   					
;;;1173   					buf[currCharNum++]=(',');
;;;1174   					sprintf(&buf[currCharNum],"%1d",mainswitch);
;;;1175   					currCharNum+=1;
;;;1176   					
;;;1177   					buf[currCharNum++]=(',');
;;;1178   					sprintf(&buf[currCharNum],"%1d",finishflag);
;;;1179   					currCharNum+=1;
;;;1180   					
;;;1181   					buf[currCharNum++]=(',');
;;;1182   					sprintf(&buf[currCharNum],"%1d",lockflag);
;;;1183   					currCharNum+=1;
;;;1184   					
;;;1185   					buf[currCharNum++]=(',');
;;;1186   					sprintf(&buf[currCharNum],"%2d",version);
;;;1187   					currCharNum+=2;
;;;1188   					
;;;1189   					buf[currCharNum++]=(',');
;;;1190   					sprintf(&buf[currCharNum],"%03d",Temperature);
;;;1191   					currCharNum+=3;
;;;1192   					
;;;1193   					buf[currCharNum++]=(',');
;;;1194   					sprintf(&buf[currCharNum],"%1d",overflag);
;;;1195   					currCharNum+=1;
;;;1196   //					buf[currCharNum++]=(',');
;;;1197   //					sprintf(&buf[currCharNum],"%d",H_L);
;;;1198   //					currCharNum++;
;;;1199   					
;;;1200   //					buf[currCharNum++]=(',');
;;;1201   //					sprintf(&buf[currCharNum],"%d",LM_S);
;;;1202   //					currCharNum++;
;;;1203   					
;;;1204   //					buf[currCharNum++]=(',');
;;;1205   //					sprintf(&buf[currCharNum],"%02d",(int)temperature);
;;;1206   //					currCharNum+=2;
;;;1207   					
;;;1208   				  buf[currCharNum++ ] = ChrEndR;
;;;1209   				  buf[currCharNum++ ] = ChrEndS;
;;;1210   				}
;;;1211   				else
;;;1212   				{
;;;1213   					return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1214   				}
;;;1215   				break;
;;;1216   			case 1:
;;;1217   				pntlen = 1;
;;;1218   				if(buf[currCharNum]=='?')
;;;1219   				{
;;;1220   					  sprintf(&buf[currCharNum],"%1d",MODE);
;;;1221   				    currCharNum+=pntlen;
;;;1222   				    buf[currCharNum ++] = ChrEndS;
;;;1223   					
;;;1224   				}
;;;1225   				else
;;;1226   				{
;;;1227   					pntlen = 1;				
;;;1228   					for(i=0,temp1=0;i<pntlen;i++)
;;;1229   					{
;;;1230   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1231   					}		                   
;;;1232   //					if(temp1>1)
;;;1233   //					{
;;;1234   //						return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1235   //					}
;;;1236   					MODE=temp1;
;;;1237   //					Off_GPOI_ResetSet();
;;;1238   					OnOff_GPOI_ResetSet( 2, 0 );
;;;1239   					mainswitch = 0;
;;;1240   					PowerCommWaitHandle(3,0);
;;;1241   //					sendwait = 3;
;;;1242   					MODE_PARASET(MODE);
;;;1243   	//				Change_LM_Val(LM_S_Vale);
;;;1244   					buf[currCharNum++] = ChrEndR;
;;;1245   				}
;;;1246   				break;
;;;1247   				case 2:
;;;1248   				pntlen = 1;
;;;1249   				if(buf[currCharNum]=='?')
;;;1250   				{
;;;1251   					sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
0000b0  48e3              LDR      r0,|L10.1088|
0000b2  f8dfa390          LDR      r10,|L10.1092|
0000b6  f04f0b0d          MOV      r11,#0xd              ;1106
0000ba  f04f090a          MOV      r9,#0xa               ;1106
0000be  f06f062f          MVN      r6,#0x2f              ;1230
0000c2  f1b80f13          CMP      r8,#0x13              ;1130
0000c6  d2b2              BCS      |L10.46|
0000c8  e8dff008          TBB      [pc,r8]               ;1130
0000cc  0bbce3fe          DCB      0x0b,0xbc,0xe3,0xfe
0000d0  fdfc0a0a          DCB      0xfd,0xfc,0x0a,0x0a
0000d4  0a0a0a0a          DCB      0x0a,0x0a,0x0a,0x0a
0000d8  fbfaf90a          DCB      0xfb,0xfa,0xf9,0x0a
0000dc  0a0af800          DCB      0x0a,0x0a,0xf8,0x00
0000e0  e7a5              B        |L10.46|
0000e2  5d28              LDRB     r0,[r5,r4]            ;1134
0000e4  283f              CMP      r0,#0x3f              ;1134
0000e6  d1a2              BNE      |L10.46|
0000e8  f8da202c          LDR      r2,[r10,#0x2c]        ;1138  ; Para
0000ec  4656              MOV      r6,r10                ;1138
0000ee  1928              ADDS     r0,r5,r4              ;1138
0000f0  a1d5              ADR      r1,|L10.1096|
0000f2  f7fffffe          BL       __2sprintf
0000f6  1da4              ADDS     r4,r4,#6              ;1138
0000f8  b2a0              UXTH     r0,r4                 ;1139
0000fa  242c              MOVS     r4,#0x2c              ;1141
0000fc  542c              STRB     r4,[r5,r0]            ;1141
0000fe  1c40              ADDS     r0,r0,#1              ;1141
000100  6b72              LDR      r2,[r6,#0x34]         ;1142  ; Para
000102  b287              UXTH     r7,r0                 ;1141
000104  19e8              ADDS     r0,r5,r7              ;1142
000106  a1d0              ADR      r1,|L10.1096|
000108  f7fffffe          BL       __2sprintf
00010c  1dbf              ADDS     r7,r7,#6              ;1142
00010e  b2b8              UXTH     r0,r7                 ;1143
000110  542c              STRB     r4,[r5,r0]            ;1145
000112  1c40              ADDS     r0,r0,#1              ;1145
000114  6ab2              LDR      r2,[r6,#0x28]         ;1146  ; Para
000116  b287              UXTH     r7,r0                 ;1145
000118  19e8              ADDS     r0,r5,r7              ;1146
00011a  a1cd              ADR      r1,|L10.1104|
00011c  f7fffffe          BL       __2sprintf
000120  1d7f              ADDS     r7,r7,#5              ;1146
000122  b2b8              UXTH     r0,r7                 ;1147
000124  542c              STRB     r4,[r5,r0]            ;1149
000126  1c40              ADDS     r0,r0,#1              ;1149
000128  6b32              LDR      r2,[r6,#0x30]         ;1150  ; Para
00012a  b287              UXTH     r7,r0                 ;1149
00012c  19e8              ADDS     r0,r5,r7              ;1150
00012e  a1c8              ADR      r1,|L10.1104|
000130  f7fffffe          BL       __2sprintf
000134  1d7f              ADDS     r7,r7,#5              ;1150
000136  b2b8              UXTH     r0,r7                 ;1151
000138  542c              STRB     r4,[r5,r0]            ;1153
00013a  1c40              ADDS     r0,r0,#1              ;1153
00013c  6bb2              LDR      r2,[r6,#0x38]         ;1154  ; Para
00013e  b287              UXTH     r7,r0                 ;1153
000140  19e8              ADDS     r0,r5,r7              ;1154
000142  a1c3              ADR      r1,|L10.1104|
000144  f7fffffe          BL       __2sprintf
000148  1d7f              ADDS     r7,r7,#5              ;1154
00014a  b2b8              UXTH     r0,r7                 ;1155
00014c  542c              STRB     r4,[r5,r0]            ;1157
00014e  1c40              ADDS     r0,r0,#1              ;1157
000150  6bf2              LDR      r2,[r6,#0x3c]         ;1158  ; Para
000152  b287              UXTH     r7,r0                 ;1157
000154  19e8              ADDS     r0,r5,r7              ;1158
000156  a1c0              ADR      r1,|L10.1112|
000158  f7fffffe          BL       __2sprintf
00015c  1d3f              ADDS     r7,r7,#4              ;1158
00015e  b2b8              UXTH     r0,r7                 ;1159
000160  542c              STRB     r4,[r5,r0]            ;1161
000162  1c40              ADDS     r0,r0,#1              ;1161
000164  6c32              LDR      r2,[r6,#0x40]         ;1162  ; Para
000166  b287              UXTH     r7,r0                 ;1161
000168  19e8              ADDS     r0,r5,r7              ;1162
00016a  a1bb              ADR      r1,|L10.1112|
00016c  f7fffffe          BL       __2sprintf
000170  1d3f              ADDS     r7,r7,#4              ;1162
000172  b2b8              UXTH     r0,r7                 ;1163
000174  542c              STRB     r4,[r5,r0]            ;1165
000176  1c40              ADDS     r0,r0,#1              ;1165
000178  b286              UXTH     r6,r0                 ;1165
00017a  48b9              LDR      r0,|L10.1120|
00017c  ed900a00          VLDR     s0,[r0,#0]            ;1166
000180  eddf0ab8          VLDR     s1,|L10.1124|
000184  19a8              ADDS     r0,r5,r6              ;1166
000186  a1b0              ADR      r1,|L10.1096|
000188  ee200a20          VMUL.F32 s0,s0,s1              ;1166
00018c  eebd0ac0          VCVT.S32.F32 s0,s0                 ;1166
000190  ee102a10          VMOV     r2,s0                 ;1166
000194  f7fffffe          BL       __2sprintf
000198  1db6              ADDS     r6,r6,#6              ;1166
00019a  b2b0              UXTH     r0,r6                 ;1167
00019c  49b2              LDR      r1,|L10.1128|
00019e  542c              STRB     r4,[r5,r0]            ;1169
0001a0  1c40              ADDS     r0,r0,#1              ;1169
0001a2  b286              UXTH     r6,r0                 ;1169
0001a4  780a              LDRB     r2,[r1,#0]            ;1170  ; shorttime
0001a6  19a8              ADDS     r0,r5,r6              ;1170
0001a8  a1b0              ADR      r1,|L10.1132|
0001aa  f7fffffe          BL       __2sprintf
0001ae  1cf6              ADDS     r6,r6,#3              ;1170
0001b0  b2b0              UXTH     r0,r6                 ;1171
0001b2  49a2              LDR      r1,|L10.1084|
0001b4  542c              STRB     r4,[r5,r0]            ;1173
0001b6  1c40              ADDS     r0,r0,#1              ;1173
0001b8  b286              UXTH     r6,r0                 ;1173
0001ba  19a8              ADDS     r0,r5,r6              ;1174
0001bc  3958              SUBS     r1,r1,#0x58           ;1174
0001be  798a              LDRB     r2,[r1,#6]            ;1174  ; mainswitch
0001c0  a1ac              ADR      r1,|L10.1140|
0001c2  f7fffffe          BL       __2sprintf
0001c6  1c76              ADDS     r6,r6,#1              ;1174
0001c8  b2b0              UXTH     r0,r6                 ;1175
0001ca  49ab              LDR      r1,|L10.1144|
0001cc  542c              STRB     r4,[r5,r0]            ;1177
0001ce  1c40              ADDS     r0,r0,#1              ;1177
0001d0  b286              UXTH     r6,r0                 ;1177
0001d2  780a              LDRB     r2,[r1,#0]            ;1178  ; finishflag
0001d4  19a8              ADDS     r0,r5,r6              ;1178
0001d6  a1a7              ADR      r1,|L10.1140|
0001d8  f7fffffe          BL       __2sprintf
0001dc  1c76              ADDS     r6,r6,#1              ;1178
0001de  b2b0              UXTH     r0,r6                 ;1179
0001e0  49a6              LDR      r1,|L10.1148|
0001e2  542c              STRB     r4,[r5,r0]            ;1181
0001e4  1c40              ADDS     r0,r0,#1              ;1181
0001e6  b286              UXTH     r6,r0                 ;1181
0001e8  780a              LDRB     r2,[r1,#0]            ;1182  ; lockflag
0001ea  19a8              ADDS     r0,r5,r6              ;1182
0001ec  a1a1              ADR      r1,|L10.1140|
0001ee  f7fffffe          BL       __2sprintf
0001f2  1c76              ADDS     r6,r6,#1              ;1182
0001f4  b2b0              UXTH     r0,r6                 ;1183
0001f6  49a2              LDR      r1,|L10.1152|
0001f8  542c              STRB     r4,[r5,r0]            ;1185
0001fa  1c40              ADDS     r0,r0,#1              ;1185
0001fc  b286              UXTH     r6,r0                 ;1185
0001fe  780a              LDRB     r2,[r1,#0]            ;1186  ; version
000200  19a8              ADDS     r0,r5,r6              ;1186
000202  a1a0              ADR      r1,|L10.1156|
000204  f7fffffe          BL       __2sprintf
000208  1cb6              ADDS     r6,r6,#2              ;1186
00020a  b2b0              UXTH     r0,r6                 ;1187
00020c  499e              LDR      r1,|L10.1160|
00020e  542c              STRB     r4,[r5,r0]            ;1189
000210  1c40              ADDS     r0,r0,#1              ;1189
000212  b286              UXTH     r6,r0                 ;1189
000214  f9b12000          LDRSH    r2,[r1,#0]            ;1190  ; Temperature
000218  19a8              ADDS     r0,r5,r6              ;1190
00021a  a194              ADR      r1,|L10.1132|
00021c  f7fffffe          BL       __2sprintf
000220  1cf6              ADDS     r6,r6,#3              ;1190
000222  b2b0              UXTH     r0,r6                 ;1191
000224  4999              LDR      r1,|L10.1164|
000226  542c              STRB     r4,[r5,r0]            ;1193
000228  1c40              ADDS     r0,r0,#1              ;1193
00022a  b284              UXTH     r4,r0                 ;1193
00022c  780a              LDRB     r2,[r1,#0]            ;1194  ; overflag
00022e  1928              ADDS     r0,r5,r4              ;1194
000230  a190              ADR      r1,|L10.1140|
000232  f7fffffe          BL       __2sprintf
000236  1c64              ADDS     r4,r4,#1              ;1194
000238  b2a0              UXTH     r0,r4                 ;1195
00023a  f805b000          STRB     r11,[r5,r0]           ;1208
00023e  1c40              ADDS     r0,r0,#1              ;1208
000240  b280              UXTH     r0,r0                 ;1208
000242  e3ef              B        |L10.2596|
000244  5d28              LDRB     r0,[r5,r4]            ;1218
000246  2201              MOVS     r2,#1                 ;1217
000248  283f              CMP      r0,#0x3f              ;1218
00024a  d01c              BEQ      |L10.646|
00024c  2000              MOVS     r0,#0                 ;1228
00024e  4601              MOV      r1,r0                 ;1228
                  |L10.592|
000250  5d2b              LDRB     r3,[r5,r4]            ;1230
000252  eb010181          ADD      r1,r1,r1,LSL #2       ;1230
000256  1c64              ADDS     r4,r4,#1              ;1230
000258  1c40              ADDS     r0,r0,#1              ;1230
00025a  eb060141          ADD      r1,r6,r1,LSL #1       ;1230
00025e  b2c0              UXTB     r0,r0                 ;1228
000260  4419              ADD      r1,r1,r3              ;1230
000262  b2a4              UXTH     r4,r4                 ;1230
000264  4290              CMP      r0,r2                 ;1228
000266  d3f3              BCC      |L10.592|
000268  4e74              LDR      r6,|L10.1084|
00026a  3e58              SUBS     r6,r6,#0x58           ;1236
00026c  7171              STRB     r1,[r6,#5]            ;1236
00026e  2100              MOVS     r1,#0                 ;1238
000270  2002              MOVS     r0,#2                 ;1238
000272  f7fffffe          BL       OnOff_GPOI_ResetSet
000276  2000              MOVS     r0,#0                 ;1239
000278  71b0              STRB     r0,[r6,#6]            ;1239
00027a  4601              MOV      r1,r0                 ;1240
00027c  2003              MOVS     r0,#3                 ;1240
00027e  f7fffffe          BL       PowerCommWaitHandle
000282  7970              LDRB     r0,[r6,#5]            ;1242  ; MODE
000284  e21c              B        |L10.1728|
                  |L10.646|
000286  496d              LDR      r1,|L10.1084|
000288  1928              ADDS     r0,r5,r4              ;1220
00028a  3958              SUBS     r1,r1,#0x58           ;1220
00028c  794a              LDRB     r2,[r1,#5]            ;1220  ; MODE
00028e  a179              ADR      r1,|L10.1140|
000290  e023              B        |L10.730|
000292  5d29              LDRB     r1,[r5,r4]            ;1249
000294  2201              MOVS     r2,#1                 ;1248
000296  293f              CMP      r1,#0x3f              ;1249
                  |L10.664|
000298  d07d              BEQ      |L10.918|
;;;1252   				    currCharNum+=pntlen;
;;;1253   				    buf[currCharNum ++] = ChrEndS;
;;;1254   					
;;;1255   				}
;;;1256   				else
;;;1257   				{
;;;1258   					pntlen = 1;				
;;;1259   					for(i=0,temp1=0;i<pntlen;i++)
00029a  2100              MOVS     r1,#0
00029c  4608              MOV      r0,r1
                  |L10.670|
;;;1260   					{
;;;1261   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
00029e  5d2b              LDRB     r3,[r5,r4]
0002a0  eb000080          ADD      r0,r0,r0,LSL #2
0002a4  1c64              ADDS     r4,r4,#1
0002a6  1c49              ADDS     r1,r1,#1
0002a8  eb060040          ADD      r0,r6,r0,LSL #1
0002ac  b2c9              UXTB     r1,r1                 ;1259
0002ae  4418              ADD      r0,r0,r3
0002b0  b2a4              UXTH     r4,r4
0002b2  4291              CMP      r1,r2                 ;1259
0002b4  d3f3              BCC      |L10.670|
;;;1262   					}		                   
;;;1263   					if(temp1>1)
0002b6  2801              CMP      r0,#1
0002b8  d913              BLS      |L10.738|
                  |L10.698|
;;;1264   					{
;;;1265   						return SetErr_ACK(buf, addr ,PARA_ERR);
0002ba  e006              B        |L10.714|
0002bc  e3fe              B        |L10.2748|
0002be  e3fe              B        |L10.2750|
0002c0  e3fe              B        |L10.2752|
0002c2  e3fe              B        |L10.2754|
0002c4  e3fe              B        |L10.2756|
0002c6  e1fe              B        |L10.1734|
0002c8  e012              B        |L10.752|
                  |L10.714|
0002ca  2201              MOVS     r2,#1
                  |L10.716|
;;;1266   					}
;;;1267   //					MODE=temp1;
;;;1268   					
;;;1269   					
;;;1270   					mainswitch = temp1;
;;;1271   //						Para.CSET_Voltage = 5000;
;;;1272   //						Para.CSET_Current = 1000;
;;;1273   					
;;;1274   						
;;;1275   					MODE_ONOFF(mainswitch);
;;;1276   	//				Change_LM_Val(LM_S_Vale);
;;;1277   					buf[currCharNum++] = ChrEndR;
;;;1278   		        }
;;;1279   				break;
;;;1280   				case 3:
;;;1281   				pntlen = 1;
;;;1282   				if(buf[currCharNum]=='?')
;;;1283   				{
;;;1284   					  sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1285   				    currCharNum+=pntlen;
;;;1286   				    buf[currCharNum ++] = ChrEndS;
;;;1287   					
;;;1288   				}
;;;1289   				else
;;;1290   				{
;;;1291   					if(currCharNum == 0x0b)
;;;1292   					{						
;;;1293   						for(i=0,temp1=0;i<6;i++)
;;;1294   						{
;;;1295   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1296   						}
;;;1297   					}		
;;;1298   					Para.IR_Start_C = temp1;//起始电流
;;;1299   					temp1 = 0;
;;;1300   					
;;;1301   					if(buf[currCharNum++] == ',')
;;;1302   					{
;;;1303   						for(i=0,temp1=0;i<5;i++)
;;;1304   						{
;;;1305   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1306   						}
;;;1307   					}	
;;;1308   					Para.IR_Step_C = temp1;//步进电流
;;;1309   					temp1 = 0;
;;;1310   					 
;;;1311   					if(buf[currCharNum++] == ',')
;;;1312   					{
;;;1313   						for(i=0,temp1=0;i<5;i++)
;;;1314   						{
;;;1315   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1316   						}
;;;1317   					}	
;;;1318   					Para.IR_Threshold_V = temp1;//门槛电压
;;;1319   					temp1 = 0;
;;;1320   					
;;;1321   					if(buf[currCharNum++] == ',')
;;;1322   					{
;;;1323   						for(i=0,temp1=0;i<3;i++)
;;;1324   						{
;;;1325   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1326   						}
;;;1327   					}	
;;;1328   					Para.IR_Step_Time = temp1;//步进时间
;;;1329   					temp1 = 0;
;;;1330   					
;;;1331   					if(buf[currCharNum++] == ',')
;;;1332   					{
;;;1333   						for(i=0,temp1=0;i<6;i++)
;;;1334   						{
;;;1335   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1336   						}
;;;1337   					}	
;;;1338   					Para.POWER_OutPut_V = temp1;//电源电压
;;;1339   					temp1 = 0;
;;;1340   					
;;;1341   					if(buf[currCharNum++] == ',')
;;;1342   					{
;;;1343   						for(i=0,temp1=0;i<5;i++)
;;;1344   						{
;;;1345   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1346   						}
;;;1347   					}	
;;;1348   					Para.POWER_Limit_C = temp1;//电源电流
;;;1349   					temp1 = 0;
;;;1350   					
;;;1351   					if(buf[currCharNum++] == ',')
;;;1352   					{
;;;1353   						for(i=0,temp1=0;i<5;i++)
;;;1354   						{
;;;1355   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1356   						}
;;;1357   					}	
;;;1358   					Para.POWER_Cutoff_C = temp1;//设置充电截止电流
;;;1359   					temp1 = 0;
;;;1360   					
;;;1361   					if(buf[currCharNum++] == ',')
;;;1362   					{
;;;1363   						for(i=0,temp1=0;i<6;i++)
;;;1364   						{
;;;1365   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1366   						}
;;;1367   					}	
;;;1368   					Para.LOAD_V = temp1;//负载电压
;;;1369   					temp1 = 0;
;;;1370   					
;;;1371   					if(buf[currCharNum++] == ',')
;;;1372   					{
;;;1373   						for(i=0,temp1=0;i<6;i++)
;;;1374   						{
;;;1375   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1376   						}
;;;1377   					}	
;;;1378   					Para.LOAD_C = temp1;//负载电流
;;;1379   					temp1 = 0;
;;;1380   					
;;;1381   					if(buf[currCharNum++] == ',')
;;;1382   					{
;;;1383   						for(i=0,temp1=0;i<6;i++)
;;;1384   						{
;;;1385   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1386   						}
;;;1387   					}	
;;;1388   					Para.LOAD_Cutoff_V = temp1;//设置负载截止电压
;;;1389   					temp1 = 0;
;;;1390   					
;;;1391   					if(buf[currCharNum++] == ',')
;;;1392   					{
;;;1393   						for(i=0,temp1=0;i<5;i++)
;;;1394   						{
;;;1395   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1396   						}
;;;1397   					}	
;;;1398   					Para.CDC_OutPut_V = temp1;//设置容量测试充电电压
;;;1399   					temp1 = 0;
;;;1400   					
;;;1401   					if(buf[currCharNum++] == ',')
;;;1402   					{
;;;1403   						for(i=0,temp1=0;i<5;i++)
;;;1404   						{
;;;1405   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1406   						}
;;;1407   					}	
;;;1408   					Para.CDC_Limit_C = temp1;//设置容量测试充电限制电流
;;;1409   					temp1 = 0;
;;;1410   					
;;;1411   					if(buf[currCharNum++] == ',')
;;;1412   					{
;;;1413   						for(i=0,temp1=0;i<5;i++)
;;;1414   						{
;;;1415   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1416   						}
;;;1417   					}	
;;;1418   					Para.CDC_Ccutoff_V = temp1;//设置容量测试充电截止电压
;;;1419   					temp1 = 0;
;;;1420   					
;;;1421   					if(buf[currCharNum++] == ',')
;;;1422   					{
;;;1423   						for(i=0,temp1=0;i<5;i++)
;;;1424   						{
;;;1425   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1426   						}
;;;1427   					}	
;;;1428   					Para.CDC_Ccutoff_C = temp1;//设置容量测试充电截止电流
;;;1429   					temp1 = 0;
;;;1430   					
;;;1431   					if(buf[currCharNum++] == ',')
;;;1432   					{
;;;1433   						for(i=0,temp1=0;i<5;i++)
;;;1434   						{
;;;1435   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1436   						}
;;;1437   					}	
;;;1438   					Para.CDC_Load_C = temp1;//设置容量测试放电电流
;;;1439   					temp1 = 0;
;;;1440   					
;;;1441   					if(buf[currCharNum++] == ',')
;;;1442   					{
;;;1443   						for(i=0,temp1=0;i<5;i++)
;;;1444   						{
;;;1445   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1446   						}
;;;1447   					}	
;;;1448   					Para.CDC_Dcutoff_V = temp1;//设置容量测试放电截止电压
;;;1449   					temp1 = 0;
;;;1450   					
;;;1451   					if(buf[currCharNum++] == ',')
;;;1452   					{
;;;1453   						for(i=0,temp1=0;i<3;i++)
;;;1454   						{
;;;1455   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1456   						}
;;;1457   					}	
;;;1458   					Para.CDC_Cycle_Time = temp1;//循环次数
;;;1459   					temp1 = 0;
;;;1460   					
;;;1461   					if(buf[currCharNum++] == ',')
;;;1462   					{
;;;1463   						for(i=0,temp1=0;i<3;i++)
;;;1464   						{
;;;1465   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1466   						}
;;;1467   					}	
;;;1468   					if(MODE == 0)
;;;1469   					{
;;;1470   						Para.CLOAD_MODE = temp1;//负载模式
;;;1471   					}
;;;1472   					temp1 = 0;
;;;1473   //					MODE_PARASET(MODE);
;;;1474   					
;;;1475   					if(buf[currCharNum++] == ',')
;;;1476   					{
;;;1477   						for(i=0,temp1=0;i<3;i++)
;;;1478   						{
;;;1479   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1480   						}
;;;1481   					}	
;;;1482   					Rraly = temp1;//内阻档位
;;;1483   					temp1 = 0;
;;;1484   					
;;;1485   					if(buf[currCharNum++] == ',')
;;;1486   					{
;;;1487   						for(i=0,temp1=0;i<3;i++)
;;;1488   						{
;;;1489   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1490   						}
;;;1491   					}	
;;;1492   					Para.ACT_DELAY = temp1;//激活延时
;;;1493   					temp1 = 0;
;;;1494   					
;;;1495   					if(buf[currCharNum++] == ',')
;;;1496   					{
;;;1497   						for(i=0,temp1=0;i<6;i++)
;;;1498   						{
;;;1499   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1500   						}
;;;1501   					}	
;;;1502   					Para.LOAD_P = temp1*10;//负载功率
;;;1503   					temp1 = 0;
;;;1504   					
;;;1505   					MODE_PARASET(MODE);
;;;1506   					
;;;1507   					 buf[currCharNum++] = ChrEndR;
;;;1508   		        }
;;;1509   				break;
;;;1510   				case 4:
;;;1511   				pntlen = 1;
;;;1512   				if(buf[currCharNum]=='?')
;;;1513   				{
;;;1514   					  sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1515   				    currCharNum+=pntlen;
;;;1516   				    buf[currCharNum ++] = ChrEndS;
;;;1517   					
;;;1518   				}
;;;1519   				else
;;;1520   				{
;;;1521   					if(currCharNum == 0x0b)
;;;1522   					{						
;;;1523   						for(i=0,temp1=0;i<2;i++)
;;;1524   						{
;;;1525   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1526   						}
;;;1527   					}
;;;1528   					MODE = temp1;//项目
;;;1529   					temp1 = 0;
;;;1530   					
;;;1531   					if(MODE == 0)
;;;1532   					{
;;;1533   						if(buf[currCharNum++] == ',')
;;;1534   						{
;;;1535   							for(i=0,temp1=0;i<6;i++)
;;;1536   							{
;;;1537   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1538   							}
;;;1539   						}	
;;;1540   						
;;;1541   						temp1 = 0;
;;;1542   						
;;;1543   						if(buf[currCharNum++] == ',')
;;;1544   						{
;;;1545   							for(i=0,temp1=0;i<6;i++)
;;;1546   							{
;;;1547   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1548   							}
;;;1549   						}	
;;;1550   						Para.CSET_Current_Laod = temp1;//负载电流
;;;1551   						temp1 = 0;
;;;1552   						
;;;1553   	
;;;1554   						if(Para.CSET_Current_Laod > 15000)
;;;1555   						{
;;;1556   							LOAD_I_SW = 1;
;;;1557   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1558   						}else{
;;;1559   							LOAD_I_SW = 0;
;;;1560   							GPIO_SetBits(GPIOC,GPIO_Pin_11);//电流测量为低档位
;;;1561   						}
;;;1562   						if(buf[currCharNum++] == ',')
;;;1563   						{
;;;1564   							for(i=0,temp1=0;i<1;i++)
;;;1565   							{
;;;1566   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1567   							}
;;;1568   						}
;;;1569   						mainswitch = temp1;//开关
;;;1570   						if(mainswitch == 0)
;;;1571   						{
;;;1572   							LOAD_I_SW = 1;
;;;1573   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1574   						}
;;;1575   					}else if(MODE == 1){
;;;1576   						if(buf[currCharNum++] == ',')
;;;1577   						{
;;;1578   							for(i=0,temp1=0;i<6;i++)
;;;1579   							{
;;;1580   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1581   							}
;;;1582   						}	
;;;1583   						Para.CDC_OutPut_V = temp1;//电源电压
;;;1584   						temp1 = 0;
;;;1585   						
;;;1586   						if(buf[currCharNum++] == ',')
;;;1587   						{
;;;1588   							for(i=0,temp1=0;i<6;i++)
;;;1589   							{
;;;1590   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1591   							}
;;;1592   						}	
;;;1593   						Para.CDC_Limit_C = temp1;//电源电流
;;;1594   						temp1 = 0;
;;;1595   						
;;;1596   						if(buf[currCharNum++] == ',')
;;;1597   						{
;;;1598   							for(i=0,temp1=0;i<1;i++)
;;;1599   							{
;;;1600   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1601   							}
;;;1602   						}
;;;1603   						mainswitch = temp1;//开关
;;;1604   					}else if(MODE == 2){
;;;1605   						LOAD_I_SW = 1;
;;;1606   						GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1607   						if(buf[currCharNum++] == ',')
;;;1608   						{
;;;1609   							for(i=0,temp1=0;i<6;i++)
;;;1610   							{
;;;1611   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1612   							}
;;;1613   						}	
;;;1614   						Para.IR_Start_C = temp1;//起始电流
;;;1615   						temp1 = 0;
;;;1616   						
;;;1617   						if(buf[currCharNum++] == ',')
;;;1618   						{
;;;1619   							for(i=0,temp1=0;i<6;i++)
;;;1620   							{
;;;1621   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1622   							}
;;;1623   						}	
;;;1624   						Para.IR_Step_C = temp1;//步进电流
;;;1625   						temp1 = 0;
;;;1626   						
;;;1627   						if(buf[currCharNum++] == ',')
;;;1628   						{
;;;1629   							for(i=0,temp1=0;i<1;i++)
;;;1630   							{
;;;1631   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1632   							}
;;;1633   						}
;;;1634   						mainswitch = temp1;//开关
;;;1635   						
;;;1636   						if(mainswitch == 1)
;;;1637   						{
;;;1638   							finishflag = 0;
;;;1639   						}
;;;1640   					}else if(MODE == 3){
;;;1641   						if(buf[currCharNum++] == ',')
;;;1642   						{
;;;1643   							for(i=0,temp1=0;i<6;i++)
;;;1644   							{
;;;1645   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1646   							}
;;;1647   						}	
;;;1648   						Para.CDC_OutPut_V = temp1;//电源电压
;;;1649   						temp1 = 0;
;;;1650   						
;;;1651   						
;;;1652   						if(buf[currCharNum++] == ',')
;;;1653   						{
;;;1654   							for(i=0,temp1=0;i<6;i++)
;;;1655   							{
;;;1656   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1657   							}
;;;1658   						}	
;;;1659   						Para.CDC_Limit_C = temp1;//电源电流
;;;1660   						temp1 = 0;
;;;1661   						
;;;1662   						if(buf[currCharNum++] == ',')
;;;1663   						{
;;;1664   							for(i=0,temp1=0;i<1;i++)
;;;1665   							{
;;;1666   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1667   							}
;;;1668   						}
;;;1669   						mainswitch = temp1;//开关
;;;1670   						
;;;1671   						
;;;1672   					}else if(MODE == 4){
;;;1673   						if(buf[currCharNum++] == ',')
;;;1674   						{
;;;1675   							for(i=0,temp1=0;i<6;i++)
;;;1676   							{
;;;1677   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1678   							}
;;;1679   						}	
;;;1680   						
;;;1681   						temp1 = 0;
;;;1682   						
;;;1683   						if(buf[currCharNum++] == ',')
;;;1684   						{
;;;1685   							for(i=0,temp1=0;i<6;i++)
;;;1686   							{
;;;1687   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1688   							}
;;;1689   						}	
;;;1690   						Para.CSET_Current_Laod = temp1;//负载电流
;;;1691   						temp1 = 0;
;;;1692   						
;;;1693   	
;;;1694   						if(Para.CSET_Current_Laod > 15000)
;;;1695   						{
;;;1696   							LOAD_I_SW = 1;
;;;1697   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1698   						}else{
;;;1699   							LOAD_I_SW = 0;
;;;1700   							GPIO_SetBits(GPIOC,GPIO_Pin_11);//电流测量为低档位
;;;1701   						}
;;;1702   						if(buf[currCharNum++] == ',')
;;;1703   						{
;;;1704   							for(i=0,temp1=0;i<1;i++)
;;;1705   							{
;;;1706   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1707   							}
;;;1708   						}
;;;1709   						mainswitch = temp1;//开关
;;;1710   						if(mainswitch == 0)
;;;1711   						{
;;;1712   							LOAD_I_SW = 1;
;;;1713   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1714   						}
;;;1715   					}else if(MODE == 5){
;;;1716   						if(buf[currCharNum++] == ',')
;;;1717   						{
;;;1718   							for(i=0,temp1=0;i<6;i++)
;;;1719   							{
;;;1720   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1721   							}
;;;1722   						}	
;;;1723   						temp1 = 0;
;;;1724   						
;;;1725   						if(buf[currCharNum++] == ',')
;;;1726   						{
;;;1727   							for(i=0,temp1=0;i<6;i++)
;;;1728   							{
;;;1729   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1730   							}
;;;1731   						}	
;;;1732   						temp1 = 0;
;;;1733   						
;;;1734   						if(buf[currCharNum++] == ',')
;;;1735   						{
;;;1736   							for(i=0,temp1=0;i<1;i++)
;;;1737   							{
;;;1738   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1739   							}
;;;1740   						}
;;;1741   						mainswitch = temp1;//开关
;;;1742   						if(mainswitch == 0)
;;;1743   						{
;;;1744   							mainswitch = 0;
;;;1745   						}
;;;1746   					}else if(MODE == 6){
;;;1747   						if(buf[currCharNum++] == ',')
;;;1748   						{
;;;1749   							for(i=0,temp1=0;i<6;i++)
;;;1750   							{
;;;1751   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1752   							}
;;;1753   						}	
;;;1754   						temp1 = 0;
;;;1755   						
;;;1756   						if(buf[currCharNum++] == ',')
;;;1757   						{
;;;1758   							for(i=0,temp1=0;i<6;i++)
;;;1759   							{
;;;1760   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1761   							}
;;;1762   						}	
;;;1763   						temp1 = 0;
;;;1764   						
;;;1765   						if(buf[currCharNum++] == ',')
;;;1766   						{
;;;1767   							for(i=0,temp1=0;i<1;i++)
;;;1768   							{
;;;1769   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1770   							}
;;;1771   						}
;;;1772   						mainswitch = temp1;//开关
;;;1773   					}
;;;1774   					
;;;1775   					temp1 = 0;
;;;1776   //					MODE_PARASET(MODE);
;;;1777   					Off_GPOI_ResetSet();
;;;1778   					LIST_ONOFF(mainswitch);
;;;1779   					buf[currCharNum++] = ChrEndR;
;;;1780   		        }
;;;1781   				break;
;;;1782   				case 12://电压校准
;;;1783   				{
;;;1784   					pntlen = 9;
;;;1785   					if(buf[currCharNum]=='?')
;;;1786   					{
;;;1787   						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1788   						sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1789   						currCharNum+=pntlen;
;;;1790   						buf[currCharNum++ ] = ChrEndS;
;;;1791   					}
;;;1792   					else
;;;1793   					{
;;;1794   						tmpFg = 1;
;;;1795   						for(i=0;i<pntlen;i++)
;;;1796   						{
;;;1797   						   if(i==0||i==5)
;;;1798   							  continue;
;;;1799   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1800   						   {
;;;1801   							  tmpFg = (tmpFg&0x01);
;;;1802   						   }
;;;1803   						   else
;;;1804   						   {
;;;1805   							  tmpFg = 0;
;;;1806   						   }
;;;1807   						}
;;;1808   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1809   						{
;;;1810   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1811   							
;;;1812   						}
;;;1813   						temp1=0;
;;;1814   						for(i=0;i<pntlen;i++)
;;;1815   						{
;;;1816   						   if(i==0)
;;;1817   						   {
;;;1818   							   fsingal = 10*(buf[currCharNum++]-0x30);
;;;1819   							   continue; 
;;;1820   						   }else if(i==1)
;;;1821   						   {
;;;1822   							  fsingal = fsingal+(buf[currCharNum++]-0x30);
;;;1823   							  continue; 
;;;1824   						   } 
;;;1825   						   else if(i==5)
;;;1826   						   {
;;;1827   							   currCharNum++;
;;;1828   							   continue; 
;;;1829   						   }
;;;1830   						   else									 
;;;1831   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1832   						}	
;;;1833   						CalHandle(0,fsingal,temp1);
;;;1834   						
;;;1835   					}
;;;1836   				}break;
;;;1837   				case 5:
;;;1838   				pntlen = 1;
;;;1839   				if(buf[currCharNum]=='?')
;;;1840   				{
;;;1841   					sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1842   				    currCharNum+=pntlen;
;;;1843   				    buf[currCharNum ++] = ChrEndS;
;;;1844   					
;;;1845   				}
;;;1846   				else
;;;1847   				{
;;;1848   					pntlen = 1;				
;;;1849   					for(i=0,temp1=0;i<pntlen;i++)
;;;1850   					{
;;;1851   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1852   					}		                   
;;;1853   					if(temp1>1)
;;;1854   					{
;;;1855   						return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1856   					}
;;;1857   //					MODE=temp1;
;;;1858   					
;;;1859   					
;;;1860   					overflag = temp1;
;;;1861   //						Para.CSET_Voltage = 5000;
;;;1862   //						Para.CSET_Current = 1000;
;;;1863   					
;;;1864   						
;;;1865   //					MODE_ONOFF(mainswitch);
;;;1866   	//				Change_LM_Val(LM_S_Vale);
;;;1867   					buf[currCharNum++] = ChrEndR;
;;;1868   		        }
;;;1869   				break;
;;;1870   				case 13://电流校准
;;;1871   				{
;;;1872   					pntlen = 9;
;;;1873   					if(buf[currCharNum]=='?')
;;;1874   					{
;;;1875   //						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1876   //									sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1877   //						currCharNum+=pntlen;
;;;1878   //						buf[currCharNum++ ] = ChrEndS;
;;;1879   					}
;;;1880   					else
;;;1881   					{
;;;1882   						tmpFg = 1;
;;;1883   						for(i=0;i<pntlen;i++)
;;;1884   						{
;;;1885   						   if(i==0||i==5)
;;;1886   							  continue;
;;;1887   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1888   						   {
;;;1889   							  tmpFg = (tmpFg&0x01);
;;;1890   						   }
;;;1891   						   else
;;;1892   						   {
;;;1893   							  tmpFg = 0;
;;;1894   						   }
;;;1895   						}
;;;1896   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1897   						{
;;;1898   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1899   							
;;;1900   						}
;;;1901   						temp1=0;
;;;1902   						for(i=0;i<pntlen;i++)
;;;1903   						{
;;;1904   						   if(i==0)
;;;1905   						   {
;;;1906   							   fsingal = 10*(buf[currCharNum++]-0x30);
;;;1907   							   continue; 
;;;1908   						   }else if(i==1)
;;;1909   						   {
;;;1910   							  fsingal = fsingal+(buf[currCharNum++]-0x30);
;;;1911   							  continue; 
;;;1912   						   } 
;;;1913   						   else if(i==5)
;;;1914   						   {
;;;1915   							   currCharNum++;
;;;1916   							   continue; 
;;;1917   						   }
;;;1918   						   else									 
;;;1919   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1920   						}
;;;1921   //						for(i=0;i<pntlen;i++)
;;;1922   //						{
;;;1923   //						   if(i==0)
;;;1924   //						   {
;;;1925   //							   fsingal = buf[currCharNum++]-0x30;
;;;1926   //							   continue; 
;;;1927   //						   } 
;;;1928   //						   else if(i==5)
;;;1929   //						   {
;;;1930   //							   currCharNum++;
;;;1931   //							   continue; 
;;;1932   //						   }
;;;1933   //						   else									 
;;;1934   //						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1935   //						}	
;;;1936   						CalHandle(1,fsingal,temp1);
;;;1937   						
;;;1938   					}
;;;1939   				}break;
;;;1940   				case 14://电阻校准
;;;1941   				{
;;;1942   					pntlen = 6;
;;;1943   					if(buf[currCharNum]=='?')
;;;1944   					{
;;;1945   						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1946   									sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1947   						currCharNum+=pntlen;
;;;1948   						buf[currCharNum++ ] = ChrEndS;
;;;1949   					}
;;;1950   					else
;;;1951   					{
;;;1952   						tmpFg = 1;
;;;1953   						for(i=0;i<pntlen;i++)
;;;1954   						{
;;;1955   						   if(i==0||i==4)
;;;1956   							  continue;
;;;1957   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1958   						   {
;;;1959   							  tmpFg = (tmpFg&0x01);
;;;1960   						   }
;;;1961   						   else
;;;1962   						   {
;;;1963   							  tmpFg = 0;
;;;1964   						   }
;;;1965   						}
;;;1966   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1967   						{
;;;1968   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1969   							
;;;1970   						}
;;;1971   						temp1=0;
;;;1972   						for(i=0;i<pntlen;i++)
;;;1973   						{
;;;1974   						   if(i==0)
;;;1975   						   {
;;;1976   							   fsingal = buf[currCharNum++]-0x30;
;;;1977   							   continue; 
;;;1978   						   } 
;;;1979   //						   else if(i==4)
;;;1980   //						   {
;;;1981   //							   currCharNum++;
;;;1982   //							   continue; 
;;;1983   //						   }
;;;1984   //						   else									 
;;;1985   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1986   						}
;;;1987   						CalHandle(2,fsingal,temp1);
;;;1988   						
;;;1989   					}
;;;1990   				}break;
;;;1991   				case 18:
;;;1992   				{
;;;1993   					if(buf[currCharNum]=='?')
;;;1994   					{
;;;1995   //						sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1996   //						currCharNum+=pntlen;
;;;1997   //						buf[currCharNum ++] = ChrEndS;
;;;1998   						
;;;1999   					}
;;;2000   					else
;;;2001   					{
;;;2002   						pntlen = 1;				
;;;2003   						for(i=0,temp1=0;i<pntlen;i++)
;;;2004   						{
;;;2005   							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;2006   						}		                   
;;;2007   						if(temp1>1)
;;;2008   						{
;;;2009   							return SetErr_ACK(buf, addr ,PARA_ERR);
;;;2010   						}
;;;2011   	//					MODE=temp1;
;;;2012   						
;;;2013   						jumpflag = temp1;
;;;2014   						bootflag=1;
;;;2015   						Write_Boot_Flag();
;;;2016   //						if(temp1 == 1)
;;;2017   //						{
;;;2018   //							JumpBoot(55);
;;;2019   //						}
;;;2020   						buf[currCharNum++] = ChrEndR;
;;;2021   					}
;;;2022   				}break;
;;;2023   //				case 15:
;;;2024   //				{
;;;2025   //					pntlen = 1;
;;;2026   //					if(buf[currCharNum]=='?')
;;;2027   //					{
;;;2028   //						sprintf(&buf[currCharNum],"%1d",Gmode_Vale);
;;;2029   //						currCharNum+=pntlen;
;;;2030   //						buf[currCharNum] = ChrEndR;
;;;2031   //						currCharNum++;
;;;2032   //	//				    buf[currCharNum ++] = ChrEndS;
;;;2033   //						
;;;2034   //					}
;;;2035   //					else
;;;2036   //					{
;;;2037   //						tmpFg = 1;
;;;2038   //						for(i=0;i<pntlen;i++)
;;;2039   //						{
;;;2040   //						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;2041   //						   {
;;;2042   //							  tmpFg = (tmpFg&0x01);
;;;2043   //						   }
;;;2044   //						   else
;;;2045   //						   {
;;;2046   //							  tmpFg = 0;
;;;2047   //						   }
;;;2048   //						}
;;;2049   //						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;2050   //						{
;;;2051   //							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;2052   //							
;;;2053   //						}					
;;;2054   //						for(i=0,temp1=0;i<pntlen;i++)
;;;2055   //						{
;;;2056   //							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;2057   //						}		                   
;;;2058   //						if(temp1 >Mode_H)
;;;2059   //						 {
;;;2060   //							 return SetErr_ACK(buf, addr ,PARA_ERR);
;;;2061   //							 
;;;2062   //						 }
;;;2063   //						 if(H_L == 1)
;;;2064   //						 {
;;;2065   //							CalHandle(3,1,temp1);
;;;2066   //						 }else{
;;;2067   //							 CalHandle(3,0,temp1);
;;;2068   //						 }
;;;2069   //						 
;;;2070   ////								 Mode=temp1;
;;;2071   ////								Change_MODE_Val(Mode);
;;;2072   ////						 buf[currCharNum++] = ChrEndS;
;;;2073   //					}
;;;2074   //					break;
;;;2075   //				}break;
;;;2076   //				case 16:
;;;2077   //				{
;;;2078   //					pntlen = 3;
;;;2079   //					if(buf[currCharNum]=='?')
;;;2080   //					{
;;;2081   //						sprintf(&buf[currCharNum],"%1d",Gmode_Vale);
;;;2082   //						currCharNum+=pntlen;
;;;2083   //						buf[currCharNum] = ChrEndR;
;;;2084   //						currCharNum++;
;;;2085   //	//				    buf[currCharNum ++] = ChrEndS;
;;;2086   //						
;;;2087   //					}
;;;2088   //					else
;;;2089   //					{
;;;2090   //						tmpFg = 1;
;;;2091   //						for(i=0;i<pntlen;i++)
;;;2092   //						{
;;;2093   //						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;2094   //						   {
;;;2095   //							  tmpFg = (tmpFg&0x01);
;;;2096   //						   }
;;;2097   //						   else
;;;2098   //						   {
;;;2099   //							  tmpFg = 0;
;;;2100   //						   }
;;;2101   //						}
;;;2102   //						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;2103   //						{
;;;2104   //							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;2105   //							
;;;2106   //						}					
;;;2107   //						for(i=0,temp1=0;i<pntlen;i++)
;;;2108   //						{
;;;2109   //							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;2110   //						}		                   
;;;2111   //						 overflag = temp1;
;;;2112   //						 
;;;2113   ////								 Mode=temp1;
;;;2114   ////								Change_MODE_Val(Mode);
;;;2115   ////						 buf[currCharNum++] = ChrEndS;
;;;2116   //					}
;;;2117   //					break;
;;;2118   //				}break;
;;;2119   //				case 17:
;;;2120   //				{
;;;2121   //					pntlen = 2;
;;;2122   //					if(buf[currCharNum]=='?')
;;;2123   //					{
;;;2124   ////						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;2125   //									sprintf(&buf[currCharNum],"%02d",(int)temperature);
;;;2126   //						currCharNum+=pntlen;
;;;2127   //						buf[currCharNum++ ] = ChrEndR;
;;;2128   //						buf[currCharNum++ ] = ChrEndS;
;;;2129   //					}
;;;2130   //				}break;
;;;2131   			default:    //ERR
;;;2132              		 return SetErr_ACK(buf, addr ,CMD_ERR);
;;;2133   	 			  
;;;2134   		  }
;;;2135   		  break;
;;;2136   		}
;;;2137   		
;;;2138   	}
;;;2139   	if(j>=CmdNumb)
;;;2140   	{
;;;2141   		return SetErr_ACK(buf, addr ,CMD_ERR);			  
0002cc  4628              MOV      r0,r5
0002ce  9932              LDR      r1,[sp,#0xc8]
0002d0  f7fffffe          BL       SetErr_ACK
;;;2142   	}
;;;2143   	return currCharNum+1;
;;;2144   }
0002d4  b033              ADD      sp,sp,#0xcc
0002d6  e8bd8ff0          POP      {r4-r11,pc}
                  |L10.730|
0002da  f7fffffe          BL       __2sprintf
0002de  1c64              ADDS     r4,r4,#1              ;1220
0002e0  e3f1              B        |L10.2758|
                  |L10.738|
0002e2  4956              LDR      r1,|L10.1084|
0002e4  3958              SUBS     r1,r1,#0x58           ;1270
0002e6  7188              STRB     r0,[r1,#6]            ;1270
0002e8  7988              LDRB     r0,[r1,#6]            ;1275  ; mainswitch
0002ea  f7fffffe          BL       MODE_ONOFF
0002ee  e3eb              B        |L10.2760|
                  |L10.752|
0002f0  5d29              LDRB     r1,[r5,r4]            ;1282
0002f2  293f              CMP      r1,#0x3f              ;1282
0002f4  d0d0              BEQ      |L10.664|
0002f6  2c0b              CMP      r4,#0xb               ;1291
0002f8  d10d              BNE      |L10.790|
0002fa  2000              MOVS     r0,#0                 ;1293
0002fc  4607              MOV      r7,r0                 ;1293
                  |L10.766|
0002fe  5d2a              LDRB     r2,[r5,r4]            ;1295
000300  eb070187          ADD      r1,r7,r7,LSL #2       ;1295
000304  eb060141          ADD      r1,r6,r1,LSL #1       ;1295
000308  1c64              ADDS     r4,r4,#1              ;1295
00030a  1c40              ADDS     r0,r0,#1              ;1295
00030c  1857              ADDS     r7,r2,r1              ;1295
00030e  b2c0              UXTB     r0,r0                 ;1293
000310  b2a4              UXTH     r4,r4                 ;1295
000312  2806              CMP      r0,#6                 ;1293
000314  d3f3              BCC      |L10.766|
                  |L10.790|
000316  4650              MOV      r0,r10                ;1298
000318  f8ca7044          STR      r7,[r10,#0x44]        ;1298  ; Para
00031c  5d2b              LDRB     r3,[r5,r4]            ;1301
00031e  1c64              ADDS     r4,r4,#1              ;1301
000320  2200              MOVS     r2,#0                 ;1299
000322  b2a1              UXTH     r1,r4                 ;1301
000324  2b2c              CMP      r3,#0x2c              ;1301
000326  d10c              BNE      |L10.834|
000328  2300              MOVS     r3,#0                 ;1303
                  |L10.810|
00032a  5c6c              LDRB     r4,[r5,r1]            ;1305
00032c  eb020282          ADD      r2,r2,r2,LSL #2       ;1305
000330  1c49              ADDS     r1,r1,#1              ;1305
000332  1c5b              ADDS     r3,r3,#1              ;1305
000334  eb060242          ADD      r2,r6,r2,LSL #1       ;1305
000338  b2db              UXTB     r3,r3                 ;1303
00033a  4422              ADD      r2,r2,r4              ;1305
00033c  b289              UXTH     r1,r1                 ;1305
00033e  2b05              CMP      r3,#5                 ;1303
000340  d3f3              BCC      |L10.810|
                  |L10.834|
000342  f8a02048          STRH     r2,[r0,#0x48]         ;1308
000346  5c6a              LDRB     r2,[r5,r1]            ;1311
000348  1c49              ADDS     r1,r1,#1              ;1311
00034a  2300              MOVS     r3,#0                 ;1309
00034c  b289              UXTH     r1,r1                 ;1311
00034e  2a2c              CMP      r2,#0x2c              ;1311
000350  d10c              BNE      |L10.876|
000352  2200              MOVS     r2,#0                 ;1313
                  |L10.852|
000354  5c6c              LDRB     r4,[r5,r1]            ;1315
000356  eb030383          ADD      r3,r3,r3,LSL #2       ;1315
00035a  1c49              ADDS     r1,r1,#1              ;1315
00035c  1c52              ADDS     r2,r2,#1              ;1315
00035e  eb060343          ADD      r3,r6,r3,LSL #1       ;1315
000362  b2d2              UXTB     r2,r2                 ;1313
000364  4423              ADD      r3,r3,r4              ;1315
000366  b289              UXTH     r1,r1                 ;1315
000368  2a05              CMP      r2,#5                 ;1313
00036a  d3f3              BCC      |L10.852|
                  |L10.876|
00036c  64c3              STR      r3,[r0,#0x4c]         ;1318  ; Para
00036e  5c6b              LDRB     r3,[r5,r1]            ;1321
000370  1c49              ADDS     r1,r1,#1              ;1321
000372  2200              MOVS     r2,#0                 ;1319
000374  b289              UXTH     r1,r1                 ;1321
000376  2b2c              CMP      r3,#0x2c              ;1321
000378  d10c              BNE      |L10.916|
00037a  2300              MOVS     r3,#0                 ;1323
                  |L10.892|
00037c  5c6c              LDRB     r4,[r5,r1]            ;1325
00037e  eb020282          ADD      r2,r2,r2,LSL #2       ;1325
000382  1c49              ADDS     r1,r1,#1              ;1325
000384  1c5b              ADDS     r3,r3,#1              ;1325
000386  eb060242          ADD      r2,r6,r2,LSL #1       ;1325
00038a  b2db              UXTB     r3,r3                 ;1323
00038c  4422              ADD      r2,r2,r4              ;1325
00038e  b289              UXTH     r1,r1                 ;1325
000390  2b03              CMP      r3,#3                 ;1323
000392  d3f3              BCC      |L10.892|
                  |L10.916|
000394  e000              B        |L10.920|
                  |L10.918|
000396  e216              B        |L10.1990|
                  |L10.920|
000398  f8a02050          STRH     r2,[r0,#0x50]         ;1328
00039c  5c6a              LDRB     r2,[r5,r1]            ;1331
00039e  1c49              ADDS     r1,r1,#1              ;1331
0003a0  2300              MOVS     r3,#0                 ;1329
0003a2  b289              UXTH     r1,r1                 ;1331
0003a4  2a2c              CMP      r2,#0x2c              ;1331
0003a6  d10c              BNE      |L10.962|
0003a8  2200              MOVS     r2,#0                 ;1333
                  |L10.938|
0003aa  5c6c              LDRB     r4,[r5,r1]            ;1335
0003ac  eb030383          ADD      r3,r3,r3,LSL #2       ;1335
0003b0  1c49              ADDS     r1,r1,#1              ;1335
0003b2  1c52              ADDS     r2,r2,#1              ;1335
0003b4  eb060343          ADD      r3,r6,r3,LSL #1       ;1335
0003b8  b2d2              UXTB     r2,r2                 ;1333
0003ba  4423              ADD      r3,r3,r4              ;1335
0003bc  b289              UXTH     r1,r1                 ;1335
0003be  2a06              CMP      r2,#6                 ;1333
0003c0  d3f3              BCC      |L10.938|
                  |L10.962|
0003c2  6543              STR      r3,[r0,#0x54]         ;1338  ; Para
0003c4  5c6b              LDRB     r3,[r5,r1]            ;1341
0003c6  1c49              ADDS     r1,r1,#1              ;1341
0003c8  2200              MOVS     r2,#0                 ;1339
0003ca  b289              UXTH     r1,r1                 ;1341
0003cc  2b2c              CMP      r3,#0x2c              ;1341
0003ce  d10c              BNE      |L10.1002|
0003d0  2300              MOVS     r3,#0                 ;1343
                  |L10.978|
0003d2  5c6c              LDRB     r4,[r5,r1]            ;1345
0003d4  eb020282          ADD      r2,r2,r2,LSL #2       ;1345
0003d8  1c49              ADDS     r1,r1,#1              ;1345
0003da  1c5b              ADDS     r3,r3,#1              ;1345
0003dc  eb060242          ADD      r2,r6,r2,LSL #1       ;1345
0003e0  b2db              UXTB     r3,r3                 ;1343
0003e2  4422              ADD      r2,r2,r4              ;1345
0003e4  b289              UXTH     r1,r1                 ;1345
0003e6  2b05              CMP      r3,#5                 ;1343
0003e8  d3f3              BCC      |L10.978|
                  |L10.1002|
0003ea  f8a02058          STRH     r2,[r0,#0x58]         ;1348
0003ee  5c6b              LDRB     r3,[r5,r1]            ;1351
0003f0  1c49              ADDS     r1,r1,#1              ;1351
0003f2  2200              MOVS     r2,#0                 ;1349
0003f4  b289              UXTH     r1,r1                 ;1351
0003f6  2b2c              CMP      r3,#0x2c              ;1351
0003f8  d10c              BNE      |L10.1044|
0003fa  2300              MOVS     r3,#0                 ;1353
                  |L10.1020|
0003fc  5c6c              LDRB     r4,[r5,r1]            ;1355
0003fe  eb020282          ADD      r2,r2,r2,LSL #2       ;1355
000402  1c49              ADDS     r1,r1,#1              ;1355
000404  1c5b              ADDS     r3,r3,#1              ;1355
000406  eb060242          ADD      r2,r6,r2,LSL #1       ;1355
00040a  b2db              UXTB     r3,r3                 ;1353
00040c  4422              ADD      r2,r2,r4              ;1355
00040e  b289              UXTH     r1,r1                 ;1355
000410  2b05              CMP      r3,#5                 ;1353
000412  d3f3              BCC      |L10.1020|
                  |L10.1044|
000414  f8a0205a          STRH     r2,[r0,#0x5a]         ;1358
000418  5c6a              LDRB     r2,[r5,r1]            ;1361
00041a  1c49              ADDS     r1,r1,#1              ;1361
00041c  2300              MOVS     r3,#0                 ;1359
00041e  b289              UXTH     r1,r1                 ;1361
000420  2a2c              CMP      r2,#0x2c              ;1361
000422  d13b              BNE      |L10.1180|
000424  2200              MOVS     r2,#0                 ;1363
                  |L10.1062|
000426  5c6c              LDRB     r4,[r5,r1]            ;1365
000428  eb030383          ADD      r3,r3,r3,LSL #2       ;1365
00042c  eb060343          ADD      r3,r6,r3,LSL #1       ;1365
000430  4423              ADD      r3,r3,r4              ;1365
000432  e02d              B        |L10.1168|
                  |L10.1076|
000434  256400            DCB      "%d",0
000437  00                DCB      0
                  |L10.1080|
000438  2f00              DCB      "/",0
00043a  00                DCB      0
00043b  00                DCB      0
                  |L10.1084|
                          DCD      ||.data||+0x58
                  |L10.1088|
                          DCD      C_DISCHARGE
                  |L10.1092|
                          DCD      Para
                  |L10.1096|
000448  25303664          DCB      "%06d",0
00044c  00      
00044d  00                DCB      0
00044e  00                DCB      0
00044f  00                DCB      0
                  |L10.1104|
000450  25303564          DCB      "%05d",0
000454  00      
000455  00                DCB      0
000456  00                DCB      0
000457  00                DCB      0
                  |L10.1112|
000458  25303464          DCB      "%04d",0
00045c  00      
00045d  00                DCB      0
00045e  00                DCB      0
00045f  00                DCB      0
                  |L10.1120|
                          DCD      max_discahrgeNum
                  |L10.1124|
000464  447a0000          DCFS     0x447a0000 ; 1000
                  |L10.1128|
                          DCD      shorttime
                  |L10.1132|
00046c  25303364          DCB      "%03d",0
000470  00      
000471  00                DCB      0
000472  00                DCB      0
000473  00                DCB      0
                  |L10.1140|
000474  25316400          DCB      "%1d",0
                  |L10.1144|
                          DCD      finishflag
                  |L10.1148|
                          DCD      lockflag
                  |L10.1152|
                          DCD      version
                  |L10.1156|
000484  25326400          DCB      "%2d",0
                  |L10.1160|
                          DCD      Temperature
                  |L10.1164|
                          DCD      overflag
                  |L10.1168|
000490  1c49              ADDS     r1,r1,#1              ;1365
000492  1c52              ADDS     r2,r2,#1              ;1365
000494  b2d2              UXTB     r2,r2                 ;1363
000496  b289              UXTH     r1,r1                 ;1365
000498  2a06              CMP      r2,#6                 ;1363
00049a  d3c4              BCC      |L10.1062|
                  |L10.1180|
00049c  6603              STR      r3,[r0,#0x60]         ;1368  ; Para
00049e  5c6a              LDRB     r2,[r5,r1]            ;1371
0004a0  1c49              ADDS     r1,r1,#1              ;1371
0004a2  2300              MOVS     r3,#0                 ;1369
0004a4  b289              UXTH     r1,r1                 ;1371
0004a6  2a2c              CMP      r2,#0x2c              ;1371
0004a8  d10c              BNE      |L10.1220|
0004aa  2200              MOVS     r2,#0                 ;1373
                  |L10.1196|
0004ac  5c6c              LDRB     r4,[r5,r1]            ;1375
0004ae  eb030383          ADD      r3,r3,r3,LSL #2       ;1375
0004b2  1c49              ADDS     r1,r1,#1              ;1375
0004b4  1c52              ADDS     r2,r2,#1              ;1375
0004b6  eb060343          ADD      r3,r6,r3,LSL #1       ;1375
0004ba  b2d2              UXTB     r2,r2                 ;1373
0004bc  4423              ADD      r3,r3,r4              ;1375
0004be  b289              UXTH     r1,r1                 ;1375
0004c0  2a06              CMP      r2,#6                 ;1373
0004c2  d3f3              BCC      |L10.1196|
                  |L10.1220|
0004c4  65c3              STR      r3,[r0,#0x5c]         ;1378  ; Para
0004c6  5c6b              LDRB     r3,[r5,r1]            ;1381
0004c8  1c49              ADDS     r1,r1,#1              ;1381
0004ca  2200              MOVS     r2,#0                 ;1379
0004cc  b289              UXTH     r1,r1                 ;1381
0004ce  2b2c              CMP      r3,#0x2c              ;1381
0004d0  d10c              BNE      |L10.1260|
0004d2  2300              MOVS     r3,#0                 ;1383
                  |L10.1236|
0004d4  5c6c              LDRB     r4,[r5,r1]            ;1385
0004d6  eb020282          ADD      r2,r2,r2,LSL #2       ;1385
0004da  1c49              ADDS     r1,r1,#1              ;1385
0004dc  1c5b              ADDS     r3,r3,#1              ;1385
0004de  eb060242          ADD      r2,r6,r2,LSL #1       ;1385
0004e2  b2db              UXTB     r3,r3                 ;1383
0004e4  4422              ADD      r2,r2,r4              ;1385
0004e6  b289              UXTH     r1,r1                 ;1385
0004e8  2b06              CMP      r3,#6                 ;1383
0004ea  d3f3              BCC      |L10.1236|
                  |L10.1260|
0004ec  f8a02068          STRH     r2,[r0,#0x68]         ;1388
0004f0  5c6a              LDRB     r2,[r5,r1]            ;1391
0004f2  1c49              ADDS     r1,r1,#1              ;1391
0004f4  2300              MOVS     r3,#0                 ;1389
0004f6  b289              UXTH     r1,r1                 ;1391
0004f8  2a2c              CMP      r2,#0x2c              ;1391
0004fa  d10c              BNE      |L10.1302|
0004fc  2200              MOVS     r2,#0                 ;1393
                  |L10.1278|
0004fe  5c6c              LDRB     r4,[r5,r1]            ;1395
000500  eb030383          ADD      r3,r3,r3,LSL #2       ;1395
000504  1c49              ADDS     r1,r1,#1              ;1395
000506  1c52              ADDS     r2,r2,#1              ;1395
000508  eb060343          ADD      r3,r6,r3,LSL #1       ;1395
00050c  b2d2              UXTB     r2,r2                 ;1393
00050e  4423              ADD      r3,r3,r4              ;1395
000510  b289              UXTH     r1,r1                 ;1395
000512  2a05              CMP      r2,#5                 ;1393
000514  d3f3              BCC      |L10.1278|
                  |L10.1302|
000516  66c3              STR      r3,[r0,#0x6c]         ;1398  ; Para
000518  5c6b              LDRB     r3,[r5,r1]            ;1401
00051a  1c49              ADDS     r1,r1,#1              ;1401
00051c  2200              MOVS     r2,#0                 ;1399
00051e  b289              UXTH     r1,r1                 ;1401
000520  2b2c              CMP      r3,#0x2c              ;1401
000522  d10c              BNE      |L10.1342|
000524  2300              MOVS     r3,#0                 ;1403
                  |L10.1318|
000526  5c6c              LDRB     r4,[r5,r1]            ;1405
000528  eb020282          ADD      r2,r2,r2,LSL #2       ;1405
00052c  1c49              ADDS     r1,r1,#1              ;1405
00052e  1c5b              ADDS     r3,r3,#1              ;1405
000530  eb060242          ADD      r2,r6,r2,LSL #1       ;1405
000534  b2db              UXTB     r3,r3                 ;1403
000536  4422              ADD      r2,r2,r4              ;1405
000538  b289              UXTH     r1,r1                 ;1405
00053a  2b05              CMP      r3,#5                 ;1403
00053c  d3f3              BCC      |L10.1318|
                  |L10.1342|
00053e  f8a02070          STRH     r2,[r0,#0x70]         ;1408
000542  5c6a              LDRB     r2,[r5,r1]            ;1411
000544  1c49              ADDS     r1,r1,#1              ;1411
000546  2300              MOVS     r3,#0                 ;1409
000548  b289              UXTH     r1,r1                 ;1411
00054a  2a2c              CMP      r2,#0x2c              ;1411
00054c  d10c              BNE      |L10.1384|
00054e  2200              MOVS     r2,#0                 ;1413
                  |L10.1360|
000550  5c6c              LDRB     r4,[r5,r1]            ;1415
000552  eb030383          ADD      r3,r3,r3,LSL #2       ;1415
000556  1c49              ADDS     r1,r1,#1              ;1415
000558  1c52              ADDS     r2,r2,#1              ;1415
00055a  eb060343          ADD      r3,r6,r3,LSL #1       ;1415
00055e  b2d2              UXTB     r2,r2                 ;1413
000560  4423              ADD      r3,r3,r4              ;1415
000562  b289              UXTH     r1,r1                 ;1415
000564  2a05              CMP      r2,#5                 ;1413
000566  d3f3              BCC      |L10.1360|
                  |L10.1384|
000568  6743              STR      r3,[r0,#0x74]         ;1418  ; Para
00056a  5c6b              LDRB     r3,[r5,r1]            ;1421
00056c  1c49              ADDS     r1,r1,#1              ;1421
00056e  2200              MOVS     r2,#0                 ;1419
000570  b289              UXTH     r1,r1                 ;1421
000572  2b2c              CMP      r3,#0x2c              ;1421
000574  d10c              BNE      |L10.1424|
000576  2300              MOVS     r3,#0                 ;1423
                  |L10.1400|
000578  5c6c              LDRB     r4,[r5,r1]            ;1425
00057a  eb020282          ADD      r2,r2,r2,LSL #2       ;1425
00057e  1c49              ADDS     r1,r1,#1              ;1425
000580  1c5b              ADDS     r3,r3,#1              ;1425
000582  eb060242          ADD      r2,r6,r2,LSL #1       ;1425
000586  b2db              UXTB     r3,r3                 ;1423
000588  4422              ADD      r2,r2,r4              ;1425
00058a  b289              UXTH     r1,r1                 ;1425
00058c  2b05              CMP      r3,#5                 ;1423
00058e  d3f3              BCC      |L10.1400|
                  |L10.1424|
000590  f8a02078          STRH     r2,[r0,#0x78]         ;1428
000594  5c6a              LDRB     r2,[r5,r1]            ;1431
000596  1c49              ADDS     r1,r1,#1              ;1431
000598  2300              MOVS     r3,#0                 ;1429
00059a  b289              UXTH     r1,r1                 ;1431
00059c  2a2c              CMP      r2,#0x2c              ;1431
00059e  d10c              BNE      |L10.1466|
0005a0  2200              MOVS     r2,#0                 ;1433
                  |L10.1442|
0005a2  5c6c              LDRB     r4,[r5,r1]            ;1435
0005a4  eb030383          ADD      r3,r3,r3,LSL #2       ;1435
0005a8  1c49              ADDS     r1,r1,#1              ;1435
0005aa  1c52              ADDS     r2,r2,#1              ;1435
0005ac  eb060343          ADD      r3,r6,r3,LSL #1       ;1435
0005b0  b2d2              UXTB     r2,r2                 ;1433
0005b2  4423              ADD      r3,r3,r4              ;1435
0005b4  b289              UXTH     r1,r1                 ;1435
0005b6  2a05              CMP      r2,#5                 ;1433
0005b8  d3f3              BCC      |L10.1442|
                  |L10.1466|
0005ba  67c3              STR      r3,[r0,#0x7c]         ;1438  ; Para
0005bc  5c6a              LDRB     r2,[r5,r1]            ;1441
0005be  1c49              ADDS     r1,r1,#1              ;1441
0005c0  2300              MOVS     r3,#0                 ;1439
0005c2  b289              UXTH     r1,r1                 ;1441
0005c4  2a2c              CMP      r2,#0x2c              ;1441
0005c6  d10c              BNE      |L10.1506|
0005c8  2200              MOVS     r2,#0                 ;1443
                  |L10.1482|
0005ca  5c6c              LDRB     r4,[r5,r1]            ;1445
0005cc  eb030383          ADD      r3,r3,r3,LSL #2       ;1445
0005d0  1c49              ADDS     r1,r1,#1              ;1445
0005d2  1c52              ADDS     r2,r2,#1              ;1445
0005d4  eb060343          ADD      r3,r6,r3,LSL #1       ;1445
0005d8  b2d2              UXTB     r2,r2                 ;1443
0005da  4423              ADD      r3,r3,r4              ;1445
0005dc  b289              UXTH     r1,r1                 ;1445
0005de  2a05              CMP      r2,#5                 ;1443
0005e0  d3f3              BCC      |L10.1482|
                  |L10.1506|
0005e2  f8c03080          STR      r3,[r0,#0x80]         ;1448  ; Para
0005e6  5c6b              LDRB     r3,[r5,r1]            ;1451
0005e8  1c49              ADDS     r1,r1,#1              ;1451
0005ea  2200              MOVS     r2,#0                 ;1449
0005ec  b289              UXTH     r1,r1                 ;1451
0005ee  2b2c              CMP      r3,#0x2c              ;1451
0005f0  d10c              BNE      |L10.1548|
0005f2  2300              MOVS     r3,#0                 ;1453
                  |L10.1524|
0005f4  5c6c              LDRB     r4,[r5,r1]            ;1455
0005f6  eb020282          ADD      r2,r2,r2,LSL #2       ;1455
0005fa  1c49              ADDS     r1,r1,#1              ;1455
0005fc  1c5b              ADDS     r3,r3,#1              ;1455
0005fe  eb060242          ADD      r2,r6,r2,LSL #1       ;1455
000602  b2db              UXTB     r3,r3                 ;1453
000604  4422              ADD      r2,r2,r4              ;1455
000606  b289              UXTH     r1,r1                 ;1455
000608  2b03              CMP      r3,#3                 ;1453
00060a  d3f3              BCC      |L10.1524|
                  |L10.1548|
00060c  f8802084          STRB     r2,[r0,#0x84]         ;1458
000610  5c6a              LDRB     r2,[r5,r1]            ;1461
000612  1c49              ADDS     r1,r1,#1              ;1461
000614  2300              MOVS     r3,#0                 ;1459
000616  b289              UXTH     r1,r1                 ;1461
000618  2a2c              CMP      r2,#0x2c              ;1461
00061a  d10c              BNE      |L10.1590|
00061c  2200              MOVS     r2,#0                 ;1463
                  |L10.1566|
00061e  5c6c              LDRB     r4,[r5,r1]            ;1465
000620  eb030383          ADD      r3,r3,r3,LSL #2       ;1465
000624  1c49              ADDS     r1,r1,#1              ;1465
000626  1c52              ADDS     r2,r2,#1              ;1465
000628  eb060343          ADD      r3,r6,r3,LSL #1       ;1465
00062c  b2d2              UXTB     r2,r2                 ;1463
00062e  4423              ADD      r3,r3,r4              ;1465
000630  b289              UXTH     r1,r1                 ;1465
000632  2a03              CMP      r2,#3                 ;1463
000634  d3f3              BCC      |L10.1566|
                  |L10.1590|
000636  4af7              LDR      r2,|L10.2580|
000638  7954              LDRB     r4,[r2,#5]            ;1468  ; MODE
00063a  b904              CBNZ     r4,|L10.1598|
00063c  6183              STR      r3,[r0,#0x18]         ;1470  ; Para
                  |L10.1598|
00063e  5c6c              LDRB     r4,[r5,r1]            ;1475
000640  1c49              ADDS     r1,r1,#1              ;1475
000642  2300              MOVS     r3,#0                 ;1472
000644  b289              UXTH     r1,r1                 ;1475
000646  2c2c              CMP      r4,#0x2c              ;1475
000648  d10c              BNE      |L10.1636|
00064a  2400              MOVS     r4,#0                 ;1477
                  |L10.1612|
00064c  5c6f              LDRB     r7,[r5,r1]            ;1479
00064e  eb030383          ADD      r3,r3,r3,LSL #2       ;1479
000652  1c49              ADDS     r1,r1,#1              ;1479
000654  1c64              ADDS     r4,r4,#1              ;1479
000656  eb060343          ADD      r3,r6,r3,LSL #1       ;1479
00065a  b2e4              UXTB     r4,r4                 ;1477
00065c  443b              ADD      r3,r3,r7              ;1479
00065e  b289              UXTH     r1,r1                 ;1479
000660  2c03              CMP      r4,#3                 ;1477
000662  d3f3              BCC      |L10.1612|
                  |L10.1636|
000664  71d3              STRB     r3,[r2,#7]            ;1482
000666  5c6c              LDRB     r4,[r5,r1]            ;1485
000668  1c49              ADDS     r1,r1,#1              ;1485
00066a  2300              MOVS     r3,#0                 ;1483
00066c  b289              UXTH     r1,r1                 ;1485
00066e  2c2c              CMP      r4,#0x2c              ;1485
000670  d10c              BNE      |L10.1676|
000672  2400              MOVS     r4,#0                 ;1487
                  |L10.1652|
000674  5c6f              LDRB     r7,[r5,r1]            ;1489
000676  eb030383          ADD      r3,r3,r3,LSL #2       ;1489
00067a  1c49              ADDS     r1,r1,#1              ;1489
00067c  1c64              ADDS     r4,r4,#1              ;1489
00067e  eb060343          ADD      r3,r6,r3,LSL #1       ;1489
000682  b2e4              UXTB     r4,r4                 ;1487
000684  443b              ADD      r3,r3,r7              ;1489
000686  b289              UXTH     r1,r1                 ;1489
000688  2c03              CMP      r4,#3                 ;1487
00068a  d3f3              BCC      |L10.1652|
                  |L10.1676|
00068c  f8803052          STRB     r3,[r0,#0x52]         ;1492
000690  5c6f              LDRB     r7,[r5,r1]            ;1495
000692  1c49              ADDS     r1,r1,#1              ;1495
000694  2300              MOVS     r3,#0                 ;1493
000696  b28c              UXTH     r4,r1                 ;1495
000698  2f2c              CMP      r7,#0x2c              ;1495
00069a  d10c              BNE      |L10.1718|
00069c  2100              MOVS     r1,#0                 ;1497
                  |L10.1694|
00069e  5d2f              LDRB     r7,[r5,r4]            ;1499
0006a0  eb030383          ADD      r3,r3,r3,LSL #2       ;1499
0006a4  1c64              ADDS     r4,r4,#1              ;1499
0006a6  1c49              ADDS     r1,r1,#1              ;1499
0006a8  eb060343          ADD      r3,r6,r3,LSL #1       ;1499
0006ac  b2c9              UXTB     r1,r1                 ;1497
0006ae  443b              ADD      r3,r3,r7              ;1499
0006b0  b2a4              UXTH     r4,r4                 ;1499
0006b2  2906              CMP      r1,#6                 ;1497
0006b4  d3f3              BCC      |L10.1694|
                  |L10.1718|
0006b6  eb030183          ADD      r1,r3,r3,LSL #2       ;1502
0006ba  0049              LSLS     r1,r1,#1              ;1502
0006bc  6641              STR      r1,[r0,#0x64]         ;1502  ; Para
0006be  7950              LDRB     r0,[r2,#5]            ;1505  ; MODE
                  |L10.1728|
0006c0  f7fffffe          BL       MODE_PARASET
0006c4  e368              B        |L10.3480|
                  |L10.1734|
0006c6  5d29              LDRB     r1,[r5,r4]            ;1512
0006c8  293f              CMP      r1,#0x3f              ;1512
0006ca  d07c              BEQ      |L10.1990|
0006cc  2c0b              CMP      r4,#0xb               ;1521
0006ce  d10d              BNE      |L10.1772|
0006d0  2000              MOVS     r0,#0                 ;1523
0006d2  4607              MOV      r7,r0                 ;1523
                  |L10.1748|
0006d4  5d29              LDRB     r1,[r5,r4]            ;1525
0006d6  eb070287          ADD      r2,r7,r7,LSL #2       ;1525
0006da  eb060242          ADD      r2,r6,r2,LSL #1       ;1525
0006de  1c64              ADDS     r4,r4,#1              ;1525
0006e0  1c40              ADDS     r0,r0,#1              ;1525
0006e2  188f              ADDS     r7,r1,r2              ;1525
0006e4  b2c0              UXTB     r0,r0                 ;1523
0006e6  b2a4              UXTH     r4,r4                 ;1525
0006e8  2802              CMP      r0,#2                 ;1523
0006ea  d3f3              BCC      |L10.1748|
                  |L10.1772|
0006ec  f8df9324          LDR      r9,|L10.2580|
0006f0  f8897005          STRB     r7,[r9,#5]            ;1528
0006f4  f8990005          LDRB     r0,[r9,#5]            ;1531  ; MODE
0006f8  2700              MOVS     r7,#0                 ;1529
0006fa  f8df831c          LDR      r8,|L10.2584|
0006fe  f6432198          MOV      r1,#0x3a98            ;1554
000702  b1b8              CBZ      r0,|L10.1844|
000704  f8990005          LDRB     r0,[r9,#5]            ;1575  ; MODE
000708  464a              MOV      r2,r9                 ;1575
00070a  2801              CMP      r0,#1                 ;1575
00070c  d05c              BEQ      |L10.1992|
00070e  7950              LDRB     r0,[r2,#5]            ;1604  ; MODE
000710  2802              CMP      r0,#2                 ;1604
000712  d07d              BEQ      |L10.2064|
000714  f8990005          LDRB     r0,[r9,#5]            ;1640  ; MODE
000718  2803              CMP      r0,#3                 ;1640
00071a  d07a              BEQ      |L10.2066|
00071c  7950              LDRB     r0,[r2,#5]            ;1672  ; MODE
00071e  2804              CMP      r0,#4                 ;1672
000720  d078              BEQ      |L10.2068|
000722  f8991005          LDRB     r1,[r9,#5]            ;1715  ; MODE
000726  4648              MOV      r0,r9                 ;1715
000728  2905              CMP      r1,#5                 ;1715
00072a  d074              BEQ      |L10.2070|
00072c  7941              LDRB     r1,[r0,#5]            ;1746  ; MODE
00072e  2906              CMP      r1,#6                 ;1746
000730  d072              BEQ      |L10.2072|
000732  e1df              B        |L10.2804|
                  |L10.1844|
000734  5d2a              LDRB     r2,[r5,r4]            ;1533
000736  1c64              ADDS     r4,r4,#1              ;1533
000738  b2a0              UXTH     r0,r4                 ;1533
00073a  2a2c              CMP      r2,#0x2c              ;1533
00073c  d106              BNE      |L10.1868|
00073e  2200              MOVS     r2,#0                 ;1535
                  |L10.1856|
000740  1c40              ADDS     r0,r0,#1              ;1535
000742  1c52              ADDS     r2,r2,#1              ;1537
000744  b2d2              UXTB     r2,r2                 ;1535
000746  b280              UXTH     r0,r0                 ;1537
000748  2a06              CMP      r2,#6                 ;1535
00074a  d3f9              BCC      |L10.1856|
                  |L10.1868|
00074c  5c2b              LDRB     r3,[r5,r0]            ;1543
00074e  1c40              ADDS     r0,r0,#1              ;1543
000750  2200              MOVS     r2,#0                 ;1541
000752  b284              UXTH     r4,r0                 ;1543
000754  2b2c              CMP      r3,#0x2c              ;1543
000756  d10c              BNE      |L10.1906|
000758  2000              MOVS     r0,#0                 ;1545
                  |L10.1882|
00075a  5d2b              LDRB     r3,[r5,r4]            ;1547
00075c  eb020282          ADD      r2,r2,r2,LSL #2       ;1547
000760  1c64              ADDS     r4,r4,#1              ;1547
000762  1c40              ADDS     r0,r0,#1              ;1547
000764  eb060242          ADD      r2,r6,r2,LSL #1       ;1547
000768  b2c0              UXTB     r0,r0                 ;1545
00076a  441a              ADD      r2,r2,r3              ;1547
00076c  b2a4              UXTH     r4,r4                 ;1547
00076e  2806              CMP      r0,#6                 ;1545
000770  d3f3              BCC      |L10.1882|
                  |L10.1906|
000772  f8ca2014          STR      r2,[r10,#0x14]        ;1550  ; Para
000776  f8da0014          LDR      r0,[r10,#0x14]        ;1554  ; Para
00077a  2700              MOVS     r7,#0                 ;1551
00077c  4288              CMP      r0,r1                 ;1554
00077e  d907              BLS      |L10.1936|
000780  2101              MOVS     r1,#1                 ;1556
000782  f8c81020          STR      r1,[r8,#0x20]         ;1556  ; Run_Control
000786  02c9              LSLS     r1,r1,#11             ;1557
000788  48a4              LDR      r0,|L10.2588|
00078a  f7fffffe          BL       GPIO_ResetBits
00078e  e007              B        |L10.1952|
                  |L10.1936|
000790  2000              MOVS     r0,#0                 ;1559
000792  f8c80020          STR      r0,[r8,#0x20]         ;1559  ; Run_Control
000796  f44f6100          MOV      r1,#0x800             ;1560
00079a  48a0              LDR      r0,|L10.2588|
00079c  f7fffffe          BL       GPIO_SetBits
                  |L10.1952|
0007a0  5d28              LDRB     r0,[r5,r4]            ;1562
0007a2  1c64              ADDS     r4,r4,#1              ;1562
0007a4  b2a4              UXTH     r4,r4                 ;1562
0007a6  282c              CMP      r0,#0x2c              ;1562
0007a8  d10c              BNE      |L10.1988|
0007aa  2000              MOVS     r0,#0                 ;1564
                  |L10.1964|
0007ac  5d29              LDRB     r1,[r5,r4]            ;1566
0007ae  eb070287          ADD      r2,r7,r7,LSL #2       ;1566
0007b2  eb060242          ADD      r2,r6,r2,LSL #1       ;1566
0007b6  1c64              ADDS     r4,r4,#1              ;1566
0007b8  188f              ADDS     r7,r1,r2              ;1566
0007ba  1c40              ADDS     r0,r0,#1              ;1566
0007bc  b2a4              UXTH     r4,r4                 ;1566
0007be  f01000ff          ANDS     r0,r0,#0xff           ;1564
0007c2  d0f3              BEQ      |L10.1964|
                  |L10.1988|
0007c4  e119              B        |L10.2554|
                  |L10.1990|
0007c6  e21c              B        |L10.3074|
                  |L10.1992|
0007c8  5d29              LDRB     r1,[r5,r4]            ;1576
0007ca  1c64              ADDS     r4,r4,#1              ;1576
0007cc  b2a0              UXTH     r0,r4                 ;1576
0007ce  292c              CMP      r1,#0x2c              ;1576
0007d0  d10c              BNE      |L10.2028|
0007d2  2100              MOVS     r1,#0                 ;1578
                  |L10.2004|
0007d4  5c2b              LDRB     r3,[r5,r0]            ;1580
0007d6  eb070487          ADD      r4,r7,r7,LSL #2       ;1580
0007da  eb060444          ADD      r4,r6,r4,LSL #1       ;1580
0007de  1c40              ADDS     r0,r0,#1              ;1580
0007e0  1c49              ADDS     r1,r1,#1              ;1580
0007e2  191f              ADDS     r7,r3,r4              ;1580
0007e4  b2c9              UXTB     r1,r1                 ;1578
0007e6  b280              UXTH     r0,r0                 ;1580
0007e8  2906              CMP      r1,#6                 ;1578
0007ea  d3f3              BCC      |L10.2004|
                  |L10.2028|
0007ec  4654              MOV      r4,r10                ;1583
0007ee  f8ca706c          STR      r7,[r10,#0x6c]        ;1583  ; Para
0007f2  5c2b              LDRB     r3,[r5,r0]            ;1586
0007f4  1c40              ADDS     r0,r0,#1              ;1586
0007f6  2100              MOVS     r1,#0                 ;1584
0007f8  b280              UXTH     r0,r0                 ;1586
0007fa  2b2c              CMP      r3,#0x2c              ;1586
0007fc  d112              BNE      |L10.2084|
0007fe  2300              MOVS     r3,#0                 ;1588
                  |L10.2048|
000800  5c2f              LDRB     r7,[r5,r0]            ;1590
000802  eb010181          ADD      r1,r1,r1,LSL #2       ;1590
000806  eb060141          ADD      r1,r6,r1,LSL #1       ;1590
00080a  4439              ADD      r1,r1,r7              ;1590
00080c  1c40              ADDS     r0,r0,#1              ;1590
00080e  e004              B        |L10.2074|
                  |L10.2064|
000810  e01e              B        |L10.2128|
                  |L10.2066|
000812  e06b              B        |L10.2284|
                  |L10.2068|
000814  e0a9              B        |L10.2410|
                  |L10.2070|
000816  e106              B        |L10.2598|
                  |L10.2072|
000818  e138              B        |L10.2700|
                  |L10.2074|
00081a  1c5b              ADDS     r3,r3,#1              ;1590
00081c  b2db              UXTB     r3,r3                 ;1588
00081e  b280              UXTH     r0,r0                 ;1590
000820  2b06              CMP      r3,#6                 ;1588
000822  d3ed              BCC      |L10.2048|
                  |L10.2084|
000824  f8a41070          STRH     r1,[r4,#0x70]         ;1593
000828  5c2b              LDRB     r3,[r5,r0]            ;1596
00082a  1c40              ADDS     r0,r0,#1              ;1596
00082c  2100              MOVS     r1,#0                 ;1594
00082e  b284              UXTH     r4,r0                 ;1596
000830  2b2c              CMP      r3,#0x2c              ;1596
000832  d10c              BNE      |L10.2126|
000834  2000              MOVS     r0,#0                 ;1598
                  |L10.2102|
000836  5d2b              LDRB     r3,[r5,r4]            ;1600
000838  1c64              ADDS     r4,r4,#1              ;1600
00083a  eb010181          ADD      r1,r1,r1,LSL #2       ;1600
00083e  eb060141          ADD      r1,r6,r1,LSL #1       ;1600
000842  1c40              ADDS     r0,r0,#1              ;1600
000844  4419              ADD      r1,r1,r3              ;1600
000846  b2a4              UXTH     r4,r4                 ;1600
000848  f01000ff          ANDS     r0,r0,#0xff           ;1598
00084c  d0f3              BEQ      |L10.2102|
                  |L10.2126|
00084e  e08a              B        |L10.2406|
                  |L10.2128|
000850  2001              MOVS     r0,#1                 ;1605
000852  f8c80020          STR      r0,[r8,#0x20]         ;1605  ; Run_Control
000856  02c1              LSLS     r1,r0,#11             ;1606
000858  4870              LDR      r0,|L10.2588|
00085a  f7fffffe          BL       GPIO_ResetBits
00085e  5d29              LDRB     r1,[r5,r4]            ;1607
000860  1c64              ADDS     r4,r4,#1              ;1607
000862  b2a0              UXTH     r0,r4                 ;1607
000864  292c              CMP      r1,#0x2c              ;1607
000866  d10c              BNE      |L10.2178|
000868  2100              MOVS     r1,#0                 ;1609
                  |L10.2154|
00086a  5c2a              LDRB     r2,[r5,r0]            ;1611
00086c  eb070387          ADD      r3,r7,r7,LSL #2       ;1611
000870  eb060343          ADD      r3,r6,r3,LSL #1       ;1611
000874  1c40              ADDS     r0,r0,#1              ;1611
000876  1c49              ADDS     r1,r1,#1              ;1611
000878  18d7              ADDS     r7,r2,r3              ;1611
00087a  b2c9              UXTB     r1,r1                 ;1609
00087c  b280              UXTH     r0,r0                 ;1611
00087e  2906              CMP      r1,#6                 ;1609
000880  d3f3              BCC      |L10.2154|
                  |L10.2178|
000882  4653              MOV      r3,r10                ;1614
000884  f8ca7044          STR      r7,[r10,#0x44]        ;1614  ; Para
000888  5c2a              LDRB     r2,[r5,r0]            ;1617
00088a  1c40              ADDS     r0,r0,#1              ;1617
00088c  2100              MOVS     r1,#0                 ;1615
00088e  b280              UXTH     r0,r0                 ;1617
000890  2a2c              CMP      r2,#0x2c              ;1617
000892  d10c              BNE      |L10.2222|
000894  2200              MOVS     r2,#0                 ;1619
                  |L10.2198|
000896  5c2c              LDRB     r4,[r5,r0]            ;1621
000898  eb010181          ADD      r1,r1,r1,LSL #2       ;1621
00089c  1c40              ADDS     r0,r0,#1              ;1621
00089e  1c52              ADDS     r2,r2,#1              ;1621
0008a0  eb060141          ADD      r1,r6,r1,LSL #1       ;1621
0008a4  b2d2              UXTB     r2,r2                 ;1619
0008a6  4421              ADD      r1,r1,r4              ;1621
0008a8  b280              UXTH     r0,r0                 ;1621
0008aa  2a06              CMP      r2,#6                 ;1619
0008ac  d3f3              BCC      |L10.2198|
                  |L10.2222|
0008ae  f8a31048          STRH     r1,[r3,#0x48]         ;1624
0008b2  5c2a              LDRB     r2,[r5,r0]            ;1627
0008b4  1c40              ADDS     r0,r0,#1              ;1627
0008b6  2100              MOVS     r1,#0                 ;1625
0008b8  b284              UXTH     r4,r0                 ;1627
0008ba  2a2c              CMP      r2,#0x2c              ;1627
0008bc  d10c              BNE      |L10.2264|
0008be  2000              MOVS     r0,#0                 ;1629
                  |L10.2240|
0008c0  5d2a              LDRB     r2,[r5,r4]            ;1631
0008c2  1c64              ADDS     r4,r4,#1              ;1631
0008c4  eb010181          ADD      r1,r1,r1,LSL #2       ;1631
0008c8  eb060141          ADD      r1,r6,r1,LSL #1       ;1631
0008cc  1c40              ADDS     r0,r0,#1              ;1631
0008ce  4411              ADD      r1,r1,r2              ;1631
0008d0  b2a4              UXTH     r4,r4                 ;1631
0008d2  f01000ff          ANDS     r0,r0,#0xff           ;1629
0008d6  d0f3              BEQ      |L10.2240|
                  |L10.2264|
0008d8  f8891006          STRB     r1,[r9,#6]            ;1634
0008dc  f8990006          LDRB     r0,[r9,#6]            ;1636  ; mainswitch
0008e0  2801              CMP      r0,#1                 ;1636
0008e2  d102              BNE      |L10.2282|
0008e4  494e              LDR      r1,|L10.2592|
0008e6  2000              MOVS     r0,#0                 ;1638
0008e8  7008              STRB     r0,[r1,#0]            ;1638
                  |L10.2282|
0008ea  e103              B        |L10.2804|
                  |L10.2284|
0008ec  5d29              LDRB     r1,[r5,r4]            ;1641
0008ee  1c64              ADDS     r4,r4,#1              ;1641
0008f0  b2a0              UXTH     r0,r4                 ;1641
0008f2  292c              CMP      r1,#0x2c              ;1641
0008f4  d10c              BNE      |L10.2320|
0008f6  2100              MOVS     r1,#0                 ;1643
                  |L10.2296|
0008f8  5c2b              LDRB     r3,[r5,r0]            ;1645
0008fa  eb070487          ADD      r4,r7,r7,LSL #2       ;1645
0008fe  eb060444          ADD      r4,r6,r4,LSL #1       ;1645
000902  1c40              ADDS     r0,r0,#1              ;1645
000904  1c49              ADDS     r1,r1,#1              ;1645
000906  191f              ADDS     r7,r3,r4              ;1645
000908  b2c9              UXTB     r1,r1                 ;1643
00090a  b280              UXTH     r0,r0                 ;1645
00090c  2906              CMP      r1,#6                 ;1643
00090e  d3f3              BCC      |L10.2296|
                  |L10.2320|
000910  4654              MOV      r4,r10                ;1648
000912  f8ca706c          STR      r7,[r10,#0x6c]        ;1648  ; Para
000916  5c2b              LDRB     r3,[r5,r0]            ;1652
000918  1c40              ADDS     r0,r0,#1              ;1652
00091a  2100              MOVS     r1,#0                 ;1649
00091c  b280              UXTH     r0,r0                 ;1652
00091e  2b2c              CMP      r3,#0x2c              ;1652
000920  d10c              BNE      |L10.2364|
000922  2300              MOVS     r3,#0                 ;1654
                  |L10.2340|
000924  5c2f              LDRB     r7,[r5,r0]            ;1656
000926  eb010181          ADD      r1,r1,r1,LSL #2       ;1656
00092a  1c40              ADDS     r0,r0,#1              ;1656
00092c  1c5b              ADDS     r3,r3,#1              ;1656
00092e  eb060141          ADD      r1,r6,r1,LSL #1       ;1656
000932  b2db              UXTB     r3,r3                 ;1654
000934  4439              ADD      r1,r1,r7              ;1656
000936  b280              UXTH     r0,r0                 ;1656
000938  2b06              CMP      r3,#6                 ;1654
00093a  d3f3              BCC      |L10.2340|
                  |L10.2364|
00093c  f8a41070          STRH     r1,[r4,#0x70]         ;1659
000940  5c2b              LDRB     r3,[r5,r0]            ;1662
000942  1c40              ADDS     r0,r0,#1              ;1662
000944  2100              MOVS     r1,#0                 ;1660
000946  b284              UXTH     r4,r0                 ;1662
000948  2b2c              CMP      r3,#0x2c              ;1662
00094a  d10c              BNE      |L10.2406|
00094c  2000              MOVS     r0,#0                 ;1664
                  |L10.2382|
00094e  5d2b              LDRB     r3,[r5,r4]            ;1666
000950  1c64              ADDS     r4,r4,#1              ;1666
000952  eb010181          ADD      r1,r1,r1,LSL #2       ;1666
000956  eb060141          ADD      r1,r6,r1,LSL #1       ;1666
00095a  1c40              ADDS     r0,r0,#1              ;1666
00095c  4419              ADD      r1,r1,r3              ;1666
00095e  b2a4              UXTH     r4,r4                 ;1666
000960  f01000ff          ANDS     r0,r0,#0xff           ;1664
000964  d0f3              BEQ      |L10.2382|
                  |L10.2406|
000966  7191              STRB     r1,[r2,#6]            ;1669
000968  e0c4              B        |L10.2804|
                  |L10.2410|
00096a  5d2a              LDRB     r2,[r5,r4]            ;1673
00096c  1c64              ADDS     r4,r4,#1              ;1673
00096e  b2a0              UXTH     r0,r4                 ;1673
000970  2a2c              CMP      r2,#0x2c              ;1673
000972  d106              BNE      |L10.2434|
000974  2200              MOVS     r2,#0                 ;1675
                  |L10.2422|
000976  1c40              ADDS     r0,r0,#1              ;1675
000978  1c52              ADDS     r2,r2,#1              ;1677
00097a  b2d2              UXTB     r2,r2                 ;1675
00097c  b280              UXTH     r0,r0                 ;1677
00097e  2a06              CMP      r2,#6                 ;1675
000980  d3f9              BCC      |L10.2422|
                  |L10.2434|
000982  5c2b              LDRB     r3,[r5,r0]            ;1683
000984  1c40              ADDS     r0,r0,#1              ;1683
000986  2200              MOVS     r2,#0                 ;1681
000988  b284              UXTH     r4,r0                 ;1683
00098a  2b2c              CMP      r3,#0x2c              ;1683
00098c  d10c              BNE      |L10.2472|
00098e  2000              MOVS     r0,#0                 ;1685
                  |L10.2448|
000990  5d2b              LDRB     r3,[r5,r4]            ;1687
000992  eb020282          ADD      r2,r2,r2,LSL #2       ;1687
000996  1c64              ADDS     r4,r4,#1              ;1687
000998  1c40              ADDS     r0,r0,#1              ;1687
00099a  eb060242          ADD      r2,r6,r2,LSL #1       ;1687
00099e  b2c0              UXTB     r0,r0                 ;1685
0009a0  441a              ADD      r2,r2,r3              ;1687
0009a2  b2a4              UXTH     r4,r4                 ;1687
0009a4  2806              CMP      r0,#6                 ;1685
0009a6  d3f3              BCC      |L10.2448|
                  |L10.2472|
0009a8  f8ca2014          STR      r2,[r10,#0x14]        ;1690  ; Para
0009ac  f8da0014          LDR      r0,[r10,#0x14]        ;1694  ; Para
0009b0  2700              MOVS     r7,#0                 ;1691
0009b2  4288              CMP      r0,r1                 ;1694
0009b4  d907              BLS      |L10.2502|
0009b6  2101              MOVS     r1,#1                 ;1696
0009b8  f8c81020          STR      r1,[r8,#0x20]         ;1696  ; Run_Control
0009bc  02c9              LSLS     r1,r1,#11             ;1697
0009be  4817              LDR      r0,|L10.2588|
0009c0  f7fffffe          BL       GPIO_ResetBits
0009c4  e007              B        |L10.2518|
                  |L10.2502|
0009c6  2000              MOVS     r0,#0                 ;1699
0009c8  f8c80020          STR      r0,[r8,#0x20]         ;1699  ; Run_Control
0009cc  f44f6100          MOV      r1,#0x800             ;1700
0009d0  4812              LDR      r0,|L10.2588|
0009d2  f7fffffe          BL       GPIO_SetBits
                  |L10.2518|
0009d6  5d28              LDRB     r0,[r5,r4]            ;1702
0009d8  1c64              ADDS     r4,r4,#1              ;1702
0009da  b2a4              UXTH     r4,r4                 ;1702
0009dc  282c              CMP      r0,#0x2c              ;1702
0009de  d10c              BNE      |L10.2554|
0009e0  2000              MOVS     r0,#0                 ;1704
                  |L10.2530|
0009e2  5d29              LDRB     r1,[r5,r4]            ;1706
0009e4  eb070287          ADD      r2,r7,r7,LSL #2       ;1706
0009e8  eb060242          ADD      r2,r6,r2,LSL #1       ;1706
0009ec  1c64              ADDS     r4,r4,#1              ;1706
0009ee  188f              ADDS     r7,r1,r2              ;1706
0009f0  1c40              ADDS     r0,r0,#1              ;1706
0009f2  b2a4              UXTH     r4,r4                 ;1706
0009f4  f01000ff          ANDS     r0,r0,#0xff           ;1704
0009f8  d0f3              BEQ      |L10.2530|
                  |L10.2554|
0009fa  f8897006          STRB     r7,[r9,#6]            ;1709
0009fe  f8990006          LDRB     r0,[r9,#6]            ;1710  ; mainswitch
000a02  bbe8              CBNZ     r0,|L10.2688|
000a04  2001              MOVS     r0,#1                 ;1712
000a06  f8c80020          STR      r0,[r8,#0x20]         ;1712  ; Run_Control
000a0a  02c1              LSLS     r1,r0,#11             ;1713
000a0c  4803              LDR      r0,|L10.2588|
000a0e  f7fffffe          BL       GPIO_ResetBits
000a12  e06f              B        |L10.2804|
                  |L10.2580|
                          DCD      ||.data||
                  |L10.2584|
                          DCD      Run_Control
                  |L10.2588|
                          DCD      0x40020800
                  |L10.2592|
                          DCD      finishflag
                  |L10.2596|
000a24  e161              B        |L10.3306|
                  |L10.2598|
000a26  5d2a              LDRB     r2,[r5,r4]            ;1716
000a28  1c64              ADDS     r4,r4,#1              ;1716
000a2a  b2a1              UXTH     r1,r4                 ;1716
000a2c  2a2c              CMP      r2,#0x2c              ;1716
000a2e  d106              BNE      |L10.2622|
000a30  2200              MOVS     r2,#0                 ;1718
                  |L10.2610|
000a32  1c49              ADDS     r1,r1,#1              ;1718
000a34  1c52              ADDS     r2,r2,#1              ;1720
000a36  b2d2              UXTB     r2,r2                 ;1718
000a38  b289              UXTH     r1,r1                 ;1720
000a3a  2a06              CMP      r2,#6                 ;1718
000a3c  d3f9              BCC      |L10.2610|
                  |L10.2622|
000a3e  5c6a              LDRB     r2,[r5,r1]            ;1725
000a40  1c49              ADDS     r1,r1,#1              ;1725
000a42  b289              UXTH     r1,r1                 ;1725
000a44  2a2c              CMP      r2,#0x2c              ;1725
000a46  d106              BNE      |L10.2646|
000a48  2200              MOVS     r2,#0                 ;1727
                  |L10.2634|
000a4a  1c49              ADDS     r1,r1,#1              ;1727
000a4c  1c52              ADDS     r2,r2,#1              ;1729
000a4e  b2d2              UXTB     r2,r2                 ;1727
000a50  b289              UXTH     r1,r1                 ;1729
000a52  2a06              CMP      r2,#6                 ;1727
000a54  d3f9              BCC      |L10.2634|
                  |L10.2646|
000a56  5c6b              LDRB     r3,[r5,r1]            ;1734
000a58  1c49              ADDS     r1,r1,#1              ;1734
000a5a  2200              MOVS     r2,#0                 ;1732
000a5c  b28c              UXTH     r4,r1                 ;1734
000a5e  2b2c              CMP      r3,#0x2c              ;1734
000a60  d10c              BNE      |L10.2684|
000a62  2100              MOVS     r1,#0                 ;1736
                  |L10.2660|
000a64  5d2b              LDRB     r3,[r5,r4]            ;1738
000a66  1c64              ADDS     r4,r4,#1              ;1738
000a68  eb020282          ADD      r2,r2,r2,LSL #2       ;1738
000a6c  eb060242          ADD      r2,r6,r2,LSL #1       ;1738
000a70  1c49              ADDS     r1,r1,#1              ;1738
000a72  441a              ADD      r2,r2,r3              ;1738
000a74  b2a4              UXTH     r4,r4                 ;1738
000a76  f01101ff          ANDS     r1,r1,#0xff           ;1736
000a7a  d0f3              BEQ      |L10.2660|
                  |L10.2684|
000a7c  7182              STRB     r2,[r0,#6]            ;1741
000a7e  e000              B        |L10.2690|
                  |L10.2688|
000a80  e038              B        |L10.2804|
                  |L10.2690|
000a82  7981              LDRB     r1,[r0,#6]            ;1742  ; mainswitch
000a84  bbb1              CBNZ     r1,|L10.2804|
000a86  2100              MOVS     r1,#0                 ;1744
000a88  7181              STRB     r1,[r0,#6]            ;1744
000a8a  e033              B        |L10.2804|
                  |L10.2700|
000a8c  5d2a              LDRB     r2,[r5,r4]            ;1747
000a8e  1c64              ADDS     r4,r4,#1              ;1747
000a90  b2a1              UXTH     r1,r4                 ;1747
000a92  2a2c              CMP      r2,#0x2c              ;1747
000a94  d106              BNE      |L10.2724|
000a96  2200              MOVS     r2,#0                 ;1749
                  |L10.2712|
000a98  1c49              ADDS     r1,r1,#1              ;1749
000a9a  1c52              ADDS     r2,r2,#1              ;1751
000a9c  b2d2              UXTB     r2,r2                 ;1749
000a9e  b289              UXTH     r1,r1                 ;1751
000aa0  2a06              CMP      r2,#6                 ;1749
000aa2  d3f9              BCC      |L10.2712|
                  |L10.2724|
000aa4  5c6a              LDRB     r2,[r5,r1]            ;1756
000aa6  1c49              ADDS     r1,r1,#1              ;1756
000aa8  b289              UXTH     r1,r1                 ;1756
000aaa  2a2c              CMP      r2,#0x2c              ;1756
000aac  d10e              BNE      |L10.2764|
000aae  2200              MOVS     r2,#0                 ;1758
                  |L10.2736|
000ab0  1c49              ADDS     r1,r1,#1              ;1758
000ab2  1c52              ADDS     r2,r2,#1              ;1760
000ab4  b2d2              UXTB     r2,r2                 ;1758
000ab6  b289              UXTH     r1,r1                 ;1760
000ab8  2a06              CMP      r2,#6                 ;1758
000aba  e006              B        |L10.2762|
                  |L10.2748|
000abc  e150              B        |L10.3424|
                  |L10.2750|
000abe  e0f4              B        |L10.3242|
                  |L10.2752|
000ac0  e0a6              B        |L10.3088|
                  |L10.2754|
000ac2  e01e              B        |L10.2818|
                  |L10.2756|
000ac4  e085              B        |L10.3026|
                  |L10.2758|
000ac6  e10f              B        |L10.3304|
                  |L10.2760|
000ac8  e166              B        |L10.3480|
                  |L10.2762|
000aca  d3f1              BCC      |L10.2736|
                  |L10.2764|
000acc  5c6b              LDRB     r3,[r5,r1]            ;1765
000ace  1c49              ADDS     r1,r1,#1              ;1765
000ad0  2200              MOVS     r2,#0                 ;1763
000ad2  b28c              UXTH     r4,r1                 ;1765
000ad4  2b2c              CMP      r3,#0x2c              ;1765
000ad6  d10c              BNE      |L10.2802|
000ad8  2100              MOVS     r1,#0                 ;1767
                  |L10.2778|
000ada  5d2b              LDRB     r3,[r5,r4]            ;1769
000adc  1c64              ADDS     r4,r4,#1              ;1769
000ade  eb020282          ADD      r2,r2,r2,LSL #2       ;1769
000ae2  eb060242          ADD      r2,r6,r2,LSL #1       ;1769
000ae6  1c49              ADDS     r1,r1,#1              ;1769
000ae8  441a              ADD      r2,r2,r3              ;1769
000aea  b2a4              UXTH     r4,r4                 ;1769
000aec  f01101ff          ANDS     r1,r1,#0xff           ;1767
000af0  d0f3              BEQ      |L10.2778|
                  |L10.2802|
000af2  7182              STRB     r2,[r0,#6]            ;1772
                  |L10.2804|
000af4  f7fffffe          BL       Off_GPOI_ResetSet
000af8  f8990006          LDRB     r0,[r9,#6]            ;1778  ; mainswitch
000afc  f7fffffe          BL       LIST_ONOFF
000b00  e14a              B        |L10.3480|
                  |L10.2818|
000b02  5d28              LDRB     r0,[r5,r4]            ;1785
000b04  2309              MOVS     r3,#9                 ;1784
000b06  283f              CMP      r0,#0x3f              ;1785
000b08  d002              BEQ      |L10.2832|
000b0a  2201              MOVS     r2,#1                 ;1794
000b0c  2100              MOVS     r1,#0                 ;1795
000b0e  e022              B        |L10.2902|
                  |L10.2832|
000b10  eeb58ac0          VCMPE.F32 s16,#0.0              ;1787
000b14  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1787
000b18  db01              BLT      |L10.2846|
000b1a  202b              MOVS     r0,#0x2b              ;1787
000b1c  e000              B        |L10.2848|
                  |L10.2846|
000b1e  202d              MOVS     r0,#0x2d              ;1787
                  |L10.2848|
000b20  5528              STRB     r0,[r5,r4]            ;1787
000b22  1c64              ADDS     r4,r4,#1              ;1787
000b24  b2a4              UXTH     r4,r4                 ;1787
000b26  ee180a10          VMOV     r0,s16                ;1788
000b2a  f7fffffe          BL       __aeabi_f2d
000b2e  ec410b10          VMOV     d0,r0,r1              ;1788
000b32  1928              ADDS     r0,r5,r4              ;1788
000b34  ec532b10          VMOV     r2,r3,d0              ;1788
000b38  a19c              ADR      r1,|L10.3500|
000b3a  f7fffffe          BL       __2sprintf
000b3e  3409              ADDS     r4,r4,#9              ;1788
000b40  e0d2              B        |L10.3304|
                  |L10.2882|
000b42  b141              CBZ      r1,|L10.2902|
000b44  2905              CMP      r1,#5                 ;1797
000b46  d006              BEQ      |L10.2902|
000b48  1860              ADDS     r0,r4,r1              ;1799
000b4a  5c28              LDRB     r0,[r5,r0]            ;1799
000b4c  f7fffffe          BL       IsDigitChar
000b50  2801              CMP      r0,#1                 ;1799
000b52  d000              BEQ      |L10.2902|
000b54  2200              MOVS     r2,#0                 ;1805
                  |L10.2902|
000b56  1c49              ADDS     r1,r1,#1              ;1805
000b58  b2c9              UXTB     r1,r1                 ;1795
000b5a  4299              CMP      r1,r3                 ;1795
000b5c  d3f1              BCC      |L10.2882|
000b5e  2a00              CMP      r2,#0                 ;1808
                  |L10.2912|
000b60  f43faa65          BEQ      |L10.46|
000b64  18e0              ADDS     r0,r4,r3              ;1808
000b66  5c28              LDRB     r0,[r5,r0]            ;1808
000b68  280d              CMP      r0,#0xd               ;1808
                  |L10.2922|
000b6a  f47faa60          BNE      |L10.46|
000b6e  2200              MOVS     r2,#0                 ;1813
000b70  4610              MOV      r0,r2                 ;1814
000b72  e00d              B        |L10.2960|
                  |L10.2932|
000b74  b160              CBZ      r0,|L10.2960|
000b76  2801              CMP      r0,#1                 ;1820
000b78  d016              BEQ      |L10.2984|
000b7a  2805              CMP      r0,#5                 ;1825
000b7c  d005              BEQ      |L10.2954|
000b7e  5d29              LDRB     r1,[r5,r4]            ;1831
000b80  eb020282          ADD      r2,r2,r2,LSL #2       ;1831
000b84  eb060242          ADD      r2,r6,r2,LSL #1       ;1831
000b88  440a              ADD      r2,r2,r1              ;1831
                  |L10.2954|
000b8a  1c64              ADDS     r4,r4,#1              ;1831
000b8c  b2a4              UXTH     r4,r4                 ;1827
000b8e  e015              B        |L10.3004|
                  |L10.2960|
000b90  5d29              LDRB     r1,[r5,r4]            ;1818
000b92  3930              SUBS     r1,r1,#0x30           ;1818
000b94  eb010181          ADD      r1,r1,r1,LSL #2       ;1818
000b98  0049              LSLS     r1,r1,#1              ;1818
000b9a  ee001a10          VMOV     s0,r1                 ;1818
000b9e  1c64              ADDS     r4,r4,#1              ;1818
000ba0  b2a4              UXTH     r4,r4                 ;1818
000ba2  eeb80ac0          VCVT.F32.S32 s0,s0                 ;1818
000ba6  e009              B        |L10.3004|
                  |L10.2984|
000ba8  5d29              LDRB     r1,[r5,r4]            ;1822
000baa  1c64              ADDS     r4,r4,#1              ;1822
000bac  3930              SUBS     r1,r1,#0x30           ;1822
000bae  ee001a90          VMOV     s1,r1                 ;1822
000bb2  b2a4              UXTH     r4,r4                 ;1822
000bb4  eef80ae0          VCVT.F32.S32 s1,s1                 ;1822
000bb8  ee300a80          VADD.F32 s0,s1,s0              ;1822
                  |L10.3004|
000bbc  1c40              ADDS     r0,r0,#1              ;1822
000bbe  b2c0              UXTB     r0,r0                 ;1814
000bc0  4298              CMP      r0,r3                 ;1814
000bc2  d3d7              BCC      |L10.2932|
000bc4  eebc0ac0          VCVT.U32.F32 s0,s0                 ;1833
000bc8  ee100a10          VMOV     r0,s0                 ;1833
000bcc  b2c1              UXTB     r1,r0                 ;1833
000bce  2000              MOVS     r0,#0                 ;1833
000bd0  e0ba              B        |L10.3400|
                  |L10.3026|
000bd2  5d29              LDRB     r1,[r5,r4]            ;1839
000bd4  2201              MOVS     r2,#1                 ;1838
000bd6  293f              CMP      r1,#0x3f              ;1839
000bd8  d013              BEQ      |L10.3074|
000bda  2100              MOVS     r1,#0                 ;1849
000bdc  4608              MOV      r0,r1                 ;1849
                  |L10.3038|
000bde  5d2b              LDRB     r3,[r5,r4]            ;1851
000be0  eb000080          ADD      r0,r0,r0,LSL #2       ;1851
000be4  1c64              ADDS     r4,r4,#1              ;1851
000be6  1c49              ADDS     r1,r1,#1              ;1851
000be8  eb060040          ADD      r0,r6,r0,LSL #1       ;1851
000bec  b2c9              UXTB     r1,r1                 ;1849
000bee  4418              ADD      r0,r0,r3              ;1851
000bf0  b2a4              UXTH     r4,r4                 ;1851
000bf2  4291              CMP      r1,r2                 ;1849
000bf4  d3f3              BCC      |L10.3038|
000bf6  2801              CMP      r0,#1                 ;1853
000bf8  f63fab5f          BHI      |L10.698|
000bfc  496d              LDR      r1,|L10.3508|
000bfe  7008              STRB     r0,[r1,#0]            ;1860
000c00  e0ca              B        |L10.3480|
                  |L10.3074|
000c02  7802              LDRB     r2,[r0,#0]            ;1841  ; C_DISCHARGE
000c04  192b              ADDS     r3,r5,r4              ;1841
000c06  f2af7194          ADR      r1,|L10.1140|
000c0a  4618              MOV      r0,r3                 ;1841
000c0c  f7ffbb65          B        |L10.730|
                  |L10.3088|
000c10  5d28              LDRB     r0,[r5,r4]            ;1873
000c12  2309              MOVS     r3,#9                 ;1872
000c14  283f              CMP      r0,#0x3f              ;1873
000c16  d06c              BEQ      |L10.3314|
000c18  2201              MOVS     r2,#1                 ;1882
000c1a  2100              MOVS     r1,#0                 ;1883
000c1c  e009              B        |L10.3122|
                  |L10.3102|
000c1e  b141              CBZ      r1,|L10.3122|
000c20  2905              CMP      r1,#5                 ;1885
000c22  d006              BEQ      |L10.3122|
000c24  1860              ADDS     r0,r4,r1              ;1887
000c26  5c28              LDRB     r0,[r5,r0]            ;1887
000c28  f7fffffe          BL       IsDigitChar
000c2c  2801              CMP      r0,#1                 ;1887
000c2e  d000              BEQ      |L10.3122|
000c30  2200              MOVS     r2,#0                 ;1893
                  |L10.3122|
000c32  1c49              ADDS     r1,r1,#1              ;1893
000c34  b2c9              UXTB     r1,r1                 ;1883
000c36  4299              CMP      r1,r3                 ;1883
000c38  d3f1              BCC      |L10.3102|
000c3a  2a00              CMP      r2,#0                 ;1896
                  |L10.3132|
000c3c  d090              BEQ      |L10.2912|
000c3e  18e0              ADDS     r0,r4,r3              ;1896
000c40  5c28              LDRB     r0,[r5,r0]            ;1896
000c42  280d              CMP      r0,#0xd               ;1896
                  |L10.3140|
000c44  d191              BNE      |L10.2922|
000c46  2200              MOVS     r2,#0                 ;1901
000c48  4610              MOV      r0,r2                 ;1902
000c4a  e00d              B        |L10.3176|
                  |L10.3148|
000c4c  b160              CBZ      r0,|L10.3176|
000c4e  2801              CMP      r0,#1                 ;1908
000c50  d016              BEQ      |L10.3200|
000c52  2805              CMP      r0,#5                 ;1913
000c54  d005              BEQ      |L10.3170|
000c56  5d29              LDRB     r1,[r5,r4]            ;1919
000c58  eb020282          ADD      r2,r2,r2,LSL #2       ;1919
000c5c  eb060242          ADD      r2,r6,r2,LSL #1       ;1919
000c60  440a              ADD      r2,r2,r1              ;1919
                  |L10.3170|
000c62  1c64              ADDS     r4,r4,#1              ;1919
000c64  b2a4              UXTH     r4,r4                 ;1915
000c66  e015              B        |L10.3220|
                  |L10.3176|
000c68  5d29              LDRB     r1,[r5,r4]            ;1906
000c6a  3930              SUBS     r1,r1,#0x30           ;1906
000c6c  eb010181          ADD      r1,r1,r1,LSL #2       ;1906
000c70  0049              LSLS     r1,r1,#1              ;1906
000c72  ee001a10          VMOV     s0,r1                 ;1906
000c76  1c64              ADDS     r4,r4,#1              ;1906
000c78  b2a4              UXTH     r4,r4                 ;1906
000c7a  eeb80ac0          VCVT.F32.S32 s0,s0                 ;1906
000c7e  e009              B        |L10.3220|
                  |L10.3200|
000c80  5d29              LDRB     r1,[r5,r4]            ;1910
000c82  1c64              ADDS     r4,r4,#1              ;1910
000c84  3930              SUBS     r1,r1,#0x30           ;1910
000c86  ee001a90          VMOV     s1,r1                 ;1910
000c8a  b2a4              UXTH     r4,r4                 ;1910
000c8c  eef80ae0          VCVT.F32.S32 s1,s1                 ;1910
000c90  ee300a80          VADD.F32 s0,s1,s0              ;1910
                  |L10.3220|
000c94  1c40              ADDS     r0,r0,#1              ;1910
000c96  b2c0              UXTB     r0,r0                 ;1902
000c98  4298              CMP      r0,r3                 ;1902
000c9a  d3d7              BCC      |L10.3148|
000c9c  eebc0ac0          VCVT.U32.F32 s0,s0                 ;1936
000ca0  ee100a10          VMOV     r0,s0                 ;1936
000ca4  b2c1              UXTB     r1,r0                 ;1936
000ca6  2001              MOVS     r0,#1                 ;1936
000ca8  e04e              B        |L10.3400|
                  |L10.3242|
000caa  5d28              LDRB     r0,[r5,r4]            ;1943
000cac  2306              MOVS     r3,#6                 ;1942
000cae  283f              CMP      r0,#0x3f              ;1943
000cb0  d002              BEQ      |L10.3256|
000cb2  2201              MOVS     r2,#1                 ;1952
000cb4  2100              MOVS     r1,#0                 ;1953
000cb6  e027              B        |L10.3336|
                  |L10.3256|
000cb8  eeb58ac0          VCMPE.F32 s16,#0.0              ;1945
000cbc  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1945
000cc0  db01              BLT      |L10.3270|
000cc2  202b              MOVS     r0,#0x2b              ;1945
000cc4  e000              B        |L10.3272|
                  |L10.3270|
000cc6  202d              MOVS     r0,#0x2d              ;1945
                  |L10.3272|
000cc8  5528              STRB     r0,[r5,r4]            ;1945
000cca  1c64              ADDS     r4,r4,#1              ;1945
000ccc  b2a4              UXTH     r4,r4                 ;1945
000cce  ee180a10          VMOV     r0,s16                ;1946
000cd2  f7fffffe          BL       __aeabi_f2d
000cd6  ec410b10          VMOV     d0,r0,r1              ;1946
000cda  1928              ADDS     r0,r5,r4              ;1946
000cdc  ec532b10          VMOV     r2,r3,d0              ;1946
000ce0  a132              ADR      r1,|L10.3500|
000ce2  f7fffffe          BL       __2sprintf
000ce6  1da4              ADDS     r4,r4,#6              ;1946
                  |L10.3304|
000ce8  b2a0              UXTH     r0,r4                 ;1947
                  |L10.3306|
000cea  f8059000          STRB     r9,[r5,r0]            ;1948
000cee  1c40              ADDS     r0,r0,#1              ;1948
000cf0  b284              UXTH     r4,r0                 ;1948
                  |L10.3314|
000cf2  e055              B        |L10.3488|
                  |L10.3316|
000cf4  b141              CBZ      r1,|L10.3336|
000cf6  2904              CMP      r1,#4                 ;1955
000cf8  d006              BEQ      |L10.3336|
000cfa  1860              ADDS     r0,r4,r1              ;1957
000cfc  5c28              LDRB     r0,[r5,r0]            ;1957
000cfe  f7fffffe          BL       IsDigitChar
000d02  2801              CMP      r0,#1                 ;1957
000d04  d000              BEQ      |L10.3336|
000d06  2200              MOVS     r2,#0                 ;1963
                  |L10.3336|
000d08  1c49              ADDS     r1,r1,#1              ;1963
000d0a  b2c9              UXTB     r1,r1                 ;1953
000d0c  4299              CMP      r1,r3                 ;1953
000d0e  d3f1              BCC      |L10.3316|
000d10  2a00              CMP      r2,#0                 ;1966
000d12  d093              BEQ      |L10.3132|
000d14  18e0              ADDS     r0,r4,r3              ;1966
000d16  5c28              LDRB     r0,[r5,r0]            ;1966
000d18  280d              CMP      r0,#0xd               ;1966
000d1a  d193              BNE      |L10.3140|
000d1c  2200              MOVS     r2,#0                 ;1971
000d1e  4610              MOV      r0,r2                 ;1972
000d20  e015              B        |L10.3406|
                  |L10.3362|
000d22  b1a0              CBZ      r0,|L10.3406|
000d24  5d29              LDRB     r1,[r5,r4]            ;1985
000d26  eb020282          ADD      r2,r2,r2,LSL #2       ;1985
000d2a  eb060242          ADD      r2,r6,r2,LSL #1       ;1985
000d2e  1c64              ADDS     r4,r4,#1              ;1985
000d30  440a              ADD      r2,r2,r1              ;1985
000d32  b2a4              UXTH     r4,r4                 ;1985
                  |L10.3380|
000d34  1c40              ADDS     r0,r0,#1              ;1985
000d36  b2c0              UXTB     r0,r0                 ;1972
000d38  4298              CMP      r0,r3                 ;1972
000d3a  d3f2              BCC      |L10.3362|
000d3c  eebc0ac0          VCVT.U32.F32 s0,s0                 ;1987
000d40  ee100a10          VMOV     r0,s0                 ;1987
000d44  b2c1              UXTB     r1,r0                 ;1987
000d46  2002              MOVS     r0,#2                 ;1987
                  |L10.3400|
000d48  f7fffffe          BL       CalHandle
000d4c  e028              B        |L10.3488|
                  |L10.3406|
000d4e  5d29              LDRB     r1,[r5,r4]            ;1976
000d50  1c64              ADDS     r4,r4,#1              ;1976
000d52  3930              SUBS     r1,r1,#0x30           ;1976
000d54  ee001a10          VMOV     s0,r1                 ;1976
000d58  b2a4              UXTH     r4,r4                 ;1976
000d5a  eeb80ac0          VCVT.F32.S32 s0,s0                 ;1976
000d5e  e7e9              B        |L10.3380|
                  |L10.3424|
000d60  5d28              LDRB     r0,[r5,r4]            ;1993
000d62  283f              CMP      r0,#0x3f              ;1993
000d64  d01c              BEQ      |L10.3488|
000d66  2201              MOVS     r2,#1                 ;2002
000d68  2100              MOVS     r1,#0                 ;2003
000d6a  4608              MOV      r0,r1                 ;2003
                  |L10.3436|
000d6c  5d2b              LDRB     r3,[r5,r4]            ;2005
000d6e  eb000080          ADD      r0,r0,r0,LSL #2       ;2005
000d72  1c64              ADDS     r4,r4,#1              ;2005
000d74  1c49              ADDS     r1,r1,#1              ;2005
000d76  eb060040          ADD      r0,r6,r0,LSL #1       ;2005
000d7a  b2c9              UXTB     r1,r1                 ;2003
000d7c  4418              ADD      r0,r0,r3              ;2005
000d7e  b2a4              UXTH     r4,r4                 ;2005
000d80  4291              CMP      r1,r2                 ;2003
000d82  d3f3              BCC      |L10.3436|
000d84  2801              CMP      r0,#1                 ;2007
000d86  f63faa98          BHI      |L10.698|
000d8a  490b              LDR      r1,|L10.3512|
000d8c  7008              STRB     r0,[r1,#0]            ;2013
000d8e  490b              LDR      r1,|L10.3516|
000d90  2001              MOVS     r0,#1                 ;2014
000d92  7008              STRB     r0,[r1,#0]            ;2014
000d94  f7fffffe          BL       Write_Boot_Flag
                  |L10.3480|
000d98  f805b004          STRB     r11,[r5,r4]           ;2020
000d9c  1c64              ADDS     r4,r4,#1              ;2020
000d9e  b2a4              UXTH     r4,r4                 ;2020
                  |L10.3488|
000da0  1c64              ADDS     r4,r4,#1              ;2020
000da2  b033              ADD      sp,sp,#0xcc
000da4  b2a0              UXTH     r0,r4                 ;2143
000da6  e8bd8ff0          POP      {r4-r11,pc}
;;;2145   
                          ENDP

000daa  0000              DCW      0x0000
                  |L10.3500|
000dac  2530332e          DCB      "%03.3f",0
000db0  336600  
000db3  00                DCB      0
                  |L10.3508|
                          DCD      overflag
                  |L10.3512|
                          DCD      jumpflag
                  |L10.3516|
                          DCD      bootflag

                          AREA ||i.SetErr_ACK||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  SetErr_ACK PROC
;;;1042   
;;;1043   u16 SetErr_ACK(char *buf, u8 addr ,u8 ucErr)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1044   {
000002  4604              MOV      r4,r0
;;;1045   		u16 i=0;
;;;1046   		u8 len = 0;
;;;1047   		char stradd[3] = {0};
000004  2000              MOVS     r0,#0
;;;1048   		int addlen=0;
;;;1049   		memset(buf,0,sizeof(buf));
000006  9000              STR      r0,[sp,#0]
000008  6020              STR      r0,[r4,#0]
00000a  4616              MOV      r6,r2                 ;1044
;;;1050       	buf[i++] = ChrStartS;
00000c  203e              MOVS     r0,#0x3e
00000e  7020              STRB     r0,[r4,#0]
;;;1051   		sprintf(stradd,"%d",addr);
000010  460a              MOV      r2,r1
000012  a11a              ADR      r1,|L11.124|
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       __2sprintf
;;;1052   		addlen=strlen(stradd);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       strlen
000020  4605              MOV      r5,r0
;;;1053   		strncat(&buf[i],stradd,addlen);
000022  1c60              ADDS     r0,r4,#1
000024  462a              MOV      r2,r5
000026  4669              MOV      r1,sp
000028  f7fffffe          BL       strncat
00002c  1c6d              ADDS     r5,r5,#1
;;;1054   		i+=addlen;
00002e  b2a8              UXTH     r0,r5
;;;1055   		buf[i++] = '/';
000030  212f              MOVS     r1,#0x2f
000032  5421              STRB     r1,[r4,r0]
000034  1c40              ADDS     r0,r0,#1
000036  b285              UXTH     r5,r0
;;;1056   		switch(ucErr)
000038  2e01              CMP      r6,#1
00003a  d008              BEQ      |L11.78|
00003c  2e02              CMP      r6,#2
00003e  d001              BEQ      |L11.68|
000040  2e03              CMP      r6,#3
000042  d015              BEQ      |L11.112|
                  |L11.68|
;;;1057           {
;;;1058             case 1:         //
;;;1059             	   len = 9;
;;;1060             	   memmove(&buf[i],"PARA ERR!",len);   
;;;1061             	   break;
;;;1062   	      case 2:         //
;;;1063             	   len = 8;
;;;1064             	   memmove(&buf[i],"CMD ERR!",len);   
;;;1065             	   break;
;;;1066   	      case 3:         //
;;;1067             	   len = 8;
;;;1068             	   memmove(&buf[i],"REM ERR!",len);   
;;;1069             	   break;
;;;1070   		  default:    
;;;1071                  len = 8;
000044  2608              MOVS     r6,#8
;;;1072             	   memmove(&buf[i],"CMD ERR!",len);   
000046  1960              ADDS     r0,r4,r5
000048  4632              MOV      r2,r6
00004a  a10d              ADR      r1,|L11.128|
;;;1073                  break;
00004c  e003              B        |L11.86|
                  |L11.78|
00004e  2609              MOVS     r6,#9                 ;1059
000050  1960              ADDS     r0,r4,r5              ;1060
000052  4632              MOV      r2,r6                 ;1060
000054  a10d              ADR      r1,|L11.140|
                  |L11.86|
000056  f7fffffe          BL       __aeabi_memmove
;;;1074   	    }
;;;1075   	    i+=len;
00005a  19a8              ADDS     r0,r5,r6
00005c  b280              UXTH     r0,r0
;;;1076   		buf[i++] = ChrEndR;
00005e  210d              MOVS     r1,#0xd
000060  5421              STRB     r1,[r4,r0]
000062  1c40              ADDS     r0,r0,#1
000064  b280              UXTH     r0,r0
;;;1077   		buf[i++] = ChrEndS;
000066  210a              MOVS     r1,#0xa
000068  5421              STRB     r1,[r4,r0]
00006a  1c40              ADDS     r0,r0,#1
00006c  b280              UXTH     r0,r0
;;;1078   		return i;
;;;1079   }
00006e  bdf8              POP      {r3-r7,pc}
                  |L11.112|
000070  2608              MOVS     r6,#8                 ;1067
000072  1960              ADDS     r0,r4,r5              ;1068
000074  4632              MOV      r2,r6                 ;1068
000076  a108              ADR      r1,|L11.152|
000078  e7ed              B        |L11.86|
;;;1080   
                          ENDP

00007a  0000              DCW      0x0000
                  |L11.124|
00007c  256400            DCB      "%d",0
00007f  00                DCB      0
                  |L11.128|
000080  434d4420          DCB      "CMD ERR!",0
000084  45525221
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L11.140|
00008c  50415241          DCB      "PARA ERR!",0
000090  20455252
000094  2100    
000096  00                DCB      0
000097  00                DCB      0
                  |L11.152|
000098  52454d20          DCB      "REM ERR!",0
00009c  45525221
0000a0  00      
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0

                          AREA ||i.SetListPC||, CODE, READONLY, ALIGN=2

                  SetListPC PROC
;;;164    
;;;165    void SetListPC(void)
000000  4802              LDR      r0,|L12.12|
;;;166    {
;;;167    	SetPowerC(Para.CDC_Limit_C);
000002  f8b00070          LDRH     r0,[r0,#0x70]  ; Para
000006  f7ffbffe          B.W      SetPowerC
;;;168    //	listsend = 3;
;;;169    }
;;;170    
                          ENDP

00000a  0000              DCW      0x0000
                  |L12.12|
                          DCD      Para

                          AREA ||i.SetListPS||, CODE, READONLY, ALIGN=2

                  SetListPS PROC
;;;171    
;;;172    void SetListPS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;173    {
;;;174    	if(mainswitch == 1)
000002  4c0f              LDR      r4,|L13.64|
000004  79a0              LDRB     r0,[r4,#6]  ; mainswitch
;;;175    	{
;;;176    		GPIO_SetBits(GPIOE,GPIO_Pin_2);
000006  4d0f              LDR      r5,|L13.68|
000008  2801              CMP      r0,#1                 ;174
00000a  d109              BNE      |L13.32|
00000c  2104              MOVS     r1,#4
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       GPIO_SetBits
;;;177    		Delay_ms(POWER_SW_DELAY);
000014  200a              MOVS     r0,#0xa
000016  f7fffffe          BL       Delay_ms
;;;178    		PowerSwitch(mainswitch);
00001a  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00001c  f7fffffe          BL       PowerSwitch
                  |L13.32|
;;;179    	}
;;;180    	
;;;181    	if(mainswitch == 0)
000020  79a0              LDRB     r0,[r4,#6]  ; mainswitch
000022  2800              CMP      r0,#0
000024  d10b              BNE      |L13.62|
;;;182    	{
;;;183    		PowerSwitch(mainswitch);
000026  79a0              LDRB     r0,[r4,#6]  ; mainswitch
000028  f7fffffe          BL       PowerSwitch
;;;184    		Delay_ms(POWER_SW_DELAY);
00002c  200a              MOVS     r0,#0xa
00002e  f7fffffe          BL       Delay_ms
;;;185    		GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
000032  4628              MOV      r0,r5
000034  e8bd4070          POP      {r4-r6,lr}
000038  2104              MOVS     r1,#4
00003a  f7ffbffe          B.W      GPIO_ResetBits
                  |L13.62|
;;;186    	}
;;;187    	
;;;188    //	listsend = 0;
;;;189    }
00003e  bd70              POP      {r4-r6,pc}
;;;190    
                          ENDP

                  |L13.64|
                          DCD      ||.data||
                  |L13.68|
                          DCD      0x40021000

                          AREA ||i.SetListPV||, CODE, READONLY, ALIGN=2

                  SetListPV PROC
;;;158    }
;;;159    void SetListPV(void)
000000  4801              LDR      r0,|L14.8|
;;;160    {
;;;161    	SetPowerV(Para.CDC_OutPut_V);
000002  6ec0              LDR      r0,[r0,#0x6c]  ; Para
000004  f7ffbffe          B.W      SetPowerV
;;;162    //	listsend = 2;
;;;163    }
;;;164    
                          ENDP

                  |L14.8|
                          DCD      Para

                          AREA ||i.SetPowerC||, CODE, READONLY, ALIGN=2

                  SetPowerC PROC
;;;117    
;;;118    void SetPowerC(vu16 powc)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;119    {
;;;120    	MasterSendbuf[0] = 0x01;
000002  4c12              LDR      r4,|L15.76|
000004  2001              MOVS     r0,#1
000006  7020              STRB     r0,[r4,#0]
;;;121    	MasterSendbuf[1] = 0x06;
000008  2006              MOVS     r0,#6
00000a  7060              STRB     r0,[r4,#1]
;;;122    	MasterSendbuf[2] = 0x00;
00000c  2000              MOVS     r0,#0
00000e  70a0              STRB     r0,[r4,#2]
;;;123    	MasterSendbuf[3] = 0x31;
000010  2031              MOVS     r0,#0x31
000012  70e0              STRB     r0,[r4,#3]
;;;124    	MasterSendbuf[4] = (u8)(powc/10>>8);
000014  f8bd1000          LDRH     r1,[sp,#0]
000018  200a              MOVS     r0,#0xa
00001a  fbb1f1f0          UDIV     r1,r1,r0
00001e  0a09              LSRS     r1,r1,#8
000020  7121              STRB     r1,[r4,#4]
;;;125    	MasterSendbuf[5] = (u8)(powc/10);
000022  f8bd1000          LDRH     r1,[sp,#0]
000026  fbb1f0f0          UDIV     r0,r1,r0
00002a  7160              STRB     r0,[r4,#5]
;;;126    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00002c  2106              MOVS     r1,#6
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       Hardware_CRC
000034  71a0              STRB     r0,[r4,#6]
;;;127    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000036  2106              MOVS     r1,#6
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       Hardware_CRC
00003e  0a00              LSRS     r0,r0,#8
000040  71e0              STRB     r0,[r4,#7]
;;;128    	USART3WriteDMA(8);
000042  e8bd4038          POP      {r3-r5,lr}
000046  2008              MOVS     r0,#8
000048  f7ffbffe          B.W      USART3WriteDMA
;;;129    }
;;;130    
                          ENDP

                  |L15.76|
                          DCD      ||area_number.32||+0xdc

                          AREA ||i.SetPowerModeC||, CODE, READONLY, ALIGN=2

                  SetPowerModeC PROC
;;;136    
;;;137    void SetPowerModeC(void)
000000  4802              LDR      r0,|L16.12|
;;;138    {
;;;139    	SetPowerC(Para.POWER_Limit_C);
000002  f8b00058          LDRH     r0,[r0,#0x58]  ; Para
000006  f7ffbffe          B.W      SetPowerC
;;;140    //	sendwait = 3;
;;;141    }
;;;142    
                          ENDP

00000a  0000              DCW      0x0000
                  |L16.12|
                          DCD      Para

                          AREA ||i.SetPowerModeS||, CODE, READONLY, ALIGN=2

                  SetPowerModeS PROC
;;;142    
;;;143    void SetPowerModeS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;144    {
;;;145    	if(mainswitch == 1)
000002  4c10              LDR      r4,|L17.68|
000004  79a0              LDRB     r0,[r4,#6]  ; mainswitch
;;;146    	{
;;;147    		GPIO_SetBits(GPIOE,GPIO_Pin_2);
000006  4d10              LDR      r5,|L17.72|
000008  2801              CMP      r0,#1                 ;145
00000a  d00e              BEQ      |L17.42|
;;;148    		Delay_ms(POWER_SW_DELAY);
;;;149    		PowerSwitch(mainswitch);
;;;150    	}else if(mainswitch == 0)
00000c  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00000e  2800              CMP      r0,#0
000010  d117              BNE      |L17.66|
;;;151    	{
;;;152    		PowerSwitch(mainswitch);
000012  79a0              LDRB     r0,[r4,#6]  ; mainswitch
000014  f7fffffe          BL       PowerSwitch
;;;153    		Delay_ms(POWER_SW_DELAY);
000018  200a              MOVS     r0,#0xa
00001a  f7fffffe          BL       Delay_ms
;;;154    		GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
00001e  4628              MOV      r0,r5
000020  e8bd4070          POP      {r4-r6,lr}
000024  2104              MOVS     r1,#4
000026  f7ffbffe          B.W      GPIO_ResetBits
                  |L17.42|
00002a  2104              MOVS     r1,#4                 ;147
00002c  4628              MOV      r0,r5                 ;147
00002e  f7fffffe          BL       GPIO_SetBits
000032  200a              MOVS     r0,#0xa               ;148
000034  f7fffffe          BL       Delay_ms
000038  79a0              LDRB     r0,[r4,#6]            ;149  ; mainswitch
00003a  e8bd4070          POP      {r4-r6,lr}            ;149
00003e  f7ffbffe          B.W      PowerSwitch
                  |L17.66|
;;;155    	}
;;;156    	
;;;157    //	sendwait = 0;
;;;158    }
000042  bd70              POP      {r4-r6,pc}
;;;159    void SetListPV(void)
                          ENDP

                  |L17.68|
                          DCD      ||.data||
                  |L17.72|
                          DCD      0x40021000

                          AREA ||i.SetPowerModeV||, CODE, READONLY, ALIGN=2

                  SetPowerModeV PROC
;;;130    
;;;131    void SetPowerModeV(void)
000000  4801              LDR      r0,|L18.8|
;;;132    {
;;;133    	SetPowerV(Para.POWER_OutPut_V);
000002  6d40              LDR      r0,[r0,#0x54]  ; Para
000004  f7ffbffe          B.W      SetPowerV
;;;134    //	sendwait = 2;
;;;135    }
;;;136    
                          ENDP

                  |L18.8|
                          DCD      Para

                          AREA ||i.SetPowerV||, CODE, READONLY, ALIGN=2

                  SetPowerV PROC
;;;104    }
;;;105    void SetPowerV(vu32 powv)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;106    {
;;;107    	MasterSendbuf[0] = 0x01;
000002  4c11              LDR      r4,|L19.72|
000004  2001              MOVS     r0,#1
000006  7020              STRB     r0,[r4,#0]
;;;108    	MasterSendbuf[1] = 0x06;
000008  2006              MOVS     r0,#6
00000a  7060              STRB     r0,[r4,#1]
;;;109    	MasterSendbuf[2] = 0x00;
00000c  2000              MOVS     r0,#0
00000e  70a0              STRB     r0,[r4,#2]
;;;110    	MasterSendbuf[3] = 0x30;
000010  2030              MOVS     r0,#0x30
000012  70e0              STRB     r0,[r4,#3]
;;;111    	MasterSendbuf[4] = (u8)(powv/10>>8);
000014  9900              LDR      r1,[sp,#0]
000016  200a              MOVS     r0,#0xa
000018  fbb1f1f0          UDIV     r1,r1,r0
00001c  0a09              LSRS     r1,r1,#8
00001e  7121              STRB     r1,[r4,#4]
;;;112    	MasterSendbuf[5] = (u8)(powv/10);
000020  9900              LDR      r1,[sp,#0]
000022  fbb1f0f0          UDIV     r0,r1,r0
000026  7160              STRB     r0,[r4,#5]
;;;113    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
000028  2106              MOVS     r1,#6
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       Hardware_CRC
000030  71a0              STRB     r0,[r4,#6]
;;;114    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000032  2106              MOVS     r1,#6
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       Hardware_CRC
00003a  0a00              LSRS     r0,r0,#8
00003c  71e0              STRB     r0,[r4,#7]
;;;115    	USART3WriteDMA(8);
00003e  e8bd4038          POP      {r3-r5,lr}
000042  2008              MOVS     r0,#8
000044  f7ffbffe          B.W      USART3WriteDMA
;;;116    }
;;;117    
                          ENDP

                  |L19.72|
                          DCD      ||area_number.32||+0xdc

                          AREA ||i.UART1_Send||, CODE, READONLY, ALIGN=2

                  UART1_Send PROC
;;;2537   
;;;2538   void UART1_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2539   {
;;;2540   	static vu8 UART_Buffer_Send_pointer=0;
;;;2541   		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L20.72|
000004  78e0              LDRB     r0,[r4,#3]  ; UART_Buffer_Send_pointer
000006  7921              LDRB     r1,[r4,#4]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L20.56|
;;;2542            {
;;;2543   				 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L20.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L20.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L20.54|
;;;2544   				 {
;;;2545   					USART_SendData(USART1,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  78e1              LDRB     r1,[r4,#3]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  4d0d              LDR      r5,|L20.84|
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       USART_SendData
                  |L20.36|
;;;2546   					while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);//等待发送完成
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L20.36|
;;;2547   					UART_Buffer_Send_pointer++;
000030  78e0              LDRB     r0,[r4,#3]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  70e0              STRB     r0,[r4,#3]
                  |L20.54|
;;;2548   				 }
;;;2549            }
;;;2550   		else 
;;;2551   		{
;;;2552   			UART_Buffer_Send_pointer=0;
;;;2553   			UART_SEND_flag=0;//发送完成一帧数据
;;;2554   		}
;;;2555   }
000036  bd70              POP      {r4-r6,pc}
                  |L20.56|
000038  2000              MOVS     r0,#0                 ;2552
00003a  70e0              STRB     r0,[r4,#3]            ;2552
00003c  4806              LDR      r0,|L20.88|
00003e  6801              LDR      r1,[r0,#0]            ;2553  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;2553
000044  6001              STR      r1,[r0,#0]            ;2553  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;2556   
                          ENDP

                  |L20.72|
                          DCD      ||.data||
                  |L20.76|
                          DCD      ||area_number.32||
                  |L20.80|
                          DCD      ADDR
                  |L20.84|
                          DCD      0x40011000
                  |L20.88|
                          DCD      flagA

                          AREA ||i.UART2_Send||, CODE, READONLY, ALIGN=2

                  UART2_Send PROC
;;;2518   }
;;;2519   void UART2_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2520   {
;;;2521   	static vu8 UART_Buffer_Send_pointer=0;
;;;2522   		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L21.72|
000004  78a0              LDRB     r0,[r4,#2]  ; UART_Buffer_Send_pointer
000006  7921              LDRB     r1,[r4,#4]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L21.56|
;;;2523            {
;;;2524   					 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L21.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L21.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L21.54|
;;;2525   					 {
;;;2526   						USART_SendData(USART2,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  78a1              LDRB     r1,[r4,#2]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  480d              LDR      r0,|L21.84|
00001e  f7fffffe          BL       USART_SendData
;;;2527   						while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);//等待发送完成
000022  4d0d              LDR      r5,|L21.88|
                  |L21.36|
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L21.36|
;;;2528   						UART_Buffer_Send_pointer++;
000030  78a0              LDRB     r0,[r4,#2]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  70a0              STRB     r0,[r4,#2]
                  |L21.54|
;;;2529   					}
;;;2530            }
;;;2531   		else 
;;;2532   		{
;;;2533   			UART_Buffer_Send_pointer=0;
;;;2534   			UART_SEND_flag=0;//发送完成一帧数据
;;;2535   		}
;;;2536   }
000036  bd70              POP      {r4-r6,pc}
                  |L21.56|
000038  2000              MOVS     r0,#0                 ;2533
00003a  70a0              STRB     r0,[r4,#2]            ;2533
00003c  4807              LDR      r0,|L21.92|
00003e  6801              LDR      r1,[r0,#0]            ;2534  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;2534
000044  6001              STR      r1,[r0,#0]            ;2534  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;2537   
                          ENDP

                  |L21.72|
                          DCD      ||.data||
                  |L21.76|
                          DCD      ||area_number.32||
                  |L21.80|
                          DCD      ADDR
                  |L21.84|
                          DCD      0x40004400
                  |L21.88|
                          DCD      0x40011000
                  |L21.92|
                          DCD      flagA

                          AREA ||i.USART2_Configuration||, CODE, READONLY, ALIGN=2

                  USART2_Configuration PROC
;;;2214   
;;;2215   void USART2_Configuration(void)//串口初始化函数
000000  b570              PUSH     {r4-r6,lr}
;;;2216   {  
;;;2217   	GPIO_InitTypeDef GPIO_InitStructure;
;;;2218   	USART_InitTypeDef USART_InitStructure;
;;;2219   	
;;;2220   	/* config USART1 clock */
;;;2221   	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
000002  2101              MOVS     r1,#1
000004  b088              SUB      sp,sp,#0x20           ;2216
000006  0448              LSLS     r0,r1,#17
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;2222   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);
00000c  4e2a              LDR      r6,|L22.184|
00000e  2207              MOVS     r2,#7
000010  2102              MOVS     r1,#2
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2223   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);
000018  2207              MOVS     r2,#7
00001a  2103              MOVS     r1,#3
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2224   	/* USART1 GPIO config */
;;;2225   	/* Configure USART1 Tx (PA.02) as alternate function push-pull */
;;;2226   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;2227   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000022  2502              MOVS     r5,#2
000024  2004              MOVS     r0,#4                 ;2226
000026  f88d5004          STRB     r5,[sp,#4]
;;;2228   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
00002c  9000              STR      r0,[sp,#0]            ;2227
00002e  f88d4006          STRB     r4,[sp,#6]
;;;2229   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f88d5005          STRB     r5,[sp,#5]
;;;2230   	GPIO_Init(GPIOA, &GPIO_InitStructure);    
000036  4669              MOV      r1,sp
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GPIO_Init
;;;2231   	/* Configure USART1 Rx (PA.03) as input floating */
;;;2232   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
00003e  2008              MOVS     r0,#8
;;;2233   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000040  9000              STR      r0,[sp,#0]
000042  f88d5004          STRB     r5,[sp,#4]
;;;2234   	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;2235   	
;;;2236   	/* USART1 mode config */
;;;2237   	USART_InitStructure.USART_BaudRate = 115200;
00004e  f44f30e1          MOV      r0,#0x1c200
;;;2238   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000052  9002              STR      r0,[sp,#8]
;;;2239   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2240   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000054  f8ad4010          STRH     r4,[sp,#0x10]
;;;2241   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2242   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
;;;2243   	USART_Init(USART2, &USART_InitStructure);
00005a  4d18              LDR      r5,|L22.188|
00005c  f8ad400c          STRH     r4,[sp,#0xc]          ;2238
000060  f8ad0012          STRH     r0,[sp,#0x12]         ;2242
000064  f8ad400e          STRH     r4,[sp,#0xe]          ;2239
000068  f8ad4014          STRH     r4,[sp,#0x14]         ;2241
00006c  a902              ADD      r1,sp,#8
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       USART_Init
;;;2244   	
;;;2245   	/******使能串口接收中断******************/
;;;2246   	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
000074  2201              MOVS     r2,#1
000076  f2405125          MOV      r1,#0x525
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_ITConfig
;;;2247   //	USART_ITConfig(USART2, USART_IT_ORE, ENABLE);	
;;;2248   	USART_Cmd(USART2, ENABLE);//使能串口1
000080  2101              MOVS     r1,#1
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USART_Cmd
;;;2249     USART_ClearFlag(USART2, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       USART_ClearFlag
000090  f44f60e0          MOV      r0,#0x700
000094  f7fffffe          BL       NVIC_PriorityGroupConfig
000098  2026              MOVS     r0,#0x26
00009a  f88d0018          STRB     r0,[sp,#0x18]
00009e  f88d4019          STRB     r4,[sp,#0x19]
0000a2  2001              MOVS     r0,#1
0000a4  f88d001a          STRB     r0,[sp,#0x1a]
0000a8  f88d001b          STRB     r0,[sp,#0x1b]
0000ac  a806              ADD      r0,sp,#0x18
0000ae  f7fffffe          BL       NVIC_Init
;;;2250     
;;;2251     USART2_NVIC_Config();//串口中断配置
;;;2252   }
0000b2  b008              ADD      sp,sp,#0x20
0000b4  bd70              POP      {r4-r6,pc}
;;;2253   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L22.184|
                          DCD      0x40020000
                  |L22.188|
                          DCD      0x40004400

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;2476   
;;;2477   void USART2_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2478   {
;;;2479   	u8 Res;
;;;2480    	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
000002  4c1c              LDR      r4,|L23.116|
000004  f2405525          MOV      r5,#0x525
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       USART_GetITStatus
000010  2800              CMP      r0,#0
000012  d013              BEQ      |L23.60|
;;;2481   	{
;;;2482   		USART_ClearITPendingBit(USART2,USART_IT_RXNE);
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       USART_ClearITPendingBit
;;;2483   		Res=USART_ReceiveData(USART2);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       USART_ReceiveData
;;;2484   
;;;2485   		if((USART_RX_STA&0x8000)==0)//接收未完成
000022  4915              LDR      r1,|L23.120|
000024  b2c2              UXTB     r2,r0                 ;2483
000026  8a08              LDRH     r0,[r1,#0x10]  ; USART_RX_STA
000028  0403              LSLS     r3,r0,#16
00002a  d407              BMI      |L23.60|
;;;2486   		{
;;;2487   		if(USART_RX_STA&0x4000)//接收到了0x0d
;;;2488   		{
;;;2489   			if(Res!=0x0a)
;;;2490   				USART_RX_STA=0;//接收错误,重新开始
;;;2491   			else 
;;;2492   			{
;;;2493   		//		SerialRemoteHandleL(USART_RX_STA,USART_RX_BUF);
;;;2494   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
00002c  4b13              LDR      r3,|L23.124|
00002e  0445              LSLS     r5,r0,#17             ;2487
000030  f04f0400          MOV      r4,#0                 ;2487
000034  d50b              BPL      |L23.78|
000036  2a0a              CMP      r2,#0xa               ;2489
000038  d001              BEQ      |L23.62|
                  |L23.58|
00003a  820c              STRH     r4,[r1,#0x10]         ;2490
                  |L23.60|
;;;2495   				USART_RX_STA++;
;;;2496   				USART_RX_CNT = USART_RX_STA;
;;;2497   				USART_RX_STA|=0x8000;	//接收完成了 			  //接收到回车的后字节  置位状态寄存器 
;;;2498   			}
;;;2499   		}
;;;2500   		else //还没收到0X0D
;;;2501   		{	
;;;2502   			if(Res==0x0d)
;;;2503   			{
;;;2504   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
;;;2505   				USART_RX_STA++;	
;;;2506   				USART_RX_STA|=0x4000;					 //接收到回车的前一字节  置位状态寄存器
;;;2507   			}
;;;2508   			else
;;;2509   				{
;;;2510   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
;;;2511   					USART_RX_STA++;									//长度+1 为下一次做准备
;;;2512   				if(USART_RX_STA>(USART_REC_LEN-1))
;;;2513   					USART_RX_STA=0;//接收数据错误,重新开始接收	  
;;;2514   				}		 
;;;2515   			}
;;;2516   		} 
;;;2517   	}
;;;2518   }
00003c  bd70              POP      {r4-r6,pc}
                  |L23.62|
00003e  f3c0040d          UBFX     r4,r0,#0,#14          ;2494
000042  1c40              ADDS     r0,r0,#1              ;2494
000044  551a              STRB     r2,[r3,r4]            ;2494
000046  8248              STRH     r0,[r1,#0x12]         ;2496
000048  f4404000          ORR      r0,r0,#0x8000         ;2497
00004c  e010              B        |L23.112|
                  |L23.78|
00004e  2a0d              CMP      r2,#0xd               ;2502
000050  d008              BEQ      |L23.100|
000052  f3c0050d          UBFX     r5,r0,#0,#14          ;2510
000056  1c40              ADDS     r0,r0,#1              ;2510
000058  b280              UXTH     r0,r0                 ;2511
00005a  555a              STRB     r2,[r3,r5]            ;2510
00005c  8208              STRH     r0,[r1,#0x10]         ;2511
00005e  28c7              CMP      r0,#0xc7              ;2512
000060  d8eb              BHI      |L23.58|
000062  bd70              POP      {r4-r6,pc}
                  |L23.100|
000064  f3c0040d          UBFX     r4,r0,#0,#14          ;2504
000068  1c40              ADDS     r0,r0,#1              ;2504
00006a  551a              STRB     r2,[r3,r4]            ;2504
00006c  f4404080          ORR      r0,r0,#0x4000         ;2506
                  |L23.112|
000070  8208              STRH     r0,[r1,#0x10]         ;2497
000072  bd70              POP      {r4-r6,pc}
;;;2519   void UART2_Send(void)
                          ENDP

                  |L23.116|
                          DCD      0x40004400
                  |L23.120|
                          DCD      ||.data||
                  |L23.124|
                          DCD      ||area_number.32||+0x14

                          AREA ||i.USART3HANDLE||, CODE, READONLY, ALIGN=2

                  USART3HANDLE PROC
;;;236    
;;;237    void USART3HANDLE(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;238    {
;;;239    	vu16 crcres;
;;;240    
;;;241    	if(MasterRecbuf[0] == 0x01)
000002  4e43              LDR      r6,|L24.272|
000004  2500              MOVS     r5,#0
;;;242    	{
;;;243    		if(MasterRecbuf[1] == 0x03)
;;;244    		{
;;;245    			crcres = (MasterRecbuf[8] << 8) + MasterRecbuf[7];
;;;246    			if(crcres == Hardware_CRC(MasterRecbuf,7))
;;;247    			{
;;;248    				 
;;;249    				Para.CPOW_Voltage = (MasterRecbuf[3] << 8) + MasterRecbuf[4];
;;;250    				Para.CCurrent = (MasterRecbuf[5] << 8) + MasterRecbuf[6];
;;;251    				memset(MasterRecbuf,0,sizeof(MasterRecbuf));
;;;252    			}
;;;253    				if(sendwait == 3)
000006  4c43              LDR      r4,|L24.276|
000008  7830              LDRB     r0,[r6,#0]            ;241  ; MasterRecbuf
00000a  2801              CMP      r0,#1                 ;241
00000c  d17e              BNE      |L24.268|
00000e  7870              LDRB     r0,[r6,#1]            ;243  ; MasterRecbuf
000010  2803              CMP      r0,#3                 ;243
000012  d002              BEQ      |L24.26|
;;;254    				{
;;;255    					SetPowerModeS();
;;;256    				}
;;;257    				if(sendwait == 2)
;;;258    				{
;;;259    					SetPowerModeC();
;;;260    				}
;;;261    				if(sendwait == 1)
;;;262    				{
;;;263    					SetPowerModeV();
;;;264    				}
;;;265    				if(listsend == 3)
;;;266    				{
;;;267    					SetListPS();
;;;268    				}
;;;269    				if(listsend == 2)
;;;270    				{
;;;271    					SetListPC();
;;;272    				}
;;;273    				if(listsend == 1)
;;;274    				{
;;;275    					SetListPV();
;;;276    				}
;;;277    		}else if(MasterRecbuf[1] == 0x06){
000014  2806              CMP      r0,#6
000016  d03c              BEQ      |L24.146|
000018  e078              B        |L24.268|
                  |L24.26|
00001a  79f0              LDRB     r0,[r6,#7]            ;245  ; MasterRecbuf
00001c  7a31              LDRB     r1,[r6,#8]            ;245  ; MasterRecbuf
00001e  eb002001          ADD      r0,r0,r1,LSL #8       ;245
000022  f8ad0000          STRH     r0,[sp,#0]            ;245
000026  2107              MOVS     r1,#7                 ;246
000028  4839              LDR      r0,|L24.272|
00002a  f7fffffe          BL       Hardware_CRC
00002e  f8bd1000          LDRH     r1,[sp,#0]            ;246
000032  4288              CMP      r0,r1                 ;246
000034  d10e              BNE      |L24.84|
000036  7930              LDRB     r0,[r6,#4]            ;249  ; MasterRecbuf
000038  78f1              LDRB     r1,[r6,#3]            ;249  ; MasterRecbuf
00003a  eb002101          ADD      r1,r0,r1,LSL #8       ;249
00003e  4836              LDR      r0,|L24.280|
000040  6281              STR      r1,[r0,#0x28]         ;249  ; Para
000042  79b1              LDRB     r1,[r6,#6]            ;250  ; MasterRecbuf
000044  7972              LDRB     r2,[r6,#5]            ;250  ; MasterRecbuf
000046  eb012102          ADD      r1,r1,r2,LSL #8       ;250
00004a  6301              STR      r1,[r0,#0x30]         ;250  ; Para
00004c  2180              MOVS     r1,#0x80              ;251
00004e  4830              LDR      r0,|L24.272|
000050  f7fffffe          BL       __aeabi_memclr
                  |L24.84|
000054  7a20              LDRB     r0,[r4,#8]            ;253  ; sendwait
000056  2803              CMP      r0,#3                 ;253
000058  d101              BNE      |L24.94|
00005a  f7fffffe          BL       SetPowerModeS
                  |L24.94|
00005e  7a20              LDRB     r0,[r4,#8]            ;257  ; sendwait
000060  2802              CMP      r0,#2                 ;257
000062  d101              BNE      |L24.104|
000064  f7fffffe          BL       SetPowerModeC
                  |L24.104|
000068  7a20              LDRB     r0,[r4,#8]            ;261  ; sendwait
00006a  2801              CMP      r0,#1                 ;261
00006c  d101              BNE      |L24.114|
00006e  f7fffffe          BL       SetPowerModeV
                  |L24.114|
000072  7a60              LDRB     r0,[r4,#9]            ;265  ; listsend
000074  2803              CMP      r0,#3                 ;265
000076  d101              BNE      |L24.124|
000078  f7fffffe          BL       SetListPS
                  |L24.124|
00007c  7a60              LDRB     r0,[r4,#9]            ;269  ; listsend
00007e  2802              CMP      r0,#2                 ;269
000080  d101              BNE      |L24.134|
000082  f7fffffe          BL       SetListPC
                  |L24.134|
000086  7a60              LDRB     r0,[r4,#9]            ;273  ; listsend
000088  2801              CMP      r0,#1                 ;273
00008a  d13f              BNE      |L24.268|
00008c  f7fffffe          BL       SetListPV
000090  e03c              B        |L24.268|
                  |L24.146|
;;;278    			memset(MasterRecbuf,0,sizeof(MasterRecbuf));
000092  2180              MOVS     r1,#0x80
000094  481e              LDR      r0,|L24.272|
000096  f7fffffe          BL       __aeabi_memclr
;;;279    			if(sendwait == 1)
00009a  7a22              LDRB     r2,[r4,#8]  ; sendwait
;;;280    			{
;;;281    				sendwait = 2;
00009c  2102              MOVS     r1,#2
00009e  2003              MOVS     r0,#3                 ;243
0000a0  2a01              CMP      r2,#1                 ;279
0000a2  d006              BEQ      |L24.178|
;;;282    			}else if(sendwait == 2){
0000a4  7a22              LDRB     r2,[r4,#8]  ; sendwait
0000a6  2a02              CMP      r2,#2
0000a8  d005              BEQ      |L24.182|
;;;283    				sendwait = 3;
;;;284    			}else if(sendwait == 3){
0000aa  7a22              LDRB     r2,[r4,#8]  ; sendwait
0000ac  2a03              CMP      r2,#3
0000ae  d004              BEQ      |L24.186|
0000b0  e00f              B        |L24.210|
                  |L24.178|
0000b2  7221              STRB     r1,[r4,#8]            ;281
0000b4  e00d              B        |L24.210|
                  |L24.182|
0000b6  7220              STRB     r0,[r4,#8]            ;283
0000b8  e00b              B        |L24.210|
                  |L24.186|
;;;285    				sendwait = 0;
0000ba  7225              STRB     r5,[r4,#8]
;;;286    				if(waitcommand1 != 0)
0000bc  7aa2              LDRB     r2,[r4,#0xa]  ; waitcommand1
0000be  b11a              CBZ      r2,|L24.200|
;;;287    				{
;;;288    					sendwait = waitcommand1;
0000c0  7aa2              LDRB     r2,[r4,#0xa]  ; waitcommand1
0000c2  7222              STRB     r2,[r4,#8]
;;;289    					waitcommand1 = 0;
0000c4  72a5              STRB     r5,[r4,#0xa]
0000c6  e004              B        |L24.210|
                  |L24.200|
;;;290    				}else if(waitcommand2 != 0){
0000c8  7ae2              LDRB     r2,[r4,#0xb]  ; waitcommand2
0000ca  b112              CBZ      r2,|L24.210|
;;;291    					listsend = waitcommand2;
0000cc  7ae2              LDRB     r2,[r4,#0xb]  ; waitcommand2
0000ce  7262              STRB     r2,[r4,#9]
;;;292    					waitcommand2 = 0;
0000d0  72e5              STRB     r5,[r4,#0xb]
                  |L24.210|
;;;293    				}
;;;294    			}
;;;295    			
;;;296    			if(listsend == 1)
0000d2  7a62              LDRB     r2,[r4,#9]  ; listsend
0000d4  2a01              CMP      r2,#1
0000d6  d006              BEQ      |L24.230|
;;;297    			{
;;;298    				listsend = 2;
;;;299    			}else if(listsend == 2){
0000d8  7a61              LDRB     r1,[r4,#9]  ; listsend
0000da  2902              CMP      r1,#2
0000dc  d005              BEQ      |L24.234|
;;;300    				listsend = 3;
;;;301    			}else if(listsend == 3){
0000de  7a60              LDRB     r0,[r4,#9]  ; listsend
0000e0  2803              CMP      r0,#3
0000e2  d004              BEQ      |L24.238|
0000e4  e00f              B        |L24.262|
                  |L24.230|
0000e6  7261              STRB     r1,[r4,#9]            ;298
0000e8  e00d              B        |L24.262|
                  |L24.234|
0000ea  7260              STRB     r0,[r4,#9]            ;300
0000ec  e00b              B        |L24.262|
                  |L24.238|
;;;302    				listsend = 0;
0000ee  7265              STRB     r5,[r4,#9]
;;;303    				if(waitcommand1 != 0)
0000f0  7aa0              LDRB     r0,[r4,#0xa]  ; waitcommand1
0000f2  b118              CBZ      r0,|L24.252|
;;;304    				{
;;;305    					sendwait = waitcommand1;
0000f4  7aa0              LDRB     r0,[r4,#0xa]  ; waitcommand1
0000f6  7220              STRB     r0,[r4,#8]
;;;306    					waitcommand1 = 0;
0000f8  72a5              STRB     r5,[r4,#0xa]
0000fa  e004              B        |L24.262|
                  |L24.252|
;;;307    				}else if(waitcommand2 != 0){
0000fc  7ae0              LDRB     r0,[r4,#0xb]  ; waitcommand2
0000fe  b110              CBZ      r0,|L24.262|
;;;308    					listsend = waitcommand2;
000100  7ae0              LDRB     r0,[r4,#0xb]  ; waitcommand2
000102  7260              STRB     r0,[r4,#9]
;;;309    					waitcommand2 = 0;
000104  72e5              STRB     r5,[r4,#0xb]
                  |L24.262|
;;;310    				}
;;;311    			}
;;;312    			watchtest ++;
000106  6d60              LDR      r0,[r4,#0x54]  ; watchtest
000108  1c40              ADDS     r0,r0,#1
00010a  6560              STR      r0,[r4,#0x54]  ; watchtest
                  |L24.268|
;;;313    		}
;;;314    	}	
;;;315    
;;;316    	
;;;317    	USART3_Recive_flg = 0;
00010c  7065              STRB     r5,[r4,#1]
;;;318    }
00010e  bdf8              POP      {r3-r7,pc}
;;;319    
                          ENDP

                  |L24.272|
                          DCD      ||area_number.32||+0x15c
                  |L24.276|
                          DCD      ||.data||
                  |L24.280|
                          DCD      Para

                          AREA ||i.USART3WriteDMA||, CODE, READONLY, ALIGN=2

                  USART3WriteDMA PROC
;;;2419   
;;;2420   void USART3WriteDMA(u16 len)
000000  b570              PUSH     {r4-r6,lr}
;;;2421   {
000002  4604              MOV      r4,r0
;;;2422       USART_ClearFlag(USART3, USART_FLAG_TC);     //串口发送准备
000004  2140              MOVS     r1,#0x40
000006  4809              LDR      r0,|L25.44|
000008  f7fffffe          BL       USART_ClearFlag
;;;2423   	DMA_Cmd(DMA1_Stream3, DISABLE);//关闭DMA 数据流3
00000c  4d08              LDR      r5,|L25.48|
00000e  2100              MOVS     r1,#0
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       DMA_Cmd
;;;2424       DMA_SetCurrDataCounter(DMA1_Stream3,len);//设置DMA发生长度
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       DMA_SetCurrDataCounter
;;;2425   	DMA_Cmd(DMA1_Stream3, ENABLE);// 打开DMA 数据流3
00001e  4628              MOV      r0,r5
000020  e8bd4070          POP      {r4-r6,lr}
000024  2101              MOVS     r1,#1
000026  f7ffbffe          B.W      DMA_Cmd
;;;2426      
;;;2427   }
;;;2428   
                          ENDP

00002a  0000              DCW      0x0000
                  |L25.44|
                          DCD      0x40004800
                  |L25.48|
                          DCD      0x40026058

                          AREA ||i.USART3_Configuration||, CODE, READONLY, ALIGN=2

                  USART3_Configuration PROC
;;;2366   
;;;2367   void USART3_Configuration()//???????
000000  b570              PUSH     {r4-r6,lr}
;;;2368   {  
;;;2369       GPIO_InitTypeDef GPIO_InitStructure;
;;;2370   	USART_InitTypeDef USART_InitStructure;
;;;2371   	
;;;2372   	/* config USART1 clock */
;;;2373   	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
000002  2101              MOVS     r1,#1
000004  b088              SUB      sp,sp,#0x20           ;2368
000006  0488              LSLS     r0,r1,#18
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;2374   //    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE); //?? GPIOA ??
;;;2375       
;;;2376   	GPIO_PinAFConfig(GPIOD,GPIO_PinSource8,GPIO_AF_USART3);
00000c  4c2a              LDR      r4,|L26.184|
00000e  2207              MOVS     r2,#7
000010  2108              MOVS     r1,#8
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2377   	GPIO_PinAFConfig(GPIOD,GPIO_PinSource9,GPIO_AF_USART3);
000018  2207              MOVS     r2,#7
00001a  2109              MOVS     r1,#9
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2378       
;;;2379   
;;;2380       
;;;2381       
;;;2382   	/* USART1 GPIO config */
;;;2383   	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;2384   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
000022  15a0              ASRS     r0,r4,#22
;;;2385   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000024  2502              MOVS     r5,#2
000026  9004              STR      r0,[sp,#0x10]
000028  f88d5014          STRB     r5,[sp,#0x14]
;;;2386   //     GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //??????
;;;2387   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00002c  f88d5015          STRB     r5,[sp,#0x15]
;;;2388   	GPIO_Init(GPIOD, &GPIO_InitStructure);    
000030  a904              ADD      r1,sp,#0x10
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       GPIO_Init
;;;2389   	/* Configure USART1 Rx (PA.10) as input floating */
;;;2390   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
000038  1560              ASRS     r0,r4,#21
;;;2391       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00003a  9004              STR      r0,[sp,#0x10]
00003c  f88d5014          STRB     r5,[sp,#0x14]
;;;2392   	GPIO_Init(GPIOD, &GPIO_InitStructure);
000040  a904              ADD      r1,sp,#0x10
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       GPIO_Init
;;;2393       
;;;2394   
;;;2395   	
;;;2396   	/* USART1 mode config */
;;;2397   	USART_InitStructure.USART_BaudRate = 9600;
;;;2398   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000048  2400              MOVS     r4,#0
00004a  f44f5016          MOV      r0,#0x2580            ;2397
00004e  9000              STR      r0,[sp,#0]
;;;2399   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2400   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000050  f8ad4008          STRH     r4,[sp,#8]
;;;2401   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2402   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000054  200c              MOVS     r0,#0xc
;;;2403   	USART_Init(USART3, &USART_InitStructure);
000056  4e19              LDR      r6,|L26.188|
000058  f8ad4004          STRH     r4,[sp,#4]            ;2398
00005c  f8ad000a          STRH     r0,[sp,#0xa]          ;2402
000060  f8ad4006          STRH     r4,[sp,#6]            ;2399
000064  f8ad400c          STRH     r4,[sp,#0xc]          ;2401
000068  4669              MOV      r1,sp
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       USART_Init
;;;2404       
;;;2405   
;;;2406   	
;;;2407   	/******????????******************/
;;;2408   	USART_ITConfig(USART3, USART_IT_IDLE, ENABLE);
000070  2201              MOVS     r2,#1
000072  f2404124          MOV      r1,#0x424
000076  4630              MOV      r0,r6
000078  f7fffffe          BL       USART_ITConfig
00007c  f44f60e0          MOV      r0,#0x700
000080  f7fffffe          BL       NVIC_PriorityGroupConfig
000084  2027              MOVS     r0,#0x27
000086  f88d0018          STRB     r0,[sp,#0x18]
00008a  f88d4019          STRB     r4,[sp,#0x19]
00008e  f88d501a          STRB     r5,[sp,#0x1a]
000092  2001              MOVS     r0,#1
000094  f88d001b          STRB     r0,[sp,#0x1b]
000098  a806              ADD      r0,sp,#0x18
00009a  f7fffffe          BL       NVIC_Init
;;;2409   	USART3_NVIC_Config();//??????
;;;2410   	USART3_DMA_init();
00009e  f7fffffe          BL       USART3_DMA_init
;;;2411   	USART_Cmd(USART3, ENABLE);//????1
0000a2  2101              MOVS     r1,#1
0000a4  4630              MOV      r0,r6
0000a6  f7fffffe          BL       USART_Cmd
;;;2412       USART_ClearFlag(USART3, USART_FLAG_TC);
0000aa  2140              MOVS     r1,#0x40
0000ac  4630              MOV      r0,r6
0000ae  f7fffffe          BL       USART_ClearFlag
;;;2413       
;;;2414     
;;;2415       
;;;2416   	
;;;2417   }
0000b2  b008              ADD      sp,sp,#0x20
0000b4  bd70              POP      {r4-r6,pc}
;;;2418   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L26.184|
                          DCD      0x40020c00
                  |L26.188|
                          DCD      0x40004800

                          AREA ||i.USART3_DMA_init||, CODE, READONLY, ALIGN=2

                  USART3_DMA_init PROC
;;;2267   
;;;2268   static void USART3_DMA_init(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2269   {
;;;2270       DMA_InitTypeDef DMA_InitStructure;
;;;2271       NVIC_InitTypeDef NVIC_InitStructure;
;;;2272   	
;;;2273   	//串口3使用DMA1 发送为数据流3  通道4   
;;;2274       //F4与F1DMA多了一个数据流的说法详细参考中文数据手册DMA 表35
;;;2275       /* 1.使能DMA2时钟 */
;;;2276   	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
000004  2101              MOVS     r1,#1
000006  b091              SUB      sp,sp,#0x44           ;2269
000008  0548              LSLS     r0,r1,#21
00000a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;2277   	
;;;2278   	//串口发送DMA配置
;;;2279       /* 2.配置使用DMA发送数据 */
;;;2280       DMA_DeInit(DMA1_Stream3); //DMA1 数据流 3
00000e  f8dfa0d8          LDR      r10,|L27.232|
000012  4650              MOV      r0,r10
000014  f7fffffe          BL       DMA_DeInit
;;;2281       DMA_InitStructure.DMA_Channel = DMA_Channel_4;  /* 配置DMA1通道4 */
000018  f04f6600          MOV      r6,#0x8000000
;;;2282       DMA_InitStructure.DMA_PeripheralBaseAddr  = (uint32_t)(&(USART3->DR)); /* 目的 */
;;;2283       DMA_InitStructure.DMA_Memory0BaseAddr     = (uint32_t)MasterSendbuf; /*源内存地址*/
00001c  4834              LDR      r0,|L27.240|
00001e  4f33              LDR      r7,|L27.236|
000020  9600              STR      r6,[sp,#0]
000022  e9cd7001          STRD     r7,r0,[sp,#4]
;;;2284       DMA_InitStructure.DMA_DIR                 = DMA_DIR_MemoryToPeripheral;  /*方向内            
;;;2285                                                                               存到外设*/
;;;2286       DMA_InitStructure.DMA_BufferSize          = MAXRxTxLen;                    
;;;2287       /* 长度 */                  
;;;2288       DMA_InitStructure.DMA_PeripheralInc       = DMA_PeripheralInc_Disable;    
000026  2400              MOVS     r4,#0
000028  2040              MOVS     r0,#0x40              ;2284
00002a  f04f0880          MOV      r8,#0x80              ;2286
;;;2289       /* 外设地址是否自增 */
;;;2290       DMA_InitStructure.DMA_MemoryInc           = DMA_MemoryInc_Enable;        
00002e  f44f6980          MOV      r9,#0x400
000032  9003              STR      r0,[sp,#0xc]
000034  e9cd8404          STRD     r8,r4,[sp,#0x10]
000038  e9cd9406          STRD     r9,r4,[sp,#0x18]
;;;2291       /* 内存地址是否自增 */
;;;2292       DMA_InitStructure.DMA_PeripheralDataSize  = DMA_PeripheralDataSize_Byte;  
;;;2293       /* 目的数据带宽 */
;;;2294       DMA_InitStructure.DMA_MemoryDataSize      = DMA_MemoryDataSize_Byte;      
;;;2295       /* 源数据宽度 */
;;;2296       DMA_InitStructure.DMA_Mode                = DMA_Mode_Normal;             
;;;2297       /* 单次传输模式/循环传输模式 */
;;;2298       DMA_InitStructure.DMA_Priority            = DMA_Priority_High;             
00003c  02c0              LSLS     r0,r0,#11
00003e  9408              STR      r4,[sp,#0x20]
000040  e9cd4009          STRD     r4,r0,[sp,#0x24]
;;;2299       /* DMA优先级 */
;;;2300       DMA_InitStructure.DMA_FIFOMode            = DMA_FIFOMode_Disable;          
;;;2301       /* FIFO模式/直接模式 */
;;;2302       DMA_InitStructure.DMA_FIFOThreshold       = DMA_FIFOThreshold_HalfFull; 
000044  2501              MOVS     r5,#1
000046  e9cd450b          STRD     r4,r5,[sp,#0x2c]
;;;2303       /* FIFO大小 */
;;;2304       DMA_InitStructure.DMA_MemoryBurst         = DMA_MemoryBurst_Single;      
;;;2305        /* 单次传输 */
;;;2306       DMA_InitStructure.DMA_PeripheralBurst     = DMA_PeripheralBurst_Single;
00004a  940d              STR      r4,[sp,#0x34]
;;;2307       /* 3. 配置DMA */
;;;2308       DMA_Init(DMA1_Stream3, &DMA_InitStructure);
00004c  4669              MOV      r1,sp
00004e  4650              MOV      r0,r10
000050  940e              STR      r4,[sp,#0x38]
000052  f7fffffe          BL       DMA_Init
;;;2309       /* 4.使能DMA中断 */
;;;2310       DMA_ITConfig(DMA1_Stream3, DMA_IT_TC, ENABLE);
000056  2201              MOVS     r2,#1
000058  2110              MOVS     r1,#0x10
00005a  4650              MOV      r0,r10
00005c  f7fffffe          BL       DMA_ITConfig
;;;2311       /* 5.使能串口的DMA发送接口 */
;;;2312       USART_DMACmd(USART3, USART_DMAReq_Tx, ENABLE);
000060  f1a70b04          SUB      r11,r7,#4
000064  2201              MOVS     r2,#1
000066  2180              MOVS     r1,#0x80
000068  4658              MOV      r0,r11
00006a  f7fffffe          BL       USART_DMACmd
;;;2313       /* 6. 配置DMA中断优先级 */
;;;2314       NVIC_InitStructure.NVIC_IRQChannel                   = DMA1_Stream3_IRQn;  
00006e  200e              MOVS     r0,#0xe
000070  f88d003c          STRB     r0,[sp,#0x3c]
;;;2315       //  DMA发生中断         
;;;2316       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;          
000074  f88d403d          STRB     r4,[sp,#0x3d]
;;;2317       NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 4; 
000078  2004              MOVS     r0,#4
00007a  f88d003e          STRB     r0,[sp,#0x3e]
;;;2318       NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;
00007e  f88d503f          STRB     r5,[sp,#0x3f]
;;;2319       NVIC_Init(&NVIC_InitStructure);
000082  a80f              ADD      r0,sp,#0x3c
000084  f7fffffe          BL       NVIC_Init
;;;2320   	
;;;2321       /* 7.不使能DMA */                  
;;;2322       DMA_Cmd(DMA1_Stream3, DISABLE);// 数据流2
000088  2100              MOVS     r1,#0
00008a  4650              MOV      r0,r10
00008c  f7fffffe          BL       DMA_Cmd
;;;2323   	//************************DMA接收***********************//
;;;2324   	/* 2.配置使用DMA接收数据 */
;;;2325       DMA_DeInit(DMA1_Stream1); 
000090  f8dfa054          LDR      r10,|L27.232|
000094  f1aa0a30          SUB      r10,r10,#0x30
000098  4650              MOV      r0,r10
00009a  f7fffffe          BL       DMA_DeInit
;;;2326       DMA_InitStructure.DMA_Channel             = DMA_Channel_4;               
;;;2327       /* 配置DMA通道 */
;;;2328       DMA_InitStructure.DMA_PeripheralBaseAddr  = (uint32_t)(&(USART3->DR));   
;;;2329       /* 源地址 */
;;;2330       DMA_InitStructure.DMA_Memory0BaseAddr     = (uint32_t)MasterRecbuf;    
00009e  4814              LDR      r0,|L27.240|
0000a0  a902              ADD      r1,sp,#8
0000a2  3080              ADDS     r0,r0,#0x80
0000a4  e8810111          STM      r1,{r0,r4,r8}
0000a8  e9cd4905          STRD     r4,r9,[sp,#0x14]
;;;2331       /* 目标地址 */
;;;2332       DMA_InitStructure.DMA_DIR                 = DMA_DIR_PeripheralToMemory;    
;;;2333       /* 方向外设向内存  */
;;;2334       DMA_InitStructure.DMA_BufferSize          = MAXRxTxLen;                    		
;;;2335       /* 长度 */                  
;;;2336       DMA_InitStructure.DMA_PeripheralInc       = DMA_PeripheralInc_Disable;    
;;;2337         /* 外设地址是否自增 */
;;;2338       DMA_InitStructure.DMA_MemoryInc           = DMA_MemoryInc_Enable;         
;;;2339       /* 内存地址是否自增 */
;;;2340       DMA_InitStructure.DMA_PeripheralDataSize  = DMA_MemoryDataSize_Byte;     
;;;2341       /* 目的数据带宽 */
;;;2342       DMA_InitStructure.DMA_MemoryDataSize      = DMA_MemoryDataSize_Byte;      
;;;2343       /* 源数据宽度 */
;;;2344       DMA_InitStructure.DMA_Mode                = DMA_Mode_Circular;             
0000ac  0228              LSLS     r0,r5,#8
0000ae  e9cd4008          STRD     r4,r0,[sp,#0x20]
;;;2345       /*循环传输模式 */
;;;2346       DMA_InitStructure.DMA_Priority            = DMA_Priority_VeryHigh;        
0000b2  a90a              ADD      r1,sp,#0x28
0000b4  9407              STR      r4,[sp,#0x1c]         ;2344
0000b6  f44f3040          MOV      r0,#0x30000
0000ba  e8810031          STM      r1,{r0,r4,r5}
;;;2347       /* DMA优先级 */
;;;2348       DMA_InitStructure.DMA_FIFOMode            = DMA_FIFOMode_Disable;         
;;;2349        /* FIFO模式/直接模式 */
;;;2350       DMA_InitStructure.DMA_FIFOThreshold       = DMA_FIFOThreshold_HalfFull; 
;;;2351       /* FIFO大小 */
;;;2352       DMA_InitStructure.DMA_MemoryBurst         = DMA_MemoryBurst_Single;       
;;;2353       /* 单次传输 */
;;;2354       DMA_InitStructure.DMA_PeripheralBurst     = DMA_PeripheralBurst_Single;
0000be  940d              STR      r4,[sp,#0x34]
;;;2355       /* 3. 配置DMA */
;;;2356       DMA_Init(DMA1_Stream1, &DMA_InitStructure);
0000c0  4669              MOV      r1,sp
0000c2  4650              MOV      r0,r10
0000c4  940e              STR      r4,[sp,#0x38]
0000c6  e9cd6700          STRD     r6,r7,[sp,#0]
0000ca  f7fffffe          BL       DMA_Init
;;;2357       /* 4.由于接收不需要DMA中断，故不设置DMA中断 */
;;;2358       /* 5.使能串口的DMA接收 */
;;;2359       USART_DMACmd(USART3,USART_DMAReq_Rx,ENABLE);
0000ce  2201              MOVS     r2,#1
0000d0  2140              MOVS     r1,#0x40
0000d2  4658              MOV      r0,r11
0000d4  f7fffffe          BL       USART_DMACmd
;;;2360       /* 6. 由于接收不需要DMA中断，故不能配置DMA中断优先级 */
;;;2361       /* 7.使能DMA */ 
;;;2362       DMA_Cmd(DMA1_Stream1,ENABLE);
0000d8  2101              MOVS     r1,#1
0000da  4650              MOV      r0,r10
0000dc  f7fffffe          BL       DMA_Cmd
;;;2363   }
0000e0  b011              ADD      sp,sp,#0x44
0000e2  e8bd8ff0          POP      {r4-r11,pc}
;;;2364   
                          ENDP

0000e6  0000              DCW      0x0000
                  |L27.232|
                          DCD      0x40026058
                  |L27.236|
                          DCD      0x40004804
                  |L27.240|
                          DCD      ||area_number.32||+0xdc

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;2444   
;;;2445   void USART3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2446   {
;;;2447       u8 Clear = Clear;
;;;2448       u16 num = 0;
;;;2449            
;;;2450       if(USART_GetITStatus(USART3, USART_IT_IDLE) != RESET)
000002  4c18              LDR      r4,|L28.100|
000004  f2404124          MOV      r1,#0x424
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USART_GetITStatus
00000e  2800              CMP      r0,#0
000010  d024              BEQ      |L28.92|
;;;2451       {
;;;2452           Clear = USART3->SR;  //读SR寄存器清除                                                            
000012  8820              LDRH     r0,[r4,#0]
;;;2453          
;;;2454           Clear = USART3->DR;  //读DR寄存器清除                                                        
000014  1d20              ADDS     r0,r4,#4
000016  8800              LDRH     r0,[r0,#0]
;;;2455           DMA_Cmd(DMA1_Stream1,DISABLE);   //关闭DMA
000018  4d13              LDR      r5,|L28.104|
00001a  2100              MOVS     r1,#0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       DMA_Cmd
;;;2456   		DMA_ClearFlag(DMA1_Stream1,DMA_FLAG_TCIF2);
000022  f04f5181          MOV      r1,#0x10200000
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       DMA_ClearFlag
;;;2457           num = DMA_GetCurrDataCounter(DMA1_Stream1); //得到真正接收数据个数
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       DMA_GetCurrDataCounter
;;;2458           if(num < MAXRxTxLen)
;;;2459           {
;;;2460               USART3_Recive_leng   = MAXRxTxLen - num;
000032  4c0e              LDR      r4,|L28.108|
000034  2880              CMP      r0,#0x80              ;2458
000036  d212              BCS      |L28.94|
000038  f1c00080          RSB      r0,r0,#0x80
00003c  b2c0              UXTB     r0,r0
00003e  7020              STRB     r0,[r4,#0]
;;;2461           }else
;;;2462           {
;;;2463               USART3_Recive_leng = MAXRxTxLen;
;;;2464           }
;;;2465            
;;;2466           if(USART3_Recive_leng > MAXRxTxLen)
000040  2880              CMP      r0,#0x80
000042  d901              BLS      |L28.72|
;;;2467           {
;;;2468               USART3_Recive_leng = 0;  //避免接收数据超界                                               
000044  2000              MOVS     r0,#0
                  |L28.70|
000046  7020              STRB     r0,[r4,#0]            ;2463
                  |L28.72|
;;;2469           }
;;;2470           DMA_SetCurrDataCounter(DMA1_Stream1,MAXRxTxLen);//设置DMA传输长度                                                        
000048  2180              MOVS     r1,#0x80
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       DMA_SetCurrDataCounter
;;;2471           DMA_Cmd(DMA1_Stream1,ENABLE);  //开启DMA
000050  2101              MOVS     r1,#1
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       DMA_Cmd
;;;2472           USART3_Recive_flg = 1;    //数据接收成功                                                  
000058  2001              MOVS     r0,#1
00005a  7060              STRB     r0,[r4,#1]
                  |L28.92|
;;;2473           
;;;2474       } 
;;;2475   }
00005c  bd70              POP      {r4-r6,pc}
                  |L28.94|
00005e  2080              MOVS     r0,#0x80              ;2463
000060  e7f1              B        |L28.70|
;;;2476   
                          ENDP

000062  0000              DCW      0x0000
                  |L28.100|
                          DCD      0x40004800
                  |L28.104|
                          DCD      0x40026028
                  |L28.108|
                          DCD      ||.data||

                          AREA ||i.USART_Configuration||, CODE, READONLY, ALIGN=2

                  USART_Configuration PROC
;;;2161   
;;;2162   void USART_Configuration(void)//串口初始化函数
000000  b570              PUSH     {r4-r6,lr}
;;;2163   {  
000002  b088              SUB      sp,sp,#0x20
;;;2164   	GPIO_InitTypeDef GPIO_InitStructure;
;;;2165   	USART_InitTypeDef USART_InitStructure;
;;;2166   	
;;;2167   	/* config USART1 clock */
;;;2168   	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
000004  2101              MOVS     r1,#1
000006  2010              MOVS     r0,#0x10
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;2169   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1);
00000c  4e2a              LDR      r6,|L29.184|
00000e  2207              MOVS     r2,#7
000010  2109              MOVS     r1,#9
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2170   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1);
000018  2207              MOVS     r2,#7
00001a  210a              MOVS     r1,#0xa
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2171   	/* USART1 GPIO config */
;;;2172   	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;2173   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
;;;2174   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000022  2502              MOVS     r5,#2
000024  1570              ASRS     r0,r6,#21             ;2173
000026  f88d5004          STRB     r5,[sp,#4]
;;;2175   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
00002c  9000              STR      r0,[sp,#0]            ;2174
00002e  f88d4006          STRB     r4,[sp,#6]
;;;2176   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f88d5005          STRB     r5,[sp,#5]
;;;2177   	GPIO_Init(GPIOA, &GPIO_InitStructure);    
000036  4669              MOV      r1,sp
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GPIO_Init
;;;2178   	/* Configure USART1 Rx (PA.10) as input floating */
;;;2179   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
00003e  0268              LSLS     r0,r5,#9
;;;2180   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000040  9000              STR      r0,[sp,#0]
000042  f88d5004          STRB     r5,[sp,#4]
;;;2181   	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;2182   	
;;;2183   	/* USART1 mode config */
;;;2184   	USART_InitStructure.USART_BaudRate = 9600;
00004e  f44f5016          MOV      r0,#0x2580
;;;2185   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000052  9002              STR      r0,[sp,#8]
;;;2186   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2187   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000054  f8ad4010          STRH     r4,[sp,#0x10]
;;;2188   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2189   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
;;;2190   	USART_Init(USART1, &USART_InitStructure);
00005a  4d18              LDR      r5,|L29.188|
00005c  f8ad400c          STRH     r4,[sp,#0xc]          ;2185
000060  f8ad0012          STRH     r0,[sp,#0x12]         ;2189
000064  f8ad400e          STRH     r4,[sp,#0xe]          ;2186
000068  f8ad4014          STRH     r4,[sp,#0x14]         ;2188
00006c  a902              ADD      r1,sp,#8
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       USART_Init
;;;2191   	
;;;2192   	/******使能串口接收中断******************/
;;;2193   	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	
000074  2201              MOVS     r2,#1
000076  f2405125          MOV      r1,#0x525
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_ITConfig
;;;2194   	USART_Cmd(USART1, ENABLE);//使能串口1
000080  2101              MOVS     r1,#1
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USART_Cmd
;;;2195   	USART_ClearFlag(USART1, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       USART_ClearFlag
000090  f44f60e0          MOV      r0,#0x700
000094  f7fffffe          BL       NVIC_PriorityGroupConfig
000098  2025              MOVS     r0,#0x25
00009a  f88d0018          STRB     r0,[sp,#0x18]
00009e  f88d4019          STRB     r4,[sp,#0x19]
0000a2  2004              MOVS     r0,#4
0000a4  f88d001a          STRB     r0,[sp,#0x1a]
0000a8  2001              MOVS     r0,#1
0000aa  f88d001b          STRB     r0,[sp,#0x1b]
0000ae  a806              ADD      r0,sp,#0x18
0000b0  f7fffffe          BL       NVIC_Init
;;;2196     
;;;2197   	USART1_NVIC_Config();//串口中断配置
;;;2198   }			
0000b4  b008              ADD      sp,sp,#0x20
0000b6  bd70              POP      {r4-r6,pc}
;;;2199   
                          ENDP

                  |L29.184|
                          DCD      0x40020000
                  |L29.188|
                          DCD      0x40011000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UART_Buffer_Rece
                          %        16

                          AREA ||area_number.32||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.bss||
                  UART_Buffer_Send
                          %        20
                  USART_RX_BUF
                          %        200
                  MasterSendbuf
                          %        128
                  MasterRecbuf
                          %        128

                          AREA ||.data||, DATA, ALIGN=2

                  USART3_Recive_leng
000000  00                DCB      0x00
                  USART3_Recive_flg
000001  00                DCB      0x00
                  UART_Buffer_Send_pointer
000002  00                DCB      0x00
                  |symbol_number.109|
000003  00                DCB      0x00
                  Transmit_BUFFERsize
000004  00                DCB      0x00
                  MODE
000005  00                DCB      0x00
                  mainswitch
000006  00                DCB      0x00
                  Rraly
000007  00                DCB      0x00
                  sendwait
000008  00                DCB      0x00
                  listsend
000009  00                DCB      0x00
                  waitcommand1
00000a  00                DCB      0x00
                  waitcommand2
00000b  00                DCB      0x00
                  listocwatch
00000c  00                DCB      0x00
                  listpowwatch1
00000d  00                DCB      0x00
                  listpowwatch2
00000e  0000              DCB      0x00,0x00
                  USART_RX_STA
000010  0000              DCW      0x0000
                  USART_RX_CNT
000012  0000              DCW      0x0000
                  ||x1||
                          DCD      0x00000000
                  ||y1||
                          DCD      0x00000000
                  ||x2||
                          DCD      0x00000000
                  ||y2||
                          DCD      0x00000000
                  ||x3||
                          DCD      0x00000000
                  ||y3||
                          DCD      0x00000000
                  ||x4||
                          DCD      0x00000000
                  ||y4||
                          DCD      0x00000000
                  ||x5||
                          DCD      0x00000000
                  ||y5||
                          DCD      0x00000000
                  ||x6||
                          DCD      0x00000000
                  ||y6||
                          DCD      0x00000000
                  ||x7||
                          DCD      0x00000000
                  ||y7||
                          DCD      0x00000000
                  ||x8||
                          DCD      0x00000000
                  ||y8||
                          DCD      0x00000000
                  watchtest
                          DCD      0x00000000
                  CmdStr
000058  53544154          DCB      0x53,0x54,0x41,0x54
00005c  55535f00          DCB      0x55,0x53,0x5f,0x00
000060  004d4f44          DCB      0x00,0x4d,0x4f,0x44
000064  5f000000          DCB      0x5f,0x00,0x00,0x00
000068  00005452          DCB      0x00,0x00,0x54,0x52
00006c  49475f00          DCB      0x49,0x47,0x5f,0x00
000070  00000053          DCB      0x00,0x00,0x00,0x53
000074  45545041          DCB      0x45,0x54,0x50,0x41
000078  52415f00          DCB      0x52,0x41,0x5f,0x00
00007c  5345544c          DCB      0x53,0x45,0x54,0x4c
000080  4953545f          DCB      0x49,0x53,0x54,0x5f
000084  004f5052          DCB      0x00,0x4f,0x50,0x52
000088  45534554          DCB      0x45,0x53,0x45,0x54
00008c  5f00504f          DCB      0x5f,0x00,0x50,0x4f
000090  57495f00          DCB      0x57,0x49,0x5f,0x00
000094  00000041          DCB      0x00,0x00,0x00,0x41
000098  4443565f          DCB      0x44,0x43,0x56,0x5f
00009c  00000000          DCB      0x00,0x00,0x00,0x00
0000a0  4c4f5749          DCB      0x4c,0x4f,0x57,0x49
0000a4  5f000000          DCB      0x5f,0x00,0x00,0x00
0000a8  00484f52          DCB      0x00,0x48,0x4f,0x52
0000ac  4c5f0000          DCB      0x4c,0x5f,0x00,0x00
0000b0  00004c56          DCB      0x00,0x00,0x4c,0x56
0000b4  4c5f0000          DCB      0x4c,0x5f,0x00,0x00
0000b8  00000053          DCB      0x00,0x00,0x00,0x53
0000bc  57495443          DCB      0x57,0x49,0x54,0x43
0000c0  485f0000          DCB      0x48,0x5f,0x00,0x00
0000c4  43414c56          DCB      0x43,0x41,0x4c,0x56
0000c8  5f000000          DCB      0x5f,0x00,0x00,0x00
0000cc  0043414c          DCB      0x00,0x43,0x41,0x4c
0000d0  495f0000          DCB      0x49,0x5f,0x00,0x00
0000d4  00004341          DCB      0x00,0x00,0x43,0x41
0000d8  4c525f00          DCB      0x4c,0x52,0x5f,0x00
0000dc  00000044          DCB      0x00,0x00,0x00,0x44
0000e0  41435f00          DCB      0x41,0x43,0x5f,0x00
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
0000e8  4f564552          DCB      0x4f,0x56,0x45,0x52
0000ec  5f000000          DCB      0x5f,0x00,0x00,0x00
0000f0  0054454d          DCB      0x00,0x54,0x45,0x4d
0000f4  505f0000          DCB      0x50,0x5f,0x00,0x00
0000f8  0000424f          DCB      0x00,0x00,0x42,0x4f
0000fc  4f545f00          DCB      0x4f,0x54,0x5f,0x00
000100  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  UART_Buffer_Size
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=0

                          EXPORTAS ||area_number.36||, ||.data||
                  t_USART
000000  00                DCB      0x00

                          AREA ||area_number.37||, DATA, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.data||
                  powsetdelay
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\drive\\usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_usart_c_7cc17ae7____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REVSH|
#line 144
|__asm___7_usart_c_7cc17ae7____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
