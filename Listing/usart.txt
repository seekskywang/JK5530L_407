; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\usart.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\usart.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=537 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\usart.crf --no_multibyte_chars ..\drive\usart.c]
                          THUMB

                          AREA ||i.CalHandle||, CODE, READONLY, ALIGN=2

                  CalHandle PROC
;;;523    //校准处理
;;;524    void CalHandle(u8 mode,u8 range,u32 data)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;525    {
000004  4615              MOV      r5,r2
;;;526    	if(mode == 0)//测量电压
;;;527    	{
;;;528    		if(range == 0)//低档位低段
;;;529    		{
;;;530    			calflag = 1;
000006  4eff              LDR      r6,|L1.1028|
;;;531    			LOAD_V_SW = 0;
000008  4aff              LDR      r2,|L1.1032|
00000a  2700              MOVS     r7,#0                 ;525
00000c  f04f0801          MOV      r8,#1                 ;530
;;;532    			x1 = Vmon_Load_value;
000010  4cfe              LDR      r4,|L1.1036|
;;;533    			y1 = data;
;;;534    		}else if(range == 1){//低档位高段
;;;535    			
;;;536    			x2 = Vmon_Load_value;
;;;537    			y2 = data;
;;;538    			CalPara.TestLV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;539    			CalPara.OffsetLV[0] = (float)y2 - CalPara.TestLV[0]*(float)x2;
;;;540    			
;;;541    			Flag_DAC_OFF=0;
000012  f8dfc400          LDR      r12,|L1.1044|
000016  f8dfa3f8          LDR      r10,|L1.1040|
;;;542    			calflag = 0;
;;;543    		}else if(range == 2){//高档位低段
;;;544    			calflag = 1;
;;;545    			LOAD_V_SW = 1;
;;;546    			x1 = Vmon_Load_value;
;;;547    			y1 = data/10;
;;;548    		}else if(range == 3){//高档位高段
;;;549    			
;;;550    			x2 = Vmon_Load_value;
;;;551    			y2 = data/10;
;;;552    			CalPara.TestLV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;553    			CalPara.OffsetLV[1] = (float)y2 - CalPara.TestLV[1]*(float)x2;
;;;554    				//参数写进FLASH
;;;555    			Flag_DAC_OFF=0;
;;;556    			calflag = 0;
;;;557    		}else if(range == 4){//电源控制电压和测量1
;;;558    			calflag = 1;
;;;559    			Contr_Voltage = 3500;
;;;560    			Contr_Current = 5000;
;;;561    			OnOff_GPOI_ResetSet(0,1);
;;;562    		}else if(range == 5){//电源控制电压和测量2
;;;563    			x1 = data;
;;;564    			y1 = Contr_Voltage;
;;;565    			x3 = Vmon_POWE_value;
;;;566    			y3 = data;
;;;567    			Contr_Voltage = 10000;
;;;568    			Contr_Current = 5000;
;;;569    		}else if(range == 6){//电源控制电压和测量3
;;;570    			x2 = data;
;;;571    			y2 = Contr_Voltage;
;;;572    			x4 = Vmon_POWE_value;
;;;573    			y4 = data;
;;;574    			
;;;575    			CalPara.SetPV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;576    			CalPara.OffsetSetPV[0] = (float)y2 - CalPara.SetPV[0]*(float)x2;
;;;577    			
;;;578    			CalPara.TestPV[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;579    			CalPara.OffsetPV[0] = (float)y4 - CalPara.TestPV[0]*(float)x4;
;;;580    			
;;;581    			Flag_DAC_OFF=0;
;;;582    			calflag = 0;
;;;583    			Off_GPOI_ResetSet();
;;;584    		}else if(range == 7){//CV控制低档1
;;;585    			LOAD_MODE = 1;
;;;586    			LOAD_V_SW=0;
;;;587    			GPIO_ResetBits(GPIOB,GPIO_Pin_1);//电压档位为低档
;;;588    			calflag = 1;
;;;589    			Contr_Laod = 1000;
00001a  f8df93fc          LDR      r9,|L1.1048|
00001e  f8dc3000          LDR      r3,[r12,#0]           ;541
000022  edd40a05          VLDR     s1,[r4,#0x14]         ;532
000026  ed940a06          VLDR     s0,[r4,#0x18]         ;532
00002a  edd42a0a          VLDR     s5,[r4,#0x28]         ;532
00002e  ed942a09          VLDR     s4,[r4,#0x24]         ;532
000032  f0230308          BIC      r3,r3,#8              ;541
000036  b130              CBZ      r0,|L1.70|
;;;590    			OnOff_GPOI_ResetSet(2,1);
;;;591    		}else if(range == 8){//CV控制低档2
;;;592    			LOAD_MODE = 1;
;;;593    			LOAD_V_SW=0;
;;;594    			GPIO_ResetBits(GPIOB,GPIO_Pin_1);//电压档位为低档
;;;595    			x1 = data;
;;;596    			y1 = Contr_Laod;
;;;597    			Contr_Laod = 20000;
;;;598    //			OnOff_GPOI_ResetSet(2,1);
;;;599    		}else if(range == 9){//CV控制低档3
;;;600    			x2 = data;
;;;601    			y2 = Contr_Laod;
;;;602    			CalPara.SetCV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;603    			CalPara.OffsetCV[0] = (float)y2 - CalPara.SetCV[0]*(float)x2;
;;;604    				//参数写进FLASH
;;;605    			Flag_DAC_OFF=0;
;;;606    			calflag = 0;
;;;607    			Off_GPOI_ResetSet();
;;;608    		}else if(range == 10){//CV控制高档1
;;;609    			LOAD_MODE = 1;
;;;610    			LOAD_V_SW=1;
;;;611    			GPIO_SetBits(GPIOB,GPIO_Pin_1);//电压档位为高档
;;;612    			calflag = 1;
;;;613    			Contr_Laod = 1000;
;;;614    			OnOff_GPOI_ResetSet(2,1);
;;;615    		}else if(range == 11){//CV控制高档2
;;;616    			LOAD_MODE = 1;
;;;617    			LOAD_V_SW=1;
;;;618    			GPIO_SetBits(GPIOB,GPIO_Pin_1);//电压档位为高档
;;;619    			x1 = data/10;
;;;620    			y1 = Contr_Laod;
;;;621    			Contr_Laod = 20000;
;;;622    			OnOff_GPOI_ResetSet(2,1);
;;;623    		}else if(range == 12){//CV控制高档3
;;;624    			x2 = data/10;
;;;625    			y2 = Contr_Laod;
;;;626    			CalPara.SetCV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;627    			CalPara.OffsetCV[1] = (float)y2 - CalPara.SetCV[1]*(float)x2;
;;;628    				//参数写进FLASH
;;;629    			Flag_DAC_OFF=0;
;;;630    			calflag = 0;
;;;631    			Off_GPOI_ResetSet();
;;;632    		}
;;;633    	}else if(mode == 1){
;;;634    		if(range == 0)//负载电流低档位1
;;;635    		{		
;;;636    			LOAD_I_SW = 0;
;;;637    			Contr_Laod = 6000;
;;;638    			calflag = 1;
;;;639    			OnOff_GPOI_ResetSet(2,1);
;;;640    		}
;;;641    		else if(range == 1)//负载电流低档位2
;;;642    		{
;;;643    			LOAD_I_SW = 0;			
;;;644    			x1 = data;
;;;645    			y1 = Contr_Laod;
;;;646    			x4 = Imon_Load_value;
;;;647    			y4 = data;
;;;648    			Contr_Laod = 20000;
;;;649    		}else if(range == 2)//负载电流低档位3
;;;650    		{
;;;651    			LOAD_I_SW = 0;			
;;;652    			x2 = data;
;;;653    			y2 = Contr_Laod;
;;;654    			x5 = Imon_Load_value;
;;;655    			y5 = data;
;;;656    			Contr_Laod = 60000;
;;;657    		}else if(range == 3){//负载电流低档位4
;;;658    			
;;;659    			x3 = data;
;;;660    			y3 = Contr_Laod;
;;;661    			x6 = Imon_Load_value;
;;;662    			y6 = data;
;;;663    			
;;;664    			CalPara.SetLC[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;665    			CalPara.OffsetLC[0] = (float)y2 - CalPara.SetLC[0]*(float)x2;
;;;666    			CalPara.SetLC[1] = ((float)y3 - (float)y2)/((float)x3 - (float)x2);
;;;667    			CalPara.OffsetLC[1] = (float)y3 - CalPara.SetLC[1]*(float)x3;
;;;668    			
;;;669    			CalPara.TestLC[0] = ((float)y5 - (float)y4)/((float)x5 - (float)x4);
;;;670    			CalPara.OffsetTestLC[0] = (float)y5 - CalPara.TestLC[0]*(float)x5;
;;;671    			CalPara.TestLC[1] = ((float)y6 - (float)y5)/((float)x6 - (float)x5);
;;;672    			CalPara.OffsetTestLC[1] = (float)y6 - CalPara.TestLC[1]*(float)x6;
;;;673    				
;;;674    			Flag_DAC_OFF =0;
;;;675    			calflag = 0;
;;;676    			Off_GPOI_ResetSet();
;;;677    		}else if(range == 4){//负载电流高档位1
;;;678    			LOAD_I_SW = 1;
;;;679    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
000038  f44f6e00          MOV      lr,#0x800
00003c  2801              CMP      r0,#1                 ;633
00003e  d07c              BEQ      |L1.314|
;;;680    			Contr_Laod = 6000;
;;;681    			calflag = 1;
;;;682    			OnOff_GPOI_ResetSet(2,1);
;;;683    		}else if(range == 5){//负载电流高档位2
;;;684    			
;;;685    			LOAD_I_SW = 1;
;;;686    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;687    			x1 = data;
;;;688    			y1 = Contr_Laod;
;;;689    			x5 = Imon_Load_value;
;;;690    			y5 = data;
;;;691    			Contr_Laod = 12000;
;;;692    		}else if(range == 6){//负载电流高档位3
;;;693    			
;;;694    			LOAD_I_SW = 1;
;;;695    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;696    			x2 = data;
;;;697    			y2 = Contr_Laod;
;;;698    			x6 = Imon_Load_value;
;;;699    			y6 = data;
;;;700    			Contr_Laod = 20000;
;;;701    		}else if(range == 7){//负载电流高档位4
;;;702    			
;;;703    			LOAD_I_SW = 1;
;;;704    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;705    			x3 = data;
;;;706    			y3 = Contr_Laod;
;;;707    			x7 = Imon_Load_value;
;;;708    			y7 = data;
;;;709    			Contr_Laod = 40000;
;;;710    		}else if(range == 8){//负载电流高档位5
;;;711    			
;;;712    			x4 = data;
;;;713    			y4 = Contr_Laod;
;;;714    			x8 = Imon_Load_value;
;;;715    			y8 = data;
;;;716    			
;;;717    			CalPara.SetLC[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;718    			CalPara.OffsetLC[2] = (float)y2 - CalPara.SetLC[2]*(float)x2;
;;;719    			CalPara.SetLC[3] = ((float)y3 - (float)y2)/((float)x3 - (float)x2);
;;;720    			CalPara.OffsetLC[3] = (float)y3 - CalPara.SetLC[3]*(float)x3;
;;;721    			CalPara.SetLC[4] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;722    			CalPara.OffsetLC[4] = (float)y4 - CalPara.SetLC[4]*(float)x4;
;;;723    			
;;;724    			CalPara.TestLC[2] = ((float)y6 - (float)y5)/((float)x6 - (float)x5);
;;;725    			CalPara.OffsetTestLC[2] = (float)y6 - CalPara.TestLC[2]*(float)x6;
;;;726    			CalPara.TestLC[3] = ((float)y7 - (float)y6)/((float)x7 - (float)x6);
;;;727    			CalPara.OffsetTestLC[3] = (float)y7 - CalPara.TestLC[3]*(float)x7;
;;;728    			CalPara.TestLC[4] = ((float)y8 - (float)y7)/((float)x8 - (float)x7);
;;;729    			CalPara.OffsetTestLC[4] = (float)y8 - CalPara.TestLC[4]*(float)x8;
;;;730    				
;;;731    			Flag_DAC_OFF =0;
;;;732    			calflag = 0;
;;;733    			Off_GPOI_ResetSet();
;;;734    		}else if(range == 9){//电源电流1
;;;735    			Contr_Voltage = 3500;
;;;736    			Contr_Current = 4000;
;;;737    			calflag = 1;
;;;738    			OnOff_GPOI_ResetSet(0,1);
;;;739    		}else if(range == 10){//电源电流2
;;;740    			
;;;741    			x1 = data;
;;;742    			y1 = Contr_Current;
;;;743    			x3 = Imon_POWE_value;
;;;744    			y3 = data;
;;;745    			Contr_Voltage = 3500;
;;;746    			Contr_Current = 14000;
;;;747    		}else if(range == 11){//电源电流3
;;;748    			
;;;749    			x2 = data;
;;;750    			y2 = Contr_Current;
;;;751    			x4 = Imon_POWE_value;
;;;752    			y4 = data;
;;;753    			
;;;754    			CalPara.SetPC[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;755    			CalPara.OffsetPC[0] = (float)y2 - CalPara.SetPC[0]*(float)x2;
;;;756    			
;;;757    			CalPara.TestPC[0] = ((float)y4 - (float)y3)/((float)x4 - (float)x3);
;;;758    			CalPara.OffsetTestPC[0] = (float)y4 - CalPara.TestPC[0]*(float)x4;
;;;759    			
;;;760    			Flag_DAC_OFF=0;
;;;761    			calflag = 0;
;;;762    			Off_GPOI_ResetSet();
;;;763    		}
;;;764    	}else if(mode == 2){
000040  2802              CMP      r0,#2
000042  d07b              BEQ      |L1.316|
000044  e254              B        |L1.1264|
                  |L1.70|
000046  48f5              LDR      r0,|L1.1052|
000048  b1f9              CBZ      r1,|L1.138|
00004a  2901              CMP      r1,#1                 ;534
00004c  d021              BEQ      |L1.146|
00004e  f04f0b0a          MOV      r11,#0xa              ;547
000052  2902              CMP      r1,#2                 ;543
000054  d041              BEQ      |L1.218|
000056  2903              CMP      r1,#3                 ;548
000058  d049              BEQ      |L1.238|
00005a  f2413088          MOV      r0,#0x1388            ;560
00005e  2904              CMP      r1,#4                 ;557
000060  d071              BEQ      |L1.326|
000062  f8dfe3bc          LDR      lr,|L1.1056|
000066  2905              CMP      r1,#5                 ;562
000068  d07b              BEQ      |L1.354|
00006a  2906              CMP      r1,#6                 ;569
00006c  d069              BEQ      |L1.322|
00006e  48ed              LDR      r0,|L1.1060|
000070  2907              CMP      r1,#7                 ;584
000072  d067              BEQ      |L1.324|
000074  2908              CMP      r1,#8                 ;591
000076  d06f              BEQ      |L1.344|
000078  2909              CMP      r1,#9                 ;599
00007a  d06e              BEQ      |L1.346|
00007c  290a              CMP      r1,#0xa               ;608
00007e  d06d              BEQ      |L1.348|
000080  290b              CMP      r1,#0xb               ;615
000082  d06c              BEQ      |L1.350|
000084  290c              CMP      r1,#0xc               ;623
000086  d06b              BEQ      |L1.352|
000088  e232              B        |L1.1264|
                  |L1.138|
00008a  f8868000          STRB     r8,[r6,#0]            ;530
00008e  61d7              STR      r7,[r2,#0x1c]         ;531  ; Run_Control
000090  e3a9              B        |L1.2022|
                  |L1.146|
000092  8800              LDRH     r0,[r0,#0]            ;536  ; Vmon_Load_value
000094  ee015a10          VMOV     s2,r5                 ;538
000098  eeb80a40          VCVT.F32.U32 s0,s0                 ;538
00009c  eef80a60          VCVT.F32.U32 s1,s1                 ;538
0000a0  eeb81a41          VCVT.F32.U32 s2,s2                 ;538
0000a4  e9c40507          STRD     r0,r5,[r4,#0x1c]      ;536
0000a8  ee311a40          VSUB.F32 s2,s2,s0              ;538
0000ac  ee000a10          VMOV     s0,r0                 ;538
0000b0  eeb80a40          VCVT.F32.U32 s0,s0                 ;538
0000b4  ee300a60          VSUB.F32 s0,s0,s1              ;538
0000b8  eec10a00          VDIV.F32 s1,s2,s0              ;538
0000bc  ee000a10          VMOV     s0,r0                 ;539
0000c0  eeb81a40          VCVT.F32.U32 s2,s0                 ;539
0000c4  ee005a10          VMOV     s0,r5                 ;539
0000c8  eeb80a40          VCVT.F32.U32 s0,s0                 ;539
0000cc  edca0a00          VSTR     s1,[r10,#0]           ;538
0000d0  ee000ac1          VMLS.F32 s0,s1,s2              ;539
0000d4  ed8a0a04          VSTR     s0,[r10,#0x10]        ;539
0000d8  e3ab              B        |L1.2098|
                  |L1.218|
0000da  f8868000          STRB     r8,[r6,#0]            ;544
0000de  f8c2801c          STR      r8,[r2,#0x1c]         ;545  ; Run_Control
0000e2  8800              LDRH     r0,[r0,#0]            ;546  ; Vmon_Load_value
0000e4  6160              STR      r0,[r4,#0x14]         ;547  ; x1
0000e6  fbb5f0fb          UDIV     r0,r5,r11             ;547
0000ea  61a0              STR      r0,[r4,#0x18]         ;547  ; y1
0000ec  e200              B        |L1.1264|
                  |L1.238|
0000ee  8800              LDRH     r0,[r0,#0]            ;550  ; Vmon_Load_value
0000f0  fbb5f1fb          UDIV     r1,r5,r11             ;551
0000f4  ee011a10          VMOV     s2,r1                 ;552
0000f8  eeb80a40          VCVT.F32.U32 s0,s0                 ;552
0000fc  eef80a60          VCVT.F32.U32 s1,s1                 ;552
000100  eeb81a41          VCVT.F32.U32 s2,s2                 ;552
000104  e9c40107          STRD     r0,r1,[r4,#0x1c]      ;552
000108  ee311a40          VSUB.F32 s2,s2,s0              ;552
00010c  ee000a10          VMOV     s0,r0                 ;552
000110  eeb80a40          VCVT.F32.U32 s0,s0                 ;552
000114  ee300a60          VSUB.F32 s0,s0,s1              ;552
000118  eec10a00          VDIV.F32 s1,s2,s0              ;552
00011c  ee000a10          VMOV     s0,r0                 ;553
000120  eeb81a40          VCVT.F32.U32 s2,s0                 ;553
000124  ee001a10          VMOV     s0,r1                 ;553
000128  eeb80a40          VCVT.F32.U32 s0,s0                 ;553
00012c  edca0a01          VSTR     s1,[r10,#4]           ;552
000130  ee000ac1          VMLS.F32 s0,s1,s2              ;553
000134  ed8a0a05          VSTR     s0,[r10,#0x14]        ;553
000138  e37b              B        |L1.2098|
                  |L1.314|
00013a  e0ea              B        |L1.786|
                  |L1.316|
00013c  e32a              B        |L1.1940|
00013e  e002              B        |L1.326|
000140  e00f              B        |L1.354|
                  |L1.322|
000142  e01b              B        |L1.380|
                  |L1.324|
000144  e064              B        |L1.528|
                  |L1.326|
000146  f8868000          STRB     r8,[r6,#0]            ;558
00014a  49b7              LDR      r1,|L1.1064|
00014c  f64052ac          MOV      r2,#0xdac             ;559
000150  800a              STRH     r2,[r1,#0]            ;559
000152  49b6              LDR      r1,|L1.1068|
000154  8008              STRH     r0,[r1,#0]            ;560
000156  e2c3              B        |L1.1760|
                  |L1.344|
000158  e061              B        |L1.542|
                  |L1.346|
00015a  e06c              B        |L1.566|
                  |L1.348|
00015c  e090              B        |L1.640|
                  |L1.350|
00015e  e09f              B        |L1.672|
                  |L1.352|
000160  e0b0              B        |L1.708|
                  |L1.354|
000162  49b1              LDR      r1,|L1.1064|
000164  6165              STR      r5,[r4,#0x14]         ;564  ; x1
000166  880a              LDRH     r2,[r1,#0]            ;564  ; Contr_Voltage
000168  61a2              STR      r2,[r4,#0x18]         ;565  ; y1
00016a  f8be2000          LDRH     r2,[lr,#0]            ;565  ; Vmon_POWE_value
00016e  e9c42509          STRD     r2,r5,[r4,#0x24]      ;565
000172  f2427210          MOV      r2,#0x2710            ;567
000176  800a              STRH     r2,[r1,#0]            ;567
000178  49ac              LDR      r1,|L1.1068|
00017a  e2c0              B        |L1.1790|
                  |L1.380|
00017c  48aa              LDR      r0,|L1.1064|
00017e  61e5              STR      r5,[r4,#0x1c]         ;571  ; x2
000180  8801              LDRH     r1,[r0,#0]            ;571  ; Contr_Voltage
000182  6221              STR      r1,[r4,#0x20]         ;572  ; y2
000184  f8be0000          LDRH     r0,[lr,#0]            ;572  ; Vmon_POWE_value
000188  ee011a10          VMOV     s2,r1                 ;575
00018c  eeb80a40          VCVT.F32.U32 s0,s0                 ;575
000190  eef80a60          VCVT.F32.U32 s1,s1                 ;575
000194  eeb81a41          VCVT.F32.U32 s2,s2                 ;575
000198  e9c4050b          STRD     r0,r5,[r4,#0x2c]      ;572
00019c  ee311a40          VSUB.F32 s2,s2,s0              ;575
0001a0  ee005a10          VMOV     s0,r5                 ;575
0001a4  4652              MOV      r2,r10                ;575
0001a6  eeb80a40          VCVT.F32.U32 s0,s0                 ;575
0001aa  ee300a60          VSUB.F32 s0,s0,s1              ;575
0001ae  eec10a00          VDIV.F32 s1,s2,s0              ;575
0001b2  ee005a10          VMOV     s0,r5                 ;576
0001b6  eeb81a40          VCVT.F32.U32 s2,s0                 ;576
0001ba  ee001a10          VMOV     s0,r1                 ;576
0001be  eeb80a40          VCVT.F32.U32 s0,s0                 ;576
0001c2  edca0a02          VSTR     s1,[r10,#8]           ;575
0001c6  ee000ac1          VMLS.F32 s0,s1,s2              ;576
0001ca  eef80a62          VCVT.F32.U32 s1,s5                 ;578
0001ce  ed8a0a06          VSTR     s0,[r10,#0x18]        ;576
0001d2  ee005a10          VMOV     s0,r5                 ;578
0001d6  eeb80a40          VCVT.F32.U32 s0,s0                 ;578
0001da  ee301a60          VSUB.F32 s2,s0,s1              ;578
0001de  ee000a10          VMOV     s0,r0                 ;578
0001e2  eef80a42          VCVT.F32.U32 s1,s4                 ;578
0001e6  eeb80a40          VCVT.F32.U32 s0,s0                 ;578
0001ea  ee300a60          VSUB.F32 s0,s0,s1              ;578
0001ee  eec10a00          VDIV.F32 s1,s2,s0              ;578
0001f2  ee000a10          VMOV     s0,r0                 ;579
0001f6  eeb81a40          VCVT.F32.U32 s2,s0                 ;579
0001fa  ee005a10          VMOV     s0,r5                 ;579
0001fe  eeb80a40          VCVT.F32.U32 s0,s0                 ;579
000202  edc20a03          VSTR     s1,[r2,#0xc]          ;578
000206  ee000ac1          VMLS.F32 s0,s1,s2              ;579
00020a  ed8a0a07          VSTR     s0,[r10,#0x1c]        ;579
00020e  e257              B        |L1.1728|
                  |L1.528|
000210  f8c28018          STR      r8,[r2,#0x18]         ;585  ; Run_Control
000214  61d7              STR      r7,[r2,#0x1c]         ;586  ; Run_Control
000216  2102              MOVS     r1,#2                 ;587
000218  f7fffffe          BL       GPIO_ResetBits
00021c  e037              B        |L1.654|
                  |L1.542|
00021e  f8c28018          STR      r8,[r2,#0x18]         ;592  ; Run_Control
000222  61d7              STR      r7,[r2,#0x1c]         ;593  ; Run_Control
000224  2102              MOVS     r1,#2                 ;594
000226  f7fffffe          BL       GPIO_ResetBits
00022a  6165              STR      r5,[r4,#0x14]         ;596  ; x1
00022c  f8b91000          LDRH     r1,[r9,#0]            ;596  ; Contr_Laod
000230  4648              MOV      r0,r9                 ;596
000232  61a1              STR      r1,[r4,#0x18]         ;597  ; y1
000234  e17e              B        |L1.1332|
                  |L1.566|
000236  61e5              STR      r5,[r4,#0x1c]         ;601  ; x2
000238  f8b90000          LDRH     r0,[r9,#0]            ;601  ; Contr_Laod
00023c  eeb80a40          VCVT.F32.U32 s0,s0                 ;602
000240  ee010a10          VMOV     s2,r0                 ;602
000244  eef80a60          VCVT.F32.U32 s1,s1                 ;602
000248  6220              STR      r0,[r4,#0x20]         ;602  ; y2
00024a  eeb81a41          VCVT.F32.U32 s2,s2                 ;602
00024e  ee311a40          VSUB.F32 s2,s2,s0              ;602
000252  ee005a10          VMOV     s0,r5                 ;602
000256  eeb80a40          VCVT.F32.U32 s0,s0                 ;602
00025a  ee300a60          VSUB.F32 s0,s0,s1              ;602
00025e  eec10a00          VDIV.F32 s1,s2,s0              ;602
000262  ee005a10          VMOV     s0,r5                 ;603
000266  eeb81a40          VCVT.F32.U32 s2,s0                 ;603
00026a  ee000a10          VMOV     s0,r0                 ;603
00026e  eeb80a40          VCVT.F32.U32 s0,s0                 ;603
000272  edca0a0d          VSTR     s1,[r10,#0x34]        ;602
000276  ee000ac1          VMLS.F32 s0,s1,s2              ;603
00027a  ed8a0a1b          VSTR     s0,[r10,#0x6c]        ;603
00027e  e21f              B        |L1.1728|
                  |L1.640|
000280  f8c28018          STR      r8,[r2,#0x18]         ;609  ; Run_Control
000284  f8c2801c          STR      r8,[r2,#0x1c]         ;610  ; Run_Control
000288  2102              MOVS     r1,#2                 ;611
00028a  f7fffffe          BL       GPIO_SetBits
                  |L1.654|
00028e  f8868000          STRB     r8,[r6,#0]            ;588
000292  f44f707a          MOV      r0,#0x3e8             ;589
000296  f8a90000          STRH     r0,[r9,#0]            ;589
                  |L1.666|
00029a  2101              MOVS     r1,#1                 ;590
00029c  2002              MOVS     r0,#2                 ;590
00029e  e125              B        |L1.1260|
                  |L1.672|
0002a0  f8c28018          STR      r8,[r2,#0x18]         ;616  ; Run_Control
0002a4  f8c2801c          STR      r8,[r2,#0x1c]         ;617  ; Run_Control
0002a8  2102              MOVS     r1,#2                 ;618
0002aa  f7fffffe          BL       GPIO_SetBits
0002ae  fbb5f0fb          UDIV     r0,r5,r11             ;619
0002b2  6160              STR      r0,[r4,#0x14]         ;620  ; x1
0002b4  f8b91000          LDRH     r1,[r9,#0]            ;620  ; Contr_Laod
0002b8  61a1              STR      r1,[r4,#0x18]         ;621  ; y1
0002ba  f6446120          MOV      r1,#0x4e20            ;621
0002be  f8a91000          STRH     r1,[r9,#0]            ;621
0002c2  e7ea              B        |L1.666|
                  |L1.708|
0002c4  fbb5f1fb          UDIV     r1,r5,r11             ;624
0002c8  61e1              STR      r1,[r4,#0x1c]         ;625  ; x2
0002ca  f8b90000          LDRH     r0,[r9,#0]            ;625  ; Contr_Laod
0002ce  eeb80a40          VCVT.F32.U32 s0,s0                 ;626
0002d2  ee010a10          VMOV     s2,r0                 ;626
0002d6  eef80a60          VCVT.F32.U32 s1,s1                 ;626
0002da  6220              STR      r0,[r4,#0x20]         ;626  ; y2
0002dc  eeb81a41          VCVT.F32.U32 s2,s2                 ;626
0002e0  ee311a40          VSUB.F32 s2,s2,s0              ;626
0002e4  ee001a10          VMOV     s0,r1                 ;626
0002e8  eeb80a40          VCVT.F32.U32 s0,s0                 ;626
0002ec  ee300a60          VSUB.F32 s0,s0,s1              ;626
0002f0  eec10a00          VDIV.F32 s1,s2,s0              ;626
0002f4  ee001a10          VMOV     s0,r1                 ;627
0002f8  eeb81a40          VCVT.F32.U32 s2,s0                 ;627
0002fc  ee000a10          VMOV     s0,r0                 ;627
000300  eeb80a40          VCVT.F32.U32 s0,s0                 ;627
000304  edca0a0e          VSTR     s1,[r10,#0x38]        ;626
000308  ee000ac1          VMLS.F32 s0,s1,s2              ;627
00030c  ed8a0a1c          VSTR     s0,[r10,#0x70]        ;627
000310  e1d6              B        |L1.1728|
                  |L1.786|
000312  b311              CBZ      r1,|L1.858|
000314  f8dfb118          LDR      r11,|L1.1072|
000318  2901              CMP      r1,#1                 ;641
00031a  d020              BEQ      |L1.862|
00031c  2902              CMP      r1,#2                 ;649
00031e  d029              BEQ      |L1.884|
000320  483a              LDR      r0,|L1.1036|
000322  2903              CMP      r1,#3                 ;657
000324  edd03a0e          VLDR     s7,[r0,#0x38]         ;532
000328  ed903a0d          VLDR     s6,[r0,#0x34]         ;532
00032c  edd01a08          VLDR     s3,[r0,#0x20]         ;532
000330  ed901a07          VLDR     s2,[r0,#0x1c]         ;532
000334  d02c              BEQ      |L1.912|
000336  2904              CMP      r1,#4                 ;677
000338  d07e              BEQ      |L1.1080|
00033a  2905              CMP      r1,#5                 ;683
00033c  d07d              BEQ      |L1.1082|
00033e  2906              CMP      r1,#6                 ;692
000340  d07c              BEQ      |L1.1084|
000342  2907              CMP      r1,#7                 ;701
000344  d07b              BEQ      |L1.1086|
000346  2908              CMP      r1,#8                 ;710
000348  d07a              BEQ      |L1.1088|
00034a  2909              CMP      r1,#9                 ;734
00034c  d079              BEQ      |L1.1090|
00034e  4839              LDR      r0,|L1.1076|
000350  290a              CMP      r1,#0xa               ;739
000352  d077              BEQ      |L1.1092|
000354  290b              CMP      r1,#0xb               ;747
000356  d076              BEQ      |L1.1094|
000358  e345              B        |L1.2534|
                  |L1.858|
00035a  6217              STR      r7,[r2,#0x20]         ;636  ; Run_Control
00035c  e0bf              B        |L1.1246|
                  |L1.862|
00035e  6217              STR      r7,[r2,#0x20]         ;643  ; Run_Control
000360  6165              STR      r5,[r4,#0x14]         ;645  ; x1
000362  f8b91000          LDRH     r1,[r9,#0]            ;645  ; Contr_Laod
000366  4648              MOV      r0,r9                 ;645
000368  61a1              STR      r1,[r4,#0x18]         ;646  ; y1
00036a  f8bb1000          LDRH     r1,[r11,#0]           ;646  ; Imon_Load_value
00036e  e9c4150b          STRD     r1,r5,[r4,#0x2c]      ;646
000372  e0df              B        |L1.1332|
                  |L1.884|
000374  6217              STR      r7,[r2,#0x20]         ;651  ; Run_Control
000376  61e5              STR      r5,[r4,#0x1c]         ;653  ; x2
000378  f8b91000          LDRH     r1,[r9,#0]            ;653  ; Contr_Laod
00037c  4648              MOV      r0,r9                 ;653
00037e  6221              STR      r1,[r4,#0x20]         ;654  ; y2
000380  f8bb1000          LDRH     r1,[r11,#0]           ;654  ; Imon_Load_value
000384  e9c4150d          STRD     r1,r5,[r4,#0x34]      ;654
000388  f64e2160          MOV      r1,#0xea60            ;656
                  |L1.908|
00038c  8001              STRH     r1,[r0,#0]            ;648
00038e  e32a              B        |L1.2534|
                  |L1.912|
000390  6265              STR      r5,[r4,#0x24]         ;660  ; x3
000392  f8b92000          LDRH     r2,[r9,#0]            ;660  ; Contr_Laod
000396  62a2              STR      r2,[r4,#0x28]         ;661  ; y3
000398  f8bb1000          LDRH     r1,[r11,#0]           ;661  ; Imon_Load_value
00039c  eeb82a61          VCVT.F32.U32 s4,s3                 ;664
0003a0  eeb80a40          VCVT.F32.U32 s0,s0                 ;664
0003a4  eef80a60          VCVT.F32.U32 s1,s1                 ;664
0003a8  e9c4150f          STRD     r1,r5,[r4,#0x3c]      ;664
0003ac  ee322a40          VSUB.F32 s4,s4,s0              ;664
0003b0  eeb80a41          VCVT.F32.U32 s0,s2                 ;664
0003b4  4650              MOV      r0,r10                ;664
0003b6  ee700a60          VSUB.F32 s1,s0,s1              ;664
0003ba  ee820a20          VDIV.F32 s0,s4,s1              ;664
0003be  eeb82a41          VCVT.F32.U32 s4,s2                 ;665
0003c2  eef80a61          VCVT.F32.U32 s1,s3                 ;665
0003c6  ed8a0a08          VSTR     s0,[r10,#0x20]        ;664
0003ca  ee400a42          VMLS.F32 s1,s0,s4              ;665
0003ce  ee002a10          VMOV     s0,r2                 ;666
0003d2  eeb80a40          VCVT.F32.U32 s0,s0                 ;666
0003d6  edca0a16          VSTR     s1,[r10,#0x58]        ;665
0003da  eef80a61          VCVT.F32.U32 s1,s3                 ;666
0003de  ee701a60          VSUB.F32 s3,s0,s1              ;666
0003e2  ee005a10          VMOV     s0,r5                 ;666
0003e6  eef80a41          VCVT.F32.U32 s1,s2                 ;666
0003ea  eeb80a40          VCVT.F32.U32 s0,s0                 ;666
0003ee  ee300a60          VSUB.F32 s0,s0,s1              ;666
0003f2  eec10a80          VDIV.F32 s1,s3,s0              ;666
0003f6  ee005a10          VMOV     s0,r5                 ;667
0003fa  eeb81a40          VCVT.F32.U32 s2,s0                 ;667
0003fe  edca0a09          VSTR     s1,[r10,#0x24]        ;666
000402  e021              B        |L1.1096|
                  |L1.1028|
                          DCD      calflag
                  |L1.1032|
                          DCD      Run_Control
                  |L1.1036|
                          DCD      ||.data||
                  |L1.1040|
                          DCD      CalPara
                  |L1.1044|
                          DCD      flagB
                  |L1.1048|
                          DCD      Contr_Laod
                  |L1.1052|
                          DCD      Vmon_Load_value
                  |L1.1056|
                          DCD      Vmon_POWE_value
                  |L1.1060|
                          DCD      0x40020400
                  |L1.1064|
                          DCD      Contr_Voltage
                  |L1.1068|
                          DCD      Contr_Current
                  |L1.1072|
                          DCD      Imon_Load_value
                  |L1.1076|
                          DCD      Imon_POWE_value
                  |L1.1080|
000438  e04b              B        |L1.1234|
                  |L1.1082|
00043a  e05a              B        |L1.1266|
                  |L1.1084|
00043c  e06b              B        |L1.1302|
                  |L1.1086|
00043e  e07c              B        |L1.1338|
                  |L1.1088|
000440  e08d              B        |L1.1374|
                  |L1.1090|
000442  e143              B        |L1.1740|
                  |L1.1092|
000444  e14f              B        |L1.1766|
                  |L1.1094|
000446  e15c              B        |L1.1794|
                  |L1.1096|
000448  ee002a10          VMOV     s0,r2                 ;667
00044c  eeb80a40          VCVT.F32.U32 s0,s0                 ;667
000450  ee000ac1          VMLS.F32 s0,s1,s2              ;667
000454  eef80a63          VCVT.F32.U32 s1,s7                 ;669
000458  eeb81a43          VCVT.F32.U32 s2,s6                 ;669
00045c  ed800a17          VSTR     s0,[r0,#0x5c]         ;667
000460  ed940a0c          VLDR     s0,[r4,#0x30]         ;669
000464  eeb80a40          VCVT.F32.U32 s0,s0                 ;669
000468  ee700ac0          VSUB.F32 s1,s1,s0              ;669
00046c  ed940a0b          VLDR     s0,[r4,#0x2c]         ;669
000470  eeb80a40          VCVT.F32.U32 s0,s0                 ;669
000474  ee311a40          VSUB.F32 s2,s2,s0              ;669
000478  ee800a81          VDIV.F32 s0,s1,s2              ;669
00047c  eeb81a43          VCVT.F32.U32 s2,s6                 ;670
000480  eef80a63          VCVT.F32.U32 s1,s7                 ;670
000484  ed800a0f          VSTR     s0,[r0,#0x3c]         ;669
000488  ee400a41          VMLS.F32 s1,s0,s2              ;670
00048c  ee005a10          VMOV     s0,r5                 ;671
000490  eeb80a40          VCVT.F32.U32 s0,s0                 ;671
000494  edc00a1d          VSTR     s1,[r0,#0x74]         ;670
000498  eef80a63          VCVT.F32.U32 s1,s7                 ;671
00049c  ee301a60          VSUB.F32 s2,s0,s1              ;671
0004a0  ee001a10          VMOV     s0,r1                 ;671
0004a4  eef80a43          VCVT.F32.U32 s1,s6                 ;671
0004a8  eeb80a40          VCVT.F32.U32 s0,s0                 ;671
0004ac  ee300a60          VSUB.F32 s0,s0,s1              ;671
0004b0  eec10a00          VDIV.F32 s1,s2,s0              ;671
0004b4  ee001a10          VMOV     s0,r1                 ;672
0004b8  eeb81a40          VCVT.F32.U32 s2,s0                 ;672
0004bc  ee005a10          VMOV     s0,r5                 ;672
0004c0  eeb80a40          VCVT.F32.U32 s0,s0                 ;672
0004c4  edc00a10          VSTR     s1,[r0,#0x40]         ;671
0004c8  ee000ac1          VMLS.F32 s0,s1,s2              ;672
0004cc  ed8a0a1e          VSTR     s0,[r10,#0x78]        ;672
0004d0  e0f6              B        |L1.1728|
                  |L1.1234|
0004d2  f8c28020          STR      r8,[r2,#0x20]         ;678  ; Run_Control
0004d6  4671              MOV      r1,lr                 ;679
0004d8  48f8              LDR      r0,|L1.2236|
0004da  f7fffffe          BL       GPIO_ResetBits
                  |L1.1246|
0004de  f2417070          MOV      r0,#0x1770            ;637
0004e2  f8a90000          STRH     r0,[r9,#0]            ;637
0004e6  f8868000          STRB     r8,[r6,#0]            ;638
0004ea  e6d6              B        |L1.666|
                  |L1.1260|
0004ec  f7fffffe          BL       OnOff_GPOI_ResetSet
                  |L1.1264|
0004f0  e279              B        |L1.2534|
                  |L1.1266|
0004f2  f8c28020          STR      r8,[r2,#0x20]         ;685  ; Run_Control
0004f6  4671              MOV      r1,lr                 ;686
0004f8  48f0              LDR      r0,|L1.2236|
0004fa  f7fffffe          BL       GPIO_ResetBits
0004fe  6165              STR      r5,[r4,#0x14]         ;688  ; x1
000500  f8b91000          LDRH     r1,[r9,#0]            ;688  ; Contr_Laod
000504  4648              MOV      r0,r9                 ;688
000506  61a1              STR      r1,[r4,#0x18]         ;689  ; y1
000508  f8bb1000          LDRH     r1,[r11,#0]           ;689  ; Imon_Load_value
00050c  e9c4150d          STRD     r1,r5,[r4,#0x34]      ;689
000510  f64261e0          MOV      r1,#0x2ee0            ;691
000514  e73a              B        |L1.908|
                  |L1.1302|
000516  f8c28020          STR      r8,[r2,#0x20]         ;694  ; Run_Control
00051a  4671              MOV      r1,lr                 ;695
00051c  48e7              LDR      r0,|L1.2236|
00051e  f7fffffe          BL       GPIO_ResetBits
000522  61e5              STR      r5,[r4,#0x1c]         ;697  ; x2
000524  f8b91000          LDRH     r1,[r9,#0]            ;697  ; Contr_Laod
000528  4648              MOV      r0,r9                 ;697
00052a  6221              STR      r1,[r4,#0x20]         ;698  ; y2
00052c  f8bb1000          LDRH     r1,[r11,#0]           ;698  ; Imon_Load_value
000530  e9c4150f          STRD     r1,r5,[r4,#0x3c]      ;698
                  |L1.1332|
000534  f6446120          MOV      r1,#0x4e20            ;597
000538  e728              B        |L1.908|
                  |L1.1338|
00053a  f8c28020          STR      r8,[r2,#0x20]         ;703  ; Run_Control
00053e  4671              MOV      r1,lr                 ;704
000540  48de              LDR      r0,|L1.2236|
000542  f7fffffe          BL       GPIO_ResetBits
000546  6265              STR      r5,[r4,#0x24]         ;706  ; x3
000548  f8b91000          LDRH     r1,[r9,#0]            ;706  ; Contr_Laod
00054c  4648              MOV      r0,r9                 ;706
00054e  62a1              STR      r1,[r4,#0x28]         ;707  ; y3
000550  f8bb1000          LDRH     r1,[r11,#0]           ;707  ; Imon_Load_value
000554  e9c41511          STRD     r1,r5,[r4,#0x44]      ;707
000558  f6494140          MOV      r1,#0x9c40            ;709
00055c  e716              B        |L1.908|
                  |L1.1374|
00055e  62e5              STR      r5,[r4,#0x2c]         ;713  ; x4
000560  f8b92000          LDRH     r2,[r9,#0]            ;713  ; Contr_Laod
000564  6322              STR      r2,[r4,#0x30]         ;714  ; y4
000566  f8bb1000          LDRH     r1,[r11,#0]           ;714  ; Imon_Load_value
00056a  eeb84a61          VCVT.F32.U32 s8,s3                 ;717
00056e  eeb80a40          VCVT.F32.U32 s0,s0                 ;717
000572  eef80a60          VCVT.F32.U32 s1,s1                 ;717
000576  e9c41513          STRD     r1,r5,[r4,#0x4c]      ;717
00057a  ee344a40          VSUB.F32 s8,s8,s0              ;717
00057e  eeb80a41          VCVT.F32.U32 s0,s2                 ;717
000582  4650              MOV      r0,r10                ;717
000584  ee700a60          VSUB.F32 s1,s0,s1              ;717
000588  ee840a20          VDIV.F32 s0,s8,s1              ;717
00058c  eeb84a41          VCVT.F32.U32 s8,s2                 ;718
000590  eef80a61          VCVT.F32.U32 s1,s3                 ;718
000594  eeb81a41          VCVT.F32.U32 s2,s2                 ;719
000598  ed8a0a0a          VSTR     s0,[r10,#0x28]        ;717
00059c  ee400a44          VMLS.F32 s1,s0,s8              ;718
0005a0  eeb80a62          VCVT.F32.U32 s0,s5                 ;719
0005a4  edca0a18          VSTR     s1,[r10,#0x60]        ;718
0005a8  eef80a61          VCVT.F32.U32 s1,s3                 ;719
0005ac  ee700a60          VSUB.F32 s1,s0,s1              ;719
0005b0  eeb80a42          VCVT.F32.U32 s0,s4                 ;719
0005b4  ee301a41          VSUB.F32 s2,s0,s2              ;719
0005b8  ee800a81          VDIV.F32 s0,s1,s2              ;719
0005bc  eeb81a42          VCVT.F32.U32 s2,s4                 ;720
0005c0  eef80a62          VCVT.F32.U32 s1,s5                 ;720
0005c4  ed8a0a0b          VSTR     s0,[r10,#0x2c]        ;719
0005c8  ee400a41          VMLS.F32 s1,s0,s2              ;720
0005cc  ee002a10          VMOV     s0,r2                 ;721
0005d0  eeb80a40          VCVT.F32.U32 s0,s0                 ;721
0005d4  edc00a19          VSTR     s1,[r0,#0x64]         ;720
0005d8  eef80a62          VCVT.F32.U32 s1,s5                 ;721
0005dc  ee301a60          VSUB.F32 s2,s0,s1              ;721
0005e0  ee005a10          VMOV     s0,r5                 ;721
0005e4  eef80a42          VCVT.F32.U32 s1,s4                 ;721
0005e8  eeb82a43          VCVT.F32.U32 s4,s6                 ;724
0005ec  eeb80a40          VCVT.F32.U32 s0,s0                 ;721
0005f0  ee300a60          VSUB.F32 s0,s0,s1              ;721
0005f4  eec10a00          VDIV.F32 s1,s2,s0              ;721
0005f8  ee005a10          VMOV     s0,r5                 ;722
0005fc  eeb81a40          VCVT.F32.U32 s2,s0                 ;722
000600  ee002a10          VMOV     s0,r2                 ;722
000604  eeb80a40          VCVT.F32.U32 s0,s0                 ;722
000608  edc00a0c          VSTR     s1,[r0,#0x30]         ;721
00060c  ee000ac1          VMLS.F32 s0,s1,s2              ;722
000610  eeb81a63          VCVT.F32.U32 s2,s7                 ;724
000614  ed800a1a          VSTR     s0,[r0,#0x68]         ;722
000618  ed940a10          VLDR     s0,[r4,#0x40]         ;724
00061c  eef80a40          VCVT.F32.U32 s1,s0                 ;724
000620  ee701ac1          VSUB.F32 s3,s1,s2              ;724
000624  edd40a0f          VLDR     s1,[r4,#0x3c]         ;724
000628  eeb81a60          VCVT.F32.U32 s2,s1                 ;724
00062c  ee312a42          VSUB.F32 s4,s2,s4              ;724
000630  ee811a82          VDIV.F32 s2,s3,s4              ;724
000634  eeb82a60          VCVT.F32.U32 s4,s1                 ;725
000638  eef81a40          VCVT.F32.U32 s3,s0                 ;725
00063c  eeb80a40          VCVT.F32.U32 s0,s0                 ;726
000640  eef80a60          VCVT.F32.U32 s1,s1                 ;726
000644  ed801a11          VSTR     s2,[r0,#0x44]         ;724
000648  ee411a42          VMLS.F32 s3,s2,s4              ;725
00064c  edc01a1f          VSTR     s3,[r0,#0x7c]         ;725
000650  ed941a12          VLDR     s2,[r4,#0x48]         ;726
000654  eef81a41          VCVT.F32.U32 s3,s2                 ;726
000658  ee711ac0          VSUB.F32 s3,s3,s0              ;726
00065c  ed940a11          VLDR     s0,[r4,#0x44]         ;726
000660  eeb82a40          VCVT.F32.U32 s4,s0                 ;726
000664  ee322a60          VSUB.F32 s4,s4,s1              ;726
000668  eec10a82          VDIV.F32 s1,s3,s4              ;726
00066c  eeb82a40          VCVT.F32.U32 s4,s0                 ;727
000670  eef81a41          VCVT.F32.U32 s3,s2                 ;727
000674  eeb81a41          VCVT.F32.U32 s2,s2                 ;728
000678  edc00a12          VSTR     s1,[r0,#0x48]         ;726
00067c  ee401ac2          VMLS.F32 s3,s1,s4              ;727
000680  ee005a90          VMOV     s1,r5                 ;728
000684  eef80a60          VCVT.F32.U32 s1,s1                 ;728
000688  edc01a20          VSTR     s3,[r0,#0x80]         ;727
00068c  ee301ac1          VSUB.F32 s2,s1,s2              ;728
000690  ee001a90          VMOV     s1,r1                 ;728
000694  eeb80a40          VCVT.F32.U32 s0,s0                 ;728
000698  eef80a60          VCVT.F32.U32 s1,s1                 ;728
00069c  ee300ac0          VSUB.F32 s0,s1,s0              ;728
0006a0  eec10a00          VDIV.F32 s1,s2,s0              ;728
0006a4  ee001a10          VMOV     s0,r1                 ;729
0006a8  eeb81a40          VCVT.F32.U32 s2,s0                 ;729
0006ac  ee005a10          VMOV     s0,r5                 ;729
0006b0  eeb80a40          VCVT.F32.U32 s0,s0                 ;729
0006b4  edc00a13          VSTR     s1,[r0,#0x4c]         ;728
0006b8  ee000ac1          VMLS.F32 s0,s1,s2              ;729
0006bc  ed8a0a21          VSTR     s0,[r10,#0x84]        ;729
                  |L1.1728|
0006c0  f8cc3000          STR      r3,[r12,#0]           ;675  ; flagB
0006c4  7037              STRB     r7,[r6,#0]            ;675
0006c6  f7fffffe          BL       Off_GPOI_ResetSet
0006ca  e18c              B        |L1.2534|
                  |L1.1740|
0006cc  497c              LDR      r1,|L1.2240|
0006ce  f64050ac          MOV      r0,#0xdac             ;735
0006d2  8008              STRH     r0,[r1,#0]            ;735
0006d4  487b              LDR      r0,|L1.2244|
0006d6  f44f617a          MOV      r1,#0xfa0             ;736
0006da  8001              STRH     r1,[r0,#0]            ;736
0006dc  f8868000          STRB     r8,[r6,#0]            ;737
                  |L1.1760|
0006e0  2101              MOVS     r1,#1                 ;561
0006e2  2000              MOVS     r0,#0                 ;561
0006e4  e702              B        |L1.1260|
                  |L1.1766|
0006e6  4977              LDR      r1,|L1.2244|
0006e8  6165              STR      r5,[r4,#0x14]         ;742  ; x1
0006ea  880a              LDRH     r2,[r1,#0]            ;742  ; Contr_Current
0006ec  61a2              STR      r2,[r4,#0x18]         ;743  ; y1
0006ee  8800              LDRH     r0,[r0,#0]            ;743  ; Imon_POWE_value
0006f0  e9c40509          STRD     r0,r5,[r4,#0x24]      ;743
0006f4  4a72              LDR      r2,|L1.2240|
0006f6  f64050ac          MOV      r0,#0xdac             ;745
0006fa  8010              STRH     r0,[r2,#0]            ;745
0006fc  0080              LSLS     r0,r0,#2              ;746
                  |L1.1790|
0006fe  8008              STRH     r0,[r1,#0]            ;746
000700  e171              B        |L1.2534|
                  |L1.1794|
000702  4970              LDR      r1,|L1.2244|
000704  61e5              STR      r5,[r4,#0x1c]         ;750  ; x2
000706  8809              LDRH     r1,[r1,#0]            ;750  ; Contr_Current
000708  6221              STR      r1,[r4,#0x20]         ;751  ; y2
00070a  8800              LDRH     r0,[r0,#0]            ;751  ; Imon_POWE_value
00070c  ee011a10          VMOV     s2,r1                 ;754
000710  eeb80a40          VCVT.F32.U32 s0,s0                 ;754
000714  eef80a60          VCVT.F32.U32 s1,s1                 ;754
000718  eeb81a41          VCVT.F32.U32 s2,s2                 ;754
00071c  e9c4050b          STRD     r0,r5,[r4,#0x2c]      ;751
000720  ee311a40          VSUB.F32 s2,s2,s0              ;754
000724  ee005a10          VMOV     s0,r5                 ;754
000728  4652              MOV      r2,r10                ;754
00072a  eeb80a40          VCVT.F32.U32 s0,s0                 ;754
00072e  ee300a60          VSUB.F32 s0,s0,s1              ;754
000732  eec10a00          VDIV.F32 s1,s2,s0              ;754
000736  ee005a10          VMOV     s0,r5                 ;755
00073a  eeb81a40          VCVT.F32.U32 s2,s0                 ;755
00073e  ee001a10          VMOV     s0,r1                 ;755
000742  eeb80a40          VCVT.F32.U32 s0,s0                 ;755
000746  edca0a14          VSTR     s1,[r10,#0x50]        ;754
00074a  ee000ac1          VMLS.F32 s0,s1,s2              ;755
00074e  eef80a62          VCVT.F32.U32 s1,s5                 ;757
000752  ed8a0a22          VSTR     s0,[r10,#0x88]        ;755
000756  ee005a10          VMOV     s0,r5                 ;757
00075a  eeb80a40          VCVT.F32.U32 s0,s0                 ;757
00075e  ee301a60          VSUB.F32 s2,s0,s1              ;757
000762  ee000a10          VMOV     s0,r0                 ;757
000766  eef80a42          VCVT.F32.U32 s1,s4                 ;757
00076a  eeb80a40          VCVT.F32.U32 s0,s0                 ;757
00076e  ee300a60          VSUB.F32 s0,s0,s1              ;757
000772  eec10a00          VDIV.F32 s1,s2,s0              ;757
000776  ee000a10          VMOV     s0,r0                 ;758
00077a  eeb81a40          VCVT.F32.U32 s2,s0                 ;758
00077e  ee005a10          VMOV     s0,r5                 ;758
000782  eeb80a40          VCVT.F32.U32 s0,s0                 ;758
000786  edc20a15          VSTR     s1,[r2,#0x54]         ;757
00078a  ee000ac1          VMLS.F32 s0,s1,s2              ;758
00078e  ed8a0a23          VSTR     s0,[r10,#0x8c]        ;758
000792  e795              B        |L1.1728|
                  |L1.1940|
;;;765    		if(range == 0)//内阻低档位低段
;;;766    		{
;;;767    			LOAD_I_SW = 1;
;;;768    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;769    			RCONT_SW = 0;
;;;770    			calflag = 1;
;;;771    			x1 = Rmon_value;
000794  f8df9130          LDR      r9,|L1.2248|
000798  b1c1              CBZ      r1,|L1.1996|
;;;772    			y1 = data;
;;;773    			
;;;774    //			Modify_A_READ=0;
;;;775    //			Modify_A_ACT=0;
;;;776    //			Modify_A_READ = Rmon_value;//测量电阻值
;;;777    //			Modify_A_ACT = data;//读取低段
;;;778    		}else if (range == 1)//内阻低档位高段
00079a  2901              CMP      r1,#1
00079c  d025              BEQ      |L1.2026|
;;;779    		{
;;;780    			
;;;781    			x2 = Rmon_value;
;;;782    			y2 = data;
;;;783    			CalPara.TestR[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;784    			CalPara.OffsetR[0] = (float)y2 - CalPara.TestR[0]*(float)x2;
;;;785    				//参数写进FLASH
;;;786    			Flag_DAC_OFF=0;
;;;787    			calflag = 0;
;;;788    		}else if(range == 2)//内阻高档位低段
00079e  2902              CMP      r1,#2
0007a0  d048              BEQ      |L1.2100|
;;;789    		{
;;;790    			LOAD_I_SW = 1;
;;;791    			GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;792    			RCONT_SW = 1;
;;;793    			calflag = 1;
;;;794    			x1 = Rmon_value;
;;;795    			y1 = data;
;;;796    		}else if (range == 3)//内阻高档位高段
0007a2  2903              CMP      r1,#3
0007a4  d050              BEQ      |L1.2120|
;;;797    		{
;;;798    			
;;;799    			x2 = Rmon_value;
;;;800    			y2 = data;
;;;801    			CalPara.TestR[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;802    			CalPara.OffsetR[1] = (float)y2 - CalPara.TestR[1]*(float)x2;
;;;803    				//参数写进FLASH
;;;804    			Flag_DAC_OFF=0;
;;;805    			calflag = 0;
;;;806    		}else if(range == 4)//识别电阻1低段
;;;807    		{
;;;808    			calflag = 1;
;;;809    //			x1 = (R1mon_value*1000)/(65535-R1mon_value);
;;;810    			x1 = (R1mon_value*1000)/(65535-R1mon_value);
0007a6  f8dfb124          LDR      r11,|L1.2252|
0007aa  f64f70ff          MOV      r0,#0xffff
0007ae  2904              CMP      r1,#4                 ;806
0007b0  d074              BEQ      |L1.2204|
;;;811    			y1 = data;
;;;812    		}else if (range == 5)//识别电阻1高段
0007b2  2905              CMP      r1,#5
0007b4  d06e              BEQ      |L1.2196|
;;;813    		{
;;;814    			
;;;815    //			x2 = (R1mon_value*1000)/(65535-R1mon_value);
;;;816    			x2 = (R1mon_value*1000)/(65535-R1mon_value);
;;;817    			y2 = data;
;;;818    			CalPara.TestR1[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;819    			CalPara.OffsetR1[0] = (float)y2 - CalPara.TestR1[0]*(float)x2;
;;;820    				//参数写进FLASH
;;;821    			Flag_DAC_OFF=0;
;;;822    			calflag = 0;
;;;823    		}else if(range == 6)//识别电阻2低段
;;;824    		{
;;;825    			calflag = 1;
;;;826    			x1 = (R2mon_value*1000)/(65535-R2mon_value);
0007b6  f8dfb118          LDR      r11,|L1.2256|
0007ba  2906              CMP      r1,#6                 ;823
0007bc  d06e              BEQ      |L1.2204|
;;;827    			y1 = data;
;;;828    		}else if (range == 7)//识别电阻2高段
0007be  2907              CMP      r1,#7
0007c0  d069              BEQ      |L1.2198|
;;;829    		{
;;;830    			
;;;831    			x2 = (R2mon_value*1000)/(65535-R2mon_value);
;;;832    			y2 = data;
;;;833    			CalPara.TestR2[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;834    			CalPara.OffsetR2[0] = (float)y2 - CalPara.TestR2[0]*(float)x2;
;;;835    				//参数写进FLASH
;;;836    			Flag_DAC_OFF=0;
;;;837    			calflag = 0;
;;;838    		}else if(range == 8)//内阻高档位低段
0007c2  2908              CMP      r1,#8
0007c4  d068              BEQ      |L1.2200|
;;;839    		{
;;;840    			RCONT_SW = 1;
;;;841    			calflag = 1;
;;;842    			x1 = Rmon_value;
;;;843    			y1 = data;
;;;844    		}else if (range == 9)//内阻高档位高段
0007c6  2909              CMP      r1,#9
0007c8  d067              BEQ      |L1.2202|
0007ca  e10c              B        |L1.2534|
                  |L1.1996|
0007cc  4640              MOV      r0,r8                 ;767
0007ce  46c2              MOV      r10,r8                ;767
0007d0  4690              MOV      r8,r2                 ;767
0007d2  6210              STR      r0,[r2,#0x20]         ;767  ; Run_Control
0007d4  4671              MOV      r1,lr                 ;768
0007d6  4839              LDR      r0,|L1.2236|
0007d8  f7fffffe          BL       GPIO_ResetBits
0007dc  f8c87024          STR      r7,[r8,#0x24]         ;769  ; Run_Control
0007e0  f886a000          STRB     r10,[r6,#0]           ;770
0007e4  e0d6              B        |L1.2452|
                  |L1.2022|
0007e6  8800              LDRH     r0,[r0,#0]            ;532  ; Vmon_Load_value
0007e8  e064              B        |L1.2228|
                  |L1.2026|
0007ea  f8b90000          LDRH     r0,[r9,#0]            ;781  ; Rmon_value
0007ee  ee015a10          VMOV     s2,r5                 ;783
0007f2  eeb80a40          VCVT.F32.U32 s0,s0                 ;783
0007f6  eef80a60          VCVT.F32.U32 s1,s1                 ;783
0007fa  eeb81a41          VCVT.F32.U32 s2,s2                 ;783
0007fe  e9c40507          STRD     r0,r5,[r4,#0x1c]      ;781
000802  ee311a40          VSUB.F32 s2,s2,s0              ;783
000806  ee000a10          VMOV     s0,r0                 ;783
00080a  eeb80a40          VCVT.F32.U32 s0,s0                 ;783
00080e  ee300a60          VSUB.F32 s0,s0,s1              ;783
000812  eec10a00          VDIV.F32 s1,s2,s0              ;783
000816  ee000a10          VMOV     s0,r0                 ;784
00081a  eeb81a40          VCVT.F32.U32 s2,s0                 ;784
00081e  ee005a10          VMOV     s0,r5                 ;784
000822  eeb80a40          VCVT.F32.U32 s0,s0                 ;784
000826  edca0a24          VSTR     s1,[r10,#0x90]        ;783
00082a  ee000ac1          VMLS.F32 s0,s1,s2              ;784
00082e  ed8a0a29          VSTR     s0,[r10,#0xa4]        ;784
                  |L1.2098|
000832  e0d5              B        |L1.2528|
                  |L1.2100|
000834  4617              MOV      r7,r2                 ;790
000836  f8c28020          STR      r8,[r2,#0x20]         ;790  ; Run_Control
00083a  4671              MOV      r1,lr                 ;791
00083c  481f              LDR      r0,|L1.2236|
00083e  f7fffffe          BL       GPIO_ResetBits
000842  f8c78024          STR      r8,[r7,#0x24]         ;792  ; Run_Control
000846  e0a3              B        |L1.2448|
                  |L1.2120|
000848  f8b90000          LDRH     r0,[r9,#0]            ;799  ; Rmon_value
00084c  ee015a10          VMOV     s2,r5                 ;801
000850  eeb80a40          VCVT.F32.U32 s0,s0                 ;801
000854  eef80a60          VCVT.F32.U32 s1,s1                 ;801
000858  eeb81a41          VCVT.F32.U32 s2,s2                 ;801
00085c  e9c40507          STRD     r0,r5,[r4,#0x1c]      ;799
000860  ee311a40          VSUB.F32 s2,s2,s0              ;801
000864  ee000a10          VMOV     s0,r0                 ;801
000868  eeb80a40          VCVT.F32.U32 s0,s0                 ;801
00086c  ee300a60          VSUB.F32 s0,s0,s1              ;801
000870  eec10a00          VDIV.F32 s1,s2,s0              ;801
000874  ee000a10          VMOV     s0,r0                 ;802
000878  eeb81a40          VCVT.F32.U32 s2,s0                 ;802
00087c  ee005a10          VMOV     s0,r5                 ;802
000880  eeb80a40          VCVT.F32.U32 s0,s0                 ;802
000884  edca0a25          VSTR     s1,[r10,#0x94]        ;801
000888  ee000ac1          VMLS.F32 s0,s1,s2              ;802
00088c  ed8a0a2a          VSTR     s0,[r10,#0xa8]        ;802
000890  e0a6              B        |L1.2528|
000892  e003              B        |L1.2204|
                  |L1.2196|
000894  e01e              B        |L1.2260|
                  |L1.2198|
000896  e04b              B        |L1.2352|
                  |L1.2200|
000898  e078              B        |L1.2444|
                  |L1.2202|
00089a  e07d              B        |L1.2456|
                  |L1.2204|
00089c  f8868000          STRB     r8,[r6,#0]            ;808
0008a0  f8bb2000          LDRH     r2,[r11,#0]           ;810  ; R1mon_value
0008a4  f44f737a          MOV      r3,#0x3e8             ;810
0008a8  f8bb1000          LDRH     r1,[r11,#0]           ;810  ; R1mon_value
0008ac  435a              MULS     r2,r3,r2              ;810
0008ae  1a40              SUBS     r0,r0,r1              ;810
0008b0  fbb2f0f0          UDIV     r0,r2,r0              ;810
                  |L1.2228|
0008b4  e9c40505          STRD     r0,r5,[r4,#0x14]      ;810
0008b8  e095              B        |L1.2534|
0008ba  0000              DCW      0x0000
                  |L1.2236|
                          DCD      0x40020800
                  |L1.2240|
                          DCD      Contr_Voltage
                  |L1.2244|
                          DCD      Contr_Current
                  |L1.2248|
                          DCD      Rmon_value
                  |L1.2252|
                          DCD      R1mon_value
                  |L1.2256|
                          DCD      R2mon_value
                  |L1.2260|
0008d4  f8bb2000          LDRH     r2,[r11,#0]           ;816  ; R1mon_value
0008d8  f44f787a          MOV      r8,#0x3e8             ;816
0008dc  f8bb1000          LDRH     r1,[r11,#0]           ;816  ; R1mon_value
0008e0  fb02f208          MUL      r2,r2,r8              ;816
0008e4  ee015a10          VMOV     s2,r5                 ;818
0008e8  1a40              SUBS     r0,r0,r1              ;816
0008ea  fbb2f0f0          UDIV     r0,r2,r0              ;816
0008ee  eeb81a41          VCVT.F32.U32 s2,s2                 ;818
0008f2  eeb80a40          VCVT.F32.U32 s0,s0                 ;818
0008f6  eef80a60          VCVT.F32.U32 s1,s1                 ;818
0008fa  e9c40507          STRD     r0,r5,[r4,#0x1c]      ;816
0008fe  ee311a40          VSUB.F32 s2,s2,s0              ;818
000902  ee000a10          VMOV     s0,r0                 ;818
000906  eeb80a40          VCVT.F32.U32 s0,s0                 ;818
00090a  ee300a60          VSUB.F32 s0,s0,s1              ;818
00090e  eec10a00          VDIV.F32 s1,s2,s0              ;818
000912  ee000a10          VMOV     s0,r0                 ;819
000916  eeb81a40          VCVT.F32.U32 s2,s0                 ;819
00091a  ee005a10          VMOV     s0,r5                 ;819
00091e  eeb80a40          VCVT.F32.U32 s0,s0                 ;819
000922  edca0a27          VSTR     s1,[r10,#0x9c]        ;818
000926  ee000ac1          VMLS.F32 s0,s1,s2              ;819
00092a  ed8a0a2c          VSTR     s0,[r10,#0xb0]        ;819
00092e  e057              B        |L1.2528|
                  |L1.2352|
000930  f8bb2000          LDRH     r2,[r11,#0]           ;831  ; R2mon_value
000934  f44f787a          MOV      r8,#0x3e8             ;831
000938  f8bb1000          LDRH     r1,[r11,#0]           ;831  ; R2mon_value
00093c  fb02f208          MUL      r2,r2,r8              ;831
000940  ee015a10          VMOV     s2,r5                 ;833
000944  1a40              SUBS     r0,r0,r1              ;831
000946  fbb2f0f0          UDIV     r0,r2,r0              ;831
00094a  eeb81a41          VCVT.F32.U32 s2,s2                 ;833
00094e  eeb80a40          VCVT.F32.U32 s0,s0                 ;833
000952  eef80a60          VCVT.F32.U32 s1,s1                 ;833
000956  e9c40507          STRD     r0,r5,[r4,#0x1c]      ;831
00095a  ee311a40          VSUB.F32 s2,s2,s0              ;833
00095e  ee000a10          VMOV     s0,r0                 ;833
000962  eeb80a40          VCVT.F32.U32 s0,s0                 ;833
000966  ee300a60          VSUB.F32 s0,s0,s1              ;833
00096a  eec10a00          VDIV.F32 s1,s2,s0              ;833
00096e  ee000a10          VMOV     s0,r0                 ;834
000972  eeb81a40          VCVT.F32.U32 s2,s0                 ;834
000976  ee005a10          VMOV     s0,r5                 ;834
00097a  eeb80a40          VCVT.F32.U32 s0,s0                 ;834
00097e  edca0a28          VSTR     s1,[r10,#0xa0]        ;833
000982  ee000ac1          VMLS.F32 s0,s1,s2              ;834
000986  ed8a0a2d          VSTR     s0,[r10,#0xb4]        ;834
00098a  e029              B        |L1.2528|
                  |L1.2444|
00098c  f8c28024          STR      r8,[r2,#0x24]         ;840  ; Run_Control
                  |L1.2448|
000990  f8868000          STRB     r8,[r6,#0]            ;841
                  |L1.2452|
000994  4648              MOV      r0,r9                 ;842
000996  e726              B        |L1.2022|
                  |L1.2456|
;;;845    		{
;;;846    			
;;;847    			x2 = Rmon_value;
000998  f8b90000          LDRH     r0,[r9,#0]  ; Rmon_value
;;;848    			y2 = data;
;;;849    			CalPara.TestR[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
00099c  ee015a10          VMOV     s2,r5
0009a0  eeb80a40          VCVT.F32.U32 s0,s0
0009a4  eef80a60          VCVT.F32.U32 s1,s1
0009a8  eeb81a41          VCVT.F32.U32 s2,s2
0009ac  e9c40507          STRD     r0,r5,[r4,#0x1c]      ;847
0009b0  ee311a40          VSUB.F32 s2,s2,s0
0009b4  ee000a10          VMOV     s0,r0
0009b8  eeb80a40          VCVT.F32.U32 s0,s0
0009bc  ee300a60          VSUB.F32 s0,s0,s1
0009c0  eec10a00          VDIV.F32 s1,s2,s0
;;;850    			CalPara.OffsetR[2] = (float)y2 - CalPara.TestR[2]*(float)x2;
0009c4  ee000a10          VMOV     s0,r0
0009c8  eeb81a40          VCVT.F32.U32 s2,s0
0009cc  ee005a10          VMOV     s0,r5
0009d0  eeb80a40          VCVT.F32.U32 s0,s0
0009d4  edca0a26          VSTR     s1,[r10,#0x98]        ;849
0009d8  ee000ac1          VMLS.F32 s0,s1,s2
0009dc  ed8a0a2b          VSTR     s0,[r10,#0xac]
                  |L1.2528|
;;;851    				//参数写进FLASH
;;;852    			Flag_DAC_OFF=0;
;;;853    			calflag = 0;
0009e0  f8cc3000          STR      r3,[r12,#0]  ; flagB
0009e4  7037              STRB     r7,[r6,#0]
                  |L1.2534|
;;;854    		}
;;;855    		
;;;856    	}
;;;857    		
;;;858    
;;;859    	Write_Flash_Bytes();
0009e6  e8bd5ff0          POP      {r4-r12,lr}
0009ea  f7ffbffe          B.W      Write_Flash_Bytes
;;;860    //	else if(mode == 1){//测量电流
;;;861    //		if(range == 1)
;;;862    //		{
;;;863    //			x1 = abs(I_CS);
;;;864    //			y1 = data;
;;;865    //		}else if(range == 2){
;;;866    //			x2 = abs(I_CS);
;;;867    //			y2 = data;
;;;868    //			SaveDebug.TestIcal[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;869    //			SaveDebug.OffsetI[1] = (float)y2 - SaveDebug.TestIcal[1]*(float)x2;
;;;870    //		}else if(range == 4){
;;;871    //			x1 = abs(I_CS);
;;;872    //			y1 = data;
;;;873    //		}else if(range == 5){
;;;874    //			x2 = abs(I_CS);
;;;875    //			y2 = data;
;;;876    //			SaveDebug.TestIcal[4] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;877    //			SaveDebug.OffsetI[3] = (float)y2 - SaveDebug.TestIcal[4]*(float)x2;
;;;878    //		}else if(range == 0){
;;;879    //			SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[0]);
;;;880    //		}else if(range == 3){
;;;881    //			SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[0]));
;;;882    //		}
;;;883    ////		else if(range == 4){
;;;884    ////			x1 = V_CS;
;;;885    ////			y1 = data;
;;;886    ////		}else if(range == 5){
;;;887    ////			x2 = V_CS;
;;;888    ////			y2 = data;
;;;889    ////			SaveDebug.TestVcal[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;890    ////			SaveDebug.OffsetV[2] = (float)y2 - SaveDebug.TestVcal[2]*(float)x2;
;;;891    ////		}
;;;892    //		
;;;893    ////		if(range < 3)
;;;894    ////		{
;;;895    ////			if(range == 0)
;;;896    ////			{
;;;897    ////				SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[0]);
;;;898    ////			}else{
;;;899    ////				SaveDebug.TestIcal[range] = (float)data/(float)(I_CS - SaveDebug.ClearI[1]);
;;;900    ////			}			
;;;901    ////		}else{
;;;902    ////			if(range == 3)
;;;903    ////			{
;;;904    ////				SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[0]));
;;;905    ////			}else{
;;;906    ////				SaveDebug.TestIcal[range] = (float)data/(float)(abs(I_CS - SaveDebug.ClearI[1]));
;;;907    ////			}
;;;908    ////		}
;;;909    ////		calflag = 1;
;;;910    //	}else if(mode == 2){//控制电压
;;;911    //		if(range == 0)
;;;912    //		{
;;;913    //			_D_ = 1000;
;;;914    //			x1 = data;
;;;915    //			y1 = _D_;
;;;916    //		}else if(range == 1){
;;;917    //			_D_ = 7000;
;;;918    //			x2 = data;
;;;919    //			y2 = _D_;
;;;920    //			SaveDebug.ControlV[0] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;921    //			SaveDebug.OffsetCV[0] = (float)y2 - SaveDebug.ControlV[0]*(float)x2;
;;;922    //		}else if(range == 2){
;;;923    //			_D_ = 10000;
;;;924    //			x1 = data;
;;;925    //			y1 = _D_;
;;;926    //		}else if(range == 3){
;;;927    //			_D_ = 13000;
;;;928    //			x2 = data;
;;;929    //			y2 = _D_;
;;;930    //			SaveDebug.ControlV[1] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;931    //			SaveDebug.OffsetCV[1] = (float)y2 - SaveDebug.ControlV[1]*(float)x2;
;;;932    //		}else if(range == 4){
;;;933    //			_D_ = 17000;
;;;934    //			x1 = data;
;;;935    //			y1 = _D_;
;;;936    //		}else if(range == 5){
;;;937    //			_D_ = 20000;
;;;938    //			x2 = data;
;;;939    //			y2 = _D_;
;;;940    //			SaveDebug.ControlV[2] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;941    //			SaveDebug.OffsetCV[2] = (float)y2 - SaveDebug.ControlV[2]*(float)x2;
;;;942    //		}else if(range == 6){
;;;943    //			_D_ = 24000;
;;;944    //			x1 = data;
;;;945    //			y1 = _D_;
;;;946    //		}else if(range == 7){
;;;947    //			_D_ = 27000;
;;;948    //			x2 = data;
;;;949    //			y2 = _D_;
;;;950    //			SaveDebug.ControlV[3] = ((float)y2 - (float)y1)/((float)x2 - (float)x1);
;;;951    //			SaveDebug.OffsetCV[3] = (float)y2 - SaveDebug.ControlV[3]*(float)x2;
;;;952    //		}
;;;953    //		
;;;954    ////		if(range == 0)
;;;955    ////		{
;;;956    ////			SaveDebug.ControlV[range] = (float)1000/(float)data;
;;;957    ////		}else if(range == 1){
;;;958    ////			SaveDebug.ControlV[range] = (float)10000/(float)data;
;;;959    ////		}else if(range == 2){
;;;960    ////			SaveDebug.ControlV[range] = (float)15000/(float)data;
;;;961    ////		}else if(range == 3){
;;;962    ////			SaveDebug.ControlV[range] = (float)19000/(float)data;
;;;963    ////		}
;;;964    ////		calflag = 1;
;;;965    //	}else if(mode == 3){//电流清零
;;;966    //		SaveDebug.ClearI[range] = I_CS;
;;;967    ////		calflag = 1;
;;;968    //	}
;;;969    	
;;;970    }
;;;971    
                          ENDP


                          AREA ||i.DMA1_Stream3_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Stream3_IRQHandler PROC
;;;2357   
;;;2358   void DMA1_Stream3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2359   {
;;;2360   	//----DMA1 通道3完成中断，对应的中断也需要清除
;;;2361   	if(DMA_GetITStatus(DMA1_Stream3,DMA_IT_TCIF3) != RESET)   
000002  4d0c              LDR      r5,|L2.52|
000004  4c0c              LDR      r4,|L2.56|
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       DMA_GetITStatus
00000e  2800              CMP      r0,#0
000010  d00e              BEQ      |L2.48|
;;;2362       {
;;;2363   		/* 清除标志位 */
;;;2364   		DMA_ClearFlag(DMA1_Stream3,DMA_IT_TCIF3); 
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       DMA_ClearFlag
;;;2365   		/* 关闭DMA */
;;;2366   		DMA_Cmd(DMA1_Stream3,DISABLE);
00001a  2100              MOVS     r1,#0
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       DMA_Cmd
;;;2367   		
;;;2368   		while (!(USART3->SR & USART_FLAG_TC));  //硬件数据发送完毕
000022  4806              LDR      r0,|L2.60|
                  |L2.36|
000024  8801              LDRH     r1,[r0,#0]
000026  0649              LSLS     r1,r1,#25
000028  d5fc              BPL      |L2.36|
                  |L2.42|
;;;2369   		while (!(USART3->SR & USART_FLAG_TXE)); //等待数据从软件拷贝到硬件进行发送
00002a  8801              LDRH     r1,[r0,#0]
00002c  0609              LSLS     r1,r1,#24
00002e  d5fc              BPL      |L2.42|
                  |L2.48|
;;;2370   	}
;;;2371   }
000030  bd70              POP      {r4-r6,pc}
;;;2372   
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      0x18008000
                  |L2.56|
                          DCD      0x40026058
                  |L2.60|
                          DCD      0x40004800

                          AREA ||i.IsDigitChar||, CODE, READONLY, ALIGN=1

                  IsDigitChar PROC
;;;89     /*****************************************************************/
;;;90     unsigned short IsDigitChar(unsigned char a)             //如果a的值是数字的话返回1，否则返回0
000000  3830              SUBS     r0,r0,#0x30
;;;91     {
;;;92     	int b;
;;;93       if(a<0x30 || a>0x39)                     //数字1-9
000002  280a              CMP      r0,#0xa
000004  d301              BCC      |L3.10|
;;;94       	{
;;;95       	   b=0;
000006  2000              MOVS     r0,#0
;;;96       	}
;;;97       else
;;;98       	{
;;;99       	   b=1;
;;;100      	}
;;;101      return b;
;;;102    }
000008  4770              BX       lr
                  |L3.10|
00000a  2001              MOVS     r0,#1                 ;99
00000c  4770              BX       lr
;;;103    void SetPowerV(vu32 powv)
                          ENDP


                          AREA ||i.LIST_ONOFF||, CODE, READONLY, ALIGN=2

                  LIST_ONOFF PROC
;;;338    
;;;339    void LIST_ONOFF(vu8 value)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;340    {
;;;341    	switch(MODE)
000004  4863              LDR      r0,|L4.404|
000006  ed2d8b02          VPUSH    {d8}                  ;340
00000a  f890c005          LDRB     r12,[r0,#5]  ; MODE
;;;342    	{
;;;343    		case 0://电子负载ON/OFF
;;;344    		{
;;;345    			LOAD_MODE=0;
;;;346    			GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
;;;347    			if( value == 0 ){
;;;348    				
;;;349    				Flag_Swtich_ON = 0;
00000e  4d63              LDR      r5,|L4.412|
000010  2600              MOVS     r6,#0                 ;341
000012  f8df9184          LDR      r9,|L4.408|
;;;350    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
;;;351    			}
;;;352    			else if( value == 1 ){
;;;353    				
;;;354    				Flag_Swtich_ON = 1;
000016  682b              LDR      r3,[r5,#0]
;;;355    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;356    			}
;;;357    		}break;
;;;358    		case 1://稳压电源ON/OFF
;;;359    		{
;;;360    			if( value == 0 ){
;;;361    				listsend = 3;
;;;362    				listpowwatch1 ++;
;;;363    //				PowerSwitch(0);
;;;364    //				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;365    //				Para.CSET_Voltage = 0;
;;;366    //				Para.CSET_Current = 0;
;;;367    //				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;368    			}
;;;369    			else if( value == 1 ){
;;;370    				listsend = 1;
000018  2101              MOVS     r1,#1
;;;371    				listpowwatch2 ++;
;;;372    //				PowerSwitch(1);
;;;373    //				Para.CSET_Voltage = Para.CDC_OutPut_V;
;;;374    //				Para.CSET_Current = Para.CDC_Limit_C;
;;;375    //				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;376    //				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;377    			}
;;;378    		}break;
;;;379    		case 2://过流测试ON/OFF
;;;380    		{
;;;381    			listocwatch++;
;;;382    			if( value == 0 ){
;;;383    				
;;;384    				Off_GPOI_ResetSet();
;;;385    				trig_flag_state = 0;
;;;386    				max_discahrgeNum = 0;
;;;387    				Para.CSET_Current_Laod =  Para.IR_Start_C;
00001a  4c61              LDR      r4,|L4.416|
00001c  4f61              LDR      r7,|L4.420|
00001e  f0430240          ORR      r2,r3,#0x40           ;354
000022  f1bc0f05          CMP      r12,#5                ;341
000026  d226              BCS      |L4.118|
000028  e8dff00c          TBB      [pc,r12]              ;341
00002c  031a2f7c          DCB      0x03,0x1a,0x2f,0x7c
000030  9800              DCB      0x98,0x00
000032  f8c96018          STR      r6,[r9,#0x18]         ;345  ; Run_Control
000036  f44f5180          MOV      r1,#0x1000            ;346
00003a  4638              MOV      r0,r7                 ;346
00003c  f7fffffe          BL       GPIO_ResetBits
000040  f89d0008          LDRB     r0,[sp,#8]            ;347
000044  b140              CBZ      r0,|L4.88|
000046  f89d0008          LDRB     r0,[sp,#8]            ;352
00004a  2801              CMP      r0,#1                 ;352
00004c  d113              BNE      |L4.118|
00004e  6828              LDR      r0,[r5,#0]            ;354  ; flagA
000050  f0400040          ORR      r0,r0,#0x40           ;354
000054  6028              STR      r0,[r5,#0]            ;355  ; flagA
000056  e089              B        |L4.364|
                  |L4.88|
000058  6828              LDR      r0,[r5,#0]            ;349  ; flagA
00005a  f0200040          BIC      r0,r0,#0x40           ;349
00005e  e08f              B        |L4.384|
000060  f89d2008          LDRB     r2,[sp,#8]            ;360
000064  b15a              CBZ      r2,|L4.126|
000066  f89d2008          LDRB     r2,[sp,#8]            ;369
00006a  2a01              CMP      r2,#1                 ;369
00006c  d103              BNE      |L4.118|
00006e  7241              STRB     r1,[r0,#9]            ;370
000070  7b01              LDRB     r1,[r0,#0xc]          ;371  ; listpowwatch2
000072  1c49              ADDS     r1,r1,#1              ;371
000074  7301              STRB     r1,[r0,#0xc]          ;371
                  |L4.118|
;;;388    			}
;;;389    			else if( value == 1 ){
;;;390    				LOAD_I_SW = 1;
;;;391    				testv = DISS_Voltage;
;;;392    				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
;;;393    				Para.CSET_Current = 1000;
;;;394    				Para.CSET_Current_Laod =  Para.IR_Start_C;
;;;395    				shorttime = 0;
;;;396    				old_I = 0;
;;;397    				max_discahrgeNum = 0;
;;;398    				trig_flag_state = 1;
;;;399    				C_DISCHARGE = 1;        	
;;;400    				Flag_Swtich_ON = 1;
;;;401    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
;;;402    				max_discahrgeNum = (float)Para.IR_Start_C / 1000;				
;;;403    //				testv = DISS_Voltage;
;;;404    //				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
;;;405    //				Para.CSET_Current = 1000;
;;;406    //				Para.CSET_Current_Laod = Para.IR_Start_C;
;;;407    //				shorttime = 0;
;;;408    //				old_I = 0;
;;;409    //				max_discahrgeNum = 0;
;;;410    //				trig_flag_state = 1;
;;;411    //				C_DISCHARGE = 1;
;;;412    //				Flag_Swtich_ON = 1;
;;;413    //				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
;;;414    //				max_discahrgeNum = (float)Para.IR_Start_C / 1000;
;;;415    			}
;;;416    		}break;
;;;417    		case 3://过充测试ON/OFF
;;;418    		{
;;;419    			if( value == 0 ){
;;;420    				
;;;421    				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;422    				Para.CSET_Voltage = 0;
;;;423    				Para.CSET_Current = 0;
;;;424    				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;425    			}
;;;426    			else if( value == 1 ){
;;;427    				Para.CSET_Voltage = Para.CDC_OutPut_V;
;;;428    				Para.CSET_Current = Para.CDC_Limit_C;
;;;429    				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;430    				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;431    			}
;;;432    		}break;
;;;433    		case 4://电子负载ON/OFF
;;;434    		{
;;;435    			if( value == 0 ){
;;;436    				
;;;437    				Flag_Swtich_ON = 0;
;;;438    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
;;;439    			}
;;;440    			else if( value == 1 ){
;;;441    				
;;;442    				Flag_Swtich_ON = 1;
;;;443    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;444    			}
;;;445    		}break;
;;;446    	}
;;;447    }
000076  ecbd8b02          VPOP     {d8}
00007a  e8bd8ff8          POP      {r3-r11,pc}
                  |L4.126|
00007e  2103              MOVS     r1,#3                 ;361
000080  7241              STRB     r1,[r0,#9]            ;361
000082  7ac1              LDRB     r1,[r0,#0xb]          ;362  ; listpowwatch1
000084  1c49              ADDS     r1,r1,#1              ;362
000086  72c1              STRB     r1,[r0,#0xb]          ;362
000088  e7f5              B        |L4.118|
00008a  7a83              LDRB     r3,[r0,#0xa]          ;381  ; listocwatch
00008c  1c5b              ADDS     r3,r3,#1              ;381
00008e  7283              STRB     r3,[r0,#0xa]          ;381
000090  f89d0008          LDRB     r0,[sp,#8]            ;382
000094  f8dfa110          LDR      r10,|L4.424|
000098  ed9f8a44          VLDR     s16,|L4.428|
00009c  f8df8110          LDR      r8,|L4.432|
0000a0  b3b0              CBZ      r0,|L4.272|
0000a2  f89d0008          LDRB     r0,[sp,#8]            ;389
0000a6  2801              CMP      r0,#1                 ;389
0000a8  d1e5              BNE      |L4.118|
0000aa  f8c91020          STR      r1,[r9,#0x20]         ;390  ; Run_Control
0000ae  4841              LDR      r0,|L4.436|
0000b0  ed900a00          VLDR     s0,[r0,#0]            ;391
0000b4  4840              LDR      r0,|L4.440|
0000b6  ed800a00          VSTR     s0,[r0,#0]            ;391
0000ba  eddf8a40          VLDR     s17,|L4.444|
0000be  ee200a28          VMUL.F32 s0,s0,s17             ;392
0000c2  eebd0ac0          VCVT.S32.F32 s0,s0                 ;392
0000c6  ee100a10          VMOV     r0,s0                 ;392
0000ca  f500707a          ADD      r0,r0,#0x3e8          ;392
0000ce  60a0              STR      r0,[r4,#8]            ;392  ; Para
0000d0  f44f707a          MOV      r0,#0x3e8             ;393
0000d4  60e0              STR      r0,[r4,#0xc]          ;393  ; Para
0000d6  6c60              LDR      r0,[r4,#0x44]         ;394  ; Para
0000d8  6160              STR      r0,[r4,#0x14]         ;394  ; Para
0000da  4839              LDR      r0,|L4.448|
0000dc  7006              STRB     r6,[r0,#0]            ;395
0000de  4839              LDR      r0,|L4.452|
0000e0  4646              MOV      r6,r8                 ;397
0000e2  ed808a00          VSTR     s16,[r0,#0]           ;396
0000e6  ed888a00          VSTR     s16,[r8,#0]           ;397
0000ea  f88a1000          STRB     r1,[r10,#0]           ;398
0000ee  4836              LDR      r0,|L4.456|
0000f0  7001              STRB     r1,[r0,#0]            ;399
0000f2  2180              MOVS     r1,#0x80              ;401
0000f4  4638              MOV      r0,r7                 ;401
0000f6  602a              STR      r2,[r5,#0]            ;401  ; flagA
0000f8  f7fffffe          BL       GPIO_ResetBits
0000fc  6c60              LDR      r0,[r4,#0x44]         ;402  ; Para
0000fe  ee000a10          VMOV     s0,r0                 ;402
000102  eeb80a40          VCVT.F32.U32 s0,s0                 ;402
000106  eec00a28          VDIV.F32 s1,s0,s17             ;402
00010a  edc60a00          VSTR     s1,[r6,#0]            ;402
00010e  e7b2              B        |L4.118|
                  |L4.272|
000110  e7ff              B        |L4.274|
                  |L4.274|
000112  f7fffffe          BL       Off_GPOI_ResetSet
000116  f88a6000          STRB     r6,[r10,#0]           ;385
00011a  ed888a00          VSTR     s16,[r8,#0]           ;386
00011e  6c60              LDR      r0,[r4,#0x44]         ;387  ; Para
000120  6160              STR      r0,[r4,#0x14]         ;387  ; Para
000122  e7a8              B        |L4.118|
000124  f89d0008          LDRB     r0,[sp,#8]            ;419
000128  4d28              LDR      r5,|L4.460|
00012a  b170              CBZ      r0,|L4.330|
00012c  f89d0008          LDRB     r0,[sp,#8]            ;426
000130  2801              CMP      r0,#1                 ;426
000132  d1a0              BNE      |L4.118|
000134  6ee0              LDR      r0,[r4,#0x6c]         ;427  ; Para
000136  60a0              STR      r0,[r4,#8]            ;427  ; Para
000138  f8b40070          LDRH     r0,[r4,#0x70]         ;428  ; Para
00013c  60e0              STR      r0,[r4,#0xc]          ;428  ; Para
00013e  2104              MOVS     r1,#4                 ;429
000140  4628              MOV      r0,r5                 ;429
000142  f7fffffe          BL       GPIO_SetBits
000146  2102              MOVS     r1,#2                 ;430
000148  e01c              B        |L4.388|
                  |L4.330|
00014a  2102              MOVS     r1,#2                 ;421
00014c  4638              MOV      r0,r7                 ;421
00014e  f7fffffe          BL       GPIO_ResetBits
000152  60a6              STR      r6,[r4,#8]            ;422  ; Para
000154  60e6              STR      r6,[r4,#0xc]          ;423  ; Para
000156  2104              MOVS     r1,#4                 ;424
000158  4628              MOV      r0,r5                 ;424
00015a  e009              B        |L4.368|
00015c  f89d0008          LDRB     r0,[sp,#8]            ;435
000160  b160              CBZ      r0,|L4.380|
000162  f89d0008          LDRB     r0,[sp,#8]            ;440
000166  2801              CMP      r0,#1                 ;440
000168  d185              BNE      |L4.118|
00016a  602a              STR      r2,[r5,#0]            ;442  ; flagA
                  |L4.364|
00016c  2180              MOVS     r1,#0x80              ;355
00016e  4638              MOV      r0,r7                 ;355
                  |L4.368|
000170  ecbd8b02          VPOP     {d8}                  ;443
000174  e8bd4ff8          POP      {r3-r11,lr}           ;443
000178  f7ffbffe          B.W      GPIO_ResetBits
                  |L4.380|
00017c  f0230040          BIC      r0,r3,#0x40           ;437
                  |L4.384|
000180  2180              MOVS     r1,#0x80              ;350
000182  6028              STR      r0,[r5,#0]            ;350  ; flagA
                  |L4.388|
000184  4638              MOV      r0,r7                 ;438
000186  ecbd8b02          VPOP     {d8}                  ;438
00018a  e8bd4ff8          POP      {r3-r11,lr}           ;438
00018e  f7ffbffe          B.W      GPIO_SetBits
;;;448    
                          ENDP

000192  0000              DCW      0x0000
                  |L4.404|
                          DCD      ||.data||
                  |L4.408|
                          DCD      Run_Control
                  |L4.412|
                          DCD      flagA
                  |L4.416|
                          DCD      Para
                  |L4.420|
                          DCD      0x40020800
                  |L4.424|
                          DCD      trig_flag_state
                  |L4.428|
0001ac  00000000          DCFS     0x00000000 ; 0
                  |L4.432|
                          DCD      max_discahrgeNum
                  |L4.436|
                          DCD      DISS_Voltage
                  |L4.440|
                          DCD      testv
                  |L4.444|
0001bc  447a0000          DCFS     0x447a0000 ; 1000
                  |L4.448|
                          DCD      shorttime
                  |L4.452|
                          DCD      old_I
                  |L4.456|
                          DCD      C_DISCHARGE
                  |L4.460|
                          DCD      0x40021000

                          AREA ||i.MODE_ONOFF||, CODE, READONLY, ALIGN=2

                  MODE_ONOFF PROC
;;;264    
;;;265    void MODE_ONOFF(vu8 value)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;266    {
;;;267    	switch(MODE)
000004  4941              LDR      r1,|L5.268|
000006  ed2d8b02          VPUSH    {d8}                  ;266
00000a  794a              LDRB     r2,[r1,#5]  ; MODE
;;;268    	{
;;;269    		case 0://电子负载ON/OFF
;;;270    		{
;;;271    			if( value == 0 ){
;;;272    				
;;;273    				Flag_Swtich_ON = 0;
00000c  4d40              LDR      r5,|L5.272|
;;;274    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
00000e  4841              LDR      r0,|L5.276|
000010  b3ea              CBZ      r2,|L5.142|
;;;275    			}
;;;276    			else if( value == 1 ){
;;;277    				
;;;278    				Flag_Swtich_ON = 1;
;;;279    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
;;;280    			}
;;;281    		}break;
;;;282    		case 1://稳压电源ON/OFF
;;;283    		{
;;;284    			sendwait = 1;
000012  2601              MOVS     r6,#1
000014  2a01              CMP      r2,#1                 ;267
000016  d06d              BEQ      |L5.244|
000018  2a02              CMP      r2,#2                 ;267
00001a  d14a              BNE      |L5.178|
;;;285    //			if( value == 0 ){
;;;286    //				sendwait = 1;
;;;287    ////				PowerSwitch(0);//关闭电源输出
;;;288    ////				Delay_ms(1000);
;;;289    ////				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;290    ////				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
;;;291    //////				Delay_ms(1000);
;;;292    ////				Para.CSET_Voltage = 0;
;;;293    ////				Para.CSET_Current = 0;
;;;294    //////				Delay_ms(1000);
;;;295    ////				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
;;;296    //			}
;;;297    //			else if( value == 1 ){
;;;298    ////				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
;;;299    //////				Delay_ms(1000);
;;;300    ////				PowerSwitch(1);//打开电源输出
;;;301    //				
;;;302    //////				
;;;303    ////				Para.CSET_Voltage = Para.POWER_OutPut_V;
;;;304    ////				Para.CSET_Current = Para.POWER_Limit_C;
;;;305    //////				Delay_ms(1000);
;;;306    ////				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
;;;307    //				
;;;308    //			}
;;;309    		}break;
;;;310    		case 2://过流测试ON/OFF
;;;311    		{
;;;312    			if( value == 0 ){
00001c  f89d1008          LDRB     r1,[sp,#8]
;;;313    				
;;;314    				Off_GPOI_ResetSet();
;;;315    				trig_flag_state = 0;
000020  f8df90f4          LDR      r9,|L5.280|
;;;316    				max_discahrgeNum = 0;
000024  ed9f8a3d          VLDR     s16,|L5.284|
000028  f8df80f4          LDR      r8,|L5.288|
;;;317    				Para.CSET_Current_Laod =  Para.IR_Start_C;
00002c  4c3d              LDR      r4,|L5.292|
00002e  2700              MOVS     r7,#0                 ;312
000030  b371              CBZ      r1,|L5.144|
;;;318    			}
;;;319    			else if( value == 1 ){
000032  f89d1008          LDRB     r1,[sp,#8]
000036  2901              CMP      r1,#1
000038  d13b              BNE      |L5.178|
;;;320    				LOAD_MODE = 0;
00003a  493b              LDR      r1,|L5.296|
00003c  618f              STR      r7,[r1,#0x18]  ; Run_Control
;;;321    				GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
00003e  1481              ASRS     r1,r0,#18
000040  4682              MOV      r10,r0
000042  f7fffffe          BL       GPIO_ResetBits
;;;322    				Para.CSET_Current_Laod =  Para.IR_Start_C;
000046  6c60              LDR      r0,[r4,#0x44]  ; Para
000048  6160              STR      r0,[r4,#0x14]  ; Para
;;;323    				testv = DISS_Voltage;
00004a  4838              LDR      r0,|L5.300|
;;;324    				Para.CSET_Voltage = (int)(DISS_Voltage*1000) + 1000;
00004c  eddf8a39          VLDR     s17,|L5.308|
000050  ed900a00          VLDR     s0,[r0,#0]            ;323
000054  4836              LDR      r0,|L5.304|
000056  ed800a00          VSTR     s0,[r0,#0]            ;323
00005a  ee200a28          VMUL.F32 s0,s0,s17
00005e  eebd0ac0          VCVT.S32.F32 s0,s0
000062  ee100a10          VMOV     r0,s0
000066  f500707a          ADD      r0,r0,#0x3e8
00006a  60a0              STR      r0,[r4,#8]  ; Para
;;;325    				Para.CSET_Current = 1000;
00006c  f44f707a          MOV      r0,#0x3e8
000070  60e0              STR      r0,[r4,#0xc]  ; Para
;;;326    				shorttime = 0;
000072  4831              LDR      r0,|L5.312|
000074  7007              STRB     r7,[r0,#0]
;;;327    				old_I = 0;
000076  4831              LDR      r0,|L5.316|
;;;328    				max_discahrgeNum = 0;
000078  4647              MOV      r7,r8
00007a  ed808a00          VSTR     s16,[r0,#0]           ;327
00007e  ed888a00          VSTR     s16,[r8,#0]
;;;329    				trig_flag_state = 1;
000082  f8896000          STRB     r6,[r9,#0]
;;;330    				C_DISCHARGE = 1;        	
000086  482e              LDR      r0,|L5.320|
000088  7006              STRB     r6,[r0,#0]
;;;331    				Flag_Swtich_ON = 1;
00008a  6828              LDR      r0,[r5,#0]  ; flagA
00008c  e001              B        |L5.146|
                  |L5.142|
00008e  e014              B        |L5.186|
                  |L5.144|
000090  e032              B        |L5.248|
                  |L5.146|
000092  f0400040          ORR      r0,r0,#0x40
;;;332    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On 
000096  6028              STR      r0,[r5,#0]  ; flagA
000098  2180              MOVS     r1,#0x80
00009a  4650              MOV      r0,r10
00009c  f7fffffe          BL       GPIO_ResetBits
;;;333    				max_discahrgeNum = (float)Para.IR_Start_C / 1000;
0000a0  6c60              LDR      r0,[r4,#0x44]  ; Para
0000a2  ee000a10          VMOV     s0,r0
0000a6  eeb80a40          VCVT.F32.U32 s0,s0
0000aa  eec00a28          VDIV.F32 s1,s0,s17
0000ae  edc70a00          VSTR     s1,[r7,#0]
                  |L5.178|
;;;334    			}
;;;335    		}break;
;;;336    	}
;;;337    }
0000b2  ecbd8b02          VPOP     {d8}
0000b6  e8bd8ff8          POP      {r3-r11,pc}
                  |L5.186|
0000ba  f89d2008          LDRB     r2,[sp,#8]            ;271
0000be  4914              LDR      r1,|L5.272|
0000c0  6809              LDR      r1,[r1,#0]            ;273
0000c2  b16a              CBZ      r2,|L5.224|
0000c4  f89d2008          LDRB     r2,[sp,#8]            ;276
0000c8  2a01              CMP      r2,#1                 ;276
0000ca  d1f2              BNE      |L5.178|
0000cc  f0410140          ORR      r1,r1,#0x40           ;278
0000d0  6029              STR      r1,[r5,#0]            ;279  ; flagA
0000d2  2180              MOVS     r1,#0x80              ;279
0000d4  ecbd8b02          VPOP     {d8}                  ;279
0000d8  e8bd4ff8          POP      {r3-r11,lr}           ;279
0000dc  f7ffbffe          B.W      GPIO_ResetBits
                  |L5.224|
0000e0  f0210140          BIC      r1,r1,#0x40           ;273
0000e4  6029              STR      r1,[r5,#0]            ;274  ; flagA
0000e6  2180              MOVS     r1,#0x80              ;274
0000e8  ecbd8b02          VPOP     {d8}                  ;274
0000ec  e8bd4ff8          POP      {r3-r11,lr}           ;274
0000f0  f7ffbffe          B.W      GPIO_SetBits
                  |L5.244|
0000f4  720e              STRB     r6,[r1,#8]            ;284
0000f6  e7dc              B        |L5.178|
                  |L5.248|
0000f8  f7fffffe          BL       Off_GPOI_ResetSet
0000fc  f8897000          STRB     r7,[r9,#0]            ;315
000100  ed888a00          VSTR     s16,[r8,#0]           ;316
000104  6c60              LDR      r0,[r4,#0x44]         ;317  ; Para
000106  6160              STR      r0,[r4,#0x14]         ;317  ; Para
000108  e7d3              B        |L5.178|
;;;338    
                          ENDP

00010a  0000              DCW      0x0000
                  |L5.268|
                          DCD      ||.data||
                  |L5.272|
                          DCD      flagA
                  |L5.276|
                          DCD      0x40020800
                  |L5.280|
                          DCD      trig_flag_state
                  |L5.284|
00011c  00000000          DCFS     0x00000000 ; 0
                  |L5.288|
                          DCD      max_discahrgeNum
                  |L5.292|
                          DCD      Para
                  |L5.296|
                          DCD      Run_Control
                  |L5.300|
                          DCD      DISS_Voltage
                  |L5.304|
                          DCD      testv
                  |L5.308|
000134  447a0000          DCFS     0x447a0000 ; 1000
                  |L5.312|
                          DCD      shorttime
                  |L5.316|
                          DCD      old_I
                  |L5.320|
                          DCD      C_DISCHARGE

                          AREA ||i.MODE_PARASET||, CODE, READONLY, ALIGN=2

                  MODE_PARASET PROC
;;;448    
;;;449    void MODE_PARASET(vu8 value)
000000  b570              PUSH     {r4-r6,lr}
;;;450    {
;;;451    	float ptrans;
;;;452    	switch(MODE)
000002  4a22              LDR      r2,|L6.140|
000004  7953              LDRB     r3,[r2,#5]  ; MODE
000006  2100              MOVS     r1,#0
;;;453    	{
;;;454    		case 0://电子负载
;;;455    		{
;;;456    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;457    //			mainswitch = 0;
;;;458    //			sendwait = 3;
;;;459    			LOAD_MODE = Para.CLOAD_MODE;
;;;460    			if(LOAD_MODE == 2)
;;;461    			{
;;;462    				ptrans = (float)Para.LOAD_P/1000;
;;;463    				Para.CSET_Current_Laod = (uint32_t)((ptrans/DISS_Voltage)*1000);
;;;464    			}else{
;;;465    				Para.CSET_Current_Laod = Para.LOAD_C;
;;;466    			}
;;;467    			Para.CSET_Voltage_Laod = Para.LOAD_V;
;;;468    			if(Para.CSET_Current_Laod > 15000)
;;;469    			{
;;;470    				LOAD_I_SW = 1;
000008  2501              MOVS     r5,#1
00000a  4c21              LDR      r4,|L6.144|
00000c  4821              LDR      r0,|L6.148|
00000e  2b05              CMP      r3,#5                 ;452
000010  d213              BCS      |L6.58|
000012  e8dff003          TBB      [pc,r3]               ;452
000016  0339              DCB      0x03,0x39
000018  2a323900          DCB      0x2a,0x32,0x39,0x00
00001c  6982              LDR      r2,[r0,#0x18]         ;459  ; Para
00001e  61a2              STR      r2,[r4,#0x18]         ;459  ; Run_Control
000020  69a2              LDR      r2,[r4,#0x18]         ;460  ; Run_Control
000022  2a02              CMP      r2,#2                 ;460
000024  d00a              BEQ      |L6.60|
000026  6dc2              LDR      r2,[r0,#0x5c]         ;465  ; Para
                  |L6.40|
000028  6142              STR      r2,[r0,#0x14]         ;465  ; Para
00002a  6e02              LDR      r2,[r0,#0x60]         ;467  ; Para
00002c  6102              STR      r2,[r0,#0x10]         ;467  ; Para
00002e  6940              LDR      r0,[r0,#0x14]         ;468  ; Para
000030  f6432298          MOV      r2,#0x3a98            ;468
000034  4290              CMP      r0,r2                 ;468
000036  d916              BLS      |L6.102|
                  |L6.56|
000038  6225              STR      r5,[r4,#0x20]  ; Run_Control
                  |L6.58|
;;;471    			}else{
;;;472    				LOAD_I_SW = 0;
;;;473    			}
;;;474    		}break;
;;;475    		case 1://稳压电源
;;;476    		{
;;;477    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;478    //			mainswitch = 0;
;;;479    //			if(USART3_Recive_flg == 1)
;;;480    //			{
;;;481    				sendwait = 1;
;;;482    //			}else{
;;;483    //				SetPowerMode();
;;;484    //			}
;;;485    //			Para.CSET_Voltage = Para.POWER_OutPut_V;
;;;486    //			SetPowerV(Para.POWER_OutPut_V);
;;;487    //	//			Para.CSET_Current = Para.POWER_Limit_C;
;;;488    //			SetPowerC(Para.POWER_Limit_C);
;;;489    		}break;
;;;490    		case 2://放电过流测试
;;;491    		{
;;;492    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;493    //			mainswitch = 0;
;;;494    //			sendwait = 3;
;;;495    			
;;;496    			LOAD_MODE = 0;
;;;497    			LOAD_I_SW = 1;
;;;498    			Para.CSET_Current = 1000;
;;;499    			Para.CSET_Current_Laod = Para.IR_Start_C;
;;;500    		}break;
;;;501    		case 3://列表
;;;502    		{
;;;503    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;504    //			mainswitch = 0;
;;;505    //			sendwait = 3;
;;;506    			
;;;507    			LOAD_MODE = 0;
;;;508    			GPIO_ResetBits(GPIOC,GPIO_Pin_12);//CC模式
;;;509    			LOAD_I_SW = 1;
;;;510    //			Para.CSET_Current = 1000;
;;;511    		}break;
;;;512    		case 4://充电过流测试
;;;513    		{
;;;514    //			OnOff_GPOI_ResetSet( 2, 0 );
;;;515    //			mainswitch = 0;
;;;516    //			sendwait = 3;
;;;517    			
;;;518    			sendwait = 1;
;;;519    		}break;
;;;520    	}
;;;521    }
00003a  bd70              POP      {r4-r6,pc}
                  |L6.60|
00003c  6e42              LDR      r2,[r0,#0x64]         ;462  ; Para
00003e  ee002a10          VMOV     s0,r2                 ;462
000042  4a16              LDR      r2,|L6.156|
000044  eeb81a40          VCVT.F32.U32 s2,s0                 ;462
000048  ed9f0a13          VLDR     s0,|L6.152|
00004c  edd21a00          VLDR     s3,[r2,#0]            ;463
000050  eec10a00          VDIV.F32 s1,s2,s0              ;462
000054  ee801aa1          VDIV.F32 s2,s1,s3              ;463
000058  ee210a00          VMUL.F32 s0,s2,s0              ;463
00005c  eebc0ac0          VCVT.U32.F32 s0,s0                 ;463
000060  ee102a10          VMOV     r2,s0                 ;463
000064  e7e0              B        |L6.40|
                  |L6.102|
000066  6221              STR      r1,[r4,#0x20]         ;472  ; Run_Control
000068  bd70              POP      {r4-r6,pc}
00006a  61a1              STR      r1,[r4,#0x18]         ;496  ; Run_Control
00006c  6225              STR      r5,[r4,#0x20]         ;497  ; Run_Control
00006e  f44f717a          MOV      r1,#0x3e8             ;498
000072  60c1              STR      r1,[r0,#0xc]          ;498  ; Para
000074  6c41              LDR      r1,[r0,#0x44]         ;499  ; Para
000076  6141              STR      r1,[r0,#0x14]         ;499  ; Para
000078  bd70              POP      {r4-r6,pc}
00007a  61a1              STR      r1,[r4,#0x18]         ;507  ; Run_Control
00007c  f44f5180          MOV      r1,#0x1000            ;508
000080  4807              LDR      r0,|L6.160|
000082  f7fffffe          BL       GPIO_ResetBits
000086  e7d7              B        |L6.56|
000088  7215              STRB     r5,[r2,#8]            ;518
00008a  bd70              POP      {r4-r6,pc}
;;;522    
                          ENDP

                  |L6.140|
                          DCD      ||.data||
                  |L6.144|
                          DCD      Run_Control
                  |L6.148|
                          DCD      Para
                  |L6.152|
000098  447a0000          DCFS     0x447a0000 ; 1000
                  |L6.156|
                          DCD      DISS_Voltage
                  |L6.160|
                          DCD      0x40020800

                          AREA ||i.PowerSwitch||, CODE, READONLY, ALIGN=2

                  PowerSwitch PROC
;;;188    
;;;189    void PowerSwitch(vu8 bit)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;190    {
;;;191    	MasterSendbuf[0] = 0x01;
000002  4c0f              LDR      r4,|L7.64|
000004  2001              MOVS     r0,#1
;;;192    	MasterSendbuf[1] = 0x06;
000006  2106              MOVS     r1,#6
000008  7020              STRB     r0,[r4,#0]            ;191
00000a  7061              STRB     r1,[r4,#1]
;;;193    	MasterSendbuf[2] = 0x00;
00000c  2100              MOVS     r1,#0
00000e  70a1              STRB     r1,[r4,#2]
;;;194    	MasterSendbuf[3] = 0x01;
000010  70e0              STRB     r0,[r4,#3]
;;;195    	MasterSendbuf[4] = (u8)(bit>>8);
000012  f89d0000          LDRB     r0,[sp,#0]
000016  7121              STRB     r1,[r4,#4]
;;;196    	MasterSendbuf[5] = (u8)(bit);
000018  f89d0000          LDRB     r0,[sp,#0]
00001c  7160              STRB     r0,[r4,#5]
;;;197    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00001e  2106              MOVS     r1,#6
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       Hardware_CRC
000026  71a0              STRB     r0,[r4,#6]
;;;198    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000028  2106              MOVS     r1,#6
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       Hardware_CRC
000030  0a00              LSRS     r0,r0,#8
000032  71e0              STRB     r0,[r4,#7]
;;;199    	USART3WriteDMA(8);
000034  e8bd4038          POP      {r3-r5,lr}
000038  2008              MOVS     r0,#8
00003a  f7ffbffe          B.W      USART3WriteDMA
;;;200    }
;;;201    
                          ENDP

00003e  0000              DCW      0x0000
                  |L7.64|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.ReadPowData||, CODE, READONLY, ALIGN=2

                  ReadPowData PROC
;;;201    
;;;202    void ReadPowData(void)
000000  b510              PUSH     {r4,lr}
;;;203    {
;;;204    	MasterSendbuf[0] = 0x01;
000002  4c0e              LDR      r4,|L8.60|
000004  2001              MOVS     r0,#1
;;;205    	MasterSendbuf[1] = 0x03;
;;;206    	MasterSendbuf[2] = 0x00;
;;;207    	MasterSendbuf[3] = 0x10;
000006  2110              MOVS     r1,#0x10
000008  7020              STRB     r0,[r4,#0]            ;204
00000a  2003              MOVS     r0,#3                 ;205
00000c  7060              STRB     r0,[r4,#1]            ;205
00000e  2000              MOVS     r0,#0                 ;206
000010  70a0              STRB     r0,[r4,#2]            ;206
000012  70e1              STRB     r1,[r4,#3]
;;;208    	MasterSendbuf[4] = 0x00;
000014  7120              STRB     r0,[r4,#4]
;;;209    	MasterSendbuf[5] = 0x02;
000016  2002              MOVS     r0,#2
000018  7160              STRB     r0,[r4,#5]
;;;210    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00001a  2106              MOVS     r1,#6
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       Hardware_CRC
000022  71a0              STRB     r0,[r4,#6]
;;;211    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000024  2106              MOVS     r1,#6
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       Hardware_CRC
00002c  0a00              LSRS     r0,r0,#8
00002e  71e0              STRB     r0,[r4,#7]
;;;212    	USART3WriteDMA(8);
000030  e8bd4010          POP      {r4,lr}
000034  2008              MOVS     r0,#8
000036  f7ffbffe          B.W      USART3WriteDMA
;;;213    }
;;;214    
                          ENDP

00003a  0000              DCW      0x0000
                  |L8.60|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.SerialRemoteHandleL||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  SerialRemoteHandleL PROC
;;;1009   
;;;1010   u16 SerialRemoteHandleL(u8 len,char* buf)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1011   {
000004  b0b3              SUB      sp,sp,#0xcc
000006  4604              MOV      r4,r0
;;;1012   
;;;1013     
;;;1014       u16 currCharNum;
;;;1015       u32 temp1;
;;;1016     u8 Gmode_Vale;
;;;1017   	u8 i,j;
;;;1018   	
;;;1019   	u8 addr = 0;
000008  2000              MOVS     r0,#0
00000a  460d              MOV      r5,r1                 ;1011
;;;1020   	char str[200]={0};
00000c  9032              STR      r0,[sp,#0xc8]
00000e  21c8              MOVS     r1,#0xc8
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       __aeabi_memclr4
;;;1021   	int cmd_flag=255;
;;;1022   	u8 templen =0;
;;;1023   	u8 tmpFg;
;;;1024   	u8 LM_S_Vale,LOW_I_Vale,H_L_Vale,SWITCH_Vale;
;;;1025   	u16 I_ADC_Vale,V_ADC_Vale;
;;;1026   	int32_t V_CS_Vale,I_CS_Vale;
;;;1027   	float Lvl_Vale,fadcx,fsingal, fVale;
;;;1028    
;;;1029   //	u8 len = 11;
;;;1030   	u8 pntlen = 0;
;;;1031   
;;;1032   
;;;1033   	
;;;1034   	currCharNum=0;
;;;1035   	if((buf[currCharNum] != ChrStartR) || (buf[len-2] != ChrEndR)||(buf[len-1] != ChrEndS))
000016  7828              LDRB     r0,[r5,#0]
000018  283c              CMP      r0,#0x3c
00001a  d108              BNE      |L9.46|
00001c  1928              ADDS     r0,r5,r4
00001e  f8101c02          LDRB     r1,[r0,#-2]
000022  290d              CMP      r1,#0xd
000024  d103              BNE      |L9.46|
000026  f8100c01          LDRB     r0,[r0,#-1]
00002a  280a              CMP      r0,#0xa
00002c  d001              BEQ      |L9.50|
                  |L9.46|
;;;1036       {
;;;1037   		return SetErr_ACK(buf,addr ,CMD_ERR); 
00002e  2202              MOVS     r2,#2
000030  e14a              B        |L9.712|
                  |L9.50|
;;;1038       } 
;;;1039   	str[currCharNum++] = ChrStartR;
000032  213c              MOVS     r1,#0x3c
000034  f88d1000          STRB     r1,[sp,#0]
;;;1040   	sprintf(&str[currCharNum],"%d",addr);
000038  a1fe              ADR      r1,|L9.1076|
00003a  f10d0001          ADD      r0,sp,#1
00003e  9a32              LDR      r2,[sp,#0xc8]
000040  f7fffffe          BL       __2sprintf
;;;1041   	strncat(str,"/",1);
000044  2201              MOVS     r2,#1
000046  a1fc              ADR      r1,|L9.1080|
000048  4668              MOV      r0,sp
00004a  f7fffffe          BL       strncat
;;;1042   	currCharNum =strlen(str);
00004e  4668              MOV      r0,sp
000050  f7fffffe          BL       strlen
000054  fa1ffa80          UXTH     r10,r0
;;;1043   	cmd_flag=strncmp(buf,str,strlen(str));
000058  4668              MOV      r0,sp
00005a  f7fffffe          BL       strlen
00005e  4602              MOV      r2,r0
000060  4669              MOV      r1,sp
000062  4628              MOV      r0,r5
000064  f7fffffe          BL       strncmp
;;;1044   	//testflag = cmd_flag;
;;;1045   	if(0!=cmd_flag)
000068  2800              CMP      r0,#0
00006a  d1e0              BNE      |L9.46|
;;;1046   	{
;;;1047   		return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1048   		
;;;1049   	}
;;;1050   	for (j=0;j<CmdNumb;j++)
;;;1051       {
;;;1052   		templen = strlen(CmdStr[j]);
00006c  f8dfb3cc          LDR      r11,|L9.1084|
000070  4680              MOV      r8,r0                 ;1050
;;;1053   		cmd_flag=strncmp(&buf[currCharNum],CmdStr[j],templen);
000072  eb05060a          ADD      r6,r5,r10
000076  bf00              NOP                            ;1052
                  |L9.120|
000078  eb0801c8          ADD      r1,r8,r8,LSL #3       ;1052
00007c  eb01040b          ADD      r4,r1,r11             ;1052
000080  4620              MOV      r0,r4                 ;1052
000082  f7fffffe          BL       strlen
000086  f00009ff          AND      r9,r0,#0xff           ;1052
00008a  4621              MOV      r1,r4
00008c  4630              MOV      r0,r6
00008e  464a              MOV      r2,r9
000090  f7fffffe          BL       strncmp
;;;1054   	    if(0==cmd_flag)
000094  b138              CBZ      r0,|L9.166|
000096  f1080801          ADD      r8,r8,#1
00009a  f00808ff          AND      r8,r8,#0xff           ;1050
00009e  f1b80f13          CMP      r8,#0x13              ;1050
0000a2  d3e9              BCC      |L9.120|
0000a4  e7c3              B        |L9.46|
                  |L9.166|
;;;1055   	    {
;;;1056   
;;;1057   		  buf[0] = ChrStartS;
0000a6  203e              MOVS     r0,#0x3e
0000a8  7028              STRB     r0,[r5,#0]
;;;1058   		  currCharNum+=templen;
0000aa  eb0a0009          ADD      r0,r10,r9
0000ae  b284              UXTH     r4,r0
;;;1059   		  switch(j)
;;;1060             {
;;;1061   			case 0:
;;;1062   				pntlen = 5;    //
;;;1063   				if(buf[currCharNum]=='?')
;;;1064   				{
;;;1065   
;;;1066   					
;;;1067   					sprintf(&buf[currCharNum],"%06d",Para.CVoltage);
;;;1068   					currCharNum+=6;
;;;1069   					
;;;1070   					buf[currCharNum++]=(',');
;;;1071   					sprintf(&buf[currCharNum],"%06d",Para.CLaod_Current);
;;;1072   					currCharNum+=6;
;;;1073   					
;;;1074   					buf[currCharNum++]=(',');
;;;1075   					sprintf(&buf[currCharNum],"%05d",Para.CPOW_Voltage);
;;;1076   					currCharNum+=pntlen;
;;;1077   					
;;;1078   					buf[currCharNum++]=(',');
;;;1079   					sprintf(&buf[currCharNum],"%05d",Para.CCurrent);
;;;1080   					currCharNum+=pntlen;
;;;1081   					
;;;1082   					buf[currCharNum++]=(',');
;;;1083   					sprintf(&buf[currCharNum],"%05d",Para.CR_VLUE);
;;;1084   					currCharNum+=pntlen;
;;;1085   					
;;;1086   					buf[currCharNum++]=(',');
;;;1087   					sprintf(&buf[currCharNum],"%04d",Para.CR1_VLUE);
;;;1088   					currCharNum+=4;
;;;1089   					
;;;1090   					buf[currCharNum++]=(',');
;;;1091   					sprintf(&buf[currCharNum],"%04d",Para.CR2_VLUE);
;;;1092   					currCharNum+=4;
;;;1093   
;;;1094   					buf[currCharNum++]=(',');
;;;1095   					sprintf(&buf[currCharNum],"%06d",(int)(max_discahrgeNum*1000));
;;;1096   					currCharNum+=6;
;;;1097   					
;;;1098   					buf[currCharNum++]=(',');
;;;1099   					sprintf(&buf[currCharNum],"%03d",shorttime);
;;;1100   					currCharNum+=3;
;;;1101   					
;;;1102   					buf[currCharNum++]=(',');
;;;1103   					sprintf(&buf[currCharNum],"%1d",mainswitch);
;;;1104   					currCharNum+=1;
;;;1105   					
;;;1106   					buf[currCharNum++]=(',');
;;;1107   					sprintf(&buf[currCharNum],"%1d",finishflag);
;;;1108   					currCharNum+=1;
;;;1109   					
;;;1110   					buf[currCharNum++]=(',');
;;;1111   					sprintf(&buf[currCharNum],"%1d",lockflag);
;;;1112   					currCharNum+=1;
;;;1113   					
;;;1114   					buf[currCharNum++]=(',');
;;;1115   					sprintf(&buf[currCharNum],"%2d",version);
;;;1116   					currCharNum+=2;
;;;1117   					
;;;1118   					buf[currCharNum++]=(',');
;;;1119   					sprintf(&buf[currCharNum],"%03d",Temperature);
;;;1120   					currCharNum+=3;
;;;1121   					
;;;1122   					buf[currCharNum++]=(',');
;;;1123   					sprintf(&buf[currCharNum],"%1d",overflag);
;;;1124   					currCharNum+=1;
;;;1125   //					buf[currCharNum++]=(',');
;;;1126   //					sprintf(&buf[currCharNum],"%d",H_L);
;;;1127   //					currCharNum++;
;;;1128   					
;;;1129   //					buf[currCharNum++]=(',');
;;;1130   //					sprintf(&buf[currCharNum],"%d",LM_S);
;;;1131   //					currCharNum++;
;;;1132   					
;;;1133   //					buf[currCharNum++]=(',');
;;;1134   //					sprintf(&buf[currCharNum],"%02d",(int)temperature);
;;;1135   //					currCharNum+=2;
;;;1136   					
;;;1137   				  buf[currCharNum++ ] = ChrEndR;
;;;1138   				  buf[currCharNum++ ] = ChrEndS;
;;;1139   				}
;;;1140   				else
;;;1141   				{
;;;1142   					return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1143   				}
;;;1144   				break;
;;;1145   			case 1:
;;;1146   				pntlen = 1;
;;;1147   				if(buf[currCharNum]=='?')
;;;1148   				{
;;;1149   					  sprintf(&buf[currCharNum],"%1d",MODE);
;;;1150   				    currCharNum+=pntlen;
;;;1151   				    buf[currCharNum ++] = ChrEndS;
;;;1152   					
;;;1153   				}
;;;1154   				else
;;;1155   				{
;;;1156   					pntlen = 1;				
;;;1157   					for(i=0,temp1=0;i<pntlen;i++)
;;;1158   					{
;;;1159   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1160   					}		                   
;;;1161   //					if(temp1>1)
;;;1162   //					{
;;;1163   //						return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1164   //					}
;;;1165   					MODE=temp1;
;;;1166   //					Off_GPOI_ResetSet();
;;;1167   					OnOff_GPOI_ResetSet( 2, 0 );
;;;1168   					mainswitch = 0;
;;;1169   					sendwait = 3;
;;;1170   					MODE_PARASET(MODE);
;;;1171   	//				Change_LM_Val(LM_S_Vale);
;;;1172   					buf[currCharNum++] = ChrEndR;
;;;1173   				}
;;;1174   				break;
;;;1175   				case 2:
;;;1176   				pntlen = 1;
;;;1177   				if(buf[currCharNum]=='?')
;;;1178   				{
;;;1179   					sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
0000b0  48e3              LDR      r0,|L9.1088|
0000b2  f8dfa390          LDR      r10,|L9.1092|
0000b6  f04f0b0d          MOV      r11,#0xd              ;1035
0000ba  f04f090a          MOV      r9,#0xa               ;1035
0000be  f06f062f          MVN      r6,#0x2f              ;1159
0000c2  f1b80f13          CMP      r8,#0x13              ;1059
0000c6  d2b2              BCS      |L9.46|
0000c8  e8dff008          TBB      [pc,r8]               ;1059
0000cc  0bbce1fc          DCB      0x0b,0xbc,0xe1,0xfc
0000d0  fbfa0a0a          DCB      0xfb,0xfa,0x0a,0x0a
0000d4  0a0a0a0a          DCB      0x0a,0x0a,0x0a,0x0a
0000d8  f9f8f70a          DCB      0xf9,0xf8,0xf7,0x0a
0000dc  0a0af600          DCB      0x0a,0x0a,0xf6,0x00
0000e0  e7a5              B        |L9.46|
0000e2  5d28              LDRB     r0,[r5,r4]            ;1063
0000e4  283f              CMP      r0,#0x3f              ;1063
0000e6  d1a2              BNE      |L9.46|
0000e8  f8da202c          LDR      r2,[r10,#0x2c]        ;1067  ; Para
0000ec  4656              MOV      r6,r10                ;1067
0000ee  1928              ADDS     r0,r5,r4              ;1067
0000f0  a1d5              ADR      r1,|L9.1096|
0000f2  f7fffffe          BL       __2sprintf
0000f6  1da4              ADDS     r4,r4,#6              ;1067
0000f8  b2a0              UXTH     r0,r4                 ;1068
0000fa  242c              MOVS     r4,#0x2c              ;1070
0000fc  542c              STRB     r4,[r5,r0]            ;1070
0000fe  1c40              ADDS     r0,r0,#1              ;1070
000100  6b72              LDR      r2,[r6,#0x34]         ;1071  ; Para
000102  b287              UXTH     r7,r0                 ;1070
000104  19e8              ADDS     r0,r5,r7              ;1071
000106  a1d0              ADR      r1,|L9.1096|
000108  f7fffffe          BL       __2sprintf
00010c  1dbf              ADDS     r7,r7,#6              ;1071
00010e  b2b8              UXTH     r0,r7                 ;1072
000110  542c              STRB     r4,[r5,r0]            ;1074
000112  1c40              ADDS     r0,r0,#1              ;1074
000114  6ab2              LDR      r2,[r6,#0x28]         ;1075  ; Para
000116  b287              UXTH     r7,r0                 ;1074
000118  19e8              ADDS     r0,r5,r7              ;1075
00011a  a1cd              ADR      r1,|L9.1104|
00011c  f7fffffe          BL       __2sprintf
000120  1d7f              ADDS     r7,r7,#5              ;1075
000122  b2b8              UXTH     r0,r7                 ;1076
000124  542c              STRB     r4,[r5,r0]            ;1078
000126  1c40              ADDS     r0,r0,#1              ;1078
000128  6b32              LDR      r2,[r6,#0x30]         ;1079  ; Para
00012a  b287              UXTH     r7,r0                 ;1078
00012c  19e8              ADDS     r0,r5,r7              ;1079
00012e  a1c8              ADR      r1,|L9.1104|
000130  f7fffffe          BL       __2sprintf
000134  1d7f              ADDS     r7,r7,#5              ;1079
000136  b2b8              UXTH     r0,r7                 ;1080
000138  542c              STRB     r4,[r5,r0]            ;1082
00013a  1c40              ADDS     r0,r0,#1              ;1082
00013c  6bb2              LDR      r2,[r6,#0x38]         ;1083  ; Para
00013e  b287              UXTH     r7,r0                 ;1082
000140  19e8              ADDS     r0,r5,r7              ;1083
000142  a1c3              ADR      r1,|L9.1104|
000144  f7fffffe          BL       __2sprintf
000148  1d7f              ADDS     r7,r7,#5              ;1083
00014a  b2b8              UXTH     r0,r7                 ;1084
00014c  542c              STRB     r4,[r5,r0]            ;1086
00014e  1c40              ADDS     r0,r0,#1              ;1086
000150  6bf2              LDR      r2,[r6,#0x3c]         ;1087  ; Para
000152  b287              UXTH     r7,r0                 ;1086
000154  19e8              ADDS     r0,r5,r7              ;1087
000156  a1c0              ADR      r1,|L9.1112|
000158  f7fffffe          BL       __2sprintf
00015c  1d3f              ADDS     r7,r7,#4              ;1087
00015e  b2b8              UXTH     r0,r7                 ;1088
000160  542c              STRB     r4,[r5,r0]            ;1090
000162  1c40              ADDS     r0,r0,#1              ;1090
000164  6c32              LDR      r2,[r6,#0x40]         ;1091  ; Para
000166  b287              UXTH     r7,r0                 ;1090
000168  19e8              ADDS     r0,r5,r7              ;1091
00016a  a1bb              ADR      r1,|L9.1112|
00016c  f7fffffe          BL       __2sprintf
000170  1d3f              ADDS     r7,r7,#4              ;1091
000172  b2b8              UXTH     r0,r7                 ;1092
000174  542c              STRB     r4,[r5,r0]            ;1094
000176  1c40              ADDS     r0,r0,#1              ;1094
000178  b286              UXTH     r6,r0                 ;1094
00017a  48b9              LDR      r0,|L9.1120|
00017c  ed900a00          VLDR     s0,[r0,#0]            ;1095
000180  eddf0ab8          VLDR     s1,|L9.1124|
000184  19a8              ADDS     r0,r5,r6              ;1095
000186  a1b0              ADR      r1,|L9.1096|
000188  ee200a20          VMUL.F32 s0,s0,s1              ;1095
00018c  eebd0ac0          VCVT.S32.F32 s0,s0                 ;1095
000190  ee102a10          VMOV     r2,s0                 ;1095
000194  f7fffffe          BL       __2sprintf
000198  1db6              ADDS     r6,r6,#6              ;1095
00019a  b2b0              UXTH     r0,r6                 ;1096
00019c  49b2              LDR      r1,|L9.1128|
00019e  542c              STRB     r4,[r5,r0]            ;1098
0001a0  1c40              ADDS     r0,r0,#1              ;1098
0001a2  b286              UXTH     r6,r0                 ;1098
0001a4  780a              LDRB     r2,[r1,#0]            ;1099  ; shorttime
0001a6  19a8              ADDS     r0,r5,r6              ;1099
0001a8  a1b0              ADR      r1,|L9.1132|
0001aa  f7fffffe          BL       __2sprintf
0001ae  1cf6              ADDS     r6,r6,#3              ;1099
0001b0  b2b0              UXTH     r0,r6                 ;1100
0001b2  49a2              LDR      r1,|L9.1084|
0001b4  542c              STRB     r4,[r5,r0]            ;1102
0001b6  1c40              ADDS     r0,r0,#1              ;1102
0001b8  b286              UXTH     r6,r0                 ;1102
0001ba  19a8              ADDS     r0,r5,r6              ;1103
0001bc  3958              SUBS     r1,r1,#0x58           ;1103
0001be  798a              LDRB     r2,[r1,#6]            ;1103  ; mainswitch
0001c0  a1ac              ADR      r1,|L9.1140|
0001c2  f7fffffe          BL       __2sprintf
0001c6  1c76              ADDS     r6,r6,#1              ;1103
0001c8  b2b0              UXTH     r0,r6                 ;1104
0001ca  49ab              LDR      r1,|L9.1144|
0001cc  542c              STRB     r4,[r5,r0]            ;1106
0001ce  1c40              ADDS     r0,r0,#1              ;1106
0001d0  b286              UXTH     r6,r0                 ;1106
0001d2  780a              LDRB     r2,[r1,#0]            ;1107  ; finishflag
0001d4  19a8              ADDS     r0,r5,r6              ;1107
0001d6  a1a7              ADR      r1,|L9.1140|
0001d8  f7fffffe          BL       __2sprintf
0001dc  1c76              ADDS     r6,r6,#1              ;1107
0001de  b2b0              UXTH     r0,r6                 ;1108
0001e0  49a6              LDR      r1,|L9.1148|
0001e2  542c              STRB     r4,[r5,r0]            ;1110
0001e4  1c40              ADDS     r0,r0,#1              ;1110
0001e6  b286              UXTH     r6,r0                 ;1110
0001e8  780a              LDRB     r2,[r1,#0]            ;1111  ; lockflag
0001ea  19a8              ADDS     r0,r5,r6              ;1111
0001ec  a1a1              ADR      r1,|L9.1140|
0001ee  f7fffffe          BL       __2sprintf
0001f2  1c76              ADDS     r6,r6,#1              ;1111
0001f4  b2b0              UXTH     r0,r6                 ;1112
0001f6  49a2              LDR      r1,|L9.1152|
0001f8  542c              STRB     r4,[r5,r0]            ;1114
0001fa  1c40              ADDS     r0,r0,#1              ;1114
0001fc  b286              UXTH     r6,r0                 ;1114
0001fe  780a              LDRB     r2,[r1,#0]            ;1115  ; version
000200  19a8              ADDS     r0,r5,r6              ;1115
000202  a1a0              ADR      r1,|L9.1156|
000204  f7fffffe          BL       __2sprintf
000208  1cb6              ADDS     r6,r6,#2              ;1115
00020a  b2b0              UXTH     r0,r6                 ;1116
00020c  499e              LDR      r1,|L9.1160|
00020e  542c              STRB     r4,[r5,r0]            ;1118
000210  1c40              ADDS     r0,r0,#1              ;1118
000212  b286              UXTH     r6,r0                 ;1118
000214  f9b12000          LDRSH    r2,[r1,#0]            ;1119  ; Temperature
000218  19a8              ADDS     r0,r5,r6              ;1119
00021a  a194              ADR      r1,|L9.1132|
00021c  f7fffffe          BL       __2sprintf
000220  1cf6              ADDS     r6,r6,#3              ;1119
000222  b2b0              UXTH     r0,r6                 ;1120
000224  4999              LDR      r1,|L9.1164|
000226  542c              STRB     r4,[r5,r0]            ;1122
000228  1c40              ADDS     r0,r0,#1              ;1122
00022a  b284              UXTH     r4,r0                 ;1122
00022c  780a              LDRB     r2,[r1,#0]            ;1123  ; overflag
00022e  1928              ADDS     r0,r5,r4              ;1123
000230  a190              ADR      r1,|L9.1140|
000232  f7fffffe          BL       __2sprintf
000236  1c64              ADDS     r4,r4,#1              ;1123
000238  b2a0              UXTH     r0,r4                 ;1124
00023a  f805b000          STRB     r11,[r5,r0]           ;1137
00023e  1c40              ADDS     r0,r0,#1              ;1137
000240  b280              UXTH     r0,r0                 ;1137
000242  e3ef              B        |L9.2596|
000244  5d28              LDRB     r0,[r5,r4]            ;1147
000246  2201              MOVS     r2,#1                 ;1146
000248  283f              CMP      r0,#0x3f              ;1147
00024a  d01a              BEQ      |L9.642|
00024c  2100              MOVS     r1,#0                 ;1157
00024e  4608              MOV      r0,r1                 ;1157
                  |L9.592|
000250  5d2b              LDRB     r3,[r5,r4]            ;1159
000252  eb000080          ADD      r0,r0,r0,LSL #2       ;1159
000256  1c64              ADDS     r4,r4,#1              ;1159
000258  1c49              ADDS     r1,r1,#1              ;1159
00025a  eb060040          ADD      r0,r6,r0,LSL #1       ;1159
00025e  b2c9              UXTB     r1,r1                 ;1157
000260  4418              ADD      r0,r0,r3              ;1159
000262  b2a4              UXTH     r4,r4                 ;1159
000264  4291              CMP      r1,r2                 ;1157
000266  d3f3              BCC      |L9.592|
000268  4e74              LDR      r6,|L9.1084|
00026a  3e58              SUBS     r6,r6,#0x58           ;1165
00026c  7170              STRB     r0,[r6,#5]            ;1165
00026e  2100              MOVS     r1,#0                 ;1167
000270  2002              MOVS     r0,#2                 ;1167
000272  f7fffffe          BL       OnOff_GPOI_ResetSet
000276  2000              MOVS     r0,#0                 ;1168
000278  71b0              STRB     r0,[r6,#6]            ;1168
00027a  2003              MOVS     r0,#3                 ;1169
00027c  7230              STRB     r0,[r6,#8]            ;1169
00027e  7970              LDRB     r0,[r6,#5]            ;1170  ; MODE
000280  e21c              B        |L9.1724|
                  |L9.642|
000282  496e              LDR      r1,|L9.1084|
000284  1928              ADDS     r0,r5,r4              ;1149
000286  3958              SUBS     r1,r1,#0x58           ;1149
000288  794a              LDRB     r2,[r1,#5]            ;1149  ; MODE
00028a  a17a              ADR      r1,|L9.1140|
00028c  e023              B        |L9.726|
00028e  5d29              LDRB     r1,[r5,r4]            ;1177
000290  2201              MOVS     r2,#1                 ;1176
000292  293f              CMP      r1,#0x3f              ;1177
                  |L9.660|
000294  d07d              BEQ      |L9.914|
;;;1180   				    currCharNum+=pntlen;
;;;1181   				    buf[currCharNum ++] = ChrEndS;
;;;1182   					
;;;1183   				}
;;;1184   				else
;;;1185   				{
;;;1186   					pntlen = 1;				
;;;1187   					for(i=0,temp1=0;i<pntlen;i++)
000296  2100              MOVS     r1,#0
000298  4608              MOV      r0,r1
                  |L9.666|
;;;1188   					{
;;;1189   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
00029a  5d2b              LDRB     r3,[r5,r4]
00029c  eb000080          ADD      r0,r0,r0,LSL #2
0002a0  1c64              ADDS     r4,r4,#1
0002a2  1c49              ADDS     r1,r1,#1
0002a4  eb060040          ADD      r0,r6,r0,LSL #1
0002a8  b2c9              UXTB     r1,r1                 ;1187
0002aa  4418              ADD      r0,r0,r3
0002ac  b2a4              UXTH     r4,r4
0002ae  4291              CMP      r1,r2                 ;1187
0002b0  d3f3              BCC      |L9.666|
;;;1190   					}		                   
;;;1191   					if(temp1>1)
0002b2  2801              CMP      r0,#1
0002b4  d913              BLS      |L9.734|
                  |L9.694|
;;;1192   					{
;;;1193   						return SetErr_ACK(buf, addr ,PARA_ERR);
0002b6  e006              B        |L9.710|
0002b8  e3fe              B        |L9.2744|
0002ba  e3fe              B        |L9.2746|
0002bc  e3fe              B        |L9.2748|
0002be  e3fe              B        |L9.2750|
0002c0  e3fe              B        |L9.2752|
0002c2  e1fe              B        |L9.1730|
0002c4  e012              B        |L9.748|
                  |L9.710|
0002c6  2201              MOVS     r2,#1
                  |L9.712|
;;;1194   					}
;;;1195   //					MODE=temp1;
;;;1196   					
;;;1197   					
;;;1198   					mainswitch = temp1;
;;;1199   //						Para.CSET_Voltage = 5000;
;;;1200   //						Para.CSET_Current = 1000;
;;;1201   					
;;;1202   						
;;;1203   					MODE_ONOFF(mainswitch);
;;;1204   	//				Change_LM_Val(LM_S_Vale);
;;;1205   					buf[currCharNum++] = ChrEndR;
;;;1206   		        }
;;;1207   				break;
;;;1208   				case 3:
;;;1209   				pntlen = 1;
;;;1210   				if(buf[currCharNum]=='?')
;;;1211   				{
;;;1212   					  sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1213   				    currCharNum+=pntlen;
;;;1214   				    buf[currCharNum ++] = ChrEndS;
;;;1215   					
;;;1216   				}
;;;1217   				else
;;;1218   				{
;;;1219   					if(currCharNum == 0x0b)
;;;1220   					{						
;;;1221   						for(i=0,temp1=0;i<6;i++)
;;;1222   						{
;;;1223   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1224   						}
;;;1225   					}		
;;;1226   					Para.IR_Start_C = temp1;//起始电流
;;;1227   					temp1 = 0;
;;;1228   					
;;;1229   					if(buf[currCharNum++] == ',')
;;;1230   					{
;;;1231   						for(i=0,temp1=0;i<5;i++)
;;;1232   						{
;;;1233   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1234   						}
;;;1235   					}	
;;;1236   					Para.IR_Step_C = temp1;//步进电流
;;;1237   					temp1 = 0;
;;;1238   					 
;;;1239   					if(buf[currCharNum++] == ',')
;;;1240   					{
;;;1241   						for(i=0,temp1=0;i<5;i++)
;;;1242   						{
;;;1243   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1244   						}
;;;1245   					}	
;;;1246   					Para.IR_Threshold_V = temp1;//门槛电压
;;;1247   					temp1 = 0;
;;;1248   					
;;;1249   					if(buf[currCharNum++] == ',')
;;;1250   					{
;;;1251   						for(i=0,temp1=0;i<3;i++)
;;;1252   						{
;;;1253   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1254   						}
;;;1255   					}	
;;;1256   					Para.IR_Step_Time = temp1;//步进时间
;;;1257   					temp1 = 0;
;;;1258   					
;;;1259   					if(buf[currCharNum++] == ',')
;;;1260   					{
;;;1261   						for(i=0,temp1=0;i<6;i++)
;;;1262   						{
;;;1263   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1264   						}
;;;1265   					}	
;;;1266   					Para.POWER_OutPut_V = temp1;//电源电压
;;;1267   					temp1 = 0;
;;;1268   					
;;;1269   					if(buf[currCharNum++] == ',')
;;;1270   					{
;;;1271   						for(i=0,temp1=0;i<5;i++)
;;;1272   						{
;;;1273   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1274   						}
;;;1275   					}	
;;;1276   					Para.POWER_Limit_C = temp1;//电源电流
;;;1277   					temp1 = 0;
;;;1278   					
;;;1279   					if(buf[currCharNum++] == ',')
;;;1280   					{
;;;1281   						for(i=0,temp1=0;i<5;i++)
;;;1282   						{
;;;1283   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1284   						}
;;;1285   					}	
;;;1286   					Para.POWER_Cutoff_C = temp1;//设置充电截止电流
;;;1287   					temp1 = 0;
;;;1288   					
;;;1289   					if(buf[currCharNum++] == ',')
;;;1290   					{
;;;1291   						for(i=0,temp1=0;i<6;i++)
;;;1292   						{
;;;1293   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1294   						}
;;;1295   					}	
;;;1296   					Para.LOAD_V = temp1;//负载电压
;;;1297   					temp1 = 0;
;;;1298   					
;;;1299   					if(buf[currCharNum++] == ',')
;;;1300   					{
;;;1301   						for(i=0,temp1=0;i<6;i++)
;;;1302   						{
;;;1303   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1304   						}
;;;1305   					}	
;;;1306   					Para.LOAD_C = temp1;//负载电流
;;;1307   					temp1 = 0;
;;;1308   					
;;;1309   					if(buf[currCharNum++] == ',')
;;;1310   					{
;;;1311   						for(i=0,temp1=0;i<6;i++)
;;;1312   						{
;;;1313   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1314   						}
;;;1315   					}	
;;;1316   					Para.LOAD_Cutoff_V = temp1;//设置负载截止电压
;;;1317   					temp1 = 0;
;;;1318   					
;;;1319   					if(buf[currCharNum++] == ',')
;;;1320   					{
;;;1321   						for(i=0,temp1=0;i<5;i++)
;;;1322   						{
;;;1323   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1324   						}
;;;1325   					}	
;;;1326   					Para.CDC_OutPut_V = temp1;//设置容量测试充电电压
;;;1327   					temp1 = 0;
;;;1328   					
;;;1329   					if(buf[currCharNum++] == ',')
;;;1330   					{
;;;1331   						for(i=0,temp1=0;i<5;i++)
;;;1332   						{
;;;1333   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1334   						}
;;;1335   					}	
;;;1336   					Para.CDC_Limit_C = temp1;//设置容量测试充电限制电流
;;;1337   					temp1 = 0;
;;;1338   					
;;;1339   					if(buf[currCharNum++] == ',')
;;;1340   					{
;;;1341   						for(i=0,temp1=0;i<5;i++)
;;;1342   						{
;;;1343   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1344   						}
;;;1345   					}	
;;;1346   					Para.CDC_Ccutoff_V = temp1;//设置容量测试充电截止电压
;;;1347   					temp1 = 0;
;;;1348   					
;;;1349   					if(buf[currCharNum++] == ',')
;;;1350   					{
;;;1351   						for(i=0,temp1=0;i<5;i++)
;;;1352   						{
;;;1353   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1354   						}
;;;1355   					}	
;;;1356   					Para.CDC_Ccutoff_C = temp1;//设置容量测试充电截止电流
;;;1357   					temp1 = 0;
;;;1358   					
;;;1359   					if(buf[currCharNum++] == ',')
;;;1360   					{
;;;1361   						for(i=0,temp1=0;i<5;i++)
;;;1362   						{
;;;1363   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1364   						}
;;;1365   					}	
;;;1366   					Para.CDC_Load_C = temp1;//设置容量测试放电电流
;;;1367   					temp1 = 0;
;;;1368   					
;;;1369   					if(buf[currCharNum++] == ',')
;;;1370   					{
;;;1371   						for(i=0,temp1=0;i<5;i++)
;;;1372   						{
;;;1373   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1374   						}
;;;1375   					}	
;;;1376   					Para.CDC_Dcutoff_V = temp1;//设置容量测试放电截止电压
;;;1377   					temp1 = 0;
;;;1378   					
;;;1379   					if(buf[currCharNum++] == ',')
;;;1380   					{
;;;1381   						for(i=0,temp1=0;i<3;i++)
;;;1382   						{
;;;1383   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1384   						}
;;;1385   					}	
;;;1386   					Para.CDC_Cycle_Time = temp1;//循环次数
;;;1387   					temp1 = 0;
;;;1388   					
;;;1389   					if(buf[currCharNum++] == ',')
;;;1390   					{
;;;1391   						for(i=0,temp1=0;i<3;i++)
;;;1392   						{
;;;1393   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1394   						}
;;;1395   					}	
;;;1396   					if(MODE == 0)
;;;1397   					{
;;;1398   						Para.CLOAD_MODE = temp1;//负载模式
;;;1399   					}
;;;1400   					temp1 = 0;
;;;1401   //					MODE_PARASET(MODE);
;;;1402   					
;;;1403   					if(buf[currCharNum++] == ',')
;;;1404   					{
;;;1405   						for(i=0,temp1=0;i<3;i++)
;;;1406   						{
;;;1407   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1408   						}
;;;1409   					}	
;;;1410   					Rraly = temp1;//内阻档位
;;;1411   					temp1 = 0;
;;;1412   					
;;;1413   					if(buf[currCharNum++] == ',')
;;;1414   					{
;;;1415   						for(i=0,temp1=0;i<3;i++)
;;;1416   						{
;;;1417   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1418   						}
;;;1419   					}	
;;;1420   					Para.ACT_DELAY = temp1;//激活延时
;;;1421   					temp1 = 0;
;;;1422   					
;;;1423   					if(buf[currCharNum++] == ',')
;;;1424   					{
;;;1425   						for(i=0,temp1=0;i<6;i++)
;;;1426   						{
;;;1427   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1428   						}
;;;1429   					}	
;;;1430   					Para.LOAD_P = temp1*10;//负载功率
;;;1431   					temp1 = 0;
;;;1432   					
;;;1433   					MODE_PARASET(MODE);
;;;1434   					
;;;1435   					 buf[currCharNum++] = ChrEndR;
;;;1436   		        }
;;;1437   				break;
;;;1438   				case 4:
;;;1439   				pntlen = 1;
;;;1440   				if(buf[currCharNum]=='?')
;;;1441   				{
;;;1442   					  sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1443   				    currCharNum+=pntlen;
;;;1444   				    buf[currCharNum ++] = ChrEndS;
;;;1445   					
;;;1446   				}
;;;1447   				else
;;;1448   				{
;;;1449   					if(currCharNum == 0x0b)
;;;1450   					{						
;;;1451   						for(i=0,temp1=0;i<2;i++)
;;;1452   						{
;;;1453   							temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1454   						}
;;;1455   					}
;;;1456   					MODE = temp1;//项目
;;;1457   					temp1 = 0;
;;;1458   					
;;;1459   					if(MODE == 0)
;;;1460   					{
;;;1461   						if(buf[currCharNum++] == ',')
;;;1462   						{
;;;1463   							for(i=0,temp1=0;i<6;i++)
;;;1464   							{
;;;1465   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1466   							}
;;;1467   						}	
;;;1468   						
;;;1469   						temp1 = 0;
;;;1470   						
;;;1471   						if(buf[currCharNum++] == ',')
;;;1472   						{
;;;1473   							for(i=0,temp1=0;i<5;i++)
;;;1474   							{
;;;1475   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1476   							}
;;;1477   						}	
;;;1478   						Para.CSET_Current_Laod = temp1;//负载电流
;;;1479   						temp1 = 0;
;;;1480   						
;;;1481   	
;;;1482   						if(Para.CSET_Current_Laod > 15000)
;;;1483   						{
;;;1484   							LOAD_I_SW = 1;
;;;1485   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1486   						}else{
;;;1487   							LOAD_I_SW = 0;
;;;1488   							GPIO_SetBits(GPIOC,GPIO_Pin_11);//电流测量为低档位
;;;1489   						}
;;;1490   						if(buf[currCharNum++] == ',')
;;;1491   						{
;;;1492   							for(i=0,temp1=0;i<1;i++)
;;;1493   							{
;;;1494   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1495   							}
;;;1496   						}
;;;1497   						mainswitch = temp1;//开关
;;;1498   						if(mainswitch == 0)
;;;1499   						{
;;;1500   							LOAD_I_SW = 1;
;;;1501   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1502   						}
;;;1503   					}else if(MODE == 1){
;;;1504   						if(buf[currCharNum++] == ',')
;;;1505   						{
;;;1506   							for(i=0,temp1=0;i<6;i++)
;;;1507   							{
;;;1508   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1509   							}
;;;1510   						}	
;;;1511   						Para.CDC_OutPut_V = temp1;//电源电压
;;;1512   						temp1 = 0;
;;;1513   						
;;;1514   						if(buf[currCharNum++] == ',')
;;;1515   						{
;;;1516   							for(i=0,temp1=0;i<5;i++)
;;;1517   							{
;;;1518   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1519   							}
;;;1520   						}	
;;;1521   						Para.CDC_Limit_C = temp1;//电源电流
;;;1522   						temp1 = 0;
;;;1523   						
;;;1524   						if(buf[currCharNum++] == ',')
;;;1525   						{
;;;1526   							for(i=0,temp1=0;i<1;i++)
;;;1527   							{
;;;1528   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1529   							}
;;;1530   						}
;;;1531   						mainswitch = temp1;//开关
;;;1532   					}else if(MODE == 2){
;;;1533   						LOAD_I_SW = 1;
;;;1534   						GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1535   						if(buf[currCharNum++] == ',')
;;;1536   						{
;;;1537   							for(i=0,temp1=0;i<6;i++)
;;;1538   							{
;;;1539   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1540   							}
;;;1541   						}	
;;;1542   						Para.IR_Start_C = temp1;//起始电流
;;;1543   						temp1 = 0;
;;;1544   						
;;;1545   						if(buf[currCharNum++] == ',')
;;;1546   						{
;;;1547   							for(i=0,temp1=0;i<5;i++)
;;;1548   							{
;;;1549   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1550   							}
;;;1551   						}	
;;;1552   						Para.IR_Step_C = temp1;//步进电流
;;;1553   						temp1 = 0;
;;;1554   						
;;;1555   						if(buf[currCharNum++] == ',')
;;;1556   						{
;;;1557   							for(i=0,temp1=0;i<1;i++)
;;;1558   							{
;;;1559   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1560   							}
;;;1561   						}
;;;1562   						mainswitch = temp1;//开关
;;;1563   						
;;;1564   						if(mainswitch == 1)
;;;1565   						{
;;;1566   							finishflag = 0;
;;;1567   						}
;;;1568   					}else if(MODE == 3){
;;;1569   						if(buf[currCharNum++] == ',')
;;;1570   						{
;;;1571   							for(i=0,temp1=0;i<6;i++)
;;;1572   							{
;;;1573   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1574   							}
;;;1575   						}	
;;;1576   						Para.CDC_OutPut_V = temp1;//电源电压
;;;1577   						temp1 = 0;
;;;1578   						
;;;1579   						
;;;1580   						if(buf[currCharNum++] == ',')
;;;1581   						{
;;;1582   							for(i=0,temp1=0;i<5;i++)
;;;1583   							{
;;;1584   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1585   							}
;;;1586   						}	
;;;1587   						Para.CDC_Limit_C = temp1;//电源电流
;;;1588   						temp1 = 0;
;;;1589   						
;;;1590   						if(buf[currCharNum++] == ',')
;;;1591   						{
;;;1592   							for(i=0,temp1=0;i<1;i++)
;;;1593   							{
;;;1594   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1595   							}
;;;1596   						}
;;;1597   						mainswitch = temp1;//开关
;;;1598   						
;;;1599   						
;;;1600   					}else if(MODE == 4){
;;;1601   						if(buf[currCharNum++] == ',')
;;;1602   						{
;;;1603   							for(i=0,temp1=0;i<6;i++)
;;;1604   							{
;;;1605   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1606   							}
;;;1607   						}	
;;;1608   						
;;;1609   						temp1 = 0;
;;;1610   						
;;;1611   						if(buf[currCharNum++] == ',')
;;;1612   						{
;;;1613   							for(i=0,temp1=0;i<5;i++)
;;;1614   							{
;;;1615   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1616   							}
;;;1617   						}	
;;;1618   						Para.CSET_Current_Laod = temp1;//负载电流
;;;1619   						temp1 = 0;
;;;1620   						
;;;1621   	
;;;1622   						if(Para.CSET_Current_Laod > 15000)
;;;1623   						{
;;;1624   							LOAD_I_SW = 1;
;;;1625   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1626   						}else{
;;;1627   							LOAD_I_SW = 0;
;;;1628   							GPIO_SetBits(GPIOC,GPIO_Pin_11);//电流测量为低档位
;;;1629   						}
;;;1630   						if(buf[currCharNum++] == ',')
;;;1631   						{
;;;1632   							for(i=0,temp1=0;i<1;i++)
;;;1633   							{
;;;1634   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1635   							}
;;;1636   						}
;;;1637   						mainswitch = temp1;//开关
;;;1638   						if(mainswitch == 0)
;;;1639   						{
;;;1640   							LOAD_I_SW = 1;
;;;1641   							GPIO_ResetBits(GPIOC,GPIO_Pin_11);//电流测量为高档位
;;;1642   						}
;;;1643   					}else if(MODE == 5){
;;;1644   						if(buf[currCharNum++] == ',')
;;;1645   						{
;;;1646   							for(i=0,temp1=0;i<6;i++)
;;;1647   							{
;;;1648   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1649   							}
;;;1650   						}	
;;;1651   						temp1 = 0;
;;;1652   						
;;;1653   						if(buf[currCharNum++] == ',')
;;;1654   						{
;;;1655   							for(i=0,temp1=0;i<5;i++)
;;;1656   							{
;;;1657   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1658   							}
;;;1659   						}	
;;;1660   						temp1 = 0;
;;;1661   						
;;;1662   						if(buf[currCharNum++] == ',')
;;;1663   						{
;;;1664   							for(i=0,temp1=0;i<1;i++)
;;;1665   							{
;;;1666   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1667   							}
;;;1668   						}
;;;1669   						mainswitch = temp1;//开关
;;;1670   						if(mainswitch == 0)
;;;1671   						{
;;;1672   							mainswitch = 0;
;;;1673   						}
;;;1674   					}else if(MODE == 6){
;;;1675   						if(buf[currCharNum++] == ',')
;;;1676   						{
;;;1677   							for(i=0,temp1=0;i<6;i++)
;;;1678   							{
;;;1679   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1680   							}
;;;1681   						}	
;;;1682   						temp1 = 0;
;;;1683   						
;;;1684   						if(buf[currCharNum++] == ',')
;;;1685   						{
;;;1686   							for(i=0,temp1=0;i<5;i++)
;;;1687   							{
;;;1688   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1689   							}
;;;1690   						}	
;;;1691   						temp1 = 0;
;;;1692   						
;;;1693   						if(buf[currCharNum++] == ',')
;;;1694   						{
;;;1695   							for(i=0,temp1=0;i<1;i++)
;;;1696   							{
;;;1697   								temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1698   							}
;;;1699   						}
;;;1700   						mainswitch = temp1;//开关
;;;1701   					}
;;;1702   					
;;;1703   					temp1 = 0;
;;;1704   //					MODE_PARASET(MODE);
;;;1705   					Off_GPOI_ResetSet();
;;;1706   					LIST_ONOFF(mainswitch);
;;;1707   					buf[currCharNum++] = ChrEndR;
;;;1708   		        }
;;;1709   				break;
;;;1710   				case 12://电压校准
;;;1711   				{
;;;1712   					pntlen = 9;
;;;1713   					if(buf[currCharNum]=='?')
;;;1714   					{
;;;1715   						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1716   						sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1717   						currCharNum+=pntlen;
;;;1718   						buf[currCharNum++ ] = ChrEndS;
;;;1719   					}
;;;1720   					else
;;;1721   					{
;;;1722   						tmpFg = 1;
;;;1723   						for(i=0;i<pntlen;i++)
;;;1724   						{
;;;1725   						   if(i==0||i==5)
;;;1726   							  continue;
;;;1727   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1728   						   {
;;;1729   							  tmpFg = (tmpFg&0x01);
;;;1730   						   }
;;;1731   						   else
;;;1732   						   {
;;;1733   							  tmpFg = 0;
;;;1734   						   }
;;;1735   						}
;;;1736   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1737   						{
;;;1738   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1739   							
;;;1740   						}
;;;1741   						temp1=0;
;;;1742   						for(i=0;i<pntlen;i++)
;;;1743   						{
;;;1744   						   if(i==0)
;;;1745   						   {
;;;1746   							   fsingal = 10*(buf[currCharNum++]-0x30);
;;;1747   							   continue; 
;;;1748   						   }else if(i==1)
;;;1749   						   {
;;;1750   							  fsingal = fsingal+(buf[currCharNum++]-0x30);
;;;1751   							  continue; 
;;;1752   						   } 
;;;1753   						   else if(i==5)
;;;1754   						   {
;;;1755   							   currCharNum++;
;;;1756   							   continue; 
;;;1757   						   }
;;;1758   						   else									 
;;;1759   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1760   						}	
;;;1761   						CalHandle(0,fsingal,temp1);
;;;1762   						
;;;1763   					}
;;;1764   				}break;
;;;1765   				case 5:
;;;1766   				pntlen = 1;
;;;1767   				if(buf[currCharNum]=='?')
;;;1768   				{
;;;1769   					sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1770   				    currCharNum+=pntlen;
;;;1771   				    buf[currCharNum ++] = ChrEndS;
;;;1772   					
;;;1773   				}
;;;1774   				else
;;;1775   				{
;;;1776   					pntlen = 1;				
;;;1777   					for(i=0,temp1=0;i<pntlen;i++)
;;;1778   					{
;;;1779   						  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1780   					}		                   
;;;1781   					if(temp1>1)
;;;1782   					{
;;;1783   						return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1784   					}
;;;1785   //					MODE=temp1;
;;;1786   					
;;;1787   					
;;;1788   					overflag = temp1;
;;;1789   //						Para.CSET_Voltage = 5000;
;;;1790   //						Para.CSET_Current = 1000;
;;;1791   					
;;;1792   						
;;;1793   //					MODE_ONOFF(mainswitch);
;;;1794   	//				Change_LM_Val(LM_S_Vale);
;;;1795   					buf[currCharNum++] = ChrEndR;
;;;1796   		        }
;;;1797   				break;
;;;1798   				case 13://电流校准
;;;1799   				{
;;;1800   					pntlen = 9;
;;;1801   					if(buf[currCharNum]=='?')
;;;1802   					{
;;;1803   //						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1804   //									sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1805   //						currCharNum+=pntlen;
;;;1806   //						buf[currCharNum++ ] = ChrEndS;
;;;1807   					}
;;;1808   					else
;;;1809   					{
;;;1810   						tmpFg = 1;
;;;1811   						for(i=0;i<pntlen;i++)
;;;1812   						{
;;;1813   						   if(i==0||i==5)
;;;1814   							  continue;
;;;1815   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1816   						   {
;;;1817   							  tmpFg = (tmpFg&0x01);
;;;1818   						   }
;;;1819   						   else
;;;1820   						   {
;;;1821   							  tmpFg = 0;
;;;1822   						   }
;;;1823   						}
;;;1824   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1825   						{
;;;1826   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1827   							
;;;1828   						}
;;;1829   						temp1=0;
;;;1830   						for(i=0;i<pntlen;i++)
;;;1831   						{
;;;1832   						   if(i==0)
;;;1833   						   {
;;;1834   							   fsingal = 10*(buf[currCharNum++]-0x30);
;;;1835   							   continue; 
;;;1836   						   }else if(i==1)
;;;1837   						   {
;;;1838   							  fsingal = fsingal+(buf[currCharNum++]-0x30);
;;;1839   							  continue; 
;;;1840   						   } 
;;;1841   						   else if(i==5)
;;;1842   						   {
;;;1843   							   currCharNum++;
;;;1844   							   continue; 
;;;1845   						   }
;;;1846   						   else									 
;;;1847   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1848   						}
;;;1849   //						for(i=0;i<pntlen;i++)
;;;1850   //						{
;;;1851   //						   if(i==0)
;;;1852   //						   {
;;;1853   //							   fsingal = buf[currCharNum++]-0x30;
;;;1854   //							   continue; 
;;;1855   //						   } 
;;;1856   //						   else if(i==5)
;;;1857   //						   {
;;;1858   //							   currCharNum++;
;;;1859   //							   continue; 
;;;1860   //						   }
;;;1861   //						   else									 
;;;1862   //						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1863   //						}	
;;;1864   						CalHandle(1,fsingal,temp1);
;;;1865   						
;;;1866   					}
;;;1867   				}break;
;;;1868   				case 14://电阻校准
;;;1869   				{
;;;1870   					pntlen = 6;
;;;1871   					if(buf[currCharNum]=='?')
;;;1872   					{
;;;1873   						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;1874   									sprintf(&buf[currCharNum],"%03.3f",Lvl_Vale);
;;;1875   						currCharNum+=pntlen;
;;;1876   						buf[currCharNum++ ] = ChrEndS;
;;;1877   					}
;;;1878   					else
;;;1879   					{
;;;1880   						tmpFg = 1;
;;;1881   						for(i=0;i<pntlen;i++)
;;;1882   						{
;;;1883   						   if(i==0||i==4)
;;;1884   							  continue;
;;;1885   						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1886   						   {
;;;1887   							  tmpFg = (tmpFg&0x01);
;;;1888   						   }
;;;1889   						   else
;;;1890   						   {
;;;1891   							  tmpFg = 0;
;;;1892   						   }
;;;1893   						}
;;;1894   						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1895   						{
;;;1896   							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1897   							
;;;1898   						}
;;;1899   						temp1=0;
;;;1900   						for(i=0;i<pntlen;i++)
;;;1901   						{
;;;1902   						   if(i==0)
;;;1903   						   {
;;;1904   							   fsingal = buf[currCharNum++]-0x30;
;;;1905   							   continue; 
;;;1906   						   } 
;;;1907   //						   else if(i==4)
;;;1908   //						   {
;;;1909   //							   currCharNum++;
;;;1910   //							   continue; 
;;;1911   //						   }
;;;1912   //						   else									 
;;;1913   						   temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1914   						}
;;;1915   						CalHandle(2,fsingal,temp1);
;;;1916   						
;;;1917   					}
;;;1918   				}break;
;;;1919   				case 18:
;;;1920   				{
;;;1921   					if(buf[currCharNum]=='?')
;;;1922   					{
;;;1923   //						sprintf(&buf[currCharNum],"%1d",C_DISCHARGE);
;;;1924   //						currCharNum+=pntlen;
;;;1925   //						buf[currCharNum ++] = ChrEndS;
;;;1926   						
;;;1927   					}
;;;1928   					else
;;;1929   					{
;;;1930   						pntlen = 1;				
;;;1931   						for(i=0,temp1=0;i<pntlen;i++)
;;;1932   						{
;;;1933   							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1934   						}		                   
;;;1935   						if(temp1>1)
;;;1936   						{
;;;1937   							return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1938   						}
;;;1939   	//					MODE=temp1;
;;;1940   						
;;;1941   						jumpflag = temp1;
;;;1942   						bootflag=1;
;;;1943   						Write_Boot_Flag();
;;;1944   //						if(temp1 == 1)
;;;1945   //						{
;;;1946   //							JumpBoot(55);
;;;1947   //						}
;;;1948   						buf[currCharNum++] = ChrEndR;
;;;1949   					}
;;;1950   				}break;
;;;1951   //				case 15:
;;;1952   //				{
;;;1953   //					pntlen = 1;
;;;1954   //					if(buf[currCharNum]=='?')
;;;1955   //					{
;;;1956   //						sprintf(&buf[currCharNum],"%1d",Gmode_Vale);
;;;1957   //						currCharNum+=pntlen;
;;;1958   //						buf[currCharNum] = ChrEndR;
;;;1959   //						currCharNum++;
;;;1960   //	//				    buf[currCharNum ++] = ChrEndS;
;;;1961   //						
;;;1962   //					}
;;;1963   //					else
;;;1964   //					{
;;;1965   //						tmpFg = 1;
;;;1966   //						for(i=0;i<pntlen;i++)
;;;1967   //						{
;;;1968   //						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;1969   //						   {
;;;1970   //							  tmpFg = (tmpFg&0x01);
;;;1971   //						   }
;;;1972   //						   else
;;;1973   //						   {
;;;1974   //							  tmpFg = 0;
;;;1975   //						   }
;;;1976   //						}
;;;1977   //						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;1978   //						{
;;;1979   //							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;1980   //							
;;;1981   //						}					
;;;1982   //						for(i=0,temp1=0;i<pntlen;i++)
;;;1983   //						{
;;;1984   //							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;1985   //						}		                   
;;;1986   //						if(temp1 >Mode_H)
;;;1987   //						 {
;;;1988   //							 return SetErr_ACK(buf, addr ,PARA_ERR);
;;;1989   //							 
;;;1990   //						 }
;;;1991   //						 if(H_L == 1)
;;;1992   //						 {
;;;1993   //							CalHandle(3,1,temp1);
;;;1994   //						 }else{
;;;1995   //							 CalHandle(3,0,temp1);
;;;1996   //						 }
;;;1997   //						 
;;;1998   ////								 Mode=temp1;
;;;1999   ////								Change_MODE_Val(Mode);
;;;2000   ////						 buf[currCharNum++] = ChrEndS;
;;;2001   //					}
;;;2002   //					break;
;;;2003   //				}break;
;;;2004   //				case 16:
;;;2005   //				{
;;;2006   //					pntlen = 3;
;;;2007   //					if(buf[currCharNum]=='?')
;;;2008   //					{
;;;2009   //						sprintf(&buf[currCharNum],"%1d",Gmode_Vale);
;;;2010   //						currCharNum+=pntlen;
;;;2011   //						buf[currCharNum] = ChrEndR;
;;;2012   //						currCharNum++;
;;;2013   //	//				    buf[currCharNum ++] = ChrEndS;
;;;2014   //						
;;;2015   //					}
;;;2016   //					else
;;;2017   //					{
;;;2018   //						tmpFg = 1;
;;;2019   //						for(i=0;i<pntlen;i++)
;;;2020   //						{
;;;2021   //						   if(IsDigitChar(buf[currCharNum+i])==1)
;;;2022   //						   {
;;;2023   //							  tmpFg = (tmpFg&0x01);
;;;2024   //						   }
;;;2025   //						   else
;;;2026   //						   {
;;;2027   //							  tmpFg = 0;
;;;2028   //						   }
;;;2029   //						}
;;;2030   //						if(tmpFg!=1||buf[currCharNum+pntlen]!=ChrEndR)
;;;2031   //						{
;;;2032   //							return SetErr_ACK(buf, addr ,CMD_ERR);
;;;2033   //							
;;;2034   //						}					
;;;2035   //						for(i=0,temp1=0;i<pntlen;i++)
;;;2036   //						{
;;;2037   //							  temp1 = temp1*10+(buf[currCharNum++]-0x30);
;;;2038   //						}		                   
;;;2039   //						 overflag = temp1;
;;;2040   //						 
;;;2041   ////								 Mode=temp1;
;;;2042   ////								Change_MODE_Val(Mode);
;;;2043   ////						 buf[currCharNum++] = ChrEndS;
;;;2044   //					}
;;;2045   //					break;
;;;2046   //				}break;
;;;2047   //				case 17:
;;;2048   //				{
;;;2049   //					pntlen = 2;
;;;2050   //					if(buf[currCharNum]=='?')
;;;2051   //					{
;;;2052   ////						buf[currCharNum++]=(Lvl_Vale>=0?'+':'-');
;;;2053   //									sprintf(&buf[currCharNum],"%02d",(int)temperature);
;;;2054   //						currCharNum+=pntlen;
;;;2055   //						buf[currCharNum++ ] = ChrEndR;
;;;2056   //						buf[currCharNum++ ] = ChrEndS;
;;;2057   //					}
;;;2058   //				}break;
;;;2059   			default:    //ERR
;;;2060              		 return SetErr_ACK(buf, addr ,CMD_ERR);
;;;2061   	 			  
;;;2062   		  }
;;;2063   		  break;
;;;2064   		}
;;;2065   		
;;;2066   	}
;;;2067   	if(j>=CmdNumb)
;;;2068   	{
;;;2069   		return SetErr_ACK(buf, addr ,CMD_ERR);			  
0002c8  4628              MOV      r0,r5
0002ca  9932              LDR      r1,[sp,#0xc8]
0002cc  f7fffffe          BL       SetErr_ACK
;;;2070   	}
;;;2071   	return currCharNum+1;
;;;2072   }
0002d0  b033              ADD      sp,sp,#0xcc
0002d2  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.726|
0002d6  f7fffffe          BL       __2sprintf
0002da  1c64              ADDS     r4,r4,#1              ;1149
0002dc  e3f1              B        |L9.2754|
                  |L9.734|
0002de  4957              LDR      r1,|L9.1084|
0002e0  3958              SUBS     r1,r1,#0x58           ;1198
0002e2  7188              STRB     r0,[r1,#6]            ;1198
0002e4  7988              LDRB     r0,[r1,#6]            ;1203  ; mainswitch
0002e6  f7fffffe          BL       MODE_ONOFF
0002ea  e3eb              B        |L9.2756|
                  |L9.748|
0002ec  5d29              LDRB     r1,[r5,r4]            ;1210
0002ee  293f              CMP      r1,#0x3f              ;1210
0002f0  d0d0              BEQ      |L9.660|
0002f2  2c0b              CMP      r4,#0xb               ;1219
0002f4  d10d              BNE      |L9.786|
0002f6  2000              MOVS     r0,#0                 ;1221
0002f8  4607              MOV      r7,r0                 ;1221
                  |L9.762|
0002fa  5d2a              LDRB     r2,[r5,r4]            ;1223
0002fc  eb070187          ADD      r1,r7,r7,LSL #2       ;1223
000300  eb060141          ADD      r1,r6,r1,LSL #1       ;1223
000304  1c64              ADDS     r4,r4,#1              ;1223
000306  1c40              ADDS     r0,r0,#1              ;1223
000308  1857              ADDS     r7,r2,r1              ;1223
00030a  b2c0              UXTB     r0,r0                 ;1221
00030c  b2a4              UXTH     r4,r4                 ;1223
00030e  2806              CMP      r0,#6                 ;1221
000310  d3f3              BCC      |L9.762|
                  |L9.786|
000312  4650              MOV      r0,r10                ;1226
000314  f8ca7044          STR      r7,[r10,#0x44]        ;1226  ; Para
000318  5d2b              LDRB     r3,[r5,r4]            ;1229
00031a  1c64              ADDS     r4,r4,#1              ;1229
00031c  2200              MOVS     r2,#0                 ;1227
00031e  b2a1              UXTH     r1,r4                 ;1229
000320  2b2c              CMP      r3,#0x2c              ;1229
000322  d10c              BNE      |L9.830|
000324  2300              MOVS     r3,#0                 ;1231
                  |L9.806|
000326  5c6c              LDRB     r4,[r5,r1]            ;1233
000328  eb020282          ADD      r2,r2,r2,LSL #2       ;1233
00032c  1c49              ADDS     r1,r1,#1              ;1233
00032e  1c5b              ADDS     r3,r3,#1              ;1233
000330  eb060242          ADD      r2,r6,r2,LSL #1       ;1233
000334  b2db              UXTB     r3,r3                 ;1231
000336  4422              ADD      r2,r2,r4              ;1233
000338  b289              UXTH     r1,r1                 ;1233
00033a  2b05              CMP      r3,#5                 ;1231
00033c  d3f3              BCC      |L9.806|
                  |L9.830|
00033e  f8a02048          STRH     r2,[r0,#0x48]         ;1236
000342  5c6a              LDRB     r2,[r5,r1]            ;1239
000344  1c49              ADDS     r1,r1,#1              ;1239
000346  2300              MOVS     r3,#0                 ;1237
000348  b289              UXTH     r1,r1                 ;1239
00034a  2a2c              CMP      r2,#0x2c              ;1239
00034c  d10c              BNE      |L9.872|
00034e  2200              MOVS     r2,#0                 ;1241
                  |L9.848|
000350  5c6c              LDRB     r4,[r5,r1]            ;1243
000352  eb030383          ADD      r3,r3,r3,LSL #2       ;1243
000356  1c49              ADDS     r1,r1,#1              ;1243
000358  1c52              ADDS     r2,r2,#1              ;1243
00035a  eb060343          ADD      r3,r6,r3,LSL #1       ;1243
00035e  b2d2              UXTB     r2,r2                 ;1241
000360  4423              ADD      r3,r3,r4              ;1243
000362  b289              UXTH     r1,r1                 ;1243
000364  2a05              CMP      r2,#5                 ;1241
000366  d3f3              BCC      |L9.848|
                  |L9.872|
000368  64c3              STR      r3,[r0,#0x4c]         ;1246  ; Para
00036a  5c6b              LDRB     r3,[r5,r1]            ;1249
00036c  1c49              ADDS     r1,r1,#1              ;1249
00036e  2200              MOVS     r2,#0                 ;1247
000370  b289              UXTH     r1,r1                 ;1249
000372  2b2c              CMP      r3,#0x2c              ;1249
000374  d10c              BNE      |L9.912|
000376  2300              MOVS     r3,#0                 ;1251
                  |L9.888|
000378  5c6c              LDRB     r4,[r5,r1]            ;1253
00037a  eb020282          ADD      r2,r2,r2,LSL #2       ;1253
00037e  1c49              ADDS     r1,r1,#1              ;1253
000380  1c5b              ADDS     r3,r3,#1              ;1253
000382  eb060242          ADD      r2,r6,r2,LSL #1       ;1253
000386  b2db              UXTB     r3,r3                 ;1251
000388  4422              ADD      r2,r2,r4              ;1253
00038a  b289              UXTH     r1,r1                 ;1253
00038c  2b03              CMP      r3,#3                 ;1251
00038e  d3f3              BCC      |L9.888|
                  |L9.912|
000390  e000              B        |L9.916|
                  |L9.914|
000392  e217              B        |L9.1988|
                  |L9.916|
000394  f8a02050          STRH     r2,[r0,#0x50]         ;1256
000398  5c6a              LDRB     r2,[r5,r1]            ;1259
00039a  1c49              ADDS     r1,r1,#1              ;1259
00039c  2300              MOVS     r3,#0                 ;1257
00039e  b289              UXTH     r1,r1                 ;1259
0003a0  2a2c              CMP      r2,#0x2c              ;1259
0003a2  d10c              BNE      |L9.958|
0003a4  2200              MOVS     r2,#0                 ;1261
                  |L9.934|
0003a6  5c6c              LDRB     r4,[r5,r1]            ;1263
0003a8  eb030383          ADD      r3,r3,r3,LSL #2       ;1263
0003ac  1c49              ADDS     r1,r1,#1              ;1263
0003ae  1c52              ADDS     r2,r2,#1              ;1263
0003b0  eb060343          ADD      r3,r6,r3,LSL #1       ;1263
0003b4  b2d2              UXTB     r2,r2                 ;1261
0003b6  4423              ADD      r3,r3,r4              ;1263
0003b8  b289              UXTH     r1,r1                 ;1263
0003ba  2a06              CMP      r2,#6                 ;1261
0003bc  d3f3              BCC      |L9.934|
                  |L9.958|
0003be  6543              STR      r3,[r0,#0x54]         ;1266  ; Para
0003c0  5c6b              LDRB     r3,[r5,r1]            ;1269
0003c2  1c49              ADDS     r1,r1,#1              ;1269
0003c4  2200              MOVS     r2,#0                 ;1267
0003c6  b289              UXTH     r1,r1                 ;1269
0003c8  2b2c              CMP      r3,#0x2c              ;1269
0003ca  d10c              BNE      |L9.998|
0003cc  2300              MOVS     r3,#0                 ;1271
                  |L9.974|
0003ce  5c6c              LDRB     r4,[r5,r1]            ;1273
0003d0  eb020282          ADD      r2,r2,r2,LSL #2       ;1273
0003d4  1c49              ADDS     r1,r1,#1              ;1273
0003d6  1c5b              ADDS     r3,r3,#1              ;1273
0003d8  eb060242          ADD      r2,r6,r2,LSL #1       ;1273
0003dc  b2db              UXTB     r3,r3                 ;1271
0003de  4422              ADD      r2,r2,r4              ;1273
0003e0  b289              UXTH     r1,r1                 ;1273
0003e2  2b05              CMP      r3,#5                 ;1271
0003e4  d3f3              BCC      |L9.974|
                  |L9.998|
0003e6  f8a02058          STRH     r2,[r0,#0x58]         ;1276
0003ea  5c6b              LDRB     r3,[r5,r1]            ;1279
0003ec  1c49              ADDS     r1,r1,#1              ;1279
0003ee  2200              MOVS     r2,#0                 ;1277
0003f0  b289              UXTH     r1,r1                 ;1279
0003f2  2b2c              CMP      r3,#0x2c              ;1279
0003f4  d10c              BNE      |L9.1040|
0003f6  2300              MOVS     r3,#0                 ;1281
                  |L9.1016|
0003f8  5c6c              LDRB     r4,[r5,r1]            ;1283
0003fa  eb020282          ADD      r2,r2,r2,LSL #2       ;1283
0003fe  1c49              ADDS     r1,r1,#1              ;1283
000400  1c5b              ADDS     r3,r3,#1              ;1283
000402  eb060242          ADD      r2,r6,r2,LSL #1       ;1283
000406  b2db              UXTB     r3,r3                 ;1281
000408  4422              ADD      r2,r2,r4              ;1283
00040a  b289              UXTH     r1,r1                 ;1283
00040c  2b05              CMP      r3,#5                 ;1281
00040e  d3f3              BCC      |L9.1016|
                  |L9.1040|
000410  f8a0205a          STRH     r2,[r0,#0x5a]         ;1286
000414  5c6a              LDRB     r2,[r5,r1]            ;1289
000416  1c49              ADDS     r1,r1,#1              ;1289
000418  2300              MOVS     r3,#0                 ;1287
00041a  b289              UXTH     r1,r1                 ;1289
00041c  2a2c              CMP      r2,#0x2c              ;1289
00041e  d13b              BNE      |L9.1176|
000420  2200              MOVS     r2,#0                 ;1291
                  |L9.1058|
000422  5c6c              LDRB     r4,[r5,r1]            ;1293
000424  eb030383          ADD      r3,r3,r3,LSL #2       ;1293
000428  eb060343          ADD      r3,r6,r3,LSL #1       ;1293
00042c  1c49              ADDS     r1,r1,#1              ;1293
00042e  4423              ADD      r3,r3,r4              ;1293
000430  b289              UXTH     r1,r1                 ;1293
000432  e02d              B        |L9.1168|
                  |L9.1076|
000434  256400            DCB      "%d",0
000437  00                DCB      0
                  |L9.1080|
000438  2f00              DCB      "/",0
00043a  00                DCB      0
00043b  00                DCB      0
                  |L9.1084|
                          DCD      ||.data||+0x58
                  |L9.1088|
                          DCD      C_DISCHARGE
                  |L9.1092|
                          DCD      Para
                  |L9.1096|
000448  25303664          DCB      "%06d",0
00044c  00      
00044d  00                DCB      0
00044e  00                DCB      0
00044f  00                DCB      0
                  |L9.1104|
000450  25303564          DCB      "%05d",0
000454  00      
000455  00                DCB      0
000456  00                DCB      0
000457  00                DCB      0
                  |L9.1112|
000458  25303464          DCB      "%04d",0
00045c  00      
00045d  00                DCB      0
00045e  00                DCB      0
00045f  00                DCB      0
                  |L9.1120|
                          DCD      max_discahrgeNum
                  |L9.1124|
000464  447a0000          DCFS     0x447a0000 ; 1000
                  |L9.1128|
                          DCD      shorttime
                  |L9.1132|
00046c  25303364          DCB      "%03d",0
000470  00      
000471  00                DCB      0
000472  00                DCB      0
000473  00                DCB      0
                  |L9.1140|
000474  25316400          DCB      "%1d",0
                  |L9.1144|
                          DCD      finishflag
                  |L9.1148|
                          DCD      lockflag
                  |L9.1152|
                          DCD      version
                  |L9.1156|
000484  25326400          DCB      "%2d",0
                  |L9.1160|
                          DCD      Temperature
                  |L9.1164|
                          DCD      overflag
                  |L9.1168|
000490  1c52              ADDS     r2,r2,#1              ;1293
000492  b2d2              UXTB     r2,r2                 ;1291
000494  2a06              CMP      r2,#6                 ;1291
000496  d3c4              BCC      |L9.1058|
                  |L9.1176|
000498  6603              STR      r3,[r0,#0x60]         ;1296  ; Para
00049a  5c6a              LDRB     r2,[r5,r1]            ;1299
00049c  1c49              ADDS     r1,r1,#1              ;1299
00049e  2300              MOVS     r3,#0                 ;1297
0004a0  b289              UXTH     r1,r1                 ;1299
0004a2  2a2c              CMP      r2,#0x2c              ;1299
0004a4  d10c              BNE      |L9.1216|
0004a6  2200              MOVS     r2,#0                 ;1301
                  |L9.1192|
0004a8  5c6c              LDRB     r4,[r5,r1]            ;1303
0004aa  eb030383          ADD      r3,r3,r3,LSL #2       ;1303
0004ae  1c49              ADDS     r1,r1,#1              ;1303
0004b0  1c52              ADDS     r2,r2,#1              ;1303
0004b2  eb060343          ADD      r3,r6,r3,LSL #1       ;1303
0004b6  b2d2              UXTB     r2,r2                 ;1301
0004b8  4423              ADD      r3,r3,r4              ;1303
0004ba  b289              UXTH     r1,r1                 ;1303
0004bc  2a06              CMP      r2,#6                 ;1301
0004be  d3f3              BCC      |L9.1192|
                  |L9.1216|
0004c0  65c3              STR      r3,[r0,#0x5c]         ;1306  ; Para
0004c2  5c6b              LDRB     r3,[r5,r1]            ;1309
0004c4  1c49              ADDS     r1,r1,#1              ;1309
0004c6  2200              MOVS     r2,#0                 ;1307
0004c8  b289              UXTH     r1,r1                 ;1309
0004ca  2b2c              CMP      r3,#0x2c              ;1309
0004cc  d10c              BNE      |L9.1256|
0004ce  2300              MOVS     r3,#0                 ;1311
                  |L9.1232|
0004d0  5c6c              LDRB     r4,[r5,r1]            ;1313
0004d2  eb020282          ADD      r2,r2,r2,LSL #2       ;1313
0004d6  1c49              ADDS     r1,r1,#1              ;1313
0004d8  1c5b              ADDS     r3,r3,#1              ;1313
0004da  eb060242          ADD      r2,r6,r2,LSL #1       ;1313
0004de  b2db              UXTB     r3,r3                 ;1311
0004e0  4422              ADD      r2,r2,r4              ;1313
0004e2  b289              UXTH     r1,r1                 ;1313
0004e4  2b06              CMP      r3,#6                 ;1311
0004e6  d3f3              BCC      |L9.1232|
                  |L9.1256|
0004e8  f8a02068          STRH     r2,[r0,#0x68]         ;1316
0004ec  5c6a              LDRB     r2,[r5,r1]            ;1319
0004ee  1c49              ADDS     r1,r1,#1              ;1319
0004f0  2300              MOVS     r3,#0                 ;1317
0004f2  b289              UXTH     r1,r1                 ;1319
0004f4  2a2c              CMP      r2,#0x2c              ;1319
0004f6  d10c              BNE      |L9.1298|
0004f8  2200              MOVS     r2,#0                 ;1321
                  |L9.1274|
0004fa  5c6c              LDRB     r4,[r5,r1]            ;1323
0004fc  eb030383          ADD      r3,r3,r3,LSL #2       ;1323
000500  1c49              ADDS     r1,r1,#1              ;1323
000502  1c52              ADDS     r2,r2,#1              ;1323
000504  eb060343          ADD      r3,r6,r3,LSL #1       ;1323
000508  b2d2              UXTB     r2,r2                 ;1321
00050a  4423              ADD      r3,r3,r4              ;1323
00050c  b289              UXTH     r1,r1                 ;1323
00050e  2a05              CMP      r2,#5                 ;1321
000510  d3f3              BCC      |L9.1274|
                  |L9.1298|
000512  66c3              STR      r3,[r0,#0x6c]         ;1326  ; Para
000514  5c6b              LDRB     r3,[r5,r1]            ;1329
000516  1c49              ADDS     r1,r1,#1              ;1329
000518  2200              MOVS     r2,#0                 ;1327
00051a  b289              UXTH     r1,r1                 ;1329
00051c  2b2c              CMP      r3,#0x2c              ;1329
00051e  d10c              BNE      |L9.1338|
000520  2300              MOVS     r3,#0                 ;1331
                  |L9.1314|
000522  5c6c              LDRB     r4,[r5,r1]            ;1333
000524  eb020282          ADD      r2,r2,r2,LSL #2       ;1333
000528  1c49              ADDS     r1,r1,#1              ;1333
00052a  1c5b              ADDS     r3,r3,#1              ;1333
00052c  eb060242          ADD      r2,r6,r2,LSL #1       ;1333
000530  b2db              UXTB     r3,r3                 ;1331
000532  4422              ADD      r2,r2,r4              ;1333
000534  b289              UXTH     r1,r1                 ;1333
000536  2b05              CMP      r3,#5                 ;1331
000538  d3f3              BCC      |L9.1314|
                  |L9.1338|
00053a  f8a02070          STRH     r2,[r0,#0x70]         ;1336
00053e  5c6a              LDRB     r2,[r5,r1]            ;1339
000540  1c49              ADDS     r1,r1,#1              ;1339
000542  2300              MOVS     r3,#0                 ;1337
000544  b289              UXTH     r1,r1                 ;1339
000546  2a2c              CMP      r2,#0x2c              ;1339
000548  d10c              BNE      |L9.1380|
00054a  2200              MOVS     r2,#0                 ;1341
                  |L9.1356|
00054c  5c6c              LDRB     r4,[r5,r1]            ;1343
00054e  eb030383          ADD      r3,r3,r3,LSL #2       ;1343
000552  1c49              ADDS     r1,r1,#1              ;1343
000554  1c52              ADDS     r2,r2,#1              ;1343
000556  eb060343          ADD      r3,r6,r3,LSL #1       ;1343
00055a  b2d2              UXTB     r2,r2                 ;1341
00055c  4423              ADD      r3,r3,r4              ;1343
00055e  b289              UXTH     r1,r1                 ;1343
000560  2a05              CMP      r2,#5                 ;1341
000562  d3f3              BCC      |L9.1356|
                  |L9.1380|
000564  6743              STR      r3,[r0,#0x74]         ;1346  ; Para
000566  5c6b              LDRB     r3,[r5,r1]            ;1349
000568  1c49              ADDS     r1,r1,#1              ;1349
00056a  2200              MOVS     r2,#0                 ;1347
00056c  b289              UXTH     r1,r1                 ;1349
00056e  2b2c              CMP      r3,#0x2c              ;1349
000570  d10c              BNE      |L9.1420|
000572  2300              MOVS     r3,#0                 ;1351
                  |L9.1396|
000574  5c6c              LDRB     r4,[r5,r1]            ;1353
000576  eb020282          ADD      r2,r2,r2,LSL #2       ;1353
00057a  1c49              ADDS     r1,r1,#1              ;1353
00057c  1c5b              ADDS     r3,r3,#1              ;1353
00057e  eb060242          ADD      r2,r6,r2,LSL #1       ;1353
000582  b2db              UXTB     r3,r3                 ;1351
000584  4422              ADD      r2,r2,r4              ;1353
000586  b289              UXTH     r1,r1                 ;1353
000588  2b05              CMP      r3,#5                 ;1351
00058a  d3f3              BCC      |L9.1396|
                  |L9.1420|
00058c  f8a02078          STRH     r2,[r0,#0x78]         ;1356
000590  5c6a              LDRB     r2,[r5,r1]            ;1359
000592  1c49              ADDS     r1,r1,#1              ;1359
000594  2300              MOVS     r3,#0                 ;1357
000596  b289              UXTH     r1,r1                 ;1359
000598  2a2c              CMP      r2,#0x2c              ;1359
00059a  d10c              BNE      |L9.1462|
00059c  2200              MOVS     r2,#0                 ;1361
                  |L9.1438|
00059e  5c6c              LDRB     r4,[r5,r1]            ;1363
0005a0  eb030383          ADD      r3,r3,r3,LSL #2       ;1363
0005a4  1c49              ADDS     r1,r1,#1              ;1363
0005a6  1c52              ADDS     r2,r2,#1              ;1363
0005a8  eb060343          ADD      r3,r6,r3,LSL #1       ;1363
0005ac  b2d2              UXTB     r2,r2                 ;1361
0005ae  4423              ADD      r3,r3,r4              ;1363
0005b0  b289              UXTH     r1,r1                 ;1363
0005b2  2a05              CMP      r2,#5                 ;1361
0005b4  d3f3              BCC      |L9.1438|
                  |L9.1462|
0005b6  67c3              STR      r3,[r0,#0x7c]         ;1366  ; Para
0005b8  5c6a              LDRB     r2,[r5,r1]            ;1369
0005ba  1c49              ADDS     r1,r1,#1              ;1369
0005bc  2300              MOVS     r3,#0                 ;1367
0005be  b289              UXTH     r1,r1                 ;1369
0005c0  2a2c              CMP      r2,#0x2c              ;1369
0005c2  d10c              BNE      |L9.1502|
0005c4  2200              MOVS     r2,#0                 ;1371
                  |L9.1478|
0005c6  5c6c              LDRB     r4,[r5,r1]            ;1373
0005c8  eb030383          ADD      r3,r3,r3,LSL #2       ;1373
0005cc  1c49              ADDS     r1,r1,#1              ;1373
0005ce  1c52              ADDS     r2,r2,#1              ;1373
0005d0  eb060343          ADD      r3,r6,r3,LSL #1       ;1373
0005d4  b2d2              UXTB     r2,r2                 ;1371
0005d6  4423              ADD      r3,r3,r4              ;1373
0005d8  b289              UXTH     r1,r1                 ;1373
0005da  2a05              CMP      r2,#5                 ;1371
0005dc  d3f3              BCC      |L9.1478|
                  |L9.1502|
0005de  f8c03080          STR      r3,[r0,#0x80]         ;1376  ; Para
0005e2  5c6b              LDRB     r3,[r5,r1]            ;1379
0005e4  1c49              ADDS     r1,r1,#1              ;1379
0005e6  2200              MOVS     r2,#0                 ;1377
0005e8  b289              UXTH     r1,r1                 ;1379
0005ea  2b2c              CMP      r3,#0x2c              ;1379
0005ec  d10c              BNE      |L9.1544|
0005ee  2300              MOVS     r3,#0                 ;1381
                  |L9.1520|
0005f0  5c6c              LDRB     r4,[r5,r1]            ;1383
0005f2  eb020282          ADD      r2,r2,r2,LSL #2       ;1383
0005f6  1c49              ADDS     r1,r1,#1              ;1383
0005f8  1c5b              ADDS     r3,r3,#1              ;1383
0005fa  eb060242          ADD      r2,r6,r2,LSL #1       ;1383
0005fe  b2db              UXTB     r3,r3                 ;1381
000600  4422              ADD      r2,r2,r4              ;1383
000602  b289              UXTH     r1,r1                 ;1383
000604  2b03              CMP      r3,#3                 ;1381
000606  d3f3              BCC      |L9.1520|
                  |L9.1544|
000608  f8802084          STRB     r2,[r0,#0x84]         ;1386
00060c  5c6a              LDRB     r2,[r5,r1]            ;1389
00060e  1c49              ADDS     r1,r1,#1              ;1389
000610  2300              MOVS     r3,#0                 ;1387
000612  b289              UXTH     r1,r1                 ;1389
000614  2a2c              CMP      r2,#0x2c              ;1389
000616  d10c              BNE      |L9.1586|
000618  2200              MOVS     r2,#0                 ;1391
                  |L9.1562|
00061a  5c6c              LDRB     r4,[r5,r1]            ;1393
00061c  eb030383          ADD      r3,r3,r3,LSL #2       ;1393
000620  1c49              ADDS     r1,r1,#1              ;1393
000622  1c52              ADDS     r2,r2,#1              ;1393
000624  eb060343          ADD      r3,r6,r3,LSL #1       ;1393
000628  b2d2              UXTB     r2,r2                 ;1391
00062a  4423              ADD      r3,r3,r4              ;1393
00062c  b289              UXTH     r1,r1                 ;1393
00062e  2a03              CMP      r2,#3                 ;1391
000630  d3f3              BCC      |L9.1562|
                  |L9.1586|
000632  4af8              LDR      r2,|L9.2580|
000634  7954              LDRB     r4,[r2,#5]            ;1396  ; MODE
000636  b904              CBNZ     r4,|L9.1594|
000638  6183              STR      r3,[r0,#0x18]         ;1398  ; Para
                  |L9.1594|
00063a  5c6c              LDRB     r4,[r5,r1]            ;1403
00063c  1c49              ADDS     r1,r1,#1              ;1403
00063e  2300              MOVS     r3,#0                 ;1400
000640  b289              UXTH     r1,r1                 ;1403
000642  2c2c              CMP      r4,#0x2c              ;1403
000644  d10c              BNE      |L9.1632|
000646  2400              MOVS     r4,#0                 ;1405
                  |L9.1608|
000648  5c6f              LDRB     r7,[r5,r1]            ;1407
00064a  eb030383          ADD      r3,r3,r3,LSL #2       ;1407
00064e  1c49              ADDS     r1,r1,#1              ;1407
000650  1c64              ADDS     r4,r4,#1              ;1407
000652  eb060343          ADD      r3,r6,r3,LSL #1       ;1407
000656  b2e4              UXTB     r4,r4                 ;1405
000658  443b              ADD      r3,r3,r7              ;1407
00065a  b289              UXTH     r1,r1                 ;1407
00065c  2c03              CMP      r4,#3                 ;1405
00065e  d3f3              BCC      |L9.1608|
                  |L9.1632|
000660  71d3              STRB     r3,[r2,#7]            ;1410
000662  5c6c              LDRB     r4,[r5,r1]            ;1413
000664  1c49              ADDS     r1,r1,#1              ;1413
000666  2300              MOVS     r3,#0                 ;1411
000668  b289              UXTH     r1,r1                 ;1413
00066a  2c2c              CMP      r4,#0x2c              ;1413
00066c  d10c              BNE      |L9.1672|
00066e  2400              MOVS     r4,#0                 ;1415
                  |L9.1648|
000670  5c6f              LDRB     r7,[r5,r1]            ;1417
000672  eb030383          ADD      r3,r3,r3,LSL #2       ;1417
000676  1c49              ADDS     r1,r1,#1              ;1417
000678  1c64              ADDS     r4,r4,#1              ;1417
00067a  eb060343          ADD      r3,r6,r3,LSL #1       ;1417
00067e  b2e4              UXTB     r4,r4                 ;1415
000680  443b              ADD      r3,r3,r7              ;1417
000682  b289              UXTH     r1,r1                 ;1417
000684  2c03              CMP      r4,#3                 ;1415
000686  d3f3              BCC      |L9.1648|
                  |L9.1672|
000688  f8803052          STRB     r3,[r0,#0x52]         ;1420
00068c  5c6f              LDRB     r7,[r5,r1]            ;1423
00068e  1c49              ADDS     r1,r1,#1              ;1423
000690  2300              MOVS     r3,#0                 ;1421
000692  b28c              UXTH     r4,r1                 ;1423
000694  2f2c              CMP      r7,#0x2c              ;1423
000696  d10c              BNE      |L9.1714|
000698  2100              MOVS     r1,#0                 ;1425
                  |L9.1690|
00069a  5d2f              LDRB     r7,[r5,r4]            ;1427
00069c  eb030383          ADD      r3,r3,r3,LSL #2       ;1427
0006a0  1c64              ADDS     r4,r4,#1              ;1427
0006a2  1c49              ADDS     r1,r1,#1              ;1427
0006a4  eb060343          ADD      r3,r6,r3,LSL #1       ;1427
0006a8  b2c9              UXTB     r1,r1                 ;1425
0006aa  443b              ADD      r3,r3,r7              ;1427
0006ac  b2a4              UXTH     r4,r4                 ;1427
0006ae  2906              CMP      r1,#6                 ;1425
0006b0  d3f3              BCC      |L9.1690|
                  |L9.1714|
0006b2  eb030183          ADD      r1,r3,r3,LSL #2       ;1430
0006b6  0049              LSLS     r1,r1,#1              ;1430
0006b8  6641              STR      r1,[r0,#0x64]         ;1430  ; Para
0006ba  7950              LDRB     r0,[r2,#5]            ;1433  ; MODE
                  |L9.1724|
0006bc  f7fffffe          BL       MODE_PARASET
0006c0  e36a              B        |L9.3480|
                  |L9.1730|
0006c2  5d29              LDRB     r1,[r5,r4]            ;1440
0006c4  293f              CMP      r1,#0x3f              ;1440
0006c6  d07d              BEQ      |L9.1988|
0006c8  2c0b              CMP      r4,#0xb               ;1449
0006ca  d10d              BNE      |L9.1768|
0006cc  2000              MOVS     r0,#0                 ;1451
0006ce  4607              MOV      r7,r0                 ;1451
                  |L9.1744|
0006d0  5d29              LDRB     r1,[r5,r4]            ;1453
0006d2  eb070287          ADD      r2,r7,r7,LSL #2       ;1453
0006d6  eb060242          ADD      r2,r6,r2,LSL #1       ;1453
0006da  1c64              ADDS     r4,r4,#1              ;1453
0006dc  1c40              ADDS     r0,r0,#1              ;1453
0006de  188f              ADDS     r7,r1,r2              ;1453
0006e0  b2c0              UXTB     r0,r0                 ;1451
0006e2  b2a4              UXTH     r4,r4                 ;1453
0006e4  2802              CMP      r0,#2                 ;1451
0006e6  d3f3              BCC      |L9.1744|
                  |L9.1768|
0006e8  f8df9328          LDR      r9,|L9.2580|
0006ec  f8897005          STRB     r7,[r9,#5]            ;1456
0006f0  f8990005          LDRB     r0,[r9,#5]            ;1459  ; MODE
0006f4  2700              MOVS     r7,#0                 ;1457
0006f6  f8df8320          LDR      r8,|L9.2584|
0006fa  f6432198          MOV      r1,#0x3a98            ;1482
0006fe  b1c0              CBZ      r0,|L9.1842|
000700  f8990005          LDRB     r0,[r9,#5]            ;1503  ; MODE
000704  464b              MOV      r3,r9                 ;1503
000706  2801              CMP      r0,#1                 ;1503
000708  d05d              BEQ      |L9.1990|
00070a  7958              LDRB     r0,[r3,#5]            ;1532  ; MODE
00070c  2802              CMP      r0,#2                 ;1532
00070e  d07d              BEQ      |L9.2060|
000710  f8990005          LDRB     r0,[r9,#5]            ;1568  ; MODE
000714  464a              MOV      r2,r9                 ;1568
000716  2803              CMP      r0,#3                 ;1568
000718  d079              BEQ      |L9.2062|
00071a  7950              LDRB     r0,[r2,#5]            ;1600  ; MODE
00071c  2804              CMP      r0,#4                 ;1600
00071e  d077              BEQ      |L9.2064|
000720  f8991005          LDRB     r1,[r9,#5]            ;1643  ; MODE
000724  4648              MOV      r0,r9                 ;1643
000726  2905              CMP      r1,#5                 ;1643
000728  d073              BEQ      |L9.2066|
00072a  7941              LDRB     r1,[r0,#5]            ;1674  ; MODE
00072c  2906              CMP      r1,#6                 ;1674
00072e  d071              BEQ      |L9.2068|
000730  e1e0              B        |L9.2804|
                  |L9.1842|
000732  5d2a              LDRB     r2,[r5,r4]            ;1461
000734  1c64              ADDS     r4,r4,#1              ;1461
000736  b2a0              UXTH     r0,r4                 ;1461
000738  2a2c              CMP      r2,#0x2c              ;1461
00073a  d106              BNE      |L9.1866|
00073c  2200              MOVS     r2,#0                 ;1463
                  |L9.1854|
00073e  1c40              ADDS     r0,r0,#1              ;1463
000740  1c52              ADDS     r2,r2,#1              ;1465
000742  b2d2              UXTB     r2,r2                 ;1463
000744  b280              UXTH     r0,r0                 ;1465
000746  2a06              CMP      r2,#6                 ;1463
000748  d3f9              BCC      |L9.1854|
                  |L9.1866|
00074a  5c2b              LDRB     r3,[r5,r0]            ;1471
00074c  1c40              ADDS     r0,r0,#1              ;1471
00074e  2200              MOVS     r2,#0                 ;1469
000750  b284              UXTH     r4,r0                 ;1471
000752  2b2c              CMP      r3,#0x2c              ;1471
000754  d10c              BNE      |L9.1904|
000756  2000              MOVS     r0,#0                 ;1473
                  |L9.1880|
000758  5d2b              LDRB     r3,[r5,r4]            ;1475
00075a  eb020282          ADD      r2,r2,r2,LSL #2       ;1475
00075e  1c64              ADDS     r4,r4,#1              ;1475
000760  1c40              ADDS     r0,r0,#1              ;1475
000762  eb060242          ADD      r2,r6,r2,LSL #1       ;1475
000766  b2c0              UXTB     r0,r0                 ;1473
000768  441a              ADD      r2,r2,r3              ;1475
00076a  b2a4              UXTH     r4,r4                 ;1475
00076c  2805              CMP      r0,#5                 ;1473
00076e  d3f3              BCC      |L9.1880|
                  |L9.1904|
000770  f8ca2014          STR      r2,[r10,#0x14]        ;1478  ; Para
000774  f8da0014          LDR      r0,[r10,#0x14]        ;1482  ; Para
000778  2700              MOVS     r7,#0                 ;1479
00077a  4288              CMP      r0,r1                 ;1482
00077c  d907              BLS      |L9.1934|
00077e  2001              MOVS     r0,#1                 ;1484
000780  f8c80020          STR      r0,[r8,#0x20]         ;1484  ; Run_Control
000784  02c1              LSLS     r1,r0,#11             ;1485
000786  48a5              LDR      r0,|L9.2588|
000788  f7fffffe          BL       GPIO_ResetBits
00078c  e007              B        |L9.1950|
                  |L9.1934|
00078e  2000              MOVS     r0,#0                 ;1487
000790  f8c80020          STR      r0,[r8,#0x20]         ;1487  ; Run_Control
000794  f44f6100          MOV      r1,#0x800             ;1488
000798  48a0              LDR      r0,|L9.2588|
00079a  f7fffffe          BL       GPIO_SetBits
                  |L9.1950|
00079e  5d28              LDRB     r0,[r5,r4]            ;1490
0007a0  1c64              ADDS     r4,r4,#1              ;1490
0007a2  b2a4              UXTH     r4,r4                 ;1490
0007a4  282c              CMP      r0,#0x2c              ;1490
0007a6  d10c              BNE      |L9.1986|
0007a8  2000              MOVS     r0,#0                 ;1492
                  |L9.1962|
0007aa  5d29              LDRB     r1,[r5,r4]            ;1494
0007ac  eb070287          ADD      r2,r7,r7,LSL #2       ;1494
0007b0  eb060242          ADD      r2,r6,r2,LSL #1       ;1494
0007b4  1c64              ADDS     r4,r4,#1              ;1494
0007b6  188f              ADDS     r7,r1,r2              ;1494
0007b8  1c40              ADDS     r0,r0,#1              ;1494
0007ba  b2a4              UXTH     r4,r4                 ;1494
0007bc  f01000ff          ANDS     r0,r0,#0xff           ;1492
0007c0  d0f3              BEQ      |L9.1962|
                  |L9.1986|
0007c2  e11a              B        |L9.2554|
                  |L9.1988|
0007c4  e21d              B        |L9.3074|
                  |L9.1990|
0007c6  5d29              LDRB     r1,[r5,r4]            ;1504
0007c8  1c64              ADDS     r4,r4,#1              ;1504
0007ca  b2a0              UXTH     r0,r4                 ;1504
0007cc  292c              CMP      r1,#0x2c              ;1504
0007ce  d10c              BNE      |L9.2026|
0007d0  2100              MOVS     r1,#0                 ;1506
                  |L9.2002|
0007d2  5c2a              LDRB     r2,[r5,r0]            ;1508
0007d4  eb070487          ADD      r4,r7,r7,LSL #2       ;1508
0007d8  eb060444          ADD      r4,r6,r4,LSL #1       ;1508
0007dc  1c40              ADDS     r0,r0,#1              ;1508
0007de  1c49              ADDS     r1,r1,#1              ;1508
0007e0  1917              ADDS     r7,r2,r4              ;1508
0007e2  b2c9              UXTB     r1,r1                 ;1506
0007e4  b280              UXTH     r0,r0                 ;1508
0007e6  2906              CMP      r1,#6                 ;1506
0007e8  d3f3              BCC      |L9.2002|
                  |L9.2026|
0007ea  4654              MOV      r4,r10                ;1511
0007ec  f8ca706c          STR      r7,[r10,#0x6c]        ;1511  ; Para
0007f0  5c29              LDRB     r1,[r5,r0]            ;1514
0007f2  1c40              ADDS     r0,r0,#1              ;1514
0007f4  2200              MOVS     r2,#0                 ;1512
0007f6  b280              UXTH     r0,r0                 ;1514
0007f8  292c              CMP      r1,#0x2c              ;1514
0007fa  d112              BNE      |L9.2082|
0007fc  2100              MOVS     r1,#0                 ;1516
                  |L9.2046|
0007fe  5c2f              LDRB     r7,[r5,r0]            ;1518
000800  eb020282          ADD      r2,r2,r2,LSL #2       ;1518
000804  eb060242          ADD      r2,r6,r2,LSL #1       ;1518
000808  443a              ADD      r2,r2,r7              ;1518
00080a  e004              B        |L9.2070|
                  |L9.2060|
00080c  e020              B        |L9.2128|
                  |L9.2062|
00080e  e06d              B        |L9.2284|
                  |L9.2064|
000810  e0ab              B        |L9.2410|
                  |L9.2066|
000812  e108              B        |L9.2598|
                  |L9.2068|
000814  e13a              B        |L9.2700|
                  |L9.2070|
000816  1c40              ADDS     r0,r0,#1              ;1518
000818  1c49              ADDS     r1,r1,#1              ;1518
00081a  b2c9              UXTB     r1,r1                 ;1516
00081c  b280              UXTH     r0,r0                 ;1518
00081e  2905              CMP      r1,#5                 ;1516
000820  d3ed              BCC      |L9.2046|
                  |L9.2082|
000822  f8a42070          STRH     r2,[r4,#0x70]         ;1521
000826  5c2a              LDRB     r2,[r5,r0]            ;1524
000828  1c40              ADDS     r0,r0,#1              ;1524
00082a  2100              MOVS     r1,#0                 ;1522
00082c  b284              UXTH     r4,r0                 ;1524
00082e  2a2c              CMP      r2,#0x2c              ;1524
000830  d10c              BNE      |L9.2124|
000832  2000              MOVS     r0,#0                 ;1526
                  |L9.2100|
000834  5d2a              LDRB     r2,[r5,r4]            ;1528
000836  1c64              ADDS     r4,r4,#1              ;1528
000838  eb010181          ADD      r1,r1,r1,LSL #2       ;1528
00083c  eb060141          ADD      r1,r6,r1,LSL #1       ;1528
000840  1c40              ADDS     r0,r0,#1              ;1528
000842  4411              ADD      r1,r1,r2              ;1528
000844  b2a4              UXTH     r4,r4                 ;1528
000846  f01000ff          ANDS     r0,r0,#0xff           ;1526
00084a  d0f3              BEQ      |L9.2100|
                  |L9.2124|
00084c  7199              STRB     r1,[r3,#6]            ;1531
00084e  e151              B        |L9.2804|
                  |L9.2128|
000850  2001              MOVS     r0,#1                 ;1533
000852  f8c80020          STR      r0,[r8,#0x20]         ;1533  ; Run_Control
000856  02c1              LSLS     r1,r0,#11             ;1534
000858  4870              LDR      r0,|L9.2588|
00085a  f7fffffe          BL       GPIO_ResetBits
00085e  5d29              LDRB     r1,[r5,r4]            ;1535
000860  1c64              ADDS     r4,r4,#1              ;1535
000862  b2a0              UXTH     r0,r4                 ;1535
000864  292c              CMP      r1,#0x2c              ;1535
000866  d10c              BNE      |L9.2178|
000868  2100              MOVS     r1,#0                 ;1537
                  |L9.2154|
00086a  5c2a              LDRB     r2,[r5,r0]            ;1539
00086c  eb070387          ADD      r3,r7,r7,LSL #2       ;1539
000870  eb060343          ADD      r3,r6,r3,LSL #1       ;1539
000874  1c40              ADDS     r0,r0,#1              ;1539
000876  1c49              ADDS     r1,r1,#1              ;1539
000878  18d7              ADDS     r7,r2,r3              ;1539
00087a  b2c9              UXTB     r1,r1                 ;1537
00087c  b280              UXTH     r0,r0                 ;1539
00087e  2906              CMP      r1,#6                 ;1537
000880  d3f3              BCC      |L9.2154|
                  |L9.2178|
000882  4653              MOV      r3,r10                ;1542
000884  f8ca7044          STR      r7,[r10,#0x44]        ;1542  ; Para
000888  5c2a              LDRB     r2,[r5,r0]            ;1545
00088a  1c40              ADDS     r0,r0,#1              ;1545
00088c  2100              MOVS     r1,#0                 ;1543
00088e  b280              UXTH     r0,r0                 ;1545
000890  2a2c              CMP      r2,#0x2c              ;1545
000892  d10c              BNE      |L9.2222|
000894  2200              MOVS     r2,#0                 ;1547
                  |L9.2198|
000896  5c2c              LDRB     r4,[r5,r0]            ;1549
000898  eb010181          ADD      r1,r1,r1,LSL #2       ;1549
00089c  1c40              ADDS     r0,r0,#1              ;1549
00089e  1c52              ADDS     r2,r2,#1              ;1549
0008a0  eb060141          ADD      r1,r6,r1,LSL #1       ;1549
0008a4  b2d2              UXTB     r2,r2                 ;1547
0008a6  4421              ADD      r1,r1,r4              ;1549
0008a8  b280              UXTH     r0,r0                 ;1549
0008aa  2a05              CMP      r2,#5                 ;1547
0008ac  d3f3              BCC      |L9.2198|
                  |L9.2222|
0008ae  f8a31048          STRH     r1,[r3,#0x48]         ;1552
0008b2  5c2a              LDRB     r2,[r5,r0]            ;1555
0008b4  1c40              ADDS     r0,r0,#1              ;1555
0008b6  2100              MOVS     r1,#0                 ;1553
0008b8  b284              UXTH     r4,r0                 ;1555
0008ba  2a2c              CMP      r2,#0x2c              ;1555
0008bc  d10c              BNE      |L9.2264|
0008be  2000              MOVS     r0,#0                 ;1557
                  |L9.2240|
0008c0  5d2a              LDRB     r2,[r5,r4]            ;1559
0008c2  1c64              ADDS     r4,r4,#1              ;1559
0008c4  eb010181          ADD      r1,r1,r1,LSL #2       ;1559
0008c8  eb060141          ADD      r1,r6,r1,LSL #1       ;1559
0008cc  1c40              ADDS     r0,r0,#1              ;1559
0008ce  4411              ADD      r1,r1,r2              ;1559
0008d0  b2a4              UXTH     r4,r4                 ;1559
0008d2  f01000ff          ANDS     r0,r0,#0xff           ;1557
0008d6  d0f3              BEQ      |L9.2240|
                  |L9.2264|
0008d8  f8891006          STRB     r1,[r9,#6]            ;1562
0008dc  f8990006          LDRB     r0,[r9,#6]            ;1564  ; mainswitch
0008e0  2801              CMP      r0,#1                 ;1564
0008e2  d102              BNE      |L9.2282|
0008e4  494e              LDR      r1,|L9.2592|
0008e6  2000              MOVS     r0,#0                 ;1566
0008e8  7008              STRB     r0,[r1,#0]            ;1566
                  |L9.2282|
0008ea  e103              B        |L9.2804|
                  |L9.2284|
0008ec  5d29              LDRB     r1,[r5,r4]            ;1569
0008ee  1c64              ADDS     r4,r4,#1              ;1569
0008f0  b2a0              UXTH     r0,r4                 ;1569
0008f2  292c              CMP      r1,#0x2c              ;1569
0008f4  d10c              BNE      |L9.2320|
0008f6  2100              MOVS     r1,#0                 ;1571
                  |L9.2296|
0008f8  5c2b              LDRB     r3,[r5,r0]            ;1573
0008fa  eb070487          ADD      r4,r7,r7,LSL #2       ;1573
0008fe  eb060444          ADD      r4,r6,r4,LSL #1       ;1573
000902  1c40              ADDS     r0,r0,#1              ;1573
000904  1c49              ADDS     r1,r1,#1              ;1573
000906  191f              ADDS     r7,r3,r4              ;1573
000908  b2c9              UXTB     r1,r1                 ;1571
00090a  b280              UXTH     r0,r0                 ;1573
00090c  2906              CMP      r1,#6                 ;1571
00090e  d3f3              BCC      |L9.2296|
                  |L9.2320|
000910  4654              MOV      r4,r10                ;1576
000912  f8ca706c          STR      r7,[r10,#0x6c]        ;1576  ; Para
000916  5c2b              LDRB     r3,[r5,r0]            ;1580
000918  1c40              ADDS     r0,r0,#1              ;1580
00091a  2100              MOVS     r1,#0                 ;1577
00091c  b280              UXTH     r0,r0                 ;1580
00091e  2b2c              CMP      r3,#0x2c              ;1580
000920  d10c              BNE      |L9.2364|
000922  2300              MOVS     r3,#0                 ;1582
                  |L9.2340|
000924  5c2f              LDRB     r7,[r5,r0]            ;1584
000926  eb010181          ADD      r1,r1,r1,LSL #2       ;1584
00092a  1c40              ADDS     r0,r0,#1              ;1584
00092c  1c5b              ADDS     r3,r3,#1              ;1584
00092e  eb060141          ADD      r1,r6,r1,LSL #1       ;1584
000932  b2db              UXTB     r3,r3                 ;1582
000934  4439              ADD      r1,r1,r7              ;1584
000936  b280              UXTH     r0,r0                 ;1584
000938  2b05              CMP      r3,#5                 ;1582
00093a  d3f3              BCC      |L9.2340|
                  |L9.2364|
00093c  f8a41070          STRH     r1,[r4,#0x70]         ;1587
000940  5c2b              LDRB     r3,[r5,r0]            ;1590
000942  1c40              ADDS     r0,r0,#1              ;1590
000944  2100              MOVS     r1,#0                 ;1588
000946  b284              UXTH     r4,r0                 ;1590
000948  2b2c              CMP      r3,#0x2c              ;1590
00094a  d10c              BNE      |L9.2406|
00094c  2000              MOVS     r0,#0                 ;1592
                  |L9.2382|
00094e  5d2b              LDRB     r3,[r5,r4]            ;1594
000950  1c64              ADDS     r4,r4,#1              ;1594
000952  eb010181          ADD      r1,r1,r1,LSL #2       ;1594
000956  eb060141          ADD      r1,r6,r1,LSL #1       ;1594
00095a  1c40              ADDS     r0,r0,#1              ;1594
00095c  4419              ADD      r1,r1,r3              ;1594
00095e  b2a4              UXTH     r4,r4                 ;1594
000960  f01000ff          ANDS     r0,r0,#0xff           ;1592
000964  d0f3              BEQ      |L9.2382|
                  |L9.2406|
000966  7191              STRB     r1,[r2,#6]            ;1597
000968  e0c4              B        |L9.2804|
                  |L9.2410|
00096a  5d2a              LDRB     r2,[r5,r4]            ;1601
00096c  1c64              ADDS     r4,r4,#1              ;1601
00096e  b2a0              UXTH     r0,r4                 ;1601
000970  2a2c              CMP      r2,#0x2c              ;1601
000972  d106              BNE      |L9.2434|
000974  2200              MOVS     r2,#0                 ;1603
                  |L9.2422|
000976  1c40              ADDS     r0,r0,#1              ;1603
000978  1c52              ADDS     r2,r2,#1              ;1605
00097a  b2d2              UXTB     r2,r2                 ;1603
00097c  b280              UXTH     r0,r0                 ;1605
00097e  2a06              CMP      r2,#6                 ;1603
000980  d3f9              BCC      |L9.2422|
                  |L9.2434|
000982  5c2b              LDRB     r3,[r5,r0]            ;1611
000984  1c40              ADDS     r0,r0,#1              ;1611
000986  2200              MOVS     r2,#0                 ;1609
000988  b284              UXTH     r4,r0                 ;1611
00098a  2b2c              CMP      r3,#0x2c              ;1611
00098c  d10c              BNE      |L9.2472|
00098e  2000              MOVS     r0,#0                 ;1613
                  |L9.2448|
000990  5d2b              LDRB     r3,[r5,r4]            ;1615
000992  eb020282          ADD      r2,r2,r2,LSL #2       ;1615
000996  1c64              ADDS     r4,r4,#1              ;1615
000998  1c40              ADDS     r0,r0,#1              ;1615
00099a  eb060242          ADD      r2,r6,r2,LSL #1       ;1615
00099e  b2c0              UXTB     r0,r0                 ;1613
0009a0  441a              ADD      r2,r2,r3              ;1615
0009a2  b2a4              UXTH     r4,r4                 ;1615
0009a4  2805              CMP      r0,#5                 ;1613
0009a6  d3f3              BCC      |L9.2448|
                  |L9.2472|
0009a8  f8ca2014          STR      r2,[r10,#0x14]        ;1618  ; Para
0009ac  f8da0014          LDR      r0,[r10,#0x14]        ;1622  ; Para
0009b0  2700              MOVS     r7,#0                 ;1619
0009b2  4288              CMP      r0,r1                 ;1622
0009b4  d907              BLS      |L9.2502|
0009b6  2001              MOVS     r0,#1                 ;1624
0009b8  f8c80020          STR      r0,[r8,#0x20]         ;1624  ; Run_Control
0009bc  02c1              LSLS     r1,r0,#11             ;1625
0009be  4817              LDR      r0,|L9.2588|
0009c0  f7fffffe          BL       GPIO_ResetBits
0009c4  e007              B        |L9.2518|
                  |L9.2502|
0009c6  2000              MOVS     r0,#0                 ;1627
0009c8  f8c80020          STR      r0,[r8,#0x20]         ;1627  ; Run_Control
0009cc  f44f6100          MOV      r1,#0x800             ;1628
0009d0  4812              LDR      r0,|L9.2588|
0009d2  f7fffffe          BL       GPIO_SetBits
                  |L9.2518|
0009d6  5d28              LDRB     r0,[r5,r4]            ;1630
0009d8  1c64              ADDS     r4,r4,#1              ;1630
0009da  b2a4              UXTH     r4,r4                 ;1630
0009dc  282c              CMP      r0,#0x2c              ;1630
0009de  d10c              BNE      |L9.2554|
0009e0  2000              MOVS     r0,#0                 ;1632
                  |L9.2530|
0009e2  5d29              LDRB     r1,[r5,r4]            ;1634
0009e4  eb070287          ADD      r2,r7,r7,LSL #2       ;1634
0009e8  eb060242          ADD      r2,r6,r2,LSL #1       ;1634
0009ec  1c64              ADDS     r4,r4,#1              ;1634
0009ee  188f              ADDS     r7,r1,r2              ;1634
0009f0  1c40              ADDS     r0,r0,#1              ;1634
0009f2  b2a4              UXTH     r4,r4                 ;1634
0009f4  f01000ff          ANDS     r0,r0,#0xff           ;1632
0009f8  d0f3              BEQ      |L9.2530|
                  |L9.2554|
0009fa  f8897006          STRB     r7,[r9,#6]            ;1637
0009fe  f8990006          LDRB     r0,[r9,#6]            ;1638  ; mainswitch
000a02  bbe8              CBNZ     r0,|L9.2688|
000a04  2001              MOVS     r0,#1                 ;1640
000a06  f8c80020          STR      r0,[r8,#0x20]         ;1640  ; Run_Control
000a0a  02c1              LSLS     r1,r0,#11             ;1641
000a0c  4803              LDR      r0,|L9.2588|
000a0e  f7fffffe          BL       GPIO_ResetBits
000a12  e06f              B        |L9.2804|
                  |L9.2580|
                          DCD      ||.data||
                  |L9.2584|
                          DCD      Run_Control
                  |L9.2588|
                          DCD      0x40020800
                  |L9.2592|
                          DCD      finishflag
                  |L9.2596|
000a24  e161              B        |L9.3306|
                  |L9.2598|
000a26  5d2a              LDRB     r2,[r5,r4]            ;1644
000a28  1c64              ADDS     r4,r4,#1              ;1644
000a2a  b2a1              UXTH     r1,r4                 ;1644
000a2c  2a2c              CMP      r2,#0x2c              ;1644
000a2e  d106              BNE      |L9.2622|
000a30  2200              MOVS     r2,#0                 ;1646
                  |L9.2610|
000a32  1c49              ADDS     r1,r1,#1              ;1646
000a34  1c52              ADDS     r2,r2,#1              ;1648
000a36  b2d2              UXTB     r2,r2                 ;1646
000a38  b289              UXTH     r1,r1                 ;1648
000a3a  2a06              CMP      r2,#6                 ;1646
000a3c  d3f9              BCC      |L9.2610|
                  |L9.2622|
000a3e  5c6a              LDRB     r2,[r5,r1]            ;1653
000a40  1c49              ADDS     r1,r1,#1              ;1653
000a42  b289              UXTH     r1,r1                 ;1653
000a44  2a2c              CMP      r2,#0x2c              ;1653
000a46  d106              BNE      |L9.2646|
000a48  2200              MOVS     r2,#0                 ;1655
                  |L9.2634|
000a4a  1c49              ADDS     r1,r1,#1              ;1655
000a4c  1c52              ADDS     r2,r2,#1              ;1657
000a4e  b2d2              UXTB     r2,r2                 ;1655
000a50  b289              UXTH     r1,r1                 ;1657
000a52  2a05              CMP      r2,#5                 ;1655
000a54  d3f9              BCC      |L9.2634|
                  |L9.2646|
000a56  5c6b              LDRB     r3,[r5,r1]            ;1662
000a58  1c49              ADDS     r1,r1,#1              ;1662
000a5a  2200              MOVS     r2,#0                 ;1660
000a5c  b28c              UXTH     r4,r1                 ;1662
000a5e  2b2c              CMP      r3,#0x2c              ;1662
000a60  d10c              BNE      |L9.2684|
000a62  2100              MOVS     r1,#0                 ;1664
                  |L9.2660|
000a64  5d2b              LDRB     r3,[r5,r4]            ;1666
000a66  1c64              ADDS     r4,r4,#1              ;1666
000a68  eb020282          ADD      r2,r2,r2,LSL #2       ;1666
000a6c  eb060242          ADD      r2,r6,r2,LSL #1       ;1666
000a70  1c49              ADDS     r1,r1,#1              ;1666
000a72  441a              ADD      r2,r2,r3              ;1666
000a74  b2a4              UXTH     r4,r4                 ;1666
000a76  f01101ff          ANDS     r1,r1,#0xff           ;1664
000a7a  d0f3              BEQ      |L9.2660|
                  |L9.2684|
000a7c  7182              STRB     r2,[r0,#6]            ;1669
000a7e  e000              B        |L9.2690|
                  |L9.2688|
000a80  e038              B        |L9.2804|
                  |L9.2690|
000a82  7981              LDRB     r1,[r0,#6]            ;1670  ; mainswitch
000a84  bbb1              CBNZ     r1,|L9.2804|
000a86  2100              MOVS     r1,#0                 ;1672
000a88  7181              STRB     r1,[r0,#6]            ;1672
000a8a  e033              B        |L9.2804|
                  |L9.2700|
000a8c  5d2a              LDRB     r2,[r5,r4]            ;1675
000a8e  1c64              ADDS     r4,r4,#1              ;1675
000a90  b2a1              UXTH     r1,r4                 ;1675
000a92  2a2c              CMP      r2,#0x2c              ;1675
000a94  d106              BNE      |L9.2724|
000a96  2200              MOVS     r2,#0                 ;1677
                  |L9.2712|
000a98  1c49              ADDS     r1,r1,#1              ;1677
000a9a  1c52              ADDS     r2,r2,#1              ;1679
000a9c  b2d2              UXTB     r2,r2                 ;1677
000a9e  b289              UXTH     r1,r1                 ;1679
000aa0  2a06              CMP      r2,#6                 ;1677
000aa2  d3f9              BCC      |L9.2712|
                  |L9.2724|
000aa4  5c6a              LDRB     r2,[r5,r1]            ;1684
000aa6  1c49              ADDS     r1,r1,#1              ;1684
000aa8  b289              UXTH     r1,r1                 ;1684
000aaa  2a2c              CMP      r2,#0x2c              ;1684
000aac  d10e              BNE      |L9.2764|
000aae  2200              MOVS     r2,#0                 ;1686
                  |L9.2736|
000ab0  1c49              ADDS     r1,r1,#1              ;1686
000ab2  b289              UXTH     r1,r1                 ;1688
000ab4  1c52              ADDS     r2,r2,#1              ;1688
000ab6  e006              B        |L9.2758|
                  |L9.2744|
000ab8  e152              B        |L9.3424|
                  |L9.2746|
000aba  e0f6              B        |L9.3242|
                  |L9.2748|
000abc  e0a8              B        |L9.3088|
                  |L9.2750|
000abe  e020              B        |L9.2818|
                  |L9.2752|
000ac0  e087              B        |L9.3026|
                  |L9.2754|
000ac2  e111              B        |L9.3304|
                  |L9.2756|
000ac4  e168              B        |L9.3480|
                  |L9.2758|
000ac6  b2d2              UXTB     r2,r2                 ;1686
000ac8  2a05              CMP      r2,#5                 ;1686
000aca  d3f1              BCC      |L9.2736|
                  |L9.2764|
000acc  5c6b              LDRB     r3,[r5,r1]            ;1693
000ace  1c49              ADDS     r1,r1,#1              ;1693
000ad0  2200              MOVS     r2,#0                 ;1691
000ad2  b28c              UXTH     r4,r1                 ;1693
000ad4  2b2c              CMP      r3,#0x2c              ;1693
000ad6  d10c              BNE      |L9.2802|
000ad8  2100              MOVS     r1,#0                 ;1695
                  |L9.2778|
000ada  5d2b              LDRB     r3,[r5,r4]            ;1697
000adc  1c64              ADDS     r4,r4,#1              ;1697
000ade  eb020282          ADD      r2,r2,r2,LSL #2       ;1697
000ae2  eb060242          ADD      r2,r6,r2,LSL #1       ;1697
000ae6  1c49              ADDS     r1,r1,#1              ;1697
000ae8  441a              ADD      r2,r2,r3              ;1697
000aea  b2a4              UXTH     r4,r4                 ;1697
000aec  f01101ff          ANDS     r1,r1,#0xff           ;1695
000af0  d0f3              BEQ      |L9.2778|
                  |L9.2802|
000af2  7182              STRB     r2,[r0,#6]            ;1700
                  |L9.2804|
000af4  f7fffffe          BL       Off_GPOI_ResetSet
000af8  f8990006          LDRB     r0,[r9,#6]            ;1706  ; mainswitch
000afc  f7fffffe          BL       LIST_ONOFF
000b00  e14a              B        |L9.3480|
                  |L9.2818|
000b02  5d28              LDRB     r0,[r5,r4]            ;1713
000b04  2309              MOVS     r3,#9                 ;1712
000b06  283f              CMP      r0,#0x3f              ;1713
000b08  d002              BEQ      |L9.2832|
000b0a  2201              MOVS     r2,#1                 ;1722
000b0c  2100              MOVS     r1,#0                 ;1723
000b0e  e022              B        |L9.2902|
                  |L9.2832|
000b10  eeb58ac0          VCMPE.F32 s16,#0.0              ;1715
000b14  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1715
000b18  db01              BLT      |L9.2846|
000b1a  202b              MOVS     r0,#0x2b              ;1715
000b1c  e000              B        |L9.2848|
                  |L9.2846|
000b1e  202d              MOVS     r0,#0x2d              ;1715
                  |L9.2848|
000b20  5528              STRB     r0,[r5,r4]            ;1715
000b22  1c64              ADDS     r4,r4,#1              ;1715
000b24  b2a4              UXTH     r4,r4                 ;1715
000b26  ee180a10          VMOV     r0,s16                ;1716
000b2a  f7fffffe          BL       __aeabi_f2d
000b2e  ec410b10          VMOV     d0,r0,r1              ;1716
000b32  1928              ADDS     r0,r5,r4              ;1716
000b34  ec532b10          VMOV     r2,r3,d0              ;1716
000b38  a19c              ADR      r1,|L9.3500|
000b3a  f7fffffe          BL       __2sprintf
000b3e  3409              ADDS     r4,r4,#9              ;1716
000b40  e0d2              B        |L9.3304|
                  |L9.2882|
000b42  b141              CBZ      r1,|L9.2902|
000b44  2905              CMP      r1,#5                 ;1725
000b46  d006              BEQ      |L9.2902|
000b48  1860              ADDS     r0,r4,r1              ;1727
000b4a  5c28              LDRB     r0,[r5,r0]            ;1727
000b4c  f7fffffe          BL       IsDigitChar
000b50  2801              CMP      r0,#1                 ;1727
000b52  d000              BEQ      |L9.2902|
000b54  2200              MOVS     r2,#0                 ;1733
                  |L9.2902|
000b56  1c49              ADDS     r1,r1,#1              ;1733
000b58  b2c9              UXTB     r1,r1                 ;1723
000b5a  4299              CMP      r1,r3                 ;1723
000b5c  d3f1              BCC      |L9.2882|
000b5e  2a00              CMP      r2,#0                 ;1736
                  |L9.2912|
000b60  f43faa65          BEQ      |L9.46|
000b64  18e0              ADDS     r0,r4,r3              ;1736
000b66  5c28              LDRB     r0,[r5,r0]            ;1736
000b68  280d              CMP      r0,#0xd               ;1736
                  |L9.2922|
000b6a  f47faa60          BNE      |L9.46|
000b6e  2200              MOVS     r2,#0                 ;1741
000b70  4610              MOV      r0,r2                 ;1742
000b72  e00d              B        |L9.2960|
                  |L9.2932|
000b74  b160              CBZ      r0,|L9.2960|
000b76  2801              CMP      r0,#1                 ;1748
000b78  d016              BEQ      |L9.2984|
000b7a  2805              CMP      r0,#5                 ;1753
000b7c  d005              BEQ      |L9.2954|
000b7e  5d29              LDRB     r1,[r5,r4]            ;1759
000b80  eb020282          ADD      r2,r2,r2,LSL #2       ;1759
000b84  eb060242          ADD      r2,r6,r2,LSL #1       ;1759
000b88  440a              ADD      r2,r2,r1              ;1759
                  |L9.2954|
000b8a  1c64              ADDS     r4,r4,#1              ;1759
000b8c  b2a4              UXTH     r4,r4                 ;1755
000b8e  e015              B        |L9.3004|
                  |L9.2960|
000b90  5d29              LDRB     r1,[r5,r4]            ;1746
000b92  3930              SUBS     r1,r1,#0x30           ;1746
000b94  eb010181          ADD      r1,r1,r1,LSL #2       ;1746
000b98  0049              LSLS     r1,r1,#1              ;1746
000b9a  ee001a10          VMOV     s0,r1                 ;1746
000b9e  1c64              ADDS     r4,r4,#1              ;1746
000ba0  b2a4              UXTH     r4,r4                 ;1746
000ba2  eeb80ac0          VCVT.F32.S32 s0,s0                 ;1746
000ba6  e009              B        |L9.3004|
                  |L9.2984|
000ba8  5d29              LDRB     r1,[r5,r4]            ;1750
000baa  1c64              ADDS     r4,r4,#1              ;1750
000bac  3930              SUBS     r1,r1,#0x30           ;1750
000bae  ee001a90          VMOV     s1,r1                 ;1750
000bb2  b2a4              UXTH     r4,r4                 ;1750
000bb4  eef80ae0          VCVT.F32.S32 s1,s1                 ;1750
000bb8  ee300a80          VADD.F32 s0,s1,s0              ;1750
                  |L9.3004|
000bbc  1c40              ADDS     r0,r0,#1              ;1750
000bbe  b2c0              UXTB     r0,r0                 ;1742
000bc0  4298              CMP      r0,r3                 ;1742
000bc2  d3d7              BCC      |L9.2932|
000bc4  eebc0ac0          VCVT.U32.F32 s0,s0                 ;1761
000bc8  ee100a10          VMOV     r0,s0                 ;1761
000bcc  b2c1              UXTB     r1,r0                 ;1761
000bce  2000              MOVS     r0,#0                 ;1761
000bd0  e0ba              B        |L9.3400|
                  |L9.3026|
000bd2  5d29              LDRB     r1,[r5,r4]            ;1767
000bd4  2201              MOVS     r2,#1                 ;1766
000bd6  293f              CMP      r1,#0x3f              ;1767
000bd8  d013              BEQ      |L9.3074|
000bda  2100              MOVS     r1,#0                 ;1777
000bdc  4608              MOV      r0,r1                 ;1777
                  |L9.3038|
000bde  5d2b              LDRB     r3,[r5,r4]            ;1779
000be0  eb000080          ADD      r0,r0,r0,LSL #2       ;1779
000be4  1c64              ADDS     r4,r4,#1              ;1779
000be6  1c49              ADDS     r1,r1,#1              ;1779
000be8  eb060040          ADD      r0,r6,r0,LSL #1       ;1779
000bec  b2c9              UXTB     r1,r1                 ;1777
000bee  4418              ADD      r0,r0,r3              ;1779
000bf0  b2a4              UXTH     r4,r4                 ;1779
000bf2  4291              CMP      r1,r2                 ;1777
000bf4  d3f3              BCC      |L9.3038|
000bf6  2801              CMP      r0,#1                 ;1781
000bf8  f63fab5d          BHI      |L9.694|
000bfc  496d              LDR      r1,|L9.3508|
000bfe  7008              STRB     r0,[r1,#0]            ;1788
000c00  e0ca              B        |L9.3480|
                  |L9.3074|
000c02  7802              LDRB     r2,[r0,#0]            ;1769  ; C_DISCHARGE
000c04  192b              ADDS     r3,r5,r4              ;1769
000c06  f2af7194          ADR      r1,|L9.1140|
000c0a  4618              MOV      r0,r3                 ;1769
000c0c  f7ffbb63          B        |L9.726|
                  |L9.3088|
000c10  5d28              LDRB     r0,[r5,r4]            ;1801
000c12  2309              MOVS     r3,#9                 ;1800
000c14  283f              CMP      r0,#0x3f              ;1801
000c16  d06c              BEQ      |L9.3314|
000c18  2201              MOVS     r2,#1                 ;1810
000c1a  2100              MOVS     r1,#0                 ;1811
000c1c  e009              B        |L9.3122|
                  |L9.3102|
000c1e  b141              CBZ      r1,|L9.3122|
000c20  2905              CMP      r1,#5                 ;1813
000c22  d006              BEQ      |L9.3122|
000c24  1860              ADDS     r0,r4,r1              ;1815
000c26  5c28              LDRB     r0,[r5,r0]            ;1815
000c28  f7fffffe          BL       IsDigitChar
000c2c  2801              CMP      r0,#1                 ;1815
000c2e  d000              BEQ      |L9.3122|
000c30  2200              MOVS     r2,#0                 ;1821
                  |L9.3122|
000c32  1c49              ADDS     r1,r1,#1              ;1821
000c34  b2c9              UXTB     r1,r1                 ;1811
000c36  4299              CMP      r1,r3                 ;1811
000c38  d3f1              BCC      |L9.3102|
000c3a  2a00              CMP      r2,#0                 ;1824
                  |L9.3132|
000c3c  d090              BEQ      |L9.2912|
000c3e  18e0              ADDS     r0,r4,r3              ;1824
000c40  5c28              LDRB     r0,[r5,r0]            ;1824
000c42  280d              CMP      r0,#0xd               ;1824
                  |L9.3140|
000c44  d191              BNE      |L9.2922|
000c46  2200              MOVS     r2,#0                 ;1829
000c48  4610              MOV      r0,r2                 ;1830
000c4a  e00d              B        |L9.3176|
                  |L9.3148|
000c4c  b160              CBZ      r0,|L9.3176|
000c4e  2801              CMP      r0,#1                 ;1836
000c50  d016              BEQ      |L9.3200|
000c52  2805              CMP      r0,#5                 ;1841
000c54  d005              BEQ      |L9.3170|
000c56  5d29              LDRB     r1,[r5,r4]            ;1847
000c58  eb020282          ADD      r2,r2,r2,LSL #2       ;1847
000c5c  eb060242          ADD      r2,r6,r2,LSL #1       ;1847
000c60  440a              ADD      r2,r2,r1              ;1847
                  |L9.3170|
000c62  1c64              ADDS     r4,r4,#1              ;1847
000c64  b2a4              UXTH     r4,r4                 ;1843
000c66  e015              B        |L9.3220|
                  |L9.3176|
000c68  5d29              LDRB     r1,[r5,r4]            ;1834
000c6a  3930              SUBS     r1,r1,#0x30           ;1834
000c6c  eb010181          ADD      r1,r1,r1,LSL #2       ;1834
000c70  0049              LSLS     r1,r1,#1              ;1834
000c72  ee001a10          VMOV     s0,r1                 ;1834
000c76  1c64              ADDS     r4,r4,#1              ;1834
000c78  b2a4              UXTH     r4,r4                 ;1834
000c7a  eeb80ac0          VCVT.F32.S32 s0,s0                 ;1834
000c7e  e009              B        |L9.3220|
                  |L9.3200|
000c80  5d29              LDRB     r1,[r5,r4]            ;1838
000c82  1c64              ADDS     r4,r4,#1              ;1838
000c84  3930              SUBS     r1,r1,#0x30           ;1838
000c86  ee001a90          VMOV     s1,r1                 ;1838
000c8a  b2a4              UXTH     r4,r4                 ;1838
000c8c  eef80ae0          VCVT.F32.S32 s1,s1                 ;1838
000c90  ee300a80          VADD.F32 s0,s1,s0              ;1838
                  |L9.3220|
000c94  1c40              ADDS     r0,r0,#1              ;1838
000c96  b2c0              UXTB     r0,r0                 ;1830
000c98  4298              CMP      r0,r3                 ;1830
000c9a  d3d7              BCC      |L9.3148|
000c9c  eebc0ac0          VCVT.U32.F32 s0,s0                 ;1864
000ca0  ee100a10          VMOV     r0,s0                 ;1864
000ca4  b2c1              UXTB     r1,r0                 ;1864
000ca6  2001              MOVS     r0,#1                 ;1864
000ca8  e04e              B        |L9.3400|
                  |L9.3242|
000caa  5d28              LDRB     r0,[r5,r4]            ;1871
000cac  2306              MOVS     r3,#6                 ;1870
000cae  283f              CMP      r0,#0x3f              ;1871
000cb0  d002              BEQ      |L9.3256|
000cb2  2201              MOVS     r2,#1                 ;1880
000cb4  2100              MOVS     r1,#0                 ;1881
000cb6  e027              B        |L9.3336|
                  |L9.3256|
000cb8  eeb58ac0          VCMPE.F32 s16,#0.0              ;1873
000cbc  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1873
000cc0  db01              BLT      |L9.3270|
000cc2  202b              MOVS     r0,#0x2b              ;1873
000cc4  e000              B        |L9.3272|
                  |L9.3270|
000cc6  202d              MOVS     r0,#0x2d              ;1873
                  |L9.3272|
000cc8  5528              STRB     r0,[r5,r4]            ;1873
000cca  1c64              ADDS     r4,r4,#1              ;1873
000ccc  b2a4              UXTH     r4,r4                 ;1873
000cce  ee180a10          VMOV     r0,s16                ;1874
000cd2  f7fffffe          BL       __aeabi_f2d
000cd6  ec410b10          VMOV     d0,r0,r1              ;1874
000cda  1928              ADDS     r0,r5,r4              ;1874
000cdc  ec532b10          VMOV     r2,r3,d0              ;1874
000ce0  a132              ADR      r1,|L9.3500|
000ce2  f7fffffe          BL       __2sprintf
000ce6  1da4              ADDS     r4,r4,#6              ;1874
                  |L9.3304|
000ce8  b2a0              UXTH     r0,r4                 ;1875
                  |L9.3306|
000cea  f8059000          STRB     r9,[r5,r0]            ;1876
000cee  1c40              ADDS     r0,r0,#1              ;1876
000cf0  b284              UXTH     r4,r0                 ;1876
                  |L9.3314|
000cf2  e055              B        |L9.3488|
                  |L9.3316|
000cf4  b141              CBZ      r1,|L9.3336|
000cf6  2904              CMP      r1,#4                 ;1883
000cf8  d006              BEQ      |L9.3336|
000cfa  1860              ADDS     r0,r4,r1              ;1885
000cfc  5c28              LDRB     r0,[r5,r0]            ;1885
000cfe  f7fffffe          BL       IsDigitChar
000d02  2801              CMP      r0,#1                 ;1885
000d04  d000              BEQ      |L9.3336|
000d06  2200              MOVS     r2,#0                 ;1891
                  |L9.3336|
000d08  1c49              ADDS     r1,r1,#1              ;1891
000d0a  b2c9              UXTB     r1,r1                 ;1881
000d0c  4299              CMP      r1,r3                 ;1881
000d0e  d3f1              BCC      |L9.3316|
000d10  2a00              CMP      r2,#0                 ;1894
000d12  d093              BEQ      |L9.3132|
000d14  18e0              ADDS     r0,r4,r3              ;1894
000d16  5c28              LDRB     r0,[r5,r0]            ;1894
000d18  280d              CMP      r0,#0xd               ;1894
000d1a  d193              BNE      |L9.3140|
000d1c  2200              MOVS     r2,#0                 ;1899
000d1e  4610              MOV      r0,r2                 ;1900
000d20  e015              B        |L9.3406|
                  |L9.3362|
000d22  b1a0              CBZ      r0,|L9.3406|
000d24  5d29              LDRB     r1,[r5,r4]            ;1913
000d26  eb020282          ADD      r2,r2,r2,LSL #2       ;1913
000d2a  eb060242          ADD      r2,r6,r2,LSL #1       ;1913
000d2e  1c64              ADDS     r4,r4,#1              ;1913
000d30  440a              ADD      r2,r2,r1              ;1913
000d32  b2a4              UXTH     r4,r4                 ;1913
                  |L9.3380|
000d34  1c40              ADDS     r0,r0,#1              ;1913
000d36  b2c0              UXTB     r0,r0                 ;1900
000d38  4298              CMP      r0,r3                 ;1900
000d3a  d3f2              BCC      |L9.3362|
000d3c  eebc0ac0          VCVT.U32.F32 s0,s0                 ;1915
000d40  ee100a10          VMOV     r0,s0                 ;1915
000d44  b2c1              UXTB     r1,r0                 ;1915
000d46  2002              MOVS     r0,#2                 ;1915
                  |L9.3400|
000d48  f7fffffe          BL       CalHandle
000d4c  e028              B        |L9.3488|
                  |L9.3406|
000d4e  5d29              LDRB     r1,[r5,r4]            ;1904
000d50  1c64              ADDS     r4,r4,#1              ;1904
000d52  3930              SUBS     r1,r1,#0x30           ;1904
000d54  ee001a10          VMOV     s0,r1                 ;1904
000d58  b2a4              UXTH     r4,r4                 ;1904
000d5a  eeb80ac0          VCVT.F32.S32 s0,s0                 ;1904
000d5e  e7e9              B        |L9.3380|
                  |L9.3424|
000d60  5d28              LDRB     r0,[r5,r4]            ;1921
000d62  283f              CMP      r0,#0x3f              ;1921
000d64  d01c              BEQ      |L9.3488|
000d66  2201              MOVS     r2,#1                 ;1930
000d68  2100              MOVS     r1,#0                 ;1931
000d6a  4608              MOV      r0,r1                 ;1931
                  |L9.3436|
000d6c  5d2b              LDRB     r3,[r5,r4]            ;1933
000d6e  eb000080          ADD      r0,r0,r0,LSL #2       ;1933
000d72  1c64              ADDS     r4,r4,#1              ;1933
000d74  1c49              ADDS     r1,r1,#1              ;1933
000d76  eb060040          ADD      r0,r6,r0,LSL #1       ;1933
000d7a  b2c9              UXTB     r1,r1                 ;1931
000d7c  4418              ADD      r0,r0,r3              ;1933
000d7e  b2a4              UXTH     r4,r4                 ;1933
000d80  4291              CMP      r1,r2                 ;1931
000d82  d3f3              BCC      |L9.3436|
000d84  2801              CMP      r0,#1                 ;1935
000d86  f63faa96          BHI      |L9.694|
000d8a  490b              LDR      r1,|L9.3512|
000d8c  7008              STRB     r0,[r1,#0]            ;1941
000d8e  490b              LDR      r1,|L9.3516|
000d90  2001              MOVS     r0,#1                 ;1942
000d92  7008              STRB     r0,[r1,#0]            ;1942
000d94  f7fffffe          BL       Write_Boot_Flag
                  |L9.3480|
000d98  f805b004          STRB     r11,[r5,r4]           ;1948
000d9c  1c64              ADDS     r4,r4,#1              ;1948
000d9e  b2a4              UXTH     r4,r4                 ;1948
                  |L9.3488|
000da0  1c64              ADDS     r4,r4,#1              ;1948
000da2  b033              ADD      sp,sp,#0xcc
000da4  b2a0              UXTH     r0,r4                 ;2071
000da6  e8bd8ff0          POP      {r4-r11,pc}
;;;2073   
                          ENDP

000daa  0000              DCW      0x0000
                  |L9.3500|
000dac  2530332e          DCB      "%03.3f",0
000db0  336600  
000db3  00                DCB      0
                  |L9.3508|
                          DCD      overflag
                  |L9.3512|
                          DCD      jumpflag
                  |L9.3516|
                          DCD      bootflag

                          AREA ||i.SetErr_ACK||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  SetErr_ACK PROC
;;;971    
;;;972    u16 SetErr_ACK(char *buf, u8 addr ,u8 ucErr)
000000  b5f8              PUSH     {r3-r7,lr}
;;;973    {
000002  4604              MOV      r4,r0
;;;974    		u16 i=0;
;;;975    		u8 len = 0;
;;;976    		char stradd[3] = {0};
000004  2000              MOVS     r0,#0
;;;977    		int addlen=0;
;;;978    		memset(buf,0,sizeof(buf));
000006  9000              STR      r0,[sp,#0]
000008  6020              STR      r0,[r4,#0]
00000a  4616              MOV      r6,r2                 ;973
;;;979        	buf[i++] = ChrStartS;
00000c  203e              MOVS     r0,#0x3e
00000e  7020              STRB     r0,[r4,#0]
;;;980    		sprintf(stradd,"%d",addr);
000010  460a              MOV      r2,r1
000012  a11a              ADR      r1,|L10.124|
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       __2sprintf
;;;981    		addlen=strlen(stradd);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       strlen
000020  4605              MOV      r5,r0
;;;982    		strncat(&buf[i],stradd,addlen);
000022  1c60              ADDS     r0,r4,#1
000024  462a              MOV      r2,r5
000026  4669              MOV      r1,sp
000028  f7fffffe          BL       strncat
00002c  1c6d              ADDS     r5,r5,#1
;;;983    		i+=addlen;
00002e  b2a8              UXTH     r0,r5
;;;984    		buf[i++] = '/';
000030  212f              MOVS     r1,#0x2f
000032  5421              STRB     r1,[r4,r0]
000034  1c40              ADDS     r0,r0,#1
000036  b285              UXTH     r5,r0
;;;985    		switch(ucErr)
000038  2e01              CMP      r6,#1
00003a  d008              BEQ      |L10.78|
00003c  2e02              CMP      r6,#2
00003e  d001              BEQ      |L10.68|
000040  2e03              CMP      r6,#3
000042  d015              BEQ      |L10.112|
                  |L10.68|
;;;986            {
;;;987              case 1:         //
;;;988              	   len = 9;
;;;989              	   memmove(&buf[i],"PARA ERR!",len);   
;;;990              	   break;
;;;991    	      case 2:         //
;;;992              	   len = 8;
;;;993              	   memmove(&buf[i],"CMD ERR!",len);   
;;;994              	   break;
;;;995    	      case 3:         //
;;;996              	   len = 8;
;;;997              	   memmove(&buf[i],"REM ERR!",len);   
;;;998              	   break;
;;;999    		  default:    
;;;1000                  len = 8;
000044  2608              MOVS     r6,#8
;;;1001             	   memmove(&buf[i],"CMD ERR!",len);   
000046  1960              ADDS     r0,r4,r5
000048  4632              MOV      r2,r6
00004a  a10d              ADR      r1,|L10.128|
;;;1002                  break;
00004c  e003              B        |L10.86|
                  |L10.78|
00004e  2609              MOVS     r6,#9                 ;988
000050  1960              ADDS     r0,r4,r5              ;989
000052  4632              MOV      r2,r6                 ;989
000054  a10d              ADR      r1,|L10.140|
                  |L10.86|
000056  f7fffffe          BL       __aeabi_memmove
;;;1003   	    }
;;;1004   	    i+=len;
00005a  19a8              ADDS     r0,r5,r6
00005c  b280              UXTH     r0,r0
;;;1005   		buf[i++] = ChrEndR;
00005e  210d              MOVS     r1,#0xd
000060  5421              STRB     r1,[r4,r0]
000062  1c40              ADDS     r0,r0,#1
000064  b280              UXTH     r0,r0
;;;1006   		buf[i++] = ChrEndS;
000066  210a              MOVS     r1,#0xa
000068  5421              STRB     r1,[r4,r0]
00006a  1c40              ADDS     r0,r0,#1
00006c  b280              UXTH     r0,r0
;;;1007   		return i;
;;;1008   }
00006e  bdf8              POP      {r3-r7,pc}
                  |L10.112|
000070  2608              MOVS     r6,#8                 ;996
000072  1960              ADDS     r0,r4,r5              ;997
000074  4632              MOV      r2,r6                 ;997
000076  a108              ADR      r1,|L10.152|
000078  e7ed              B        |L10.86|
;;;1009   
                          ENDP

00007a  0000              DCW      0x0000
                  |L10.124|
00007c  256400            DCB      "%d",0
00007f  00                DCB      0
                  |L10.128|
000080  434d4420          DCB      "CMD ERR!",0
000084  45525221
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L10.140|
00008c  50415241          DCB      "PARA ERR!",0
000090  20455252
000094  2100    
000096  00                DCB      0
000097  00                DCB      0
                  |L10.152|
000098  52454d20          DCB      "REM ERR!",0
00009c  45525221
0000a0  00      
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0

                          AREA ||i.SetListPC||, CODE, READONLY, ALIGN=2

                  SetListPC PROC
;;;162    
;;;163    void SetListPC(void)
000000  4804              LDR      r0,|L11.20|
;;;164    {
000002  b510              PUSH     {r4,lr}
;;;165    	SetPowerC(Para.CDC_Limit_C);
000004  f8b00070          LDRH     r0,[r0,#0x70]  ; Para
000008  f7fffffe          BL       SetPowerC
;;;166    	listsend = 3;
00000c  4902              LDR      r1,|L11.24|
00000e  2003              MOVS     r0,#3
000010  7248              STRB     r0,[r1,#9]
;;;167    }
000012  bd10              POP      {r4,pc}
;;;168    
                          ENDP

                  |L11.20|
                          DCD      Para
                  |L11.24|
                          DCD      ||.data||

                          AREA ||i.SetListPS||, CODE, READONLY, ALIGN=2

                  SetListPS PROC
;;;169    
;;;170    void SetListPS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;171    {
;;;172    	if(mainswitch == 1)
000002  4c0f              LDR      r4,|L12.64|
000004  79a0              LDRB     r0,[r4,#6]  ; mainswitch
;;;173    	{
;;;174    		GPIO_SetBits(GPIOE,GPIO_Pin_2);
000006  4d0f              LDR      r5,|L12.68|
000008  2801              CMP      r0,#1                 ;172
00000a  d109              BNE      |L12.32|
00000c  2104              MOVS     r1,#4
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       GPIO_SetBits
;;;175    		Delay_ms(POWER_SW_DELAY);
000014  200a              MOVS     r0,#0xa
000016  f7fffffe          BL       Delay_ms
;;;176    		PowerSwitch(mainswitch);
00001a  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00001c  f7fffffe          BL       PowerSwitch
                  |L12.32|
;;;177    	}
;;;178    	
;;;179    	if(mainswitch == 0)
000020  79a0              LDRB     r0,[r4,#6]  ; mainswitch
000022  b948              CBNZ     r0,|L12.56|
;;;180    	{
;;;181    		PowerSwitch(mainswitch);
000024  79a0              LDRB     r0,[r4,#6]  ; mainswitch
000026  f7fffffe          BL       PowerSwitch
;;;182    		Delay_ms(POWER_SW_DELAY);
00002a  200a              MOVS     r0,#0xa
00002c  f7fffffe          BL       Delay_ms
;;;183    		GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
000030  2104              MOVS     r1,#4
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       GPIO_ResetBits
                  |L12.56|
;;;184    	}
;;;185    	
;;;186    	listsend = 0;
000038  2000              MOVS     r0,#0
00003a  7260              STRB     r0,[r4,#9]
;;;187    }
00003c  bd70              POP      {r4-r6,pc}
;;;188    
                          ENDP

00003e  0000              DCW      0x0000
                  |L12.64|
                          DCD      ||.data||
                  |L12.68|
                          DCD      0x40021000

                          AREA ||i.SetListPV||, CODE, READONLY, ALIGN=2

                  SetListPV PROC
;;;156    }
;;;157    void SetListPV(void)
000000  4804              LDR      r0,|L13.20|
;;;158    {
000002  b510              PUSH     {r4,lr}
;;;159    	SetPowerV(Para.CDC_OutPut_V);
000004  6ec0              LDR      r0,[r0,#0x6c]  ; Para
000006  f7fffffe          BL       SetPowerV
;;;160    	listsend = 2;
00000a  4903              LDR      r1,|L13.24|
00000c  2002              MOVS     r0,#2
00000e  7248              STRB     r0,[r1,#9]
;;;161    }
000010  bd10              POP      {r4,pc}
;;;162    
                          ENDP

000012  0000              DCW      0x0000
                  |L13.20|
                          DCD      Para
                  |L13.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerC||, CODE, READONLY, ALIGN=2

                  SetPowerC PROC
;;;115    
;;;116    void SetPowerC(vu16 powc)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;117    {
;;;118    	MasterSendbuf[0] = 0x01;
000002  4c12              LDR      r4,|L14.76|
000004  2001              MOVS     r0,#1
000006  7020              STRB     r0,[r4,#0]
;;;119    	MasterSendbuf[1] = 0x06;
000008  2006              MOVS     r0,#6
00000a  7060              STRB     r0,[r4,#1]
;;;120    	MasterSendbuf[2] = 0x00;
00000c  2000              MOVS     r0,#0
00000e  70a0              STRB     r0,[r4,#2]
;;;121    	MasterSendbuf[3] = 0x31;
000010  2031              MOVS     r0,#0x31
000012  70e0              STRB     r0,[r4,#3]
;;;122    	MasterSendbuf[4] = (u8)(powc/10>>8);
000014  f8bd1000          LDRH     r1,[sp,#0]
000018  200a              MOVS     r0,#0xa
00001a  fbb1f1f0          UDIV     r1,r1,r0
00001e  0a09              LSRS     r1,r1,#8
000020  7121              STRB     r1,[r4,#4]
;;;123    	MasterSendbuf[5] = (u8)(powc/10);
000022  f8bd1000          LDRH     r1,[sp,#0]
000026  fbb1f0f0          UDIV     r0,r1,r0
00002a  7160              STRB     r0,[r4,#5]
;;;124    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
00002c  2106              MOVS     r1,#6
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       Hardware_CRC
000034  71a0              STRB     r0,[r4,#6]
;;;125    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000036  2106              MOVS     r1,#6
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       Hardware_CRC
00003e  0a00              LSRS     r0,r0,#8
000040  71e0              STRB     r0,[r4,#7]
;;;126    	USART3WriteDMA(8);
000042  e8bd4038          POP      {r3-r5,lr}
000046  2008              MOVS     r0,#8
000048  f7ffbffe          B.W      USART3WriteDMA
;;;127    }
;;;128    
                          ENDP

                  |L14.76|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.SetPowerModeC||, CODE, READONLY, ALIGN=2

                  SetPowerModeC PROC
;;;134    
;;;135    void SetPowerModeC(void)
000000  4804              LDR      r0,|L15.20|
;;;136    {
000002  b510              PUSH     {r4,lr}
;;;137    	SetPowerC(Para.POWER_Limit_C);
000004  f8b00058          LDRH     r0,[r0,#0x58]  ; Para
000008  f7fffffe          BL       SetPowerC
;;;138    	sendwait = 3;
00000c  4902              LDR      r1,|L15.24|
00000e  2003              MOVS     r0,#3
000010  7208              STRB     r0,[r1,#8]
;;;139    }
000012  bd10              POP      {r4,pc}
;;;140    
                          ENDP

                  |L15.20|
                          DCD      Para
                  |L15.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerModeS||, CODE, READONLY, ALIGN=2

                  SetPowerModeS PROC
;;;140    
;;;141    void SetPowerModeS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;142    {
;;;143    	if(mainswitch == 1)
000002  4c10              LDR      r4,|L16.68|
000004  79a0              LDRB     r0,[r4,#6]  ; mainswitch
;;;144    	{
;;;145    		GPIO_SetBits(GPIOE,GPIO_Pin_2);
000006  4d10              LDR      r5,|L16.72|
000008  2801              CMP      r0,#1                 ;143
00000a  d002              BEQ      |L16.18|
;;;146    		Delay_ms(POWER_SW_DELAY);
;;;147    		PowerSwitch(mainswitch);
;;;148    	}else if(mainswitch == 0)
00000c  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00000e  b158              CBZ      r0,|L16.40|
000010  e014              B        |L16.60|
                  |L16.18|
000012  2104              MOVS     r1,#4                 ;145
000014  4628              MOV      r0,r5                 ;145
000016  f7fffffe          BL       GPIO_SetBits
00001a  200a              MOVS     r0,#0xa               ;146
00001c  f7fffffe          BL       Delay_ms
000020  79a0              LDRB     r0,[r4,#6]            ;147  ; mainswitch
000022  f7fffffe          BL       PowerSwitch
000026  e009              B        |L16.60|
                  |L16.40|
;;;149    	{
;;;150    		PowerSwitch(mainswitch);
000028  79a0              LDRB     r0,[r4,#6]  ; mainswitch
00002a  f7fffffe          BL       PowerSwitch
;;;151    		Delay_ms(POWER_SW_DELAY);
00002e  200a              MOVS     r0,#0xa
000030  f7fffffe          BL       Delay_ms
;;;152    		GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
000034  2104              MOVS     r1,#4
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       GPIO_ResetBits
                  |L16.60|
;;;153    	}
;;;154    	
;;;155    	sendwait = 0;
00003c  2000              MOVS     r0,#0
00003e  7220              STRB     r0,[r4,#8]
;;;156    }
000040  bd70              POP      {r4-r6,pc}
;;;157    void SetListPV(void)
                          ENDP

000042  0000              DCW      0x0000
                  |L16.68|
                          DCD      ||.data||
                  |L16.72|
                          DCD      0x40021000

                          AREA ||i.SetPowerModeV||, CODE, READONLY, ALIGN=2

                  SetPowerModeV PROC
;;;128    
;;;129    void SetPowerModeV(void)
000000  4804              LDR      r0,|L17.20|
;;;130    {
000002  b510              PUSH     {r4,lr}
;;;131    	SetPowerV(Para.POWER_OutPut_V);
000004  6d40              LDR      r0,[r0,#0x54]  ; Para
000006  f7fffffe          BL       SetPowerV
;;;132    	sendwait = 2;
00000a  4903              LDR      r1,|L17.24|
00000c  2002              MOVS     r0,#2
00000e  7208              STRB     r0,[r1,#8]
;;;133    }
000010  bd10              POP      {r4,pc}
;;;134    
                          ENDP

000012  0000              DCW      0x0000
                  |L17.20|
                          DCD      Para
                  |L17.24|
                          DCD      ||.data||

                          AREA ||i.SetPowerV||, CODE, READONLY, ALIGN=2

                  SetPowerV PROC
;;;102    }
;;;103    void SetPowerV(vu32 powv)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;104    {
;;;105    	MasterSendbuf[0] = 0x01;
000002  4c11              LDR      r4,|L18.72|
000004  2001              MOVS     r0,#1
000006  7020              STRB     r0,[r4,#0]
;;;106    	MasterSendbuf[1] = 0x06;
000008  2006              MOVS     r0,#6
00000a  7060              STRB     r0,[r4,#1]
;;;107    	MasterSendbuf[2] = 0x00;
00000c  2000              MOVS     r0,#0
00000e  70a0              STRB     r0,[r4,#2]
;;;108    	MasterSendbuf[3] = 0x30;
000010  2030              MOVS     r0,#0x30
000012  70e0              STRB     r0,[r4,#3]
;;;109    	MasterSendbuf[4] = (u8)(powv/10>>8);
000014  9900              LDR      r1,[sp,#0]
000016  200a              MOVS     r0,#0xa
000018  fbb1f1f0          UDIV     r1,r1,r0
00001c  0a09              LSRS     r1,r1,#8
00001e  7121              STRB     r1,[r4,#4]
;;;110    	MasterSendbuf[5] = (u8)(powv/10);
000020  9900              LDR      r1,[sp,#0]
000022  fbb1f0f0          UDIV     r0,r1,r0
000026  7160              STRB     r0,[r4,#5]
;;;111    	MasterSendbuf[6] = (u8)(Hardware_CRC(MasterSendbuf,6));
000028  2106              MOVS     r1,#6
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       Hardware_CRC
000030  71a0              STRB     r0,[r4,#6]
;;;112    	MasterSendbuf[7] = (u8)(Hardware_CRC(MasterSendbuf,6)>>8);	
000032  2106              MOVS     r1,#6
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       Hardware_CRC
00003a  0a00              LSRS     r0,r0,#8
00003c  71e0              STRB     r0,[r4,#7]
;;;113    	USART3WriteDMA(8);
00003e  e8bd4038          POP      {r3-r5,lr}
000042  2008              MOVS     r0,#8
000044  f7ffbffe          B.W      USART3WriteDMA
;;;114    }
;;;115    
                          ENDP

                  |L18.72|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.UART1_Send||, CODE, READONLY, ALIGN=2

                  UART1_Send PROC
;;;2465   
;;;2466   void UART1_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2467   {
;;;2468   	static vu8 UART_Buffer_Send_pointer=0;
;;;2469   		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L19.72|
000004  78e0              LDRB     r0,[r4,#3]  ; UART_Buffer_Send_pointer
000006  7921              LDRB     r1,[r4,#4]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L19.56|
;;;2470            {
;;;2471   				 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L19.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L19.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L19.54|
;;;2472   				 {
;;;2473   					USART_SendData(USART1,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  78e1              LDRB     r1,[r4,#3]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  4d0d              LDR      r5,|L19.84|
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       USART_SendData
                  |L19.36|
;;;2474   					while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);//等待发送完成
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L19.36|
;;;2475   					UART_Buffer_Send_pointer++;
000030  78e0              LDRB     r0,[r4,#3]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  70e0              STRB     r0,[r4,#3]
                  |L19.54|
;;;2476   				 }
;;;2477            }
;;;2478   		else 
;;;2479   		{
;;;2480   			UART_Buffer_Send_pointer=0;
;;;2481   			UART_SEND_flag=0;//发送完成一帧数据
;;;2482   		}
;;;2483   }
000036  bd70              POP      {r4-r6,pc}
                  |L19.56|
000038  2000              MOVS     r0,#0                 ;2480
00003a  70e0              STRB     r0,[r4,#3]            ;2480
00003c  4806              LDR      r0,|L19.88|
00003e  6801              LDR      r1,[r0,#0]            ;2481  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;2481
000044  6001              STR      r1,[r0,#0]            ;2481  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;2484   
                          ENDP

                  |L19.72|
                          DCD      ||.data||
                  |L19.76|
                          DCD      ||area_number.31||
                  |L19.80|
                          DCD      ADDR
                  |L19.84|
                          DCD      0x40011000
                  |L19.88|
                          DCD      flagA

                          AREA ||i.UART2_Send||, CODE, READONLY, ALIGN=2

                  UART2_Send PROC
;;;2446   }
;;;2447   void UART2_Send(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2448   {
;;;2449   	static vu8 UART_Buffer_Send_pointer=0;
;;;2450   		if (UART_Buffer_Send_pointer < Transmit_BUFFERsize)
000002  4c11              LDR      r4,|L20.72|
000004  78a0              LDRB     r0,[r4,#2]  ; UART_Buffer_Send_pointer
000006  7921              LDRB     r1,[r4,#4]  ; Transmit_BUFFERsize
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L20.56|
;;;2451            {
;;;2452   					 if(UART_Buffer_Send[0]==ADDR)
00000c  480f              LDR      r0,|L20.76|
00000e  7801              LDRB     r1,[r0,#0]  ; UART_Buffer_Send
000010  4a0f              LDR      r2,|L20.80|
000012  7812              LDRB     r2,[r2,#0]  ; ADDR
000014  4291              CMP      r1,r2
000016  d10e              BNE      |L20.54|
;;;2453   					 {
;;;2454   						USART_SendData(USART2,UART_Buffer_Send[UART_Buffer_Send_pointer]);
000018  78a1              LDRB     r1,[r4,#2]  ; UART_Buffer_Send_pointer
00001a  5c41              LDRB     r1,[r0,r1]
00001c  480d              LDR      r0,|L20.84|
00001e  f7fffffe          BL       USART_SendData
;;;2455   						while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);//等待发送完成
000022  4d0d              LDR      r5,|L20.88|
                  |L20.36|
000024  2180              MOVS     r1,#0x80
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L20.36|
;;;2456   						UART_Buffer_Send_pointer++;
000030  78a0              LDRB     r0,[r4,#2]  ; UART_Buffer_Send_pointer
000032  1c40              ADDS     r0,r0,#1
000034  70a0              STRB     r0,[r4,#2]
                  |L20.54|
;;;2457   					}
;;;2458            }
;;;2459   		else 
;;;2460   		{
;;;2461   			UART_Buffer_Send_pointer=0;
;;;2462   			UART_SEND_flag=0;//发送完成一帧数据
;;;2463   		}
;;;2464   }
000036  bd70              POP      {r4-r6,pc}
                  |L20.56|
000038  2000              MOVS     r0,#0                 ;2461
00003a  70a0              STRB     r0,[r4,#2]            ;2461
00003c  4807              LDR      r0,|L20.92|
00003e  6801              LDR      r1,[r0,#0]            ;2462  ; flagA
000040  f0210110          BIC      r1,r1,#0x10           ;2462
000044  6001              STR      r1,[r0,#0]            ;2462  ; flagA
000046  bd70              POP      {r4-r6,pc}
;;;2465   
                          ENDP

                  |L20.72|
                          DCD      ||.data||
                  |L20.76|
                          DCD      ||area_number.31||
                  |L20.80|
                          DCD      ADDR
                  |L20.84|
                          DCD      0x40004400
                  |L20.88|
                          DCD      0x40011000
                  |L20.92|
                          DCD      flagA

                          AREA ||i.USART2_Configuration||, CODE, READONLY, ALIGN=2

                  USART2_Configuration PROC
;;;2142   
;;;2143   void USART2_Configuration(void)//串口初始化函数
000000  b570              PUSH     {r4-r6,lr}
;;;2144   {  
;;;2145   	GPIO_InitTypeDef GPIO_InitStructure;
;;;2146   	USART_InitTypeDef USART_InitStructure;
;;;2147   	
;;;2148   	/* config USART1 clock */
;;;2149   	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
000002  2101              MOVS     r1,#1
000004  b088              SUB      sp,sp,#0x20           ;2144
000006  0448              LSLS     r0,r1,#17
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;2150   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);
00000c  4e2a              LDR      r6,|L21.184|
00000e  2207              MOVS     r2,#7
000010  2102              MOVS     r1,#2
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2151   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);
000018  2207              MOVS     r2,#7
00001a  2103              MOVS     r1,#3
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2152   	/* USART1 GPIO config */
;;;2153   	/* Configure USART1 Tx (PA.02) as alternate function push-pull */
;;;2154   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;2155   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000022  2502              MOVS     r5,#2
000024  2004              MOVS     r0,#4                 ;2154
000026  f88d5004          STRB     r5,[sp,#4]
;;;2156   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
00002c  9000              STR      r0,[sp,#0]            ;2155
00002e  f88d4006          STRB     r4,[sp,#6]
;;;2157   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f88d5005          STRB     r5,[sp,#5]
;;;2158   	GPIO_Init(GPIOA, &GPIO_InitStructure);    
000036  4669              MOV      r1,sp
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GPIO_Init
;;;2159   	/* Configure USART1 Rx (PA.03) as input floating */
;;;2160   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
00003e  2008              MOVS     r0,#8
;;;2161   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000040  9000              STR      r0,[sp,#0]
000042  f88d5004          STRB     r5,[sp,#4]
;;;2162   	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;2163   	
;;;2164   	/* USART1 mode config */
;;;2165   	USART_InitStructure.USART_BaudRate = 115200;
00004e  f44f30e1          MOV      r0,#0x1c200
;;;2166   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000052  9002              STR      r0,[sp,#8]
;;;2167   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2168   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000054  f8ad4010          STRH     r4,[sp,#0x10]
;;;2169   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2170   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
;;;2171   	USART_Init(USART2, &USART_InitStructure);
00005a  4d18              LDR      r5,|L21.188|
00005c  f8ad400c          STRH     r4,[sp,#0xc]          ;2166
000060  f8ad0012          STRH     r0,[sp,#0x12]         ;2170
000064  f8ad400e          STRH     r4,[sp,#0xe]          ;2167
000068  f8ad4014          STRH     r4,[sp,#0x14]         ;2169
00006c  a902              ADD      r1,sp,#8
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       USART_Init
;;;2172   	
;;;2173   	/******使能串口接收中断******************/
;;;2174   	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
000074  2201              MOVS     r2,#1
000076  f2405125          MOV      r1,#0x525
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_ITConfig
;;;2175   //	USART_ITConfig(USART2, USART_IT_ORE, ENABLE);	
;;;2176   	USART_Cmd(USART2, ENABLE);//使能串口1
000080  2101              MOVS     r1,#1
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USART_Cmd
;;;2177     USART_ClearFlag(USART2, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       USART_ClearFlag
000090  f44f60e0          MOV      r0,#0x700
000094  f7fffffe          BL       NVIC_PriorityGroupConfig
000098  2026              MOVS     r0,#0x26
00009a  f88d0018          STRB     r0,[sp,#0x18]
00009e  f88d4019          STRB     r4,[sp,#0x19]
0000a2  2001              MOVS     r0,#1
0000a4  f88d001a          STRB     r0,[sp,#0x1a]
0000a8  f88d001b          STRB     r0,[sp,#0x1b]
0000ac  a806              ADD      r0,sp,#0x18
0000ae  f7fffffe          BL       NVIC_Init
;;;2178     
;;;2179     USART2_NVIC_Config();//串口中断配置
;;;2180   }
0000b2  b008              ADD      sp,sp,#0x20
0000b4  bd70              POP      {r4-r6,pc}
;;;2181   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L21.184|
                          DCD      0x40020000
                  |L21.188|
                          DCD      0x40004400

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;2404   
;;;2405   void USART2_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2406   {
;;;2407   	u8 Res;
;;;2408    	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
000002  4c1c              LDR      r4,|L22.116|
000004  f2405525          MOV      r5,#0x525
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       USART_GetITStatus
000010  2800              CMP      r0,#0
000012  d013              BEQ      |L22.60|
;;;2409   	{
;;;2410   		USART_ClearITPendingBit(USART2,USART_IT_RXNE);
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       USART_ClearITPendingBit
;;;2411   		Res=USART_ReceiveData(USART2);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       USART_ReceiveData
;;;2412   
;;;2413   		if((USART_RX_STA&0x8000)==0)//接收未完成
000022  4915              LDR      r1,|L22.120|
000024  b2c2              UXTB     r2,r0                 ;2411
000026  89c8              LDRH     r0,[r1,#0xe]  ; USART_RX_STA
000028  0403              LSLS     r3,r0,#16
00002a  d407              BMI      |L22.60|
;;;2414   		{
;;;2415   		if(USART_RX_STA&0x4000)//接收到了0x0d
;;;2416   		{
;;;2417   			if(Res!=0x0a)
;;;2418   				USART_RX_STA=0;//接收错误,重新开始
;;;2419   			else 
;;;2420   			{
;;;2421   		//		SerialRemoteHandleL(USART_RX_STA,USART_RX_BUF);
;;;2422   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
00002c  4b13              LDR      r3,|L22.124|
00002e  0445              LSLS     r5,r0,#17             ;2415
000030  f04f0400          MOV      r4,#0                 ;2415
000034  d50b              BPL      |L22.78|
000036  2a0a              CMP      r2,#0xa               ;2417
000038  d001              BEQ      |L22.62|
                  |L22.58|
00003a  81cc              STRH     r4,[r1,#0xe]          ;2418
                  |L22.60|
;;;2423   				USART_RX_STA++;
;;;2424   				USART_RX_CNT = USART_RX_STA;
;;;2425   				USART_RX_STA|=0x8000;	//接收完成了 			  //接收到回车的后字节  置位状态寄存器 
;;;2426   			}
;;;2427   		}
;;;2428   		else //还没收到0X0D
;;;2429   		{	
;;;2430   			if(Res==0x0d)
;;;2431   			{
;;;2432   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
;;;2433   				USART_RX_STA++;	
;;;2434   				USART_RX_STA|=0x4000;					 //接收到回车的前一字节  置位状态寄存器
;;;2435   			}
;;;2436   			else
;;;2437   				{
;;;2438   				USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;			//将接收的数据 存入数组中
;;;2439   					USART_RX_STA++;									//长度+1 为下一次做准备
;;;2440   				if(USART_RX_STA>(USART_REC_LEN-1))
;;;2441   					USART_RX_STA=0;//接收数据错误,重新开始接收	  
;;;2442   				}		 
;;;2443   			}
;;;2444   		} 
;;;2445   	}
;;;2446   }
00003c  bd70              POP      {r4-r6,pc}
                  |L22.62|
00003e  f3c0040d          UBFX     r4,r0,#0,#14          ;2422
000042  1c40              ADDS     r0,r0,#1              ;2422
000044  551a              STRB     r2,[r3,r4]            ;2422
000046  8208              STRH     r0,[r1,#0x10]         ;2424
000048  f4404000          ORR      r0,r0,#0x8000         ;2425
00004c  e010              B        |L22.112|
                  |L22.78|
00004e  2a0d              CMP      r2,#0xd               ;2430
000050  d008              BEQ      |L22.100|
000052  f3c0050d          UBFX     r5,r0,#0,#14          ;2438
000056  1c40              ADDS     r0,r0,#1              ;2438
000058  b280              UXTH     r0,r0                 ;2439
00005a  555a              STRB     r2,[r3,r5]            ;2438
00005c  81c8              STRH     r0,[r1,#0xe]          ;2439
00005e  28c7              CMP      r0,#0xc7              ;2440
000060  d8eb              BHI      |L22.58|
000062  bd70              POP      {r4-r6,pc}
                  |L22.100|
000064  f3c0040d          UBFX     r4,r0,#0,#14          ;2432
000068  1c40              ADDS     r0,r0,#1              ;2432
00006a  551a              STRB     r2,[r3,r4]            ;2432
00006c  f4404080          ORR      r0,r0,#0x4000         ;2434
                  |L22.112|
000070  81c8              STRH     r0,[r1,#0xe]          ;2425
000072  bd70              POP      {r4-r6,pc}
;;;2447   void UART2_Send(void)
                          ENDP

                  |L22.116|
                          DCD      0x40004400
                  |L22.120|
                          DCD      ||.data||
                  |L22.124|
                          DCD      ||area_number.31||+0x14

                          AREA ||i.USART3HANDLE||, CODE, READONLY, ALIGN=2

                  USART3HANDLE PROC
;;;214    
;;;215    void USART3HANDLE(void)
000000  b538              PUSH     {r3-r5,lr}
;;;216    {
;;;217    	vu16 crcres;
;;;218    
;;;219    	if(MasterRecbuf[0] == 0x01)
000002  4d28              LDR      r5,|L23.164|
;;;220    	{
;;;221    		if(MasterRecbuf[1] == 0x03)
;;;222    		{
;;;223    			crcres = (MasterRecbuf[8] << 8) + MasterRecbuf[7];
;;;224    			if(crcres == Hardware_CRC(MasterRecbuf,7))
;;;225    			{
;;;226    				 
;;;227    				Para.CPOW_Voltage = (MasterRecbuf[3] << 8) + MasterRecbuf[4];
;;;228    				Para.CCurrent = (MasterRecbuf[5] << 8) + MasterRecbuf[6];
;;;229    				memset(MasterRecbuf,0,sizeof(MasterRecbuf));
;;;230    			}
;;;231    				if(sendwait == 3)
000004  4c28              LDR      r4,|L23.168|
000006  7828              LDRB     r0,[r5,#0]            ;219  ; MasterRecbuf
000008  2801              CMP      r0,#1                 ;219
00000a  d148              BNE      |L23.158|
00000c  7868              LDRB     r0,[r5,#1]            ;221  ; MasterRecbuf
00000e  2803              CMP      r0,#3                 ;221
000010  d002              BEQ      |L23.24|
;;;232    				{
;;;233    					SetPowerModeS();
;;;234    				}
;;;235    				if(sendwait == 2)
;;;236    				{
;;;237    					SetPowerModeC();
;;;238    				}
;;;239    				if(sendwait == 1)
;;;240    				{
;;;241    					SetPowerModeV();
;;;242    				}
;;;243    				if(listsend == 3)
;;;244    				{
;;;245    					SetListPS();
;;;246    				}
;;;247    				if(listsend == 2)
;;;248    				{
;;;249    					SetListPC();
;;;250    				}
;;;251    				if(listsend == 1)
;;;252    				{
;;;253    					SetListPV();
;;;254    				}
;;;255    		}else if(MasterRecbuf[1] == 0x06){
000012  2806              CMP      r0,#6
000014  d03c              BEQ      |L23.144|
000016  e042              B        |L23.158|
                  |L23.24|
000018  79e8              LDRB     r0,[r5,#7]            ;223  ; MasterRecbuf
00001a  7a29              LDRB     r1,[r5,#8]            ;223  ; MasterRecbuf
00001c  eb002001          ADD      r0,r0,r1,LSL #8       ;223
000020  f8ad0000          STRH     r0,[sp,#0]            ;223
000024  2107              MOVS     r1,#7                 ;224
000026  481f              LDR      r0,|L23.164|
000028  f7fffffe          BL       Hardware_CRC
00002c  f8bd1000          LDRH     r1,[sp,#0]            ;224
000030  4288              CMP      r0,r1                 ;224
000032  d10e              BNE      |L23.82|
000034  7928              LDRB     r0,[r5,#4]            ;227  ; MasterRecbuf
000036  78e9              LDRB     r1,[r5,#3]            ;227  ; MasterRecbuf
000038  eb002101          ADD      r1,r0,r1,LSL #8       ;227
00003c  481b              LDR      r0,|L23.172|
00003e  6281              STR      r1,[r0,#0x28]         ;227  ; Para
000040  79a9              LDRB     r1,[r5,#6]            ;228  ; MasterRecbuf
000042  796a              LDRB     r2,[r5,#5]            ;228  ; MasterRecbuf
000044  eb012102          ADD      r1,r1,r2,LSL #8       ;228
000048  6301              STR      r1,[r0,#0x30]         ;228  ; Para
00004a  2180              MOVS     r1,#0x80              ;229
00004c  4815              LDR      r0,|L23.164|
00004e  f7fffffe          BL       __aeabi_memclr
                  |L23.82|
000052  7a20              LDRB     r0,[r4,#8]            ;231  ; sendwait
000054  2803              CMP      r0,#3                 ;231
000056  d101              BNE      |L23.92|
000058  f7fffffe          BL       SetPowerModeS
                  |L23.92|
00005c  7a20              LDRB     r0,[r4,#8]            ;235  ; sendwait
00005e  2802              CMP      r0,#2                 ;235
000060  d101              BNE      |L23.102|
000062  f7fffffe          BL       SetPowerModeC
                  |L23.102|
000066  7a20              LDRB     r0,[r4,#8]            ;239  ; sendwait
000068  2801              CMP      r0,#1                 ;239
00006a  d101              BNE      |L23.112|
00006c  f7fffffe          BL       SetPowerModeV
                  |L23.112|
000070  7a60              LDRB     r0,[r4,#9]            ;243  ; listsend
000072  2803              CMP      r0,#3                 ;243
000074  d101              BNE      |L23.122|
000076  f7fffffe          BL       SetListPS
                  |L23.122|
00007a  7a60              LDRB     r0,[r4,#9]            ;247  ; listsend
00007c  2802              CMP      r0,#2                 ;247
00007e  d101              BNE      |L23.132|
000080  f7fffffe          BL       SetListPC
                  |L23.132|
000084  7a60              LDRB     r0,[r4,#9]            ;251  ; listsend
000086  2801              CMP      r0,#1                 ;251
000088  d109              BNE      |L23.158|
00008a  f7fffffe          BL       SetListPV
00008e  e006              B        |L23.158|
                  |L23.144|
;;;256    			memset(MasterRecbuf,0,sizeof(MasterRecbuf));
000090  2180              MOVS     r1,#0x80
000092  4804              LDR      r0,|L23.164|
000094  f7fffffe          BL       __aeabi_memclr
;;;257    			watchtest ++;
000098  6d60              LDR      r0,[r4,#0x54]  ; watchtest
00009a  1c40              ADDS     r0,r0,#1
00009c  6560              STR      r0,[r4,#0x54]  ; watchtest
                  |L23.158|
;;;258    		}
;;;259    	}	
;;;260    
;;;261    	
;;;262    	USART3_Recive_flg = 0;
00009e  2000              MOVS     r0,#0
0000a0  7060              STRB     r0,[r4,#1]
;;;263    }
0000a2  bd38              POP      {r3-r5,pc}
;;;264    
                          ENDP

                  |L23.164|
                          DCD      ||area_number.31||+0x15c
                  |L23.168|
                          DCD      ||.data||
                  |L23.172|
                          DCD      Para

                          AREA ||i.USART3WriteDMA||, CODE, READONLY, ALIGN=2

                  USART3WriteDMA PROC
;;;2347   
;;;2348   void USART3WriteDMA(u16 len)
000000  b570              PUSH     {r4-r6,lr}
;;;2349   {
000002  4604              MOV      r4,r0
;;;2350       USART_ClearFlag(USART3, USART_FLAG_TC);     //串口发送准备
000004  2140              MOVS     r1,#0x40
000006  4809              LDR      r0,|L24.44|
000008  f7fffffe          BL       USART_ClearFlag
;;;2351   	DMA_Cmd(DMA1_Stream3, DISABLE);//关闭DMA 数据流3
00000c  4d08              LDR      r5,|L24.48|
00000e  2100              MOVS     r1,#0
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       DMA_Cmd
;;;2352       DMA_SetCurrDataCounter(DMA1_Stream3,len);//设置DMA发生长度
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       DMA_SetCurrDataCounter
;;;2353   	DMA_Cmd(DMA1_Stream3, ENABLE);// 打开DMA 数据流3
00001e  4628              MOV      r0,r5
000020  e8bd4070          POP      {r4-r6,lr}
000024  2101              MOVS     r1,#1
000026  f7ffbffe          B.W      DMA_Cmd
;;;2354      
;;;2355   }
;;;2356   
                          ENDP

00002a  0000              DCW      0x0000
                  |L24.44|
                          DCD      0x40004800
                  |L24.48|
                          DCD      0x40026058

                          AREA ||i.USART3_Configuration||, CODE, READONLY, ALIGN=2

                  USART3_Configuration PROC
;;;2294   
;;;2295   void USART3_Configuration()//???????
000000  b570              PUSH     {r4-r6,lr}
;;;2296   {  
;;;2297       GPIO_InitTypeDef GPIO_InitStructure;
;;;2298   	USART_InitTypeDef USART_InitStructure;
;;;2299   	
;;;2300   	/* config USART1 clock */
;;;2301   	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
000002  2101              MOVS     r1,#1
000004  b088              SUB      sp,sp,#0x20           ;2296
000006  0488              LSLS     r0,r1,#18
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;2302   //    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE); //?? GPIOA ??
;;;2303       
;;;2304   	GPIO_PinAFConfig(GPIOD,GPIO_PinSource8,GPIO_AF_USART3);
00000c  4c2a              LDR      r4,|L25.184|
00000e  2207              MOVS     r2,#7
000010  2108              MOVS     r1,#8
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2305   	GPIO_PinAFConfig(GPIOD,GPIO_PinSource9,GPIO_AF_USART3);
000018  2207              MOVS     r2,#7
00001a  2109              MOVS     r1,#9
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2306       
;;;2307   
;;;2308       
;;;2309       
;;;2310   	/* USART1 GPIO config */
;;;2311   	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;2312   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
000022  15a0              ASRS     r0,r4,#22
;;;2313   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000024  2502              MOVS     r5,#2
000026  9004              STR      r0,[sp,#0x10]
000028  f88d5014          STRB     r5,[sp,#0x14]
;;;2314   //     GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //??????
;;;2315   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00002c  f88d5015          STRB     r5,[sp,#0x15]
;;;2316   	GPIO_Init(GPIOD, &GPIO_InitStructure);    
000030  a904              ADD      r1,sp,#0x10
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       GPIO_Init
;;;2317   	/* Configure USART1 Rx (PA.10) as input floating */
;;;2318   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
000038  1560              ASRS     r0,r4,#21
;;;2319       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00003a  9004              STR      r0,[sp,#0x10]
00003c  f88d5014          STRB     r5,[sp,#0x14]
;;;2320   	GPIO_Init(GPIOD, &GPIO_InitStructure);
000040  a904              ADD      r1,sp,#0x10
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       GPIO_Init
;;;2321       
;;;2322   
;;;2323   	
;;;2324   	/* USART1 mode config */
;;;2325   	USART_InitStructure.USART_BaudRate = 9600;
;;;2326   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000048  2400              MOVS     r4,#0
00004a  f44f5016          MOV      r0,#0x2580            ;2325
00004e  9000              STR      r0,[sp,#0]
;;;2327   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2328   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000050  f8ad4008          STRH     r4,[sp,#8]
;;;2329   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2330   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000054  200c              MOVS     r0,#0xc
;;;2331   	USART_Init(USART3, &USART_InitStructure);
000056  4e19              LDR      r6,|L25.188|
000058  f8ad4004          STRH     r4,[sp,#4]            ;2326
00005c  f8ad000a          STRH     r0,[sp,#0xa]          ;2330
000060  f8ad4006          STRH     r4,[sp,#6]            ;2327
000064  f8ad400c          STRH     r4,[sp,#0xc]          ;2329
000068  4669              MOV      r1,sp
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       USART_Init
;;;2332       
;;;2333   
;;;2334   	
;;;2335   	/******????????******************/
;;;2336   	USART_ITConfig(USART3, USART_IT_IDLE, ENABLE);
000070  2201              MOVS     r2,#1
000072  f2404124          MOV      r1,#0x424
000076  4630              MOV      r0,r6
000078  f7fffffe          BL       USART_ITConfig
00007c  f44f60e0          MOV      r0,#0x700
000080  f7fffffe          BL       NVIC_PriorityGroupConfig
000084  2027              MOVS     r0,#0x27
000086  f88d0018          STRB     r0,[sp,#0x18]
00008a  f88d4019          STRB     r4,[sp,#0x19]
00008e  f88d501a          STRB     r5,[sp,#0x1a]
000092  2001              MOVS     r0,#1
000094  f88d001b          STRB     r0,[sp,#0x1b]
000098  a806              ADD      r0,sp,#0x18
00009a  f7fffffe          BL       NVIC_Init
;;;2337   	USART3_NVIC_Config();//??????
;;;2338   	USART3_DMA_init();
00009e  f7fffffe          BL       USART3_DMA_init
;;;2339   	USART_Cmd(USART3, ENABLE);//????1
0000a2  2101              MOVS     r1,#1
0000a4  4630              MOV      r0,r6
0000a6  f7fffffe          BL       USART_Cmd
;;;2340       USART_ClearFlag(USART3, USART_FLAG_TC);
0000aa  2140              MOVS     r1,#0x40
0000ac  4630              MOV      r0,r6
0000ae  f7fffffe          BL       USART_ClearFlag
;;;2341       
;;;2342     
;;;2343       
;;;2344   	
;;;2345   }
0000b2  b008              ADD      sp,sp,#0x20
0000b4  bd70              POP      {r4-r6,pc}
;;;2346   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L25.184|
                          DCD      0x40020c00
                  |L25.188|
                          DCD      0x40004800

                          AREA ||i.USART3_DMA_init||, CODE, READONLY, ALIGN=2

                  USART3_DMA_init PROC
;;;2195   
;;;2196   static void USART3_DMA_init(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2197   {
;;;2198       DMA_InitTypeDef DMA_InitStructure;
;;;2199       NVIC_InitTypeDef NVIC_InitStructure;
;;;2200   	
;;;2201   	//串口3使用DMA1 发送为数据流3  通道4   
;;;2202       //F4与F1DMA多了一个数据流的说法详细参考中文数据手册DMA 表35
;;;2203       /* 1.使能DMA2时钟 */
;;;2204   	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
000004  2101              MOVS     r1,#1
000006  b091              SUB      sp,sp,#0x44           ;2197
000008  0548              LSLS     r0,r1,#21
00000a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;2205   	
;;;2206   	//串口发送DMA配置
;;;2207       /* 2.配置使用DMA发送数据 */
;;;2208       DMA_DeInit(DMA1_Stream3); //DMA1 数据流 3
00000e  f8dfa0d8          LDR      r10,|L26.232|
000012  4650              MOV      r0,r10
000014  f7fffffe          BL       DMA_DeInit
;;;2209       DMA_InitStructure.DMA_Channel = DMA_Channel_4;  /* 配置DMA1通道4 */
000018  f04f6600          MOV      r6,#0x8000000
;;;2210       DMA_InitStructure.DMA_PeripheralBaseAddr  = (uint32_t)(&(USART3->DR)); /* 目的 */
;;;2211       DMA_InitStructure.DMA_Memory0BaseAddr     = (uint32_t)MasterSendbuf; /*源内存地址*/
00001c  4834              LDR      r0,|L26.240|
00001e  4f33              LDR      r7,|L26.236|
000020  9600              STR      r6,[sp,#0]
000022  e9cd7001          STRD     r7,r0,[sp,#4]
;;;2212       DMA_InitStructure.DMA_DIR                 = DMA_DIR_MemoryToPeripheral;  /*方向内            
;;;2213                                                                               存到外设*/
;;;2214       DMA_InitStructure.DMA_BufferSize          = MAXRxTxLen;                    
;;;2215       /* 长度 */                  
;;;2216       DMA_InitStructure.DMA_PeripheralInc       = DMA_PeripheralInc_Disable;    
000026  2400              MOVS     r4,#0
000028  2040              MOVS     r0,#0x40              ;2212
00002a  f04f0880          MOV      r8,#0x80              ;2214
;;;2217       /* 外设地址是否自增 */
;;;2218       DMA_InitStructure.DMA_MemoryInc           = DMA_MemoryInc_Enable;        
00002e  f44f6980          MOV      r9,#0x400
000032  9003              STR      r0,[sp,#0xc]
000034  e9cd8404          STRD     r8,r4,[sp,#0x10]
000038  e9cd9406          STRD     r9,r4,[sp,#0x18]
;;;2219       /* 内存地址是否自增 */
;;;2220       DMA_InitStructure.DMA_PeripheralDataSize  = DMA_PeripheralDataSize_Byte;  
;;;2221       /* 目的数据带宽 */
;;;2222       DMA_InitStructure.DMA_MemoryDataSize      = DMA_MemoryDataSize_Byte;      
;;;2223       /* 源数据宽度 */
;;;2224       DMA_InitStructure.DMA_Mode                = DMA_Mode_Normal;             
;;;2225       /* 单次传输模式/循环传输模式 */
;;;2226       DMA_InitStructure.DMA_Priority            = DMA_Priority_High;             
00003c  02c0              LSLS     r0,r0,#11
00003e  9408              STR      r4,[sp,#0x20]
000040  e9cd4009          STRD     r4,r0,[sp,#0x24]
;;;2227       /* DMA优先级 */
;;;2228       DMA_InitStructure.DMA_FIFOMode            = DMA_FIFOMode_Disable;          
;;;2229       /* FIFO模式/直接模式 */
;;;2230       DMA_InitStructure.DMA_FIFOThreshold       = DMA_FIFOThreshold_HalfFull; 
000044  2501              MOVS     r5,#1
000046  e9cd450b          STRD     r4,r5,[sp,#0x2c]
;;;2231       /* FIFO大小 */
;;;2232       DMA_InitStructure.DMA_MemoryBurst         = DMA_MemoryBurst_Single;      
;;;2233        /* 单次传输 */
;;;2234       DMA_InitStructure.DMA_PeripheralBurst     = DMA_PeripheralBurst_Single;
00004a  940d              STR      r4,[sp,#0x34]
;;;2235       /* 3. 配置DMA */
;;;2236       DMA_Init(DMA1_Stream3, &DMA_InitStructure);
00004c  4669              MOV      r1,sp
00004e  4650              MOV      r0,r10
000050  940e              STR      r4,[sp,#0x38]
000052  f7fffffe          BL       DMA_Init
;;;2237       /* 4.使能DMA中断 */
;;;2238       DMA_ITConfig(DMA1_Stream3, DMA_IT_TC, ENABLE);
000056  2201              MOVS     r2,#1
000058  2110              MOVS     r1,#0x10
00005a  4650              MOV      r0,r10
00005c  f7fffffe          BL       DMA_ITConfig
;;;2239       /* 5.使能串口的DMA发送接口 */
;;;2240       USART_DMACmd(USART3, USART_DMAReq_Tx, ENABLE);
000060  f1a70b04          SUB      r11,r7,#4
000064  2201              MOVS     r2,#1
000066  2180              MOVS     r1,#0x80
000068  4658              MOV      r0,r11
00006a  f7fffffe          BL       USART_DMACmd
;;;2241       /* 6. 配置DMA中断优先级 */
;;;2242       NVIC_InitStructure.NVIC_IRQChannel                   = DMA1_Stream3_IRQn;  
00006e  200e              MOVS     r0,#0xe
000070  f88d003c          STRB     r0,[sp,#0x3c]
;;;2243       //  DMA发生中断         
;;;2244       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;          
000074  f88d403d          STRB     r4,[sp,#0x3d]
;;;2245       NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 4; 
000078  2004              MOVS     r0,#4
00007a  f88d003e          STRB     r0,[sp,#0x3e]
;;;2246       NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;
00007e  f88d503f          STRB     r5,[sp,#0x3f]
;;;2247       NVIC_Init(&NVIC_InitStructure);
000082  a80f              ADD      r0,sp,#0x3c
000084  f7fffffe          BL       NVIC_Init
;;;2248   	
;;;2249       /* 7.不使能DMA */                  
;;;2250       DMA_Cmd(DMA1_Stream3, DISABLE);// 数据流2
000088  2100              MOVS     r1,#0
00008a  4650              MOV      r0,r10
00008c  f7fffffe          BL       DMA_Cmd
;;;2251   	//************************DMA接收***********************//
;;;2252   	/* 2.配置使用DMA接收数据 */
;;;2253       DMA_DeInit(DMA1_Stream1); 
000090  f8dfa054          LDR      r10,|L26.232|
000094  f1aa0a30          SUB      r10,r10,#0x30
000098  4650              MOV      r0,r10
00009a  f7fffffe          BL       DMA_DeInit
;;;2254       DMA_InitStructure.DMA_Channel             = DMA_Channel_4;               
;;;2255       /* 配置DMA通道 */
;;;2256       DMA_InitStructure.DMA_PeripheralBaseAddr  = (uint32_t)(&(USART3->DR));   
;;;2257       /* 源地址 */
;;;2258       DMA_InitStructure.DMA_Memory0BaseAddr     = (uint32_t)MasterRecbuf;    
00009e  4814              LDR      r0,|L26.240|
0000a0  a902              ADD      r1,sp,#8
0000a2  3080              ADDS     r0,r0,#0x80
0000a4  e8810111          STM      r1,{r0,r4,r8}
0000a8  e9cd4905          STRD     r4,r9,[sp,#0x14]
;;;2259       /* 目标地址 */
;;;2260       DMA_InitStructure.DMA_DIR                 = DMA_DIR_PeripheralToMemory;    
;;;2261       /* 方向外设向内存  */
;;;2262       DMA_InitStructure.DMA_BufferSize          = MAXRxTxLen;                    		
;;;2263       /* 长度 */                  
;;;2264       DMA_InitStructure.DMA_PeripheralInc       = DMA_PeripheralInc_Disable;    
;;;2265         /* 外设地址是否自增 */
;;;2266       DMA_InitStructure.DMA_MemoryInc           = DMA_MemoryInc_Enable;         
;;;2267       /* 内存地址是否自增 */
;;;2268       DMA_InitStructure.DMA_PeripheralDataSize  = DMA_MemoryDataSize_Byte;     
;;;2269       /* 目的数据带宽 */
;;;2270       DMA_InitStructure.DMA_MemoryDataSize      = DMA_MemoryDataSize_Byte;      
;;;2271       /* 源数据宽度 */
;;;2272       DMA_InitStructure.DMA_Mode                = DMA_Mode_Circular;             
0000ac  0228              LSLS     r0,r5,#8
0000ae  e9cd4008          STRD     r4,r0,[sp,#0x20]
;;;2273       /*循环传输模式 */
;;;2274       DMA_InitStructure.DMA_Priority            = DMA_Priority_VeryHigh;        
0000b2  a90a              ADD      r1,sp,#0x28
0000b4  9407              STR      r4,[sp,#0x1c]         ;2272
0000b6  f44f3040          MOV      r0,#0x30000
0000ba  e8810031          STM      r1,{r0,r4,r5}
;;;2275       /* DMA优先级 */
;;;2276       DMA_InitStructure.DMA_FIFOMode            = DMA_FIFOMode_Disable;         
;;;2277        /* FIFO模式/直接模式 */
;;;2278       DMA_InitStructure.DMA_FIFOThreshold       = DMA_FIFOThreshold_HalfFull; 
;;;2279       /* FIFO大小 */
;;;2280       DMA_InitStructure.DMA_MemoryBurst         = DMA_MemoryBurst_Single;       
;;;2281       /* 单次传输 */
;;;2282       DMA_InitStructure.DMA_PeripheralBurst     = DMA_PeripheralBurst_Single;
0000be  940d              STR      r4,[sp,#0x34]
;;;2283       /* 3. 配置DMA */
;;;2284       DMA_Init(DMA1_Stream1, &DMA_InitStructure);
0000c0  4669              MOV      r1,sp
0000c2  4650              MOV      r0,r10
0000c4  940e              STR      r4,[sp,#0x38]
0000c6  e9cd6700          STRD     r6,r7,[sp,#0]
0000ca  f7fffffe          BL       DMA_Init
;;;2285       /* 4.由于接收不需要DMA中断，故不设置DMA中断 */
;;;2286       /* 5.使能串口的DMA接收 */
;;;2287       USART_DMACmd(USART3,USART_DMAReq_Rx,ENABLE);
0000ce  2201              MOVS     r2,#1
0000d0  2140              MOVS     r1,#0x40
0000d2  4658              MOV      r0,r11
0000d4  f7fffffe          BL       USART_DMACmd
;;;2288       /* 6. 由于接收不需要DMA中断，故不能配置DMA中断优先级 */
;;;2289       /* 7.使能DMA */ 
;;;2290       DMA_Cmd(DMA1_Stream1,ENABLE);
0000d8  2101              MOVS     r1,#1
0000da  4650              MOV      r0,r10
0000dc  f7fffffe          BL       DMA_Cmd
;;;2291   }
0000e0  b011              ADD      sp,sp,#0x44
0000e2  e8bd8ff0          POP      {r4-r11,pc}
;;;2292   
                          ENDP

0000e6  0000              DCW      0x0000
                  |L26.232|
                          DCD      0x40026058
                  |L26.236|
                          DCD      0x40004804
                  |L26.240|
                          DCD      ||area_number.31||+0xdc

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;2372   
;;;2373   void USART3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2374   {
;;;2375       u8 Clear = Clear;
;;;2376       u16 num = 0;
;;;2377            
;;;2378       if(USART_GetITStatus(USART3, USART_IT_IDLE) != RESET)
000002  4c18              LDR      r4,|L27.100|
000004  f2404124          MOV      r1,#0x424
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USART_GetITStatus
00000e  2800              CMP      r0,#0
000010  d024              BEQ      |L27.92|
;;;2379       {
;;;2380           Clear = USART3->SR;  //读SR寄存器清除                                                            
000012  8820              LDRH     r0,[r4,#0]
;;;2381          
;;;2382           Clear = USART3->DR;  //读DR寄存器清除                                                        
000014  1d20              ADDS     r0,r4,#4
000016  8800              LDRH     r0,[r0,#0]
;;;2383           DMA_Cmd(DMA1_Stream1,DISABLE);   //关闭DMA
000018  4d13              LDR      r5,|L27.104|
00001a  2100              MOVS     r1,#0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       DMA_Cmd
;;;2384   		DMA_ClearFlag(DMA1_Stream1,DMA_FLAG_TCIF2);
000022  f04f5181          MOV      r1,#0x10200000
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       DMA_ClearFlag
;;;2385           num = DMA_GetCurrDataCounter(DMA1_Stream1); //得到真正接收数据个数
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       DMA_GetCurrDataCounter
;;;2386           if(num < MAXRxTxLen)
;;;2387           {
;;;2388               USART3_Recive_leng   = MAXRxTxLen - num;
000032  4c0e              LDR      r4,|L27.108|
000034  2880              CMP      r0,#0x80              ;2386
000036  d212              BCS      |L27.94|
000038  f1c00080          RSB      r0,r0,#0x80
00003c  b2c0              UXTB     r0,r0
00003e  7020              STRB     r0,[r4,#0]
;;;2389           }else
;;;2390           {
;;;2391               USART3_Recive_leng = MAXRxTxLen;
;;;2392           }
;;;2393            
;;;2394           if(USART3_Recive_leng > MAXRxTxLen)
000040  2880              CMP      r0,#0x80
000042  d901              BLS      |L27.72|
;;;2395           {
;;;2396               USART3_Recive_leng = 0;  //避免接收数据超界                                               
000044  2000              MOVS     r0,#0
                  |L27.70|
000046  7020              STRB     r0,[r4,#0]            ;2391
                  |L27.72|
;;;2397           }
;;;2398           DMA_SetCurrDataCounter(DMA1_Stream1,MAXRxTxLen);//设置DMA传输长度                                                        
000048  2180              MOVS     r1,#0x80
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       DMA_SetCurrDataCounter
;;;2399           DMA_Cmd(DMA1_Stream1,ENABLE);  //开启DMA
000050  2101              MOVS     r1,#1
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       DMA_Cmd
;;;2400           USART3_Recive_flg = 1;    //数据接收成功                                                  
000058  2001              MOVS     r0,#1
00005a  7060              STRB     r0,[r4,#1]
                  |L27.92|
;;;2401           
;;;2402       } 
;;;2403   }
00005c  bd70              POP      {r4-r6,pc}
                  |L27.94|
00005e  2080              MOVS     r0,#0x80              ;2391
000060  e7f1              B        |L27.70|
;;;2404   
                          ENDP

000062  0000              DCW      0x0000
                  |L27.100|
                          DCD      0x40004800
                  |L27.104|
                          DCD      0x40026028
                  |L27.108|
                          DCD      ||.data||

                          AREA ||i.USART_Configuration||, CODE, READONLY, ALIGN=2

                  USART_Configuration PROC
;;;2089   
;;;2090   void USART_Configuration(void)//串口初始化函数
000000  b570              PUSH     {r4-r6,lr}
;;;2091   {  
000002  b088              SUB      sp,sp,#0x20
;;;2092   	GPIO_InitTypeDef GPIO_InitStructure;
;;;2093   	USART_InitTypeDef USART_InitStructure;
;;;2094   	
;;;2095   	/* config USART1 clock */
;;;2096   	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
000004  2101              MOVS     r1,#1
000006  2010              MOVS     r0,#0x10
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;2097   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1);
00000c  4e2a              LDR      r6,|L28.184|
00000e  2207              MOVS     r2,#7
000010  2109              MOVS     r1,#9
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;2098   	GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1);
000018  2207              MOVS     r2,#7
00001a  210a              MOVS     r1,#0xa
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;2099   	/* USART1 GPIO config */
;;;2100   	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;2101   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
;;;2102   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000022  2502              MOVS     r5,#2
000024  1570              ASRS     r0,r6,#21             ;2101
000026  f88d5004          STRB     r5,[sp,#4]
;;;2103   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
00002c  9000              STR      r0,[sp,#0]            ;2102
00002e  f88d4006          STRB     r4,[sp,#6]
;;;2104   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f88d5005          STRB     r5,[sp,#5]
;;;2105   	GPIO_Init(GPIOA, &GPIO_InitStructure);    
000036  4669              MOV      r1,sp
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GPIO_Init
;;;2106   	/* Configure USART1 Rx (PA.10) as input floating */
;;;2107   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
00003e  0268              LSLS     r0,r5,#9
;;;2108   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000040  9000              STR      r0,[sp,#0]
000042  f88d5004          STRB     r5,[sp,#4]
;;;2109   	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;2110   	
;;;2111   	/* USART1 mode config */
;;;2112   	USART_InitStructure.USART_BaudRate = 9600;
00004e  f44f5016          MOV      r0,#0x2580
;;;2113   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000052  9002              STR      r0,[sp,#8]
;;;2114   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;2115   	USART_InitStructure.USART_Parity = USART_Parity_No ;
000054  f8ad4010          STRH     r4,[sp,#0x10]
;;;2116   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;2117   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
;;;2118   	USART_Init(USART1, &USART_InitStructure);
00005a  4d18              LDR      r5,|L28.188|
00005c  f8ad400c          STRH     r4,[sp,#0xc]          ;2113
000060  f8ad0012          STRH     r0,[sp,#0x12]         ;2117
000064  f8ad400e          STRH     r4,[sp,#0xe]          ;2114
000068  f8ad4014          STRH     r4,[sp,#0x14]         ;2116
00006c  a902              ADD      r1,sp,#8
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       USART_Init
;;;2119   	
;;;2120   	/******使能串口接收中断******************/
;;;2121   	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	
000074  2201              MOVS     r2,#1
000076  f2405125          MOV      r1,#0x525
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_ITConfig
;;;2122   	USART_Cmd(USART1, ENABLE);//使能串口1
000080  2101              MOVS     r1,#1
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USART_Cmd
;;;2123   	USART_ClearFlag(USART1, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       USART_ClearFlag
000090  f44f60e0          MOV      r0,#0x700
000094  f7fffffe          BL       NVIC_PriorityGroupConfig
000098  2025              MOVS     r0,#0x25
00009a  f88d0018          STRB     r0,[sp,#0x18]
00009e  f88d4019          STRB     r4,[sp,#0x19]
0000a2  2004              MOVS     r0,#4
0000a4  f88d001a          STRB     r0,[sp,#0x1a]
0000a8  2001              MOVS     r0,#1
0000aa  f88d001b          STRB     r0,[sp,#0x1b]
0000ae  a806              ADD      r0,sp,#0x18
0000b0  f7fffffe          BL       NVIC_Init
;;;2124     
;;;2125   	USART1_NVIC_Config();//串口中断配置
;;;2126   }			
0000b4  b008              ADD      sp,sp,#0x20
0000b6  bd70              POP      {r4-r6,pc}
;;;2127   
                          ENDP

                  |L28.184|
                          DCD      0x40020000
                  |L28.188|
                          DCD      0x40011000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UART_Buffer_Rece
                          %        16

                          AREA ||area_number.31||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.31||, ||.bss||
                  UART_Buffer_Send
                          %        20
                  USART_RX_BUF
                          %        200
                  MasterSendbuf
                          %        128
                  MasterRecbuf
                          %        128

                          AREA ||.data||, DATA, ALIGN=2

                  USART3_Recive_leng
000000  00                DCB      0x00
                  USART3_Recive_flg
000001  00                DCB      0x00
                  UART_Buffer_Send_pointer
000002  00                DCB      0x00
                  |symbol_number.106|
000003  00                DCB      0x00
                  Transmit_BUFFERsize
000004  00                DCB      0x00
                  MODE
000005  00                DCB      0x00
                  mainswitch
000006  00                DCB      0x00
                  Rraly
000007  00                DCB      0x00
                  sendwait
000008  00                DCB      0x00
                  listsend
000009  00                DCB      0x00
                  listocwatch
00000a  00                DCB      0x00
                  listpowwatch1
00000b  00                DCB      0x00
                  listpowwatch2
00000c  0000              DCB      0x00,0x00
                  USART_RX_STA
00000e  0000              DCW      0x0000
                  USART_RX_CNT
000010  0000              DCW      0x0000
000012  0000              DCB      0x00,0x00
                  ||x1||
                          DCD      0x00000000
                  ||y1||
                          DCD      0x00000000
                  ||x2||
                          DCD      0x00000000
                  ||y2||
                          DCD      0x00000000
                  ||x3||
                          DCD      0x00000000
                  ||y3||
                          DCD      0x00000000
                  ||x4||
                          DCD      0x00000000
                  ||y4||
                          DCD      0x00000000
                  ||x5||
                          DCD      0x00000000
                  ||y5||
                          DCD      0x00000000
                  ||x6||
                          DCD      0x00000000
                  ||y6||
                          DCD      0x00000000
                  ||x7||
                          DCD      0x00000000
                  ||y7||
                          DCD      0x00000000
                  ||x8||
                          DCD      0x00000000
                  ||y8||
                          DCD      0x00000000
                  watchtest
                          DCD      0x00000000
                  CmdStr
000058  53544154          DCB      0x53,0x54,0x41,0x54
00005c  55535f00          DCB      0x55,0x53,0x5f,0x00
000060  004d4f44          DCB      0x00,0x4d,0x4f,0x44
000064  5f000000          DCB      0x5f,0x00,0x00,0x00
000068  00005452          DCB      0x00,0x00,0x54,0x52
00006c  49475f00          DCB      0x49,0x47,0x5f,0x00
000070  00000053          DCB      0x00,0x00,0x00,0x53
000074  45545041          DCB      0x45,0x54,0x50,0x41
000078  52415f00          DCB      0x52,0x41,0x5f,0x00
00007c  5345544c          DCB      0x53,0x45,0x54,0x4c
000080  4953545f          DCB      0x49,0x53,0x54,0x5f
000084  004f5052          DCB      0x00,0x4f,0x50,0x52
000088  45534554          DCB      0x45,0x53,0x45,0x54
00008c  5f00504f          DCB      0x5f,0x00,0x50,0x4f
000090  57495f00          DCB      0x57,0x49,0x5f,0x00
000094  00000041          DCB      0x00,0x00,0x00,0x41
000098  4443565f          DCB      0x44,0x43,0x56,0x5f
00009c  00000000          DCB      0x00,0x00,0x00,0x00
0000a0  4c4f5749          DCB      0x4c,0x4f,0x57,0x49
0000a4  5f000000          DCB      0x5f,0x00,0x00,0x00
0000a8  00484f52          DCB      0x00,0x48,0x4f,0x52
0000ac  4c5f0000          DCB      0x4c,0x5f,0x00,0x00
0000b0  00004c56          DCB      0x00,0x00,0x4c,0x56
0000b4  4c5f0000          DCB      0x4c,0x5f,0x00,0x00
0000b8  00000053          DCB      0x00,0x00,0x00,0x53
0000bc  57495443          DCB      0x57,0x49,0x54,0x43
0000c0  485f0000          DCB      0x48,0x5f,0x00,0x00
0000c4  43414c56          DCB      0x43,0x41,0x4c,0x56
0000c8  5f000000          DCB      0x5f,0x00,0x00,0x00
0000cc  0043414c          DCB      0x00,0x43,0x41,0x4c
0000d0  495f0000          DCB      0x49,0x5f,0x00,0x00
0000d4  00004341          DCB      0x00,0x00,0x43,0x41
0000d8  4c525f00          DCB      0x4c,0x52,0x5f,0x00
0000dc  00000044          DCB      0x00,0x00,0x00,0x44
0000e0  41435f00          DCB      0x41,0x43,0x5f,0x00
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
0000e8  4f564552          DCB      0x4f,0x56,0x45,0x52
0000ec  5f000000          DCB      0x5f,0x00,0x00,0x00
0000f0  0054454d          DCB      0x00,0x54,0x45,0x4d
0000f4  505f0000          DCB      0x50,0x5f,0x00,0x00
0000f8  0000424f          DCB      0x00,0x00,0x42,0x4f
0000fc  4f545f00          DCB      0x4f,0x54,0x5f,0x00
000100  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.34||, DATA, ALIGN=0

                          EXPORTAS ||area_number.34||, ||.data||
                  UART_Buffer_Size
000000  00                DCB      0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  t_USART
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.data||
                  powsetdelay
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\drive\\usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REV16|
#line 129 "E:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_usart_c_7cc17ae7____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_7cc17ae7____REVSH|
#line 144
|__asm___7_usart_c_7cc17ae7____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
