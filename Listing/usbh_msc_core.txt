; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\usbh_msc_core.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\usbh_msc_core.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=525 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\usbh_msc_core.crf --no_multibyte_chars ..\USB\STM32_USB_HOST_Library\Class\MSC\src\usbh_msc_core.c]
                          THUMB

                          AREA ||i.USBH_MSC_ClassRequest||, CODE, READONLY, ALIGN=2

                  USBH_MSC_ClassRequest PROC
;;;265    
;;;266    static USBH_Status USBH_MSC_ClassRequest(USB_OTG_CORE_HANDLE *pdev , 
000000  4901              LDR      r1,|L1.8|
;;;267                                            void *phost)
;;;268    {   
;;;269      
;;;270      USBH_Status status = USBH_OK ;
;;;271      USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOT_INIT_STATE;
000002  2000              MOVS     r0,#0
000004  7008              STRB     r0,[r1,#0]
;;;272      
;;;273      return status; 
;;;274    }
000006  4770              BX       lr
;;;275    
                          ENDP

                  |L1.8|
                          DCD      USBH_MSC_BOTXferParam

                          AREA ||i.USBH_MSC_ErrorHandle||, CODE, READONLY, ALIGN=2

                  USBH_MSC_ErrorHandle PROC
;;;517    
;;;518    void USBH_MSC_ErrorHandle(uint8_t status)
000000  490a              LDR      r1,|L2.44|
;;;519    {  
;;;520        if(status == USBH_MSC_FAIL)
;;;521        { 
;;;522          MSCErrorCount++;
;;;523          if(MSCErrorCount < USBH_MSC_ERROR_RETRY_LIMIT)
;;;524          { /* Try MSC level error recovery, Issue the request Sense to get 
;;;525            Drive error reason  */
;;;526            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_REQUEST_SENSE;
;;;527            USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
;;;528          }
;;;529          else
;;;530          {
;;;531            /* Error trials exceeded the limit, go to unrecovered state */
;;;532            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_UNRECOVERED_STATE;
000002  230a              MOVS     r3,#0xa
000004  2801              CMP      r0,#1                 ;520
000006  d002              BEQ      |L2.14|
;;;533          }
;;;534        } 
;;;535        else if(status == USBH_MSC_PHASE_ERROR)
000008  2802              CMP      r0,#2
00000a  d00c              BEQ      |L2.38|
;;;536        {
;;;537          /* Phase error, Go to Unrecoovered state */
;;;538          USBH_MSC_BOTXferParam.MSCState = USBH_MSC_UNRECOVERED_STATE;
;;;539        }
;;;540        else if(status == USBH_MSC_BUSY)
;;;541        {
;;;542          /*No change in state*/
;;;543        }
;;;544    }
00000c  4770              BX       lr
                  |L2.14|
00000e  4a08              LDR      r2,|L2.48|
000010  7810              LDRB     r0,[r2,#0]            ;522  ; MSCErrorCount
000012  1c40              ADDS     r0,r0,#1              ;522
000014  b2c0              UXTB     r0,r0                 ;522
000016  7010              STRB     r0,[r2,#0]            ;522
000018  280a              CMP      r0,#0xa               ;523
00001a  d204              BCS      |L2.38|
00001c  2006              MOVS     r0,#6                 ;526
00001e  7008              STRB     r0,[r1,#0]            ;526
000020  2001              MOVS     r0,#1                 ;527
000022  70c8              STRB     r0,[r1,#3]            ;527
000024  4770              BX       lr
                  |L2.38|
000026  700b              STRB     r3,[r1,#0]            ;532
000028  4770              BX       lr
;;;545    
                          ENDP

00002a  0000              DCW      0x0000
                  |L2.44|
                          DCD      USBH_MSC_BOTXferParam
                  |L2.48|
                          DCD      ||.data||

                          AREA ||i.USBH_MSC_Handle||, CODE, READONLY, ALIGN=2

                  USBH_MSC_Handle PROC
;;;284    
;;;285    static USBH_Status USBH_MSC_Handle(USB_OTG_CORE_HANDLE *pdev , 
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;286                                       void   *phost)
;;;287    {
000004  460e              MOV      r6,r1
000006  4681              MOV      r9,r0
;;;288      USBH_HOST *pphost = phost;
;;;289        
;;;290      USBH_Status status = USBH_BUSY;
000008  2401              MOVS     r4,#1
;;;291      uint8_t mscStatus = USBH_MSC_BUSY;
;;;292      uint8_t appliStatus = 0;
;;;293      
;;;294      static uint8_t maxLunExceed = FALSE;
;;;295      
;;;296        
;;;297      if(HCD_IsDeviceConnected(pdev))
00000a  f7fffffe          BL       HCD_IsDeviceConnected
00000e  2800              CMP      r0,#0
000010  d02a              BEQ      |L3.104|
;;;298      {   
;;;299        switch(USBH_MSC_BOTXferParam.MSCState)
000012  4d51              LDR      r5,|L3.344|
000014  2700              MOVS     r7,#0
000016  f8dfb144          LDR      r11,|L3.348|
00001a  7828              LDRB     r0,[r5,#0]  ; USBH_MSC_BOTXferParam
;;;300        {
;;;301        case USBH_MSC_BOT_INIT_STATE:
;;;302          USBH_MSC_Init(pdev);
;;;303          USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOT_RESET;  
;;;304          break;
;;;305          
;;;306        case USBH_MSC_BOT_RESET:   
;;;307          /* Issue BOT RESET request */
;;;308          status = USBH_MSC_BOTReset(pdev, phost);
;;;309          if(status == USBH_OK )
;;;310          {
;;;311            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_GET_MAX_LUN;
;;;312          }
;;;313          
;;;314          if(status == USBH_NOT_SUPPORTED )
;;;315          {
;;;316           /* If the Command has failed, then we need to move to Next State, after
;;;317            STALL condition is cleared by Control-Transfer */
;;;318            USBH_MSC_BOTXferParam.MSCStateBkp = USBH_MSC_GET_MAX_LUN; 
;;;319    
;;;320            /* a Clear Feature should be issued here */
;;;321            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_CTRL_ERROR_STATE;
;;;322          }  
;;;323          break;
;;;324          
;;;325        case USBH_MSC_GET_MAX_LUN:
;;;326          /* Issue GetMaxLUN request */
;;;327          status = USBH_MSC_GETMaxLUN(pdev, phost);
;;;328          
;;;329          if(status == USBH_OK )
;;;330          {
;;;331            MSC_Machine.maxLun = *(MSC_Machine.buff) ;
;;;332            
;;;333            /* If device has more that one logical unit then it is not supported */
;;;334            if((MSC_Machine.maxLun > 0) && (maxLunExceed == FALSE))
00001c  f8df8140          LDR      r8,|L3.352|
000020  f04f0a08          MOV      r10,#8                ;299
000024  280b              CMP      r0,#0xb               ;299
000026  d21f              BCS      |L3.104|
000028  e8dff000          TBB      [pc,r0]               ;299
00002c  060b2359          DCB      0x06,0x0b,0x23,0x59
000030  626d757d          DCB      0x62,0x6d,0x75,0x7d
000034  824d9100          DCB      0x82,0x4d,0x91,0x00
000038  4648              MOV      r0,r9                 ;302
00003a  f7fffffe          BL       USBH_MSC_Init
00003e  2001              MOVS     r0,#1                 ;303
000040  e013              B        |L3.106|
000042  2221              MOVS     r2,#0x21              ;304
000044  7532              STRB     r2,[r6,#0x14]         ;304
000046  22ff              MOVS     r2,#0xff              ;304
000048  7572              STRB     r2,[r6,#0x15]         ;304
00004a  82f7              STRH     r7,[r6,#0x16]         ;304
00004c  8337              STRH     r7,[r6,#0x18]         ;304
00004e  2300              MOVS     r3,#0                 ;304
000050  4648              MOV      r0,r9                 ;308
000052  4631              MOV      r1,r6                 ;308
000054  8377              STRH     r7,[r6,#0x1a]         ;308
000056  461a              MOV      r2,r3                 ;308
000058  f7fffffe          BL       USBH_CtlReq
00005c  0004              MOVS     r4,r0                 ;308
00005e  f04f0002          MOV      r0,#2                 ;299
000062  d002              BEQ      |L3.106|
000064  2c03              CMP      r4,#3                 ;314
000066  d002              BEQ      |L3.110|
                  |L3.104|
000068  e072              B        |L3.336|
                  |L3.106|
00006a  7028              STRB     r0,[r5,#0]            ;311
00006c  e070              B        |L3.336|
                  |L3.110|
00006e  7068              STRB     r0,[r5,#1]            ;318
000070  e027              B        |L3.194|
000072  22a1              MOVS     r2,#0xa1              ;321
000074  7532              STRB     r2,[r6,#0x14]         ;321
000076  22fe              MOVS     r2,#0xfe              ;321
000078  7572              STRB     r2,[r6,#0x15]         ;321
00007a  82f7              STRH     r7,[r6,#0x16]         ;321
00007c  8337              STRH     r7,[r6,#0x18]         ;321
00007e  2701              MOVS     r7,#1                 ;321
000080  4a36              LDR      r2,|L3.348|
000082  4648              MOV      r0,r9                 ;327
000084  4631              MOV      r1,r6                 ;327
000086  8377              STRH     r7,[r6,#0x1a]         ;327
000088  463b              MOV      r3,r7                 ;327
00008a  3208              ADDS     r2,r2,#8              ;327
00008c  f7fffffe          BL       USBH_CtlReq
000090  0004              MOVS     r4,r0                 ;327
000092  f04f0203          MOV      r2,#3                 ;291
000096  d002              BEQ      |L3.158|
;;;335            {
;;;336              maxLunExceed = TRUE;
;;;337              pphost->usr_cb->DeviceNotSupported();
;;;338              
;;;339              break;
;;;340            }
;;;341            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_TEST_UNIT_READY;
;;;342          }
;;;343          
;;;344          if(status == USBH_NOT_SUPPORTED )
000098  2c03              CMP      r4,#3
00009a  d011              BEQ      |L3.192|
00009c  e058              B        |L3.336|
                  |L3.158|
00009e  f89b0008          LDRB     r0,[r11,#8]           ;331  ; MSC_Machine
0000a2  f88b0048          STRB     r0,[r11,#0x48]        ;331
0000a6  b110              CBZ      r0,|L3.174|
0000a8  f8981001          LDRB     r1,[r8,#1]            ;334  ; maxLunExceed
0000ac  b109              CBZ      r1,|L3.178|
                  |L3.174|
0000ae  702a              STRB     r2,[r5,#0]            ;341
0000b0  e04e              B        |L3.336|
                  |L3.178|
0000b2  f8887001          STRB     r7,[r8,#1]            ;336
0000b6  f8d60080          LDR      r0,[r6,#0x80]         ;337
0000ba  6c00              LDR      r0,[r0,#0x40]         ;337
0000bc  4780              BLX      r0                    ;337
0000be  e047              B        |L3.336|
                  |L3.192|
;;;345          {
;;;346                   /* If the Command has failed, then we need to move to Next State, after
;;;347            STALL condition is cleared by Control-Transfer */
;;;348            USBH_MSC_BOTXferParam.MSCStateBkp = USBH_MSC_TEST_UNIT_READY; 
0000c0  706a              STRB     r2,[r5,#1]
                  |L3.194|
;;;349            
;;;350            /* a Clear Feature should be issued here */
;;;351            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_CTRL_ERROR_STATE;
0000c2  2009              MOVS     r0,#9
0000c4  e7d1              B        |L3.106|
;;;352          }    
;;;353          break;
;;;354          
;;;355        case USBH_MSC_CTRL_ERROR_STATE:
;;;356          /* Issue Clearfeature request */
;;;357          status = USBH_ClrFeature(pdev,
0000c6  7973              LDRB     r3,[r6,#5]
0000c8  2200              MOVS     r2,#0
0000ca  4631              MOV      r1,r6
0000cc  4648              MOV      r0,r9
0000ce  f7fffffe          BL       USBH_ClrFeature
0000d2  0004              MOVS     r4,r0
;;;358                                   phost,
;;;359                                   0x00,
;;;360                                   pphost->Control.hc_num_out);
;;;361          if(status == USBH_OK )
0000d4  d13c              BNE      |L3.336|
;;;362          {
;;;363            /* If GetMaxLun Request not support, assume Single LUN configuration */
;;;364            MSC_Machine.maxLun = 0;  
0000d6  f88b7048          STRB     r7,[r11,#0x48]
;;;365            
;;;366            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOTXferParam.MSCStateBkp;     
0000da  7868              LDRB     r0,[r5,#1]  ; USBH_MSC_BOTXferParam
0000dc  e7c5              B        |L3.106|
;;;367          }
;;;368          break;  
;;;369          
;;;370        case USBH_MSC_TEST_UNIT_READY:
;;;371          /* Issue SCSI command TestUnitReady */ 
;;;372          mscStatus = USBH_MSC_TestUnitReady(pdev);
0000de  4648              MOV      r0,r9
0000e0  f7fffffe          BL       USBH_MSC_TestUnitReady
;;;373          
;;;374          if(mscStatus == USBH_MSC_OK )
0000e4  b908              CBNZ     r0,|L3.234|
;;;375          {
;;;376            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_READ_CAPACITY10;
0000e6  2004              MOVS     r0,#4
;;;377            MSCErrorCount = 0;
;;;378            status = USBH_OK;
0000e8  e008              B        |L3.252|
                  |L3.234|
;;;379          }
;;;380          else
;;;381          {
;;;382            USBH_MSC_ErrorHandle(mscStatus);
0000ea  f7fffffe          BL       USBH_MSC_ErrorHandle
0000ee  e02f              B        |L3.336|
;;;383          } 
;;;384          break;
;;;385          
;;;386        case USBH_MSC_READ_CAPACITY10:
;;;387          /* Issue READ_CAPACITY10 SCSI command */
;;;388          mscStatus = USBH_MSC_ReadCapacity10(pdev);
0000f0  4648              MOV      r0,r9
0000f2  f7fffffe          BL       USBH_MSC_ReadCapacity10
;;;389          if(mscStatus == USBH_MSC_OK )
0000f6  2800              CMP      r0,#0
0000f8  d1f7              BNE      |L3.234|
;;;390          {
;;;391            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_MODE_SENSE6;
0000fa  2005              MOVS     r0,#5
                  |L3.252|
0000fc  7028              STRB     r0,[r5,#0]            ;376
                  |L3.254|
0000fe  f8887000          STRB     r7,[r8,#0]            ;377
                  |L3.258|
000102  2400              MOVS     r4,#0                 ;378
000104  e024              B        |L3.336|
;;;392            MSCErrorCount = 0;
;;;393            status = USBH_OK;
;;;394          }
;;;395          else
;;;396          {
;;;397            USBH_MSC_ErrorHandle(mscStatus);
;;;398          }
;;;399          break;
;;;400    
;;;401        case USBH_MSC_MODE_SENSE6:
;;;402          /* Issue ModeSense6 SCSI command for detecting if device is write-protected */
;;;403          mscStatus = USBH_MSC_ModeSense6(pdev);
000106  4648              MOV      r0,r9
000108  f7fffffe          BL       USBH_MSC_ModeSense6
;;;404          if(mscStatus == USBH_MSC_OK )
00010c  2800              CMP      r0,#0
00010e  d1ec              BNE      |L3.234|
;;;405          {
;;;406            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_DEFAULT_APPLI_STATE;
000110  f885a000          STRB     r10,[r5,#0]
;;;407            MSCErrorCount = 0;
;;;408            status = USBH_OK;
000114  e7f3              B        |L3.254|
;;;409          }
;;;410          else
;;;411          {
;;;412            USBH_MSC_ErrorHandle(mscStatus);
;;;413          }
;;;414          break;
;;;415          
;;;416        case USBH_MSC_REQUEST_SENSE:
;;;417          /* Issue RequestSense SCSI command for retreiving error code */
;;;418          mscStatus = USBH_MSC_RequestSense(pdev);
000116  4648              MOV      r0,r9
000118  f7fffffe          BL       USBH_MSC_RequestSense
;;;419          if(mscStatus == USBH_MSC_OK )
00011c  2800              CMP      r0,#0
00011e  d1e4              BNE      |L3.234|
;;;420          {
;;;421            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOTXferParam.MSCStateBkp;
000120  7868              LDRB     r0,[r5,#1]  ; USBH_MSC_BOTXferParam
000122  7028              STRB     r0,[r5,#0]
;;;422            status = USBH_OK;
000124  e7ed              B        |L3.258|
;;;423          }
;;;424          else
;;;425          {
;;;426            USBH_MSC_ErrorHandle(mscStatus);
;;;427          }  
;;;428          break;
;;;429          
;;;430        case USBH_MSC_BOT_USB_TRANSFERS:
;;;431          /* Process the BOT state machine */
;;;432          USBH_MSC_HandleBOTXfer(pdev , phost);
000126  4631              MOV      r1,r6
000128  4648              MOV      r0,r9
00012a  f7fffffe          BL       USBH_MSC_HandleBOTXfer
;;;433          break;
00012e  e00f              B        |L3.336|
;;;434        
;;;435        case USBH_MSC_DEFAULT_APPLI_STATE:
;;;436          /* Process Application callback for MSC */
;;;437          appliStatus = pphost->usr_cb->UserApplication();
000130  f8d60080          LDR      r0,[r6,#0x80]
000134  6bc0              LDR      r0,[r0,#0x3c]
000136  4780              BLX      r0
000138  f01000ff          ANDS     r0,r0,#0xff
;;;438          if(appliStatus == 0)
00013c  d002              BEQ      |L3.324|
;;;439          {
;;;440            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_DEFAULT_APPLI_STATE;
;;;441          }
;;;442          else if (appliStatus == 1) 
00013e  2801              CMP      r0,#1
000140  d003              BEQ      |L3.330|
000142  e005              B        |L3.336|
                  |L3.324|
000144  f885a000          STRB     r10,[r5,#0]           ;440
000148  e002              B        |L3.336|
                  |L3.330|
;;;443          {
;;;444            /* De-init requested from application layer */
;;;445            status =  USBH_APPLY_DEINIT;
00014a  2406              MOVS     r4,#6
00014c  e000              B        |L3.336|
;;;446          }
;;;447          break;
;;;448          
;;;449        case USBH_MSC_UNRECOVERED_STATE:
;;;450          
;;;451          status = USBH_UNRECOVERED_ERROR;
00014e  2404              MOVS     r4,#4
                  |L3.336|
;;;452          
;;;453          break;
;;;454          
;;;455        default:
;;;456          break; 
;;;457          
;;;458        }
;;;459      }
;;;460       return status;
000150  4620              MOV      r0,r4
;;;461    }
000152  e8bd9ff0          POP      {r4-r12,pc}
;;;462    
                          ENDP

000156  0000              DCW      0x0000
                  |L3.344|
                          DCD      USBH_MSC_BOTXferParam
                  |L3.348|
                          DCD      ||.bss||
                  |L3.352|
                          DCD      ||.data||

                          AREA ||i.USBH_MSC_InterfaceDeInit||, CODE, READONLY, ALIGN=2

                  USBH_MSC_InterfaceDeInit PROC
;;;239      */
;;;240    void USBH_MSC_InterfaceDeInit ( USB_OTG_CORE_HANDLE *pdev,
000000  b570              PUSH     {r4-r6,lr}
;;;241                                    void *phost)
;;;242    {	
;;;243      if ( MSC_Machine.hc_num_out)
000002  4c0c              LDR      r4,|L4.52|
000004  4606              MOV      r6,r0                 ;242
000006  2500              MOVS     r5,#0
000008  7861              LDRB     r1,[r4,#1]  ; MSC_Machine
00000a  b131              CBZ      r1,|L4.26|
;;;244      {
;;;245        USB_OTG_HC_Halt(pdev, MSC_Machine.hc_num_out);
00000c  f7fffffe          BL       USB_OTG_HC_Halt
;;;246        USBH_Free_Channel  (pdev, MSC_Machine.hc_num_out);
000010  7861              LDRB     r1,[r4,#1]  ; MSC_Machine
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       USBH_Free_Channel
;;;247        MSC_Machine.hc_num_out = 0;     /* Reset the Channel as Free */
000018  7065              STRB     r5,[r4,#1]
                  |L4.26|
;;;248      }
;;;249       
;;;250      if ( MSC_Machine.hc_num_in)
00001a  7821              LDRB     r1,[r4,#0]  ; MSC_Machine
00001c  2900              CMP      r1,#0
00001e  d007              BEQ      |L4.48|
;;;251      {
;;;252        USB_OTG_HC_Halt(pdev, MSC_Machine.hc_num_in);
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       USB_OTG_HC_Halt
;;;253        USBH_Free_Channel  (pdev, MSC_Machine.hc_num_in);
000026  7821              LDRB     r1,[r4,#0]  ; MSC_Machine
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       USBH_Free_Channel
;;;254        MSC_Machine.hc_num_in = 0;     /* Reset the Channel as Free */
00002e  7025              STRB     r5,[r4,#0]
                  |L4.48|
;;;255      } 
;;;256    }
000030  bd70              POP      {r4-r6,pc}
;;;257    
                          ENDP

000032  0000              DCW      0x0000
                  |L4.52|
                          DCD      ||.bss||

                          AREA ||i.USBH_MSC_InterfaceInit||, CODE, READONLY, ALIGN=2

                  USBH_MSC_InterfaceInit PROC
;;;170      */
;;;171    static USBH_Status USBH_MSC_InterfaceInit ( USB_OTG_CORE_HANDLE *pdev, 
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;172                                            void *phost)
;;;173    {	 
000004  4606              MOV      r6,r0
;;;174      USBH_HOST *pphost = phost;
;;;175      
;;;176      if((pphost->device_prop.Itf_Desc[0].bInterfaceClass == MSC_CLASS) && \
000006  f8910043          LDRB     r0,[r1,#0x43]
00000a  460c              MOV      r4,r1                 ;173
00000c  2808              CMP      r0,#8
00000e  d103              BNE      |L5.24|
;;;177         (pphost->device_prop.Itf_Desc[0].bInterfaceProtocol == MSC_PROTOCOL))
000010  f8940045          LDRB     r0,[r4,#0x45]
000014  2850              CMP      r0,#0x50
000016  d006              BEQ      |L5.38|
                  |L5.24|
;;;178      {
;;;179        if(pphost->device_prop.Ep_Desc[0][0].bEndpointAddress & 0x80)
;;;180        {
;;;181          MSC_Machine.MSBulkInEp = (pphost->device_prop.Ep_Desc[0][0].bEndpointAddress);
;;;182          MSC_Machine.MSBulkInEpSize  = pphost->device_prop.Ep_Desc[0][0].wMaxPacketSize;
;;;183        }
;;;184        else
;;;185        {
;;;186          MSC_Machine.MSBulkOutEp = (pphost->device_prop.Ep_Desc[0][0].bEndpointAddress);
;;;187          MSC_Machine.MSBulkOutEpSize  = pphost->device_prop.Ep_Desc[0] [0].wMaxPacketSize;      
;;;188        }
;;;189        
;;;190        if(pphost->device_prop.Ep_Desc[0][1].bEndpointAddress & 0x80)
;;;191        {
;;;192          MSC_Machine.MSBulkInEp = (pphost->device_prop.Ep_Desc[0][1].bEndpointAddress);
;;;193          MSC_Machine.MSBulkInEpSize  = pphost->device_prop.Ep_Desc[0][1].wMaxPacketSize;      
;;;194        }
;;;195        else
;;;196        {
;;;197          MSC_Machine.MSBulkOutEp = (pphost->device_prop.Ep_Desc[0][1].bEndpointAddress);
;;;198          MSC_Machine.MSBulkOutEpSize  = pphost->device_prop.Ep_Desc[0][1].wMaxPacketSize;      
;;;199        }
;;;200        
;;;201        MSC_Machine.hc_num_out = USBH_Alloc_Channel(pdev, 
;;;202                                                    MSC_Machine.MSBulkOutEp);
;;;203        MSC_Machine.hc_num_in = USBH_Alloc_Channel(pdev,
;;;204                                                    MSC_Machine.MSBulkInEp);  
;;;205        
;;;206        /* Open the new channels */
;;;207        USBH_Open_Channel  (pdev,
;;;208                            MSC_Machine.hc_num_out,
;;;209                            pphost->device_prop.address,
;;;210                            pphost->device_prop.speed,
;;;211                            EP_TYPE_BULK,
;;;212                            MSC_Machine.MSBulkOutEpSize);  
;;;213        
;;;214        USBH_Open_Channel  (pdev,
;;;215                            MSC_Machine.hc_num_in,
;;;216                            pphost->device_prop.address,
;;;217                            pphost->device_prop.speed,
;;;218                            EP_TYPE_BULK,
;;;219                            MSC_Machine.MSBulkInEpSize);    
;;;220        
;;;221      }
;;;222      
;;;223      else
;;;224      {
;;;225        pphost->usr_cb->DeviceNotSupported(); 
000018  f8d10080          LDR      r0,[r1,#0x80]
00001c  6c00              LDR      r0,[r0,#0x40]
00001e  4780              BLX      r0
                  |L5.32|
;;;226      }
;;;227      
;;;228      return USBH_OK ;
000020  2000              MOVS     r0,#0
;;;229     
;;;230    }
000022  e8bd81fc          POP      {r2-r8,pc}
                  |L5.38|
000026  f8940052          LDRB     r0,[r4,#0x52]         ;179
00002a  4d1c              LDR      r5,|L5.156|
00002c  0601              LSLS     r1,r0,#24             ;179
00002e  d504              BPL      |L5.58|
000030  70e8              STRB     r0,[r5,#3]            ;181
000032  f8b40054          LDRH     r0,[r4,#0x54]         ;182
000036  80a8              STRH     r0,[r5,#4]            ;182
000038  e003              B        |L5.66|
                  |L5.58|
00003a  70a8              STRB     r0,[r5,#2]            ;186
00003c  f8b40054          LDRH     r0,[r4,#0x54]         ;187
000040  80e8              STRH     r0,[r5,#6]            ;187
                  |L5.66|
000042  f894005a          LDRB     r0,[r4,#0x5a]         ;190
000046  0601              LSLS     r1,r0,#24             ;190
000048  d504              BPL      |L5.84|
00004a  70e8              STRB     r0,[r5,#3]            ;192
00004c  f8b4005c          LDRH     r0,[r4,#0x5c]         ;193
000050  80a8              STRH     r0,[r5,#4]            ;193
000052  e003              B        |L5.92|
                  |L5.84|
000054  70a8              STRB     r0,[r5,#2]            ;197
000056  f8b4005c          LDRH     r0,[r4,#0x5c]         ;198
00005a  80e8              STRH     r0,[r5,#6]            ;198
                  |L5.92|
00005c  78a9              LDRB     r1,[r5,#2]            ;201  ; MSC_Machine
00005e  4630              MOV      r0,r6                 ;201
000060  f7fffffe          BL       USBH_Alloc_Channel
000064  7068              STRB     r0,[r5,#1]            ;201
000066  78e9              LDRB     r1,[r5,#3]            ;203  ; MSC_Machine
000068  4630              MOV      r0,r6                 ;203
00006a  f7fffffe          BL       USBH_Alloc_Channel
00006e  7028              STRB     r0,[r5,#0]            ;203
000070  88e8              LDRH     r0,[r5,#6]            ;207  ; MSC_Machine
000072  2702              MOVS     r7,#2                 ;207
000074  e9cd7000          STRD     r7,r0,[sp,#0]         ;207
000078  f8943021          LDRB     r3,[r4,#0x21]         ;207
00007c  f8142f20          LDRB     r2,[r4,#0x20]!        ;207
000080  7869              LDRB     r1,[r5,#1]            ;207  ; MSC_Machine
000082  4630              MOV      r0,r6                 ;207
000084  f7fffffe          BL       USBH_Open_Channel
000088  88a8              LDRH     r0,[r5,#4]            ;214  ; MSC_Machine
00008a  e9cd7000          STRD     r7,r0,[sp,#0]         ;214
00008e  7863              LDRB     r3,[r4,#1]            ;214
000090  7822              LDRB     r2,[r4,#0]            ;214
000092  7829              LDRB     r1,[r5,#0]            ;214  ; MSC_Machine
000094  4630              MOV      r0,r6                 ;214
000096  f7fffffe          BL       USBH_Open_Channel
00009a  e7c1              B        |L5.32|
;;;231    
                          ENDP

                  |L5.156|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  MSC_Machine
                          %        74

                          AREA ||.data||, DATA, ALIGN=0

                  MSCErrorCount
000000  00                DCB      0x00
                  maxLunExceed
000001  00                DCB      0x00

                          AREA ||area_number.10||, DATA, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.data||
                  USBH_MSC_cb
                          DCD      USBH_MSC_InterfaceInit
                          DCD      USBH_MSC_InterfaceDeInit
                          DCD      USBH_MSC_ClassRequest
                          DCD      USBH_MSC_Handle

                          AREA ||area_number.11||, DATA, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.data||
                  MSC_Setup
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\USB\\STM32_USB_HOST_Library\\Class\\MSC\\src\\usbh_msc_core.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_usbh_msc_core_c_0007fda2____REV16|
#line 129 "E:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_usbh_msc_core_c_0007fda2____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_usbh_msc_core_c_0007fda2____REVSH|
#line 144
|__asm___15_usbh_msc_core_c_0007fda2____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
