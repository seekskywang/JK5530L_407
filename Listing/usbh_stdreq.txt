; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\usbh_stdreq.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\usbh_stdreq.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=525 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\usbh_stdreq.crf --no_multibyte_chars ..\USB\STM32_USB_HOST_Library\Core\src\usbh_stdreq.c]
                          THUMB

                          AREA ||i.USBH_ClrFeature||, CODE, READONLY, ALIGN=1

                  USBH_ClrFeature PROC
;;;327    */
;;;328    USBH_Status USBH_ClrFeature(USB_OTG_CORE_HANDLE *pdev,
000000  b430              PUSH     {r4,r5}
;;;329                                USBH_HOST *phost,
;;;330                                uint8_t ep_num, 
;;;331                                uint8_t hc_num) 
;;;332    {
;;;333      
;;;334      phost->Control.setup.b.bmRequestType = USB_H2D | 
000002  2402              MOVS     r4,#2
000004  750c              STRB     r4,[r1,#0x14]
;;;335                                             USB_REQ_RECIPIENT_ENDPOINT |
;;;336                                             USB_REQ_TYPE_STANDARD;
;;;337      
;;;338      phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
000006  2401              MOVS     r4,#1
000008  754c              STRB     r4,[r1,#0x15]
;;;339      phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
00000a  2400              MOVS     r4,#0
00000c  82cc              STRH     r4,[r1,#0x16]
;;;340      phost->Control.setup.b.wIndex.w = ep_num;
00000e  830a              STRH     r2,[r1,#0x18]
;;;341      phost->Control.setup.b.wLength.w = 0;           
;;;342      
;;;343      if ((ep_num & USB_REQ_DIR_MASK ) == USB_D2H)
000010  0615              LSLS     r5,r2,#24
000012  834c              STRH     r4,[r1,#0x1a]         ;341
;;;344      { /* EP Type is IN */
;;;345        pdev->host.hc[hc_num].toggle_in = 0; 
000014  eb001243          ADD      r2,r0,r3,LSL #5
000018  d502              BPL      |L1.32|
00001a  f88243c4          STRB     r4,[r2,#0x3c4]
00001e  e001              B        |L1.36|
                  |L1.32|
;;;346      }
;;;347      else
;;;348      {/* EP Type is OUT */
;;;349        pdev->host.hc[hc_num].toggle_out = 0; 
000020  f88243c5          STRB     r4,[r2,#0x3c5]
                  |L1.36|
;;;350      }
;;;351      
;;;352      return USBH_CtlReq(pdev, phost, 0 , 0 );   
000024  2300              MOVS     r3,#0
000026  bc30              POP      {r4,r5}
000028  461a              MOV      r2,r3
00002a  f7ffbffe          B.W      USBH_CtlReq
;;;353    }
;;;354    
                          ENDP


                          AREA ||i.USBH_GetDescriptor||, CODE, READONLY, ALIGN=1

                  USBH_GetDescriptor PROC
;;;227    */
;;;228    USBH_Status USBH_GetDescriptor(USB_OTG_CORE_HANDLE *pdev,
000000  b430              PUSH     {r4,r5}
;;;229                                   USBH_HOST           *phost,                                
;;;230                                   uint8_t  req_type,
;;;231                                   uint16_t value_idx, 
;;;232                                   uint8_t* buff, 
;;;233                                   uint16_t length )
;;;234    { 
;;;235      phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
000002  f0420280          ORR      r2,r2,#0x80
000006  e9dd5402          LDRD     r5,r4,[sp,#8]         ;234
00000a  750a              STRB     r2,[r1,#0x14]
;;;236      phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
00000c  2206              MOVS     r2,#6
00000e  754a              STRB     r2,[r1,#0x15]
;;;237      phost->Control.setup.b.wValue.w = value_idx;
;;;238      
;;;239      if ((value_idx & 0xff00) == USB_DESC_STRING)
000010  2203              MOVS     r2,#3
000012  82cb              STRH     r3,[r1,#0x16]         ;237
000014  ebb22f13          CMP      r2,r3,LSR #8
000018  d102              BNE      |L2.32|
;;;240      {
;;;241        phost->Control.setup.b.wIndex.w = 0x0409;
00001a  f2404209          MOV      r2,#0x409
00001e  e000              B        |L2.34|
                  |L2.32|
;;;242      }
;;;243      else
;;;244      {
;;;245        phost->Control.setup.b.wIndex.w = 0;
000020  2200              MOVS     r2,#0
                  |L2.34|
000022  830a              STRH     r2,[r1,#0x18]
;;;246      }
;;;247      phost->Control.setup.b.wLength.w = length;           
000024  834c              STRH     r4,[r1,#0x1a]
;;;248      return USBH_CtlReq(pdev, phost, buff , length );     
000026  4623              MOV      r3,r4
000028  462a              MOV      r2,r5
00002a  bc30              POP      {r4,r5}
00002c  f7ffbffe          B.W      USBH_CtlReq
;;;249    }
;;;250    
                          ENDP


                          AREA ||i.USBH_GetNextDesc||, CODE, READONLY, ALIGN=1

                  USBH_GetNextDesc PROC
;;;575    */
;;;576    USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
000000  880a              LDRH     r2,[r1,#0]
;;;577    {
;;;578      USBH_DescHeader_t  *pnext;
;;;579     
;;;580      *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
000002  7803              LDRB     r3,[r0,#0]
000004  441a              ADD      r2,r2,r3
000006  800a              STRH     r2,[r1,#0]
;;;581      pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
000008  7801              LDRB     r1,[r0,#0]
00000a  4408              ADD      r0,r0,r1
;;;582             ((USBH_DescHeader_t *)pbuf)->bLength);
;;;583     
;;;584      return(pnext);
;;;585    }
00000c  4770              BX       lr
;;;586    
                          ENDP


                          AREA ||i.USBH_Get_CfgDesc||, CODE, READONLY, ALIGN=2

                  USBH_Get_CfgDesc PROC
;;;152    */
;;;153    USBH_Status USBH_Get_CfgDesc(USB_OTG_CORE_HANDLE *pdev, 
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;154                                 USBH_HOST           *phost,                      
;;;155                                 uint16_t length)
;;;156    
;;;157    {
000004  4615              MOV      r5,r2
;;;158      USBH_Status status;
;;;159      uint16_t index = 0;
;;;160      
;;;161      if((status = USBH_GetDescriptor(pdev,
000006  f5007888          ADD      r8,r0,#0x110
00000a  e9cd8500          STRD     r8,r5,[sp,#0]
00000e  2400              MOVS     r4,#0                 ;159
000010  4607              MOV      r7,r0                 ;157
000012  460e              MOV      r6,r1                 ;157
000014  f44f7300          MOV      r3,#0x200
000018  4622              MOV      r2,r4
00001a  f7fffffe          BL       USBH_GetDescriptor
00001e  ea5f0900          MOVS     r9,r0
000022  d007              BEQ      |L4.52|
000024  e013              B        |L4.78|
                  |L4.38|
;;;162                                      phost,
;;;163                                      USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
;;;164                                      USB_DESC_CONFIGURATION, 
;;;165                                      pdev->host.Rx_Buffer,
;;;166                                      length)) == USBH_OK)
;;;167      {
;;;168        /*save Cfg descriptor for class parsing usage */
;;;169        for( ; index < length ; index ++)
;;;170        {
;;;171          USBH_CfgDesc[index] = pdev->host.Rx_Buffer[index];
000026  1939              ADDS     r1,r7,r4
000028  f8911110          LDRB     r1,[r1,#0x110]
00002c  5501              STRB     r1,[r0,r4]
00002e  1c64              ADDS     r4,r4,#1
000030  b2a4              UXTH     r4,r4                 ;169
000032  e000              B        |L4.54|
                  |L4.52|
000034  4807              LDR      r0,|L4.84|
                  |L4.54|
000036  42ac              CMP      r4,r5                 ;169
000038  d3f5              BCC      |L4.38|
;;;172        }
;;;173        
;;;174        /* Commands successfully sent and Response Received  */       
;;;175        USBH_ParseCfgDesc (&phost->device_prop.Cfg_Desc,
00003a  4643              MOV      r3,r8
00003c  f1060250          ADD      r2,r6,#0x50
000040  f106013e          ADD      r1,r6,#0x3e
000044  f1060034          ADD      r0,r6,#0x34
000048  9500              STR      r5,[sp,#0]
00004a  f7fffffe          BL       USBH_ParseCfgDesc
                  |L4.78|
;;;176                           phost->device_prop.Itf_Desc,
;;;177                           phost->device_prop.Ep_Desc, 
;;;178                           pdev->host.Rx_Buffer,
;;;179                           length); 
;;;180        
;;;181      }
;;;182      return status;
00004e  4648              MOV      r0,r9
;;;183    }
000050  e8bd87fc          POP      {r2-r10,pc}
;;;184    
                          ENDP

                  |L4.84|
                          DCD      ||.bss||

                          AREA ||i.USBH_Get_DevDesc||, CODE, READONLY, ALIGN=1

                  USBH_Get_DevDesc PROC
;;;120    */
;;;121    USBH_Status USBH_Get_DevDesc(USB_OTG_CORE_HANDLE *pdev,
000000  b57c              PUSH     {r2-r6,lr}
;;;122                                 USBH_HOST *phost,
;;;123                                 uint8_t length)
;;;124    {
000002  4616              MOV      r6,r2
000004  4604              MOV      r4,r0
;;;125      
;;;126      USBH_Status status;
;;;127      
;;;128      if((status = USBH_GetDescriptor(pdev, 
000006  f5007088          ADD      r0,r0,#0x110
00000a  e9cd0600          STRD     r0,r6,[sp,#0]
00000e  460d              MOV      r5,r1                 ;124
000010  f44f7380          MOV      r3,#0x100
000014  2200              MOVS     r2,#0
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       USBH_GetDescriptor
00001c  2800              CMP      r0,#0
00001e  d13c              BNE      |L5.154|
000020  f8941110          LDRB     r1,[r4,#0x110]
000024  f8051f22          STRB     r1,[r5,#0x22]!
000028  f8941111          LDRB     r1,[r4,#0x111]
00002c  7069              STRB     r1,[r5,#1]
00002e  f8941112          LDRB     r1,[r4,#0x112]
000032  f8942113          LDRB     r2,[r4,#0x113]
000036  2e08              CMP      r6,#8
000038  eb012102          ADD      r1,r1,r2,LSL #8
00003c  8069              STRH     r1,[r5,#2]
00003e  f8941114          LDRB     r1,[r4,#0x114]
000042  7129              STRB     r1,[r5,#4]
000044  f8941115          LDRB     r1,[r4,#0x115]
000048  7169              STRB     r1,[r5,#5]
00004a  f8941116          LDRB     r1,[r4,#0x116]
00004e  71a9              STRB     r1,[r5,#6]
000050  f8941117          LDRB     r1,[r4,#0x117]
000054  71e9              STRB     r1,[r5,#7]
000056  d920              BLS      |L5.154|
000058  f8941118          LDRB     r1,[r4,#0x118]
00005c  f8942119          LDRB     r2,[r4,#0x119]
000060  eb012102          ADD      r1,r1,r2,LSL #8
000064  8129              STRH     r1,[r5,#8]
000066  f894111a          LDRB     r1,[r4,#0x11a]
00006a  f894211b          LDRB     r2,[r4,#0x11b]
00006e  eb012102          ADD      r1,r1,r2,LSL #8
000072  8169              STRH     r1,[r5,#0xa]
000074  f894111c          LDRB     r1,[r4,#0x11c]
000078  f894211d          LDRB     r2,[r4,#0x11d]
00007c  eb012102          ADD      r1,r1,r2,LSL #8
000080  81a9              STRH     r1,[r5,#0xc]
000082  f894111e          LDRB     r1,[r4,#0x11e]
000086  73a9              STRB     r1,[r5,#0xe]
000088  f894111f          LDRB     r1,[r4,#0x11f]
00008c  73e9              STRB     r1,[r5,#0xf]
00008e  f8941120          LDRB     r1,[r4,#0x120]
000092  7429              STRB     r1,[r5,#0x10]
000094  f8941121          LDRB     r1,[r4,#0x121]
000098  7469              STRB     r1,[r5,#0x11]
                  |L5.154|
;;;129                                      phost,
;;;130                                      USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
;;;131                                      USB_DESC_DEVICE, 
;;;132                                      pdev->host.Rx_Buffer,
;;;133                                      length)) == USBH_OK)
;;;134      {
;;;135        /* Commands successfully sent and Response Received */       
;;;136        USBH_ParseDevDesc(&phost->device_prop.Dev_Desc, pdev->host.Rx_Buffer, length);
;;;137      }
;;;138      return status;      
;;;139    }
00009a  bd7c              POP      {r2-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.USBH_Get_StringDesc||, CODE, READONLY, ALIGN=1

                  USBH_Get_StringDesc PROC
;;;195    */
;;;196    USBH_Status USBH_Get_StringDesc(USB_OTG_CORE_HANDLE *pdev,
000000  b57c              PUSH     {r2-r6,lr}
;;;197                                    USBH_HOST *phost,
;;;198                                    uint8_t string_index, 
;;;199                                    uint8_t *buff, 
;;;200                                    uint16_t length)
;;;201    {
;;;202      USBH_Status status;
;;;203      
;;;204      if((status = USBH_GetDescriptor(pdev,
000002  f5007588          ADD      r5,r0,#0x110
000006  9e06              LDR      r6,[sp,#0x18]
000008  461c              MOV      r4,r3                 ;201
00000a  e9cd5600          STRD     r5,r6,[sp,#0]
00000e  f4427340          ORR      r3,r2,#0x300
000012  2200              MOVS     r2,#0
000014  f7fffffe          BL       USBH_GetDescriptor
000018  2800              CMP      r0,#0
00001a  d114              BNE      |L6.70|
00001c  7869              LDRB     r1,[r5,#1]
00001e  2903              CMP      r1,#3
000020  d111              BNE      |L6.70|
000022  7829              LDRB     r1,[r5,#0]
000024  1e8a              SUBS     r2,r1,#2
000026  42b2              CMP      r2,r6
000028  dc00              BGT      |L6.44|
00002a  4616              MOV      r6,r2
                  |L6.44|
00002c  2100              MOVS     r1,#0
00002e  b2b2              UXTH     r2,r6
000030  1cad              ADDS     r5,r5,#2
000032  e004              B        |L6.62|
                  |L6.52|
000034  5c6b              LDRB     r3,[r5,r1]
000036  1c89              ADDS     r1,r1,#2
000038  f8043b01          STRB     r3,[r4],#1
00003c  b289              UXTH     r1,r1
                  |L6.62|
00003e  4291              CMP      r1,r2
000040  d3f8              BCC      |L6.52|
000042  2100              MOVS     r1,#0
000044  7021              STRB     r1,[r4,#0]
                  |L6.70|
;;;205                                      phost,
;;;206                                      USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                                    
;;;207                                      USB_DESC_STRING | string_index, 
;;;208                                      pdev->host.Rx_Buffer,
;;;209                                      length)) == USBH_OK)
;;;210      {
;;;211        /* Commands successfully sent and Response Received  */       
;;;212        USBH_ParseStringDesc(pdev->host.Rx_Buffer,buff, length);    
;;;213      }
;;;214      return status;
;;;215    }
000046  bd7c              POP      {r2-r6,pc}
;;;216    
                          ENDP


                          AREA ||i.USBH_ParseCfgDesc||, CODE, READONLY, ALIGN=2

                  USBH_ParseCfgDesc PROC
;;;397    */
;;;398    static void  USBH_ParseCfgDesc (USBH_CfgDesc_TypeDef* cfg_desc,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;399                                    USBH_InterfaceDesc_TypeDef* itf_desc,
;;;400                                    USBH_EpDesc_TypeDef   ep_desc[][USBH_MAX_NUM_ENDPOINTS], 
;;;401                                    uint8_t *buf, 
;;;402                                    uint16_t length)
;;;403    {  
000004  b085              SUB      sp,sp,#0x14
000006  4607              MOV      r7,r0
;;;404      USBH_InterfaceDesc_TypeDef    *pif ;
;;;405      USBH_InterfaceDesc_TypeDef    temp_pif ;  
;;;406      USBH_EpDesc_TypeDef           *pep;  
;;;407      USBH_DescHeader_t             *pdesc = (USBH_DescHeader_t *)buf;
;;;408      uint16_t                      ptr;
;;;409      int8_t                        if_ix = 0;
;;;410      int8_t                        ep_ix = 0;  
;;;411      static uint16_t               prev_ep_size = 0;
;;;412      static uint8_t                prev_itf = 0;  
;;;413      
;;;414      
;;;415      pdesc   = (USBH_DescHeader_t *)buf;
;;;416      
;;;417      /* Parse configuration descriptor */
;;;418      cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
000008  7818              LDRB     r0,[r3,#0]
00000a  9912              LDR      r1,[sp,#0x48]
00000c  7038              STRB     r0,[r7,#0]
;;;419      cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
00000e  7858              LDRB     r0,[r3,#1]
000010  7078              STRB     r0,[r7,#1]
000012  4692              MOV      r10,r2                ;403
;;;420      cfg_desc->wTotalLength        = LE16 (buf + 2);
000014  7898              LDRB     r0,[r3,#2]
000016  78da              LDRB     r2,[r3,#3]
000018  461c              MOV      r4,r3                 ;407
00001a  eb002002          ADD      r0,r0,r2,LSL #8
00001e  8078              STRH     r0,[r7,#2]
;;;421      cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
000020  7918              LDRB     r0,[r3,#4]
000022  7138              STRB     r0,[r7,#4]
;;;422      cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
000024  795a              LDRB     r2,[r3,#5]
000026  717a              STRB     r2,[r7,#5]
;;;423      cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
000028  799a              LDRB     r2,[r3,#6]
00002a  71ba              STRB     r2,[r7,#6]
;;;424      cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
00002c  79da              LDRB     r2,[r3,#7]
00002e  71fa              STRB     r2,[r7,#7]
;;;425      cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
000030  7a22              LDRB     r2,[r4,#8]
000032  723a              STRB     r2,[r7,#8]
;;;426      
;;;427      
;;;428      if (length > USB_CONFIGURATION_DESC_SIZE)
000034  2909              CMP      r1,#9
000036  d96d              BLS      |L7.276|
;;;429      {
;;;430        ptr = USB_LEN_CFG_DESC;
000038  2109              MOVS     r1,#9
;;;431        
;;;432        if ( cfg_desc->bNumInterfaces <= USBH_MAX_NUM_INTERFACES) 
;;;433        {
;;;434          pif = (USBH_InterfaceDesc_TypeDef *)0;
;;;435          
;;;436          while (ptr < cfg_desc->wTotalLength ) 
;;;437          {
;;;438            pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
;;;439            if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
;;;440            {
;;;441              if_ix             = *(((uint8_t *)pdesc ) + 2);
;;;442              pif               = &itf_desc[if_ix];
;;;443              
;;;444              if((*((uint8_t *)pdesc + 3)) < 3)
;;;445              {
;;;446              USBH_ParseInterfaceDesc (&temp_pif, (uint8_t *)pdesc);            
;;;447              ep_ix = 0;
;;;448              
;;;449              /* Parse Ep descriptors relative to the current interface */
;;;450              if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
;;;451              {          
;;;452                while (ep_ix < temp_pif.bNumEndpoints) 
;;;453                {
;;;454                  pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
;;;455                  if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
;;;456                  {  
;;;457                    pep               = &ep_desc[if_ix][ep_ix];
;;;458                    
;;;459                    if(prev_itf != if_ix)
00003a  f8df80e0          LDR      r8,|L7.284|
00003e  f8ad100c          STRH     r1,[sp,#0xc]          ;430
000042  2802              CMP      r0,#2                 ;432
000044  d95c              BLS      |L7.256|
000046  e060              B        |L7.266|
                  |L7.72|
000048  a903              ADD      r1,sp,#0xc            ;438
00004a  4620              MOV      r0,r4                 ;438
00004c  f7fffffe          BL       USBH_GetNextDesc
000050  4604              MOV      r4,r0                 ;438
000052  7840              LDRB     r0,[r0,#1]            ;439
000054  2804              CMP      r0,#4                 ;439
000056  d153              BNE      |L7.256|
000058  f9946002          LDRSB    r6,[r4,#2]            ;441
00005c  9806              LDR      r0,[sp,#0x18]         ;442
00005e  eb0601c6          ADD      r1,r6,r6,LSL #3       ;442
000062  eb010b00          ADD      r11,r1,r0             ;442
000066  78e0              LDRB     r0,[r4,#3]            ;444
000068  2803              CMP      r0,#3                 ;444
00006a  d249              BCS      |L7.256|
00006c  4621              MOV      r1,r4                 ;446
00006e  4668              MOV      r0,sp                 ;446
000070  f7fffffe          BL       USBH_ParseInterfaceDesc
000074  f89d0004          LDRB     r0,[sp,#4]            ;450
000078  2500              MOVS     r5,#0                 ;447
00007a  2802              CMP      r0,#2                 ;450
00007c  d840              BHI      |L7.256|
00007e  e03b              B        |L7.248|
                  |L7.128|
000080  a903              ADD      r1,sp,#0xc            ;454
000082  4620              MOV      r0,r4                 ;454
000084  f7fffffe          BL       USBH_GetNextDesc
000088  4604              MOV      r4,r0                 ;454
00008a  7840              LDRB     r0,[r0,#1]            ;455
00008c  2805              CMP      r0,#5                 ;455
00008e  d133              BNE      |L7.248|
000090  eb0a1006          ADD      r0,r10,r6,LSL #4      ;457
000094  eb0009c5          ADD      r9,r0,r5,LSL #3       ;457
000098  f8980000          LDRB     r0,[r8,#0]  ; prev_itf
00009c  42b0              CMP      r0,r6
00009e  d002              BEQ      |L7.166|
;;;460                    {
;;;461                      prev_itf = if_ix;
0000a0  f8886000          STRB     r6,[r8,#0]
;;;462                      USBH_ParseInterfaceDesc (pif, (uint8_t *)&temp_pif); 
0000a4  e007              B        |L7.182|
                  |L7.166|
;;;463                    }
;;;464                    else
;;;465                    {
;;;466                      if(prev_ep_size > LE16((uint8_t *)pdesc + 4))
0000a6  7920              LDRB     r0,[r4,#4]
0000a8  7961              LDRB     r1,[r4,#5]
0000aa  eb002101          ADD      r1,r0,r1,LSL #8
0000ae  f8b80002          LDRH     r0,[r8,#2]  ; prev_ep_size
0000b2  4281              CMP      r1,r0
0000b4  d324              BCC      |L7.256|
                  |L7.182|
;;;467                      {
;;;468                        break;
;;;469                      }
;;;470                      else
;;;471                      {
;;;472                        USBH_ParseInterfaceDesc (pif, (uint8_t *)&temp_pif);    
0000b6  4669              MOV      r1,sp
0000b8  4658              MOV      r0,r11
0000ba  f7fffffe          BL       USBH_ParseInterfaceDesc
0000be  7821              LDRB     r1,[r4,#0]
0000c0  f8891000          STRB     r1,[r9,#0]
0000c4  7861              LDRB     r1,[r4,#1]
0000c6  f8891001          STRB     r1,[r9,#1]
0000ca  78a1              LDRB     r1,[r4,#2]
0000cc  f8891002          STRB     r1,[r9,#2]
0000d0  78e1              LDRB     r1,[r4,#3]
0000d2  f8891003          STRB     r1,[r9,#3]
0000d6  7921              LDRB     r1,[r4,#4]
0000d8  7962              LDRB     r2,[r4,#5]
;;;473                      }
;;;474                    }
;;;475                    USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
;;;476                    prev_ep_size = LE16((uint8_t *)pdesc + 4);
0000da  1c6d              ADDS     r5,r5,#1
0000dc  eb012102          ADD      r1,r1,r2,LSL #8
0000e0  f8a91004          STRH     r1,[r9,#4]
0000e4  79a1              LDRB     r1,[r4,#6]
0000e6  f8891006          STRB     r1,[r9,#6]
0000ea  7920              LDRB     r0,[r4,#4]
0000ec  7961              LDRB     r1,[r4,#5]
;;;477                    ep_ix++;
0000ee  b26d              SXTB     r5,r5
0000f0  eb002001          ADD      r0,r0,r1,LSL #8       ;476
0000f4  f8a80002          STRH     r0,[r8,#2]            ;476
                  |L7.248|
0000f8  f89d0004          LDRB     r0,[sp,#4]            ;452
0000fc  42a8              CMP      r0,r5                 ;452
0000fe  dcbf              BGT      |L7.128|
                  |L7.256|
000100  8878              LDRH     r0,[r7,#2]            ;436
000102  f8bd100c          LDRH     r1,[sp,#0xc]          ;436
000106  4288              CMP      r0,r1                 ;436
000108  d89e              BHI      |L7.72|
                  |L7.266|
;;;478                  }
;;;479                }
;;;480              }
;;;481             }
;;;482            }
;;;483          }
;;;484        }
;;;485        prev_ep_size = 0;
00010a  2000              MOVS     r0,#0
00010c  f8a80002          STRH     r0,[r8,#2]
;;;486        prev_itf = 0; 
000110  f8880000          STRB     r0,[r8,#0]
                  |L7.276|
;;;487      }  
;;;488    }
000114  b009              ADD      sp,sp,#0x24
000116  e8bd8ff0          POP      {r4-r11,pc}
;;;489    
                          ENDP

00011a  0000              DCW      0x0000
                  |L7.284|
                          DCD      ||.data||

                          AREA ||i.USBH_ParseInterfaceDesc||, CODE, READONLY, ALIGN=1

                  USBH_ParseInterfaceDesc PROC
;;;497    */
;;;498    static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
000000  780a              LDRB     r2,[r1,#0]
;;;499                                          uint8_t *buf)
;;;500    {
;;;501      if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
000002  7002              STRB     r2,[r0,#0]
;;;502      if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
000004  784a              LDRB     r2,[r1,#1]
000006  7042              STRB     r2,[r0,#1]
;;;503      if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
000008  788a              LDRB     r2,[r1,#2]
00000a  7082              STRB     r2,[r0,#2]
;;;504      if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
00000c  78ca              LDRB     r2,[r1,#3]
00000e  70c2              STRB     r2,[r0,#3]
;;;505      if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
000010  790a              LDRB     r2,[r1,#4]
000012  7102              STRB     r2,[r0,#4]
;;;506      if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
000014  794a              LDRB     r2,[r1,#5]
000016  7142              STRB     r2,[r0,#5]
;;;507      if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
000018  798a              LDRB     r2,[r1,#6]
00001a  7182              STRB     r2,[r0,#6]
;;;508      if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
00001c  79ca              LDRB     r2,[r1,#7]
00001e  71c2              STRB     r2,[r0,#7]
;;;509      if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
000020  7a09              LDRB     r1,[r1,#8]
000022  7201              STRB     r1,[r0,#8]
;;;510    }
000024  4770              BX       lr
;;;511    
                          ENDP


                          AREA ||i.USBH_SetAddress||, CODE, READONLY, ALIGN=1

                  USBH_SetAddress PROC
;;;257    */
;;;258    USBH_Status USBH_SetAddress(USB_OTG_CORE_HANDLE *pdev, 
000000  b430              PUSH     {r4,r5}
;;;259                                USBH_HOST *phost,
;;;260                                uint8_t DeviceAddress)
;;;261    {
;;;262      phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
000002  2300              MOVS     r3,#0
000004  750b              STRB     r3,[r1,#0x14]
;;;263        USB_REQ_TYPE_STANDARD;
;;;264      
;;;265      phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
000006  2405              MOVS     r4,#5
000008  754c              STRB     r4,[r1,#0x15]
;;;266      
;;;267      phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
00000a  82ca              STRH     r2,[r1,#0x16]
;;;268      phost->Control.setup.b.wIndex.w = 0;
00000c  830b              STRH     r3,[r1,#0x18]
;;;269      phost->Control.setup.b.wLength.w = 0;
00000e  834b              STRH     r3,[r1,#0x1a]
;;;270      
;;;271      return USBH_CtlReq(pdev, phost, 0 , 0 );
000010  bc30              POP      {r4,r5}
000012  461a              MOV      r2,r3
000014  f7ffbffe          B.W      USBH_CtlReq
;;;272    }
;;;273    
                          ENDP


                          AREA ||i.USBH_SetCfg||, CODE, READONLY, ALIGN=1

                  USBH_SetCfg PROC
;;;280    */
;;;281    USBH_Status USBH_SetCfg(USB_OTG_CORE_HANDLE *pdev, 
000000  b430              PUSH     {r4,r5}
;;;282                            USBH_HOST *phost,
;;;283                            uint16_t cfg_idx)
;;;284    {
;;;285      
;;;286      phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
000002  2300              MOVS     r3,#0
000004  750b              STRB     r3,[r1,#0x14]
;;;287        USB_REQ_TYPE_STANDARD;
;;;288      phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
000006  2409              MOVS     r4,#9
000008  754c              STRB     r4,[r1,#0x15]
;;;289      phost->Control.setup.b.wValue.w = cfg_idx;
00000a  82ca              STRH     r2,[r1,#0x16]
;;;290      phost->Control.setup.b.wIndex.w = 0;
00000c  830b              STRH     r3,[r1,#0x18]
;;;291      phost->Control.setup.b.wLength.w = 0;           
00000e  834b              STRH     r3,[r1,#0x1a]
;;;292      
;;;293      return USBH_CtlReq(pdev, phost, 0 , 0 );      
000010  bc30              POP      {r4,r5}
000012  461a              MOV      r2,r3
000014  f7ffbffe          B.W      USBH_CtlReq
;;;294    }
;;;295    
                          ENDP


                          AREA ||i.USBH_SetInterface||, CODE, READONLY, ALIGN=1

                  USBH_SetInterface PROC
;;;302    */
;;;303    USBH_Status USBH_SetInterface(USB_OTG_CORE_HANDLE *pdev, 
000000  b430              PUSH     {r4,r5}
;;;304                            USBH_HOST *phost,
;;;305                            uint8_t ep_num, uint8_t altSetting)
;;;306    {
;;;307      
;;;308      
;;;309      phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
000002  2401              MOVS     r4,#1
000004  750c              STRB     r4,[r1,#0x14]
;;;310        USB_REQ_TYPE_STANDARD;
;;;311      
;;;312      phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
000006  240b              MOVS     r4,#0xb
000008  754c              STRB     r4,[r1,#0x15]
;;;313      phost->Control.setup.b.wValue.w = altSetting;
00000a  82cb              STRH     r3,[r1,#0x16]
;;;314      phost->Control.setup.b.wIndex.w = ep_num;
00000c  830a              STRH     r2,[r1,#0x18]
;;;315      phost->Control.setup.b.wLength.w = 0;           
00000e  2200              MOVS     r2,#0
000010  834a              STRH     r2,[r1,#0x1a]
;;;316     
;;;317      return USBH_CtlReq(pdev, phost, 0 , 0 );     
000012  bc30              POP      {r4,r5}
000014  4613              MOV      r3,r2
000016  f7ffbffe          B.W      USBH_CtlReq
;;;318    }
;;;319    /**
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  USBH_CfgDesc
                          %        512

                          AREA ||.data||, DATA, ALIGN=1

                  prev_itf
000000  0000              DCB      0x00,0x00
                  prev_ep_size
000002  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "..\\USB\\STM32_USB_HOST_Library\\Core\\src\\usbh_stdreq.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_usbh_stdreq_c_3531d2fa____REV16|
#line 129 "E:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_usbh_stdreq_c_3531d2fa____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_usbh_stdreq_c_3531d2fa____REVSH|
#line 144
|__asm___13_usbh_stdreq_c_3531d2fa____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
